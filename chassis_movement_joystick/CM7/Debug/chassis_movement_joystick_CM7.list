
chassis_movement_joystick_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08014860  08014860  00024860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d60  08014d60  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08014d60  08014d60  00024d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d68  08014d68  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d68  08014d68  00024d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d6c  08014d6c  00024d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  08014d70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054dc  240001dc  08014f4c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240056b8  08014f4c  000356b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c846  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ffb  00000000  00000000  0005ca93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002208  00000000  00000000  00061a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a6d  00000000  00000000  00063c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003fb0a  00000000  00000000  00065705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ae28  00000000  00000000  000a520f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a7b7d  00000000  00000000  000d0037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a6b4  00000000  00000000  00277bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00282268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014848 	.word	0x08014848

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08014848 	.word	0x08014848

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000baa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bac:	bf00      	nop
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <main+0xe4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d004      	beq.n	8000bc4 <main+0x24>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1e5a      	subs	r2, r3, #1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dcf4      	bgt.n	8000bae <main+0xe>
  if ( timeout < 0 )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da01      	bge.n	8000bce <main+0x2e>
  {
  Error_Handler();
 8000bca:	f000 fe25 	bl	8001818 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f001 fb05 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f865 	bl	8000ca0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bd6:	f000 f8e1 	bl	8000d9c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <main+0xe4>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <main+0xe4>)
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <main+0xe4>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f005 fb85 	bl	8006308 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f005 fb9b 	bl	800633c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c0c:	bf00      	nop
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <main+0xe4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <main+0x84>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dcf4      	bgt.n	8000c0e <main+0x6e>
if ( timeout < 0 )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <main+0x8e>
{
Error_Handler();
 8000c2a:	f000 fdf5 	bl	8001818 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fc5b 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c32:	f000 fc31 	bl	8001498 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 fbb1 	bl	800139c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c3a:	f000 fbfb 	bl	8001434 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM8_Init();
 8000c3e:	f000 fb53 	bl	80012e8 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000c42:	f000 fafb 	bl	800123c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000c46:	f000 fa0b 	bl	8001060 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c4a:	f000 fa7f 	bl	800114c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000c4e:	f000 f9b3 	bl	8000fb8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c52:	f000 f8d3 	bl	8000dfc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c56:	f000 f949 	bl	8000eec <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c5a:	f00c fd2b 	bl	800d6b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <main+0xe8>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <main+0xec>)
 8000c64:	f00c fd70 	bl	800d748 <osThreadNew>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <main+0xf0>)
 8000c6c:	6013      	str	r3, [r2, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(StartJoystick, NULL, &Joystick_attributes);
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <main+0xf4>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <main+0xf8>)
 8000c74:	f00c fd68 	bl	800d748 <osThreadNew>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <main+0xfc>)
 8000c7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c7e:	f00c fd3d 	bl	800d6fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <main+0xe2>
 8000c84:	58024400 	.word	0x58024400
 8000c88:	080148bc 	.word	0x080148bc
 8000c8c:	08001619 	.word	0x08001619
 8000c90:	24000acc 	.word	0x24000acc
 8000c94:	080148e0 	.word	0x080148e0
 8000c98:	08001629 	.word	0x08001629
 8000c9c:	24000ad0 	.word	0x24000ad0

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09c      	sub	sp, #112	; 0x70
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	224c      	movs	r2, #76	; 0x4c
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f010 fab7 	bl	8011222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f010 fab1 	bl	8011222 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f005 fc97 	bl	80065f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <SystemClock_Config+0xf4>)
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <SystemClock_Config+0xf4>)
 8000cd0:	f023 0301 	bic.w	r3, r3, #1
 8000cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <SystemClock_Config+0xf4>)
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <SystemClock_Config+0xf8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce8:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <SystemClock_Config+0xf8>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <SystemClock_Config+0xf8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cfc:	bf00      	nop
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <SystemClock_Config+0xf8>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d0a:	d1f8      	bne.n	8000cfe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000d22:	2312      	movs	r3, #18
 8000d24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d32:	230c      	movs	r3, #12
 8000d34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d36:	2302      	movs	r3, #2
 8000d38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000d3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fcbf 	bl	80066c8 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d50:	f000 fd62 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	233f      	movs	r3, #63	; 0x3f
 8000d56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d68:	2340      	movs	r3, #64	; 0x40
 8000d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 f8fe 	bl	8006f7c <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d86:	f000 fd47 	bl	8001818 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3770      	adds	r7, #112	; 0x70
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	58000400 	.word	0x58000400
 8000d98:	58024800 	.word	0x58024800

08000d9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0b0      	sub	sp, #192	; 0xc0
 8000da0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	22c0      	movs	r2, #192	; 0xc0
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f010 fa3a 	bl	8011222 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dce:	23c0      	movs	r3, #192	; 0xc0
 8000dd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000dd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 fc97 	bl	8007718 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000df0:	f000 fd12 	bl	8001818 <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	37c0      	adds	r7, #192	; 0xc0
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e22:	4a30      	ldr	r2, [pc, #192]	; (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e7e:	f001 fc1b 	bl	80026b8 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e88:	f000 fcc6 	bl	8001818 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e98:	f002 fc88 	bl	80037ac <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000ea2:	f000 fcb9 	bl	8001818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_ADC1_Init+0xec>)
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000eca:	f001 ff63 	bl	8002d94 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ed4:	f000 fca0 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	240001f8 	.word	0x240001f8
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	4b840000 	.word	0x4b840000

08000eec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <MX_ADC2_Init+0xc4>)
 8000f08:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f62:	f001 fba9 	bl	80026b8 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000f6c:	f000 fc54 	bl	8001818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_ADC2_Init+0xc8>)
 8000f72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f80:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f82:	2304      	movs	r3, #4
 8000f84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC2_Init+0xc0>)
 8000f94:	f001 fefe 	bl	8002d94 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f9e:	f000 fc3b 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2400025c 	.word	0x2400025c
 8000fb0:	40022100 	.word	0x40022100
 8000fb4:	4fb80000 	.word	0x4fb80000

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <MX_TIM1_Init+0xa4>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000fde:	224a      	movs	r2, #74	; 0x4a
 8000fe0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000fea:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_TIM1_Init+0xa0>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <MX_TIM1_Init+0xa0>)
 8001004:	f009 f886 	bl	800a114 <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800100e:	f000 fc03 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_TIM1_Init+0xa0>)
 8001020:	f009 fc84 	bl	800a92c <HAL_TIM_ConfigClockSource>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800102a:	f000 fbf5 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_TIM1_Init+0xa0>)
 8001040:	f00a f9a2 	bl	800b388 <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800104a:	f000 fbe5 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	240002c0 	.word	0x240002c0
 800105c:	40010000 	.word	0x40010000

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	; 0x38
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <MX_TIM2_Init+0xe8>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_TIM2_Init+0xe8>)
 800109c:	224b      	movs	r2, #75	; 0x4b
 800109e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010a8:	f240 729e 	movw	r2, #1950	; 0x79e
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ba:	4823      	ldr	r0, [pc, #140]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010bc:	f009 f82a 	bl	800a114 <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010c6:	f000 fba7 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d4:	4619      	mov	r1, r3
 80010d6:	481c      	ldr	r0, [pc, #112]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010d8:	f009 fc28 	bl	800a92c <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010e2:	f000 fb99 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e6:	4818      	ldr	r0, [pc, #96]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010e8:	f009 f8e4 	bl	800a2b4 <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010f2:	f000 fb91 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <MX_TIM2_Init+0xe8>)
 8001106:	f00a f93f 	bl	800b388 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001110:	f000 fb82 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM2_Init+0xe8>)
 800112c:	f009 faea 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001136:	f000 fb6f 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM2_Init+0xe8>)
 800113c:	f000 fcf2 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3738      	adds	r7, #56	; 0x38
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2400030c 	.word	0x2400030c

0800114c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_TIM3_Init+0xe8>)
 8001180:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <MX_TIM3_Init+0xec>)
 8001182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_TIM3_Init+0xe8>)
 8001186:	224b      	movs	r2, #75	; 0x4b
 8001188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_TIM3_Init+0xe8>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_TIM3_Init+0xe8>)
 8001192:	f240 729e 	movw	r2, #1950	; 0x79e
 8001196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_TIM3_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <MX_TIM3_Init+0xe8>)
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a4:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_TIM3_Init+0xe8>)
 80011a6:	f008 ffb5 	bl	800a114 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011b0:	f000 fb32 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011be:	4619      	mov	r1, r3
 80011c0:	481c      	ldr	r0, [pc, #112]	; (8001234 <MX_TIM3_Init+0xe8>)
 80011c2:	f009 fbb3 	bl	800a92c <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011cc:	f000 fb24 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <MX_TIM3_Init+0xe8>)
 80011d2:	f009 f86f 	bl	800a2b4 <HAL_TIM_PWM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011dc:	f000 fb1c 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_TIM3_Init+0xe8>)
 80011f0:	f00a f8ca 	bl	800b388 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011fa:	f000 fb0d 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	2360      	movs	r3, #96	; 0x60
 8001200:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM3_Init+0xe8>)
 8001216:	f009 fa75 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001220:	f000 fafa 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM3_Init+0xe8>)
 8001226:	f000 fc7d 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3738      	adds	r7, #56	; 0x38
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000358 	.word	0x24000358
 8001238:	40000400 	.word	0x40000400

0800123c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2224      	movs	r2, #36	; 0x24
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00f ffe9 	bl	8011222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_TIM4_Init+0xa4>)
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <MX_TIM4_Init+0xa8>)
 800125e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_TIM4_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_TIM4_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_TIM4_Init+0xa4>)
 800126e:	f240 221a 	movw	r2, #538	; 0x21a
 8001272:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM4_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM4_Init+0xa4>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001280:	2303      	movs	r3, #3
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001298:	2301      	movs	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM4_Init+0xa4>)
 80012ac:	f009 f864 	bl	800a378 <HAL_TIM_Encoder_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012b6:	f000 faaf 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM4_Init+0xa4>)
 80012c8:	f00a f85e 	bl	800b388 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012d2:	f000 faa1 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	240003a4 	.word	0x240003a4
 80012e4:	40000800 	.word	0x40000800

080012e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00f ff93 	bl	8011222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_TIM8_Init+0xac>)
 8001308:	4a23      	ldr	r2, [pc, #140]	; (8001398 <MX_TIM8_Init+0xb0>)
 800130a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_TIM8_Init+0xac>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_TIM8_Init+0xac>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_TIM8_Init+0xac>)
 800131a:	f240 221a 	movw	r2, #538	; 0x21a
 800131e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_TIM8_Init+0xac>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_TIM8_Init+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_TIM8_Init+0xac>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001332:	2303      	movs	r3, #3
 8001334:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_TIM8_Init+0xac>)
 800135e:	f009 f80b 	bl	800a378 <HAL_TIM_Encoder_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001368:	f000 fa56 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_TIM8_Init+0xac>)
 800137e:	f00a f803 	bl	800b388 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001388:	f000 fa46 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3730      	adds	r7, #48	; 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	240003f0 	.word	0x240003f0
 8001398:	40010400 	.word	0x40010400

0800139c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_USART3_UART_Init+0x94>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013e6:	f00a f87b 	bl	800b4e0 <HAL_UART_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013f0:	f000 fa12 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013f8:	f00b fd44 	bl	800ce84 <HAL_UARTEx_SetTxFifoThreshold>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001402:	f000 fa09 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4808      	ldr	r0, [pc, #32]	; (800142c <MX_USART3_UART_Init+0x90>)
 800140a:	f00b fd79 	bl	800cf00 <HAL_UARTEx_SetRxFifoThreshold>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001414:	f000 fa00 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_USART3_UART_Init+0x90>)
 800141a:	f00b fcfa 	bl	800ce12 <HAL_UARTEx_DisableFifoMode>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001424:	f000 f9f8 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2400043c 	.word	0x2400043c
 8001430:	40004800 	.word	0x40004800

08001434 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800143c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001440:	2209      	movs	r2, #9
 8001442:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001446:	2202      	movs	r2, #2
 8001448:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001452:	2202      	movs	r2, #2
 8001454:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146a:	2201      	movs	r2, #1
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001470:	2201      	movs	r2, #1
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001476:	2200      	movs	r2, #0
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147c:	f004 ff72 	bl	8006364 <HAL_PCD_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001486:	f000 f9c7 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	240005c0 	.word	0x240005c0
 8001494:	40080000 	.word	0x40080000

08001498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_DMA_Init+0x4c>)
 80014a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <MX_DMA_Init+0x4c>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MX_DMA_Init+0x4c>)
 80014b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2105      	movs	r1, #5
 80014c0:	200b      	movs	r0, #11
 80014c2:	f002 fb09 	bl	8003ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014c6:	200b      	movs	r0, #11
 80014c8:	f002 fb20 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2105      	movs	r1, #5
 80014d0:	200c      	movs	r0, #12
 80014d2:	f002 fb01 	bl	8003ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014d6:	200c      	movs	r0, #12
 80014d8:	f002 fb18 	bl	8003b0c <HAL_NVIC_EnableIRQ>

}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	58024400 	.word	0x58024400

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <MX_GPIO_Init+0x124>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	4a41      	ldr	r2, [pc, #260]	; (800160c <MX_GPIO_Init+0x124>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <MX_GPIO_Init+0x124>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151c:	4b3b      	ldr	r3, [pc, #236]	; (800160c <MX_GPIO_Init+0x124>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	4a3a      	ldr	r2, [pc, #232]	; (800160c <MX_GPIO_Init+0x124>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152c:	4b37      	ldr	r3, [pc, #220]	; (800160c <MX_GPIO_Init+0x124>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b34      	ldr	r3, [pc, #208]	; (800160c <MX_GPIO_Init+0x124>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	4a32      	ldr	r2, [pc, #200]	; (800160c <MX_GPIO_Init+0x124>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <MX_GPIO_Init+0x124>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_GPIO_Init+0x124>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	4a2b      	ldr	r2, [pc, #172]	; (800160c <MX_GPIO_Init+0x124>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_GPIO_Init+0x124>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_GPIO_Init+0x124>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	4a23      	ldr	r2, [pc, #140]	; (800160c <MX_GPIO_Init+0x124>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_GPIO_Init+0x124>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_GPIO_Init+0x124>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <MX_GPIO_Init+0x124>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_GPIO_Init+0x124>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f244 0101 	movw	r1, #16385	; 0x4001
 80015b8:	4815      	ldr	r0, [pc, #84]	; (8001610 <MX_GPIO_Init+0x128>)
 80015ba:	f004 fe8b 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_GPIO_Init+0x12c>)
 80015c4:	f004 fe86 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80015c8:	f244 0301 	movw	r3, #16385	; 0x4001
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <MX_GPIO_Init+0x128>)
 80015e2:	f004 fcc7 	bl	8005f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_GPIO_Init+0x12c>)
 80015fe:	f004 fcb9 	bl	8005f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	58024400 	.word	0x58024400
 8001610:	58020400 	.word	0x58020400
 8001614:	58021000 	.word	0x58021000

08001618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f00c f923 	bl	800d86c <osDelay>
 8001626:	e7fb      	b.n	8001620 <StartDefaultTask+0x8>

08001628 <StartJoystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystick */
void StartJoystick(void *argument)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af04      	add	r7, sp, #16
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystick */
  /* Infinite loop */
  for(;;)
  {
    //c = c + 1;
    HAL_ADC_Start(&hadc1);
 8001630:	4860      	ldr	r0, [pc, #384]	; (80017b4 <StartJoystick+0x18c>)
 8001632:	f001 f9e3 	bl	80029fc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001636:	f04f 31ff 	mov.w	r1, #4294967295
 800163a:	485e      	ldr	r0, [pc, #376]	; (80017b4 <StartJoystick+0x18c>)
 800163c:	f001 faa8 	bl	8002b90 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(&hadc1);
 8001640:	485c      	ldr	r0, [pc, #368]	; (80017b4 <StartJoystick+0x18c>)
 8001642:	f001 fb99 	bl	8002d78 <HAL_ADC_GetValue>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <StartJoystick+0x190>)
 800164c:	801a      	strh	r2, [r3, #0]
    osDelay(10U);
 800164e:	200a      	movs	r0, #10
 8001650:	f00c f90c 	bl	800d86c <osDelay>

    HAL_ADC_Start(&hadc2);
 8001654:	4859      	ldr	r0, [pc, #356]	; (80017bc <StartJoystick+0x194>)
 8001656:	f001 f9d1 	bl	80029fc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800165a:	f04f 31ff 	mov.w	r1, #4294967295
 800165e:	4857      	ldr	r0, [pc, #348]	; (80017bc <StartJoystick+0x194>)
 8001660:	f001 fa96 	bl	8002b90 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(&hadc2);
 8001664:	4855      	ldr	r0, [pc, #340]	; (80017bc <StartJoystick+0x194>)
 8001666:	f001 fb87 	bl	8002d78 <HAL_ADC_GetValue>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <StartJoystick+0x198>)
 8001670:	801a      	strh	r2, [r3, #0]
    osDelay(10U);
 8001672:	200a      	movs	r0, #10
 8001674:	f00c f8fa 	bl	800d86c <osDelay>

    x_axis = x_adc / 1000;
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <StartJoystick+0x190>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <StartJoystick+0x19c>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	b29b      	uxth	r3, r3
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <StartJoystick+0x1a0>)
 8001690:	edc3 7a00 	vstr	s15, [r3]
    y_axis = y_adc / 1000;
 8001694:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <StartJoystick+0x198>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <StartJoystick+0x19c>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	4b48      	ldr	r3, [pc, #288]	; (80017cc <StartJoystick+0x1a4>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]
    in_min = 1;
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <StartJoystick+0x1a8>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
    in_max = 65;
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <StartJoystick+0x1ac>)
 80016b8:	2241      	movs	r2, #65	; 0x41
 80016ba:	601a      	str	r2, [r3, #0]
    out_min = -1;
 80016bc:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <StartJoystick+0x1b0>)
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
 80016c2:	601a      	str	r2, [r3, #0]
    out_max = 1;
 80016c4:	4b45      	ldr	r3, [pc, #276]	; (80017dc <StartJoystick+0x1b4>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

    x_map = (x_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <StartJoystick+0x1a0>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <StartJoystick+0x1a8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <StartJoystick+0x1b4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <StartJoystick+0x1b0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <StartJoystick+0x1ac>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <StartJoystick+0x1a8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <StartJoystick+0x1b0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <StartJoystick+0x1b8>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
    y_map = (y_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <StartJoystick+0x1a4>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <StartJoystick+0x1a8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <StartJoystick+0x1b4>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <StartJoystick+0x1b0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <StartJoystick+0x1ac>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <StartJoystick+0x1a8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <StartJoystick+0x1b0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <StartJoystick+0x1bc>)
 8001776:	edc3 7a00 	vstr	s15, [r3]

    snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", x_map, y_map);
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <StartJoystick+0x1b8>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <StartJoystick+0x1bc>)
 8001786:	edd3 6a00 	vldr	s13, [r3]
 800178a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800178e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001792:	ed8d 7b00 	vstr	d7, [sp]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <StartJoystick+0x1c0>)
 8001798:	2132      	movs	r1, #50	; 0x32
 800179a:	4814      	ldr	r0, [pc, #80]	; (80017ec <StartJoystick+0x1c4>)
 800179c:	f00f fcaa 	bl	80110f4 <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);// Sending in normal mode
 80017a0:	230a      	movs	r3, #10
 80017a2:	2232      	movs	r2, #50	; 0x32
 80017a4:	4911      	ldr	r1, [pc, #68]	; (80017ec <StartJoystick+0x1c4>)
 80017a6:	4812      	ldr	r0, [pc, #72]	; (80017f0 <StartJoystick+0x1c8>)
 80017a8:	f009 feea 	bl	800b580 <HAL_UART_Transmit>
	osDelay(250U);
 80017ac:	20fa      	movs	r0, #250	; 0xfa
 80017ae:	f00c f85d 	bl	800d86c <osDelay>
    HAL_ADC_Start(&hadc1);
 80017b2:	e73d      	b.n	8001630 <StartJoystick+0x8>
 80017b4:	240001f8 	.word	0x240001f8
 80017b8:	24000ad4 	.word	0x24000ad4
 80017bc:	2400025c 	.word	0x2400025c
 80017c0:	24000ad6 	.word	0x24000ad6
 80017c4:	10624dd3 	.word	0x10624dd3
 80017c8:	24000ad8 	.word	0x24000ad8
 80017cc:	24000adc 	.word	0x24000adc
 80017d0:	24000b14 	.word	0x24000b14
 80017d4:	24000b18 	.word	0x24000b18
 80017d8:	24000b1c 	.word	0x24000b1c
 80017dc:	24000b20 	.word	0x24000b20
 80017e0:	24000b24 	.word	0x24000b24
 80017e4:	24000b28 	.word	0x24000b28
 80017e8:	08014878 	.word	0x08014878
 80017ec:	24000ae0 	.word	0x24000ae0
 80017f0:	2400043c 	.word	0x2400043c

080017f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001806:	f000 fd25 	bl	8002254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40014800 	.word	0x40014800

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x38>)
 800182c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_MspInit+0x38>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_MspInit+0x38>)
 800183c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	210f      	movs	r1, #15
 800184c:	f06f 0001 	mvn.w	r0, #1
 8001850:	f002 f942 	bl	8003ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400

08001860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a39      	ldr	r2, [pc, #228]	; (8001964 <HAL_ADC_MspInit+0x104>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d133      	bne.n	80018ea <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_ADC_MspInit+0x108>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	4a37      	ldr	r2, [pc, #220]	; (8001968 <HAL_ADC_MspInit+0x108>)
 800188a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_ADC_MspInit+0x108>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10e      	bne.n	80018b2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_ADC_MspInit+0x10c>)
 8001896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <HAL_ADC_MspInit+0x10c>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_ADC_MspInit+0x10c>)
 80018a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_ADC_MspInit+0x10c>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a2c      	ldr	r2, [pc, #176]	; (800196c <HAL_ADC_MspInit+0x10c>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_ADC_MspInit+0x10c>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d0:	2310      	movs	r3, #16
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4823      	ldr	r0, [pc, #140]	; (8001970 <HAL_ADC_MspInit+0x110>)
 80018e4:	f004 fb46 	bl	8005f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018e8:	e037      	b.n	800195a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_ADC_MspInit+0x114>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d132      	bne.n	800195a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_ADC_MspInit+0x108>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_ADC_MspInit+0x108>)
 80018fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_ADC_MspInit+0x108>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10e      	bne.n	8001924 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_ADC_MspInit+0x10c>)
 8001908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <HAL_ADC_MspInit+0x10c>)
 800190e:	f043 0320 	orr.w	r3, r3, #32
 8001912:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_ADC_MspInit+0x10c>)
 8001918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_ADC_MspInit+0x10c>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_ADC_MspInit+0x10c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_ADC_MspInit+0x10c>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001942:	2320      	movs	r3, #32
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4806      	ldr	r0, [pc, #24]	; (8001970 <HAL_ADC_MspInit+0x110>)
 8001956:	f004 fb0d 	bl	8005f74 <HAL_GPIO_Init>
}
 800195a:	bf00      	nop
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000
 8001968:	24000b2c 	.word	0x24000b2c
 800196c:	58024400 	.word	0x58024400
 8001970:	58020000 	.word	0x58020000
 8001974:	40022100 	.word	0x40022100

08001978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <HAL_TIM_Base_MspInit+0x9c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d117      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 800198c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001990:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 800199c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2105      	movs	r1, #5
 80019ac:	2019      	movs	r0, #25
 80019ae:	f002 f893 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019b2:	2019      	movs	r0, #25
 80019b4:	f002 f8aa 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019b8:	e028      	b.n	8001a0c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c2:	d10f      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 80019c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 80019d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
}
 80019e2:	e013      	b.n	8001a0c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10e      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 80019f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f4:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_TIM_Base_MspInit+0xa0>)
 8001a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40010000 	.word	0x40010000
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	40000400 	.word	0x40000400

08001a20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a34      	ldr	r2, [pc, #208]	; (8001b10 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12f      	bne.n	8001aa2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a48:	4a32      	ldr	r2, [pc, #200]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 8001a7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481f      	ldr	r0, [pc, #124]	; (8001b18 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001a9c:	f004 fa6a 	bl	8005f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001aa0:	e032      	b.n	8001b08 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d12d      	bne.n	8001b08 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001af8:	2303      	movs	r3, #3
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x100>)
 8001b04:	f004 fa36 	bl	8005f74 <HAL_GPIO_Init>
}
 8001b08:	bf00      	nop
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40000800 	.word	0x40000800
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58020c00 	.word	0x58020c00
 8001b1c:	40010400 	.word	0x40010400
 8001b20:	58020800 	.word	0x58020800

08001b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d11f      	bne.n	8001b86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_TIM_MspPostInit+0xb4>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_TIM_MspPostInit+0xb4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_TIM_MspPostInit+0xb4>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2302      	movs	r3, #2
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b74:	2301      	movs	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4817      	ldr	r0, [pc, #92]	; (8001bdc <HAL_TIM_MspPostInit+0xb8>)
 8001b80:	f004 f9f8 	bl	8005f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b84:	e023      	b.n	8001bce <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_TIM_MspPostInit+0xbc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d11e      	bne.n	8001bce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_TIM_MspPostInit+0xb4>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_TIM_MspPostInit+0xb4>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_TIM_MspPostInit+0xb4>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <HAL_TIM_MspPostInit+0xb8>)
 8001bca:	f004 f9d3 	bl	8005f74 <HAL_GPIO_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020000 	.word	0x58020000
 8001be0:	40000400 	.word	0x40000400

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0ba      	sub	sp, #232	; 0xe8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	22c0      	movs	r2, #192	; 0xc0
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00f fb0c 	bl	8011222 <memset>
  if(huart->Instance==USART3)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <HAL_UART_MspInit+0x190>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	f040 80aa 	bne.w	8001d6a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c16:	f04f 0202 	mov.w	r2, #2
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f005 fd73 	bl	8007718 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001c38:	f7ff fdee 	bl	8001818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c3c:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_UART_MspInit+0x194>)
 8001c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c42:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_UART_MspInit+0x194>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_UART_MspInit+0x194>)
 8001c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_UART_MspInit+0x194>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	4a45      	ldr	r2, [pc, #276]	; (8001d78 <HAL_UART_MspInit+0x194>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_UART_MspInit+0x194>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c92:	2307      	movs	r3, #7
 8001c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4837      	ldr	r0, [pc, #220]	; (8001d7c <HAL_UART_MspInit+0x198>)
 8001ca0:	f004 f968 	bl	8005f74 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001ca6:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <HAL_UART_MspInit+0x1a0>)
 8001ca8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cac:	222d      	movs	r2, #45	; 0x2d
 8001cae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ce2:	4827      	ldr	r0, [pc, #156]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001ce4:	f001 ff20 	bl	8003b28 <HAL_DMA_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001cee:	f7ff fd93 	bl	8001818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001cfa:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <HAL_UART_MspInit+0x19c>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_UART_MspInit+0x1a8>)
 8001d04:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d08:	222e      	movs	r2, #46	; 0x2e
 8001d0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d40:	f001 fef2 	bl	8003b28 <HAL_DMA_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001d4a:	f7ff fd65 	bl	8001818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d52:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_UART_MspInit+0x1a4>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2105      	movs	r1, #5
 8001d5e:	2027      	movs	r0, #39	; 0x27
 8001d60:	f001 feba 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d64:	2027      	movs	r0, #39	; 0x27
 8001d66:	f001 fed1 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	37e8      	adds	r7, #232	; 0xe8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40004800 	.word	0x40004800
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58020c00 	.word	0x58020c00
 8001d80:	240004d0 	.word	0x240004d0
 8001d84:	40020010 	.word	0x40020010
 8001d88:	24000548 	.word	0x24000548
 8001d8c:	40020028 	.word	0x40020028

08001d90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0ba      	sub	sp, #232	; 0xe8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	22c0      	movs	r2, #192	; 0xc0
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f00f fa36 	bl	8011222 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a38      	ldr	r2, [pc, #224]	; (8001e9c <HAL_PCD_MspInit+0x10c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d169      	bne.n	8001e94 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001dc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001de0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001de4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001de6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dea:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 fc8d 	bl	8007718 <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001e04:	f7ff fd08 	bl	8001818 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e08:	f004 fc4e 	bl	80066a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_PCD_MspInit+0x110>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e12:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <HAL_PCD_MspInit+0x110>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_PCD_MspInit+0x110>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e2a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e44:	230a      	movs	r3, #10
 8001e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <HAL_PCD_MspInit+0x114>)
 8001e52:	f004 f88f 	bl	8005f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <HAL_PCD_MspInit+0x114>)
 8001e72:	f004 f87f 	bl	8005f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_PCD_MspInit+0x110>)
 8001e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_PCD_MspInit+0x110>)
 8001e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_PCD_MspInit+0x110>)
 8001e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	37e8      	adds	r7, #232	; 0xe8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40080000 	.word	0x40080000
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	58020000 	.word	0x58020000

08001ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	d844      	bhi.n	8001f40 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	2076      	movs	r0, #118	; 0x76
 8001ebc:	f001 fe0c 	bl	8003ad8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001ec0:	2076      	movs	r0, #118	; 0x76
 8001ec2:	f001 fe23 	bl	8003b0c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_InitTick+0xb0>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <HAL_InitTick+0xb4>)
 8001ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_InitTick+0xb4>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_InitTick+0xb4>)
 8001ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f005 fbcd 	bl	8007694 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001efa:	f005 fbb5 	bl	8007668 <HAL_RCC_GetPCLK2Freq>
 8001efe:	4603      	mov	r3, r0
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_InitTick+0xb8>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_InitTick+0xc0>)
 8001f16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f1e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001f20:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f34:	f008 f8ee 	bl	800a114 <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_InitTick+0xa6>
 8001f3e:	e001      	b.n	8001f44 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e005      	b.n	8001f50 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001f44:	4807      	ldr	r0, [pc, #28]	; (8001f64 <HAL_InitTick+0xbc>)
 8001f46:	f008 f93d 	bl	800a1c4 <HAL_TIM_Base_Start_IT>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3738      	adds	r7, #56	; 0x38
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	24000008 	.word	0x24000008
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	24000b30 	.word	0x24000b30
 8001f68:	40014800 	.word	0x40014800

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <DMA1_Stream0_IRQHandler+0x10>)
 8001f9e:	f002 fe83 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	240004d0 	.word	0x240004d0

08001fac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA1_Stream1_IRQHandler+0x10>)
 8001fb2:	f002 fe79 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	24000548 	.word	0x24000548

08001fc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM1_UP_IRQHandler+0x10>)
 8001fc6:	f008 fa7d 	bl	800a4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240002c0 	.word	0x240002c0

08001fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <USART3_IRQHandler+0x10>)
 8001fda:	f009 fb5f 	bl	800b69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2400043c 	.word	0x2400043c

08001fe8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM17_IRQHandler+0x10>)
 8001fee:	f008 fa69 	bl	800a4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	24000b30 	.word	0x24000b30

08001ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return 1;
 8002000:	2301      	movs	r3, #1
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_kill>:

int _kill(int pid, int sig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002016:	f00f f9bd 	bl	8011394 <__errno>
 800201a:	4603      	mov	r3, r0
 800201c:	2216      	movs	r2, #22
 800201e:	601a      	str	r2, [r3, #0]
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_exit>:

void _exit (int status)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffe7 	bl	800200c <_kill>
  while (1) {}    /* Make sure we hang here */
 800203e:	e7fe      	b.n	800203e <_exit+0x12>

08002040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
  }

  return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e009      	b.n	80020a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf1      	blt.n	800208c <_write+0x12>
  }
  return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_close>:

int _close(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020da:	605a      	str	r2, [r3, #4]
  return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_isatty>:

int _isatty(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f00f f922 	bl	8011394 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	24080000 	.word	0x24080000
 800217c:	00000400 	.word	0x00000400
 8002180:	24000b7c 	.word	0x24000b7c
 8002184:	240056b8 	.word	0x240056b8

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800218c:	f7fe fc72 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	; (80021c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b6:	f00f f8f3 	bl	80113a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7fe fcf1 	bl	8000ba0 <main>
  bx  lr
 80021be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021c8:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80021cc:	08014d70 	.word	0x08014d70
  ldr r2, =_sbss
 80021d0:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80021d4:	240056b8 	.word	0x240056b8

080021d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC3_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e2:	2003      	movs	r0, #3
 80021e4:	f001 fc6d 	bl	8003ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021e8:	f005 f87e 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_Init+0x68>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	4913      	ldr	r1, [pc, #76]	; (8002248 <HAL_Init+0x6c>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_Init+0x68>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_Init+0x6c>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_Init+0x70>)
 800221e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_Init+0x74>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002226:	200f      	movs	r0, #15
 8002228:	f7ff fe3e 	bl	8001ea8 <HAL_InitTick>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e002      	b.n	800223c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002236:	f7ff faf5 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58024400 	.word	0x58024400
 8002248:	080148ac 	.word	0x080148ac
 800224c:	24000004 	.word	0x24000004
 8002250:	24000000 	.word	0x24000000

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2400000c 	.word	0x2400000c
 8002278:	24000b80 	.word	0x24000b80

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	24000b80 	.word	0x24000b80

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffde 	bl	800227c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2400000c 	.word	0x2400000c

080022dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetREVID+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0c1b      	lsrs	r3, r3, #16
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	5c001000 	.word	0x5c001000

080022f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	609a      	str	r2, [r3, #8]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	431a      	orrs	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b087      	sub	sp, #28
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3360      	adds	r3, #96	; 0x60
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	601a      	str	r2, [r3, #0]
  }
}
 80023f8:	bf00      	nop
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800242a:	b480      	push	{r7}
 800242c:	b087      	sub	sp, #28
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3330      	adds	r3, #48	; 0x30
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	4413      	add	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	211f      	movs	r1, #31
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	401a      	ands	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	f003 011f 	and.w	r1, r3, #31
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	431a      	orrs	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002482:	b480      	push	{r7}
 8002484:	b087      	sub	sp, #28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3314      	adds	r3, #20
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0e5b      	lsrs	r3, r3, #25
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	0d1b      	lsrs	r3, r3, #20
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2107      	movs	r1, #7
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	401a      	ands	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0d1b      	lsrs	r3, r3, #20
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	431a      	orrs	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0318 	and.w	r3, r3, #24
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <LL_ADC_SetChannelSingleDiff+0x44>)
 80024fc:	40d9      	lsrs	r1, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	400b      	ands	r3, r1
 8002502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	000fffff 	.word	0x000fffff

08002520 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 031f 	and.w	r3, r3, #31
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002566:	4013      	ands	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6093      	str	r3, [r2, #8]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	5fffffc0 	.word	0x5fffffc0

0800257c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002590:	d101      	bne.n	8002596 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	6fffffc0 	.word	0x6fffffc0

080025cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e0:	d101      	bne.n	80025e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <LL_ADC_Enable+0x24>)
 8002602:	4013      	ands	r3, r2
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	7fffffc0 	.word	0x7fffffc0

0800261c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <LL_ADC_IsEnabled+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_ADC_IsEnabled+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <LL_ADC_REG_StartConversion+0x24>)
 8002652:	4013      	ands	r3, r2
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	7fffffc0 	.word	0x7fffffc0

0800266c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d101      	bne.n	8002684 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d101      	bne.n	80026aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e18f      	b.n	80029f2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff f8bd 	bl	8001860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff3f 	bl	800257c <LL_ADC_IsDeepPowerDownEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff25 	bl	8002558 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff5a 	bl	80025cc <LL_ADC_IsInternalRegulatorEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d114      	bne.n	8002748 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff3e 	bl	80025a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002728:	4b87      	ldr	r3, [pc, #540]	; (8002948 <HAL_ADC_Init+0x290>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <HAL_ADC_Init+0x294>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800273a:	e002      	b.n	8002742 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3b01      	subs	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff3d 	bl	80025cc <LL_ADC_IsInternalRegulatorEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0210 	orr.w	r2, r3, #16
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff77 	bl	800266c <LL_ADC_REG_IsConversionOngoing>
 800277e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 8129 	bne.w	80029e0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f040 8125 	bne.w	80029e0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800279e:	f043 0202 	orr.w	r2, r3, #2
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff36 	bl	800261c <LL_ADC_IsEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d136      	bne.n	8002824 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a65      	ldr	r2, [pc, #404]	; (8002950 <HAL_ADC_Init+0x298>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_ADC_Init+0x112>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a63      	ldr	r2, [pc, #396]	; (8002954 <HAL_ADC_Init+0x29c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10e      	bne.n	80027e8 <HAL_ADC_Init+0x130>
 80027ca:	4861      	ldr	r0, [pc, #388]	; (8002950 <HAL_ADC_Init+0x298>)
 80027cc:	f7ff ff26 	bl	800261c <LL_ADC_IsEnabled>
 80027d0:	4604      	mov	r4, r0
 80027d2:	4860      	ldr	r0, [pc, #384]	; (8002954 <HAL_ADC_Init+0x29c>)
 80027d4:	f7ff ff22 	bl	800261c <LL_ADC_IsEnabled>
 80027d8:	4603      	mov	r3, r0
 80027da:	4323      	orrs	r3, r4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e008      	b.n	80027fa <HAL_ADC_Init+0x142>
 80027e8:	485b      	ldr	r0, [pc, #364]	; (8002958 <HAL_ADC_Init+0x2a0>)
 80027ea:	f7ff ff17 	bl	800261c <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a53      	ldr	r2, [pc, #332]	; (8002950 <HAL_ADC_Init+0x298>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_ADC_Init+0x15a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_ADC_Init+0x29c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_ADC_Init+0x15e>
 8002812:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_ADC_Init+0x2a4>)
 8002814:	e000      	b.n	8002818 <HAL_ADC_Init+0x160>
 8002816:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_ADC_Init+0x2a8>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f7ff fd68 	bl	80022f4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002824:	f7ff fd5a 	bl	80022dc <HAL_GetREVID>
 8002828:	4603      	mov	r3, r0
 800282a:	f241 0203 	movw	r2, #4099	; 0x1003
 800282e:	4293      	cmp	r3, r2
 8002830:	d914      	bls.n	800285c <HAL_ADC_Init+0x1a4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d110      	bne.n	800285c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7d5b      	ldrb	r3, [r3, #21]
 800283e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002844:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800284a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7f1b      	ldrb	r3, [r3, #28]
 8002850:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002852:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002854:	f043 030c 	orr.w	r3, r3, #12
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e00d      	b.n	8002878 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7d5b      	ldrb	r3, [r3, #21]
 8002860:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002866:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800286c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7f1b      	ldrb	r3, [r3, #28]
 8002872:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7f1b      	ldrb	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	3b01      	subs	r3, #1
 8002886:	045b      	lsls	r3, r3, #17
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_ADC_Init+0x2ac>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	69b9      	ldr	r1, [r7, #24]
 80028ba:	430b      	orrs	r3, r1
 80028bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fed2 	bl	800266c <LL_ADC_REG_IsConversionOngoing>
 80028c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fedf 	bl	8002692 <LL_ADC_INJ_IsConversionOngoing>
 80028d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d15f      	bne.n	800299c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d15c      	bne.n	800299c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7d1b      	ldrb	r3, [r3, #20]
 80028e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_ADC_Init+0x2b0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	430b      	orrs	r3, r1
 8002902:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800290a:	2b01      	cmp	r3, #1
 800290c:	d130      	bne.n	8002970 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <HAL_ADC_Init+0x2b4>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002922:	3a01      	subs	r2, #1
 8002924:	0411      	lsls	r1, r2, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002936:	430a      	orrs	r2, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	611a      	str	r2, [r3, #16]
 8002944:	e01c      	b.n	8002980 <HAL_ADC_Init+0x2c8>
 8002946:	bf00      	nop
 8002948:	24000000 	.word	0x24000000
 800294c:	053e2d63 	.word	0x053e2d63
 8002950:	40022000 	.word	0x40022000
 8002954:	40022100 	.word	0x40022100
 8002958:	58026000 	.word	0x58026000
 800295c:	40022300 	.word	0x40022300
 8002960:	58026300 	.word	0x58026300
 8002964:	fff0c003 	.word	0xfff0c003
 8002968:	ffffbffc 	.word	0xffffbffc
 800296c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fdd6 	bl	8003548 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10c      	bne.n	80029be <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f023 010f 	bic.w	r1, r3, #15
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
 80029bc:	e007      	b.n	80029ce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 020f 	bic.w	r2, r2, #15
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
 80029de:	e007      	b.n	80029f0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f043 0210 	orr.w	r2, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}
 80029fa:	bf00      	nop

080029fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_ADC_Start+0x180>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_ADC_Start+0x1c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5b      	ldr	r2, [pc, #364]	; (8002b80 <HAL_ADC_Start+0x184>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_Start+0x20>
 8002a18:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_ADC_Start+0x188>)
 8002a1a:	e000      	b.n	8002a1e <HAL_ADC_Start+0x22>
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_ADC_Start+0x18c>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fd7e 	bl	8002520 <LL_ADC_GetMultimode>
 8002a24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fe1e 	bl	800266c <LL_ADC_REG_IsConversionOngoing>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 809a 	bne.w	8002b6c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Start+0x4a>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e095      	b.n	8002b72 <HAL_ADC_Start+0x176>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fcf0 	bl	8003434 <ADC_Enable>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 8081 	bne.w	8002b62 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <HAL_ADC_Start+0x190>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a42      	ldr	r2, [pc, #264]	; (8002b80 <HAL_ADC_Start+0x184>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d002      	beq.n	8002a80 <HAL_ADC_Start+0x84>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_Start+0x86>
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <HAL_ADC_Start+0x180>)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d002      	beq.n	8002a90 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f023 0206 	bic.w	r2, r3, #6
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58
 8002ab6:	e002      	b.n	8002abe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	221c      	movs	r2, #28
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	; (8002b80 <HAL_ADC_Start+0x184>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d002      	beq.n	8002ade <HAL_ADC_Start+0xe2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e000      	b.n	8002ae0 <HAL_ADC_Start+0xe4>
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_ADC_Start+0x180>)
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d008      	beq.n	8002afa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d002      	beq.n	8002afa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d114      	bne.n	8002b24 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fd91 	bl	8002644 <LL_ADC_REG_StartConversion>
 8002b22:	e025      	b.n	8002b70 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_ADC_Start+0x184>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d002      	beq.n	8002b40 <HAL_ADC_Start+0x144>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	e000      	b.n	8002b42 <HAL_ADC_Start+0x146>
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_ADC_Start+0x180>)
 8002b42:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b60:	e006      	b.n	8002b70 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40022100 	.word	0x40022100
 8002b84:	40022300 	.word	0x40022300
 8002b88:	58026300 	.word	0x58026300
 8002b8c:	fffff0fe 	.word	0xfffff0fe

08002b90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <HAL_ADC_PollForConversion+0x1d8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_ADC_PollForConversion+0x1e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a70      	ldr	r2, [pc, #448]	; (8002d6c <HAL_ADC_PollForConversion+0x1dc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_PollForConversion+0x22>
 8002bae:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <HAL_ADC_PollForConversion+0x1e0>)
 8002bb0:	e000      	b.n	8002bb4 <HAL_ADC_PollForConversion+0x24>
 8002bb2:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_ADC_PollForConversion+0x1e4>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fcb3 	bl	8002520 <LL_ADC_GetMultimode>
 8002bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d102      	bne.n	8002bca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e037      	b.n	8002c3a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d002      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d111      	bne.n	8002c00 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0b1      	b.n	8002d5e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002bfe:	e01c      	b.n	8002c3a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_ADC_PollForConversion+0x1d8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_ADC_PollForConversion+0x84>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <HAL_ADC_PollForConversion+0x1dc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x88>
 8002c14:	4b56      	ldr	r3, [pc, #344]	; (8002d70 <HAL_ADC_PollForConversion+0x1e0>)
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_PollForConversion+0x8a>
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_ADC_PollForConversion+0x1e4>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fc8e 	bl	800253c <LL_ADC_GetMultiDMATransfer>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 0220 	orr.w	r2, r3, #32
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e093      	b.n	8002d5e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c36:	2304      	movs	r3, #4
 8002c38:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c3a:	f7ff fb1f 	bl	800227c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c40:	e021      	b.n	8002c86 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d01d      	beq.n	8002c86 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c4a:	f7ff fb17 	bl	800227c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <HAL_ADC_PollForConversion+0xd0>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d112      	bne.n	8002c86 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e06b      	b.n	8002d5e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0d6      	beq.n	8002c42 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fbad 	bl	8002404 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01c      	beq.n	8002cea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7d5b      	ldrb	r3, [r3, #21]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d118      	bne.n	8002cea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d111      	bne.n	8002cea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_ADC_PollForConversion+0x1dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d002      	beq.n	8002cfa <HAL_ADC_PollForConversion+0x16a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	e000      	b.n	8002cfc <HAL_ADC_PollForConversion+0x16c>
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_ADC_PollForConversion+0x1d8>)
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d008      	beq.n	8002d16 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d002      	beq.n	8002d16 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b09      	cmp	r3, #9
 8002d14:	d104      	bne.n	8002d20 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e00c      	b.n	8002d3a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_ADC_PollForConversion+0x1dc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d002      	beq.n	8002d30 <HAL_ADC_PollForConversion+0x1a0>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_PollForConversion+0x1a2>
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_ADC_PollForConversion+0x1d8>)
 8002d32:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d104      	bne.n	8002d4a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2208      	movs	r2, #8
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e008      	b.n	8002d5c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	220c      	movs	r2, #12
 8002d5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40022100 	.word	0x40022100
 8002d70:	40022300 	.word	0x40022300
 8002d74:	58026300 	.word	0x58026300

08002d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b0a1      	sub	sp, #132	; 0x84
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a9d      	ldr	r2, [pc, #628]	; (8003024 <HAL_ADC_ConfigChannel+0x290>)
 8002dae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x2a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e321      	b.n	8003402 <HAL_ADC_ConfigChannel+0x66e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fc4e 	bl	800266c <LL_ADC_REG_IsConversionOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 8306 	bne.w	80033e4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d108      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x62>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	e016      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x90>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e06:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e003      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	69d1      	ldr	r1, [r2, #28]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f7ff faf3 	bl	800242a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fc0f 	bl	800266c <LL_ADC_REG_IsConversionOngoing>
 8002e4e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fc1c 	bl	8002692 <LL_ADC_INJ_IsConversionOngoing>
 8002e5a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80b3 	bne.w	8002fca <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 80af 	bne.w	8002fca <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f7ff fb02 	bl	8002482 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_ADC_ConfigChannel+0x294>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x110>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	e01d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x14c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x136>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	e00a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x14c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d027      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef8:	f7ff fa30 	bl	800235c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	7e5b      	ldrb	r3, [r3, #25]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d102      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x17e>
 8002f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f10:	e000      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x180>
 8002f12:	2300      	movs	r3, #0
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff fa5a 	bl	80023ce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	7e1b      	ldrb	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x19c>
 8002f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f2e:	e000      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x19e>
 8002f30:	2300      	movs	r3, #0
 8002f32:	461a      	mov	r2, r3
 8002f34:	f7ff fa32 	bl	800239c <LL_ADC_SetDataRightShift>
 8002f38:	e047      	b.n	8002fca <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	069b      	lsls	r3, r3, #26
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d107      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d107      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f80:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	069b      	lsls	r3, r3, #26
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d107      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fa4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	069b      	lsls	r3, r3, #26
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d107      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fc8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fb24 	bl	800261c <LL_ADC_IsEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 820d 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f7ff fa75 	bl	80024d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <HAL_ADC_ConfigChannel+0x290>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	f040 8133 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003006:	2b00      	cmp	r3, #0
 8003008:	d110      	bne.n	800302c <HAL_ADC_ConfigChannel+0x298>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0e9b      	lsrs	r3, r3, #26
 8003010:	3301      	adds	r3, #1
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2b09      	cmp	r3, #9
 8003018:	bf94      	ite	ls
 800301a:	2301      	movls	r3, #1
 800301c:	2300      	movhi	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e01e      	b.n	8003060 <HAL_ADC_ConfigChannel+0x2cc>
 8003022:	bf00      	nop
 8003024:	47ff0000 	.word	0x47ff0000
 8003028:	5c001000 	.word	0x5c001000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e003      	b.n	8003050 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b09      	cmp	r3, #9
 8003058:	bf94      	ite	ls
 800305a:	2301      	movls	r3, #1
 800305c:	2300      	movhi	r3, #0
 800305e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003060:	2b00      	cmp	r3, #0
 8003062:	d079      	beq.n	8003158 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x2ec>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	069b      	lsls	r3, r3, #26
 800307a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800307e:	e015      	b.n	80030ac <HAL_ADC_ConfigChannel+0x318>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800308e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003090:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e003      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	069b      	lsls	r3, r3, #26
 80030a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x338>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	e017      	b.n	80030fc <HAL_ADC_ConfigChannel+0x368>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x38e>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	051b      	lsls	r3, r3, #20
 8003120:	e018      	b.n	8003154 <HAL_ADC_ConfigChannel+0x3c0>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003154:	430b      	orrs	r3, r1
 8003156:	e07e      	b.n	8003256 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x3e0>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003172:	e015      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x40c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x42c>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	e017      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x45c>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	61bb      	str	r3, [r7, #24]
  return result;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_ADC_ConfigChannel+0x488>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	3b1e      	subs	r3, #30
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800321a:	e01b      	b.n	8003254 <HAL_ADC_ConfigChannel+0x4c0>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	60fb      	str	r3, [r7, #12]
  return result;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e003      	b.n	8003240 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f003 021f 	and.w	r2, r3, #31
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	3b1e      	subs	r3, #30
 800324e:	051b      	lsls	r3, r3, #20
 8003250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003254:	430b      	orrs	r3, r1
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	4619      	mov	r1, r3
 800325c:	f7ff f911 	bl	8002482 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f280 80c6 	bge.w	80033f6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a67      	ldr	r2, [pc, #412]	; (800340c <HAL_ADC_ConfigChannel+0x678>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_ADC_ConfigChannel+0x4ea>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_ADC_ConfigChannel+0x67c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x4ee>
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_ADC_ConfigChannel+0x680>)
 8003280:	e000      	b.n	8003284 <HAL_ADC_ConfigChannel+0x4f0>
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_ADC_ConfigChannel+0x684>)
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f85b 	bl	8002340 <LL_ADC_GetCommonPathInternalCh>
 800328a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5e      	ldr	r2, [pc, #376]	; (800340c <HAL_ADC_ConfigChannel+0x678>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0x50c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5d      	ldr	r2, [pc, #372]	; (8003410 <HAL_ADC_ConfigChannel+0x67c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d10e      	bne.n	80032be <HAL_ADC_ConfigChannel+0x52a>
 80032a0:	485a      	ldr	r0, [pc, #360]	; (800340c <HAL_ADC_ConfigChannel+0x678>)
 80032a2:	f7ff f9bb 	bl	800261c <LL_ADC_IsEnabled>
 80032a6:	4604      	mov	r4, r0
 80032a8:	4859      	ldr	r0, [pc, #356]	; (8003410 <HAL_ADC_ConfigChannel+0x67c>)
 80032aa:	f7ff f9b7 	bl	800261c <LL_ADC_IsEnabled>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4323      	orrs	r3, r4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e008      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x53c>
 80032be:	4857      	ldr	r0, [pc, #348]	; (800341c <HAL_ADC_ConfigChannel+0x688>)
 80032c0:	f7ff f9ac 	bl	800261c <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d07d      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a51      	ldr	r2, [pc, #324]	; (8003420 <HAL_ADC_ConfigChannel+0x68c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d130      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x5ac>
 80032de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12b      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_ADC_ConfigChannel+0x688>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f040 8081 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a44      	ldr	r2, [pc, #272]	; (800340c <HAL_ADC_ConfigChannel+0x678>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x574>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a43      	ldr	r2, [pc, #268]	; (8003410 <HAL_ADC_ConfigChannel+0x67c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x578>
 8003308:	4a42      	ldr	r2, [pc, #264]	; (8003414 <HAL_ADC_ConfigChannel+0x680>)
 800330a:	e000      	b.n	800330e <HAL_ADC_ConfigChannel+0x57a>
 800330c:	4a42      	ldr	r2, [pc, #264]	; (8003418 <HAL_ADC_ConfigChannel+0x684>)
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f7fe ffff 	bl	800231a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800331c:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_ADC_ConfigChannel+0x690>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_ADC_ConfigChannel+0x694>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003330:	e002      	b.n	8003338 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800333e:	e05a      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a39      	ldr	r2, [pc, #228]	; (800342c <HAL_ADC_ConfigChannel+0x698>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d11e      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5f4>
 800334a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d119      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a30      	ldr	r2, [pc, #192]	; (800341c <HAL_ADC_ConfigChannel+0x688>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d14b      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2a      	ldr	r2, [pc, #168]	; (800340c <HAL_ADC_ConfigChannel+0x678>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_ADC_ConfigChannel+0x5de>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <HAL_ADC_ConfigChannel+0x67c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x5e2>
 8003372:	4a28      	ldr	r2, [pc, #160]	; (8003414 <HAL_ADC_ConfigChannel+0x680>)
 8003374:	e000      	b.n	8003378 <HAL_ADC_ConfigChannel+0x5e4>
 8003376:	4a28      	ldr	r2, [pc, #160]	; (8003418 <HAL_ADC_ConfigChannel+0x684>)
 8003378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7fe ffca 	bl	800231a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003386:	e036      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_ADC_ConfigChannel+0x69c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d131      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12c      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_ADC_ConfigChannel+0x688>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d127      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a18      	ldr	r2, [pc, #96]	; (800340c <HAL_ADC_ConfigChannel+0x678>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_ConfigChannel+0x626>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_ADC_ConfigChannel+0x67c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x62a>
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_ADC_ConfigChannel+0x680>)
 80033bc:	e000      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x62c>
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_ADC_ConfigChannel+0x684>)
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7fe ffa6 	bl	800231a <LL_ADC_SetCommonPathInternalCh>
 80033ce:	e012      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033e2:	e008      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003402:	4618      	mov	r0, r3
 8003404:	3784      	adds	r7, #132	; 0x84
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	40022000 	.word	0x40022000
 8003410:	40022100 	.word	0x40022100
 8003414:	40022300 	.word	0x40022300
 8003418:	58026300 	.word	0x58026300
 800341c:	58026000 	.word	0x58026000
 8003420:	cb840000 	.word	0xcb840000
 8003424:	24000000 	.word	0x24000000
 8003428:	053e2d63 	.word	0x053e2d63
 800342c:	c7520000 	.word	0xc7520000
 8003430:	cfb80000 	.word	0xcfb80000

08003434 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f8eb 	bl	800261c <LL_ADC_IsEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d16e      	bne.n	800352a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	4b38      	ldr	r3, [pc, #224]	; (8003534 <ADC_Enable+0x100>)
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e05a      	b.n	800352c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff f8ba 	bl	80025f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003480:	f7fe fefc 	bl	800227c <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <ADC_Enable+0x104>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <ADC_Enable+0x66>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <ADC_Enable+0x108>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <ADC_Enable+0x6a>
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <ADC_Enable+0x10c>)
 800349c:	e000      	b.n	80034a0 <ADC_Enable+0x6c>
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <ADC_Enable+0x110>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f83d 	bl	8002520 <LL_ADC_GetMultimode>
 80034a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <ADC_Enable+0x108>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d002      	beq.n	80034b8 <ADC_Enable+0x84>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	e000      	b.n	80034ba <ADC_Enable+0x86>
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <ADC_Enable+0x104>)
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d130      	bne.n	800352a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034c8:	e028      	b.n	800351c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f8a4 	bl	800261c <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f888 	bl	80025f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034e4:	f7fe feca 	bl	800227c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d914      	bls.n	800351c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d00d      	beq.n	800351c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0210 	orr.w	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e007      	b.n	800352c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d1cf      	bne.n	80034ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	8000003f 	.word	0x8000003f
 8003538:	40022000 	.word	0x40022000
 800353c:	40022100 	.word	0x40022100
 8003540:	40022300 	.word	0x40022300
 8003544:	58026300 	.word	0x58026300

08003548 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <ADC_ConfigureBoostMode+0x1f8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <ADC_ConfigureBoostMode+0x1c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a79      	ldr	r2, [pc, #484]	; (8003744 <ADC_ConfigureBoostMode+0x1fc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d109      	bne.n	8003578 <ADC_ConfigureBoostMode+0x30>
 8003564:	4b78      	ldr	r3, [pc, #480]	; (8003748 <ADC_ConfigureBoostMode+0x200>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e008      	b.n	800358a <ADC_ConfigureBoostMode+0x42>
 8003578:	4b74      	ldr	r3, [pc, #464]	; (800374c <ADC_ConfigureBoostMode+0x204>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01c      	beq.n	80035c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800358e:	f004 f825 	bl	80075dc <HAL_RCC_GetHCLKFreq>
 8003592:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800359c:	d010      	beq.n	80035c0 <ADC_ConfigureBoostMode+0x78>
 800359e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035a2:	d873      	bhi.n	800368c <ADC_ConfigureBoostMode+0x144>
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d002      	beq.n	80035b0 <ADC_ConfigureBoostMode+0x68>
 80035aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ae:	d16d      	bne.n	800368c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	60fb      	str	r3, [r7, #12]
        break;
 80035be:	e068      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	60fb      	str	r3, [r7, #12]
        break;
 80035c6:	e064      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80035c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035cc:	f04f 0100 	mov.w	r1, #0
 80035d0:	f005 faac 	bl	8008b2c <HAL_RCCEx_GetPeriphCLKFreq>
 80035d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035de:	d051      	beq.n	8003684 <ADC_ConfigureBoostMode+0x13c>
 80035e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035e4:	d854      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 80035e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035ea:	d047      	beq.n	800367c <ADC_ConfigureBoostMode+0x134>
 80035ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035f0:	d84e      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 80035f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035f6:	d03d      	beq.n	8003674 <ADC_ConfigureBoostMode+0x12c>
 80035f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035fc:	d848      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 80035fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003602:	d033      	beq.n	800366c <ADC_ConfigureBoostMode+0x124>
 8003604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003608:	d842      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 800360a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800360e:	d029      	beq.n	8003664 <ADC_ConfigureBoostMode+0x11c>
 8003610:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003614:	d83c      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 8003616:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800361a:	d01a      	beq.n	8003652 <ADC_ConfigureBoostMode+0x10a>
 800361c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003620:	d836      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 8003622:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003626:	d014      	beq.n	8003652 <ADC_ConfigureBoostMode+0x10a>
 8003628:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800362c:	d830      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003632:	d00e      	beq.n	8003652 <ADC_ConfigureBoostMode+0x10a>
 8003634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003638:	d82a      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 800363a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800363e:	d008      	beq.n	8003652 <ADC_ConfigureBoostMode+0x10a>
 8003640:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003644:	d824      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x148>
 8003646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800364a:	d002      	beq.n	8003652 <ADC_ConfigureBoostMode+0x10a>
 800364c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003650:	d11e      	bne.n	8003690 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	60fb      	str	r3, [r7, #12]
        break;
 8003662:	e016      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	60fb      	str	r3, [r7, #12]
        break;
 800366a:	e012      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	60fb      	str	r3, [r7, #12]
        break;
 8003672:	e00e      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	60fb      	str	r3, [r7, #12]
        break;
 800367a:	e00a      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	09db      	lsrs	r3, r3, #7
 8003680:	60fb      	str	r3, [r7, #12]
        break;
 8003682:	e006      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	60fb      	str	r3, [r7, #12]
        break;
 800368a:	e002      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
        break;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003690:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003692:	f7fe fe23 	bl	80022dc <HAL_GetREVID>
 8003696:	4603      	mov	r3, r0
 8003698:	f241 0203 	movw	r2, #4099	; 0x1003
 800369c:	4293      	cmp	r3, r2
 800369e:	d815      	bhi.n	80036cc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <ADC_ConfigureBoostMode+0x208>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d908      	bls.n	80036ba <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036b8:	e03e      	b.n	8003738 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c8:	609a      	str	r2, [r3, #8]
}
 80036ca:	e035      	b.n	8003738 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <ADC_ConfigureBoostMode+0x20c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d808      	bhi.n	80036ec <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	e025      	b.n	8003738 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <ADC_ConfigureBoostMode+0x210>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d80a      	bhi.n	800370a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	e016      	b.n	8003738 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <ADC_ConfigureBoostMode+0x214>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d80a      	bhi.n	8003728 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	609a      	str	r2, [r3, #8]
}
 8003726:	e007      	b.n	8003738 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40022000 	.word	0x40022000
 8003744:	40022100 	.word	0x40022100
 8003748:	40022300 	.word	0x40022300
 800374c:	58026300 	.word	0x58026300
 8003750:	01312d00 	.word	0x01312d00
 8003754:	005f5e10 	.word	0x005f5e10
 8003758:	00bebc20 	.word	0x00bebc20
 800375c:	017d7840 	.word	0x017d7840

08003760 <LL_ADC_IsEnabled>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <LL_ADC_IsEnabled+0x18>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <LL_ADC_IsEnabled+0x1a>
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_REG_IsConversionOngoing>:
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d101      	bne.n	800379e <LL_ADC_REG_IsConversionOngoing+0x18>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b09f      	sub	sp, #124	; 0x7c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e0be      	b.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5c      	ldr	r2, [pc, #368]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d102      	bne.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037e4:	4b5b      	ldr	r3, [pc, #364]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	e001      	b.n	80037ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e09d      	b.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ffb9 	bl	8003786 <LL_ADC_REG_IsConversionOngoing>
 8003814:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ffb3 	bl	8003786 <LL_ADC_REG_IsConversionOngoing>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d17f      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003828:	2b00      	cmp	r3, #0
 800382a:	d17c      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a47      	ldr	r2, [pc, #284]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a46      	ldr	r2, [pc, #280]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003840:	4b45      	ldr	r3, [pc, #276]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003842:	e000      	b.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003844:	4b45      	ldr	r3, [pc, #276]	; (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003846:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d039      	beq.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	431a      	orrs	r2, r3
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a38      	ldr	r2, [pc, #224]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10e      	bne.n	8003894 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003876:	4836      	ldr	r0, [pc, #216]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003878:	f7ff ff72 	bl	8003760 <LL_ADC_IsEnabled>
 800387c:	4604      	mov	r4, r0
 800387e:	4835      	ldr	r0, [pc, #212]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003880:	f7ff ff6e 	bl	8003760 <LL_ADC_IsEnabled>
 8003884:	4603      	mov	r3, r0
 8003886:	4323      	orrs	r3, r4
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e008      	b.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003894:	4832      	ldr	r0, [pc, #200]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003896:	f7ff ff63 	bl	8003760 <LL_ADC_IsEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d047      	beq.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	6811      	ldr	r1, [r2, #0]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	431a      	orrs	r2, r3
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038c2:	e03a      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10e      	bne.n	8003902 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80038e4:	481a      	ldr	r0, [pc, #104]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038e6:	f7ff ff3b 	bl	8003760 <LL_ADC_IsEnabled>
 80038ea:	4604      	mov	r4, r0
 80038ec:	4819      	ldr	r0, [pc, #100]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038ee:	f7ff ff37 	bl	8003760 <LL_ADC_IsEnabled>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4323      	orrs	r3, r4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e008      	b.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003902:	4817      	ldr	r0, [pc, #92]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003904:	f7ff ff2c 	bl	8003760 <LL_ADC_IsEnabled>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800391e:	4013      	ands	r3, r2
 8003920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003922:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003924:	e009      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003938:	e000      	b.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800393a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003944:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003948:	4618      	mov	r0, r3
 800394a:	377c      	adds	r7, #124	; 0x7c
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	40022000 	.word	0x40022000
 8003954:	40022100 	.word	0x40022100
 8003958:	40022300 	.word	0x40022300
 800395c:	58026300 	.word	0x58026300
 8003960:	58026000 	.word	0x58026000
 8003964:	fffff0e0 	.word	0xfffff0e0

08003968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <__NVIC_SetPriorityGrouping+0x40>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003984:	4013      	ands	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <__NVIC_SetPriorityGrouping+0x44>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00
 80039ac:	05fa0000 	.word	0x05fa0000

080039b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <__NVIC_GetPriorityGrouping+0x18>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 0307 	and.w	r3, r3, #7
}
 80039be:	4618      	mov	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db0b      	blt.n	80039f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	f003 021f 	and.w	r2, r3, #31
 80039e4:	4907      	ldr	r1, [pc, #28]	; (8003a04 <__NVIC_EnableIRQ+0x38>)
 80039e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2001      	movs	r0, #1
 80039ee:	fa00 f202 	lsl.w	r2, r0, r2
 80039f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000e100 	.word	0xe000e100

08003a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db0a      	blt.n	8003a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	490c      	ldr	r1, [pc, #48]	; (8003a54 <__NVIC_SetPriority+0x4c>)
 8003a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a30:	e00a      	b.n	8003a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4908      	ldr	r1, [pc, #32]	; (8003a58 <__NVIC_SetPriority+0x50>)
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	440b      	add	r3, r1
 8003a46:	761a      	strb	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf28      	it	cs
 8003a7a:	2304      	movcs	r3, #4
 8003a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d902      	bls.n	8003a8c <NVIC_EncodePriority+0x30>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3b03      	subs	r3, #3
 8003a8a:	e000      	b.n	8003a8e <NVIC_EncodePriority+0x32>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	43d9      	mvns	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	4313      	orrs	r3, r2
         );
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff4c 	bl	8003968 <__NVIC_SetPriorityGrouping>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae6:	f7ff ff63 	bl	80039b0 <__NVIC_GetPriorityGrouping>
 8003aea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f7ff ffb3 	bl	8003a5c <NVIC_EncodePriority>
 8003af6:	4602      	mov	r2, r0
 8003af8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff82 	bl	8003a08 <__NVIC_SetPriority>
}
 8003b04:	bf00      	nop
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff56 	bl	80039cc <__NVIC_EnableIRQ>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7fe fba4 	bl	800227c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e316      	b.n	800416e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a66      	ldr	r2, [pc, #408]	; (8003ce0 <HAL_DMA_Init+0x1b8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a65      	ldr	r2, [pc, #404]	; (8003ce4 <HAL_DMA_Init+0x1bc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a63      	ldr	r2, [pc, #396]	; (8003ce8 <HAL_DMA_Init+0x1c0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a62      	ldr	r2, [pc, #392]	; (8003cec <HAL_DMA_Init+0x1c4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <HAL_DMA_Init+0x1c8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5f      	ldr	r2, [pc, #380]	; (8003cf4 <HAL_DMA_Init+0x1cc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <HAL_DMA_Init+0x1d0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5c      	ldr	r2, [pc, #368]	; (8003cfc <HAL_DMA_Init+0x1d4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5a      	ldr	r2, [pc, #360]	; (8003d00 <HAL_DMA_Init+0x1d8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a59      	ldr	r2, [pc, #356]	; (8003d04 <HAL_DMA_Init+0x1dc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_DMA_Init+0x1e0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a56      	ldr	r2, [pc, #344]	; (8003d0c <HAL_DMA_Init+0x1e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a54      	ldr	r2, [pc, #336]	; (8003d10 <HAL_DMA_Init+0x1e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a53      	ldr	r2, [pc, #332]	; (8003d14 <HAL_DMA_Init+0x1ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <HAL_DMA_Init+0x1f0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a50      	ldr	r2, [pc, #320]	; (8003d1c <HAL_DMA_Init+0x1f4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_DMA_Init+0xbc>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_Init+0xbe>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 813b 	beq.w	8003e62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a37      	ldr	r2, [pc, #220]	; (8003ce0 <HAL_DMA_Init+0x1b8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d04a      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a36      	ldr	r2, [pc, #216]	; (8003ce4 <HAL_DMA_Init+0x1bc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d045      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <HAL_DMA_Init+0x1c0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d040      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a33      	ldr	r2, [pc, #204]	; (8003cec <HAL_DMA_Init+0x1c4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d03b      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <HAL_DMA_Init+0x1c8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <HAL_DMA_Init+0x1cc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d031      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_DMA_Init+0x1d0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02c      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <HAL_DMA_Init+0x1d4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d027      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <HAL_DMA_Init+0x1d8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <HAL_DMA_Init+0x1dc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d01d      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <HAL_DMA_Init+0x1e0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <HAL_DMA_Init+0x1e4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_DMA_Init+0x1e8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_DMA_Init+0x1ec>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <HAL_DMA_Init+0x1f0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <HAL_DMA_Init+0x1f4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <HAL_DMA_Init+0x186>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e007      	b.n	8003cbe <HAL_DMA_Init+0x196>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cbe:	e02f      	b.n	8003d20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc0:	f7fe fadc 	bl	800227c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d928      	bls.n	8003d20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e246      	b.n	800416e <HAL_DMA_Init+0x646>
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1c8      	bne.n	8003cc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4b83      	ldr	r3, [pc, #524]	; (8003f48 <HAL_DMA_Init+0x420>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d107      	bne.n	8003d84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003d84:	4b71      	ldr	r3, [pc, #452]	; (8003f4c <HAL_DMA_Init+0x424>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b71      	ldr	r3, [pc, #452]	; (8003f50 <HAL_DMA_Init+0x428>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d90:	d328      	bcc.n	8003de4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b28      	cmp	r3, #40	; 0x28
 8003d98:	d903      	bls.n	8003da2 <HAL_DMA_Init+0x27a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d917      	bls.n	8003dd2 <HAL_DMA_Init+0x2aa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b3e      	cmp	r3, #62	; 0x3e
 8003da8:	d903      	bls.n	8003db2 <HAL_DMA_Init+0x28a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b42      	cmp	r3, #66	; 0x42
 8003db0:	d90f      	bls.n	8003dd2 <HAL_DMA_Init+0x2aa>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b46      	cmp	r3, #70	; 0x46
 8003db8:	d903      	bls.n	8003dc2 <HAL_DMA_Init+0x29a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b48      	cmp	r3, #72	; 0x48
 8003dc0:	d907      	bls.n	8003dd2 <HAL_DMA_Init+0x2aa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b4e      	cmp	r3, #78	; 0x4e
 8003dc8:	d905      	bls.n	8003dd6 <HAL_DMA_Init+0x2ae>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b52      	cmp	r3, #82	; 0x52
 8003dd0:	d801      	bhi.n	8003dd6 <HAL_DMA_Init+0x2ae>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_DMA_Init+0x2b0>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0307 	bic.w	r3, r3, #7
 8003dfa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d117      	bne.n	8003e3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f001 ff1d 	bl	8005c60 <DMA_CheckFifoParam>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e197      	b.n	800416e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f001 fe58 	bl	8005afc <DMA_CalcBaseAndBitshift>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	223f      	movs	r2, #63	; 0x3f
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e0cd      	b.n	8003ffe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3b      	ldr	r2, [pc, #236]	; (8003f54 <HAL_DMA_Init+0x42c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <HAL_DMA_Init+0x430>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <HAL_DMA_Init+0x434>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a36      	ldr	r2, [pc, #216]	; (8003f60 <HAL_DMA_Init+0x438>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a35      	ldr	r2, [pc, #212]	; (8003f64 <HAL_DMA_Init+0x43c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a33      	ldr	r2, [pc, #204]	; (8003f68 <HAL_DMA_Init+0x440>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a32      	ldr	r2, [pc, #200]	; (8003f6c <HAL_DMA_Init+0x444>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_Init+0x38a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a30      	ldr	r2, [pc, #192]	; (8003f70 <HAL_DMA_Init+0x448>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA_Init+0x38e>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMA_Init+0x390>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8097 	beq.w	8003fec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <HAL_DMA_Init+0x42c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d021      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <HAL_DMA_Init+0x430>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01c      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_DMA_Init+0x434>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d017      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_DMA_Init+0x438>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d012      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_DMA_Init+0x43c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00d      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <HAL_DMA_Init+0x440>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d008      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_DMA_Init+0x444>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <HAL_DMA_Init+0x3e4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_DMA_Init+0x448>)
 8003f0a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_DMA_Init+0x44c>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d021      	beq.n	8003f78 <HAL_DMA_Init+0x450>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d102      	bne.n	8003f42 <HAL_DMA_Init+0x41a>
 8003f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f40:	e01b      	b.n	8003f7a <HAL_DMA_Init+0x452>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e019      	b.n	8003f7a <HAL_DMA_Init+0x452>
 8003f46:	bf00      	nop
 8003f48:	fe10803f 	.word	0xfe10803f
 8003f4c:	5c001000 	.word	0x5c001000
 8003f50:	ffff0000 	.word	0xffff0000
 8003f54:	58025408 	.word	0x58025408
 8003f58:	5802541c 	.word	0x5802541c
 8003f5c:	58025430 	.word	0x58025430
 8003f60:	58025444 	.word	0x58025444
 8003f64:	58025458 	.word	0x58025458
 8003f68:	5802546c 	.word	0x5802546c
 8003f6c:	58025480 	.word	0x58025480
 8003f70:	58025494 	.word	0x58025494
 8003f74:	fffe000f 	.word	0xfffe000f
 8003f78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68d2      	ldr	r2, [r2, #12]
 8003f7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fa8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b6e      	ldr	r3, [pc, #440]	; (8004178 <HAL_DMA_Init+0x650>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	4a6e      	ldr	r2, [pc, #440]	; (800417c <HAL_DMA_Init+0x654>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f001 fd93 	bl	8005afc <DMA_CalcBaseAndBitshift>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e008      	b.n	8003ffe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0b7      	b.n	800416e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <HAL_DMA_Init+0x658>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d072      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_DMA_Init+0x65c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d06d      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a5c      	ldr	r2, [pc, #368]	; (8004188 <HAL_DMA_Init+0x660>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d068      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_DMA_Init+0x664>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d063      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a59      	ldr	r2, [pc, #356]	; (8004190 <HAL_DMA_Init+0x668>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d05e      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a57      	ldr	r2, [pc, #348]	; (8004194 <HAL_DMA_Init+0x66c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d059      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a56      	ldr	r2, [pc, #344]	; (8004198 <HAL_DMA_Init+0x670>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d054      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a54      	ldr	r2, [pc, #336]	; (800419c <HAL_DMA_Init+0x674>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d04f      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a53      	ldr	r2, [pc, #332]	; (80041a0 <HAL_DMA_Init+0x678>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04a      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a51      	ldr	r2, [pc, #324]	; (80041a4 <HAL_DMA_Init+0x67c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d045      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a50      	ldr	r2, [pc, #320]	; (80041a8 <HAL_DMA_Init+0x680>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d040      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <HAL_DMA_Init+0x684>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03b      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a4d      	ldr	r2, [pc, #308]	; (80041b0 <HAL_DMA_Init+0x688>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d036      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a4b      	ldr	r2, [pc, #300]	; (80041b4 <HAL_DMA_Init+0x68c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a4a      	ldr	r2, [pc, #296]	; (80041b8 <HAL_DMA_Init+0x690>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d02c      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a48      	ldr	r2, [pc, #288]	; (80041bc <HAL_DMA_Init+0x694>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d027      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a47      	ldr	r2, [pc, #284]	; (80041c0 <HAL_DMA_Init+0x698>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a45      	ldr	r2, [pc, #276]	; (80041c4 <HAL_DMA_Init+0x69c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a44      	ldr	r2, [pc, #272]	; (80041c8 <HAL_DMA_Init+0x6a0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a42      	ldr	r2, [pc, #264]	; (80041cc <HAL_DMA_Init+0x6a4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a41      	ldr	r2, [pc, #260]	; (80041d0 <HAL_DMA_Init+0x6a8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3f      	ldr	r2, [pc, #252]	; (80041d4 <HAL_DMA_Init+0x6ac>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3e      	ldr	r2, [pc, #248]	; (80041d8 <HAL_DMA_Init+0x6b0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_DMA_Init+0x5c6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3c      	ldr	r2, [pc, #240]	; (80041dc <HAL_DMA_Init+0x6b4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_DMA_Init+0x5ca>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_DMA_Init+0x5cc>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d032      	beq.n	800415e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 fe2d 	bl	8005d58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d102      	bne.n	800410c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004120:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_DMA_Init+0x624>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d80c      	bhi.n	800414c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 feaa 	bl	8005e8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e008      	b.n	800415e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	a7fdabf8 	.word	0xa7fdabf8
 800417c:	cccccccd 	.word	0xcccccccd
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
 80041c0:	58025408 	.word	0x58025408
 80041c4:	5802541c 	.word	0x5802541c
 80041c8:	58025430 	.word	0x58025430
 80041cc:	58025444 	.word	0x58025444
 80041d0:	58025458 	.word	0x58025458
 80041d4:	5802546c 	.word	0x5802546c
 80041d8:	58025480 	.word	0x58025480
 80041dc:	58025494 	.word	0x58025494

080041e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80041e8:	f7fe f848 	bl	800227c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e2dc      	b.n	80047b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d008      	beq.n	8004216 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e2cd      	b.n	80047b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a76      	ldr	r2, [pc, #472]	; (80043f4 <HAL_DMA_Abort+0x214>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d04a      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a74      	ldr	r2, [pc, #464]	; (80043f8 <HAL_DMA_Abort+0x218>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d045      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a73      	ldr	r2, [pc, #460]	; (80043fc <HAL_DMA_Abort+0x21c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d040      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a71      	ldr	r2, [pc, #452]	; (8004400 <HAL_DMA_Abort+0x220>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d03b      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a70      	ldr	r2, [pc, #448]	; (8004404 <HAL_DMA_Abort+0x224>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d036      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_DMA_Abort+0x228>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d031      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6d      	ldr	r2, [pc, #436]	; (800440c <HAL_DMA_Abort+0x22c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d02c      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6b      	ldr	r2, [pc, #428]	; (8004410 <HAL_DMA_Abort+0x230>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d027      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_DMA_Abort+0x234>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a68      	ldr	r2, [pc, #416]	; (8004418 <HAL_DMA_Abort+0x238>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01d      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a67      	ldr	r2, [pc, #412]	; (800441c <HAL_DMA_Abort+0x23c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_DMA_Abort+0x240>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a64      	ldr	r2, [pc, #400]	; (8004424 <HAL_DMA_Abort+0x244>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a62      	ldr	r2, [pc, #392]	; (8004428 <HAL_DMA_Abort+0x248>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a61      	ldr	r2, [pc, #388]	; (800442c <HAL_DMA_Abort+0x24c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_DMA_Abort+0xd6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a5f      	ldr	r2, [pc, #380]	; (8004430 <HAL_DMA_Abort+0x250>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_DMA_Abort+0xda>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_DMA_Abort+0xdc>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 021e 	bic.w	r2, r2, #30
 80042ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e00a      	b.n	80042fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 020e 	bic.w	r2, r2, #14
 80042f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3c      	ldr	r2, [pc, #240]	; (80043f4 <HAL_DMA_Abort+0x214>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d072      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <HAL_DMA_Abort+0x218>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d06d      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_DMA_Abort+0x21c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d068      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a37      	ldr	r2, [pc, #220]	; (8004400 <HAL_DMA_Abort+0x220>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d063      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_DMA_Abort+0x224>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d05e      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a34      	ldr	r2, [pc, #208]	; (8004408 <HAL_DMA_Abort+0x228>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d059      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a33      	ldr	r2, [pc, #204]	; (800440c <HAL_DMA_Abort+0x22c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d054      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a31      	ldr	r2, [pc, #196]	; (8004410 <HAL_DMA_Abort+0x230>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04f      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a30      	ldr	r2, [pc, #192]	; (8004414 <HAL_DMA_Abort+0x234>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d04a      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2e      	ldr	r2, [pc, #184]	; (8004418 <HAL_DMA_Abort+0x238>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d045      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2d      	ldr	r2, [pc, #180]	; (800441c <HAL_DMA_Abort+0x23c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d040      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2b      	ldr	r2, [pc, #172]	; (8004420 <HAL_DMA_Abort+0x240>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d03b      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2a      	ldr	r2, [pc, #168]	; (8004424 <HAL_DMA_Abort+0x244>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d036      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <HAL_DMA_Abort+0x248>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d031      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a27      	ldr	r2, [pc, #156]	; (800442c <HAL_DMA_Abort+0x24c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d02c      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <HAL_DMA_Abort+0x250>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d027      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_DMA_Abort+0x254>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <HAL_DMA_Abort+0x258>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a21      	ldr	r2, [pc, #132]	; (800443c <HAL_DMA_Abort+0x25c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_DMA_Abort+0x260>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_DMA_Abort+0x264>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_DMA_Abort+0x268>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_DMA_Abort+0x26c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_Abort+0x20e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_DMA_Abort+0x270>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d132      	bne.n	8004454 <HAL_DMA_Abort+0x274>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e031      	b.n	8004456 <HAL_DMA_Abort+0x276>
 80043f2:	bf00      	nop
 80043f4:	40020010 	.word	0x40020010
 80043f8:	40020028 	.word	0x40020028
 80043fc:	40020040 	.word	0x40020040
 8004400:	40020058 	.word	0x40020058
 8004404:	40020070 	.word	0x40020070
 8004408:	40020088 	.word	0x40020088
 800440c:	400200a0 	.word	0x400200a0
 8004410:	400200b8 	.word	0x400200b8
 8004414:	40020410 	.word	0x40020410
 8004418:	40020428 	.word	0x40020428
 800441c:	40020440 	.word	0x40020440
 8004420:	40020458 	.word	0x40020458
 8004424:	40020470 	.word	0x40020470
 8004428:	40020488 	.word	0x40020488
 800442c:	400204a0 	.word	0x400204a0
 8004430:	400204b8 	.word	0x400204b8
 8004434:	58025408 	.word	0x58025408
 8004438:	5802541c 	.word	0x5802541c
 800443c:	58025430 	.word	0x58025430
 8004440:	58025444 	.word	0x58025444
 8004444:	58025458 	.word	0x58025458
 8004448:	5802546c 	.word	0x5802546c
 800444c:	58025480 	.word	0x58025480
 8004450:	58025494 	.word	0x58025494
 8004454:	2300      	movs	r3, #0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004468:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6d      	ldr	r2, [pc, #436]	; (8004624 <HAL_DMA_Abort+0x444>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04a      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6b      	ldr	r2, [pc, #428]	; (8004628 <HAL_DMA_Abort+0x448>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d045      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6a      	ldr	r2, [pc, #424]	; (800462c <HAL_DMA_Abort+0x44c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d040      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a68      	ldr	r2, [pc, #416]	; (8004630 <HAL_DMA_Abort+0x450>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d03b      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a67      	ldr	r2, [pc, #412]	; (8004634 <HAL_DMA_Abort+0x454>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d036      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_DMA_Abort+0x458>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d031      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a64      	ldr	r2, [pc, #400]	; (800463c <HAL_DMA_Abort+0x45c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d02c      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a62      	ldr	r2, [pc, #392]	; (8004640 <HAL_DMA_Abort+0x460>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d027      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_DMA_Abort+0x464>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d022      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a5f      	ldr	r2, [pc, #380]	; (8004648 <HAL_DMA_Abort+0x468>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01d      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a5e      	ldr	r2, [pc, #376]	; (800464c <HAL_DMA_Abort+0x46c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d018      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5c      	ldr	r2, [pc, #368]	; (8004650 <HAL_DMA_Abort+0x470>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5b      	ldr	r2, [pc, #364]	; (8004654 <HAL_DMA_Abort+0x474>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a59      	ldr	r2, [pc, #356]	; (8004658 <HAL_DMA_Abort+0x478>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a58      	ldr	r2, [pc, #352]	; (800465c <HAL_DMA_Abort+0x47c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_DMA_Abort+0x32a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a56      	ldr	r2, [pc, #344]	; (8004660 <HAL_DMA_Abort+0x480>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <HAL_DMA_Abort+0x33c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e007      	b.n	800452c <HAL_DMA_Abort+0x34c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800452c:	e013      	b.n	8004556 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800452e:	f7fd fea5 	bl	800227c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b05      	cmp	r3, #5
 800453a:	d90c      	bls.n	8004556 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e12d      	b.n	80047b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <HAL_DMA_Abort+0x444>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <HAL_DMA_Abort+0x448>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	; (800462c <HAL_DMA_Abort+0x44c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <HAL_DMA_Abort+0x450>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a29      	ldr	r2, [pc, #164]	; (8004634 <HAL_DMA_Abort+0x454>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <HAL_DMA_Abort+0x458>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a26      	ldr	r2, [pc, #152]	; (800463c <HAL_DMA_Abort+0x45c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a24      	ldr	r2, [pc, #144]	; (8004640 <HAL_DMA_Abort+0x460>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <HAL_DMA_Abort+0x464>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a21      	ldr	r2, [pc, #132]	; (8004648 <HAL_DMA_Abort+0x468>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a20      	ldr	r2, [pc, #128]	; (800464c <HAL_DMA_Abort+0x46c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_DMA_Abort+0x470>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_DMA_Abort+0x474>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_DMA_Abort+0x478>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1a      	ldr	r2, [pc, #104]	; (800465c <HAL_DMA_Abort+0x47c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_Abort+0x422>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_DMA_Abort+0x480>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_DMA_Abort+0x426>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_DMA_Abort+0x428>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02b      	beq.n	8004664 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	223f      	movs	r2, #63	; 0x3f
 800461c:	409a      	lsls	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	e02a      	b.n	800467a <HAL_DMA_Abort+0x49a>
 8004624:	40020010 	.word	0x40020010
 8004628:	40020028 	.word	0x40020028
 800462c:	40020040 	.word	0x40020040
 8004630:	40020058 	.word	0x40020058
 8004634:	40020070 	.word	0x40020070
 8004638:	40020088 	.word	0x40020088
 800463c:	400200a0 	.word	0x400200a0
 8004640:	400200b8 	.word	0x400200b8
 8004644:	40020410 	.word	0x40020410
 8004648:	40020428 	.word	0x40020428
 800464c:	40020440 	.word	0x40020440
 8004650:	40020458 	.word	0x40020458
 8004654:	40020470 	.word	0x40020470
 8004658:	40020488 	.word	0x40020488
 800465c:	400204a0 	.word	0x400204a0
 8004660:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2201      	movs	r2, #1
 8004674:	409a      	lsls	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a4f      	ldr	r2, [pc, #316]	; (80047bc <HAL_DMA_Abort+0x5dc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d072      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_DMA_Abort+0x5e0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d06d      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_DMA_Abort+0x5e4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d068      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <HAL_DMA_Abort+0x5e8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d063      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a49      	ldr	r2, [pc, #292]	; (80047cc <HAL_DMA_Abort+0x5ec>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d05e      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a47      	ldr	r2, [pc, #284]	; (80047d0 <HAL_DMA_Abort+0x5f0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d059      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a46      	ldr	r2, [pc, #280]	; (80047d4 <HAL_DMA_Abort+0x5f4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d054      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a44      	ldr	r2, [pc, #272]	; (80047d8 <HAL_DMA_Abort+0x5f8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d04f      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a43      	ldr	r2, [pc, #268]	; (80047dc <HAL_DMA_Abort+0x5fc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d04a      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a41      	ldr	r2, [pc, #260]	; (80047e0 <HAL_DMA_Abort+0x600>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d045      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a40      	ldr	r2, [pc, #256]	; (80047e4 <HAL_DMA_Abort+0x604>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d040      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3e      	ldr	r2, [pc, #248]	; (80047e8 <HAL_DMA_Abort+0x608>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d03b      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3d      	ldr	r2, [pc, #244]	; (80047ec <HAL_DMA_Abort+0x60c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d036      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <HAL_DMA_Abort+0x610>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d031      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3a      	ldr	r2, [pc, #232]	; (80047f4 <HAL_DMA_Abort+0x614>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d02c      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <HAL_DMA_Abort+0x618>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d027      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a37      	ldr	r2, [pc, #220]	; (80047fc <HAL_DMA_Abort+0x61c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d022      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	; (8004800 <HAL_DMA_Abort+0x620>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01d      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a34      	ldr	r2, [pc, #208]	; (8004804 <HAL_DMA_Abort+0x624>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a32      	ldr	r2, [pc, #200]	; (8004808 <HAL_DMA_Abort+0x628>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a31      	ldr	r2, [pc, #196]	; (800480c <HAL_DMA_Abort+0x62c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <HAL_DMA_Abort+0x630>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_DMA_Abort+0x634>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_DMA_Abort+0x58a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <HAL_DMA_Abort+0x638>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d101      	bne.n	800476e <HAL_DMA_Abort+0x58e>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_DMA_Abort+0x590>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d015      	beq.n	80047a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800477c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004794:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800479e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8
 80047fc:	58025408 	.word	0x58025408
 8004800:	5802541c 	.word	0x5802541c
 8004804:	58025430 	.word	0x58025430
 8004808:	58025444 	.word	0x58025444
 800480c:	58025458 	.word	0x58025458
 8004810:	5802546c 	.word	0x5802546c
 8004814:	58025480 	.word	0x58025480
 8004818:	58025494 	.word	0x58025494

0800481c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e237      	b.n	8004c9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d004      	beq.n	8004844 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e22c      	b.n	8004c9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5c      	ldr	r2, [pc, #368]	; (80049bc <HAL_DMA_Abort_IT+0x1a0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d04a      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5b      	ldr	r2, [pc, #364]	; (80049c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d045      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a59      	ldr	r2, [pc, #356]	; (80049c4 <HAL_DMA_Abort_IT+0x1a8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d040      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_DMA_Abort_IT+0x1ac>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d03b      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a56      	ldr	r2, [pc, #344]	; (80049cc <HAL_DMA_Abort_IT+0x1b0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d036      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a55      	ldr	r2, [pc, #340]	; (80049d0 <HAL_DMA_Abort_IT+0x1b4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d031      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a53      	ldr	r2, [pc, #332]	; (80049d4 <HAL_DMA_Abort_IT+0x1b8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02c      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a52      	ldr	r2, [pc, #328]	; (80049d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d027      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a50      	ldr	r2, [pc, #320]	; (80049dc <HAL_DMA_Abort_IT+0x1c0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a4f      	ldr	r2, [pc, #316]	; (80049e0 <HAL_DMA_Abort_IT+0x1c4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d01d      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a4d      	ldr	r2, [pc, #308]	; (80049e4 <HAL_DMA_Abort_IT+0x1c8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a4c      	ldr	r2, [pc, #304]	; (80049e8 <HAL_DMA_Abort_IT+0x1cc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <HAL_DMA_Abort_IT+0x1d0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a49      	ldr	r2, [pc, #292]	; (80049f0 <HAL_DMA_Abort_IT+0x1d4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a47      	ldr	r2, [pc, #284]	; (80049f4 <HAL_DMA_Abort_IT+0x1d8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_DMA_Abort_IT+0xc8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a46      	ldr	r2, [pc, #280]	; (80049f8 <HAL_DMA_Abort_IT+0x1dc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_DMA_Abort_IT+0xcc>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_DMA_Abort_IT+0xce>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8086 	beq.w	80049fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2204      	movs	r2, #4
 80048f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <HAL_DMA_Abort_IT+0x1a0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04a      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2e      	ldr	r2, [pc, #184]	; (80049c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d045      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <HAL_DMA_Abort_IT+0x1a8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d040      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <HAL_DMA_Abort_IT+0x1ac>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d03b      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <HAL_DMA_Abort_IT+0x1b0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d036      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <HAL_DMA_Abort_IT+0x1b4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d031      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_DMA_Abort_IT+0x1b8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02c      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d027      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_DMA_Abort_IT+0x1c0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d022      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_DMA_Abort_IT+0x1c4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d01d      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_DMA_Abort_IT+0x1c8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_DMA_Abort_IT+0x1cc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_DMA_Abort_IT+0x1d0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_DMA_Abort_IT+0x1d4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_DMA_Abort_IT+0x1d8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_DMA_Abort_IT+0x17c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_DMA_Abort_IT+0x1dc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <HAL_DMA_Abort_IT+0x18e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e178      	b.n	8004c9c <HAL_DMA_Abort_IT+0x480>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e16f      	b.n	8004c9c <HAL_DMA_Abort_IT+0x480>
 80049bc:	40020010 	.word	0x40020010
 80049c0:	40020028 	.word	0x40020028
 80049c4:	40020040 	.word	0x40020040
 80049c8:	40020058 	.word	0x40020058
 80049cc:	40020070 	.word	0x40020070
 80049d0:	40020088 	.word	0x40020088
 80049d4:	400200a0 	.word	0x400200a0
 80049d8:	400200b8 	.word	0x400200b8
 80049dc:	40020410 	.word	0x40020410
 80049e0:	40020428 	.word	0x40020428
 80049e4:	40020440 	.word	0x40020440
 80049e8:	40020458 	.word	0x40020458
 80049ec:	40020470 	.word	0x40020470
 80049f0:	40020488 	.word	0x40020488
 80049f4:	400204a0 	.word	0x400204a0
 80049f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 020e 	bic.w	r2, r2, #14
 8004a0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6c      	ldr	r2, [pc, #432]	; (8004bc4 <HAL_DMA_Abort_IT+0x3a8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a6b      	ldr	r2, [pc, #428]	; (8004bc8 <HAL_DMA_Abort_IT+0x3ac>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a69      	ldr	r2, [pc, #420]	; (8004bcc <HAL_DMA_Abort_IT+0x3b0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a68      	ldr	r2, [pc, #416]	; (8004bd0 <HAL_DMA_Abort_IT+0x3b4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a66      	ldr	r2, [pc, #408]	; (8004bd4 <HAL_DMA_Abort_IT+0x3b8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a65      	ldr	r2, [pc, #404]	; (8004bd8 <HAL_DMA_Abort_IT+0x3bc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a63      	ldr	r2, [pc, #396]	; (8004bdc <HAL_DMA_Abort_IT+0x3c0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a62      	ldr	r2, [pc, #392]	; (8004be0 <HAL_DMA_Abort_IT+0x3c4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a60      	ldr	r2, [pc, #384]	; (8004be4 <HAL_DMA_Abort_IT+0x3c8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5f      	ldr	r2, [pc, #380]	; (8004be8 <HAL_DMA_Abort_IT+0x3cc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5d      	ldr	r2, [pc, #372]	; (8004bec <HAL_DMA_Abort_IT+0x3d0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a5c      	ldr	r2, [pc, #368]	; (8004bf0 <HAL_DMA_Abort_IT+0x3d4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5a      	ldr	r2, [pc, #360]	; (8004bf4 <HAL_DMA_Abort_IT+0x3d8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a59      	ldr	r2, [pc, #356]	; (8004bf8 <HAL_DMA_Abort_IT+0x3dc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a57      	ldr	r2, [pc, #348]	; (8004bfc <HAL_DMA_Abort_IT+0x3e0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_Abort_IT+0x290>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_DMA_Abort_IT+0x3e4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <HAL_DMA_Abort_IT+0x2a2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e007      	b.n	8004ace <HAL_DMA_Abort_IT+0x2b2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3c      	ldr	r2, [pc, #240]	; (8004bc4 <HAL_DMA_Abort_IT+0x3a8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d072      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_DMA_Abort_IT+0x3ac>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d06d      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <HAL_DMA_Abort_IT+0x3b0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d068      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <HAL_DMA_Abort_IT+0x3b4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d063      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_DMA_Abort_IT+0x3b8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d05e      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_DMA_Abort_IT+0x3bc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d059      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_DMA_Abort_IT+0x3c0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d054      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a31      	ldr	r2, [pc, #196]	; (8004be0 <HAL_DMA_Abort_IT+0x3c4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04f      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <HAL_DMA_Abort_IT+0x3c8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_DMA_Abort_IT+0x3cc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_DMA_Abort_IT+0x3d0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_DMA_Abort_IT+0x3d4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <HAL_DMA_Abort_IT+0x3d8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_DMA_Abort_IT+0x3dc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <HAL_DMA_Abort_IT+0x3e0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_DMA_Abort_IT+0x3e4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_DMA_Abort_IT+0x3e8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_DMA_Abort_IT+0x3ec>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_DMA_Abort_IT+0x3f0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_DMA_Abort_IT+0x3f4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_DMA_Abort_IT+0x3f8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_DMA_Abort_IT+0x3fc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_DMA_Abort_IT+0x400>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_DMA_Abort_IT+0x3a2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_DMA_Abort_IT+0x404>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d132      	bne.n	8004c24 <HAL_DMA_Abort_IT+0x408>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e031      	b.n	8004c26 <HAL_DMA_Abort_IT+0x40a>
 8004bc2:	bf00      	nop
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
 8004c04:	58025408 	.word	0x58025408
 8004c08:	5802541c 	.word	0x5802541c
 8004c0c:	58025430 	.word	0x58025430
 8004c10:	58025444 	.word	0x58025444
 8004c14:	58025458 	.word	0x58025458
 8004c18:	5802546c 	.word	0x5802546c
 8004c1c:	58025480 	.word	0x58025480
 8004c20:	58025494 	.word	0x58025494
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d028      	beq.n	8004c7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop

08004ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cb4:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <HAL_DMA_IRQHandler+0x1ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a67      	ldr	r2, [pc, #412]	; (8004e58 <HAL_DMA_IRQHandler+0x1b0>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0a9b      	lsrs	r3, r3, #10
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5f      	ldr	r2, [pc, #380]	; (8004e5c <HAL_DMA_IRQHandler+0x1b4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04a      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <HAL_DMA_IRQHandler+0x1b8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d045      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5c      	ldr	r2, [pc, #368]	; (8004e64 <HAL_DMA_IRQHandler+0x1bc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5a      	ldr	r2, [pc, #360]	; (8004e68 <HAL_DMA_IRQHandler+0x1c0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d03b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a59      	ldr	r2, [pc, #356]	; (8004e6c <HAL_DMA_IRQHandler+0x1c4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d036      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a57      	ldr	r2, [pc, #348]	; (8004e70 <HAL_DMA_IRQHandler+0x1c8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d031      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a56      	ldr	r2, [pc, #344]	; (8004e74 <HAL_DMA_IRQHandler+0x1cc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02c      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a54      	ldr	r2, [pc, #336]	; (8004e78 <HAL_DMA_IRQHandler+0x1d0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d027      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a53      	ldr	r2, [pc, #332]	; (8004e7c <HAL_DMA_IRQHandler+0x1d4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a51      	ldr	r2, [pc, #324]	; (8004e80 <HAL_DMA_IRQHandler+0x1d8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a50      	ldr	r2, [pc, #320]	; (8004e84 <HAL_DMA_IRQHandler+0x1dc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a4e      	ldr	r2, [pc, #312]	; (8004e88 <HAL_DMA_IRQHandler+0x1e0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4d      	ldr	r2, [pc, #308]	; (8004e8c <HAL_DMA_IRQHandler+0x1e4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_DMA_IRQHandler+0x1e8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <HAL_DMA_IRQHandler+0x1ec>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xd2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a48      	ldr	r2, [pc, #288]	; (8004e98 <HAL_DMA_IRQHandler+0x1f0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_DMA_IRQHandler+0xd6>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_DMA_IRQHandler+0xd8>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 842b 	beq.w	80055dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2208      	movs	r2, #8
 8004d90:	409a      	lsls	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a2 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2e      	ldr	r2, [pc, #184]	; (8004e5c <HAL_DMA_IRQHandler+0x1b4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04a      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2d      	ldr	r2, [pc, #180]	; (8004e60 <HAL_DMA_IRQHandler+0x1b8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d045      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <HAL_DMA_IRQHandler+0x1bc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d040      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_DMA_IRQHandler+0x1c0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d03b      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <HAL_DMA_IRQHandler+0x1c4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d036      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a27      	ldr	r2, [pc, #156]	; (8004e70 <HAL_DMA_IRQHandler+0x1c8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d031      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <HAL_DMA_IRQHandler+0x1cc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02c      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_DMA_IRQHandler+0x1d0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d027      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <HAL_DMA_IRQHandler+0x1d4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <HAL_DMA_IRQHandler+0x1d8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d01d      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_DMA_IRQHandler+0x1dc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_DMA_IRQHandler+0x1e0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <HAL_DMA_IRQHandler+0x1e4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_DMA_IRQHandler+0x1e8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_DMA_IRQHandler+0x1ec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x194>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_DMA_IRQHandler+0x1f0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d12f      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x1f4>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e02e      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x208>
 8004e52:	bf00      	nop
 8004e54:	24000000 	.word	0x24000000
 8004e58:	1b4e81b5 	.word	0x1b4e81b5
 8004e5c:	40020010 	.word	0x40020010
 8004e60:	40020028 	.word	0x40020028
 8004e64:	40020040 	.word	0x40020040
 8004e68:	40020058 	.word	0x40020058
 8004e6c:	40020070 	.word	0x40020070
 8004e70:	40020088 	.word	0x40020088
 8004e74:	400200a0 	.word	0x400200a0
 8004e78:	400200b8 	.word	0x400200b8
 8004e7c:	40020410 	.word	0x40020410
 8004e80:	40020428 	.word	0x40020428
 8004e84:	40020440 	.word	0x40020440
 8004e88:	40020458 	.word	0x40020458
 8004e8c:	40020470 	.word	0x40020470
 8004e90:	40020488 	.word	0x40020488
 8004e94:	400204a0 	.word	0x400204a0
 8004e98:	400204b8 	.word	0x400204b8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2208      	movs	r2, #8
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d06e      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <HAL_DMA_IRQHandler+0x3f8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d04a      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a67      	ldr	r2, [pc, #412]	; (80050a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d045      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a66      	ldr	r2, [pc, #408]	; (80050a8 <HAL_DMA_IRQHandler+0x400>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a64      	ldr	r2, [pc, #400]	; (80050ac <HAL_DMA_IRQHandler+0x404>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03b      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a63      	ldr	r2, [pc, #396]	; (80050b0 <HAL_DMA_IRQHandler+0x408>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d036      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a61      	ldr	r2, [pc, #388]	; (80050b4 <HAL_DMA_IRQHandler+0x40c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d031      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a60      	ldr	r2, [pc, #384]	; (80050b8 <HAL_DMA_IRQHandler+0x410>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02c      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5e      	ldr	r2, [pc, #376]	; (80050bc <HAL_DMA_IRQHandler+0x414>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d027      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5d      	ldr	r2, [pc, #372]	; (80050c0 <HAL_DMA_IRQHandler+0x418>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5b      	ldr	r2, [pc, #364]	; (80050c4 <HAL_DMA_IRQHandler+0x41c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5a      	ldr	r2, [pc, #360]	; (80050c8 <HAL_DMA_IRQHandler+0x420>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a58      	ldr	r2, [pc, #352]	; (80050cc <HAL_DMA_IRQHandler+0x424>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a57      	ldr	r2, [pc, #348]	; (80050d0 <HAL_DMA_IRQHandler+0x428>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a55      	ldr	r2, [pc, #340]	; (80050d4 <HAL_DMA_IRQHandler+0x42c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_DMA_IRQHandler+0x430>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x2ee>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_DMA_IRQHandler+0x434>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10a      	bne.n	8004fac <HAL_DMA_IRQHandler+0x304>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e003      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x30c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f043 0202 	orr.w	r2, r3, #2
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2204      	movs	r2, #4
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 808f 	beq.w	8005108 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <HAL_DMA_IRQHandler+0x3f8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d04a      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d045      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <HAL_DMA_IRQHandler+0x400>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d040      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <HAL_DMA_IRQHandler+0x404>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d03b      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_DMA_IRQHandler+0x408>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d036      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <HAL_DMA_IRQHandler+0x40c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d031      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_DMA_IRQHandler+0x410>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d02c      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <HAL_DMA_IRQHandler+0x414>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d027      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <HAL_DMA_IRQHandler+0x418>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_DMA_IRQHandler+0x41c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01d      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_DMA_IRQHandler+0x420>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_DMA_IRQHandler+0x424>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1a      	ldr	r2, [pc, #104]	; (80050d0 <HAL_DMA_IRQHandler+0x428>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_DMA_IRQHandler+0x42c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <HAL_DMA_IRQHandler+0x430>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_DMA_IRQHandler+0x3e2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_DMA_IRQHandler+0x434>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d12a      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x438>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e023      	b.n	80050e8 <HAL_DMA_IRQHandler+0x440>
 80050a0:	40020010 	.word	0x40020010
 80050a4:	40020028 	.word	0x40020028
 80050a8:	40020040 	.word	0x40020040
 80050ac:	40020058 	.word	0x40020058
 80050b0:	40020070 	.word	0x40020070
 80050b4:	40020088 	.word	0x40020088
 80050b8:	400200a0 	.word	0x400200a0
 80050bc:	400200b8 	.word	0x400200b8
 80050c0:	40020410 	.word	0x40020410
 80050c4:	40020428 	.word	0x40020428
 80050c8:	40020440 	.word	0x40020440
 80050cc:	40020458 	.word	0x40020458
 80050d0:	40020470 	.word	0x40020470
 80050d4:	40020488 	.word	0x40020488
 80050d8:	400204a0 	.word	0x400204a0
 80050dc:	400204b8 	.word	0x400204b8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2204      	movs	r2, #4
 80050f6:	409a      	lsls	r2, r3
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f043 0204 	orr.w	r2, r3, #4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2210      	movs	r2, #16
 8005112:	409a      	lsls	r2, r3
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a6 	beq.w	800526a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a85      	ldr	r2, [pc, #532]	; (8005338 <HAL_DMA_IRQHandler+0x690>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d04a      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a83      	ldr	r2, [pc, #524]	; (800533c <HAL_DMA_IRQHandler+0x694>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d045      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a82      	ldr	r2, [pc, #520]	; (8005340 <HAL_DMA_IRQHandler+0x698>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d040      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a80      	ldr	r2, [pc, #512]	; (8005344 <HAL_DMA_IRQHandler+0x69c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d03b      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7f      	ldr	r2, [pc, #508]	; (8005348 <HAL_DMA_IRQHandler+0x6a0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d036      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7d      	ldr	r2, [pc, #500]	; (800534c <HAL_DMA_IRQHandler+0x6a4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7c      	ldr	r2, [pc, #496]	; (8005350 <HAL_DMA_IRQHandler+0x6a8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d02c      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7a      	ldr	r2, [pc, #488]	; (8005354 <HAL_DMA_IRQHandler+0x6ac>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d027      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a79      	ldr	r2, [pc, #484]	; (8005358 <HAL_DMA_IRQHandler+0x6b0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a77      	ldr	r2, [pc, #476]	; (800535c <HAL_DMA_IRQHandler+0x6b4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a76      	ldr	r2, [pc, #472]	; (8005360 <HAL_DMA_IRQHandler+0x6b8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a74      	ldr	r2, [pc, #464]	; (8005364 <HAL_DMA_IRQHandler+0x6bc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a73      	ldr	r2, [pc, #460]	; (8005368 <HAL_DMA_IRQHandler+0x6c0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a71      	ldr	r2, [pc, #452]	; (800536c <HAL_DMA_IRQHandler+0x6c4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a70      	ldr	r2, [pc, #448]	; (8005370 <HAL_DMA_IRQHandler+0x6c8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_DMA_IRQHandler+0x516>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	; (8005374 <HAL_DMA_IRQHandler+0x6cc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10a      	bne.n	80051d4 <HAL_DMA_IRQHandler+0x52c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e009      	b.n	80051e8 <HAL_DMA_IRQHandler+0x540>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d03e      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2210      	movs	r2, #16
 80051f6:	409a      	lsls	r2, r3
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d108      	bne.n	800522a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d024      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
 8005228:	e01f      	b.n	800526a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01b      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
 800523a:	e016      	b.n	800526a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d107      	bne.n	800525a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0208 	bic.w	r2, r2, #8
 8005258:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2220      	movs	r2, #32
 8005274:	409a      	lsls	r2, r3
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8110 	beq.w	80054a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <HAL_DMA_IRQHandler+0x690>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_DMA_IRQHandler+0x694>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <HAL_DMA_IRQHandler+0x698>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_DMA_IRQHandler+0x69c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <HAL_DMA_IRQHandler+0x6a0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a25      	ldr	r2, [pc, #148]	; (800534c <HAL_DMA_IRQHandler+0x6a4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a23      	ldr	r2, [pc, #140]	; (8005350 <HAL_DMA_IRQHandler+0x6a8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_DMA_IRQHandler+0x6ac>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <HAL_DMA_IRQHandler+0x6b0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_DMA_IRQHandler+0x6b4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_DMA_IRQHandler+0x6b8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_DMA_IRQHandler+0x6bc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_DMA_IRQHandler+0x6c0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_DMA_IRQHandler+0x6c4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a17      	ldr	r2, [pc, #92]	; (8005370 <HAL_DMA_IRQHandler+0x6c8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_IRQHandler+0x678>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_DMA_IRQHandler+0x6cc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d12b      	bne.n	8005378 <HAL_DMA_IRQHandler+0x6d0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e02a      	b.n	800538c <HAL_DMA_IRQHandler+0x6e4>
 8005336:	bf00      	nop
 8005338:	40020010 	.word	0x40020010
 800533c:	40020028 	.word	0x40020028
 8005340:	40020040 	.word	0x40020040
 8005344:	40020058 	.word	0x40020058
 8005348:	40020070 	.word	0x40020070
 800534c:	40020088 	.word	0x40020088
 8005350:	400200a0 	.word	0x400200a0
 8005354:	400200b8 	.word	0x400200b8
 8005358:	40020410 	.word	0x40020410
 800535c:	40020428 	.word	0x40020428
 8005360:	40020440 	.word	0x40020440
 8005364:	40020458 	.word	0x40020458
 8005368:	40020470 	.word	0x40020470
 800536c:	40020488 	.word	0x40020488
 8005370:	400204a0 	.word	0x400204a0
 8005374:	400204b8 	.word	0x400204b8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8087 	beq.w	80054a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2220      	movs	r2, #32
 800539c:	409a      	lsls	r2, r3
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d139      	bne.n	8005422 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0216 	bic.w	r2, r2, #22
 80053bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <HAL_DMA_IRQHandler+0x736>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0208 	bic.w	r2, r2, #8
 80053ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	223f      	movs	r2, #63	; 0x3f
 80053f8:	409a      	lsls	r2, r3
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 834a 	beq.w	8005aac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
          }
          return;
 8005420:	e344      	b.n	8005aac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d018      	beq.n	8005462 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	2b00      	cmp	r3, #0
 8005444:	d02c      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	4798      	blx	r3
 800544e:	e027      	b.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d023      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
 8005460:	e01e      	b.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10f      	bne.n	8005490 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0210 	bic.w	r2, r2, #16
 800547e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8306 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8088 	beq.w	80055c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7a      	ldr	r2, [pc, #488]	; (80056b0 <HAL_DMA_IRQHandler+0xa08>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a79      	ldr	r2, [pc, #484]	; (80056b4 <HAL_DMA_IRQHandler+0xa0c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a77      	ldr	r2, [pc, #476]	; (80056b8 <HAL_DMA_IRQHandler+0xa10>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a76      	ldr	r2, [pc, #472]	; (80056bc <HAL_DMA_IRQHandler+0xa14>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a74      	ldr	r2, [pc, #464]	; (80056c0 <HAL_DMA_IRQHandler+0xa18>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a73      	ldr	r2, [pc, #460]	; (80056c4 <HAL_DMA_IRQHandler+0xa1c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a71      	ldr	r2, [pc, #452]	; (80056c8 <HAL_DMA_IRQHandler+0xa20>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a70      	ldr	r2, [pc, #448]	; (80056cc <HAL_DMA_IRQHandler+0xa24>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6e      	ldr	r2, [pc, #440]	; (80056d0 <HAL_DMA_IRQHandler+0xa28>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6d      	ldr	r2, [pc, #436]	; (80056d4 <HAL_DMA_IRQHandler+0xa2c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6b      	ldr	r2, [pc, #428]	; (80056d8 <HAL_DMA_IRQHandler+0xa30>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <HAL_DMA_IRQHandler+0xa34>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a68      	ldr	r2, [pc, #416]	; (80056e0 <HAL_DMA_IRQHandler+0xa38>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a67      	ldr	r2, [pc, #412]	; (80056e4 <HAL_DMA_IRQHandler+0xa3c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a65      	ldr	r2, [pc, #404]	; (80056e8 <HAL_DMA_IRQHandler+0xa40>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_IRQHandler+0x8b8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a64      	ldr	r2, [pc, #400]	; (80056ec <HAL_DMA_IRQHandler+0xa44>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <HAL_DMA_IRQHandler+0x8ca>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e007      	b.n	8005582 <HAL_DMA_IRQHandler+0x8da>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558a:	429a      	cmp	r2, r3
 800558c:	d307      	bcc.n	800559e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f2      	bne.n	8005582 <HAL_DMA_IRQHandler+0x8da>
 800559c:	e000      	b.n	80055a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800559e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2203      	movs	r2, #3
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80055b6:	e003      	b.n	80055c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8272 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
 80055da:	e26c      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a43      	ldr	r2, [pc, #268]	; (80056f0 <HAL_DMA_IRQHandler+0xa48>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a42      	ldr	r2, [pc, #264]	; (80056f4 <HAL_DMA_IRQHandler+0xa4c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01d      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <HAL_DMA_IRQHandler+0xa50>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <HAL_DMA_IRQHandler+0xa54>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <HAL_DMA_IRQHandler+0xa58>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a3c      	ldr	r2, [pc, #240]	; (8005704 <HAL_DMA_IRQHandler+0xa5c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3a      	ldr	r2, [pc, #232]	; (8005708 <HAL_DMA_IRQHandler+0xa60>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_DMA_IRQHandler+0x984>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a39      	ldr	r2, [pc, #228]	; (800570c <HAL_DMA_IRQHandler+0xa64>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_DMA_IRQHandler+0x988>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_DMA_IRQHandler+0x98a>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 823f 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2204      	movs	r2, #4
 800564a:	409a      	lsls	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80cd 	beq.w	80057f0 <HAL_DMA_IRQHandler+0xb48>
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80c7 	beq.w	80057f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2204      	movs	r2, #4
 800566c:	409a      	lsls	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d049      	beq.n	8005710 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8210 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005698:	e20a      	b.n	8005ab0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8206 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ac:	e200      	b.n	8005ab0 <HAL_DMA_IRQHandler+0xe08>
 80056ae:	bf00      	nop
 80056b0:	40020010 	.word	0x40020010
 80056b4:	40020028 	.word	0x40020028
 80056b8:	40020040 	.word	0x40020040
 80056bc:	40020058 	.word	0x40020058
 80056c0:	40020070 	.word	0x40020070
 80056c4:	40020088 	.word	0x40020088
 80056c8:	400200a0 	.word	0x400200a0
 80056cc:	400200b8 	.word	0x400200b8
 80056d0:	40020410 	.word	0x40020410
 80056d4:	40020428 	.word	0x40020428
 80056d8:	40020440 	.word	0x40020440
 80056dc:	40020458 	.word	0x40020458
 80056e0:	40020470 	.word	0x40020470
 80056e4:	40020488 	.word	0x40020488
 80056e8:	400204a0 	.word	0x400204a0
 80056ec:	400204b8 	.word	0x400204b8
 80056f0:	58025408 	.word	0x58025408
 80056f4:	5802541c 	.word	0x5802541c
 80056f8:	58025430 	.word	0x58025430
 80056fc:	58025444 	.word	0x58025444
 8005700:	58025458 	.word	0x58025458
 8005704:	5802546c 	.word	0x5802546c
 8005708:	58025480 	.word	0x58025480
 800570c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d160      	bne.n	80057dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7f      	ldr	r2, [pc, #508]	; (800591c <HAL_DMA_IRQHandler+0xc74>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d04a      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a7d      	ldr	r2, [pc, #500]	; (8005920 <HAL_DMA_IRQHandler+0xc78>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d045      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7c      	ldr	r2, [pc, #496]	; (8005924 <HAL_DMA_IRQHandler+0xc7c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d040      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7a      	ldr	r2, [pc, #488]	; (8005928 <HAL_DMA_IRQHandler+0xc80>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d03b      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a79      	ldr	r2, [pc, #484]	; (800592c <HAL_DMA_IRQHandler+0xc84>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d036      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a77      	ldr	r2, [pc, #476]	; (8005930 <HAL_DMA_IRQHandler+0xc88>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d031      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a76      	ldr	r2, [pc, #472]	; (8005934 <HAL_DMA_IRQHandler+0xc8c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d02c      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a74      	ldr	r2, [pc, #464]	; (8005938 <HAL_DMA_IRQHandler+0xc90>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d027      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a73      	ldr	r2, [pc, #460]	; (800593c <HAL_DMA_IRQHandler+0xc94>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a71      	ldr	r2, [pc, #452]	; (8005940 <HAL_DMA_IRQHandler+0xc98>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01d      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a70      	ldr	r2, [pc, #448]	; (8005944 <HAL_DMA_IRQHandler+0xc9c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a6e      	ldr	r2, [pc, #440]	; (8005948 <HAL_DMA_IRQHandler+0xca0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6d      	ldr	r2, [pc, #436]	; (800594c <HAL_DMA_IRQHandler+0xca4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6b      	ldr	r2, [pc, #428]	; (8005950 <HAL_DMA_IRQHandler+0xca8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6a      	ldr	r2, [pc, #424]	; (8005954 <HAL_DMA_IRQHandler+0xcac>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_DMA_IRQHandler+0xb12>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a68      	ldr	r2, [pc, #416]	; (8005958 <HAL_DMA_IRQHandler+0xcb0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d108      	bne.n	80057cc <HAL_DMA_IRQHandler+0xb24>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0208 	bic.w	r2, r2, #8
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e007      	b.n	80057dc <HAL_DMA_IRQHandler+0xb34>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8165 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ee:	e15f      	b.n	8005ab0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	2202      	movs	r2, #2
 80057fa:	409a      	lsls	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80c5 	beq.w	8005990 <HAL_DMA_IRQHandler+0xce8>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80bf 	beq.w	8005990 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2202      	movs	r2, #2
 800581c:	409a      	lsls	r2, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d018      	beq.n	800585e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 813a 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005848:	e134      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8130 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800585c:	e12a      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 8089 	bne.w	800597c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a2b      	ldr	r2, [pc, #172]	; (800591c <HAL_DMA_IRQHandler+0xc74>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d04a      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a29      	ldr	r2, [pc, #164]	; (8005920 <HAL_DMA_IRQHandler+0xc78>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d045      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a28      	ldr	r2, [pc, #160]	; (8005924 <HAL_DMA_IRQHandler+0xc7c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d040      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a26      	ldr	r2, [pc, #152]	; (8005928 <HAL_DMA_IRQHandler+0xc80>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d03b      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a25      	ldr	r2, [pc, #148]	; (800592c <HAL_DMA_IRQHandler+0xc84>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d036      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a23      	ldr	r2, [pc, #140]	; (8005930 <HAL_DMA_IRQHandler+0xc88>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d031      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a22      	ldr	r2, [pc, #136]	; (8005934 <HAL_DMA_IRQHandler+0xc8c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d02c      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a20      	ldr	r2, [pc, #128]	; (8005938 <HAL_DMA_IRQHandler+0xc90>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d027      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1f      	ldr	r2, [pc, #124]	; (800593c <HAL_DMA_IRQHandler+0xc94>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <HAL_DMA_IRQHandler+0xc98>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01d      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_DMA_IRQHandler+0xc9c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <HAL_DMA_IRQHandler+0xca0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a19      	ldr	r2, [pc, #100]	; (800594c <HAL_DMA_IRQHandler+0xca4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a17      	ldr	r2, [pc, #92]	; (8005950 <HAL_DMA_IRQHandler+0xca8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a16      	ldr	r2, [pc, #88]	; (8005954 <HAL_DMA_IRQHandler+0xcac>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_DMA_IRQHandler+0xc62>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a14      	ldr	r2, [pc, #80]	; (8005958 <HAL_DMA_IRQHandler+0xcb0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d128      	bne.n	800595c <HAL_DMA_IRQHandler+0xcb4>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0214 	bic.w	r2, r2, #20
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e027      	b.n	800596c <HAL_DMA_IRQHandler+0xcc4>
 800591c:	40020010 	.word	0x40020010
 8005920:	40020028 	.word	0x40020028
 8005924:	40020040 	.word	0x40020040
 8005928:	40020058 	.word	0x40020058
 800592c:	40020070 	.word	0x40020070
 8005930:	40020088 	.word	0x40020088
 8005934:	400200a0 	.word	0x400200a0
 8005938:	400200b8 	.word	0x400200b8
 800593c:	40020410 	.word	0x40020410
 8005940:	40020428 	.word	0x40020428
 8005944:	40020440 	.word	0x40020440
 8005948:	40020458 	.word	0x40020458
 800594c:	40020470 	.word	0x40020470
 8005950:	40020488 	.word	0x40020488
 8005954:	400204a0 	.word	0x400204a0
 8005958:	400204b8 	.word	0x400204b8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 020a 	bic.w	r2, r2, #10
 800596a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8097 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800598e:	e091      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2208      	movs	r2, #8
 800599a:	409a      	lsls	r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8088 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8082 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a41      	ldr	r2, [pc, #260]	; (8005abc <HAL_DMA_IRQHandler+0xe14>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d04a      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <HAL_DMA_IRQHandler+0xe18>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d045      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a3e      	ldr	r2, [pc, #248]	; (8005ac4 <HAL_DMA_IRQHandler+0xe1c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d040      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <HAL_DMA_IRQHandler+0xe20>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d03b      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <HAL_DMA_IRQHandler+0xe24>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d036      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a39      	ldr	r2, [pc, #228]	; (8005ad0 <HAL_DMA_IRQHandler+0xe28>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d031      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a38      	ldr	r2, [pc, #224]	; (8005ad4 <HAL_DMA_IRQHandler+0xe2c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d02c      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a36      	ldr	r2, [pc, #216]	; (8005ad8 <HAL_DMA_IRQHandler+0xe30>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d027      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a35      	ldr	r2, [pc, #212]	; (8005adc <HAL_DMA_IRQHandler+0xe34>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a33      	ldr	r2, [pc, #204]	; (8005ae0 <HAL_DMA_IRQHandler+0xe38>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a32      	ldr	r2, [pc, #200]	; (8005ae4 <HAL_DMA_IRQHandler+0xe3c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a30      	ldr	r2, [pc, #192]	; (8005ae8 <HAL_DMA_IRQHandler+0xe40>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <HAL_DMA_IRQHandler+0xe44>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_DMA_IRQHandler+0xe48>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <HAL_DMA_IRQHandler+0xe4c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xdaa>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <HAL_DMA_IRQHandler+0xe50>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <HAL_DMA_IRQHandler+0xdbc>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 021c 	bic.w	r2, r2, #28
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e007      	b.n	8005a74 <HAL_DMA_IRQHandler+0xdcc>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 020e 	bic.w	r2, r2, #14
 8005a72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
 8005aaa:	e004      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ab6:	3728      	adds	r7, #40	; 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8

08005afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a42      	ldr	r2, [pc, #264]	; (8005c14 <DMA_CalcBaseAndBitshift+0x118>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d04a      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a41      	ldr	r2, [pc, #260]	; (8005c18 <DMA_CalcBaseAndBitshift+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d045      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a3f      	ldr	r2, [pc, #252]	; (8005c1c <DMA_CalcBaseAndBitshift+0x120>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d040      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3e      	ldr	r2, [pc, #248]	; (8005c20 <DMA_CalcBaseAndBitshift+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d03b      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <DMA_CalcBaseAndBitshift+0x128>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d036      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	; (8005c28 <DMA_CalcBaseAndBitshift+0x12c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d031      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a39      	ldr	r2, [pc, #228]	; (8005c2c <DMA_CalcBaseAndBitshift+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02c      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a38      	ldr	r2, [pc, #224]	; (8005c30 <DMA_CalcBaseAndBitshift+0x134>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d027      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a36      	ldr	r2, [pc, #216]	; (8005c34 <DMA_CalcBaseAndBitshift+0x138>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d022      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a35      	ldr	r2, [pc, #212]	; (8005c38 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d01d      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a33      	ldr	r2, [pc, #204]	; (8005c3c <DMA_CalcBaseAndBitshift+0x140>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <DMA_CalcBaseAndBitshift+0x144>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <DMA_CalcBaseAndBitshift+0x148>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <DMA_CalcBaseAndBitshift+0x14c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2d      	ldr	r2, [pc, #180]	; (8005c4c <DMA_CalcBaseAndBitshift+0x150>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <DMA_CalcBaseAndBitshift+0x154>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d101      	bne.n	8005ba8 <DMA_CalcBaseAndBitshift+0xac>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <DMA_CalcBaseAndBitshift+0xae>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d024      	beq.n	8005bf8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	3b10      	subs	r3, #16
 8005bb6:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <DMA_CalcBaseAndBitshift+0x158>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <DMA_CalcBaseAndBitshift+0x15c>)
 8005bc8:	5cd3      	ldrb	r3, [r2, r3]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d908      	bls.n	8005be8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4b1f      	ldr	r3, [pc, #124]	; (8005c5c <DMA_CalcBaseAndBitshift+0x160>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	659a      	str	r2, [r3, #88]	; 0x58
 8005be6:	e00d      	b.n	8005c04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <DMA_CalcBaseAndBitshift+0x160>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bf6:	e005      	b.n	8005c04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40020010 	.word	0x40020010
 8005c18:	40020028 	.word	0x40020028
 8005c1c:	40020040 	.word	0x40020040
 8005c20:	40020058 	.word	0x40020058
 8005c24:	40020070 	.word	0x40020070
 8005c28:	40020088 	.word	0x40020088
 8005c2c:	400200a0 	.word	0x400200a0
 8005c30:	400200b8 	.word	0x400200b8
 8005c34:	40020410 	.word	0x40020410
 8005c38:	40020428 	.word	0x40020428
 8005c3c:	40020440 	.word	0x40020440
 8005c40:	40020458 	.word	0x40020458
 8005c44:	40020470 	.word	0x40020470
 8005c48:	40020488 	.word	0x40020488
 8005c4c:	400204a0 	.word	0x400204a0
 8005c50:	400204b8 	.word	0x400204b8
 8005c54:	aaaaaaab 	.word	0xaaaaaaab
 8005c58:	08014904 	.word	0x08014904
 8005c5c:	fffffc00 	.word	0xfffffc00

08005c60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d120      	bne.n	8005cb6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d858      	bhi.n	8005d2e <DMA_CheckFifoParam+0xce>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <DMA_CheckFifoParam+0x24>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005ca7 	.word	0x08005ca7
 8005c8c:	08005c95 	.word	0x08005c95
 8005c90:	08005d2f 	.word	0x08005d2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d048      	beq.n	8005d32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ca4:	e045      	b.n	8005d32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cae:	d142      	bne.n	8005d36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cb4:	e03f      	b.n	8005d36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbe:	d123      	bne.n	8005d08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d838      	bhi.n	8005d3a <DMA_CheckFifoParam+0xda>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <DMA_CheckFifoParam+0x70>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005ce7 	.word	0x08005ce7
 8005cd8:	08005ce1 	.word	0x08005ce1
 8005cdc:	08005cf9 	.word	0x08005cf9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ce4:	e030      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d025      	beq.n	8005d3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cf6:	e022      	b.n	8005d3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d00:	d11f      	bne.n	8005d42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d06:	e01c      	b.n	8005d42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d902      	bls.n	8005d16 <DMA_CheckFifoParam+0xb6>
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d003      	beq.n	8005d1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d14:	e018      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
        break;
 8005d1a:	e015      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d2c:	e00b      	b.n	8005d46 <DMA_CheckFifoParam+0xe6>
        break;
 8005d2e:	bf00      	nop
 8005d30:	e00a      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        break;
 8005d32:	bf00      	nop
 8005d34:	e008      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        break;
 8005d36:	bf00      	nop
 8005d38:	e006      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        break;
 8005d3a:	bf00      	nop
 8005d3c:	e004      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
        break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <DMA_CheckFifoParam+0xe8>
    break;
 8005d46:	bf00      	nop
    }
  }

  return status;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop

08005d58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a38      	ldr	r2, [pc, #224]	; (8005e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a36      	ldr	r2, [pc, #216]	; (8005e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01d      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a35      	ldr	r2, [pc, #212]	; (8005e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a33      	ldr	r2, [pc, #204]	; (8005e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a32      	ldr	r2, [pc, #200]	; (8005e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a30      	ldr	r2, [pc, #192]	; (8005e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2d      	ldr	r2, [pc, #180]	; (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01a      	beq.n	8005df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	3b08      	subs	r3, #8
 8005dc8:	4a28      	ldr	r2, [pc, #160]	; (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a24      	ldr	r2, [pc, #144]	; (8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005de4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2201      	movs	r2, #1
 8005dee:	409a      	lsls	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005df4:	e024      	b.n	8005e40 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	3b10      	subs	r3, #16
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	; (8005e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d806      	bhi.n	8005e1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d902      	bls.n	8005e1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	58025408 	.word	0x58025408
 8005e50:	5802541c 	.word	0x5802541c
 8005e54:	58025430 	.word	0x58025430
 8005e58:	58025444 	.word	0x58025444
 8005e5c:	58025458 	.word	0x58025458
 8005e60:	5802546c 	.word	0x5802546c
 8005e64:	58025480 	.word	0x58025480
 8005e68:	58025494 	.word	0x58025494
 8005e6c:	cccccccd 	.word	0xcccccccd
 8005e70:	16009600 	.word	0x16009600
 8005e74:	58025880 	.word	0x58025880
 8005e78:	aaaaaaab 	.word	0xaaaaaaab
 8005e7c:	400204b8 	.word	0x400204b8
 8005e80:	4002040f 	.word	0x4002040f
 8005e84:	10008200 	.word	0x10008200
 8005e88:	40020880 	.word	0x40020880

08005e8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d04a      	beq.n	8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d847      	bhi.n	8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a25      	ldr	r2, [pc, #148]	; (8005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a24      	ldr	r2, [pc, #144]	; (8005f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f14:	671a      	str	r2, [r3, #112]	; 0x70
 8005f16:	e009      	b.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a11      	ldr	r2, [pc, #68]	; (8005f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f2a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	58025408 	.word	0x58025408
 8005f48:	5802541c 	.word	0x5802541c
 8005f4c:	58025430 	.word	0x58025430
 8005f50:	58025444 	.word	0x58025444
 8005f54:	58025458 	.word	0x58025458
 8005f58:	5802546c 	.word	0x5802546c
 8005f5c:	58025480 	.word	0x58025480
 8005f60:	58025494 	.word	0x58025494
 8005f64:	1600963f 	.word	0x1600963f
 8005f68:	58025940 	.word	0x58025940
 8005f6c:	1000823f 	.word	0x1000823f
 8005f70:	40020940 	.word	0x40020940

08005f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	; 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f82:	4b89      	ldr	r3, [pc, #548]	; (80061a8 <HAL_GPIO_Init+0x234>)
 8005f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f86:	e194      	b.n	80062b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa01 f303 	lsl.w	r3, r1, r3
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8186 	beq.w	80062ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d005      	beq.n	8005fb8 <HAL_GPIO_Init+0x44>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d130      	bne.n	800601a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fee:	2201      	movs	r2, #1
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 0201 	and.w	r2, r3, #1
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d017      	beq.n	8006056 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	2203      	movs	r2, #3
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d123      	bne.n	80060aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	08da      	lsrs	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3208      	adds	r2, #8
 800606a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	220f      	movs	r2, #15
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	08da      	lsrs	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3208      	adds	r2, #8
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	2203      	movs	r2, #3
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0203 	and.w	r2, r3, #3
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80e0 	beq.w	80062ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <HAL_GPIO_Init+0x238>)
 80060ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060f2:	4a2e      	ldr	r2, [pc, #184]	; (80061ac <HAL_GPIO_Init+0x238>)
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <HAL_GPIO_Init+0x238>)
 80060fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800610a:	4a29      	ldr	r2, [pc, #164]	; (80061b0 <HAL_GPIO_Init+0x23c>)
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	089b      	lsrs	r3, r3, #2
 8006110:	3302      	adds	r3, #2
 8006112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	220f      	movs	r2, #15
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <HAL_GPIO_Init+0x240>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d052      	beq.n	80061dc <HAL_GPIO_Init+0x268>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1f      	ldr	r2, [pc, #124]	; (80061b8 <HAL_GPIO_Init+0x244>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d031      	beq.n	80061a2 <HAL_GPIO_Init+0x22e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1e      	ldr	r2, [pc, #120]	; (80061bc <HAL_GPIO_Init+0x248>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02b      	beq.n	800619e <HAL_GPIO_Init+0x22a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <HAL_GPIO_Init+0x24c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d025      	beq.n	800619a <HAL_GPIO_Init+0x226>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_GPIO_Init+0x250>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01f      	beq.n	8006196 <HAL_GPIO_Init+0x222>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <HAL_GPIO_Init+0x254>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d019      	beq.n	8006192 <HAL_GPIO_Init+0x21e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a1a      	ldr	r2, [pc, #104]	; (80061cc <HAL_GPIO_Init+0x258>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_GPIO_Init+0x21a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <HAL_GPIO_Init+0x25c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00d      	beq.n	800618a <HAL_GPIO_Init+0x216>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_GPIO_Init+0x260>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <HAL_GPIO_Init+0x212>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <HAL_GPIO_Init+0x264>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <HAL_GPIO_Init+0x20e>
 800617e:	2309      	movs	r3, #9
 8006180:	e02d      	b.n	80061de <HAL_GPIO_Init+0x26a>
 8006182:	230a      	movs	r3, #10
 8006184:	e02b      	b.n	80061de <HAL_GPIO_Init+0x26a>
 8006186:	2308      	movs	r3, #8
 8006188:	e029      	b.n	80061de <HAL_GPIO_Init+0x26a>
 800618a:	2307      	movs	r3, #7
 800618c:	e027      	b.n	80061de <HAL_GPIO_Init+0x26a>
 800618e:	2306      	movs	r3, #6
 8006190:	e025      	b.n	80061de <HAL_GPIO_Init+0x26a>
 8006192:	2305      	movs	r3, #5
 8006194:	e023      	b.n	80061de <HAL_GPIO_Init+0x26a>
 8006196:	2304      	movs	r3, #4
 8006198:	e021      	b.n	80061de <HAL_GPIO_Init+0x26a>
 800619a:	2303      	movs	r3, #3
 800619c:	e01f      	b.n	80061de <HAL_GPIO_Init+0x26a>
 800619e:	2302      	movs	r3, #2
 80061a0:	e01d      	b.n	80061de <HAL_GPIO_Init+0x26a>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e01b      	b.n	80061de <HAL_GPIO_Init+0x26a>
 80061a6:	bf00      	nop
 80061a8:	58000080 	.word	0x58000080
 80061ac:	58024400 	.word	0x58024400
 80061b0:	58000400 	.word	0x58000400
 80061b4:	58020000 	.word	0x58020000
 80061b8:	58020400 	.word	0x58020400
 80061bc:	58020800 	.word	0x58020800
 80061c0:	58020c00 	.word	0x58020c00
 80061c4:	58021000 	.word	0x58021000
 80061c8:	58021400 	.word	0x58021400
 80061cc:	58021800 	.word	0x58021800
 80061d0:	58021c00 	.word	0x58021c00
 80061d4:	58022000 	.word	0x58022000
 80061d8:	58022400 	.word	0x58022400
 80061dc:	2300      	movs	r3, #0
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	f002 0203 	and.w	r2, r2, #3
 80061e4:	0092      	lsls	r2, r2, #2
 80061e6:	4093      	lsls	r3, r2
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061ee:	4938      	ldr	r1, [pc, #224]	; (80062d0 <HAL_GPIO_Init+0x35c>)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	3302      	adds	r3, #2
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	43db      	mvns	r3, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	4013      	ands	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	43db      	mvns	r3, r3
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4013      	ands	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	43db      	mvns	r3, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4013      	ands	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f ae63 	bne.w	8005f88 <HAL_GPIO_Init+0x14>
  }
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	3724      	adds	r7, #36	; 0x24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	58000400 	.word	0x58000400

080062d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
 80062e0:	4613      	mov	r3, r2
 80062e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062e4:	787b      	ldrb	r3, [r7, #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80062f0:	e003      	b.n	80062fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	041a      	lsls	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	619a      	str	r2, [r3, #24]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006310:	4a08      	ldr	r2, [pc, #32]	; (8006334 <HAL_HSEM_FastTake+0x2c>)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3320      	adds	r3, #32
 8006316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631a:	4a07      	ldr	r2, [pc, #28]	; (8006338 <HAL_HSEM_FastTake+0x30>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d101      	bne.n	8006324 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	58026400 	.word	0x58026400
 8006338:	80000300 	.word	0x80000300

0800633c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006346:	4906      	ldr	r1, [pc, #24]	; (8006360 <HAL_HSEM_Release+0x24>)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	58026400 	.word	0x58026400

08006364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	b08f      	sub	sp, #60	; 0x3c
 8006368:	af0a      	add	r7, sp, #40	; 0x28
 800636a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e116      	b.n	80065a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fb fcfd 	bl	8001d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2203      	movs	r2, #3
 800639a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f006 fe9d 	bl	800d0f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	687e      	ldr	r6, [r7, #4]
 80063c2:	466d      	mov	r5, sp
 80063c4:	f106 0410 	add.w	r4, r6, #16
 80063c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80063d8:	1d33      	adds	r3, r6, #4
 80063da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063dc:	6838      	ldr	r0, [r7, #0]
 80063de:	f006 fe1b 	bl	800d018 <USB_CoreInit>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0d7      	b.n	80065a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f006 fe8b 	bl	800d116 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
 8006404:	e04a      	b.n	800649c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	333d      	adds	r3, #61	; 0x3d
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800641a:	7bfa      	ldrb	r2, [r7, #15]
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	333c      	adds	r3, #60	; 0x3c
 800642a:	7bfa      	ldrb	r2, [r7, #15]
 800642c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800642e:	7bfa      	ldrb	r2, [r7, #15]
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	b298      	uxth	r0, r3
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	3356      	adds	r3, #86	; 0x56
 8006442:	4602      	mov	r2, r0
 8006444:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006446:	7bfa      	ldrb	r2, [r7, #15]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3340      	adds	r3, #64	; 0x40
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800645a:	7bfa      	ldrb	r2, [r7, #15]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	3344      	adds	r3, #68	; 0x44
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3348      	adds	r3, #72	; 0x48
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006482:	7bfa      	ldrb	r2, [r7, #15]
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	334c      	adds	r3, #76	; 0x4c
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	3301      	adds	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	7bfa      	ldrb	r2, [r7, #15]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d3af      	bcc.n	8006406 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
 80064aa:	e044      	b.n	8006536 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80064ac:	7bfa      	ldrb	r2, [r7, #15]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064c2:	7bfa      	ldrb	r2, [r7, #15]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80064d4:	7bfa      	ldrb	r2, [r7, #15]
 80064d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064d8:	7bfa      	ldrb	r2, [r7, #15]
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	4613      	mov	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064ee:	7bfa      	ldrb	r2, [r7, #15]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006504:	7bfa      	ldrb	r2, [r7, #15]
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800651a:	7bfa      	ldrb	r2, [r7, #15]
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	3301      	adds	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
 8006536:	7bfa      	ldrb	r2, [r7, #15]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d3b5      	bcc.n	80064ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	687e      	ldr	r6, [r7, #4]
 8006548:	466d      	mov	r5, sp
 800654a:	f106 0410 	add.w	r4, r6, #16
 800654e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800655a:	e885 0003 	stmia.w	r5, {r0, r1}
 800655e:	1d33      	adds	r3, r6, #4
 8006560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006562:	6838      	ldr	r0, [r7, #0]
 8006564:	f006 fe24 	bl	800d1b0 <USB_DevInit>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2202      	movs	r2, #2
 8006572:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e014      	b.n	80065a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f80a 	bl	80065ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f006 ffe2 	bl	800d566 <USB_DevDisconnect>

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	10000003 	.word	0x10000003

080065f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80065fc:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	2b06      	cmp	r3, #6
 8006606:	d00a      	beq.n	800661e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006608:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d001      	beq.n	800661a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e040      	b.n	800669c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e03e      	b.n	800669c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006626:	491f      	ldr	r1, [pc, #124]	; (80066a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4313      	orrs	r3, r2
 800662c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800662e:	f7fb fe25 	bl	800227c <HAL_GetTick>
 8006632:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006634:	e009      	b.n	800664a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006636:	f7fb fe21 	bl	800227c <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006644:	d901      	bls.n	800664a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e028      	b.n	800669c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800664a:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006656:	d1ee      	bne.n	8006636 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b1e      	cmp	r3, #30
 800665c:	d008      	beq.n	8006670 <HAL_PWREx_ConfigSupply+0x7c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b2e      	cmp	r3, #46	; 0x2e
 8006662:	d005      	beq.n	8006670 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b1d      	cmp	r3, #29
 8006668:	d002      	beq.n	8006670 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b2d      	cmp	r3, #45	; 0x2d
 800666e:	d114      	bne.n	800669a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006670:	f7fb fe04 	bl	800227c <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006676:	e009      	b.n	800668c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006678:	f7fb fe00 	bl	800227c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006686:	d901      	bls.n	800668c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e007      	b.n	800669c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006698:	d1ee      	bne.n	8006678 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	58024800 	.word	0x58024800

080066a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4a04      	ldr	r2, [pc, #16]	; (80066c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80066b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b6:	60d3      	str	r3, [r2, #12]
}
 80066b8:	bf00      	nop
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	58024800 	.word	0x58024800

080066c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f000 bc48 	b.w	8006f6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8088 	beq.w	80067fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ea:	4b99      	ldr	r3, [pc, #612]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066f4:	4b96      	ldr	r3, [pc, #600]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d007      	beq.n	8006710 <HAL_RCC_OscConfig+0x48>
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b18      	cmp	r3, #24
 8006704:	d111      	bne.n	800672a <HAL_RCC_OscConfig+0x62>
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d10c      	bne.n	800672a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006710:	4b8f      	ldr	r3, [pc, #572]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d06d      	beq.n	80067f8 <HAL_RCC_OscConfig+0x130>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d169      	bne.n	80067f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f000 bc21 	b.w	8006f6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d106      	bne.n	8006742 <HAL_RCC_OscConfig+0x7a>
 8006734:	4b86      	ldr	r3, [pc, #536]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a85      	ldr	r2, [pc, #532]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800673a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e02e      	b.n	80067a0 <HAL_RCC_OscConfig+0xd8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <HAL_RCC_OscConfig+0x9c>
 800674a:	4b81      	ldr	r3, [pc, #516]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a80      	ldr	r2, [pc, #512]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4b7e      	ldr	r3, [pc, #504]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7d      	ldr	r2, [pc, #500]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800675c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e01d      	b.n	80067a0 <HAL_RCC_OscConfig+0xd8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800676c:	d10c      	bne.n	8006788 <HAL_RCC_OscConfig+0xc0>
 800676e:	4b78      	ldr	r3, [pc, #480]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a77      	ldr	r2, [pc, #476]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b75      	ldr	r3, [pc, #468]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a74      	ldr	r2, [pc, #464]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e00b      	b.n	80067a0 <HAL_RCC_OscConfig+0xd8>
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a70      	ldr	r2, [pc, #448]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800678e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b6e      	ldr	r3, [pc, #440]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6d      	ldr	r2, [pc, #436]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800679a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800679e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d013      	beq.n	80067d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fb fd68 	bl	800227c <HAL_GetTick>
 80067ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fb fd64 	bl	800227c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e3d4      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067c2:	4b63      	ldr	r3, [pc, #396]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0xe8>
 80067ce:	e014      	b.n	80067fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fb fd54 	bl	800227c <HAL_GetTick>
 80067d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d8:	f7fb fd50 	bl	800227c <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b64      	cmp	r3, #100	; 0x64
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e3c0      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067ea:	4b59      	ldr	r3, [pc, #356]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0x110>
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80ca 	beq.w	800699c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006808:	4b51      	ldr	r3, [pc, #324]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006812:	4b4f      	ldr	r3, [pc, #316]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <HAL_RCC_OscConfig+0x166>
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b18      	cmp	r3, #24
 8006822:	d156      	bne.n	80068d2 <HAL_RCC_OscConfig+0x20a>
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d151      	bne.n	80068d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800682e:	4b48      	ldr	r3, [pc, #288]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_RCC_OscConfig+0x17e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e392      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006846:	4b42      	ldr	r3, [pc, #264]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f023 0219 	bic.w	r2, r3, #25
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	493f      	ldr	r1, [pc, #252]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006858:	f7fb fd10 	bl	800227c <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006860:	f7fb fd0c 	bl	800227c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e37c      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006872:	4b37      	ldr	r3, [pc, #220]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687e:	f7fb fd2d 	bl	80022dc <HAL_GetREVID>
 8006882:	4603      	mov	r3, r0
 8006884:	f241 0203 	movw	r2, #4099	; 0x1003
 8006888:	4293      	cmp	r3, r2
 800688a:	d817      	bhi.n	80068bc <HAL_RCC_OscConfig+0x1f4>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b40      	cmp	r3, #64	; 0x40
 8006892:	d108      	bne.n	80068a6 <HAL_RCC_OscConfig+0x1de>
 8006894:	4b2e      	ldr	r3, [pc, #184]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800689c:	4a2c      	ldr	r2, [pc, #176]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a4:	e07a      	b.n	800699c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a6:	4b2a      	ldr	r3, [pc, #168]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	031b      	lsls	r3, r3, #12
 80068b4:	4926      	ldr	r1, [pc, #152]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068ba:	e06f      	b.n	800699c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	4921      	ldr	r1, [pc, #132]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d0:	e064      	b.n	800699c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d047      	beq.n	800696a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 0219 	bic.w	r2, r3, #25
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	491a      	ldr	r1, [pc, #104]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fb fcc6 	bl	800227c <HAL_GetTick>
 80068f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f4:	f7fb fcc2 	bl	800227c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e332      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006906:	4b12      	ldr	r3, [pc, #72]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006912:	f7fb fce3 	bl	80022dc <HAL_GetREVID>
 8006916:	4603      	mov	r3, r0
 8006918:	f241 0203 	movw	r2, #4099	; 0x1003
 800691c:	4293      	cmp	r3, r2
 800691e:	d819      	bhi.n	8006954 <HAL_RCC_OscConfig+0x28c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d108      	bne.n	800693a <HAL_RCC_OscConfig+0x272>
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006930:	4a07      	ldr	r2, [pc, #28]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 8006932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006936:	6053      	str	r3, [r2, #4]
 8006938:	e030      	b.n	800699c <HAL_RCC_OscConfig+0x2d4>
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	031b      	lsls	r3, r3, #12
 8006948:	4901      	ldr	r1, [pc, #4]	; (8006950 <HAL_RCC_OscConfig+0x288>)
 800694a:	4313      	orrs	r3, r2
 800694c:	604b      	str	r3, [r1, #4]
 800694e:	e025      	b.n	800699c <HAL_RCC_OscConfig+0x2d4>
 8006950:	58024400 	.word	0x58024400
 8006954:	4b9a      	ldr	r3, [pc, #616]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	4997      	ldr	r1, [pc, #604]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
 8006968:	e018      	b.n	800699c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800696a:	4b95      	ldr	r3, [pc, #596]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a94      	ldr	r2, [pc, #592]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006976:	f7fb fc81 	bl	800227c <HAL_GetTick>
 800697a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800697e:	f7fb fc7d 	bl	800227c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e2ed      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006990:	4b8b      	ldr	r3, [pc, #556]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f0      	bne.n	800697e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80a9 	beq.w	8006afc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069aa:	4b85      	ldr	r3, [pc, #532]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069b4:	4b82      	ldr	r3, [pc, #520]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d007      	beq.n	80069d0 <HAL_RCC_OscConfig+0x308>
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2b18      	cmp	r3, #24
 80069c4:	d13a      	bne.n	8006a3c <HAL_RCC_OscConfig+0x374>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d135      	bne.n	8006a3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069d0:	4b7b      	ldr	r3, [pc, #492]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_OscConfig+0x320>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	2b80      	cmp	r3, #128	; 0x80
 80069e2:	d001      	beq.n	80069e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e2c1      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069e8:	f7fb fc78 	bl	80022dc <HAL_GetREVID>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d817      	bhi.n	8006a26 <HAL_RCC_OscConfig+0x35e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d108      	bne.n	8006a10 <HAL_RCC_OscConfig+0x348>
 80069fe:	4b70      	ldr	r3, [pc, #448]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a06:	4a6e      	ldr	r2, [pc, #440]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a0e:	e075      	b.n	8006afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a10:	4b6b      	ldr	r3, [pc, #428]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	069b      	lsls	r3, r3, #26
 8006a1e:	4968      	ldr	r1, [pc, #416]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a24:	e06a      	b.n	8006afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a26:	4b66      	ldr	r3, [pc, #408]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	061b      	lsls	r3, r3, #24
 8006a34:	4962      	ldr	r1, [pc, #392]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a3a:	e05f      	b.n	8006afc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d042      	beq.n	8006aca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a44:	4b5e      	ldr	r3, [pc, #376]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a5d      	ldr	r2, [pc, #372]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fb fc14 	bl	800227c <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a58:	f7fb fc10 	bl	800227c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e280      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a6a:	4b55      	ldr	r3, [pc, #340]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a76:	f7fb fc31 	bl	80022dc <HAL_GetREVID>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d817      	bhi.n	8006ab4 <HAL_RCC_OscConfig+0x3ec>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d108      	bne.n	8006a9e <HAL_RCC_OscConfig+0x3d6>
 8006a8c:	4b4c      	ldr	r3, [pc, #304]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a94:	4a4a      	ldr	r2, [pc, #296]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a9a:	6053      	str	r3, [r2, #4]
 8006a9c:	e02e      	b.n	8006afc <HAL_RCC_OscConfig+0x434>
 8006a9e:	4b48      	ldr	r3, [pc, #288]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	069b      	lsls	r3, r3, #26
 8006aac:	4944      	ldr	r1, [pc, #272]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
 8006ab2:	e023      	b.n	8006afc <HAL_RCC_OscConfig+0x434>
 8006ab4:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	493f      	ldr	r1, [pc, #252]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60cb      	str	r3, [r1, #12]
 8006ac8:	e018      	b.n	8006afc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006aca:	4b3d      	ldr	r3, [pc, #244]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a3c      	ldr	r2, [pc, #240]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad6:	f7fb fbd1 	bl	800227c <HAL_GetTick>
 8006ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ade:	f7fb fbcd 	bl	800227c <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e23d      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006af0:	4b33      	ldr	r3, [pc, #204]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f0      	bne.n	8006ade <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d036      	beq.n	8006b76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d019      	beq.n	8006b44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b10:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b14:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fb fbae 	bl	800227c <HAL_GetTick>
 8006b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b24:	f7fb fbaa 	bl	800227c <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e21a      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b36:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCC_OscConfig+0x45c>
 8006b42:	e018      	b.n	8006b76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b44:	4b1e      	ldr	r3, [pc, #120]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b48:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fb fb94 	bl	800227c <HAL_GetTick>
 8006b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b58:	f7fb fb90 	bl	800227c <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e200      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b6a:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f0      	bne.n	8006b58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d039      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01c      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a0c      	ldr	r2, [pc, #48]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b96:	f7fb fb71 	bl	800227c <HAL_GetTick>
 8006b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b9e:	f7fb fb6d 	bl	800227c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e1dd      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bb0:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x4d6>
 8006bbc:	e01b      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
 8006bbe:	bf00      	nop
 8006bc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bc4:	4b9b      	ldr	r3, [pc, #620]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a9a      	ldr	r2, [pc, #616]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bd0:	f7fb fb54 	bl	800227c <HAL_GetTick>
 8006bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bd8:	f7fb fb50 	bl	800227c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e1c0      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bea:	4b92      	ldr	r3, [pc, #584]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8081 	beq.w	8006d06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c04:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <HAL_RCC_OscConfig+0x770>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a8b      	ldr	r2, [pc, #556]	; (8006e38 <HAL_RCC_OscConfig+0x770>)
 8006c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c10:	f7fb fb34 	bl	800227c <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c18:	f7fb fb30 	bl	800227c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b64      	cmp	r3, #100	; 0x64
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1a0      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c2a:	4b83      	ldr	r3, [pc, #524]	; (8006e38 <HAL_RCC_OscConfig+0x770>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d106      	bne.n	8006c4c <HAL_RCC_OscConfig+0x584>
 8006c3e:	4b7d      	ldr	r3, [pc, #500]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	4a7c      	ldr	r2, [pc, #496]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	6713      	str	r3, [r2, #112]	; 0x70
 8006c4a:	e02d      	b.n	8006ca8 <HAL_RCC_OscConfig+0x5e0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10c      	bne.n	8006c6e <HAL_RCC_OscConfig+0x5a6>
 8006c54:	4b77      	ldr	r3, [pc, #476]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	4a76      	ldr	r2, [pc, #472]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c60:	4b74      	ldr	r3, [pc, #464]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4a73      	ldr	r2, [pc, #460]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c66:	f023 0304 	bic.w	r3, r3, #4
 8006c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x5e0>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x5c8>
 8006c76:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	4a6e      	ldr	r2, [pc, #440]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	6713      	str	r3, [r2, #112]	; 0x70
 8006c82:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a6b      	ldr	r2, [pc, #428]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x5e0>
 8006c90:	4b68      	ldr	r3, [pc, #416]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c94:	4a67      	ldr	r2, [pc, #412]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9c:	4b65      	ldr	r3, [pc, #404]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	4a64      	ldr	r2, [pc, #400]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006ca2:	f023 0304 	bic.w	r3, r3, #4
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fb fae4 	bl	800227c <HAL_GetTick>
 8006cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cb6:	e00a      	b.n	8006cce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb8:	f7fb fae0 	bl	800227c <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e14e      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cce:	4b59      	ldr	r3, [pc, #356]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0ee      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x5f0>
 8006cda:	e014      	b.n	8006d06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fb face 	bl	800227c <HAL_GetTick>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f7fb faca 	bl	800227c <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e138      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cfa:	4b4e      	ldr	r3, [pc, #312]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ee      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 812d 	beq.w	8006f6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d10:	4b48      	ldr	r3, [pc, #288]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d18:	2b18      	cmp	r3, #24
 8006d1a:	f000 80bd 	beq.w	8006e98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	f040 809e 	bne.w	8006e64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a41      	ldr	r2, [pc, #260]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d34:	f7fb faa2 	bl	800227c <HAL_GetTick>
 8006d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d3c:	f7fb fa9e 	bl	800227c <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e10e      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d4e:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d5a:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d5e:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <HAL_RCC_OscConfig+0x774>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d6a:	0112      	lsls	r2, r2, #4
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	4931      	ldr	r1, [pc, #196]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	628b      	str	r3, [r1, #40]	; 0x28
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	3b01      	subs	r3, #1
 8006d84:	025b      	lsls	r3, r3, #9
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	041b      	lsls	r3, r3, #16
 8006d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006da4:	4923      	ldr	r1, [pc, #140]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006db6:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dba:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <HAL_RCC_OscConfig+0x778>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006dc2:	00d2      	lsls	r2, r2, #3
 8006dc4:	491b      	ldr	r1, [pc, #108]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006dca:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	f023 020c 	bic.w	r2, r3, #12
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	4917      	ldr	r1, [pc, #92]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ddc:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	f023 0202 	bic.w	r2, r3, #2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de8:	4912      	ldr	r1, [pc, #72]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006dee:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfa:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	4a0d      	ldr	r2, [pc, #52]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a04      	ldr	r2, [pc, #16]	; (8006e34 <HAL_RCC_OscConfig+0x76c>)
 8006e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2a:	f7fb fa27 	bl	800227c <HAL_GetTick>
 8006e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e30:	e011      	b.n	8006e56 <HAL_RCC_OscConfig+0x78e>
 8006e32:	bf00      	nop
 8006e34:	58024400 	.word	0x58024400
 8006e38:	58024800 	.word	0x58024800
 8006e3c:	fffffc0c 	.word	0xfffffc0c
 8006e40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fb fa1a 	bl	800227c <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e08a      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e56:	4b47      	ldr	r3, [pc, #284]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCC_OscConfig+0x77c>
 8006e62:	e082      	b.n	8006f6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e64:	4b43      	ldr	r3, [pc, #268]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a42      	ldr	r2, [pc, #264]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fb fa04 	bl	800227c <HAL_GetTick>
 8006e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e78:	f7fb fa00 	bl	800227c <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e070      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e8a:	4b3a      	ldr	r3, [pc, #232]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x7b0>
 8006e96:	e068      	b.n	8006f6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e98:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e9e:	4b35      	ldr	r3, [pc, #212]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d031      	beq.n	8006f10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f003 0203 	and.w	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d12a      	bne.n	8006f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d122      	bne.n	8006f10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d11a      	bne.n	8006f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	0a5b      	lsrs	r3, r3, #9
 8006ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d111      	bne.n	8006f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d108      	bne.n	8006f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	0e1b      	lsrs	r3, r3, #24
 8006f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e02b      	b.n	8006f6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d01f      	beq.n	8006f6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f36:	f7fb f9a1 	bl	800227c <HAL_GetTick>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f3c:	bf00      	nop
 8006f3e:	f7fb f99d 	bl	800227c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d0f9      	beq.n	8006f3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_RCC_OscConfig+0x8b0>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f56:	00d2      	lsls	r2, r2, #3
 8006f58:	4906      	ldr	r1, [pc, #24]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	4a04      	ldr	r2, [pc, #16]	; (8006f74 <HAL_RCC_OscConfig+0x8ac>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3730      	adds	r7, #48	; 0x30
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	58024400 	.word	0x58024400
 8006f78:	ffff0007 	.word	0xffff0007

08006f7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e19c      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f90:	4b8a      	ldr	r3, [pc, #552]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d910      	bls.n	8006fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f9e:	4b87      	ldr	r3, [pc, #540]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 020f 	bic.w	r2, r3, #15
 8006fa6:	4985      	ldr	r1, [pc, #532]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fae:	4b83      	ldr	r3, [pc, #524]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d001      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e184      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d010      	beq.n	8006fee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d908      	bls.n	8006fee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fdc:	4b78      	ldr	r3, [pc, #480]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	4975      	ldr	r1, [pc, #468]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d010      	beq.n	800701c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	4b70      	ldr	r3, [pc, #448]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007006:	429a      	cmp	r2, r3
 8007008:	d908      	bls.n	800701c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800700a:	4b6d      	ldr	r3, [pc, #436]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	496a      	ldr	r1, [pc, #424]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007018:	4313      	orrs	r3, r2
 800701a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	d010      	beq.n	800704a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	4b64      	ldr	r3, [pc, #400]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007034:	429a      	cmp	r2, r3
 8007036:	d908      	bls.n	800704a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007038:	4b61      	ldr	r3, [pc, #388]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	495e      	ldr	r1, [pc, #376]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007046:	4313      	orrs	r3, r2
 8007048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d010      	beq.n	8007078 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69da      	ldr	r2, [r3, #28]
 800705a:	4b59      	ldr	r3, [pc, #356]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007062:	429a      	cmp	r2, r3
 8007064:	d908      	bls.n	8007078 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007066:	4b56      	ldr	r3, [pc, #344]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	4953      	ldr	r1, [pc, #332]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007074:	4313      	orrs	r3, r2
 8007076:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d010      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	4b4d      	ldr	r3, [pc, #308]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	429a      	cmp	r2, r3
 8007092:	d908      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007094:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f023 020f 	bic.w	r2, r3, #15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4947      	ldr	r1, [pc, #284]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d055      	beq.n	800715e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070b2:	4b43      	ldr	r3, [pc, #268]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	4940      	ldr	r1, [pc, #256]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d107      	bne.n	80070dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070cc:	4b3c      	ldr	r3, [pc, #240]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d121      	bne.n	800711c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0f6      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070e4:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d115      	bne.n	800711c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0ea      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d107      	bne.n	800710c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070fc:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0de      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800710c:	4b2c      	ldr	r3, [pc, #176]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0d6      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800711c:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f023 0207 	bic.w	r2, r3, #7
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4925      	ldr	r1, [pc, #148]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800712a:	4313      	orrs	r3, r2
 800712c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712e:	f7fb f8a5 	bl	800227c <HAL_GetTick>
 8007132:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007134:	e00a      	b.n	800714c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007136:	f7fb f8a1 	bl	800227c <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0be      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714c:	4b1c      	ldr	r3, [pc, #112]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	429a      	cmp	r2, r3
 800715c:	d1eb      	bne.n	8007136 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d010      	beq.n	800718c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	429a      	cmp	r2, r3
 8007178:	d208      	bcs.n	800718c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f023 020f 	bic.w	r2, r3, #15
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	490e      	ldr	r1, [pc, #56]	; (80071c0 <HAL_RCC_ClockConfig+0x244>)
 8007188:	4313      	orrs	r3, r2
 800718a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d214      	bcs.n	80071c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f023 020f 	bic.w	r2, r3, #15
 80071a2:	4906      	ldr	r1, [pc, #24]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071aa:	4b04      	ldr	r3, [pc, #16]	; (80071bc <HAL_RCC_ClockConfig+0x240>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 030f 	and.w	r3, r3, #15
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d005      	beq.n	80071c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e086      	b.n	80072ca <HAL_RCC_ClockConfig+0x34e>
 80071bc:	52002000 	.word	0x52002000
 80071c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d010      	beq.n	80071f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	4b3f      	ldr	r3, [pc, #252]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071dc:	429a      	cmp	r2, r3
 80071de:	d208      	bcs.n	80071f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071e0:	4b3c      	ldr	r3, [pc, #240]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	4939      	ldr	r1, [pc, #228]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d010      	beq.n	8007220 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	4b34      	ldr	r3, [pc, #208]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800720a:	429a      	cmp	r2, r3
 800720c:	d208      	bcs.n	8007220 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800720e:	4b31      	ldr	r3, [pc, #196]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	492e      	ldr	r1, [pc, #184]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 800721c:	4313      	orrs	r3, r2
 800721e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007238:	429a      	cmp	r2, r3
 800723a:	d208      	bcs.n	800724e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800723c:	4b25      	ldr	r3, [pc, #148]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	4922      	ldr	r1, [pc, #136]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 800724a:	4313      	orrs	r3, r2
 800724c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d010      	beq.n	800727c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69da      	ldr	r2, [r3, #28]
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007266:	429a      	cmp	r2, r3
 8007268:	d208      	bcs.n	800727c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	4917      	ldr	r1, [pc, #92]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 8007278:	4313      	orrs	r3, r2
 800727a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800727c:	f000 f834 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8007280:	4602      	mov	r2, r0
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	4912      	ldr	r1, [pc, #72]	; (80072d8 <HAL_RCC_ClockConfig+0x35c>)
 800728e:	5ccb      	ldrb	r3, [r1, r3]
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <HAL_RCC_ClockConfig+0x358>)
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <HAL_RCC_ClockConfig+0x35c>)
 80072a4:	5cd3      	ldrb	r3, [r2, r3]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_RCC_ClockConfig+0x360>)
 80072b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072b4:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <HAL_RCC_ClockConfig+0x364>)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80072ba:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <HAL_RCC_ClockConfig+0x368>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fa fdf2 	bl	8001ea8 <HAL_InitTick>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	58024400 	.word	0x58024400
 80072d8:	080148ac 	.word	0x080148ac
 80072dc:	24000004 	.word	0x24000004
 80072e0:	24000000 	.word	0x24000000
 80072e4:	24000008 	.word	0x24000008

080072e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b089      	sub	sp, #36	; 0x24
 80072ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072ee:	4bb3      	ldr	r3, [pc, #716]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072f6:	2b18      	cmp	r3, #24
 80072f8:	f200 8155 	bhi.w	80075a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80072fc:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <HAL_RCC_GetSysClockFreq+0x1c>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007369 	.word	0x08007369
 8007308:	080075a7 	.word	0x080075a7
 800730c:	080075a7 	.word	0x080075a7
 8007310:	080075a7 	.word	0x080075a7
 8007314:	080075a7 	.word	0x080075a7
 8007318:	080075a7 	.word	0x080075a7
 800731c:	080075a7 	.word	0x080075a7
 8007320:	080075a7 	.word	0x080075a7
 8007324:	0800738f 	.word	0x0800738f
 8007328:	080075a7 	.word	0x080075a7
 800732c:	080075a7 	.word	0x080075a7
 8007330:	080075a7 	.word	0x080075a7
 8007334:	080075a7 	.word	0x080075a7
 8007338:	080075a7 	.word	0x080075a7
 800733c:	080075a7 	.word	0x080075a7
 8007340:	080075a7 	.word	0x080075a7
 8007344:	08007395 	.word	0x08007395
 8007348:	080075a7 	.word	0x080075a7
 800734c:	080075a7 	.word	0x080075a7
 8007350:	080075a7 	.word	0x080075a7
 8007354:	080075a7 	.word	0x080075a7
 8007358:	080075a7 	.word	0x080075a7
 800735c:	080075a7 	.word	0x080075a7
 8007360:	080075a7 	.word	0x080075a7
 8007364:	0800739b 	.word	0x0800739b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007368:	4b94      	ldr	r3, [pc, #592]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007374:	4b91      	ldr	r3, [pc, #580]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	08db      	lsrs	r3, r3, #3
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	4a90      	ldr	r2, [pc, #576]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
 8007384:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007386:	e111      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007388:	4b8d      	ldr	r3, [pc, #564]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800738a:	61bb      	str	r3, [r7, #24]
      break;
 800738c:	e10e      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800738e:	4b8d      	ldr	r3, [pc, #564]	; (80075c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007390:	61bb      	str	r3, [r7, #24]
      break;
 8007392:	e10b      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007394:	4b8c      	ldr	r3, [pc, #560]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007396:	61bb      	str	r3, [r7, #24]
      break;
 8007398:	e108      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800739a:	4b88      	ldr	r3, [pc, #544]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80073a4:	4b85      	ldr	r3, [pc, #532]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073b0:	4b82      	ldr	r3, [pc, #520]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073ba:	4b80      	ldr	r3, [pc, #512]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073be:	08db      	lsrs	r3, r3, #3
 80073c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	fb02 f303 	mul.w	r3, r2, r3
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80e1 	beq.w	80075a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	f000 8083 	beq.w	80074ec <HAL_RCC_GetSysClockFreq+0x204>
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	f200 80a1 	bhi.w	8007530 <HAL_RCC_GetSysClockFreq+0x248>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_RCC_GetSysClockFreq+0x114>
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d056      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80073fa:	e099      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073fc:	4b6f      	ldr	r3, [pc, #444]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d02d      	beq.n	8007464 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007408:	4b6c      	ldr	r3, [pc, #432]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	08db      	lsrs	r3, r3, #3
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	4a6b      	ldr	r2, [pc, #428]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
 8007418:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b62      	ldr	r3, [pc, #392]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a02 	vldr	s12, [r7, #8]
 8007446:	eddf 5a61 	vldr	s11, [pc, #388]	; 80075cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007462:	e087      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80075d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b51      	ldr	r3, [pc, #324]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a02 	vldr	s12, [r7, #8]
 800748a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80075cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074a6:	e065      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80075d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b40      	ldr	r3, [pc, #256]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80075cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074ea:	e043      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80075d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b2f      	ldr	r3, [pc, #188]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007512:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80075cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800752e:	e021      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80075d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b1e      	ldr	r3, [pc, #120]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a02 	vldr	s12, [r7, #8]
 8007556:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80075cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007572:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007574:	4b11      	ldr	r3, [pc, #68]	; (80075bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	0a5b      	lsrs	r3, r3, #9
 800757a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757e:	3301      	adds	r3, #1
 8007580:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800758c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007598:	ee17 3a90 	vmov	r3, s15
 800759c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800759e:	e005      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61bb      	str	r3, [r7, #24]
      break;
 80075a4:	e002      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075a8:	61bb      	str	r3, [r7, #24]
      break;
 80075aa:	bf00      	nop
  }

  return sysclockfreq;
 80075ac:	69bb      	ldr	r3, [r7, #24]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3724      	adds	r7, #36	; 0x24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	58024400 	.word	0x58024400
 80075c0:	03d09000 	.word	0x03d09000
 80075c4:	003d0900 	.word	0x003d0900
 80075c8:	007a1200 	.word	0x007a1200
 80075cc:	46000000 	.word	0x46000000
 80075d0:	4c742400 	.word	0x4c742400
 80075d4:	4a742400 	.word	0x4a742400
 80075d8:	4af42400 	.word	0x4af42400

080075dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075e2:	f7ff fe81 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 80075e6:	4602      	mov	r2, r0
 80075e8:	4b10      	ldr	r3, [pc, #64]	; (800762c <HAL_RCC_GetHCLKFreq+0x50>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	490f      	ldr	r1, [pc, #60]	; (8007630 <HAL_RCC_GetHCLKFreq+0x54>)
 80075f4:	5ccb      	ldrb	r3, [r1, r3]
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007600:	4b0a      	ldr	r3, [pc, #40]	; (800762c <HAL_RCC_GetHCLKFreq+0x50>)
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <HAL_RCC_GetHCLKFreq+0x54>)
 800760a:	5cd3      	ldrb	r3, [r2, r3]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	fa22 f303 	lsr.w	r3, r2, r3
 8007616:	4a07      	ldr	r2, [pc, #28]	; (8007634 <HAL_RCC_GetHCLKFreq+0x58>)
 8007618:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800761a:	4a07      	ldr	r2, [pc, #28]	; (8007638 <HAL_RCC_GetHCLKFreq+0x5c>)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <HAL_RCC_GetHCLKFreq+0x58>)
 8007622:	681b      	ldr	r3, [r3, #0]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	58024400 	.word	0x58024400
 8007630:	080148ac 	.word	0x080148ac
 8007634:	24000004 	.word	0x24000004
 8007638:	24000000 	.word	0x24000000

0800763c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007640:	f7ff ffcc 	bl	80075dc <HAL_RCC_GetHCLKFreq>
 8007644:	4602      	mov	r2, r0
 8007646:	4b06      	ldr	r3, [pc, #24]	; (8007660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	091b      	lsrs	r3, r3, #4
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	4904      	ldr	r1, [pc, #16]	; (8007664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007652:	5ccb      	ldrb	r3, [r1, r3]
 8007654:	f003 031f 	and.w	r3, r3, #31
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800765c:	4618      	mov	r0, r3
 800765e:	bd80      	pop	{r7, pc}
 8007660:	58024400 	.word	0x58024400
 8007664:	080148ac 	.word	0x080148ac

08007668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800766c:	f7ff ffb6 	bl	80075dc <HAL_RCC_GetHCLKFreq>
 8007670:	4602      	mov	r2, r0
 8007672:	4b06      	ldr	r3, [pc, #24]	; (800768c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	4904      	ldr	r1, [pc, #16]	; (8007690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800767e:	5ccb      	ldrb	r3, [r1, r3]
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007688:	4618      	mov	r0, r3
 800768a:	bd80      	pop	{r7, pc}
 800768c:	58024400 	.word	0x58024400
 8007690:	080148ac 	.word	0x080148ac

08007694 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	223f      	movs	r2, #63	; 0x3f
 80076a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076a4:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0207 	and.w	r2, r3, #7
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80076b0:	4b17      	ldr	r3, [pc, #92]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80076bc:	4b14      	ldr	r3, [pc, #80]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80076c8:	4b11      	ldr	r3, [pc, #68]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80076d4:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80076ec:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_RCC_GetClockConfig+0x7c>)
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <HAL_RCC_GetClockConfig+0x80>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 020f 	and.w	r2, r3, #15
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	58024400 	.word	0x58024400
 8007714:	52002000 	.word	0x52002000

08007718 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800771c:	b0ca      	sub	sp, #296	; 0x128
 800771e:	af00      	add	r7, sp, #0
 8007720:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800772a:	2300      	movs	r3, #0
 800772c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800773c:	2500      	movs	r5, #0
 800773e:	ea54 0305 	orrs.w	r3, r4, r5
 8007742:	d049      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800774a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800774e:	d02f      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007754:	d828      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800775a:	d01a      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800775c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007760:	d822      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d007      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800776c:	e01c      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776e:	4bb8      	ldr	r3, [pc, #736]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	4ab7      	ldr	r2, [pc, #732]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800777a:	e01a      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800777c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007780:	3308      	adds	r3, #8
 8007782:	2102      	movs	r1, #2
 8007784:	4618      	mov	r0, r3
 8007786:	f002 fb61 	bl	8009e4c <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007790:	e00f      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007796:	3328      	adds	r3, #40	; 0x28
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f002 fc08 	bl	8009fb0 <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077a6:	e004      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077ae:	e000      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80077b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077ba:	4ba5      	ldr	r3, [pc, #660]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c8:	4aa1      	ldr	r2, [pc, #644]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ca:	430b      	orrs	r3, r1
 80077cc:	6513      	str	r3, [r2, #80]	; 0x50
 80077ce:	e003      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80077e4:	f04f 0900 	mov.w	r9, #0
 80077e8:	ea58 0309 	orrs.w	r3, r8, r9
 80077ec:	d047      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d82a      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80077f8:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fe:	bf00      	nop
 8007800:	08007815 	.word	0x08007815
 8007804:	08007823 	.word	0x08007823
 8007808:	08007839 	.word	0x08007839
 800780c:	08007857 	.word	0x08007857
 8007810:	08007857 	.word	0x08007857
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007814:	4b8e      	ldr	r3, [pc, #568]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a8d      	ldr	r2, [pc, #564]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800781a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007820:	e01a      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007826:	3308      	adds	r3, #8
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f002 fb0e 	bl	8009e4c <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007836:	e00f      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783c:	3328      	adds	r3, #40	; 0x28
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f002 fbb5 	bl	8009fb0 <RCCEx_PLL3_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800784c:	e004      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007854:	e000      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007860:	4b7b      	ldr	r3, [pc, #492]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	f023 0107 	bic.w	r1, r3, #7
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786e:	4a78      	ldr	r2, [pc, #480]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007870:	430b      	orrs	r3, r1
 8007872:	6513      	str	r3, [r2, #80]	; 0x50
 8007874:	e003      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800787a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800788a:	f04f 0b00 	mov.w	fp, #0
 800788e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007892:	d04c      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789e:	d030      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80078a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a4:	d829      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078a6:	2bc0      	cmp	r3, #192	; 0xc0
 80078a8:	d02d      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80078aa:	2bc0      	cmp	r3, #192	; 0xc0
 80078ac:	d825      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078ae:	2b80      	cmp	r3, #128	; 0x80
 80078b0:	d018      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d821      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d007      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80078be:	e01c      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c0:	4b63      	ldr	r3, [pc, #396]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a62      	ldr	r2, [pc, #392]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078cc:	e01c      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d2:	3308      	adds	r3, #8
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f002 fab8 	bl	8009e4c <RCCEx_PLL2_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078e2:	e011      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e8:	3328      	adds	r3, #40	; 0x28
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f002 fb5f 	bl	8009fb0 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078f8:	e006      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007902:	bf00      	nop
 8007904:	e000      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007910:	4b4f      	ldr	r3, [pc, #316]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	4a4c      	ldr	r2, [pc, #304]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007920:	430b      	orrs	r3, r1
 8007922:	6513      	str	r3, [r2, #80]	; 0x50
 8007924:	e003      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800792a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800793a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800793e:	2300      	movs	r3, #0
 8007940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007944:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007948:	460b      	mov	r3, r1
 800794a:	4313      	orrs	r3, r2
 800794c:	d053      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007952:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800795a:	d035      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800795c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007960:	d82e      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007966:	d031      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007968:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800796c:	d828      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800796e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007972:	d01a      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007978:	d822      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800797e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007982:	d007      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007984:	e01c      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007986:	4b32      	ldr	r3, [pc, #200]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	4a31      	ldr	r2, [pc, #196]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800798c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007992:	e01c      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007998:	3308      	adds	r3, #8
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f002 fa55 	bl	8009e4c <RCCEx_PLL2_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079a8:	e011      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ae:	3328      	adds	r3, #40	; 0x28
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f002 fafc 	bl	8009fb0 <RCCEx_PLL3_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079be:	e006      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079c6:	e002      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80079cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10b      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079d6:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079e6:	4a1a      	ldr	r2, [pc, #104]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079e8:	430b      	orrs	r3, r1
 80079ea:	6593      	str	r3, [r2, #88]	; 0x58
 80079ec:	e003      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007a02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a06:	2300      	movs	r3, #0
 8007a08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007a10:	460b      	mov	r3, r1
 8007a12:	4313      	orrs	r3, r2
 8007a14:	d056      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a22:	d038      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a28:	d831      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a2e:	d034      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007a30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a34:	d82b      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3a:	d01d      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a40:	d825      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a4c:	e01f      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a4e:	bf00      	nop
 8007a50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4ba2      	ldr	r3, [pc, #648]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4aa1      	ldr	r2, [pc, #644]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a60:	e01c      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	3308      	adds	r3, #8
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f002 f9ee 	bl	8009e4c <RCCEx_PLL2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a76:	e011      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	3328      	adds	r3, #40	; 0x28
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 fa95 	bl	8009fb0 <RCCEx_PLL3_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e006      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a94:	e002      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007aa4:	4b8e      	ldr	r3, [pc, #568]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ab4:	4a8a      	ldr	r2, [pc, #552]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ada:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d03a      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aea:	2b30      	cmp	r3, #48	; 0x30
 8007aec:	d01f      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007aee:	2b30      	cmp	r3, #48	; 0x30
 8007af0:	d819      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d00c      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d815      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d019      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d111      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b02:	4b77      	ldr	r3, [pc, #476]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a76      	ldr	r2, [pc, #472]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b0e:	e011      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b14:	3308      	adds	r3, #8
 8007b16:	2102      	movs	r1, #2
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f002 f997 	bl	8009e4c <RCCEx_PLL2_Config>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b24:	e006      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b2c:	e002      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b2e:	bf00      	nop
 8007b30:	e000      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b3c:	4b68      	ldr	r3, [pc, #416]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b4a:	4a65      	ldr	r2, [pc, #404]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b50:	e003      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007b66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4313      	orrs	r3, r2
 8007b78:	d051      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b84:	d035      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b8a:	d82e      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b90:	d031      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b96:	d828      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d01a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba2:	d822      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bac:	d007      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007bae:	e01c      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb0:	4b4b      	ldr	r3, [pc, #300]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	4a4a      	ldr	r2, [pc, #296]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bbc:	e01c      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f002 f940 	bl	8009e4c <RCCEx_PLL2_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bd2:	e011      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd8:	3328      	adds	r3, #40	; 0x28
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f002 f9e7 	bl	8009fb0 <RCCEx_PLL3_Config>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007be8:	e006      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bf0:	e002      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bf2:	bf00      	nop
 8007bf4:	e000      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c00:	4b37      	ldr	r3, [pc, #220]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0e:	4a34      	ldr	r2, [pc, #208]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6513      	str	r3, [r2, #80]	; 0x50
 8007c14:	e003      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	d056      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c48:	d033      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c4e:	d82c      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c54:	d02f      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c5a:	d826      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c60:	d02b      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c66:	d820      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c6c:	d012      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c72:	d81a      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d022      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7c:	d115      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c82:	3308      	adds	r3, #8
 8007c84:	2101      	movs	r1, #1
 8007c86:	4618      	mov	r0, r3
 8007c88:	f002 f8e0 	bl	8009e4c <RCCEx_PLL2_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c92:	e015      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c98:	3328      	adds	r3, #40	; 0x28
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f002 f987 	bl	8009fb0 <RCCEx_PLL3_Config>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ca8:	e00a      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cb0:	e006      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cb2:	bf00      	nop
 8007cb4:	e004      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cb6:	bf00      	nop
 8007cb8:	e002      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cba:	bf00      	nop
 8007cbc:	e000      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10d      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ccc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd6:	4a02      	ldr	r2, [pc, #8]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6513      	str	r3, [r2, #80]	; 0x50
 8007cdc:	e006      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007cde:	bf00      	nop
 8007ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	d055      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d18:	d033      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1e:	d82c      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d24:	d02f      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2a:	d826      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d30:	d02b      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007d32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d36:	d820      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3c:	d012      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d42:	d81a      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d022      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4c:	d115      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d52:	3308      	adds	r3, #8
 8007d54:	2101      	movs	r1, #1
 8007d56:	4618      	mov	r0, r3
 8007d58:	f002 f878 	bl	8009e4c <RCCEx_PLL2_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d62:	e015      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d68:	3328      	adds	r3, #40	; 0x28
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f002 f91f 	bl	8009fb0 <RCCEx_PLL3_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d78:	e00a      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d80:	e006      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d82:	bf00      	nop
 8007d84:	e004      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d86:	bf00      	nop
 8007d88:	e002      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e000      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d98:	4ba3      	ldr	r3, [pc, #652]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da8:	4a9f      	ldr	r2, [pc, #636]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007daa:	430b      	orrs	r3, r1
 8007dac:	6593      	str	r3, [r2, #88]	; 0x58
 8007dae:	e003      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	d037      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de2:	d00e      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de8:	d816      	bhi.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df2:	d111      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4b8c      	ldr	r3, [pc, #560]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4a8b      	ldr	r2, [pc, #556]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e00:	e00f      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	3308      	adds	r3, #8
 8007e08:	2101      	movs	r1, #1
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 f81e 	bl	8009e4c <RCCEx_PLL2_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e16:	e004      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e1e:	e000      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e2a:	4b7f      	ldr	r3, [pc, #508]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e38:	4a7b      	ldr	r2, [pc, #492]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	6513      	str	r3, [r2, #80]	; 0x50
 8007e3e:	e003      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4313      	orrs	r3, r2
 8007e66:	d039      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d81c      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007eb5 	.word	0x08007eb5
 8007e7c:	08007e89 	.word	0x08007e89
 8007e80:	08007e97 	.word	0x08007e97
 8007e84:	08007eb5 	.word	0x08007eb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e88:	4b67      	ldr	r3, [pc, #412]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	4a66      	ldr	r2, [pc, #408]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e94:	e00f      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 ffd4 	bl	8009e4c <RCCEx_PLL2_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007eaa:	e004      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ebe:	4b5a      	ldr	r3, [pc, #360]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec2:	f023 0103 	bic.w	r1, r3, #3
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ecc:	4a56      	ldr	r2, [pc, #344]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ed2:	e003      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ed8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eec:	2300      	movs	r3, #0
 8007eee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ef2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f000 809f 	beq.w	800803c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007efe:	4b4b      	ldr	r3, [pc, #300]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4a      	ldr	r2, [pc, #296]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f0a:	f7fa f9b7 	bl	800227c <HAL_GetTick>
 8007f0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f12:	e00b      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f14:	f7fa f9b2 	bl	800227c <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b64      	cmp	r3, #100	; 0x64
 8007f22:	d903      	bls.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f2a:	e005      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f2c:	4b3f      	ldr	r3, [pc, #252]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0ed      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d179      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f40:	4b39      	ldr	r3, [pc, #228]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f4c:	4053      	eors	r3, r2
 8007f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d015      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f56:	4b34      	ldr	r3, [pc, #208]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	4a30      	ldr	r2, [pc, #192]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f6e:	4b2e      	ldr	r3, [pc, #184]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f72:	4a2d      	ldr	r2, [pc, #180]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f7a:	4a2b      	ldr	r2, [pc, #172]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f8e:	d118      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f90:	f7fa f974 	bl	800227c <HAL_GetTick>
 8007f94:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f98:	e00d      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9a:	f7fa f96f 	bl	800227c <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007fa4:	1ad2      	subs	r2, r2, r3
 8007fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007fb4:	e005      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fb6:	4b1c      	ldr	r3, [pc, #112]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0eb      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d129      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fda:	d10e      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007fdc:	4b12      	ldr	r3, [pc, #72]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fec:	091a      	lsrs	r2, r3, #4
 8007fee:	4b10      	ldr	r3, [pc, #64]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6113      	str	r3, [r2, #16]
 8007ff8:	e005      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	4a0a      	ldr	r2, [pc, #40]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008000:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008004:	6113      	str	r3, [r2, #16]
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008008:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008016:	4a04      	ldr	r2, [pc, #16]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008018:	430b      	orrs	r3, r1
 800801a:	6713      	str	r3, [r2, #112]	; 0x70
 800801c:	e00e      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008026:	e009      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008028:	58024400 	.word	0x58024400
 800802c:	58024800 	.word	0x58024800
 8008030:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f002 0301 	and.w	r3, r2, #1
 8008048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800804c:	2300      	movs	r3, #0
 800804e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008052:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008056:	460b      	mov	r3, r1
 8008058:	4313      	orrs	r3, r2
 800805a:	f000 8089 	beq.w	8008170 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008064:	2b28      	cmp	r3, #40	; 0x28
 8008066:	d86b      	bhi.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	08008149 	.word	0x08008149
 8008074:	08008141 	.word	0x08008141
 8008078:	08008141 	.word	0x08008141
 800807c:	08008141 	.word	0x08008141
 8008080:	08008141 	.word	0x08008141
 8008084:	08008141 	.word	0x08008141
 8008088:	08008141 	.word	0x08008141
 800808c:	08008141 	.word	0x08008141
 8008090:	08008115 	.word	0x08008115
 8008094:	08008141 	.word	0x08008141
 8008098:	08008141 	.word	0x08008141
 800809c:	08008141 	.word	0x08008141
 80080a0:	08008141 	.word	0x08008141
 80080a4:	08008141 	.word	0x08008141
 80080a8:	08008141 	.word	0x08008141
 80080ac:	08008141 	.word	0x08008141
 80080b0:	0800812b 	.word	0x0800812b
 80080b4:	08008141 	.word	0x08008141
 80080b8:	08008141 	.word	0x08008141
 80080bc:	08008141 	.word	0x08008141
 80080c0:	08008141 	.word	0x08008141
 80080c4:	08008141 	.word	0x08008141
 80080c8:	08008141 	.word	0x08008141
 80080cc:	08008141 	.word	0x08008141
 80080d0:	08008149 	.word	0x08008149
 80080d4:	08008141 	.word	0x08008141
 80080d8:	08008141 	.word	0x08008141
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008141 	.word	0x08008141
 80080e4:	08008141 	.word	0x08008141
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008141 	.word	0x08008141
 80080f0:	08008149 	.word	0x08008149
 80080f4:	08008141 	.word	0x08008141
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008141 	.word	0x08008141
 8008100:	08008141 	.word	0x08008141
 8008104:	08008141 	.word	0x08008141
 8008108:	08008141 	.word	0x08008141
 800810c:	08008141 	.word	0x08008141
 8008110:	08008149 	.word	0x08008149
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008118:	3308      	adds	r3, #8
 800811a:	2101      	movs	r1, #1
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fe95 	bl	8009e4c <RCCEx_PLL2_Config>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008128:	e00f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812e:	3328      	adds	r3, #40	; 0x28
 8008130:	2101      	movs	r1, #1
 8008132:	4618      	mov	r0, r3
 8008134:	f001 ff3c 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008146:	e000      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008152:	4bbf      	ldr	r3, [pc, #764]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008156:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008160:	4abb      	ldr	r2, [pc, #748]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008162:	430b      	orrs	r3, r1
 8008164:	6553      	str	r3, [r2, #84]	; 0x54
 8008166:	e003      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f002 0302 	and.w	r3, r2, #2
 800817c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008186:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	d041      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008196:	2b05      	cmp	r3, #5
 8008198:	d824      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081ed 	.word	0x080081ed
 80081a4:	080081b9 	.word	0x080081b9
 80081a8:	080081cf 	.word	0x080081cf
 80081ac:	080081ed 	.word	0x080081ed
 80081b0:	080081ed 	.word	0x080081ed
 80081b4:	080081ed 	.word	0x080081ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081bc:	3308      	adds	r3, #8
 80081be:	2101      	movs	r1, #1
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 fe43 	bl	8009e4c <RCCEx_PLL2_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081cc:	e00f      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d2:	3328      	adds	r3, #40	; 0x28
 80081d4:	2101      	movs	r1, #1
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 feea 	bl	8009fb0 <RCCEx_PLL3_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081e2:	e004      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081ea:	e000      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80081ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081f6:	4b96      	ldr	r3, [pc, #600]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	f023 0107 	bic.w	r1, r3, #7
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008204:	4a92      	ldr	r2, [pc, #584]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008206:	430b      	orrs	r3, r1
 8008208:	6553      	str	r3, [r2, #84]	; 0x54
 800820a:	e003      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f002 0304 	and.w	r3, r2, #4
 8008220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008224:	2300      	movs	r3, #0
 8008226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800822a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800822e:	460b      	mov	r3, r1
 8008230:	4313      	orrs	r3, r2
 8008232:	d044      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800823c:	2b05      	cmp	r3, #5
 800823e:	d825      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008295 	.word	0x08008295
 800824c:	08008261 	.word	0x08008261
 8008250:	08008277 	.word	0x08008277
 8008254:	08008295 	.word	0x08008295
 8008258:	08008295 	.word	0x08008295
 800825c:	08008295 	.word	0x08008295
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008264:	3308      	adds	r3, #8
 8008266:	2101      	movs	r1, #1
 8008268:	4618      	mov	r0, r3
 800826a:	f001 fdef 	bl	8009e4c <RCCEx_PLL2_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008274:	e00f      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800827a:	3328      	adds	r3, #40	; 0x28
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fe96 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800828a:	e004      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008292:	e000      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10b      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800829e:	4b6c      	ldr	r3, [pc, #432]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	f023 0107 	bic.w	r1, r3, #7
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082ae:	4a68      	ldr	r2, [pc, #416]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6593      	str	r3, [r2, #88]	; 0x58
 80082b4:	e003      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f002 0320 	and.w	r3, r2, #32
 80082ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082ce:	2300      	movs	r3, #0
 80082d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082d8:	460b      	mov	r3, r1
 80082da:	4313      	orrs	r3, r2
 80082dc:	d055      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80082de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082ea:	d033      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80082ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082f0:	d82c      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f6:	d02f      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fc:	d826      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008302:	d02b      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008308:	d820      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800830a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800830e:	d012      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008314:	d81a      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d022      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800831a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831e:	d115      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008324:	3308      	adds	r3, #8
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fd8f 	bl	8009e4c <RCCEx_PLL2_Config>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008334:	e015      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833a:	3328      	adds	r3, #40	; 0x28
 800833c:	2102      	movs	r1, #2
 800833e:	4618      	mov	r0, r3
 8008340:	f001 fe36 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800834a:	e00a      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008352:	e006      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008354:	bf00      	nop
 8008356:	e004      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008358:	bf00      	nop
 800835a:	e002      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800836a:	4b39      	ldr	r3, [pc, #228]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800836c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837a:	4a35      	ldr	r2, [pc, #212]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800837c:	430b      	orrs	r3, r1
 800837e:	6553      	str	r3, [r2, #84]	; 0x54
 8008380:	e003      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800839a:	2300      	movs	r3, #0
 800839c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4313      	orrs	r3, r2
 80083a8:	d058      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083b6:	d033      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80083b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083bc:	d82c      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c2:	d02f      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80083c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c8:	d826      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ce:	d02b      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80083d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083d4:	d820      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083da:	d012      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80083dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e0:	d81a      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d022      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80083e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ea:	d115      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f0:	3308      	adds	r3, #8
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fd29 	bl	8009e4c <RCCEx_PLL2_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008400:	e015      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008406:	3328      	adds	r3, #40	; 0x28
 8008408:	2102      	movs	r1, #2
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fdd0 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008416:	e00a      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800841e:	e006      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008420:	bf00      	nop
 8008422:	e004      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008424:	bf00      	nop
 8008426:	e002      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800842c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800842e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10e      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008436:	4b06      	ldr	r3, [pc, #24]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008446:	4a02      	ldr	r2, [pc, #8]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008448:	430b      	orrs	r3, r1
 800844a:	6593      	str	r3, [r2, #88]	; 0x58
 800844c:	e006      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800844e:	bf00      	nop
 8008450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008458:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800845c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800846c:	2300      	movs	r3, #0
 800846e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008472:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008476:	460b      	mov	r3, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	d055      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008484:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008488:	d033      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800848a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800848e:	d82c      	bhi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008494:	d02f      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849a:	d826      	bhi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800849c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084a0:	d02b      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80084a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084a6:	d820      	bhi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084ac:	d012      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80084ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084b2:	d81a      	bhi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d022      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80084b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084bc:	d115      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c2:	3308      	adds	r3, #8
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 fcc0 	bl	8009e4c <RCCEx_PLL2_Config>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084d2:	e015      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d8:	3328      	adds	r3, #40	; 0x28
 80084da:	2102      	movs	r1, #2
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fd67 	bl	8009fb0 <RCCEx_PLL3_Config>
 80084e2:	4603      	mov	r3, r0
 80084e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084e8:	e00a      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084f0:	e006      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084f2:	bf00      	nop
 80084f4:	e004      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084f6:	bf00      	nop
 80084f8:	e002      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084fa:	bf00      	nop
 80084fc:	e000      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008508:	4ba1      	ldr	r3, [pc, #644]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800850a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008514:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008518:	4a9d      	ldr	r2, [pc, #628]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800851a:	430b      	orrs	r3, r1
 800851c:	6593      	str	r3, [r2, #88]	; 0x58
 800851e:	e003      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f002 0308 	and.w	r3, r2, #8
 8008534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008538:	2300      	movs	r3, #0
 800853a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800853e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008542:	460b      	mov	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	d01e      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008554:	d10c      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855a:	3328      	adds	r3, #40	; 0x28
 800855c:	2102      	movs	r1, #2
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fd26 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008570:	4b87      	ldr	r3, [pc, #540]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008574:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008580:	4a83      	ldr	r2, [pc, #524]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008582:	430b      	orrs	r3, r1
 8008584:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f002 0310 	and.w	r3, r2, #16
 8008592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008596:	2300      	movs	r3, #0
 8008598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800859c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80085a0:	460b      	mov	r3, r1
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d01e      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b2:	d10c      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b8:	3328      	adds	r3, #40	; 0x28
 80085ba:	2102      	movs	r1, #2
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fcf7 	bl	8009fb0 <RCCEx_PLL3_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085ce:	4b70      	ldr	r3, [pc, #448]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085de:	4a6c      	ldr	r2, [pc, #432]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085e0:	430b      	orrs	r3, r1
 80085e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80085f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80085fe:	460b      	mov	r3, r1
 8008600:	4313      	orrs	r3, r2
 8008602:	d03e      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800860c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008610:	d022      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008616:	d81b      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800861c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008620:	d00b      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008622:	e015      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008628:	3308      	adds	r3, #8
 800862a:	2100      	movs	r1, #0
 800862c:	4618      	mov	r0, r3
 800862e:	f001 fc0d 	bl	8009e4c <RCCEx_PLL2_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008638:	e00f      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800863e:	3328      	adds	r3, #40	; 0x28
 8008640:	2102      	movs	r1, #2
 8008642:	4618      	mov	r0, r3
 8008644:	f001 fcb4 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800864e:	e004      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008656:	e000      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800865a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008662:	4b4b      	ldr	r3, [pc, #300]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008666:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008672:	4a47      	ldr	r2, [pc, #284]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008674:	430b      	orrs	r3, r1
 8008676:	6593      	str	r3, [r2, #88]	; 0x58
 8008678:	e003      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800867e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800868e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008690:	2300      	movs	r3, #0
 8008692:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008694:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008698:	460b      	mov	r3, r1
 800869a:	4313      	orrs	r3, r2
 800869c:	d03b      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086aa:	d01f      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80086ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086b0:	d818      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b6:	d003      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80086b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086bc:	d007      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80086be:	e011      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c0:	4b33      	ldr	r3, [pc, #204]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	4a32      	ldr	r2, [pc, #200]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80086cc:	e00f      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d2:	3328      	adds	r3, #40	; 0x28
 80086d4:	2101      	movs	r1, #1
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fc6a 	bl	8009fb0 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80086e2:	e004      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086ea:	e000      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80086ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008706:	4a22      	ldr	r2, [pc, #136]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008708:	430b      	orrs	r3, r1
 800870a:	6553      	str	r3, [r2, #84]	; 0x54
 800870c:	e003      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008722:	673b      	str	r3, [r7, #112]	; 0x70
 8008724:	2300      	movs	r3, #0
 8008726:	677b      	str	r3, [r7, #116]	; 0x74
 8008728:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800872c:	460b      	mov	r3, r1
 800872e:	4313      	orrs	r3, r2
 8008730:	d034      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800873c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008740:	d007      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008742:	e011      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008744:	4b12      	ldr	r3, [pc, #72]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a11      	ldr	r2, [pc, #68]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800874a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008750:	e00e      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008756:	3308      	adds	r3, #8
 8008758:	2102      	movs	r1, #2
 800875a:	4618      	mov	r0, r3
 800875c:	f001 fb76 	bl	8009e4c <RCCEx_PLL2_Config>
 8008760:	4603      	mov	r3, r0
 8008762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008766:	e003      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800876e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10d      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800877a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008786:	4a02      	ldr	r2, [pc, #8]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008788:	430b      	orrs	r3, r1
 800878a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800878c:	e006      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800878e:	bf00      	nop
 8008790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800879c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80087a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80087aa:	2300      	movs	r3, #0
 80087ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80087b2:	460b      	mov	r3, r1
 80087b4:	4313      	orrs	r3, r2
 80087b6:	d00c      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087bc:	3328      	adds	r3, #40	; 0x28
 80087be:	2102      	movs	r1, #2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 fbf5 	bl	8009fb0 <RCCEx_PLL3_Config>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80087de:	663b      	str	r3, [r7, #96]	; 0x60
 80087e0:	2300      	movs	r3, #0
 80087e2:	667b      	str	r3, [r7, #100]	; 0x64
 80087e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80087e8:	460b      	mov	r3, r1
 80087ea:	4313      	orrs	r3, r2
 80087ec:	d038      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087fa:	d018      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80087fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008800:	d811      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008806:	d014      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800880c:	d80b      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d011      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008816:	d106      	bne.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008818:	4bc3      	ldr	r3, [pc, #780]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4ac2      	ldr	r2, [pc, #776]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008824:	e008      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800882c:	e004      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800882e:	bf00      	nop
 8008830:	e002      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008832:	bf00      	nop
 8008834:	e000      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10b      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008840:	4bb9      	ldr	r3, [pc, #740]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008844:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008850:	4ab5      	ldr	r2, [pc, #724]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008852:	430b      	orrs	r3, r1
 8008854:	6553      	str	r3, [r2, #84]	; 0x54
 8008856:	e003      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800885c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800886c:	65bb      	str	r3, [r7, #88]	; 0x58
 800886e:	2300      	movs	r3, #0
 8008870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008872:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d009      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800887c:	4baa      	ldr	r3, [pc, #680]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008880:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800888a:	4aa7      	ldr	r2, [pc, #668]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800888c:	430b      	orrs	r3, r1
 800888e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800889c:	653b      	str	r3, [r7, #80]	; 0x50
 800889e:	2300      	movs	r3, #0
 80088a0:	657b      	str	r3, [r7, #84]	; 0x54
 80088a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80088a6:	460b      	mov	r3, r1
 80088a8:	4313      	orrs	r3, r2
 80088aa:	d00a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80088ac:	4b9e      	ldr	r3, [pc, #632]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80088bc:	4a9a      	ldr	r2, [pc, #616]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088be:	430b      	orrs	r3, r1
 80088c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80088ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d0:	2300      	movs	r3, #0
 80088d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80088d8:	460b      	mov	r3, r1
 80088da:	4313      	orrs	r3, r2
 80088dc:	d009      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088de:	4b92      	ldr	r3, [pc, #584]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80088e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ec:	4a8e      	ldr	r2, [pc, #568]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ee:	430b      	orrs	r3, r1
 80088f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80088fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008900:	2300      	movs	r3, #0
 8008902:	647b      	str	r3, [r7, #68]	; 0x44
 8008904:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008908:	460b      	mov	r3, r1
 800890a:	4313      	orrs	r3, r2
 800890c:	d00e      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800890e:	4b86      	ldr	r3, [pc, #536]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	4a85      	ldr	r2, [pc, #532]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008918:	6113      	str	r3, [r2, #16]
 800891a:	4b83      	ldr	r3, [pc, #524]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891c:	6919      	ldr	r1, [r3, #16]
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008922:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008926:	4a80      	ldr	r2, [pc, #512]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008928:	430b      	orrs	r3, r1
 800892a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008938:	63bb      	str	r3, [r7, #56]	; 0x38
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800893e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008942:	460b      	mov	r3, r1
 8008944:	4313      	orrs	r3, r2
 8008946:	d009      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008948:	4b77      	ldr	r3, [pc, #476]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800894a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008956:	4a74      	ldr	r2, [pc, #464]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008958:	430b      	orrs	r3, r1
 800895a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008968:	633b      	str	r3, [r7, #48]	; 0x30
 800896a:	2300      	movs	r3, #0
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
 800896e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008972:	460b      	mov	r3, r1
 8008974:	4313      	orrs	r3, r2
 8008976:	d00a      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008978:	4b6b      	ldr	r3, [pc, #428]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800897a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008988:	4a67      	ldr	r2, [pc, #412]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898a:	430b      	orrs	r3, r1
 800898c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	2100      	movs	r1, #0
 8008998:	62b9      	str	r1, [r7, #40]	; 0x28
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80089a4:	460b      	mov	r3, r1
 80089a6:	4313      	orrs	r3, r2
 80089a8:	d011      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	3308      	adds	r3, #8
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fa4a 	bl	8009e4c <RCCEx_PLL2_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80089be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	2100      	movs	r1, #0
 80089d8:	6239      	str	r1, [r7, #32]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
 80089e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089e4:	460b      	mov	r3, r1
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d011      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ee:	3308      	adds	r3, #8
 80089f0:	2101      	movs	r1, #1
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 fa2a 	bl	8009e4c <RCCEx_PLL2_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80089fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	2100      	movs	r1, #0
 8008a18:	61b9      	str	r1, [r7, #24]
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a24:	460b      	mov	r3, r1
 8008a26:	4313      	orrs	r3, r2
 8008a28:	d011      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2e:	3308      	adds	r3, #8
 8008a30:	2102      	movs	r1, #2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 fa0a 	bl	8009e4c <RCCEx_PLL2_Config>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	2100      	movs	r1, #0
 8008a58:	6139      	str	r1, [r7, #16]
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a64:	460b      	mov	r3, r1
 8008a66:	4313      	orrs	r3, r2
 8008a68:	d011      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6e:	3328      	adds	r3, #40	; 0x28
 8008a70:	2100      	movs	r1, #0
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fa9c 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	2100      	movs	r1, #0
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d011      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aae:	3328      	adds	r3, #40	; 0x28
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 fa7c 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	f003 0320 	and.w	r3, r3, #32
 8008ade:	607b      	str	r3, [r7, #4]
 8008ae0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	d011      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aee:	3328      	adds	r3, #40	; 0x28
 8008af0:	2102      	movs	r1, #2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 fa5c 	bl	8009fb0 <RCCEx_PLL3_Config>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008b0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008b22:	46bd      	mov	sp, r7
 8008b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b28:	58024400 	.word	0x58024400

08008b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b090      	sub	sp, #64	; 0x40
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b3a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	f040 8094 	bne.w	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b44:	4b9e      	ldr	r3, [pc, #632]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	f200 8087 	bhi.w	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b71 	.word	0x08008b71
 8008b60:	08008b99 	.word	0x08008b99
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008c5d 	.word	0x08008c5d
 8008b6c:	08008be9 	.word	0x08008be9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b70:	4b93      	ldr	r3, [pc, #588]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7c:	d108      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 f810 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b8c:	f000 bd45 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b94:	f000 bd41 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b98:	4b89      	ldr	r3, [pc, #548]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ba4:	d108      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0318 	add.w	r3, r7, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fd54 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb4:	f000 bd31 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bbc:	f000 bd2d 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bc0:	4b7f      	ldr	r3, [pc, #508]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bcc:	d108      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bce:	f107 030c 	add.w	r3, r7, #12
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fe94 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bdc:	f000 bd1d 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be4:	f000 bd19 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008be8:	4b75      	ldr	r3, [pc, #468]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bf2:	4b73      	ldr	r3, [pc, #460]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d10c      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c04:	4b6e      	ldr	r3, [pc, #440]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	08db      	lsrs	r3, r3, #3
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	4a6d      	ldr	r2, [pc, #436]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c16:	e01f      	b.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c18:	4b69      	ldr	r3, [pc, #420]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c24:	d106      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c2c:	d102      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c2e:	4b66      	ldr	r3, [pc, #408]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c32:	e011      	b.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c34:	4b62      	ldr	r3, [pc, #392]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c40:	d106      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d102      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c4a:	4b60      	ldr	r3, [pc, #384]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4e:	e003      	b.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c54:	f000 bce1 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c58:	f000 bcdf 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c5c:	4b5c      	ldr	r3, [pc, #368]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c60:	f000 bcdb 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c68:	f000 bcd7 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c70:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008c74:	430b      	orrs	r3, r1
 8008c76:	f040 80ad 	bne.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008c7a:	4b51      	ldr	r3, [pc, #324]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8a:	d056      	beq.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c92:	f200 8090 	bhi.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	2bc0      	cmp	r3, #192	; 0xc0
 8008c9a:	f000 8088 	beq.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ca2:	f200 8088 	bhi.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d032      	beq.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2b80      	cmp	r3, #128	; 0x80
 8008cb0:	f200 8081 	bhi.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b40      	cmp	r3, #64	; 0x40
 8008cbe:	d014      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008cc0:	e079      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cc2:	4b3f      	ldr	r3, [pc, #252]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cce:	d108      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 ff67 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cde:	f000 bc9c 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce6:	f000 bc98 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cea:	4b35      	ldr	r3, [pc, #212]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cf6:	d108      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf8:	f107 0318 	add.w	r3, r7, #24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fcab 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d06:	f000 bc88 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d0e:	f000 bc84 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d12:	4b2b      	ldr	r3, [pc, #172]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d1e:	d108      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d20:	f107 030c 	add.w	r3, r7, #12
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fdeb 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2e:	f000 bc74 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d36:	f000 bc70 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d3a:	4b21      	ldr	r3, [pc, #132]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d44:	4b1e      	ldr	r3, [pc, #120]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d10c      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d56:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	4a18      	ldr	r2, [pc, #96]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d68:	e01f      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d6a:	4b15      	ldr	r3, [pc, #84]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d76:	d106      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d7e:	d102      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d84:	e011      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d92:	d106      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d9a:	d102      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da0:	e003      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008da6:	f000 bc38 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008daa:	f000 bc36 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dae:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008db2:	f000 bc32 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dba:	f000 bc2e 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dbe:	bf00      	nop
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	03d09000 	.word	0x03d09000
 8008dc8:	003d0900 	.word	0x003d0900
 8008dcc:	007a1200 	.word	0x007a1200
 8008dd0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	f040 809c 	bne.w	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008de2:	4b9e      	ldr	r3, [pc, #632]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008dea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df2:	d054      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dfa:	f200 808b 	bhi.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e04:	f000 8083 	beq.w	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e0e:	f200 8081 	bhi.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e18:	d02f      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e20:	d878      	bhi.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e2e:	d012      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008e30:	e070      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e32:	4b8a      	ldr	r3, [pc, #552]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3e:	d107      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 feaf 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e4e:	e3e4      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e54:	e3e1      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e56:	4b81      	ldr	r3, [pc, #516]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e62:	d107      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fbf5 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e72:	e3d2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e78:	e3cf      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e7a:	4b78      	ldr	r3, [pc, #480]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e86:	d107      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fd37 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e96:	e3c0      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9c:	e3bd      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e9e:	4b6f      	ldr	r3, [pc, #444]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea8:	4b6c      	ldr	r3, [pc, #432]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d10c      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eba:	4b68      	ldr	r3, [pc, #416]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	08db      	lsrs	r3, r3, #3
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	4a66      	ldr	r2, [pc, #408]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ecc:	e01e      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ece:	4b63      	ldr	r3, [pc, #396]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eda:	d106      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee2:	d102      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ee4:	4b5f      	ldr	r3, [pc, #380]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee8:	e010      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eea:	4b5c      	ldr	r3, [pc, #368]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efe:	d102      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f00:	4b59      	ldr	r3, [pc, #356]	; (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f04:	e002      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f0a:	e386      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f0c:	e385      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f0e:	4b57      	ldr	r3, [pc, #348]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f12:	e382      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f18:	e37f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f1e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008f22:	430b      	orrs	r3, r1
 8008f24:	f040 80a7 	bne.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008f28:	4b4c      	ldr	r3, [pc, #304]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f38:	d055      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f40:	f200 8096 	bhi.w	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f4a:	f000 8084 	beq.w	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f54:	f200 808c 	bhi.w	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f5e:	d030      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f66:	f200 8083 	bhi.w	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f76:	d012      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008f78:	e07a      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f7a:	4b38      	ldr	r3, [pc, #224]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f86:	d107      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fe0b 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f96:	e340      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f9c:	e33d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f9e:	4b2f      	ldr	r3, [pc, #188]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008faa:	d107      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fac:	f107 0318 	add.w	r3, r7, #24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fb51 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fba:	e32e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	e32b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fc2:	4b26      	ldr	r3, [pc, #152]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fce:	d107      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fd0:	f107 030c 	add.w	r3, r7, #12
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fc93 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fde:	e31c      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe4:	e319      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fe6:	4b1d      	ldr	r3, [pc, #116]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d10c      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009002:	4b16      	ldr	r3, [pc, #88]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	f003 0303 	and.w	r3, r3, #3
 800900c:	4a14      	ldr	r2, [pc, #80]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800900e:	fa22 f303 	lsr.w	r3, r2, r3
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009014:	e01e      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009022:	d106      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800902a:	d102      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009030:	e010      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009032:	4b0a      	ldr	r3, [pc, #40]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800903e:	d106      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009046:	d102      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009048:	4b07      	ldr	r3, [pc, #28]	; (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904c:	e002      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009052:	e2e2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009054:	e2e1      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800905a:	e2de      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800905c:	58024400 	.word	0x58024400
 8009060:	03d09000 	.word	0x03d09000
 8009064:	003d0900 	.word	0x003d0900
 8009068:	007a1200 	.word	0x007a1200
 800906c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009074:	e2d1      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800907e:	430b      	orrs	r3, r1
 8009080:	f040 809c 	bne.w	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009084:	4b93      	ldr	r3, [pc, #588]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009088:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800908c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009094:	d054      	beq.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800909c:	f200 808b 	bhi.w	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a6:	f000 8083 	beq.w	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090b0:	f200 8081 	bhi.w	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ba:	d02f      	beq.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c2:	d878      	bhi.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d0:	d012      	beq.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80090d2:	e070      	b.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d4:	4b7f      	ldr	r3, [pc, #508]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090e0:	d107      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fd5e 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f0:	e293      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f6:	e290      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f8:	4b76      	ldr	r3, [pc, #472]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009104:	d107      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009106:	f107 0318 	add.w	r3, r7, #24
 800910a:	4618      	mov	r0, r3
 800910c:	f000 faa4 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009114:	e281      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800911a:	e27e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800911c:	4b6d      	ldr	r3, [pc, #436]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009128:	d107      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800912a:	f107 030c 	add.w	r3, r7, #12
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fbe6 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009138:	e26f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800913e:	e26c      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009140:	4b64      	ldr	r3, [pc, #400]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009148:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800914a:	4b62      	ldr	r3, [pc, #392]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0304 	and.w	r3, r3, #4
 8009152:	2b04      	cmp	r3, #4
 8009154:	d10c      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800915c:	4b5d      	ldr	r3, [pc, #372]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	08db      	lsrs	r3, r3, #3
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	4a5c      	ldr	r2, [pc, #368]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800916e:	e01e      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009170:	4b58      	ldr	r3, [pc, #352]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917c:	d106      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800917e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009184:	d102      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009186:	4b55      	ldr	r3, [pc, #340]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918a:	e010      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800918c:	4b51      	ldr	r3, [pc, #324]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009198:	d106      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a0:	d102      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091a2:	4b4f      	ldr	r3, [pc, #316]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a6:	e002      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80091ac:	e235      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091ae:	e234      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091b0:	4b4c      	ldr	r3, [pc, #304]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b4:	e231      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ba:	e22e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80091bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80091c4:	430b      	orrs	r3, r1
 80091c6:	f040 808f 	bne.w	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80091ca:	4b42      	ldr	r3, [pc, #264]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80091d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091da:	d06b      	beq.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091e2:	d874      	bhi.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091ea:	d056      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091f2:	d86c      	bhi.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091fa:	d03b      	beq.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009202:	d864      	bhi.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800920a:	d021      	beq.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009212:	d85c      	bhi.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009220:	d004      	beq.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009222:	e054      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009224:	f7fe fa0a 	bl	800763c <HAL_RCC_GetPCLK1Freq>
 8009228:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800922a:	e1f6      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800922c:	4b29      	ldr	r3, [pc, #164]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009238:	d107      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800923a:	f107 0318 	add.w	r3, r7, #24
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fa0a 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009248:	e1e7      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800924e:	e1e4      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009250:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800925c:	d107      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800925e:	f107 030c 	add.w	r3, r7, #12
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fb4c 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800926c:	e1d5      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009272:	e1d2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	2b04      	cmp	r3, #4
 800927e:	d109      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	08db      	lsrs	r3, r3, #3
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	4a13      	ldr	r2, [pc, #76]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009292:	e1c2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009298:	e1bf      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800929a:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a6:	d102      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ac:	e1b5      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b2:	e1b2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092b4:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092c0:	d102      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80092c2:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c6:	e1a8      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092cc:	e1a5      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d2:	e1a2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092d4:	58024400 	.word	0x58024400
 80092d8:	03d09000 	.word	0x03d09000
 80092dc:	003d0900 	.word	0x003d0900
 80092e0:	007a1200 	.word	0x007a1200
 80092e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80092e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80092f0:	430b      	orrs	r3, r1
 80092f2:	d173      	bne.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80092f4:	4b9c      	ldr	r3, [pc, #624]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009304:	d02f      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800930c:	d863      	bhi.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800931a:	d012      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800931c:	e05b      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800931e:	4b92      	ldr	r3, [pc, #584]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800932a:	d107      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932c:	f107 0318 	add.w	r3, r7, #24
 8009330:	4618      	mov	r0, r3
 8009332:	f000 f991 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933a:	e16e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009340:	e16b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009342:	4b89      	ldr	r3, [pc, #548]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800934e:	d107      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fad3 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935e:	e15c      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009364:	e159      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009366:	4b80      	ldr	r3, [pc, #512]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800936e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009370:	4b7d      	ldr	r3, [pc, #500]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b04      	cmp	r3, #4
 800937a:	d10c      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009382:	4b79      	ldr	r3, [pc, #484]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	08db      	lsrs	r3, r3, #3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	4a77      	ldr	r2, [pc, #476]	; (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800938e:	fa22 f303 	lsr.w	r3, r2, r3
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009394:	e01e      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009396:	4b74      	ldr	r3, [pc, #464]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a2:	d106      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093aa:	d102      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093ac:	4b70      	ldr	r3, [pc, #448]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b0:	e010      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b2:	4b6d      	ldr	r3, [pc, #436]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093be:	d106      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c6:	d102      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093c8:	4b6a      	ldr	r3, [pc, #424]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093d2:	e122      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093d4:	e121      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093da:	e11e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80093dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80093e4:	430b      	orrs	r3, r1
 80093e6:	d133      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80093e8:	4b5f      	ldr	r3, [pc, #380]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fe:	d012      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009400:	e023      	b.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009402:	4b59      	ldr	r3, [pc, #356]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800940e:	d107      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fbc7 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941e:	e0fc      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009424:	e0f9      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009426:	4b50      	ldr	r3, [pc, #320]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800942e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009432:	d107      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009434:	f107 0318 	add.w	r3, r7, #24
 8009438:	4618      	mov	r0, r3
 800943a:	f000 f90d 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009442:	e0ea      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009448:	e0e7      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800944e:	e0e4      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009454:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009458:	430b      	orrs	r3, r1
 800945a:	f040 808d 	bne.w	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800945e:	4b42      	ldr	r3, [pc, #264]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009462:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009466:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800946e:	d06b      	beq.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009476:	d874      	bhi.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947e:	d056      	beq.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009486:	d86c      	bhi.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800948e:	d03b      	beq.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009496:	d864      	bhi.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800949e:	d021      	beq.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a6:	d85c      	bhi.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094b4:	d004      	beq.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80094b6:	e054      	b.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80094b8:	f000 f8b8 	bl	800962c <HAL_RCCEx_GetD3PCLK1Freq>
 80094bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094be:	e0ac      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094c0:	4b29      	ldr	r3, [pc, #164]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094cc:	d107      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ce:	f107 0318 	add.w	r3, r7, #24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 f8c0 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094dc:	e09d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094e2:	e09a      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094e4:	4b20      	ldr	r3, [pc, #128]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f0:	d107      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094f2:	f107 030c 	add.w	r3, r7, #12
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 fa02 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009500:	e08b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009506:	e088      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009508:	4b17      	ldr	r3, [pc, #92]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b04      	cmp	r3, #4
 8009512:	d109      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009514:	4b14      	ldr	r3, [pc, #80]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	08db      	lsrs	r3, r3, #3
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	4a13      	ldr	r2, [pc, #76]	; (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009526:	e078      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800952c:	e075      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953a:	d102      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800953c:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009540:	e06b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009546:	e068      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009548:	4b07      	ldr	r3, [pc, #28]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009554:	d102      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800955a:	e05e      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009560:	e05b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009566:	e058      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009568:	58024400 	.word	0x58024400
 800956c:	03d09000 	.word	0x03d09000
 8009570:	003d0900 	.word	0x003d0900
 8009574:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800957c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009580:	430b      	orrs	r3, r1
 8009582:	d148      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800958c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009594:	d02a      	beq.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800959c:	d838      	bhi.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095aa:	d00d      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80095ac:	e030      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095ae:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ba:	d102      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c0:	e02b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c6:	e028      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095c8:	4b16      	ldr	r3, [pc, #88]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095d4:	d107      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fae4 	bl	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e4:	e019      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ea:	e016      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095f8:	d107      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fa:	f107 0318 	add.w	r3, r7, #24
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f82a 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009608:	e007      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960e:	e004      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009614:	e001      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800961a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800961c:	4618      	mov	r0, r3
 800961e:	3740      	adds	r7, #64	; 0x40
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	58024400 	.word	0x58024400
 8009628:	007a1200 	.word	0x007a1200

0800962c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009630:	f7fd ffd4 	bl	80075dc <HAL_RCC_GetHCLKFreq>
 8009634:	4602      	mov	r2, r0
 8009636:	4b06      	ldr	r3, [pc, #24]	; (8009650 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	091b      	lsrs	r3, r3, #4
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	4904      	ldr	r1, [pc, #16]	; (8009654 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009642:	5ccb      	ldrb	r3, [r1, r3]
 8009644:	f003 031f 	and.w	r3, r3, #31
 8009648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800964c:	4618      	mov	r0, r3
 800964e:	bd80      	pop	{r7, pc}
 8009650:	58024400 	.word	0x58024400
 8009654:	080148ac 	.word	0x080148ac

08009658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009658:	b480      	push	{r7}
 800965a:	b089      	sub	sp, #36	; 0x24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009660:	4ba1      	ldr	r3, [pc, #644]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800966a:	4b9f      	ldr	r3, [pc, #636]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966e:	0b1b      	lsrs	r3, r3, #12
 8009670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009674:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009676:	4b9c      	ldr	r3, [pc, #624]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967a:	091b      	lsrs	r3, r3, #4
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009682:	4b99      	ldr	r3, [pc, #612]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009686:	08db      	lsrs	r3, r3, #3
 8009688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	fb02 f303 	mul.w	r3, r2, r3
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 8111 	beq.w	80098c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	f000 8083 	beq.w	80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	f200 80a1 	bhi.w	80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d056      	beq.n	8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80096c2:	e099      	b.n	80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096c4:	4b88      	ldr	r3, [pc, #544]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d02d      	beq.n	800972c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096d0:	4b85      	ldr	r3, [pc, #532]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	08db      	lsrs	r3, r3, #3
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	4a84      	ldr	r2, [pc, #528]	; (80098ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80096dc:	fa22 f303 	lsr.w	r3, r2, r3
 80096e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fa:	4b7b      	ldr	r3, [pc, #492]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970a:	ed97 6a03 	vldr	s12, [r7, #12]
 800970e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800972a:	e087      	b.n	800983c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800973a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973e:	4b6a      	ldr	r3, [pc, #424]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009752:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800976e:	e065      	b.n	800983c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800977e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009782:	4b59      	ldr	r3, [pc, #356]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009792:	ed97 6a03 	vldr	s12, [r7, #12]
 8009796:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800979a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097b2:	e043      	b.n	800983c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80097c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c6:	4b48      	ldr	r3, [pc, #288]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097f6:	e021      	b.n	800983c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009802:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980a:	4b37      	ldr	r3, [pc, #220]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981a:	ed97 6a03 	vldr	s12, [r7, #12]
 800981e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800982e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800983a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800983c:	4b2a      	ldr	r3, [pc, #168]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	0a5b      	lsrs	r3, r3, #9
 8009842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009856:	edd7 6a07 	vldr	s13, [r7, #28]
 800985a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800985e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009862:	ee17 2a90 	vmov	r2, s15
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800986a:	4b1f      	ldr	r3, [pc, #124]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	0c1b      	lsrs	r3, r3, #16
 8009870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009874:	ee07 3a90 	vmov	s15, r3
 8009878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009884:	edd7 6a07 	vldr	s13, [r7, #28]
 8009888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800988c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009890:	ee17 2a90 	vmov	r2, s15
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009898:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	0e1b      	lsrs	r3, r3, #24
 800989e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098be:	ee17 2a90 	vmov	r2, s15
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80098c6:	e008      	b.n	80098da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	609a      	str	r2, [r3, #8]
}
 80098da:	bf00      	nop
 80098dc:	3724      	adds	r7, #36	; 0x24
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	58024400 	.word	0x58024400
 80098ec:	03d09000 	.word	0x03d09000
 80098f0:	46000000 	.word	0x46000000
 80098f4:	4c742400 	.word	0x4c742400
 80098f8:	4a742400 	.word	0x4a742400
 80098fc:	4af42400 	.word	0x4af42400

08009900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009900:	b480      	push	{r7}
 8009902:	b089      	sub	sp, #36	; 0x24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009908:	4ba1      	ldr	r3, [pc, #644]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	f003 0303 	and.w	r3, r3, #3
 8009910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009912:	4b9f      	ldr	r3, [pc, #636]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	0d1b      	lsrs	r3, r3, #20
 8009918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800991c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800991e:	4b9c      	ldr	r3, [pc, #624]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	0a1b      	lsrs	r3, r3, #8
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800992a:	4b99      	ldr	r3, [pc, #612]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800992c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992e:	08db      	lsrs	r3, r3, #3
 8009930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	fb02 f303 	mul.w	r3, r2, r3
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 8111 	beq.w	8009b70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b02      	cmp	r3, #2
 8009952:	f000 8083 	beq.w	8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	2b02      	cmp	r3, #2
 800995a:	f200 80a1 	bhi.w	8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d056      	beq.n	8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800996a:	e099      	b.n	8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800996c:	4b88      	ldr	r3, [pc, #544]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d02d      	beq.n	80099d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009978:	4b85      	ldr	r3, [pc, #532]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	08db      	lsrs	r3, r3, #3
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	4a84      	ldr	r2, [pc, #528]	; (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009984:	fa22 f303 	lsr.w	r3, r2, r3
 8009988:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a2:	4b7b      	ldr	r3, [pc, #492]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099d2:	e087      	b.n	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80099e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e6:	4b6a      	ldr	r3, [pc, #424]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a16:	e065      	b.n	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2a:	4b59      	ldr	r3, [pc, #356]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a5a:	e043      	b.n	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6e:	4b48      	ldr	r3, [pc, #288]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a9e:	e021      	b.n	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab2:	4b37      	ldr	r3, [pc, #220]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ac6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ae2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009ae4:	4b2a      	ldr	r3, [pc, #168]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	0a5b      	lsrs	r3, r3, #9
 8009aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b0a:	ee17 2a90 	vmov	r2, s15
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009b12:	4b1f      	ldr	r3, [pc, #124]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	0c1b      	lsrs	r3, r3, #16
 8009b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b1c:	ee07 3a90 	vmov	s15, r3
 8009b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b38:	ee17 2a90 	vmov	r2, s15
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009b40:	4b13      	ldr	r3, [pc, #76]	; (8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	0e1b      	lsrs	r3, r3, #24
 8009b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b66:	ee17 2a90 	vmov	r2, s15
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b6e:	e008      	b.n	8009b82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	609a      	str	r2, [r3, #8]
}
 8009b82:	bf00      	nop
 8009b84:	3724      	adds	r7, #36	; 0x24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	58024400 	.word	0x58024400
 8009b94:	03d09000 	.word	0x03d09000
 8009b98:	46000000 	.word	0x46000000
 8009b9c:	4c742400 	.word	0x4c742400
 8009ba0:	4a742400 	.word	0x4a742400
 8009ba4:	4af42400 	.word	0x4af42400

08009ba8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b089      	sub	sp, #36	; 0x24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bb0:	4ba0      	ldr	r3, [pc, #640]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009bba:	4b9e      	ldr	r3, [pc, #632]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbe:	091b      	lsrs	r3, r3, #4
 8009bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009bc6:	4b9b      	ldr	r3, [pc, #620]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009bd0:	4b98      	ldr	r3, [pc, #608]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd4:	08db      	lsrs	r3, r3, #3
 8009bd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	fb02 f303 	mul.w	r3, r2, r3
 8009be0:	ee07 3a90 	vmov	s15, r3
 8009be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 8111 	beq.w	8009e16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	f000 8083 	beq.w	8009d02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	f200 80a1 	bhi.w	8009d46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d056      	beq.n	8009cbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009c10:	e099      	b.n	8009d46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c12:	4b88      	ldr	r3, [pc, #544]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d02d      	beq.n	8009c7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c1e:	4b85      	ldr	r3, [pc, #532]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	08db      	lsrs	r3, r3, #3
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	4a83      	ldr	r2, [pc, #524]	; (8009e38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c48:	4b7a      	ldr	r3, [pc, #488]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c78:	e087      	b.n	8009d8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	ee07 3a90 	vmov	s15, r3
 8009c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009e40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8c:	4b69      	ldr	r3, [pc, #420]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c94:	ee07 3a90 	vmov	s15, r3
 8009c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cbc:	e065      	b.n	8009d8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	ee07 3a90 	vmov	s15, r3
 8009cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009e44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd0:	4b58      	ldr	r3, [pc, #352]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd8:	ee07 3a90 	vmov	s15, r3
 8009cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ce4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d00:	e043      	b.n	8009d8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d14:	4b47      	ldr	r3, [pc, #284]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d28:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d44:	e021      	b.n	8009d8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	ee07 3a90 	vmov	s15, r3
 8009d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d58:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d60:	ee07 3a90 	vmov	s15, r3
 8009d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009d8a:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	0a5b      	lsrs	r3, r3, #9
 8009d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db0:	ee17 2a90 	vmov	r2, s15
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dde:	ee17 2a90 	vmov	r2, s15
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009de6:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	0e1b      	lsrs	r3, r3, #24
 8009dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df0:	ee07 3a90 	vmov	s15, r3
 8009df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e0c:	ee17 2a90 	vmov	r2, s15
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e14:	e008      	b.n	8009e28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	609a      	str	r2, [r3, #8]
}
 8009e28:	bf00      	nop
 8009e2a:	3724      	adds	r7, #36	; 0x24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	58024400 	.word	0x58024400
 8009e38:	03d09000 	.word	0x03d09000
 8009e3c:	46000000 	.word	0x46000000
 8009e40:	4c742400 	.word	0x4c742400
 8009e44:	4a742400 	.word	0x4a742400
 8009e48:	4af42400 	.word	0x4af42400

08009e4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e5a:	4b53      	ldr	r3, [pc, #332]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d101      	bne.n	8009e6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e099      	b.n	8009f9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e6a:	4b4f      	ldr	r3, [pc, #316]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a4e      	ldr	r2, [pc, #312]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009e70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e76:	f7f8 fa01 	bl	800227c <HAL_GetTick>
 8009e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e7c:	e008      	b.n	8009e90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e7e:	f7f8 f9fd 	bl	800227c <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d901      	bls.n	8009e90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e086      	b.n	8009f9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e90:	4b45      	ldr	r3, [pc, #276]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f0      	bne.n	8009e7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e9c:	4b42      	ldr	r3, [pc, #264]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	031b      	lsls	r3, r3, #12
 8009eaa:	493f      	ldr	r1, [pc, #252]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	628b      	str	r3, [r1, #40]	; 0x28
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	025b      	lsls	r3, r3, #9
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	041b      	lsls	r3, r3, #16
 8009ece:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ed2:	431a      	orrs	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	061b      	lsls	r3, r3, #24
 8009edc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ee0:	4931      	ldr	r1, [pc, #196]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ee6:	4b30      	ldr	r3, [pc, #192]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	492d      	ldr	r1, [pc, #180]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ef8:	4b2b      	ldr	r3, [pc, #172]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	f023 0220 	bic.w	r2, r3, #32
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	4928      	ldr	r1, [pc, #160]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f0a:	4b27      	ldr	r3, [pc, #156]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	4a26      	ldr	r2, [pc, #152]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f10:	f023 0310 	bic.w	r3, r3, #16
 8009f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f16:	4b24      	ldr	r3, [pc, #144]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f1a:	4b24      	ldr	r3, [pc, #144]	; (8009fac <RCCEx_PLL2_Config+0x160>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	69d2      	ldr	r2, [r2, #28]
 8009f22:	00d2      	lsls	r2, r2, #3
 8009f24:	4920      	ldr	r1, [pc, #128]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f2a:	4b1f      	ldr	r3, [pc, #124]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f30:	f043 0310 	orr.w	r3, r3, #16
 8009f34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d106      	bne.n	8009f4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	4a19      	ldr	r2, [pc, #100]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f48:	e00f      	b.n	8009f6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d106      	bne.n	8009f5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f50:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a14      	ldr	r2, [pc, #80]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f5c:	e005      	b.n	8009f6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f5e:	4b12      	ldr	r3, [pc, #72]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	4a11      	ldr	r2, [pc, #68]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a0e      	ldr	r2, [pc, #56]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f76:	f7f8 f981 	bl	800227c <HAL_GetTick>
 8009f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f7c:	e008      	b.n	8009f90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f7e:	f7f8 f97d 	bl	800227c <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d901      	bls.n	8009f90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e006      	b.n	8009f9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f90:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <RCCEx_PLL2_Config+0x15c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0f0      	beq.n	8009f7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	58024400 	.word	0x58024400
 8009fac:	ffff0007 	.word	0xffff0007

08009fb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fbe:	4b53      	ldr	r3, [pc, #332]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d101      	bne.n	8009fce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e099      	b.n	800a102 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009fce:	4b4f      	ldr	r3, [pc, #316]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a4e      	ldr	r2, [pc, #312]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fda:	f7f8 f94f 	bl	800227c <HAL_GetTick>
 8009fde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fe0:	e008      	b.n	8009ff4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fe2:	f7f8 f94b 	bl	800227c <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d901      	bls.n	8009ff4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e086      	b.n	800a102 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ff4:	4b45      	ldr	r3, [pc, #276]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1f0      	bne.n	8009fe2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a000:	4b42      	ldr	r3, [pc, #264]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a004:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	051b      	lsls	r3, r3, #20
 800a00e:	493f      	ldr	r1, [pc, #252]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a010:	4313      	orrs	r3, r2
 800a012:	628b      	str	r3, [r1, #40]	; 0x28
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	3b01      	subs	r3, #1
 800a01a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	3b01      	subs	r3, #1
 800a024:	025b      	lsls	r3, r3, #9
 800a026:	b29b      	uxth	r3, r3
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	3b01      	subs	r3, #1
 800a030:	041b      	lsls	r3, r3, #16
 800a032:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a036:	431a      	orrs	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	061b      	lsls	r3, r3, #24
 800a040:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a044:	4931      	ldr	r1, [pc, #196]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a046:	4313      	orrs	r3, r2
 800a048:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a04a:	4b30      	ldr	r3, [pc, #192]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	492d      	ldr	r1, [pc, #180]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a05c:	4b2b      	ldr	r3, [pc, #172]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	4928      	ldr	r1, [pc, #160]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a06e:	4b27      	ldr	r3, [pc, #156]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	4a26      	ldr	r2, [pc, #152]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a07a:	4b24      	ldr	r3, [pc, #144]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a07e:	4b24      	ldr	r3, [pc, #144]	; (800a110 <RCCEx_PLL3_Config+0x160>)
 800a080:	4013      	ands	r3, r2
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	69d2      	ldr	r2, [r2, #28]
 800a086:	00d2      	lsls	r2, r2, #3
 800a088:	4920      	ldr	r1, [pc, #128]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a08e:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a092:	4a1e      	ldr	r2, [pc, #120]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0a0:	4b1a      	ldr	r3, [pc, #104]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4a19      	ldr	r2, [pc, #100]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a0aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0ac:	e00f      	b.n	800a0ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d106      	bne.n	800a0c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a0b4:	4b15      	ldr	r3, [pc, #84]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4a14      	ldr	r2, [pc, #80]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0c0:	e005      	b.n	800a0ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a0c2:	4b12      	ldr	r3, [pc, #72]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	4a11      	ldr	r2, [pc, #68]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a0e      	ldr	r2, [pc, #56]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0da:	f7f8 f8cf 	bl	800227c <HAL_GetTick>
 800a0de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0e0:	e008      	b.n	800a0f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0e2:	f7f8 f8cb 	bl	800227c <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d901      	bls.n	800a0f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e006      	b.n	800a102 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <RCCEx_PLL3_Config+0x15c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0f0      	beq.n	800a0e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	58024400 	.word	0x58024400
 800a110:	ffff0007 	.word	0xffff0007

0800a114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e049      	b.n	800a1ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7f7 fc1c 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3304      	adds	r3, #4
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f000 fd0a 	bl	800ab6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d001      	beq.n	800a1dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e054      	b.n	800a286 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f042 0201 	orr.w	r2, r2, #1
 800a1f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a26      	ldr	r2, [pc, #152]	; (800a294 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d022      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a206:	d01d      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a22      	ldr	r2, [pc, #136]	; (800a298 <HAL_TIM_Base_Start_IT+0xd4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d018      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a21      	ldr	r2, [pc, #132]	; (800a29c <HAL_TIM_Base_Start_IT+0xd8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d013      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d00e      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1e      	ldr	r2, [pc, #120]	; (800a2a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d009      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d004      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x80>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a1b      	ldr	r2, [pc, #108]	; (800a2ac <HAL_TIM_Base_Start_IT+0xe8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d115      	bne.n	800a270 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <HAL_TIM_Base_Start_IT+0xec>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b06      	cmp	r3, #6
 800a254:	d015      	beq.n	800a282 <HAL_TIM_Base_Start_IT+0xbe>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a25c:	d011      	beq.n	800a282 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f042 0201 	orr.w	r2, r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26e:	e008      	b.n	800a282 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0201 	orr.w	r2, r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	e000      	b.n	800a284 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40010000 	.word	0x40010000
 800a298:	40000400 	.word	0x40000400
 800a29c:	40000800 	.word	0x40000800
 800a2a0:	40000c00 	.word	0x40000c00
 800a2a4:	40010400 	.word	0x40010400
 800a2a8:	40001800 	.word	0x40001800
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	00010007 	.word	0x00010007

0800a2b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e049      	b.n	800a35a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d106      	bne.n	800a2e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f841 	bl	800a362 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	f000 fc3a 	bl	800ab6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e08f      	b.n	800a4ac <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7f7 fb3d 	bl	8001a20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6899      	ldr	r1, [r3, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	4b3e      	ldr	r3, [pc, #248]	; (800a4b4 <HAL_TIM_Encoder_Init+0x13c>)
 800a3ba:	400b      	ands	r3, r1
 800a3bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f000 fbcf 	bl	800ab6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4b31      	ldr	r3, [pc, #196]	; (800a4b8 <HAL_TIM_Encoder_Init+0x140>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	4313      	orrs	r3, r2
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	4313      	orrs	r3, r2
 800a408:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4b2b      	ldr	r3, [pc, #172]	; (800a4bc <HAL_TIM_Encoder_Init+0x144>)
 800a40e:	4013      	ands	r3, r2
 800a410:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4b2a      	ldr	r3, [pc, #168]	; (800a4c0 <HAL_TIM_Encoder_Init+0x148>)
 800a416:	4013      	ands	r3, r2
 800a418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	4313      	orrs	r3, r2
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	011a      	lsls	r2, r3, #4
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	031b      	lsls	r3, r3, #12
 800a438:	4313      	orrs	r3, r2
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a446:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a44e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	011b      	lsls	r3, r3, #4
 800a45a:	4313      	orrs	r3, r2
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	fffebff8 	.word	0xfffebff8
 800a4b8:	fffffcfc 	.word	0xfffffcfc
 800a4bc:	fffff3f3 	.word	0xfffff3f3
 800a4c0:	ffff0f0f 	.word	0xffff0f0f

0800a4c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0302 	and.w	r3, r3, #2
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d122      	bne.n	800a520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d11b      	bne.n	800a520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0202 	mvn.w	r2, #2
 800a4f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fb12 	bl	800ab30 <HAL_TIM_IC_CaptureCallback>
 800a50c:	e005      	b.n	800a51a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fb04 	bl	800ab1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fb15 	bl	800ab44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d122      	bne.n	800a574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d11b      	bne.n	800a574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0204 	mvn.w	r2, #4
 800a544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2202      	movs	r2, #2
 800a54a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fae8 	bl	800ab30 <HAL_TIM_IC_CaptureCallback>
 800a560:	e005      	b.n	800a56e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fada 	bl	800ab1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 faeb 	bl	800ab44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d122      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f003 0308 	and.w	r3, r3, #8
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d11b      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f06f 0208 	mvn.w	r2, #8
 800a598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2204      	movs	r2, #4
 800a59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fabe 	bl	800ab30 <HAL_TIM_IC_CaptureCallback>
 800a5b4:	e005      	b.n	800a5c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fab0 	bl	800ab1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fac1 	bl	800ab44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f003 0310 	and.w	r3, r3, #16
 800a5d2:	2b10      	cmp	r3, #16
 800a5d4:	d122      	bne.n	800a61c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f003 0310 	and.w	r3, r3, #16
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d11b      	bne.n	800a61c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f06f 0210 	mvn.w	r2, #16
 800a5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2208      	movs	r2, #8
 800a5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	69db      	ldr	r3, [r3, #28]
 800a5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fa94 	bl	800ab30 <HAL_TIM_IC_CaptureCallback>
 800a608:	e005      	b.n	800a616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fa86 	bl	800ab1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa97 	bl	800ab44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b01      	cmp	r3, #1
 800a628:	d10e      	bne.n	800a648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b01      	cmp	r3, #1
 800a636:	d107      	bne.n	800a648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f06f 0201 	mvn.w	r2, #1
 800a640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7f7 f8d6 	bl	80017f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a652:	2b80      	cmp	r3, #128	; 0x80
 800a654:	d10e      	bne.n	800a674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a660:	2b80      	cmp	r3, #128	; 0x80
 800a662:	d107      	bne.n	800a674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 ff22 	bl	800b4b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	d10e      	bne.n	800a6a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a68e:	2b80      	cmp	r3, #128	; 0x80
 800a690:	d107      	bne.n	800a6a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 ff15 	bl	800b4cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d10e      	bne.n	800a6ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ba:	2b40      	cmp	r3, #64	; 0x40
 800a6bc:	d107      	bne.n	800a6ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fa45 	bl	800ab58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	f003 0320 	and.w	r3, r3, #32
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	d10e      	bne.n	800a6fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	d107      	bne.n	800a6fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f06f 0220 	mvn.w	r2, #32
 800a6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fed5 	bl	800b4a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d101      	bne.n	800a722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a71e:	2302      	movs	r3, #2
 800a720:	e0ff      	b.n	800a922 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b14      	cmp	r3, #20
 800a72e:	f200 80f0 	bhi.w	800a912 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a732:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a78d 	.word	0x0800a78d
 800a73c:	0800a913 	.word	0x0800a913
 800a740:	0800a913 	.word	0x0800a913
 800a744:	0800a913 	.word	0x0800a913
 800a748:	0800a7cd 	.word	0x0800a7cd
 800a74c:	0800a913 	.word	0x0800a913
 800a750:	0800a913 	.word	0x0800a913
 800a754:	0800a913 	.word	0x0800a913
 800a758:	0800a80f 	.word	0x0800a80f
 800a75c:	0800a913 	.word	0x0800a913
 800a760:	0800a913 	.word	0x0800a913
 800a764:	0800a913 	.word	0x0800a913
 800a768:	0800a84f 	.word	0x0800a84f
 800a76c:	0800a913 	.word	0x0800a913
 800a770:	0800a913 	.word	0x0800a913
 800a774:	0800a913 	.word	0x0800a913
 800a778:	0800a891 	.word	0x0800a891
 800a77c:	0800a913 	.word	0x0800a913
 800a780:	0800a913 	.word	0x0800a913
 800a784:	0800a913 	.word	0x0800a913
 800a788:	0800a8d1 	.word	0x0800a8d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fa84 	bl	800aca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0208 	orr.w	r2, r2, #8
 800a7a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0204 	bic.w	r2, r2, #4
 800a7b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6999      	ldr	r1, [r3, #24]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	691a      	ldr	r2, [r3, #16]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	619a      	str	r2, [r3, #24]
      break;
 800a7ca:	e0a5      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 faf4 	bl	800adc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6999      	ldr	r1, [r3, #24]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	021a      	lsls	r2, r3, #8
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	619a      	str	r2, [r3, #24]
      break;
 800a80c:	e084      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fb5d 	bl	800aed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69da      	ldr	r2, [r3, #28]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f042 0208 	orr.w	r2, r2, #8
 800a828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69da      	ldr	r2, [r3, #28]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 0204 	bic.w	r2, r2, #4
 800a838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69d9      	ldr	r1, [r3, #28]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	61da      	str	r2, [r3, #28]
      break;
 800a84c:	e064      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68b9      	ldr	r1, [r7, #8]
 800a854:	4618      	mov	r0, r3
 800a856:	f000 fbc5 	bl	800afe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69da      	ldr	r2, [r3, #28]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	69da      	ldr	r2, [r3, #28]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69d9      	ldr	r1, [r3, #28]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	021a      	lsls	r2, r3, #8
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	61da      	str	r2, [r3, #28]
      break;
 800a88e:	e043      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fc0e 	bl	800b0b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0208 	orr.w	r2, r2, #8
 800a8aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0204 	bic.w	r2, r2, #4
 800a8ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	691a      	ldr	r2, [r3, #16]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8ce:	e023      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fc52 	bl	800b180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	021a      	lsls	r2, r3, #8
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a910:	e002      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	75fb      	strb	r3, [r7, #23]
      break;
 800a916:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop

0800a92c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a940:	2b01      	cmp	r3, #1
 800a942:	d101      	bne.n	800a948 <HAL_TIM_ConfigClockSource+0x1c>
 800a944:	2302      	movs	r3, #2
 800a946:	e0dc      	b.n	800ab02 <HAL_TIM_ConfigClockSource+0x1d6>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	4b6a      	ldr	r3, [pc, #424]	; (800ab0c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a964:	4013      	ands	r3, r2
 800a966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a96e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a64      	ldr	r2, [pc, #400]	; (800ab10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f000 80a9 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a984:	4a62      	ldr	r2, [pc, #392]	; (800ab10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a986:	4293      	cmp	r3, r2
 800a988:	f200 80ae 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a98c:	4a61      	ldr	r2, [pc, #388]	; (800ab14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	f000 80a1 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a994:	4a5f      	ldr	r2, [pc, #380]	; (800ab14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a996:	4293      	cmp	r3, r2
 800a998:	f200 80a6 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a99c:	4a5e      	ldr	r2, [pc, #376]	; (800ab18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	f000 8099 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9a4:	4a5c      	ldr	r2, [pc, #368]	; (800ab18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	f200 809e 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a9b0:	f000 8091 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a9b8:	f200 8096 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c0:	f000 8089 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c8:	f200 808e 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d0:	d03e      	beq.n	800aa50 <HAL_TIM_ConfigClockSource+0x124>
 800a9d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d6:	f200 8087 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9de:	f000 8086 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1c2>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e6:	d87f      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e8:	2b70      	cmp	r3, #112	; 0x70
 800a9ea:	d01a      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0xf6>
 800a9ec:	2b70      	cmp	r3, #112	; 0x70
 800a9ee:	d87b      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f0:	2b60      	cmp	r3, #96	; 0x60
 800a9f2:	d050      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x16a>
 800a9f4:	2b60      	cmp	r3, #96	; 0x60
 800a9f6:	d877      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f8:	2b50      	cmp	r3, #80	; 0x50
 800a9fa:	d03c      	beq.n	800aa76 <HAL_TIM_ConfigClockSource+0x14a>
 800a9fc:	2b50      	cmp	r3, #80	; 0x50
 800a9fe:	d873      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa00:	2b40      	cmp	r3, #64	; 0x40
 800aa02:	d058      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x18a>
 800aa04:	2b40      	cmp	r3, #64	; 0x40
 800aa06:	d86f      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa08:	2b30      	cmp	r3, #48	; 0x30
 800aa0a:	d064      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa0c:	2b30      	cmp	r3, #48	; 0x30
 800aa0e:	d86b      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa10:	2b20      	cmp	r3, #32
 800aa12:	d060      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	d867      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d05c      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d05a      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa20:	e062      	b.n	800aae8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa32:	f000 fc89 	bl	800b348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	609a      	str	r2, [r3, #8]
      break;
 800aa4e:	e04f      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa60:	f000 fc72 	bl	800b348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa72:	609a      	str	r2, [r3, #8]
      break;
 800aa74:	e03c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa82:	461a      	mov	r2, r3
 800aa84:	f000 fbe2 	bl	800b24c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2150      	movs	r1, #80	; 0x50
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fc3c 	bl	800b30c <TIM_ITRx_SetConfig>
      break;
 800aa94:	e02c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f000 fc01 	bl	800b2aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2160      	movs	r1, #96	; 0x60
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fc2c 	bl	800b30c <TIM_ITRx_SetConfig>
      break;
 800aab4:	e01c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac2:	461a      	mov	r2, r3
 800aac4:	f000 fbc2 	bl	800b24c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2140      	movs	r1, #64	; 0x40
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fc1c 	bl	800b30c <TIM_ITRx_SetConfig>
      break;
 800aad4:	e00c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f000 fc13 	bl	800b30c <TIM_ITRx_SetConfig>
      break;
 800aae6:	e003      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
      break;
 800aaec:	e000      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aaee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	ffceff88 	.word	0xffceff88
 800ab10:	00100040 	.word	0x00100040
 800ab14:	00100030 	.word	0x00100030
 800ab18:	00100020 	.word	0x00100020

0800ab1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a40      	ldr	r2, [pc, #256]	; (800ac80 <TIM_Base_SetConfig+0x114>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d013      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8a:	d00f      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a3d      	ldr	r2, [pc, #244]	; (800ac84 <TIM_Base_SetConfig+0x118>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d00b      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a3c      	ldr	r2, [pc, #240]	; (800ac88 <TIM_Base_SetConfig+0x11c>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d007      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a3b      	ldr	r2, [pc, #236]	; (800ac8c <TIM_Base_SetConfig+0x120>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d003      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a3a      	ldr	r2, [pc, #232]	; (800ac90 <TIM_Base_SetConfig+0x124>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d108      	bne.n	800abbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a2f      	ldr	r2, [pc, #188]	; (800ac80 <TIM_Base_SetConfig+0x114>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d01f      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abcc:	d01b      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a2c      	ldr	r2, [pc, #176]	; (800ac84 <TIM_Base_SetConfig+0x118>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d017      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a2b      	ldr	r2, [pc, #172]	; (800ac88 <TIM_Base_SetConfig+0x11c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d013      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a2a      	ldr	r2, [pc, #168]	; (800ac8c <TIM_Base_SetConfig+0x120>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d00f      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a29      	ldr	r2, [pc, #164]	; (800ac90 <TIM_Base_SetConfig+0x124>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d00b      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a28      	ldr	r2, [pc, #160]	; (800ac94 <TIM_Base_SetConfig+0x128>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d007      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a27      	ldr	r2, [pc, #156]	; (800ac98 <TIM_Base_SetConfig+0x12c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d003      	beq.n	800ac06 <TIM_Base_SetConfig+0x9a>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a26      	ldr	r2, [pc, #152]	; (800ac9c <TIM_Base_SetConfig+0x130>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d108      	bne.n	800ac18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <TIM_Base_SetConfig+0x114>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d00f      	beq.n	800ac64 <TIM_Base_SetConfig+0xf8>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a12      	ldr	r2, [pc, #72]	; (800ac90 <TIM_Base_SetConfig+0x124>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d00b      	beq.n	800ac64 <TIM_Base_SetConfig+0xf8>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a11      	ldr	r2, [pc, #68]	; (800ac94 <TIM_Base_SetConfig+0x128>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d007      	beq.n	800ac64 <TIM_Base_SetConfig+0xf8>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a10      	ldr	r2, [pc, #64]	; (800ac98 <TIM_Base_SetConfig+0x12c>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d003      	beq.n	800ac64 <TIM_Base_SetConfig+0xf8>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a0f      	ldr	r2, [pc, #60]	; (800ac9c <TIM_Base_SetConfig+0x130>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d103      	bne.n	800ac6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	691a      	ldr	r2, [r3, #16]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	615a      	str	r2, [r3, #20]
}
 800ac72:	bf00      	nop
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	40010000 	.word	0x40010000
 800ac84:	40000400 	.word	0x40000400
 800ac88:	40000800 	.word	0x40000800
 800ac8c:	40000c00 	.word	0x40000c00
 800ac90:	40010400 	.word	0x40010400
 800ac94:	40014000 	.word	0x40014000
 800ac98:	40014400 	.word	0x40014400
 800ac9c:	40014800 	.word	0x40014800

0800aca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	f023 0201 	bic.w	r2, r3, #1
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4b37      	ldr	r3, [pc, #220]	; (800ada8 <TIM_OC1_SetConfig+0x108>)
 800accc:	4013      	ands	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0303 	bic.w	r3, r3, #3
 800acd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f023 0302 	bic.w	r3, r3, #2
 800ace8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a2d      	ldr	r2, [pc, #180]	; (800adac <TIM_OC1_SetConfig+0x10c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00f      	beq.n	800ad1c <TIM_OC1_SetConfig+0x7c>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a2c      	ldr	r2, [pc, #176]	; (800adb0 <TIM_OC1_SetConfig+0x110>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d00b      	beq.n	800ad1c <TIM_OC1_SetConfig+0x7c>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a2b      	ldr	r2, [pc, #172]	; (800adb4 <TIM_OC1_SetConfig+0x114>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d007      	beq.n	800ad1c <TIM_OC1_SetConfig+0x7c>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a2a      	ldr	r2, [pc, #168]	; (800adb8 <TIM_OC1_SetConfig+0x118>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d003      	beq.n	800ad1c <TIM_OC1_SetConfig+0x7c>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a29      	ldr	r2, [pc, #164]	; (800adbc <TIM_OC1_SetConfig+0x11c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d10c      	bne.n	800ad36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f023 0308 	bic.w	r3, r3, #8
 800ad22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f023 0304 	bic.w	r3, r3, #4
 800ad34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a1c      	ldr	r2, [pc, #112]	; (800adac <TIM_OC1_SetConfig+0x10c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00f      	beq.n	800ad5e <TIM_OC1_SetConfig+0xbe>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a1b      	ldr	r2, [pc, #108]	; (800adb0 <TIM_OC1_SetConfig+0x110>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00b      	beq.n	800ad5e <TIM_OC1_SetConfig+0xbe>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a1a      	ldr	r2, [pc, #104]	; (800adb4 <TIM_OC1_SetConfig+0x114>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d007      	beq.n	800ad5e <TIM_OC1_SetConfig+0xbe>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a19      	ldr	r2, [pc, #100]	; (800adb8 <TIM_OC1_SetConfig+0x118>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d003      	beq.n	800ad5e <TIM_OC1_SetConfig+0xbe>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a18      	ldr	r2, [pc, #96]	; (800adbc <TIM_OC1_SetConfig+0x11c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d111      	bne.n	800ad82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	621a      	str	r2, [r3, #32]
}
 800ad9c:	bf00      	nop
 800ad9e:	371c      	adds	r7, #28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	fffeff8f 	.word	0xfffeff8f
 800adac:	40010000 	.word	0x40010000
 800adb0:	40010400 	.word	0x40010400
 800adb4:	40014000 	.word	0x40014000
 800adb8:	40014400 	.word	0x40014400
 800adbc:	40014800 	.word	0x40014800

0800adc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	f023 0210 	bic.w	r2, r3, #16
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	4b34      	ldr	r3, [pc, #208]	; (800aebc <TIM_OC2_SetConfig+0xfc>)
 800adec:	4013      	ands	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	021b      	lsls	r3, r3, #8
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f023 0320 	bic.w	r3, r3, #32
 800ae0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	011b      	lsls	r3, r3, #4
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a29      	ldr	r2, [pc, #164]	; (800aec0 <TIM_OC2_SetConfig+0x100>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d003      	beq.n	800ae28 <TIM_OC2_SetConfig+0x68>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a28      	ldr	r2, [pc, #160]	; (800aec4 <TIM_OC2_SetConfig+0x104>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d10d      	bne.n	800ae44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a1e      	ldr	r2, [pc, #120]	; (800aec0 <TIM_OC2_SetConfig+0x100>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00f      	beq.n	800ae6c <TIM_OC2_SetConfig+0xac>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a1d      	ldr	r2, [pc, #116]	; (800aec4 <TIM_OC2_SetConfig+0x104>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d00b      	beq.n	800ae6c <TIM_OC2_SetConfig+0xac>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a1c      	ldr	r2, [pc, #112]	; (800aec8 <TIM_OC2_SetConfig+0x108>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d007      	beq.n	800ae6c <TIM_OC2_SetConfig+0xac>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a1b      	ldr	r2, [pc, #108]	; (800aecc <TIM_OC2_SetConfig+0x10c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d003      	beq.n	800ae6c <TIM_OC2_SetConfig+0xac>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a1a      	ldr	r2, [pc, #104]	; (800aed0 <TIM_OC2_SetConfig+0x110>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d113      	bne.n	800ae94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	621a      	str	r2, [r3, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	feff8fff 	.word	0xfeff8fff
 800aec0:	40010000 	.word	0x40010000
 800aec4:	40010400 	.word	0x40010400
 800aec8:	40014000 	.word	0x40014000
 800aecc:	40014400 	.word	0x40014400
 800aed0:	40014800 	.word	0x40014800

0800aed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4b33      	ldr	r3, [pc, #204]	; (800afcc <TIM_OC3_SetConfig+0xf8>)
 800af00:	4013      	ands	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	021b      	lsls	r3, r3, #8
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a28      	ldr	r2, [pc, #160]	; (800afd0 <TIM_OC3_SetConfig+0xfc>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d003      	beq.n	800af3a <TIM_OC3_SetConfig+0x66>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a27      	ldr	r2, [pc, #156]	; (800afd4 <TIM_OC3_SetConfig+0x100>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d10d      	bne.n	800af56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a1d      	ldr	r2, [pc, #116]	; (800afd0 <TIM_OC3_SetConfig+0xfc>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d00f      	beq.n	800af7e <TIM_OC3_SetConfig+0xaa>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a1c      	ldr	r2, [pc, #112]	; (800afd4 <TIM_OC3_SetConfig+0x100>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d00b      	beq.n	800af7e <TIM_OC3_SetConfig+0xaa>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a1b      	ldr	r2, [pc, #108]	; (800afd8 <TIM_OC3_SetConfig+0x104>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d007      	beq.n	800af7e <TIM_OC3_SetConfig+0xaa>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a1a      	ldr	r2, [pc, #104]	; (800afdc <TIM_OC3_SetConfig+0x108>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d003      	beq.n	800af7e <TIM_OC3_SetConfig+0xaa>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a19      	ldr	r2, [pc, #100]	; (800afe0 <TIM_OC3_SetConfig+0x10c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d113      	bne.n	800afa6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	4313      	orrs	r3, r2
 800af98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	621a      	str	r2, [r3, #32]
}
 800afc0:	bf00      	nop
 800afc2:	371c      	adds	r7, #28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	fffeff8f 	.word	0xfffeff8f
 800afd0:	40010000 	.word	0x40010000
 800afd4:	40010400 	.word	0x40010400
 800afd8:	40014000 	.word	0x40014000
 800afdc:	40014400 	.word	0x40014400
 800afe0:	40014800 	.word	0x40014800

0800afe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4b24      	ldr	r3, [pc, #144]	; (800b0a0 <TIM_OC4_SetConfig+0xbc>)
 800b010:	4013      	ands	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	4313      	orrs	r3, r2
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b02e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	031b      	lsls	r3, r3, #12
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	4313      	orrs	r3, r2
 800b03a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a19      	ldr	r2, [pc, #100]	; (800b0a4 <TIM_OC4_SetConfig+0xc0>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d00f      	beq.n	800b064 <TIM_OC4_SetConfig+0x80>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a18      	ldr	r2, [pc, #96]	; (800b0a8 <TIM_OC4_SetConfig+0xc4>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d00b      	beq.n	800b064 <TIM_OC4_SetConfig+0x80>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a17      	ldr	r2, [pc, #92]	; (800b0ac <TIM_OC4_SetConfig+0xc8>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d007      	beq.n	800b064 <TIM_OC4_SetConfig+0x80>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a16      	ldr	r2, [pc, #88]	; (800b0b0 <TIM_OC4_SetConfig+0xcc>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d003      	beq.n	800b064 <TIM_OC4_SetConfig+0x80>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a15      	ldr	r2, [pc, #84]	; (800b0b4 <TIM_OC4_SetConfig+0xd0>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d109      	bne.n	800b078 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b06a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	019b      	lsls	r3, r3, #6
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	4313      	orrs	r3, r2
 800b076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	621a      	str	r2, [r3, #32]
}
 800b092:	bf00      	nop
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	feff8fff 	.word	0xfeff8fff
 800b0a4:	40010000 	.word	0x40010000
 800b0a8:	40010400 	.word	0x40010400
 800b0ac:	40014000 	.word	0x40014000
 800b0b0:	40014400 	.word	0x40014400
 800b0b4:	40014800 	.word	0x40014800

0800b0b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4b21      	ldr	r3, [pc, #132]	; (800b168 <TIM_OC5_SetConfig+0xb0>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b0f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a18      	ldr	r2, [pc, #96]	; (800b16c <TIM_OC5_SetConfig+0xb4>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d00f      	beq.n	800b12e <TIM_OC5_SetConfig+0x76>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a17      	ldr	r2, [pc, #92]	; (800b170 <TIM_OC5_SetConfig+0xb8>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d00b      	beq.n	800b12e <TIM_OC5_SetConfig+0x76>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a16      	ldr	r2, [pc, #88]	; (800b174 <TIM_OC5_SetConfig+0xbc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d007      	beq.n	800b12e <TIM_OC5_SetConfig+0x76>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a15      	ldr	r2, [pc, #84]	; (800b178 <TIM_OC5_SetConfig+0xc0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d003      	beq.n	800b12e <TIM_OC5_SetConfig+0x76>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a14      	ldr	r2, [pc, #80]	; (800b17c <TIM_OC5_SetConfig+0xc4>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d109      	bne.n	800b142 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	4313      	orrs	r3, r2
 800b140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	621a      	str	r2, [r3, #32]
}
 800b15c:	bf00      	nop
 800b15e:	371c      	adds	r7, #28
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	fffeff8f 	.word	0xfffeff8f
 800b16c:	40010000 	.word	0x40010000
 800b170:	40010400 	.word	0x40010400
 800b174:	40014000 	.word	0x40014000
 800b178:	40014400 	.word	0x40014400
 800b17c:	40014800 	.word	0x40014800

0800b180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	4b22      	ldr	r3, [pc, #136]	; (800b234 <TIM_OC6_SetConfig+0xb4>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	051b      	lsls	r3, r3, #20
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a19      	ldr	r2, [pc, #100]	; (800b238 <TIM_OC6_SetConfig+0xb8>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00f      	beq.n	800b1f8 <TIM_OC6_SetConfig+0x78>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a18      	ldr	r2, [pc, #96]	; (800b23c <TIM_OC6_SetConfig+0xbc>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d00b      	beq.n	800b1f8 <TIM_OC6_SetConfig+0x78>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a17      	ldr	r2, [pc, #92]	; (800b240 <TIM_OC6_SetConfig+0xc0>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d007      	beq.n	800b1f8 <TIM_OC6_SetConfig+0x78>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a16      	ldr	r2, [pc, #88]	; (800b244 <TIM_OC6_SetConfig+0xc4>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_OC6_SetConfig+0x78>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a15      	ldr	r2, [pc, #84]	; (800b248 <TIM_OC6_SetConfig+0xc8>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d109      	bne.n	800b20c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	029b      	lsls	r3, r3, #10
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	4313      	orrs	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	621a      	str	r2, [r3, #32]
}
 800b226:	bf00      	nop
 800b228:	371c      	adds	r7, #28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	feff8fff 	.word	0xfeff8fff
 800b238:	40010000 	.word	0x40010000
 800b23c:	40010400 	.word	0x40010400
 800b240:	40014000 	.word	0x40014000
 800b244:	40014400 	.word	0x40014400
 800b248:	40014800 	.word	0x40014800

0800b24c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	f023 0201 	bic.w	r2, r3, #1
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	011b      	lsls	r3, r3, #4
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	4313      	orrs	r3, r2
 800b280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f023 030a 	bic.w	r3, r3, #10
 800b288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	4313      	orrs	r3, r2
 800b290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	621a      	str	r2, [r3, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	371c      	adds	r7, #28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b087      	sub	sp, #28
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	f023 0210 	bic.w	r2, r3, #16
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	031b      	lsls	r3, r3, #12
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	011b      	lsls	r3, r3, #4
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	621a      	str	r2, [r3, #32]
}
 800b2fe:	bf00      	nop
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
	...

0800b30c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <TIM_ITRx_SetConfig+0x38>)
 800b320:	4013      	ands	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4313      	orrs	r3, r2
 800b32a:	f043 0307 	orr.w	r3, r3, #7
 800b32e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	609a      	str	r2, [r3, #8]
}
 800b336:	bf00      	nop
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	ffcfff8f 	.word	0xffcfff8f

0800b348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	021a      	lsls	r2, r3, #8
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	431a      	orrs	r2, r3
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	4313      	orrs	r3, r2
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	4313      	orrs	r3, r2
 800b374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	609a      	str	r2, [r3, #8]
}
 800b37c:	bf00      	nop
 800b37e:	371c      	adds	r7, #28
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e06d      	b.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a30      	ldr	r2, [pc, #192]	; (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d004      	beq.n	800b3d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a2f      	ldr	r2, [pc, #188]	; (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d108      	bne.n	800b3e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a20      	ldr	r2, [pc, #128]	; (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d022      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b412:	d01d      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a1d      	ldr	r2, [pc, #116]	; (800b490 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d018      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a1c      	ldr	r2, [pc, #112]	; (800b494 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d013      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1a      	ldr	r2, [pc, #104]	; (800b498 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d00e      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a15      	ldr	r2, [pc, #84]	; (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d009      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a16      	ldr	r2, [pc, #88]	; (800b49c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d004      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a15      	ldr	r2, [pc, #84]	; (800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d10c      	bne.n	800b46a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	40010000 	.word	0x40010000
 800b48c:	40010400 	.word	0x40010400
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	40001800 	.word	0x40001800
 800b4a0:	40014000 	.word	0x40014000

0800b4a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e042      	b.n	800b578 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d106      	bne.n	800b50a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7f6 fb6d 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2224      	movs	r2, #36	; 0x24
 800b50e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 0201 	bic.w	r2, r2, #1
 800b520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fc94 	bl	800be50 <UART_SetConfig>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d101      	bne.n	800b532 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e022      	b.n	800b578 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 f9f0 	bl	800c920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b54e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	689a      	ldr	r2, [r3, #8]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b55e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0201 	orr.w	r2, r2, #1
 800b56e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f001 fa77 	bl	800ca64 <UART_CheckIdleState>
 800b576:	4603      	mov	r3, r0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af02      	add	r7, sp, #8
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b596:	2b20      	cmp	r3, #32
 800b598:	d17b      	bne.n	800b692 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <HAL_UART_Transmit+0x26>
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e074      	b.n	800b694 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2221      	movs	r2, #33	; 0x21
 800b5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5ba:	f7f6 fe5f 	bl	800227c <HAL_GetTick>
 800b5be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	88fa      	ldrh	r2, [r7, #6]
 800b5c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	88fa      	ldrh	r2, [r7, #6]
 800b5cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d8:	d108      	bne.n	800b5ec <HAL_UART_Transmit+0x6c>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d104      	bne.n	800b5ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	61bb      	str	r3, [r7, #24]
 800b5ea:	e003      	b.n	800b5f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b5f4:	e030      	b.n	800b658 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2180      	movs	r1, #128	; 0x80
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f001 fad9 	bl	800cbb8 <UART_WaitOnFlagUntilTimeout>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d005      	beq.n	800b618 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e03d      	b.n	800b694 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10b      	bne.n	800b636 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b62c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	3302      	adds	r3, #2
 800b632:	61bb      	str	r3, [r7, #24]
 800b634:	e007      	b.n	800b646 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	781a      	ldrb	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	3301      	adds	r3, #1
 800b644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1c8      	bne.n	800b5f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	2200      	movs	r2, #0
 800b66c:	2140      	movs	r1, #64	; 0x40
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f001 faa2 	bl	800cbb8 <UART_WaitOnFlagUntilTimeout>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d005      	beq.n	800b686 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e006      	b.n	800b694 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2220      	movs	r2, #32
 800b68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	e000      	b.n	800b694 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b692:	2302      	movs	r3, #2
  }
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b0ba      	sub	sp, #232	; 0xe8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b6c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b6d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11b      	bne.n	800b710 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d015      	beq.n	800b710 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e8:	f003 0320 	and.w	r3, r3, #32
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d105      	bne.n	800b6fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d009      	beq.n	800b710 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 8377 	beq.w	800bdf4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
      }
      return;
 800b70e:	e371      	b.n	800bdf4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 8123 	beq.w	800b960 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b71a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b71e:	4b8d      	ldr	r3, [pc, #564]	; (800b954 <HAL_UART_IRQHandler+0x2b8>)
 800b720:	4013      	ands	r3, r2
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b72a:	4b8b      	ldr	r3, [pc, #556]	; (800b958 <HAL_UART_IRQHandler+0x2bc>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 8116 	beq.w	800b960 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d011      	beq.n	800b764 <HAL_UART_IRQHandler+0xc8>
 800b740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00b      	beq.n	800b764 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2201      	movs	r2, #1
 800b752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b75a:	f043 0201 	orr.w	r2, r3, #1
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b768:	f003 0302 	and.w	r3, r3, #2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d011      	beq.n	800b794 <HAL_UART_IRQHandler+0xf8>
 800b770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2202      	movs	r2, #2
 800b782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b78a:	f043 0204 	orr.w	r2, r3, #4
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b798:	f003 0304 	and.w	r3, r3, #4
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d011      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x128>
 800b7a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00b      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2204      	movs	r2, #4
 800b7b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ba:	f043 0202 	orr.w	r2, r3, #2
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c8:	f003 0308 	and.w	r3, r3, #8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d017      	beq.n	800b800 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d105      	bne.n	800b7e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b7dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b7e0:	4b5c      	ldr	r3, [pc, #368]	; (800b954 <HAL_UART_IRQHandler+0x2b8>)
 800b7e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00b      	beq.n	800b800 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2208      	movs	r2, #8
 800b7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f6:	f043 0208 	orr.w	r2, r3, #8
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d012      	beq.n	800b832 <HAL_UART_IRQHandler+0x196>
 800b80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00c      	beq.n	800b832 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b828:	f043 0220 	orr.w	r2, r3, #32
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 82dd 	beq.w	800bdf8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b842:	f003 0320 	and.w	r3, r3, #32
 800b846:	2b00      	cmp	r3, #0
 800b848:	d013      	beq.n	800b872 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b00      	cmp	r3, #0
 800b854:	d105      	bne.n	800b862 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b85a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d007      	beq.n	800b872 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b886:	2b40      	cmp	r3, #64	; 0x40
 800b888:	d005      	beq.n	800b896 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b88a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b88e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b892:	2b00      	cmp	r3, #0
 800b894:	d054      	beq.n	800b940 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 f9f6 	bl	800cc88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a6:	2b40      	cmp	r3, #64	; 0x40
 800b8a8:	d146      	bne.n	800b938 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b8c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b8e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1d9      	bne.n	800b8aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d017      	beq.n	800b930 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b906:	4a15      	ldr	r2, [pc, #84]	; (800b95c <HAL_UART_IRQHandler+0x2c0>)
 800b908:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b910:	4618      	mov	r0, r3
 800b912:	f7f8 ff83 	bl	800481c <HAL_DMA_Abort_IT>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d019      	beq.n	800b950 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b92a:	4610      	mov	r0, r2
 800b92c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b92e:	e00f      	b.n	800b950 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fa77 	bl	800be24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b936:	e00b      	b.n	800b950 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fa73 	bl	800be24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b93e:	e007      	b.n	800b950 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fa6f 	bl	800be24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b94e:	e253      	b.n	800bdf8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b950:	bf00      	nop
    return;
 800b952:	e251      	b.n	800bdf8 <HAL_UART_IRQHandler+0x75c>
 800b954:	10000001 	.word	0x10000001
 800b958:	04000120 	.word	0x04000120
 800b95c:	0800cd55 	.word	0x0800cd55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b964:	2b01      	cmp	r3, #1
 800b966:	f040 81e7 	bne.w	800bd38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b96e:	f003 0310 	and.w	r3, r3, #16
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 81e0 	beq.w	800bd38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b97c:	f003 0310 	and.w	r3, r3, #16
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 81d9 	beq.w	800bd38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2210      	movs	r2, #16
 800b98c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	2b40      	cmp	r3, #64	; 0x40
 800b99a:	f040 8151 	bne.w	800bc40 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a96      	ldr	r2, [pc, #600]	; (800bc00 <HAL_UART_IRQHandler+0x564>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d068      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a93      	ldr	r2, [pc, #588]	; (800bc04 <HAL_UART_IRQHandler+0x568>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d061      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a91      	ldr	r2, [pc, #580]	; (800bc08 <HAL_UART_IRQHandler+0x56c>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d05a      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a8e      	ldr	r2, [pc, #568]	; (800bc0c <HAL_UART_IRQHandler+0x570>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d053      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a8c      	ldr	r2, [pc, #560]	; (800bc10 <HAL_UART_IRQHandler+0x574>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d04c      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a89      	ldr	r2, [pc, #548]	; (800bc14 <HAL_UART_IRQHandler+0x578>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d045      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a87      	ldr	r2, [pc, #540]	; (800bc18 <HAL_UART_IRQHandler+0x57c>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d03e      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a84      	ldr	r2, [pc, #528]	; (800bc1c <HAL_UART_IRQHandler+0x580>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d037      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a82      	ldr	r2, [pc, #520]	; (800bc20 <HAL_UART_IRQHandler+0x584>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d030      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a7f      	ldr	r2, [pc, #508]	; (800bc24 <HAL_UART_IRQHandler+0x588>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d029      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a7d      	ldr	r2, [pc, #500]	; (800bc28 <HAL_UART_IRQHandler+0x58c>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d022      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a7a      	ldr	r2, [pc, #488]	; (800bc2c <HAL_UART_IRQHandler+0x590>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d01b      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a78      	ldr	r2, [pc, #480]	; (800bc30 <HAL_UART_IRQHandler+0x594>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d014      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a75      	ldr	r2, [pc, #468]	; (800bc34 <HAL_UART_IRQHandler+0x598>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d00d      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a73      	ldr	r2, [pc, #460]	; (800bc38 <HAL_UART_IRQHandler+0x59c>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d006      	beq.n	800ba7e <HAL_UART_IRQHandler+0x3e2>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a70      	ldr	r2, [pc, #448]	; (800bc3c <HAL_UART_IRQHandler+0x5a0>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d106      	bne.n	800ba8c <HAL_UART_IRQHandler+0x3f0>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	e005      	b.n	800ba98 <HAL_UART_IRQHandler+0x3fc>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 81ab 	beq.w	800bdfc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800baac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bab0:	429a      	cmp	r2, r3
 800bab2:	f080 81a3 	bcs.w	800bdfc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800babc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bacc:	f000 8087 	beq.w	800bbde <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	461a      	mov	r2, r3
 800baf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bafa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bafe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb0a:	e841 2300 	strex	r3, r2, [r1]
 800bb0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1da      	bne.n	800bad0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb2c:	f023 0301 	bic.w	r3, r3, #1
 800bb30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3308      	adds	r3, #8
 800bb3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb4a:	e841 2300 	strex	r3, r2, [r1]
 800bb4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1e1      	bne.n	800bb1a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb60:	e853 3f00 	ldrex	r3, [r3]
 800bb64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3308      	adds	r3, #8
 800bb76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb82:	e841 2300 	strex	r3, r2, [r1]
 800bb86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e3      	bne.n	800bb56 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba4:	e853 3f00 	ldrex	r3, [r3]
 800bba8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbac:	f023 0310 	bic.w	r3, r3, #16
 800bbb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bbbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbc6:	e841 2300 	strex	r3, r2, [r1]
 800bbca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1e4      	bne.n	800bb9c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f8 fb01 	bl	80041e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f91d 	bl	800be38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbfe:	e0fd      	b.n	800bdfc <HAL_UART_IRQHandler+0x760>
 800bc00:	40020010 	.word	0x40020010
 800bc04:	40020028 	.word	0x40020028
 800bc08:	40020040 	.word	0x40020040
 800bc0c:	40020058 	.word	0x40020058
 800bc10:	40020070 	.word	0x40020070
 800bc14:	40020088 	.word	0x40020088
 800bc18:	400200a0 	.word	0x400200a0
 800bc1c:	400200b8 	.word	0x400200b8
 800bc20:	40020410 	.word	0x40020410
 800bc24:	40020428 	.word	0x40020428
 800bc28:	40020440 	.word	0x40020440
 800bc2c:	40020458 	.word	0x40020458
 800bc30:	40020470 	.word	0x40020470
 800bc34:	40020488 	.word	0x40020488
 800bc38:	400204a0 	.word	0x400204a0
 800bc3c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 80cf 	beq.w	800be00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bc62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80ca 	beq.w	800be00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	e853 3f00 	ldrex	r3, [r3]
 800bc78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc8e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc96:	e841 2300 	strex	r3, r2, [r1]
 800bc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1e4      	bne.n	800bc6c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3308      	adds	r3, #8
 800bca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcb2:	6a3a      	ldr	r2, [r7, #32]
 800bcb4:	4b55      	ldr	r3, [pc, #340]	; (800be0c <HAL_UART_IRQHandler+0x770>)
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bcc6:	633a      	str	r2, [r7, #48]	; 0x30
 800bcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcce:	e841 2300 	strex	r3, r2, [r1]
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1e3      	bne.n	800bca2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2220      	movs	r2, #32
 800bcde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	e853 3f00 	ldrex	r3, [r3]
 800bcfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f023 0310 	bic.w	r3, r3, #16
 800bd02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd14:	69b9      	ldr	r1, [r7, #24]
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	e841 2300 	strex	r3, r2, [r1]
 800bd1c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e4      	bne.n	800bcee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f881 	bl	800be38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd36:	e063      	b.n	800be00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00e      	beq.n	800bd62 <HAL_UART_IRQHandler+0x6c6>
 800bd44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d008      	beq.n	800bd62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 f83b 	bl	800cdd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd60:	e051      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d014      	beq.n	800bd98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d105      	bne.n	800bd86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d008      	beq.n	800bd98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d03a      	beq.n	800be04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
    }
    return;
 800bd96:	e035      	b.n	800be04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d009      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x71c>
 800bda4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 ffe5 	bl	800cd80 <UART_EndTransmit_IT>
    return;
 800bdb6:	e026      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d009      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x73c>
 800bdc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d003      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 f814 	bl	800cdfe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdd6:	e016      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d010      	beq.n	800be06 <HAL_UART_IRQHandler+0x76a>
 800bde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	da0c      	bge.n	800be06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fffc 	bl	800cdea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdf2:	e008      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
      return;
 800bdf4:	bf00      	nop
 800bdf6:	e006      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
    return;
 800bdf8:	bf00      	nop
 800bdfa:	e004      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
      return;
 800bdfc:	bf00      	nop
 800bdfe:	e002      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
      return;
 800be00:	bf00      	nop
 800be02:	e000      	b.n	800be06 <HAL_UART_IRQHandler+0x76a>
    return;
 800be04:	bf00      	nop
  }
}
 800be06:	37e8      	adds	r7, #232	; 0xe8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	effffffe 	.word	0xeffffffe

0800be10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be2c:	bf00      	nop
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be54:	b092      	sub	sp, #72	; 0x48
 800be56:	af00      	add	r7, sp, #0
 800be58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	431a      	orrs	r2, r3
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	431a      	orrs	r2, r3
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	69db      	ldr	r3, [r3, #28]
 800be74:	4313      	orrs	r3, r2
 800be76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	4bbe      	ldr	r3, [pc, #760]	; (800c178 <UART_SetConfig+0x328>)
 800be80:	4013      	ands	r3, r2
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be88:	430b      	orrs	r3, r1
 800be8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	68da      	ldr	r2, [r3, #12]
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4ab3      	ldr	r2, [pc, #716]	; (800c17c <UART_SetConfig+0x32c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d004      	beq.n	800bebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb8:	4313      	orrs	r3, r2
 800beba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	4baf      	ldr	r3, [pc, #700]	; (800c180 <UART_SetConfig+0x330>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800becc:	430b      	orrs	r3, r1
 800bece:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	f023 010f 	bic.w	r1, r3, #15
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4aa6      	ldr	r2, [pc, #664]	; (800c184 <UART_SetConfig+0x334>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d177      	bne.n	800bfe0 <UART_SetConfig+0x190>
 800bef0:	4ba5      	ldr	r3, [pc, #660]	; (800c188 <UART_SetConfig+0x338>)
 800bef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bef8:	2b28      	cmp	r3, #40	; 0x28
 800befa:	d86d      	bhi.n	800bfd8 <UART_SetConfig+0x188>
 800befc:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <UART_SetConfig+0xb4>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bfa9 	.word	0x0800bfa9
 800bf08:	0800bfd9 	.word	0x0800bfd9
 800bf0c:	0800bfd9 	.word	0x0800bfd9
 800bf10:	0800bfd9 	.word	0x0800bfd9
 800bf14:	0800bfd9 	.word	0x0800bfd9
 800bf18:	0800bfd9 	.word	0x0800bfd9
 800bf1c:	0800bfd9 	.word	0x0800bfd9
 800bf20:	0800bfd9 	.word	0x0800bfd9
 800bf24:	0800bfb1 	.word	0x0800bfb1
 800bf28:	0800bfd9 	.word	0x0800bfd9
 800bf2c:	0800bfd9 	.word	0x0800bfd9
 800bf30:	0800bfd9 	.word	0x0800bfd9
 800bf34:	0800bfd9 	.word	0x0800bfd9
 800bf38:	0800bfd9 	.word	0x0800bfd9
 800bf3c:	0800bfd9 	.word	0x0800bfd9
 800bf40:	0800bfd9 	.word	0x0800bfd9
 800bf44:	0800bfb9 	.word	0x0800bfb9
 800bf48:	0800bfd9 	.word	0x0800bfd9
 800bf4c:	0800bfd9 	.word	0x0800bfd9
 800bf50:	0800bfd9 	.word	0x0800bfd9
 800bf54:	0800bfd9 	.word	0x0800bfd9
 800bf58:	0800bfd9 	.word	0x0800bfd9
 800bf5c:	0800bfd9 	.word	0x0800bfd9
 800bf60:	0800bfd9 	.word	0x0800bfd9
 800bf64:	0800bfc1 	.word	0x0800bfc1
 800bf68:	0800bfd9 	.word	0x0800bfd9
 800bf6c:	0800bfd9 	.word	0x0800bfd9
 800bf70:	0800bfd9 	.word	0x0800bfd9
 800bf74:	0800bfd9 	.word	0x0800bfd9
 800bf78:	0800bfd9 	.word	0x0800bfd9
 800bf7c:	0800bfd9 	.word	0x0800bfd9
 800bf80:	0800bfd9 	.word	0x0800bfd9
 800bf84:	0800bfc9 	.word	0x0800bfc9
 800bf88:	0800bfd9 	.word	0x0800bfd9
 800bf8c:	0800bfd9 	.word	0x0800bfd9
 800bf90:	0800bfd9 	.word	0x0800bfd9
 800bf94:	0800bfd9 	.word	0x0800bfd9
 800bf98:	0800bfd9 	.word	0x0800bfd9
 800bf9c:	0800bfd9 	.word	0x0800bfd9
 800bfa0:	0800bfd9 	.word	0x0800bfd9
 800bfa4:	0800bfd1 	.word	0x0800bfd1
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e222      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfb0:	2304      	movs	r3, #4
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e21e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfb8:	2308      	movs	r3, #8
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e21a      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfc0:	2310      	movs	r3, #16
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e216      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfc8:	2320      	movs	r3, #32
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfce:	e212      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfd0:	2340      	movs	r3, #64	; 0x40
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd6:	e20e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfd8:	2380      	movs	r3, #128	; 0x80
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfde:	e20a      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a69      	ldr	r2, [pc, #420]	; (800c18c <UART_SetConfig+0x33c>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d130      	bne.n	800c04c <UART_SetConfig+0x1fc>
 800bfea:	4b67      	ldr	r3, [pc, #412]	; (800c188 <UART_SetConfig+0x338>)
 800bfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfee:	f003 0307 	and.w	r3, r3, #7
 800bff2:	2b05      	cmp	r3, #5
 800bff4:	d826      	bhi.n	800c044 <UART_SetConfig+0x1f4>
 800bff6:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <UART_SetConfig+0x1ac>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c015 	.word	0x0800c015
 800c000:	0800c01d 	.word	0x0800c01d
 800c004:	0800c025 	.word	0x0800c025
 800c008:	0800c02d 	.word	0x0800c02d
 800c00c:	0800c035 	.word	0x0800c035
 800c010:	0800c03d 	.word	0x0800c03d
 800c014:	2300      	movs	r3, #0
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e1ec      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c01c:	2304      	movs	r3, #4
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e1e8      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c024:	2308      	movs	r3, #8
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02a:	e1e4      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c02c:	2310      	movs	r3, #16
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c032:	e1e0      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c034:	2320      	movs	r3, #32
 800c036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03a:	e1dc      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c03c:	2340      	movs	r3, #64	; 0x40
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c042:	e1d8      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c044:	2380      	movs	r3, #128	; 0x80
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04a:	e1d4      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a4f      	ldr	r2, [pc, #316]	; (800c190 <UART_SetConfig+0x340>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d130      	bne.n	800c0b8 <UART_SetConfig+0x268>
 800c056:	4b4c      	ldr	r3, [pc, #304]	; (800c188 <UART_SetConfig+0x338>)
 800c058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	2b05      	cmp	r3, #5
 800c060:	d826      	bhi.n	800c0b0 <UART_SetConfig+0x260>
 800c062:	a201      	add	r2, pc, #4	; (adr r2, 800c068 <UART_SetConfig+0x218>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c081 	.word	0x0800c081
 800c06c:	0800c089 	.word	0x0800c089
 800c070:	0800c091 	.word	0x0800c091
 800c074:	0800c099 	.word	0x0800c099
 800c078:	0800c0a1 	.word	0x0800c0a1
 800c07c:	0800c0a9 	.word	0x0800c0a9
 800c080:	2300      	movs	r3, #0
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c086:	e1b6      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c088:	2304      	movs	r3, #4
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08e:	e1b2      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c090:	2308      	movs	r3, #8
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c096:	e1ae      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c098:	2310      	movs	r3, #16
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c09e:	e1aa      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c0a0:	2320      	movs	r3, #32
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0a6:	e1a6      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c0a8:	2340      	movs	r3, #64	; 0x40
 800c0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ae:	e1a2      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c0b0:	2380      	movs	r3, #128	; 0x80
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b6:	e19e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a35      	ldr	r2, [pc, #212]	; (800c194 <UART_SetConfig+0x344>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d130      	bne.n	800c124 <UART_SetConfig+0x2d4>
 800c0c2:	4b31      	ldr	r3, [pc, #196]	; (800c188 <UART_SetConfig+0x338>)
 800c0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0c6:	f003 0307 	and.w	r3, r3, #7
 800c0ca:	2b05      	cmp	r3, #5
 800c0cc:	d826      	bhi.n	800c11c <UART_SetConfig+0x2cc>
 800c0ce:	a201      	add	r2, pc, #4	; (adr r2, 800c0d4 <UART_SetConfig+0x284>)
 800c0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d4:	0800c0ed 	.word	0x0800c0ed
 800c0d8:	0800c0f5 	.word	0x0800c0f5
 800c0dc:	0800c0fd 	.word	0x0800c0fd
 800c0e0:	0800c105 	.word	0x0800c105
 800c0e4:	0800c10d 	.word	0x0800c10d
 800c0e8:	0800c115 	.word	0x0800c115
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f2:	e180      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c0f4:	2304      	movs	r3, #4
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fa:	e17c      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c0fc:	2308      	movs	r3, #8
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c102:	e178      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c104:	2310      	movs	r3, #16
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10a:	e174      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c10c:	2320      	movs	r3, #32
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c112:	e170      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c114:	2340      	movs	r3, #64	; 0x40
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e16c      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c11c:	2380      	movs	r3, #128	; 0x80
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e168      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a1b      	ldr	r2, [pc, #108]	; (800c198 <UART_SetConfig+0x348>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d142      	bne.n	800c1b4 <UART_SetConfig+0x364>
 800c12e:	4b16      	ldr	r3, [pc, #88]	; (800c188 <UART_SetConfig+0x338>)
 800c130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c132:	f003 0307 	and.w	r3, r3, #7
 800c136:	2b05      	cmp	r3, #5
 800c138:	d838      	bhi.n	800c1ac <UART_SetConfig+0x35c>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <UART_SetConfig+0x2f0>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c159 	.word	0x0800c159
 800c144:	0800c161 	.word	0x0800c161
 800c148:	0800c169 	.word	0x0800c169
 800c14c:	0800c171 	.word	0x0800c171
 800c150:	0800c19d 	.word	0x0800c19d
 800c154:	0800c1a5 	.word	0x0800c1a5
 800c158:	2300      	movs	r3, #0
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15e:	e14a      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c160:	2304      	movs	r3, #4
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c166:	e146      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c168:	2308      	movs	r3, #8
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16e:	e142      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c170:	2310      	movs	r3, #16
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e13e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c178:	cfff69f3 	.word	0xcfff69f3
 800c17c:	58000c00 	.word	0x58000c00
 800c180:	11fff4ff 	.word	0x11fff4ff
 800c184:	40011000 	.word	0x40011000
 800c188:	58024400 	.word	0x58024400
 800c18c:	40004400 	.word	0x40004400
 800c190:	40004800 	.word	0x40004800
 800c194:	40004c00 	.word	0x40004c00
 800c198:	40005000 	.word	0x40005000
 800c19c:	2320      	movs	r3, #32
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a2:	e128      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c1a4:	2340      	movs	r3, #64	; 0x40
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1aa:	e124      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c1ac:	2380      	movs	r3, #128	; 0x80
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b2:	e120      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4acb      	ldr	r2, [pc, #812]	; (800c4e8 <UART_SetConfig+0x698>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d176      	bne.n	800c2ac <UART_SetConfig+0x45c>
 800c1be:	4bcb      	ldr	r3, [pc, #812]	; (800c4ec <UART_SetConfig+0x69c>)
 800c1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1c6:	2b28      	cmp	r3, #40	; 0x28
 800c1c8:	d86c      	bhi.n	800c2a4 <UART_SetConfig+0x454>
 800c1ca:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <UART_SetConfig+0x380>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c275 	.word	0x0800c275
 800c1d4:	0800c2a5 	.word	0x0800c2a5
 800c1d8:	0800c2a5 	.word	0x0800c2a5
 800c1dc:	0800c2a5 	.word	0x0800c2a5
 800c1e0:	0800c2a5 	.word	0x0800c2a5
 800c1e4:	0800c2a5 	.word	0x0800c2a5
 800c1e8:	0800c2a5 	.word	0x0800c2a5
 800c1ec:	0800c2a5 	.word	0x0800c2a5
 800c1f0:	0800c27d 	.word	0x0800c27d
 800c1f4:	0800c2a5 	.word	0x0800c2a5
 800c1f8:	0800c2a5 	.word	0x0800c2a5
 800c1fc:	0800c2a5 	.word	0x0800c2a5
 800c200:	0800c2a5 	.word	0x0800c2a5
 800c204:	0800c2a5 	.word	0x0800c2a5
 800c208:	0800c2a5 	.word	0x0800c2a5
 800c20c:	0800c2a5 	.word	0x0800c2a5
 800c210:	0800c285 	.word	0x0800c285
 800c214:	0800c2a5 	.word	0x0800c2a5
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2a5 	.word	0x0800c2a5
 800c220:	0800c2a5 	.word	0x0800c2a5
 800c224:	0800c2a5 	.word	0x0800c2a5
 800c228:	0800c2a5 	.word	0x0800c2a5
 800c22c:	0800c2a5 	.word	0x0800c2a5
 800c230:	0800c28d 	.word	0x0800c28d
 800c234:	0800c2a5 	.word	0x0800c2a5
 800c238:	0800c2a5 	.word	0x0800c2a5
 800c23c:	0800c2a5 	.word	0x0800c2a5
 800c240:	0800c2a5 	.word	0x0800c2a5
 800c244:	0800c2a5 	.word	0x0800c2a5
 800c248:	0800c2a5 	.word	0x0800c2a5
 800c24c:	0800c2a5 	.word	0x0800c2a5
 800c250:	0800c295 	.word	0x0800c295
 800c254:	0800c2a5 	.word	0x0800c2a5
 800c258:	0800c2a5 	.word	0x0800c2a5
 800c25c:	0800c2a5 	.word	0x0800c2a5
 800c260:	0800c2a5 	.word	0x0800c2a5
 800c264:	0800c2a5 	.word	0x0800c2a5
 800c268:	0800c2a5 	.word	0x0800c2a5
 800c26c:	0800c2a5 	.word	0x0800c2a5
 800c270:	0800c29d 	.word	0x0800c29d
 800c274:	2301      	movs	r3, #1
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e0bc      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c27c:	2304      	movs	r3, #4
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e0b8      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c284:	2308      	movs	r3, #8
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28a:	e0b4      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c28c:	2310      	movs	r3, #16
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c292:	e0b0      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c294:	2320      	movs	r3, #32
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29a:	e0ac      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c29c:	2340      	movs	r3, #64	; 0x40
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a2:	e0a8      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c2a4:	2380      	movs	r3, #128	; 0x80
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2aa:	e0a4      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a8f      	ldr	r2, [pc, #572]	; (800c4f0 <UART_SetConfig+0x6a0>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d130      	bne.n	800c318 <UART_SetConfig+0x4c8>
 800c2b6:	4b8d      	ldr	r3, [pc, #564]	; (800c4ec <UART_SetConfig+0x69c>)
 800c2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ba:	f003 0307 	and.w	r3, r3, #7
 800c2be:	2b05      	cmp	r3, #5
 800c2c0:	d826      	bhi.n	800c310 <UART_SetConfig+0x4c0>
 800c2c2:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <UART_SetConfig+0x478>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c2e1 	.word	0x0800c2e1
 800c2cc:	0800c2e9 	.word	0x0800c2e9
 800c2d0:	0800c2f1 	.word	0x0800c2f1
 800c2d4:	0800c2f9 	.word	0x0800c2f9
 800c2d8:	0800c301 	.word	0x0800c301
 800c2dc:	0800c309 	.word	0x0800c309
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e086      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c2e8:	2304      	movs	r3, #4
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e082      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c2f0:	2308      	movs	r3, #8
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f6:	e07e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c2f8:	2310      	movs	r3, #16
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fe:	e07a      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c300:	2320      	movs	r3, #32
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c306:	e076      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c308:	2340      	movs	r3, #64	; 0x40
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30e:	e072      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c310:	2380      	movs	r3, #128	; 0x80
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c316:	e06e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a75      	ldr	r2, [pc, #468]	; (800c4f4 <UART_SetConfig+0x6a4>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d130      	bne.n	800c384 <UART_SetConfig+0x534>
 800c322:	4b72      	ldr	r3, [pc, #456]	; (800c4ec <UART_SetConfig+0x69c>)
 800c324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c326:	f003 0307 	and.w	r3, r3, #7
 800c32a:	2b05      	cmp	r3, #5
 800c32c:	d826      	bhi.n	800c37c <UART_SetConfig+0x52c>
 800c32e:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <UART_SetConfig+0x4e4>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c34d 	.word	0x0800c34d
 800c338:	0800c355 	.word	0x0800c355
 800c33c:	0800c35d 	.word	0x0800c35d
 800c340:	0800c365 	.word	0x0800c365
 800c344:	0800c36d 	.word	0x0800c36d
 800c348:	0800c375 	.word	0x0800c375
 800c34c:	2300      	movs	r3, #0
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c352:	e050      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c354:	2304      	movs	r3, #4
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35a:	e04c      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c35c:	2308      	movs	r3, #8
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c362:	e048      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c364:	2310      	movs	r3, #16
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36a:	e044      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c36c:	2320      	movs	r3, #32
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c372:	e040      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c374:	2340      	movs	r3, #64	; 0x40
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37a:	e03c      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c37c:	2380      	movs	r3, #128	; 0x80
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c382:	e038      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a5b      	ldr	r2, [pc, #364]	; (800c4f8 <UART_SetConfig+0x6a8>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d130      	bne.n	800c3f0 <UART_SetConfig+0x5a0>
 800c38e:	4b57      	ldr	r3, [pc, #348]	; (800c4ec <UART_SetConfig+0x69c>)
 800c390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	2b05      	cmp	r3, #5
 800c398:	d826      	bhi.n	800c3e8 <UART_SetConfig+0x598>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <UART_SetConfig+0x550>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3b9 	.word	0x0800c3b9
 800c3a4:	0800c3c1 	.word	0x0800c3c1
 800c3a8:	0800c3c9 	.word	0x0800c3c9
 800c3ac:	0800c3d1 	.word	0x0800c3d1
 800c3b0:	0800c3d9 	.word	0x0800c3d9
 800c3b4:	0800c3e1 	.word	0x0800c3e1
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3be:	e01a      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c6:	e016      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3c8:	2308      	movs	r3, #8
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ce:	e012      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3d0:	2310      	movs	r3, #16
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e00e      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3d8:	2320      	movs	r3, #32
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e00a      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3e0:	2340      	movs	r3, #64	; 0x40
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e006      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3e8:	2380      	movs	r3, #128	; 0x80
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e002      	b.n	800c3f6 <UART_SetConfig+0x5a6>
 800c3f0:	2380      	movs	r3, #128	; 0x80
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a3f      	ldr	r2, [pc, #252]	; (800c4f8 <UART_SetConfig+0x6a8>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	f040 80f8 	bne.w	800c5f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c402:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c406:	2b20      	cmp	r3, #32
 800c408:	dc46      	bgt.n	800c498 <UART_SetConfig+0x648>
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	f2c0 8082 	blt.w	800c514 <UART_SetConfig+0x6c4>
 800c410:	3b02      	subs	r3, #2
 800c412:	2b1e      	cmp	r3, #30
 800c414:	d87e      	bhi.n	800c514 <UART_SetConfig+0x6c4>
 800c416:	a201      	add	r2, pc, #4	; (adr r2, 800c41c <UART_SetConfig+0x5cc>)
 800c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41c:	0800c49f 	.word	0x0800c49f
 800c420:	0800c515 	.word	0x0800c515
 800c424:	0800c4a7 	.word	0x0800c4a7
 800c428:	0800c515 	.word	0x0800c515
 800c42c:	0800c515 	.word	0x0800c515
 800c430:	0800c515 	.word	0x0800c515
 800c434:	0800c4b7 	.word	0x0800c4b7
 800c438:	0800c515 	.word	0x0800c515
 800c43c:	0800c515 	.word	0x0800c515
 800c440:	0800c515 	.word	0x0800c515
 800c444:	0800c515 	.word	0x0800c515
 800c448:	0800c515 	.word	0x0800c515
 800c44c:	0800c515 	.word	0x0800c515
 800c450:	0800c515 	.word	0x0800c515
 800c454:	0800c4c7 	.word	0x0800c4c7
 800c458:	0800c515 	.word	0x0800c515
 800c45c:	0800c515 	.word	0x0800c515
 800c460:	0800c515 	.word	0x0800c515
 800c464:	0800c515 	.word	0x0800c515
 800c468:	0800c515 	.word	0x0800c515
 800c46c:	0800c515 	.word	0x0800c515
 800c470:	0800c515 	.word	0x0800c515
 800c474:	0800c515 	.word	0x0800c515
 800c478:	0800c515 	.word	0x0800c515
 800c47c:	0800c515 	.word	0x0800c515
 800c480:	0800c515 	.word	0x0800c515
 800c484:	0800c515 	.word	0x0800c515
 800c488:	0800c515 	.word	0x0800c515
 800c48c:	0800c515 	.word	0x0800c515
 800c490:	0800c515 	.word	0x0800c515
 800c494:	0800c507 	.word	0x0800c507
 800c498:	2b40      	cmp	r3, #64	; 0x40
 800c49a:	d037      	beq.n	800c50c <UART_SetConfig+0x6bc>
 800c49c:	e03a      	b.n	800c514 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c49e:	f7fd f8c5 	bl	800962c <HAL_RCCEx_GetD3PCLK1Freq>
 800c4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4a4:	e03c      	b.n	800c520 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fd f8d4 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b4:	e034      	b.n	800c520 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4b6:	f107 0318 	add.w	r3, r7, #24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd fa20 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c4:	e02c      	b.n	800c520 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4c6:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <UART_SetConfig+0x69c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0320 	and.w	r3, r3, #32
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d016      	beq.n	800c500 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4d2:	4b06      	ldr	r3, [pc, #24]	; (800c4ec <UART_SetConfig+0x69c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	08db      	lsrs	r3, r3, #3
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	4a07      	ldr	r2, [pc, #28]	; (800c4fc <UART_SetConfig+0x6ac>)
 800c4de:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4e4:	e01c      	b.n	800c520 <UART_SetConfig+0x6d0>
 800c4e6:	bf00      	nop
 800c4e8:	40011400 	.word	0x40011400
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	40007800 	.word	0x40007800
 800c4f4:	40007c00 	.word	0x40007c00
 800c4f8:	58000c00 	.word	0x58000c00
 800c4fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c500:	4b9d      	ldr	r3, [pc, #628]	; (800c778 <UART_SetConfig+0x928>)
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c504:	e00c      	b.n	800c520 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c506:	4b9d      	ldr	r3, [pc, #628]	; (800c77c <UART_SetConfig+0x92c>)
 800c508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50a:	e009      	b.n	800c520 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c50c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c512:	e005      	b.n	800c520 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c514:	2300      	movs	r3, #0
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c51e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 81de 	beq.w	800c8e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	4a94      	ldr	r2, [pc, #592]	; (800c780 <UART_SetConfig+0x930>)
 800c52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c532:	461a      	mov	r2, r3
 800c534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c536:	fbb3 f3f2 	udiv	r3, r3, r2
 800c53a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	4613      	mov	r3, r2
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	4413      	add	r3, r2
 800c546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c548:	429a      	cmp	r2, r3
 800c54a:	d305      	bcc.n	800c558 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c554:	429a      	cmp	r2, r3
 800c556:	d903      	bls.n	800c560 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c55e:	e1c1      	b.n	800c8e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c562:	2200      	movs	r2, #0
 800c564:	60bb      	str	r3, [r7, #8]
 800c566:	60fa      	str	r2, [r7, #12]
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56c:	4a84      	ldr	r2, [pc, #528]	; (800c780 <UART_SetConfig+0x930>)
 800c56e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c572:	b29b      	uxth	r3, r3
 800c574:	2200      	movs	r2, #0
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	607a      	str	r2, [r7, #4]
 800c57a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c582:	f7f4 f8c1 	bl	8000708 <__aeabi_uldivmod>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4610      	mov	r0, r2
 800c58c:	4619      	mov	r1, r3
 800c58e:	f04f 0200 	mov.w	r2, #0
 800c592:	f04f 0300 	mov.w	r3, #0
 800c596:	020b      	lsls	r3, r1, #8
 800c598:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c59c:	0202      	lsls	r2, r0, #8
 800c59e:	6979      	ldr	r1, [r7, #20]
 800c5a0:	6849      	ldr	r1, [r1, #4]
 800c5a2:	0849      	lsrs	r1, r1, #1
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	eb12 0804 	adds.w	r8, r2, r4
 800c5ae:	eb43 0905 	adc.w	r9, r3, r5
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	469a      	mov	sl, r3
 800c5ba:	4693      	mov	fp, r2
 800c5bc:	4652      	mov	r2, sl
 800c5be:	465b      	mov	r3, fp
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f4 f8a0 	bl	8000708 <__aeabi_uldivmod>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5d6:	d308      	bcc.n	800c5ea <UART_SetConfig+0x79a>
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5de:	d204      	bcs.n	800c5ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5e6:	60da      	str	r2, [r3, #12]
 800c5e8:	e17c      	b.n	800c8e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5f0:	e178      	b.n	800c8e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5fa:	f040 80c5 	bne.w	800c788 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c5fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c602:	2b20      	cmp	r3, #32
 800c604:	dc48      	bgt.n	800c698 <UART_SetConfig+0x848>
 800c606:	2b00      	cmp	r3, #0
 800c608:	db7b      	blt.n	800c702 <UART_SetConfig+0x8b2>
 800c60a:	2b20      	cmp	r3, #32
 800c60c:	d879      	bhi.n	800c702 <UART_SetConfig+0x8b2>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <UART_SetConfig+0x7c4>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c69f 	.word	0x0800c69f
 800c618:	0800c6a7 	.word	0x0800c6a7
 800c61c:	0800c703 	.word	0x0800c703
 800c620:	0800c703 	.word	0x0800c703
 800c624:	0800c6af 	.word	0x0800c6af
 800c628:	0800c703 	.word	0x0800c703
 800c62c:	0800c703 	.word	0x0800c703
 800c630:	0800c703 	.word	0x0800c703
 800c634:	0800c6bf 	.word	0x0800c6bf
 800c638:	0800c703 	.word	0x0800c703
 800c63c:	0800c703 	.word	0x0800c703
 800c640:	0800c703 	.word	0x0800c703
 800c644:	0800c703 	.word	0x0800c703
 800c648:	0800c703 	.word	0x0800c703
 800c64c:	0800c703 	.word	0x0800c703
 800c650:	0800c703 	.word	0x0800c703
 800c654:	0800c6cf 	.word	0x0800c6cf
 800c658:	0800c703 	.word	0x0800c703
 800c65c:	0800c703 	.word	0x0800c703
 800c660:	0800c703 	.word	0x0800c703
 800c664:	0800c703 	.word	0x0800c703
 800c668:	0800c703 	.word	0x0800c703
 800c66c:	0800c703 	.word	0x0800c703
 800c670:	0800c703 	.word	0x0800c703
 800c674:	0800c703 	.word	0x0800c703
 800c678:	0800c703 	.word	0x0800c703
 800c67c:	0800c703 	.word	0x0800c703
 800c680:	0800c703 	.word	0x0800c703
 800c684:	0800c703 	.word	0x0800c703
 800c688:	0800c703 	.word	0x0800c703
 800c68c:	0800c703 	.word	0x0800c703
 800c690:	0800c703 	.word	0x0800c703
 800c694:	0800c6f5 	.word	0x0800c6f5
 800c698:	2b40      	cmp	r3, #64	; 0x40
 800c69a:	d02e      	beq.n	800c6fa <UART_SetConfig+0x8aa>
 800c69c:	e031      	b.n	800c702 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c69e:	f7fa ffcd 	bl	800763c <HAL_RCC_GetPCLK1Freq>
 800c6a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6a4:	e033      	b.n	800c70e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6a6:	f7fa ffdf 	bl	8007668 <HAL_RCC_GetPCLK2Freq>
 800c6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6ac:	e02f      	b.n	800c70e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fc ffd0 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	e027      	b.n	800c70e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6be:	f107 0318 	add.w	r3, r7, #24
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fd f91c 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6cc:	e01f      	b.n	800c70e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6ce:	4b2d      	ldr	r3, [pc, #180]	; (800c784 <UART_SetConfig+0x934>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f003 0320 	and.w	r3, r3, #32
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d009      	beq.n	800c6ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6da:	4b2a      	ldr	r3, [pc, #168]	; (800c784 <UART_SetConfig+0x934>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	08db      	lsrs	r3, r3, #3
 800c6e0:	f003 0303 	and.w	r3, r3, #3
 800c6e4:	4a24      	ldr	r2, [pc, #144]	; (800c778 <UART_SetConfig+0x928>)
 800c6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6ec:	e00f      	b.n	800c70e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c6ee:	4b22      	ldr	r3, [pc, #136]	; (800c778 <UART_SetConfig+0x928>)
 800c6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f2:	e00c      	b.n	800c70e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6f4:	4b21      	ldr	r3, [pc, #132]	; (800c77c <UART_SetConfig+0x92c>)
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f8:	e009      	b.n	800c70e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c700:	e005      	b.n	800c70e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c702:	2300      	movs	r3, #0
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c70c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 80e7 	beq.w	800c8e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71a:	4a19      	ldr	r2, [pc, #100]	; (800c780 <UART_SetConfig+0x930>)
 800c71c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c720:	461a      	mov	r2, r3
 800c722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c724:	fbb3 f3f2 	udiv	r3, r3, r2
 800c728:	005a      	lsls	r2, r3, #1
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	085b      	lsrs	r3, r3, #1
 800c730:	441a      	add	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	fbb2 f3f3 	udiv	r3, r2, r3
 800c73a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	2b0f      	cmp	r3, #15
 800c740:	d916      	bls.n	800c770 <UART_SetConfig+0x920>
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c748:	d212      	bcs.n	800c770 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	f023 030f 	bic.w	r3, r3, #15
 800c752:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	085b      	lsrs	r3, r3, #1
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f003 0307 	and.w	r3, r3, #7
 800c75e:	b29a      	uxth	r2, r3
 800c760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c762:	4313      	orrs	r3, r2
 800c764:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c76c:	60da      	str	r2, [r3, #12]
 800c76e:	e0b9      	b.n	800c8e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c776:	e0b5      	b.n	800c8e4 <UART_SetConfig+0xa94>
 800c778:	03d09000 	.word	0x03d09000
 800c77c:	003d0900 	.word	0x003d0900
 800c780:	0801490c 	.word	0x0801490c
 800c784:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c788:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c78c:	2b20      	cmp	r3, #32
 800c78e:	dc49      	bgt.n	800c824 <UART_SetConfig+0x9d4>
 800c790:	2b00      	cmp	r3, #0
 800c792:	db7c      	blt.n	800c88e <UART_SetConfig+0xa3e>
 800c794:	2b20      	cmp	r3, #32
 800c796:	d87a      	bhi.n	800c88e <UART_SetConfig+0xa3e>
 800c798:	a201      	add	r2, pc, #4	; (adr r2, 800c7a0 <UART_SetConfig+0x950>)
 800c79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79e:	bf00      	nop
 800c7a0:	0800c82b 	.word	0x0800c82b
 800c7a4:	0800c833 	.word	0x0800c833
 800c7a8:	0800c88f 	.word	0x0800c88f
 800c7ac:	0800c88f 	.word	0x0800c88f
 800c7b0:	0800c83b 	.word	0x0800c83b
 800c7b4:	0800c88f 	.word	0x0800c88f
 800c7b8:	0800c88f 	.word	0x0800c88f
 800c7bc:	0800c88f 	.word	0x0800c88f
 800c7c0:	0800c84b 	.word	0x0800c84b
 800c7c4:	0800c88f 	.word	0x0800c88f
 800c7c8:	0800c88f 	.word	0x0800c88f
 800c7cc:	0800c88f 	.word	0x0800c88f
 800c7d0:	0800c88f 	.word	0x0800c88f
 800c7d4:	0800c88f 	.word	0x0800c88f
 800c7d8:	0800c88f 	.word	0x0800c88f
 800c7dc:	0800c88f 	.word	0x0800c88f
 800c7e0:	0800c85b 	.word	0x0800c85b
 800c7e4:	0800c88f 	.word	0x0800c88f
 800c7e8:	0800c88f 	.word	0x0800c88f
 800c7ec:	0800c88f 	.word	0x0800c88f
 800c7f0:	0800c88f 	.word	0x0800c88f
 800c7f4:	0800c88f 	.word	0x0800c88f
 800c7f8:	0800c88f 	.word	0x0800c88f
 800c7fc:	0800c88f 	.word	0x0800c88f
 800c800:	0800c88f 	.word	0x0800c88f
 800c804:	0800c88f 	.word	0x0800c88f
 800c808:	0800c88f 	.word	0x0800c88f
 800c80c:	0800c88f 	.word	0x0800c88f
 800c810:	0800c88f 	.word	0x0800c88f
 800c814:	0800c88f 	.word	0x0800c88f
 800c818:	0800c88f 	.word	0x0800c88f
 800c81c:	0800c88f 	.word	0x0800c88f
 800c820:	0800c881 	.word	0x0800c881
 800c824:	2b40      	cmp	r3, #64	; 0x40
 800c826:	d02e      	beq.n	800c886 <UART_SetConfig+0xa36>
 800c828:	e031      	b.n	800c88e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c82a:	f7fa ff07 	bl	800763c <HAL_RCC_GetPCLK1Freq>
 800c82e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c830:	e033      	b.n	800c89a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c832:	f7fa ff19 	bl	8007668 <HAL_RCC_GetPCLK2Freq>
 800c836:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c838:	e02f      	b.n	800c89a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fc ff0a 	bl	8009658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c848:	e027      	b.n	800c89a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84a:	f107 0318 	add.w	r3, r7, #24
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fd f856 	bl	8009900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c858:	e01f      	b.n	800c89a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c85a:	4b2d      	ldr	r3, [pc, #180]	; (800c910 <UART_SetConfig+0xac0>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0320 	and.w	r3, r3, #32
 800c862:	2b00      	cmp	r3, #0
 800c864:	d009      	beq.n	800c87a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c866:	4b2a      	ldr	r3, [pc, #168]	; (800c910 <UART_SetConfig+0xac0>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	08db      	lsrs	r3, r3, #3
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	4a28      	ldr	r2, [pc, #160]	; (800c914 <UART_SetConfig+0xac4>)
 800c872:	fa22 f303 	lsr.w	r3, r2, r3
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c878:	e00f      	b.n	800c89a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c87a:	4b26      	ldr	r3, [pc, #152]	; (800c914 <UART_SetConfig+0xac4>)
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87e:	e00c      	b.n	800c89a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c880:	4b25      	ldr	r3, [pc, #148]	; (800c918 <UART_SetConfig+0xac8>)
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c884:	e009      	b.n	800c89a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88c:	e005      	b.n	800c89a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c898:	bf00      	nop
    }

    if (pclk != 0U)
 800c89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d021      	beq.n	800c8e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a4:	4a1d      	ldr	r2, [pc, #116]	; (800c91c <UART_SetConfig+0xacc>)
 800c8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	085b      	lsrs	r3, r3, #1
 800c8b8:	441a      	add	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	2b0f      	cmp	r3, #15
 800c8c8:	d909      	bls.n	800c8de <UART_SetConfig+0xa8e>
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8d0:	d205      	bcs.n	800c8de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60da      	str	r2, [r3, #12]
 800c8dc:	e002      	b.n	800c8e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c900:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c904:	4618      	mov	r0, r3
 800c906:	3748      	adds	r7, #72	; 0x48
 800c908:	46bd      	mov	sp, r7
 800c90a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c90e:	bf00      	nop
 800c910:	58024400 	.word	0x58024400
 800c914:	03d09000 	.word	0x03d09000
 800c918:	003d0900 	.word	0x003d0900
 800c91c:	0801490c 	.word	0x0801490c

0800c920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00a      	beq.n	800c94a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	430a      	orrs	r2, r1
 800c948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	f003 0302 	and.w	r3, r3, #2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00a      	beq.n	800c96c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	430a      	orrs	r2, r1
 800c96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00a      	beq.n	800c98e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	430a      	orrs	r2, r1
 800c98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c992:	f003 0308 	and.w	r3, r3, #8
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b4:	f003 0310 	and.w	r3, r3, #16
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00a      	beq.n	800c9d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	f003 0320 	and.w	r3, r3, #32
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01a      	beq.n	800ca36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca1e:	d10a      	bne.n	800ca36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	430a      	orrs	r2, r1
 800ca34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00a      	beq.n	800ca58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	430a      	orrs	r2, r1
 800ca56:	605a      	str	r2, [r3, #4]
  }
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b098      	sub	sp, #96	; 0x60
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca74:	f7f5 fc02 	bl	800227c <HAL_GetTick>
 800ca78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d12f      	bne.n	800cae8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca90:	2200      	movs	r2, #0
 800ca92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f88e 	bl	800cbb8 <UART_WaitOnFlagUntilTimeout>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d022      	beq.n	800cae8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caaa:	e853 3f00 	ldrex	r3, [r3]
 800caae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cab6:	653b      	str	r3, [r7, #80]	; 0x50
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	461a      	mov	r2, r3
 800cabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac0:	647b      	str	r3, [r7, #68]	; 0x44
 800cac2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cac8:	e841 2300 	strex	r3, r2, [r1]
 800cacc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e6      	bne.n	800caa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2220      	movs	r2, #32
 800cad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e063      	b.n	800cbb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0304 	and.w	r3, r3, #4
 800caf2:	2b04      	cmp	r3, #4
 800caf4:	d149      	bne.n	800cb8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800caf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafe:	2200      	movs	r2, #0
 800cb00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f857 	bl	800cbb8 <UART_WaitOnFlagUntilTimeout>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d03c      	beq.n	800cb8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2e:	633b      	str	r3, [r7, #48]	; 0x30
 800cb30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb36:	e841 2300 	strex	r3, r2, [r1]
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e6      	bne.n	800cb10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3308      	adds	r3, #8
 800cb48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f023 0301 	bic.w	r3, r3, #1
 800cb58:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3308      	adds	r3, #8
 800cb60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb62:	61fa      	str	r2, [r7, #28]
 800cb64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	69b9      	ldr	r1, [r7, #24]
 800cb68:	69fa      	ldr	r2, [r7, #28]
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	617b      	str	r3, [r7, #20]
   return(result);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e5      	bne.n	800cb42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb86:	2303      	movs	r3, #3
 800cb88:	e012      	b.n	800cbb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2220      	movs	r2, #32
 800cb8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2220      	movs	r2, #32
 800cb96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3758      	adds	r7, #88	; 0x58
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	603b      	str	r3, [r7, #0]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbc8:	e049      	b.n	800cc5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd0:	d045      	beq.n	800cc5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbd2:	f7f5 fb53 	bl	800227c <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	69ba      	ldr	r2, [r7, #24]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d302      	bcc.n	800cbe8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e048      	b.n	800cc7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d031      	beq.n	800cc5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	f003 0308 	and.w	r3, r3, #8
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	d110      	bne.n	800cc2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2208      	movs	r2, #8
 800cc0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f000 f839 	bl	800cc88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2208      	movs	r2, #8
 800cc1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e029      	b.n	800cc7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	69db      	ldr	r3, [r3, #28]
 800cc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc38:	d111      	bne.n	800cc5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 f81f 	bl	800cc88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2220      	movs	r2, #32
 800cc4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	e00f      	b.n	800cc7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	69da      	ldr	r2, [r3, #28]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	4013      	ands	r3, r2
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	bf0c      	ite	eq
 800cc6e:	2301      	moveq	r3, #1
 800cc70:	2300      	movne	r3, #0
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	461a      	mov	r2, r3
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d0a6      	beq.n	800cbca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
	...

0800cc88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b095      	sub	sp, #84	; 0x54
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc98:	e853 3f00 	ldrex	r3, [r3]
 800cc9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccae:	643b      	str	r3, [r7, #64]	; 0x40
 800ccb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ccb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccb6:	e841 2300 	strex	r3, r2, [r1]
 800ccba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1e6      	bne.n	800cc90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3308      	adds	r3, #8
 800ccc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccd2:	69fa      	ldr	r2, [r7, #28]
 800ccd4:	4b1e      	ldr	r3, [pc, #120]	; (800cd50 <UART_EndRxTransfer+0xc8>)
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3308      	adds	r3, #8
 800cce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cce4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e5      	bne.n	800ccc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d118      	bne.n	800cd30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	e853 3f00 	ldrex	r3, [r3]
 800cd0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f023 0310 	bic.w	r3, r3, #16
 800cd12:	647b      	str	r3, [r7, #68]	; 0x44
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1c:	61bb      	str	r3, [r7, #24]
 800cd1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd20:	6979      	ldr	r1, [r7, #20]
 800cd22:	69ba      	ldr	r2, [r7, #24]
 800cd24:	e841 2300 	strex	r3, r2, [r1]
 800cd28:	613b      	str	r3, [r7, #16]
   return(result);
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1e6      	bne.n	800ccfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2220      	movs	r2, #32
 800cd34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cd44:	bf00      	nop
 800cd46:	3754      	adds	r7, #84	; 0x54
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	effffffe 	.word	0xeffffffe

0800cd54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f7ff f856 	bl	800be24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd9c:	61fb      	str	r3, [r7, #28]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	6979      	ldr	r1, [r7, #20]
 800cdac:	69ba      	ldr	r2, [r7, #24]
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	613b      	str	r3, [r7, #16]
   return(result);
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e6      	bne.n	800cd88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7ff f821 	bl	800be10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdce:	bf00      	nop
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cdde:	bf00      	nop
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cdf2:	bf00      	nop
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce06:	bf00      	nop
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr

0800ce12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b085      	sub	sp, #20
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d101      	bne.n	800ce28 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce24:	2302      	movs	r3, #2
 800ce26:	e027      	b.n	800ce78 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2224      	movs	r2, #36	; 0x24
 800ce34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f022 0201 	bic.w	r2, r2, #1
 800ce4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce98:	2302      	movs	r3, #2
 800ce9a:	e02d      	b.n	800cef8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2224      	movs	r2, #36	; 0x24
 800cea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f022 0201 	bic.w	r2, r2, #1
 800cec2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	430a      	orrs	r2, r1
 800ced6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f84f 	bl	800cf7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2220      	movs	r2, #32
 800ceea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d101      	bne.n	800cf18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf14:	2302      	movs	r3, #2
 800cf16:	e02d      	b.n	800cf74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2224      	movs	r2, #36	; 0x24
 800cf24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0201 	bic.w	r2, r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	430a      	orrs	r2, r1
 800cf52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f811 	bl	800cf7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d108      	bne.n	800cf9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf9c:	e031      	b.n	800d002 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf9e:	2310      	movs	r3, #16
 800cfa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfa2:	2310      	movs	r3, #16
 800cfa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	0e5b      	lsrs	r3, r3, #25
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	f003 0307 	and.w	r3, r3, #7
 800cfb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	0f5b      	lsrs	r3, r3, #29
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0307 	and.w	r3, r3, #7
 800cfc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfc6:	7bbb      	ldrb	r3, [r7, #14]
 800cfc8:	7b3a      	ldrb	r2, [r7, #12]
 800cfca:	4911      	ldr	r1, [pc, #68]	; (800d010 <UARTEx_SetNbDataToProcess+0x94>)
 800cfcc:	5c8a      	ldrb	r2, [r1, r2]
 800cfce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfd2:	7b3a      	ldrb	r2, [r7, #12]
 800cfd4:	490f      	ldr	r1, [pc, #60]	; (800d014 <UARTEx_SetNbDataToProcess+0x98>)
 800cfd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
 800cfe6:	7b7a      	ldrb	r2, [r7, #13]
 800cfe8:	4909      	ldr	r1, [pc, #36]	; (800d010 <UARTEx_SetNbDataToProcess+0x94>)
 800cfea:	5c8a      	ldrb	r2, [r1, r2]
 800cfec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cff0:	7b7a      	ldrb	r2, [r7, #13]
 800cff2:	4908      	ldr	r1, [pc, #32]	; (800d014 <UARTEx_SetNbDataToProcess+0x98>)
 800cff4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cff6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d002:	bf00      	nop
 800d004:	3714      	adds	r7, #20
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	08014924 	.word	0x08014924
 800d014:	0801492c 	.word	0x0801492c

0800d018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d018:	b084      	sub	sp, #16
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	f107 001c 	add.w	r0, r7, #28
 800d026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d120      	bne.n	800d072 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68da      	ldr	r2, [r3, #12]
 800d040:	4b2a      	ldr	r3, [pc, #168]	; (800d0ec <USB_CoreInit+0xd4>)
 800d042:	4013      	ands	r3, r2
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d056:	2b01      	cmp	r3, #1
 800d058:	d105      	bne.n	800d066 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 faac 	bl	800d5c4 <USB_CoreReset>
 800d06c:	4603      	mov	r3, r0
 800d06e:	73fb      	strb	r3, [r7, #15]
 800d070:	e01a      	b.n	800d0a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 faa0 	bl	800d5c4 <USB_CoreReset>
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	639a      	str	r2, [r3, #56]	; 0x38
 800d09a:	e005      	b.n	800d0a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d116      	bne.n	800d0dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d0bc:	4b0c      	ldr	r3, [pc, #48]	; (800d0f0 <USB_CoreInit+0xd8>)
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f043 0206 	orr.w	r2, r3, #6
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	f043 0220 	orr.w	r2, r3, #32
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0e8:	b004      	add	sp, #16
 800d0ea:	4770      	bx	lr
 800d0ec:	ffbdffbf 	.word	0xffbdffbf
 800d0f0:	03ee0000 	.word	0x03ee0000

0800d0f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	f023 0201 	bic.w	r2, r3, #1
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d115      	bne.n	800d164 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d144:	2001      	movs	r0, #1
 800d146:	f7f5 f8a5 	bl	8002294 <HAL_Delay>
      ms++;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3301      	adds	r3, #1
 800d14e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fa29 	bl	800d5a8 <USB_GetMode>
 800d156:	4603      	mov	r3, r0
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d01e      	beq.n	800d19a <USB_SetCurrentMode+0x84>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b31      	cmp	r3, #49	; 0x31
 800d160:	d9f0      	bls.n	800d144 <USB_SetCurrentMode+0x2e>
 800d162:	e01a      	b.n	800d19a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d115      	bne.n	800d196 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d176:	2001      	movs	r0, #1
 800d178:	f7f5 f88c 	bl	8002294 <HAL_Delay>
      ms++;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	3301      	adds	r3, #1
 800d180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa10 	bl	800d5a8 <USB_GetMode>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d005      	beq.n	800d19a <USB_SetCurrentMode+0x84>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b31      	cmp	r3, #49	; 0x31
 800d192:	d9f0      	bls.n	800d176 <USB_SetCurrentMode+0x60>
 800d194:	e001      	b.n	800d19a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e005      	b.n	800d1a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b32      	cmp	r3, #50	; 0x32
 800d19e:	d101      	bne.n	800d1a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b086      	sub	sp, #24
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d1be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]
 800d1ce:	e009      	b.n	800d1e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	3340      	adds	r3, #64	; 0x40
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	2200      	movs	r2, #0
 800d1dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	613b      	str	r3, [r7, #16]
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	2b0e      	cmp	r3, #14
 800d1e8:	d9f2      	bls.n	800d1d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d11c      	bne.n	800d22a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1fe:	f043 0302 	orr.w	r3, r3, #2
 800d202:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d208:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	e005      	b.n	800d236 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d23c:	461a      	mov	r2, r3
 800d23e:	2300      	movs	r3, #0
 800d240:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d248:	4619      	mov	r1, r3
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d250:	461a      	mov	r2, r3
 800d252:	680b      	ldr	r3, [r1, #0]
 800d254:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d10c      	bne.n	800d276 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d104      	bne.n	800d26c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d262:	2100      	movs	r1, #0
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f965 	bl	800d534 <USB_SetDevSpeed>
 800d26a:	e008      	b.n	800d27e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d26c:	2101      	movs	r1, #1
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f960 	bl	800d534 <USB_SetDevSpeed>
 800d274:	e003      	b.n	800d27e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d276:	2103      	movs	r1, #3
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f95b 	bl	800d534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d27e:	2110      	movs	r1, #16
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 f8f3 	bl	800d46c <USB_FlushTxFifo>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f91f 	bl	800d4d4 <USB_FlushRxFifo>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2be:	461a      	mov	r2, r3
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	613b      	str	r3, [r7, #16]
 800d2c8:	e043      	b.n	800d352 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	015a      	lsls	r2, r3, #5
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2e0:	d118      	bne.n	800d314 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2fa:	6013      	str	r3, [r2, #0]
 800d2fc:	e013      	b.n	800d326 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	015a      	lsls	r2, r3, #5
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	4413      	add	r3, r2
 800d306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30a:	461a      	mov	r2, r3
 800d30c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	e008      	b.n	800d326 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d320:	461a      	mov	r2, r3
 800d322:	2300      	movs	r3, #0
 800d324:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d332:	461a      	mov	r2, r3
 800d334:	2300      	movs	r3, #0
 800d336:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	015a      	lsls	r2, r3, #5
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d344:	461a      	mov	r2, r3
 800d346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d34a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	3301      	adds	r3, #1
 800d350:	613b      	str	r3, [r7, #16]
 800d352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	429a      	cmp	r2, r3
 800d358:	d3b7      	bcc.n	800d2ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d35a:	2300      	movs	r3, #0
 800d35c:	613b      	str	r3, [r7, #16]
 800d35e:	e043      	b.n	800d3e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d376:	d118      	bne.n	800d3aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38a:	461a      	mov	r2, r3
 800d38c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	e013      	b.n	800d3bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	e008      	b.n	800d3bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	015a      	lsls	r2, r3, #5
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	015a      	lsls	r2, r3, #5
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d3e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	613b      	str	r3, [r7, #16]
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	693a      	ldr	r2, [r7, #16]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d3b7      	bcc.n	800d360 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d402:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d410:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d414:	2b00      	cmp	r3, #0
 800d416:	d105      	bne.n	800d424 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	f043 0210 	orr.w	r2, r3, #16
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	699a      	ldr	r2, [r3, #24]
 800d428:	4b0e      	ldr	r3, [pc, #56]	; (800d464 <USB_DevInit+0x2b4>)
 800d42a:	4313      	orrs	r3, r2
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d005      	beq.n	800d442 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	699b      	ldr	r3, [r3, #24]
 800d43a:	f043 0208 	orr.w	r2, r3, #8
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d444:	2b01      	cmp	r3, #1
 800d446:	d105      	bne.n	800d454 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	699a      	ldr	r2, [r3, #24]
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <USB_DevInit+0x2b8>)
 800d44e:	4313      	orrs	r3, r2
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d454:	7dfb      	ldrb	r3, [r7, #23]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d460:	b004      	add	sp, #16
 800d462:	4770      	bx	lr
 800d464:	803c3800 	.word	0x803c3800
 800d468:	40000004 	.word	0x40000004

0800d46c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3301      	adds	r3, #1
 800d47e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a13      	ldr	r2, [pc, #76]	; (800d4d0 <USB_FlushTxFifo+0x64>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d901      	bls.n	800d48c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d488:	2303      	movs	r3, #3
 800d48a:	e01b      	b.n	800d4c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	daf2      	bge.n	800d47a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d494:	2300      	movs	r3, #0
 800d496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	019b      	lsls	r3, r3, #6
 800d49c:	f043 0220 	orr.w	r2, r3, #32
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <USB_FlushTxFifo+0x64>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d901      	bls.n	800d4b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e006      	b.n	800d4c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	f003 0320 	and.w	r3, r3, #32
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	d0f0      	beq.n	800d4a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3714      	adds	r7, #20
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	00030d40 	.word	0x00030d40

0800d4d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4a11      	ldr	r2, [pc, #68]	; (800d530 <USB_FlushRxFifo+0x5c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d901      	bls.n	800d4f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	e018      	b.n	800d524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	daf2      	bge.n	800d4e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2210      	movs	r2, #16
 800d502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3301      	adds	r3, #1
 800d508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	4a08      	ldr	r2, [pc, #32]	; (800d530 <USB_FlushRxFifo+0x5c>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d901      	bls.n	800d516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e006      	b.n	800d524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	f003 0310 	and.w	r3, r3, #16
 800d51e:	2b10      	cmp	r3, #16
 800d520:	d0f0      	beq.n	800d504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	00030d40 	.word	0x00030d40

0800d534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	78fb      	ldrb	r3, [r7, #3]
 800d54e:	68f9      	ldr	r1, [r7, #12]
 800d550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d554:	4313      	orrs	r3, r2
 800d556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d566:	b480      	push	{r7}
 800d568:	b085      	sub	sp, #20
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d580:	f023 0303 	bic.w	r3, r3, #3
 800d584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d594:	f043 0302 	orr.w	r3, r3, #2
 800d598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	695b      	ldr	r3, [r3, #20]
 800d5b4:	f003 0301 	and.w	r3, r3, #1
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	4a13      	ldr	r2, [pc, #76]	; (800d628 <USB_CoreReset+0x64>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d901      	bls.n	800d5e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e01b      	b.n	800d61a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	daf2      	bge.n	800d5d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	f043 0201 	orr.w	r2, r3, #1
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4a09      	ldr	r2, [pc, #36]	; (800d628 <USB_CoreReset+0x64>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d901      	bls.n	800d60c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d608:	2303      	movs	r3, #3
 800d60a:	e006      	b.n	800d61a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	2b01      	cmp	r3, #1
 800d616:	d0f0      	beq.n	800d5fa <USB_CoreReset+0x36>

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	00030d40 	.word	0x00030d40

0800d62c <__NVIC_SetPriority>:
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	6039      	str	r1, [r7, #0]
 800d636:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	db0a      	blt.n	800d656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	b2da      	uxtb	r2, r3
 800d644:	490c      	ldr	r1, [pc, #48]	; (800d678 <__NVIC_SetPriority+0x4c>)
 800d646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d64a:	0112      	lsls	r2, r2, #4
 800d64c:	b2d2      	uxtb	r2, r2
 800d64e:	440b      	add	r3, r1
 800d650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d654:	e00a      	b.n	800d66c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	4908      	ldr	r1, [pc, #32]	; (800d67c <__NVIC_SetPriority+0x50>)
 800d65c:	88fb      	ldrh	r3, [r7, #6]
 800d65e:	f003 030f 	and.w	r3, r3, #15
 800d662:	3b04      	subs	r3, #4
 800d664:	0112      	lsls	r2, r2, #4
 800d666:	b2d2      	uxtb	r2, r2
 800d668:	440b      	add	r3, r1
 800d66a:	761a      	strb	r2, [r3, #24]
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	e000e100 	.word	0xe000e100
 800d67c:	e000ed00 	.word	0xe000ed00

0800d680 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d684:	4b05      	ldr	r3, [pc, #20]	; (800d69c <SysTick_Handler+0x1c>)
 800d686:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d688:	f002 f962 	bl	800f950 <xTaskGetSchedulerState>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d001      	beq.n	800d696 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d692:	f000 fd99 	bl	800e1c8 <xPortSysTickHandler>
  }
}
 800d696:	bf00      	nop
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	e000e010 	.word	0xe000e010

0800d6a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	f06f 0004 	mvn.w	r0, #4
 800d6aa:	f7ff ffbf 	bl	800d62c <__NVIC_SetPriority>
#endif
}
 800d6ae:	bf00      	nop
 800d6b0:	bd80      	pop	{r7, pc}
	...

0800d6b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6ba:	f3ef 8305 	mrs	r3, IPSR
 800d6be:	603b      	str	r3, [r7, #0]
  return(result);
 800d6c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d6c6:	f06f 0305 	mvn.w	r3, #5
 800d6ca:	607b      	str	r3, [r7, #4]
 800d6cc:	e00c      	b.n	800d6e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d6ce:	4b0a      	ldr	r3, [pc, #40]	; (800d6f8 <osKernelInitialize+0x44>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d105      	bne.n	800d6e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d6d6:	4b08      	ldr	r3, [pc, #32]	; (800d6f8 <osKernelInitialize+0x44>)
 800d6d8:	2201      	movs	r2, #1
 800d6da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	607b      	str	r3, [r7, #4]
 800d6e0:	e002      	b.n	800d6e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d6e8:	687b      	ldr	r3, [r7, #4]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	24000b84 	.word	0x24000b84

0800d6fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d702:	f3ef 8305 	mrs	r3, IPSR
 800d706:	603b      	str	r3, [r7, #0]
  return(result);
 800d708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d003      	beq.n	800d716 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d70e:	f06f 0305 	mvn.w	r3, #5
 800d712:	607b      	str	r3, [r7, #4]
 800d714:	e010      	b.n	800d738 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d716:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <osKernelStart+0x48>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d109      	bne.n	800d732 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d71e:	f7ff ffbf 	bl	800d6a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d722:	4b08      	ldr	r3, [pc, #32]	; (800d744 <osKernelStart+0x48>)
 800d724:	2202      	movs	r2, #2
 800d726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d728:	f001 fcb6 	bl	800f098 <vTaskStartScheduler>
      stat = osOK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	607b      	str	r3, [r7, #4]
 800d730:	e002      	b.n	800d738 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
 800d736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d738:	687b      	ldr	r3, [r7, #4]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	24000b84 	.word	0x24000b84

0800d748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b08e      	sub	sp, #56	; 0x38
 800d74c:	af04      	add	r7, sp, #16
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d754:	2300      	movs	r3, #0
 800d756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d758:	f3ef 8305 	mrs	r3, IPSR
 800d75c:	617b      	str	r3, [r7, #20]
  return(result);
 800d75e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d760:	2b00      	cmp	r3, #0
 800d762:	d17e      	bne.n	800d862 <osThreadNew+0x11a>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d07b      	beq.n	800d862 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d76a:	2380      	movs	r3, #128	; 0x80
 800d76c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d76e:	2318      	movs	r3, #24
 800d770:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d772:	2300      	movs	r3, #0
 800d774:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d045      	beq.n	800d80e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d002      	beq.n	800d790 <osThreadNew+0x48>
        name = attr->name;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d008      	beq.n	800d7b6 <osThreadNew+0x6e>
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	2b38      	cmp	r3, #56	; 0x38
 800d7a8:	d805      	bhi.n	800d7b6 <osThreadNew+0x6e>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <osThreadNew+0x72>
        return (NULL);
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	e054      	b.n	800d864 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d003      	beq.n	800d7ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	089b      	lsrs	r3, r3, #2
 800d7c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00e      	beq.n	800d7f0 <osThreadNew+0xa8>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	2ba7      	cmp	r3, #167	; 0xa7
 800d7d8:	d90a      	bls.n	800d7f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d006      	beq.n	800d7f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d002      	beq.n	800d7f0 <osThreadNew+0xa8>
        mem = 1;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	61bb      	str	r3, [r7, #24]
 800d7ee:	e010      	b.n	800d812 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10c      	bne.n	800d812 <osThreadNew+0xca>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d108      	bne.n	800d812 <osThreadNew+0xca>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d104      	bne.n	800d812 <osThreadNew+0xca>
          mem = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	61bb      	str	r3, [r7, #24]
 800d80c:	e001      	b.n	800d812 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d110      	bne.n	800d83a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d820:	9202      	str	r2, [sp, #8]
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	6a3a      	ldr	r2, [r7, #32]
 800d82c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f001 fa46 	bl	800ecc0 <xTaskCreateStatic>
 800d834:	4603      	mov	r3, r0
 800d836:	613b      	str	r3, [r7, #16]
 800d838:	e013      	b.n	800d862 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d110      	bne.n	800d862 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	b29a      	uxth	r2, r3
 800d844:	f107 0310 	add.w	r3, r7, #16
 800d848:	9301      	str	r3, [sp, #4]
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f001 fa91 	bl	800ed7a <xTaskCreate>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d001      	beq.n	800d862 <osThreadNew+0x11a>
            hTask = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d862:	693b      	ldr	r3, [r7, #16]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3728      	adds	r7, #40	; 0x28
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d874:	f3ef 8305 	mrs	r3, IPSR
 800d878:	60bb      	str	r3, [r7, #8]
  return(result);
 800d87a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d003      	beq.n	800d888 <osDelay+0x1c>
    stat = osErrorISR;
 800d880:	f06f 0305 	mvn.w	r3, #5
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	e007      	b.n	800d898 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d888:	2300      	movs	r3, #0
 800d88a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f001 fbcc 	bl	800f030 <vTaskDelay>
    }
  }

  return (stat);
 800d898:	68fb      	ldr	r3, [r7, #12]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	4a07      	ldr	r2, [pc, #28]	; (800d8d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d8b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	4a06      	ldr	r2, [pc, #24]	; (800d8d4 <vApplicationGetIdleTaskMemory+0x30>)
 800d8ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2280      	movs	r2, #128	; 0x80
 800d8c0:	601a      	str	r2, [r3, #0]
}
 800d8c2:	bf00      	nop
 800d8c4:	3714      	adds	r7, #20
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	24000b88 	.word	0x24000b88
 800d8d4:	24000c30 	.word	0x24000c30

0800d8d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	4a07      	ldr	r2, [pc, #28]	; (800d904 <vApplicationGetTimerTaskMemory+0x2c>)
 800d8e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	4a06      	ldr	r2, [pc, #24]	; (800d908 <vApplicationGetTimerTaskMemory+0x30>)
 800d8ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8f6:	601a      	str	r2, [r3, #0]
}
 800d8f8:	bf00      	nop
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	24000e30 	.word	0x24000e30
 800d908:	24000ed8 	.word	0x24000ed8

0800d90c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d914:	2300      	movs	r3, #0
 800d916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d918:	f001 fc2e 	bl	800f178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d91c:	4b5b      	ldr	r3, [pc, #364]	; (800da8c <pvPortMalloc+0x180>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d924:	f000 f920 	bl	800db68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d928:	4b59      	ldr	r3, [pc, #356]	; (800da90 <pvPortMalloc+0x184>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4013      	ands	r3, r2
 800d930:	2b00      	cmp	r3, #0
 800d932:	f040 8093 	bne.w	800da5c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d01d      	beq.n	800d978 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d93c:	2208      	movs	r2, #8
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4413      	add	r3, r2
 800d942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d014      	beq.n	800d978 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f023 0307 	bic.w	r3, r3, #7
 800d954:	3308      	adds	r3, #8
 800d956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d06e      	beq.n	800da5c <pvPortMalloc+0x150>
 800d97e:	4b45      	ldr	r3, [pc, #276]	; (800da94 <pvPortMalloc+0x188>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	429a      	cmp	r2, r3
 800d986:	d869      	bhi.n	800da5c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d988:	4b43      	ldr	r3, [pc, #268]	; (800da98 <pvPortMalloc+0x18c>)
 800d98a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d98c:	4b42      	ldr	r3, [pc, #264]	; (800da98 <pvPortMalloc+0x18c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d992:	e004      	b.n	800d99e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d903      	bls.n	800d9b0 <pvPortMalloc+0xa4>
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1f1      	bne.n	800d994 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9b0:	4b36      	ldr	r3, [pc, #216]	; (800da8c <pvPortMalloc+0x180>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d050      	beq.n	800da5c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2208      	movs	r2, #8
 800d9c0:	4413      	add	r3, r2
 800d9c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	6a3b      	ldr	r3, [r7, #32]
 800d9ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	1ad2      	subs	r2, r2, r3
 800d9d4:	2308      	movs	r3, #8
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d91f      	bls.n	800da1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00a      	beq.n	800da04 <pvPortMalloc+0xf8>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	613b      	str	r3, [r7, #16]
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	1ad2      	subs	r2, r2, r3
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da16:	69b8      	ldr	r0, [r7, #24]
 800da18:	f000 f908 	bl	800dc2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da1c:	4b1d      	ldr	r3, [pc, #116]	; (800da94 <pvPortMalloc+0x188>)
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	4a1b      	ldr	r2, [pc, #108]	; (800da94 <pvPortMalloc+0x188>)
 800da28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da2a:	4b1a      	ldr	r3, [pc, #104]	; (800da94 <pvPortMalloc+0x188>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	4b1b      	ldr	r3, [pc, #108]	; (800da9c <pvPortMalloc+0x190>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	429a      	cmp	r2, r3
 800da34:	d203      	bcs.n	800da3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da36:	4b17      	ldr	r3, [pc, #92]	; (800da94 <pvPortMalloc+0x188>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a18      	ldr	r2, [pc, #96]	; (800da9c <pvPortMalloc+0x190>)
 800da3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	4b13      	ldr	r3, [pc, #76]	; (800da90 <pvPortMalloc+0x184>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	431a      	orrs	r2, r3
 800da48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da52:	4b13      	ldr	r3, [pc, #76]	; (800daa0 <pvPortMalloc+0x194>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	4a11      	ldr	r2, [pc, #68]	; (800daa0 <pvPortMalloc+0x194>)
 800da5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da5c:	f001 fb9a 	bl	800f194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <pvPortMalloc+0x174>
	__asm volatile
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	60fb      	str	r3, [r7, #12]
}
 800da7c:	bf00      	nop
 800da7e:	e7fe      	b.n	800da7e <pvPortMalloc+0x172>
	return pvReturn;
 800da80:	69fb      	ldr	r3, [r7, #28]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3728      	adds	r7, #40	; 0x28
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	24004ee0 	.word	0x24004ee0
 800da90:	24004ef4 	.word	0x24004ef4
 800da94:	24004ee4 	.word	0x24004ee4
 800da98:	24004ed8 	.word	0x24004ed8
 800da9c:	24004ee8 	.word	0x24004ee8
 800daa0:	24004eec 	.word	0x24004eec

0800daa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d04d      	beq.n	800db52 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dab6:	2308      	movs	r3, #8
 800dab8:	425b      	negs	r3, r3
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	4413      	add	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	4b24      	ldr	r3, [pc, #144]	; (800db5c <vPortFree+0xb8>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4013      	ands	r3, r2
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10a      	bne.n	800dae8 <vPortFree+0x44>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60fb      	str	r3, [r7, #12]
}
 800dae4:	bf00      	nop
 800dae6:	e7fe      	b.n	800dae6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00a      	beq.n	800db06 <vPortFree+0x62>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf4:	f383 8811 	msr	BASEPRI, r3
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	f3bf 8f4f 	dsb	sy
 800db00:	60bb      	str	r3, [r7, #8]
}
 800db02:	bf00      	nop
 800db04:	e7fe      	b.n	800db04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	4b14      	ldr	r3, [pc, #80]	; (800db5c <vPortFree+0xb8>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4013      	ands	r3, r2
 800db10:	2b00      	cmp	r3, #0
 800db12:	d01e      	beq.n	800db52 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d11a      	bne.n	800db52 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	4b0e      	ldr	r3, [pc, #56]	; (800db5c <vPortFree+0xb8>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	43db      	mvns	r3, r3
 800db26:	401a      	ands	r2, r3
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db2c:	f001 fb24 	bl	800f178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <vPortFree+0xbc>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4413      	add	r3, r2
 800db3a:	4a09      	ldr	r2, [pc, #36]	; (800db60 <vPortFree+0xbc>)
 800db3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db3e:	6938      	ldr	r0, [r7, #16]
 800db40:	f000 f874 	bl	800dc2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db44:	4b07      	ldr	r3, [pc, #28]	; (800db64 <vPortFree+0xc0>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3301      	adds	r3, #1
 800db4a:	4a06      	ldr	r2, [pc, #24]	; (800db64 <vPortFree+0xc0>)
 800db4c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db4e:	f001 fb21 	bl	800f194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db52:	bf00      	nop
 800db54:	3718      	adds	r7, #24
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	24004ef4 	.word	0x24004ef4
 800db60:	24004ee4 	.word	0x24004ee4
 800db64:	24004ef0 	.word	0x24004ef0

0800db68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800db72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db74:	4b27      	ldr	r3, [pc, #156]	; (800dc14 <prvHeapInit+0xac>)
 800db76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f003 0307 	and.w	r3, r3, #7
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00c      	beq.n	800db9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	3307      	adds	r3, #7
 800db86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f023 0307 	bic.w	r3, r3, #7
 800db8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	4a1f      	ldr	r2, [pc, #124]	; (800dc14 <prvHeapInit+0xac>)
 800db98:	4413      	add	r3, r2
 800db9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dba0:	4a1d      	ldr	r2, [pc, #116]	; (800dc18 <prvHeapInit+0xb0>)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dba6:	4b1c      	ldr	r3, [pc, #112]	; (800dc18 <prvHeapInit+0xb0>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbb4:	2208      	movs	r2, #8
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	1a9b      	subs	r3, r3, r2
 800dbba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f023 0307 	bic.w	r3, r3, #7
 800dbc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	4a15      	ldr	r2, [pc, #84]	; (800dc1c <prvHeapInit+0xb4>)
 800dbc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbca:	4b14      	ldr	r3, [pc, #80]	; (800dc1c <prvHeapInit+0xb4>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbd2:	4b12      	ldr	r3, [pc, #72]	; (800dc1c <prvHeapInit+0xb4>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	1ad2      	subs	r2, r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dbe8:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <prvHeapInit+0xb4>)
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	4a0a      	ldr	r2, [pc, #40]	; (800dc20 <prvHeapInit+0xb8>)
 800dbf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	4a09      	ldr	r2, [pc, #36]	; (800dc24 <prvHeapInit+0xbc>)
 800dbfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc00:	4b09      	ldr	r3, [pc, #36]	; (800dc28 <prvHeapInit+0xc0>)
 800dc02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc06:	601a      	str	r2, [r3, #0]
}
 800dc08:	bf00      	nop
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	240012d8 	.word	0x240012d8
 800dc18:	24004ed8 	.word	0x24004ed8
 800dc1c:	24004ee0 	.word	0x24004ee0
 800dc20:	24004ee8 	.word	0x24004ee8
 800dc24:	24004ee4 	.word	0x24004ee4
 800dc28:	24004ef4 	.word	0x24004ef4

0800dc2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc34:	4b28      	ldr	r3, [pc, #160]	; (800dcd8 <prvInsertBlockIntoFreeList+0xac>)
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	e002      	b.n	800dc40 <prvInsertBlockIntoFreeList+0x14>
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d8f7      	bhi.n	800dc3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	4413      	add	r3, r2
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d108      	bne.n	800dc6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	685a      	ldr	r2, [r3, #4]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	441a      	add	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	441a      	add	r2, r3
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d118      	bne.n	800dcb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <prvInsertBlockIntoFreeList+0xb0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d00d      	beq.n	800dcaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	441a      	add	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	e008      	b.n	800dcbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcaa:	4b0c      	ldr	r3, [pc, #48]	; (800dcdc <prvInsertBlockIntoFreeList+0xb0>)
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	e003      	b.n	800dcbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d002      	beq.n	800dcca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcca:	bf00      	nop
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	24004ed8 	.word	0x24004ed8
 800dcdc:	24004ee0 	.word	0x24004ee0

0800dce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f103 0208 	add.w	r2, r3, #8
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f103 0208 	add.w	r2, r3, #8
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f103 0208 	add.w	r2, r3, #8
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b085      	sub	sp, #20
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	689a      	ldr	r2, [r3, #8]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	601a      	str	r2, [r3, #0]
}
 800dd76:	bf00      	nop
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr

0800dd82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd82:	b480      	push	{r7}
 800dd84:	b085      	sub	sp, #20
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd98:	d103      	bne.n	800dda2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	e00c      	b.n	800ddbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	3308      	adds	r3, #8
 800dda6:	60fb      	str	r3, [r7, #12]
 800dda8:	e002      	b.n	800ddb0 <vListInsert+0x2e>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d2f6      	bcs.n	800ddaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	601a      	str	r2, [r3, #0]
}
 800dde8:	bf00      	nop
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	6892      	ldr	r2, [r2, #8]
 800de0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	6852      	ldr	r2, [r2, #4]
 800de14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d103      	bne.n	800de28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	689a      	ldr	r2, [r3, #8]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	1e5a      	subs	r2, r3, #1
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	3b04      	subs	r3, #4
 800de58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800de60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3b04      	subs	r3, #4
 800de66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f023 0201 	bic.w	r2, r3, #1
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	3b04      	subs	r3, #4
 800de76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de78:	4a0c      	ldr	r2, [pc, #48]	; (800deac <pxPortInitialiseStack+0x64>)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	3b14      	subs	r3, #20
 800de82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3b04      	subs	r3, #4
 800de8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f06f 0202 	mvn.w	r2, #2
 800de96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3b20      	subs	r3, #32
 800de9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de9e:	68fb      	ldr	r3, [r7, #12]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	0800deb1 	.word	0x0800deb1

0800deb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800deba:	4b12      	ldr	r3, [pc, #72]	; (800df04 <prvTaskExitError+0x54>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec2:	d00a      	beq.n	800deda <prvTaskExitError+0x2a>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	60fb      	str	r3, [r7, #12]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <prvTaskExitError+0x28>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	60bb      	str	r3, [r7, #8]
}
 800deec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800deee:	bf00      	nop
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0fc      	beq.n	800def0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800def6:	bf00      	nop
 800def8:	bf00      	nop
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	24000010 	.word	0x24000010
	...

0800df10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df10:	4b07      	ldr	r3, [pc, #28]	; (800df30 <pxCurrentTCBConst2>)
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	6808      	ldr	r0, [r1, #0]
 800df16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1a:	f380 8809 	msr	PSP, r0
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f04f 0000 	mov.w	r0, #0
 800df26:	f380 8811 	msr	BASEPRI, r0
 800df2a:	4770      	bx	lr
 800df2c:	f3af 8000 	nop.w

0800df30 <pxCurrentTCBConst2>:
 800df30:	24004f40 	.word	0x24004f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop

0800df38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df38:	4808      	ldr	r0, [pc, #32]	; (800df5c <prvPortStartFirstTask+0x24>)
 800df3a:	6800      	ldr	r0, [r0, #0]
 800df3c:	6800      	ldr	r0, [r0, #0]
 800df3e:	f380 8808 	msr	MSP, r0
 800df42:	f04f 0000 	mov.w	r0, #0
 800df46:	f380 8814 	msr	CONTROL, r0
 800df4a:	b662      	cpsie	i
 800df4c:	b661      	cpsie	f
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	df00      	svc	0
 800df58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df5a:	bf00      	nop
 800df5c:	e000ed08 	.word	0xe000ed08

0800df60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800df66:	4b46      	ldr	r3, [pc, #280]	; (800e080 <xPortStartScheduler+0x120>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a46      	ldr	r2, [pc, #280]	; (800e084 <xPortStartScheduler+0x124>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d10a      	bne.n	800df86 <xPortStartScheduler+0x26>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	613b      	str	r3, [r7, #16]
}
 800df82:	bf00      	nop
 800df84:	e7fe      	b.n	800df84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800df86:	4b3e      	ldr	r3, [pc, #248]	; (800e080 <xPortStartScheduler+0x120>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a3f      	ldr	r2, [pc, #252]	; (800e088 <xPortStartScheduler+0x128>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d10a      	bne.n	800dfa6 <xPortStartScheduler+0x46>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	60fb      	str	r3, [r7, #12]
}
 800dfa2:	bf00      	nop
 800dfa4:	e7fe      	b.n	800dfa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfa6:	4b39      	ldr	r3, [pc, #228]	; (800e08c <xPortStartScheduler+0x12c>)
 800dfa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	22ff      	movs	r2, #255	; 0xff
 800dfb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dfc0:	78fb      	ldrb	r3, [r7, #3]
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	4b31      	ldr	r3, [pc, #196]	; (800e090 <xPortStartScheduler+0x130>)
 800dfcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dfce:	4b31      	ldr	r3, [pc, #196]	; (800e094 <xPortStartScheduler+0x134>)
 800dfd0:	2207      	movs	r2, #7
 800dfd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfd4:	e009      	b.n	800dfea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dfd6:	4b2f      	ldr	r3, [pc, #188]	; (800e094 <xPortStartScheduler+0x134>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	4a2d      	ldr	r2, [pc, #180]	; (800e094 <xPortStartScheduler+0x134>)
 800dfde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dfe0:	78fb      	ldrb	r3, [r7, #3]
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	005b      	lsls	r3, r3, #1
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfea:	78fb      	ldrb	r3, [r7, #3]
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff2:	2b80      	cmp	r3, #128	; 0x80
 800dff4:	d0ef      	beq.n	800dfd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dff6:	4b27      	ldr	r3, [pc, #156]	; (800e094 <xPortStartScheduler+0x134>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f1c3 0307 	rsb	r3, r3, #7
 800dffe:	2b04      	cmp	r3, #4
 800e000:	d00a      	beq.n	800e018 <xPortStartScheduler+0xb8>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	60bb      	str	r3, [r7, #8]
}
 800e014:	bf00      	nop
 800e016:	e7fe      	b.n	800e016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e018:	4b1e      	ldr	r3, [pc, #120]	; (800e094 <xPortStartScheduler+0x134>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	021b      	lsls	r3, r3, #8
 800e01e:	4a1d      	ldr	r2, [pc, #116]	; (800e094 <xPortStartScheduler+0x134>)
 800e020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e022:	4b1c      	ldr	r3, [pc, #112]	; (800e094 <xPortStartScheduler+0x134>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e02a:	4a1a      	ldr	r2, [pc, #104]	; (800e094 <xPortStartScheduler+0x134>)
 800e02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	b2da      	uxtb	r2, r3
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e036:	4b18      	ldr	r3, [pc, #96]	; (800e098 <xPortStartScheduler+0x138>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a17      	ldr	r2, [pc, #92]	; (800e098 <xPortStartScheduler+0x138>)
 800e03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e042:	4b15      	ldr	r3, [pc, #84]	; (800e098 <xPortStartScheduler+0x138>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a14      	ldr	r2, [pc, #80]	; (800e098 <xPortStartScheduler+0x138>)
 800e048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e04e:	f000 f8dd 	bl	800e20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e052:	4b12      	ldr	r3, [pc, #72]	; (800e09c <xPortStartScheduler+0x13c>)
 800e054:	2200      	movs	r2, #0
 800e056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e058:	f000 f8fc 	bl	800e254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e05c:	4b10      	ldr	r3, [pc, #64]	; (800e0a0 <xPortStartScheduler+0x140>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a0f      	ldr	r2, [pc, #60]	; (800e0a0 <xPortStartScheduler+0x140>)
 800e062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e068:	f7ff ff66 	bl	800df38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e06c:	f001 f9fa 	bl	800f464 <vTaskSwitchContext>
	prvTaskExitError();
 800e070:	f7ff ff1e 	bl	800deb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	e000ed00 	.word	0xe000ed00
 800e084:	410fc271 	.word	0x410fc271
 800e088:	410fc270 	.word	0x410fc270
 800e08c:	e000e400 	.word	0xe000e400
 800e090:	24004ef8 	.word	0x24004ef8
 800e094:	24004efc 	.word	0x24004efc
 800e098:	e000ed20 	.word	0xe000ed20
 800e09c:	24000010 	.word	0x24000010
 800e0a0:	e000ef34 	.word	0xe000ef34

0800e0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	607b      	str	r3, [r7, #4]
}
 800e0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0be:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <vPortEnterCritical+0x58>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <vPortEnterCritical+0x58>)
 800e0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e0c8:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <vPortEnterCritical+0x58>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d10f      	bne.n	800e0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e0d0:	4b0b      	ldr	r3, [pc, #44]	; (800e100 <vPortEnterCritical+0x5c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00a      	beq.n	800e0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	603b      	str	r3, [r7, #0]
}
 800e0ec:	bf00      	nop
 800e0ee:	e7fe      	b.n	800e0ee <vPortEnterCritical+0x4a>
	}
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	24000010 	.word	0x24000010
 800e100:	e000ed04 	.word	0xe000ed04

0800e104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e10a:	4b12      	ldr	r3, [pc, #72]	; (800e154 <vPortExitCritical+0x50>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10a      	bne.n	800e128 <vPortExitCritical+0x24>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	607b      	str	r3, [r7, #4]
}
 800e124:	bf00      	nop
 800e126:	e7fe      	b.n	800e126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e128:	4b0a      	ldr	r3, [pc, #40]	; (800e154 <vPortExitCritical+0x50>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	4a09      	ldr	r2, [pc, #36]	; (800e154 <vPortExitCritical+0x50>)
 800e130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e132:	4b08      	ldr	r3, [pc, #32]	; (800e154 <vPortExitCritical+0x50>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d105      	bne.n	800e146 <vPortExitCritical+0x42>
 800e13a:	2300      	movs	r3, #0
 800e13c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e146:	bf00      	nop
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	24000010 	.word	0x24000010
	...

0800e160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e160:	f3ef 8009 	mrs	r0, PSP
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	4b15      	ldr	r3, [pc, #84]	; (800e1c0 <pxCurrentTCBConst>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	f01e 0f10 	tst.w	lr, #16
 800e170:	bf08      	it	eq
 800e172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	6010      	str	r0, [r2, #0]
 800e17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e184:	f380 8811 	msr	BASEPRI, r0
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f001 f968 	bl	800f464 <vTaskSwitchContext>
 800e194:	f04f 0000 	mov.w	r0, #0
 800e198:	f380 8811 	msr	BASEPRI, r0
 800e19c:	bc09      	pop	{r0, r3}
 800e19e:	6819      	ldr	r1, [r3, #0]
 800e1a0:	6808      	ldr	r0, [r1, #0]
 800e1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a6:	f01e 0f10 	tst.w	lr, #16
 800e1aa:	bf08      	it	eq
 800e1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1b0:	f380 8809 	msr	PSP, r0
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	f3af 8000 	nop.w

0800e1c0 <pxCurrentTCBConst>:
 800e1c0:	24004f40 	.word	0x24004f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop

0800e1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	607b      	str	r3, [r7, #4]
}
 800e1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e1e2:	f001 f885 	bl	800f2f0 <xTaskIncrementTick>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d003      	beq.n	800e1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e1ec:	4b06      	ldr	r3, [pc, #24]	; (800e208 <xPortSysTickHandler+0x40>)
 800e1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	f383 8811 	msr	BASEPRI, r3
}
 800e1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e20c:	b480      	push	{r7}
 800e20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e210:	4b0b      	ldr	r3, [pc, #44]	; (800e240 <vPortSetupTimerInterrupt+0x34>)
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e216:	4b0b      	ldr	r3, [pc, #44]	; (800e244 <vPortSetupTimerInterrupt+0x38>)
 800e218:	2200      	movs	r2, #0
 800e21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e21c:	4b0a      	ldr	r3, [pc, #40]	; (800e248 <vPortSetupTimerInterrupt+0x3c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a0a      	ldr	r2, [pc, #40]	; (800e24c <vPortSetupTimerInterrupt+0x40>)
 800e222:	fba2 2303 	umull	r2, r3, r2, r3
 800e226:	099b      	lsrs	r3, r3, #6
 800e228:	4a09      	ldr	r2, [pc, #36]	; (800e250 <vPortSetupTimerInterrupt+0x44>)
 800e22a:	3b01      	subs	r3, #1
 800e22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e22e:	4b04      	ldr	r3, [pc, #16]	; (800e240 <vPortSetupTimerInterrupt+0x34>)
 800e230:	2207      	movs	r2, #7
 800e232:	601a      	str	r2, [r3, #0]
}
 800e234:	bf00      	nop
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	e000e010 	.word	0xe000e010
 800e244:	e000e018 	.word	0xe000e018
 800e248:	24000000 	.word	0x24000000
 800e24c:	10624dd3 	.word	0x10624dd3
 800e250:	e000e014 	.word	0xe000e014

0800e254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e264 <vPortEnableVFP+0x10>
 800e258:	6801      	ldr	r1, [r0, #0]
 800e25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e25e:	6001      	str	r1, [r0, #0]
 800e260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e262:	bf00      	nop
 800e264:	e000ed88 	.word	0xe000ed88

0800e268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e26e:	f3ef 8305 	mrs	r3, IPSR
 800e272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b0f      	cmp	r3, #15
 800e278:	d914      	bls.n	800e2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e27a:	4a17      	ldr	r2, [pc, #92]	; (800e2d8 <vPortValidateInterruptPriority+0x70>)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	4413      	add	r3, r2
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e284:	4b15      	ldr	r3, [pc, #84]	; (800e2dc <vPortValidateInterruptPriority+0x74>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	7afa      	ldrb	r2, [r7, #11]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d20a      	bcs.n	800e2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	607b      	str	r3, [r7, #4]
}
 800e2a0:	bf00      	nop
 800e2a2:	e7fe      	b.n	800e2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2a4:	4b0e      	ldr	r3, [pc, #56]	; (800e2e0 <vPortValidateInterruptPriority+0x78>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2ac:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <vPortValidateInterruptPriority+0x7c>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d90a      	bls.n	800e2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	603b      	str	r3, [r7, #0]
}
 800e2c6:	bf00      	nop
 800e2c8:	e7fe      	b.n	800e2c8 <vPortValidateInterruptPriority+0x60>
	}
 800e2ca:	bf00      	nop
 800e2cc:	3714      	adds	r7, #20
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	e000e3f0 	.word	0xe000e3f0
 800e2dc:	24004ef8 	.word	0x24004ef8
 800e2e0:	e000ed0c 	.word	0xe000ed0c
 800e2e4:	24004efc 	.word	0x24004efc

0800e2e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10a      	bne.n	800e312 <xQueueGenericReset+0x2a>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	60bb      	str	r3, [r7, #8]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e312:	f7ff fec7 	bl	800e0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e31e:	68f9      	ldr	r1, [r7, #12]
 800e320:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e322:	fb01 f303 	mul.w	r3, r1, r3
 800e326:	441a      	add	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e342:	3b01      	subs	r3, #1
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e348:	fb01 f303 	mul.w	r3, r1, r3
 800e34c:	441a      	add	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	22ff      	movs	r2, #255	; 0xff
 800e356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	22ff      	movs	r2, #255	; 0xff
 800e35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d114      	bne.n	800e392 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d01a      	beq.n	800e3a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3310      	adds	r3, #16
 800e374:	4618      	mov	r0, r3
 800e376:	f001 f929 	bl	800f5cc <xTaskRemoveFromEventList>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d012      	beq.n	800e3a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e380:	4b0c      	ldr	r3, [pc, #48]	; (800e3b4 <xQueueGenericReset+0xcc>)
 800e382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	e009      	b.n	800e3a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3310      	adds	r3, #16
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff fca2 	bl	800dce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3324      	adds	r3, #36	; 0x24
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fc9d 	bl	800dce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e3a6:	f7ff fead 	bl	800e104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e3aa:	2301      	movs	r3, #1
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	e000ed04 	.word	0xe000ed04

0800e3b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08e      	sub	sp, #56	; 0x38
 800e3bc:	af02      	add	r7, sp, #8
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10a      	bne.n	800e3e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d0:	f383 8811 	msr	BASEPRI, r3
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3de:	bf00      	nop
 800e3e0:	e7fe      	b.n	800e3e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10a      	bne.n	800e3fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ec:	f383 8811 	msr	BASEPRI, r3
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	f3bf 8f4f 	dsb	sy
 800e3f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3fa:	bf00      	nop
 800e3fc:	e7fe      	b.n	800e3fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <xQueueGenericCreateStatic+0x52>
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <xQueueGenericCreateStatic+0x56>
 800e40a:	2301      	movs	r3, #1
 800e40c:	e000      	b.n	800e410 <xQueueGenericCreateStatic+0x58>
 800e40e:	2300      	movs	r3, #0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d10a      	bne.n	800e42a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	623b      	str	r3, [r7, #32]
}
 800e426:	bf00      	nop
 800e428:	e7fe      	b.n	800e428 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d102      	bne.n	800e436 <xQueueGenericCreateStatic+0x7e>
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <xQueueGenericCreateStatic+0x82>
 800e436:	2301      	movs	r3, #1
 800e438:	e000      	b.n	800e43c <xQueueGenericCreateStatic+0x84>
 800e43a:	2300      	movs	r3, #0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10a      	bne.n	800e456 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	61fb      	str	r3, [r7, #28]
}
 800e452:	bf00      	nop
 800e454:	e7fe      	b.n	800e454 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e456:	2350      	movs	r3, #80	; 0x50
 800e458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b50      	cmp	r3, #80	; 0x50
 800e45e:	d00a      	beq.n	800e476 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	61bb      	str	r3, [r7, #24]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e476:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00d      	beq.n	800e49e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	2201      	movs	r2, #1
 800e486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e48a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	4613      	mov	r3, r2
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	68b9      	ldr	r1, [r7, #8]
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 f805 	bl	800e4a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3730      	adds	r7, #48	; 0x30
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d103      	bne.n	800e4c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	69ba      	ldr	r2, [r7, #24]
 800e4c0:	601a      	str	r2, [r3, #0]
 800e4c2:	e002      	b.n	800e4ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e4d6:	2101      	movs	r1, #1
 800e4d8:	69b8      	ldr	r0, [r7, #24]
 800e4da:	f7ff ff05 	bl	800e2e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	78fa      	ldrb	r2, [r7, #3]
 800e4e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e4e6:	bf00      	nop
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b08e      	sub	sp, #56	; 0x38
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e4fe:	2300      	movs	r3, #0
 800e500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10a      	bne.n	800e522 <xQueueGenericSend+0x32>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e51e:	bf00      	nop
 800e520:	e7fe      	b.n	800e520 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d103      	bne.n	800e530 <xQueueGenericSend+0x40>
 800e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d101      	bne.n	800e534 <xQueueGenericSend+0x44>
 800e530:	2301      	movs	r3, #1
 800e532:	e000      	b.n	800e536 <xQueueGenericSend+0x46>
 800e534:	2300      	movs	r3, #0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10a      	bne.n	800e550 <xQueueGenericSend+0x60>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e54c:	bf00      	nop
 800e54e:	e7fe      	b.n	800e54e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	2b02      	cmp	r3, #2
 800e554:	d103      	bne.n	800e55e <xQueueGenericSend+0x6e>
 800e556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d101      	bne.n	800e562 <xQueueGenericSend+0x72>
 800e55e:	2301      	movs	r3, #1
 800e560:	e000      	b.n	800e564 <xQueueGenericSend+0x74>
 800e562:	2300      	movs	r3, #0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d10a      	bne.n	800e57e <xQueueGenericSend+0x8e>
	__asm volatile
 800e568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56c:	f383 8811 	msr	BASEPRI, r3
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	623b      	str	r3, [r7, #32]
}
 800e57a:	bf00      	nop
 800e57c:	e7fe      	b.n	800e57c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e57e:	f001 f9e7 	bl	800f950 <xTaskGetSchedulerState>
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <xQueueGenericSend+0x9e>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d101      	bne.n	800e592 <xQueueGenericSend+0xa2>
 800e58e:	2301      	movs	r3, #1
 800e590:	e000      	b.n	800e594 <xQueueGenericSend+0xa4>
 800e592:	2300      	movs	r3, #0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10a      	bne.n	800e5ae <xQueueGenericSend+0xbe>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	61fb      	str	r3, [r7, #28]
}
 800e5aa:	bf00      	nop
 800e5ac:	e7fe      	b.n	800e5ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5ae:	f7ff fd79 	bl	800e0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d302      	bcc.n	800e5c4 <xQueueGenericSend+0xd4>
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	d129      	bne.n	800e618 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	68b9      	ldr	r1, [r7, #8]
 800e5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ca:	f000 fa0b 	bl	800e9e4 <prvCopyDataToQueue>
 800e5ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d010      	beq.n	800e5fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	3324      	adds	r3, #36	; 0x24
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 fff5 	bl	800f5cc <xTaskRemoveFromEventList>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d013      	beq.n	800e610 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e5e8:	4b3f      	ldr	r3, [pc, #252]	; (800e6e8 <xQueueGenericSend+0x1f8>)
 800e5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	e00a      	b.n	800e610 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d007      	beq.n	800e610 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e600:	4b39      	ldr	r3, [pc, #228]	; (800e6e8 <xQueueGenericSend+0x1f8>)
 800e602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e606:	601a      	str	r2, [r3, #0]
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e610:	f7ff fd78 	bl	800e104 <vPortExitCritical>
				return pdPASS;
 800e614:	2301      	movs	r3, #1
 800e616:	e063      	b.n	800e6e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d103      	bne.n	800e626 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e61e:	f7ff fd71 	bl	800e104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e622:	2300      	movs	r3, #0
 800e624:	e05c      	b.n	800e6e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d106      	bne.n	800e63a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e62c:	f107 0314 	add.w	r3, r7, #20
 800e630:	4618      	mov	r0, r3
 800e632:	f001 f82f 	bl	800f694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e636:	2301      	movs	r3, #1
 800e638:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e63a:	f7ff fd63 	bl	800e104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e63e:	f000 fd9b 	bl	800f178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e642:	f7ff fd2f 	bl	800e0a4 <vPortEnterCritical>
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e64c:	b25b      	sxtb	r3, r3
 800e64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e652:	d103      	bne.n	800e65c <xQueueGenericSend+0x16c>
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	2200      	movs	r2, #0
 800e658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e662:	b25b      	sxtb	r3, r3
 800e664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e668:	d103      	bne.n	800e672 <xQueueGenericSend+0x182>
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e672:	f7ff fd47 	bl	800e104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e676:	1d3a      	adds	r2, r7, #4
 800e678:	f107 0314 	add.w	r3, r7, #20
 800e67c:	4611      	mov	r1, r2
 800e67e:	4618      	mov	r0, r3
 800e680:	f001 f81e 	bl	800f6c0 <xTaskCheckForTimeOut>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d124      	bne.n	800e6d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e68a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e68c:	f000 faa2 	bl	800ebd4 <prvIsQueueFull>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d018      	beq.n	800e6c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	3310      	adds	r3, #16
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	4611      	mov	r1, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 ff44 	bl	800f52c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e6a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6a6:	f000 fa2d 	bl	800eb04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e6aa:	f000 fd73 	bl	800f194 <xTaskResumeAll>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f47f af7c 	bne.w	800e5ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	; (800e6e8 <xQueueGenericSend+0x1f8>)
 800e6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6bc:	601a      	str	r2, [r3, #0]
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	f3bf 8f6f 	isb	sy
 800e6c6:	e772      	b.n	800e5ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e6c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6ca:	f000 fa1b 	bl	800eb04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6ce:	f000 fd61 	bl	800f194 <xTaskResumeAll>
 800e6d2:	e76c      	b.n	800e5ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e6d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6d6:	f000 fa15 	bl	800eb04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6da:	f000 fd5b 	bl	800f194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e6de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3738      	adds	r7, #56	; 0x38
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	e000ed04 	.word	0xe000ed04

0800e6ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b090      	sub	sp, #64	; 0x40
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
 800e6f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d103      	bne.n	800e728 <xQueueGenericSendFromISR+0x3c>
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e724:	2b00      	cmp	r3, #0
 800e726:	d101      	bne.n	800e72c <xQueueGenericSendFromISR+0x40>
 800e728:	2301      	movs	r3, #1
 800e72a:	e000      	b.n	800e72e <xQueueGenericSendFromISR+0x42>
 800e72c:	2300      	movs	r3, #0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10a      	bne.n	800e748 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e744:	bf00      	nop
 800e746:	e7fe      	b.n	800e746 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d103      	bne.n	800e756 <xQueueGenericSendFromISR+0x6a>
 800e74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e752:	2b01      	cmp	r3, #1
 800e754:	d101      	bne.n	800e75a <xQueueGenericSendFromISR+0x6e>
 800e756:	2301      	movs	r3, #1
 800e758:	e000      	b.n	800e75c <xQueueGenericSendFromISR+0x70>
 800e75a:	2300      	movs	r3, #0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10a      	bne.n	800e776 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	623b      	str	r3, [r7, #32]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e776:	f7ff fd77 	bl	800e268 <vPortValidateInterruptPriority>
	__asm volatile
 800e77a:	f3ef 8211 	mrs	r2, BASEPRI
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	61fa      	str	r2, [r7, #28]
 800e790:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e792:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d302      	bcc.n	800e7a8 <xQueueGenericSendFromISR+0xbc>
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	2b02      	cmp	r3, #2
 800e7a6:	d12f      	bne.n	800e808 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7b8:	683a      	ldr	r2, [r7, #0]
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7be:	f000 f911 	bl	800e9e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ca:	d112      	bne.n	800e7f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d016      	beq.n	800e802 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d6:	3324      	adds	r3, #36	; 0x24
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fef7 	bl	800f5cc <xTaskRemoveFromEventList>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d00e      	beq.n	800e802 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00b      	beq.n	800e802 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	e007      	b.n	800e802 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	b25a      	sxtb	r2, r3
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e802:	2301      	movs	r3, #1
 800e804:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e806:	e001      	b.n	800e80c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e808:	2300      	movs	r3, #0
 800e80a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	f383 8811 	msr	BASEPRI, r3
}
 800e816:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3740      	adds	r7, #64	; 0x40
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
	...

0800e824 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08c      	sub	sp, #48	; 0x30
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e830:	2300      	movs	r3, #0
 800e832:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10a      	bne.n	800e854 <xQueueReceive+0x30>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	623b      	str	r3, [r7, #32]
}
 800e850:	bf00      	nop
 800e852:	e7fe      	b.n	800e852 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d103      	bne.n	800e862 <xQueueReceive+0x3e>
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <xQueueReceive+0x42>
 800e862:	2301      	movs	r3, #1
 800e864:	e000      	b.n	800e868 <xQueueReceive+0x44>
 800e866:	2300      	movs	r3, #0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <xQueueReceive+0x5e>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	61fb      	str	r3, [r7, #28]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e882:	f001 f865 	bl	800f950 <xTaskGetSchedulerState>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d102      	bne.n	800e892 <xQueueReceive+0x6e>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <xQueueReceive+0x72>
 800e892:	2301      	movs	r3, #1
 800e894:	e000      	b.n	800e898 <xQueueReceive+0x74>
 800e896:	2300      	movs	r3, #0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d10a      	bne.n	800e8b2 <xQueueReceive+0x8e>
	__asm volatile
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	61bb      	str	r3, [r7, #24]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8b2:	f7ff fbf7 	bl	800e0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d01f      	beq.n	800e902 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8c2:	68b9      	ldr	r1, [r7, #8]
 800e8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c6:	f000 f8f7 	bl	800eab8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	1e5a      	subs	r2, r3, #1
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00f      	beq.n	800e8fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	3310      	adds	r3, #16
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f000 fe74 	bl	800f5cc <xTaskRemoveFromEventList>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d007      	beq.n	800e8fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8ea:	4b3d      	ldr	r3, [pc, #244]	; (800e9e0 <xQueueReceive+0x1bc>)
 800e8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8fa:	f7ff fc03 	bl	800e104 <vPortExitCritical>
				return pdPASS;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e069      	b.n	800e9d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e908:	f7ff fbfc 	bl	800e104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e90c:	2300      	movs	r3, #0
 800e90e:	e062      	b.n	800e9d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	2b00      	cmp	r3, #0
 800e914:	d106      	bne.n	800e924 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e916:	f107 0310 	add.w	r3, r7, #16
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 feba 	bl	800f694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e920:	2301      	movs	r3, #1
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e924:	f7ff fbee 	bl	800e104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e928:	f000 fc26 	bl	800f178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e92c:	f7ff fbba 	bl	800e0a4 <vPortEnterCritical>
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e936:	b25b      	sxtb	r3, r3
 800e938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e93c:	d103      	bne.n	800e946 <xQueueReceive+0x122>
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e94c:	b25b      	sxtb	r3, r3
 800e94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e952:	d103      	bne.n	800e95c <xQueueReceive+0x138>
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	2200      	movs	r2, #0
 800e958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e95c:	f7ff fbd2 	bl	800e104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e960:	1d3a      	adds	r2, r7, #4
 800e962:	f107 0310 	add.w	r3, r7, #16
 800e966:	4611      	mov	r1, r2
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 fea9 	bl	800f6c0 <xTaskCheckForTimeOut>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d123      	bne.n	800e9bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e976:	f000 f917 	bl	800eba8 <prvIsQueueEmpty>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d017      	beq.n	800e9b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e982:	3324      	adds	r3, #36	; 0x24
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	4611      	mov	r1, r2
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 fdcf 	bl	800f52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e98e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e990:	f000 f8b8 	bl	800eb04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e994:	f000 fbfe 	bl	800f194 <xTaskResumeAll>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d189      	bne.n	800e8b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e99e:	4b10      	ldr	r3, [pc, #64]	; (800e9e0 <xQueueReceive+0x1bc>)
 800e9a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a4:	601a      	str	r2, [r3, #0]
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	f3bf 8f6f 	isb	sy
 800e9ae:	e780      	b.n	800e8b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b2:	f000 f8a7 	bl	800eb04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9b6:	f000 fbed 	bl	800f194 <xTaskResumeAll>
 800e9ba:	e77a      	b.n	800e8b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9be:	f000 f8a1 	bl	800eb04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9c2:	f000 fbe7 	bl	800f194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9c8:	f000 f8ee 	bl	800eba8 <prvIsQueueEmpty>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f43f af6f 	beq.w	800e8b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3730      	adds	r7, #48	; 0x30
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	e000ed04 	.word	0xe000ed04

0800e9e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10d      	bne.n	800ea1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d14d      	bne.n	800eaa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 ffbc 	bl	800f98c <xTaskPriorityDisinherit>
 800ea14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	609a      	str	r2, [r3, #8]
 800ea1c:	e043      	b.n	800eaa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d119      	bne.n	800ea58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6858      	ldr	r0, [r3, #4]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	68b9      	ldr	r1, [r7, #8]
 800ea30:	f002 fcdc 	bl	80113ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3c:	441a      	add	r2, r3
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d32b      	bcc.n	800eaa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	605a      	str	r2, [r3, #4]
 800ea56:	e026      	b.n	800eaa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	68d8      	ldr	r0, [r3, #12]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea60:	461a      	mov	r2, r3
 800ea62:	68b9      	ldr	r1, [r7, #8]
 800ea64:	f002 fcc2 	bl	80113ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea70:	425b      	negs	r3, r3
 800ea72:	441a      	add	r2, r3
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	68da      	ldr	r2, [r3, #12]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d207      	bcs.n	800ea94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	689a      	ldr	r2, [r3, #8]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8c:	425b      	negs	r3, r3
 800ea8e:	441a      	add	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d105      	bne.n	800eaa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eaae:	697b      	ldr	r3, [r7, #20]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d018      	beq.n	800eafc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68da      	ldr	r2, [r3, #12]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ead2:	441a      	add	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68da      	ldr	r2, [r3, #12]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d303      	bcc.n	800eaec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	68d9      	ldr	r1, [r3, #12]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	6838      	ldr	r0, [r7, #0]
 800eaf8:	f002 fc78 	bl	80113ec <memcpy>
	}
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb0c:	f7ff faca 	bl	800e0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb18:	e011      	b.n	800eb3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d012      	beq.n	800eb48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3324      	adds	r3, #36	; 0x24
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 fd50 	bl	800f5cc <xTaskRemoveFromEventList>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d001      	beq.n	800eb36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb32:	f000 fe27 	bl	800f784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	dce9      	bgt.n	800eb1a <prvUnlockQueue+0x16>
 800eb46:	e000      	b.n	800eb4a <prvUnlockQueue+0x46>
					break;
 800eb48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	22ff      	movs	r2, #255	; 0xff
 800eb4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eb52:	f7ff fad7 	bl	800e104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb56:	f7ff faa5 	bl	800e0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb62:	e011      	b.n	800eb88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d012      	beq.n	800eb92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	3310      	adds	r3, #16
 800eb70:	4618      	mov	r0, r3
 800eb72:	f000 fd2b 	bl	800f5cc <xTaskRemoveFromEventList>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb7c:	f000 fe02 	bl	800f784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb80:	7bbb      	ldrb	r3, [r7, #14]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	dce9      	bgt.n	800eb64 <prvUnlockQueue+0x60>
 800eb90:	e000      	b.n	800eb94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	22ff      	movs	r2, #255	; 0xff
 800eb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eb9c:	f7ff fab2 	bl	800e104 <vPortExitCritical>
}
 800eba0:	bf00      	nop
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebb0:	f7ff fa78 	bl	800e0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d102      	bne.n	800ebc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e001      	b.n	800ebc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebc6:	f7ff fa9d 	bl	800e104 <vPortExitCritical>

	return xReturn;
 800ebca:	68fb      	ldr	r3, [r7, #12]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebdc:	f7ff fa62 	bl	800e0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d102      	bne.n	800ebf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ebec:	2301      	movs	r3, #1
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	e001      	b.n	800ebf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebf6:	f7ff fa85 	bl	800e104 <vPortExitCritical>

	return xReturn;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec04:	b480      	push	{r7}
 800ec06:	b085      	sub	sp, #20
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec0e:	2300      	movs	r3, #0
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e014      	b.n	800ec3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec14:	4a0f      	ldr	r2, [pc, #60]	; (800ec54 <vQueueAddToRegistry+0x50>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10b      	bne.n	800ec38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec20:	490c      	ldr	r1, [pc, #48]	; (800ec54 <vQueueAddToRegistry+0x50>)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	683a      	ldr	r2, [r7, #0]
 800ec26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec2a:	4a0a      	ldr	r2, [pc, #40]	; (800ec54 <vQueueAddToRegistry+0x50>)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	4413      	add	r3, r2
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec36:	e006      	b.n	800ec46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b07      	cmp	r3, #7
 800ec42:	d9e7      	bls.n	800ec14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	24004f00 	.word	0x24004f00

0800ec58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ec68:	f7ff fa1c 	bl	800e0a4 <vPortEnterCritical>
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec72:	b25b      	sxtb	r3, r3
 800ec74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec78:	d103      	bne.n	800ec82 <vQueueWaitForMessageRestricted+0x2a>
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec88:	b25b      	sxtb	r3, r3
 800ec8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8e:	d103      	bne.n	800ec98 <vQueueWaitForMessageRestricted+0x40>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec98:	f7ff fa34 	bl	800e104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d106      	bne.n	800ecb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	3324      	adds	r3, #36	; 0x24
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	68b9      	ldr	r1, [r7, #8]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f000 fc61 	bl	800f574 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ecb2:	6978      	ldr	r0, [r7, #20]
 800ecb4:	f7ff ff26 	bl	800eb04 <prvUnlockQueue>
	}
 800ecb8:	bf00      	nop
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b08e      	sub	sp, #56	; 0x38
 800ecc4:	af04      	add	r7, sp, #16
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
 800eccc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ecce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10a      	bne.n	800ecea <xTaskCreateStatic+0x2a>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	623b      	str	r3, [r7, #32]
}
 800ece6:	bf00      	nop
 800ece8:	e7fe      	b.n	800ece8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10a      	bne.n	800ed06 <xTaskCreateStatic+0x46>
	__asm volatile
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	61fb      	str	r3, [r7, #28]
}
 800ed02:	bf00      	nop
 800ed04:	e7fe      	b.n	800ed04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed06:	23a8      	movs	r3, #168	; 0xa8
 800ed08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	2ba8      	cmp	r3, #168	; 0xa8
 800ed0e:	d00a      	beq.n	800ed26 <xTaskCreateStatic+0x66>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	61bb      	str	r3, [r7, #24]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d01e      	beq.n	800ed6c <xTaskCreateStatic+0xac>
 800ed2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d01b      	beq.n	800ed6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	2202      	movs	r2, #2
 800ed42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed46:	2300      	movs	r3, #0
 800ed48:	9303      	str	r3, [sp, #12]
 800ed4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4c:	9302      	str	r3, [sp, #8]
 800ed4e:	f107 0314 	add.w	r3, r7, #20
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f000 f850 	bl	800ee04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed66:	f000 f8f3 	bl	800ef50 <prvAddNewTaskToReadyList>
 800ed6a:	e001      	b.n	800ed70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed70:	697b      	ldr	r3, [r7, #20]
	}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3728      	adds	r7, #40	; 0x28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b08c      	sub	sp, #48	; 0x30
 800ed7e:	af04      	add	r7, sp, #16
 800ed80:	60f8      	str	r0, [r7, #12]
 800ed82:	60b9      	str	r1, [r7, #8]
 800ed84:	603b      	str	r3, [r7, #0]
 800ed86:	4613      	mov	r3, r2
 800ed88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed8a:	88fb      	ldrh	r3, [r7, #6]
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe fdbc 	bl	800d90c <pvPortMalloc>
 800ed94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00e      	beq.n	800edba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ed9c:	20a8      	movs	r0, #168	; 0xa8
 800ed9e:	f7fe fdb5 	bl	800d90c <pvPortMalloc>
 800eda2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	697a      	ldr	r2, [r7, #20]
 800edae:	631a      	str	r2, [r3, #48]	; 0x30
 800edb0:	e005      	b.n	800edbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800edb2:	6978      	ldr	r0, [r7, #20]
 800edb4:	f7fe fe76 	bl	800daa4 <vPortFree>
 800edb8:	e001      	b.n	800edbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800edba:	2300      	movs	r3, #0
 800edbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d017      	beq.n	800edf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edcc:	88fa      	ldrh	r2, [r7, #6]
 800edce:	2300      	movs	r3, #0
 800edd0:	9303      	str	r3, [sp, #12]
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	9302      	str	r3, [sp, #8]
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	9301      	str	r3, [sp, #4]
 800edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	68b9      	ldr	r1, [r7, #8]
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f000 f80e 	bl	800ee04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ede8:	69f8      	ldr	r0, [r7, #28]
 800edea:	f000 f8b1 	bl	800ef50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800edee:	2301      	movs	r3, #1
 800edf0:	61bb      	str	r3, [r7, #24]
 800edf2:	e002      	b.n	800edfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800edf4:	f04f 33ff 	mov.w	r3, #4294967295
 800edf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800edfa:	69bb      	ldr	r3, [r7, #24]
	}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3720      	adds	r7, #32
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
 800ee10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	21a5      	movs	r1, #165	; 0xa5
 800ee1e:	f002 fa00 	bl	8011222 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee26:	6879      	ldr	r1, [r7, #4]
 800ee28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ee2c:	440b      	add	r3, r1
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4413      	add	r3, r2
 800ee32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	f023 0307 	bic.w	r3, r3, #7
 800ee3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00a      	beq.n	800ee5c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	617b      	str	r3, [r7, #20]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d01f      	beq.n	800eea2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee62:	2300      	movs	r3, #0
 800ee64:	61fb      	str	r3, [r7, #28]
 800ee66:	e012      	b.n	800ee8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	7819      	ldrb	r1, [r3, #0]
 800ee70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	4413      	add	r3, r2
 800ee76:	3334      	adds	r3, #52	; 0x34
 800ee78:	460a      	mov	r2, r1
 800ee7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	4413      	add	r3, r2
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d006      	beq.n	800ee96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	61fb      	str	r3, [r7, #28]
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	2b0f      	cmp	r3, #15
 800ee92:	d9e9      	bls.n	800ee68 <prvInitialiseNewTask+0x64>
 800ee94:	e000      	b.n	800ee98 <prvInitialiseNewTask+0x94>
			{
				break;
 800ee96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eea0:	e003      	b.n	800eeaa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeac:	2b37      	cmp	r3, #55	; 0x37
 800eeae:	d901      	bls.n	800eeb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eeb0:	2337      	movs	r3, #55	; 0x37
 800eeb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eebe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	2200      	movs	r2, #0
 800eec4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	3304      	adds	r3, #4
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe ff28 	bl	800dd20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed2:	3318      	adds	r3, #24
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fe ff23 	bl	800dd20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eede:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	2200      	movs	r2, #0
 800eef4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefa:	2200      	movs	r2, #0
 800eefc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	3354      	adds	r3, #84	; 0x54
 800ef04:	224c      	movs	r2, #76	; 0x4c
 800ef06:	2100      	movs	r1, #0
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f002 f98a 	bl	8011222 <memset>
 800ef0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef10:	4a0c      	ldr	r2, [pc, #48]	; (800ef44 <prvInitialiseNewTask+0x140>)
 800ef12:	659a      	str	r2, [r3, #88]	; 0x58
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	4a0c      	ldr	r2, [pc, #48]	; (800ef48 <prvInitialiseNewTask+0x144>)
 800ef18:	65da      	str	r2, [r3, #92]	; 0x5c
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	4a0b      	ldr	r2, [pc, #44]	; (800ef4c <prvInitialiseNewTask+0x148>)
 800ef1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef20:	683a      	ldr	r2, [r7, #0]
 800ef22:	68f9      	ldr	r1, [r7, #12]
 800ef24:	69b8      	ldr	r0, [r7, #24]
 800ef26:	f7fe ff8f 	bl	800de48 <pxPortInitialiseStack>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef3c:	bf00      	nop
 800ef3e:	3720      	adds	r7, #32
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	24005574 	.word	0x24005574
 800ef48:	240055dc 	.word	0x240055dc
 800ef4c:	24005644 	.word	0x24005644

0800ef50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef58:	f7ff f8a4 	bl	800e0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef5c:	4b2d      	ldr	r3, [pc, #180]	; (800f014 <prvAddNewTaskToReadyList+0xc4>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3301      	adds	r3, #1
 800ef62:	4a2c      	ldr	r2, [pc, #176]	; (800f014 <prvAddNewTaskToReadyList+0xc4>)
 800ef64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef66:	4b2c      	ldr	r3, [pc, #176]	; (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d109      	bne.n	800ef82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef6e:	4a2a      	ldr	r2, [pc, #168]	; (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef74:	4b27      	ldr	r3, [pc, #156]	; (800f014 <prvAddNewTaskToReadyList+0xc4>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d110      	bne.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef7c:	f000 fc26 	bl	800f7cc <prvInitialiseTaskLists>
 800ef80:	e00d      	b.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef82:	4b26      	ldr	r3, [pc, #152]	; (800f01c <prvAddNewTaskToReadyList+0xcc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d109      	bne.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef8a:	4b23      	ldr	r3, [pc, #140]	; (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d802      	bhi.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef98:	4a1f      	ldr	r2, [pc, #124]	; (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef9e:	4b20      	ldr	r3, [pc, #128]	; (800f020 <prvAddNewTaskToReadyList+0xd0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3301      	adds	r3, #1
 800efa4:	4a1e      	ldr	r2, [pc, #120]	; (800f020 <prvAddNewTaskToReadyList+0xd0>)
 800efa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800efa8:	4b1d      	ldr	r3, [pc, #116]	; (800f020 <prvAddNewTaskToReadyList+0xd0>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efb4:	4b1b      	ldr	r3, [pc, #108]	; (800f024 <prvAddNewTaskToReadyList+0xd4>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d903      	bls.n	800efc4 <prvAddNewTaskToReadyList+0x74>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc0:	4a18      	ldr	r2, [pc, #96]	; (800f024 <prvAddNewTaskToReadyList+0xd4>)
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc8:	4613      	mov	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4a15      	ldr	r2, [pc, #84]	; (800f028 <prvAddNewTaskToReadyList+0xd8>)
 800efd2:	441a      	add	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f7fe fead 	bl	800dd3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800efe0:	f7ff f890 	bl	800e104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800efe4:	4b0d      	ldr	r3, [pc, #52]	; (800f01c <prvAddNewTaskToReadyList+0xcc>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00e      	beq.n	800f00a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800efec:	4b0a      	ldr	r3, [pc, #40]	; (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d207      	bcs.n	800f00a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800effa:	4b0c      	ldr	r3, [pc, #48]	; (800f02c <prvAddNewTaskToReadyList+0xdc>)
 800effc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	24005414 	.word	0x24005414
 800f018:	24004f40 	.word	0x24004f40
 800f01c:	24005420 	.word	0x24005420
 800f020:	24005430 	.word	0x24005430
 800f024:	2400541c 	.word	0x2400541c
 800f028:	24004f44 	.word	0x24004f44
 800f02c:	e000ed04 	.word	0xe000ed04

0800f030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f038:	2300      	movs	r3, #0
 800f03a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d017      	beq.n	800f072 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f042:	4b13      	ldr	r3, [pc, #76]	; (800f090 <vTaskDelay+0x60>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00a      	beq.n	800f060 <vTaskDelay+0x30>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	60bb      	str	r3, [r7, #8]
}
 800f05c:	bf00      	nop
 800f05e:	e7fe      	b.n	800f05e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f060:	f000 f88a 	bl	800f178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f064:	2100      	movs	r1, #0
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fcfe 	bl	800fa68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f06c:	f000 f892 	bl	800f194 <xTaskResumeAll>
 800f070:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d107      	bne.n	800f088 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f078:	4b06      	ldr	r3, [pc, #24]	; (800f094 <vTaskDelay+0x64>)
 800f07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	f3bf 8f4f 	dsb	sy
 800f084:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f088:	bf00      	nop
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	2400543c 	.word	0x2400543c
 800f094:	e000ed04 	.word	0xe000ed04

0800f098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08a      	sub	sp, #40	; 0x28
 800f09c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0a6:	463a      	mov	r2, r7
 800f0a8:	1d39      	adds	r1, r7, #4
 800f0aa:	f107 0308 	add.w	r3, r7, #8
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fe fbf8 	bl	800d8a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	9202      	str	r2, [sp, #8]
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	2300      	movs	r3, #0
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	460a      	mov	r2, r1
 800f0c6:	4924      	ldr	r1, [pc, #144]	; (800f158 <vTaskStartScheduler+0xc0>)
 800f0c8:	4824      	ldr	r0, [pc, #144]	; (800f15c <vTaskStartScheduler+0xc4>)
 800f0ca:	f7ff fdf9 	bl	800ecc0 <xTaskCreateStatic>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	4a23      	ldr	r2, [pc, #140]	; (800f160 <vTaskStartScheduler+0xc8>)
 800f0d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0d4:	4b22      	ldr	r3, [pc, #136]	; (800f160 <vTaskStartScheduler+0xc8>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	617b      	str	r3, [r7, #20]
 800f0e0:	e001      	b.n	800f0e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d102      	bne.n	800f0f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0ec:	f000 fd10 	bl	800fb10 <xTimerCreateTimerTask>
 800f0f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d11b      	bne.n	800f130 <vTaskStartScheduler+0x98>
	__asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	613b      	str	r3, [r7, #16]
}
 800f10a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f10c:	4b15      	ldr	r3, [pc, #84]	; (800f164 <vTaskStartScheduler+0xcc>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	3354      	adds	r3, #84	; 0x54
 800f112:	4a15      	ldr	r2, [pc, #84]	; (800f168 <vTaskStartScheduler+0xd0>)
 800f114:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f116:	4b15      	ldr	r3, [pc, #84]	; (800f16c <vTaskStartScheduler+0xd4>)
 800f118:	f04f 32ff 	mov.w	r2, #4294967295
 800f11c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f11e:	4b14      	ldr	r3, [pc, #80]	; (800f170 <vTaskStartScheduler+0xd8>)
 800f120:	2201      	movs	r2, #1
 800f122:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f124:	4b13      	ldr	r3, [pc, #76]	; (800f174 <vTaskStartScheduler+0xdc>)
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f12a:	f7fe ff19 	bl	800df60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f12e:	e00e      	b.n	800f14e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f136:	d10a      	bne.n	800f14e <vTaskStartScheduler+0xb6>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	60fb      	str	r3, [r7, #12]
}
 800f14a:	bf00      	nop
 800f14c:	e7fe      	b.n	800f14c <vTaskStartScheduler+0xb4>
}
 800f14e:	bf00      	nop
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	08014894 	.word	0x08014894
 800f15c:	0800f79d 	.word	0x0800f79d
 800f160:	24005438 	.word	0x24005438
 800f164:	24004f40 	.word	0x24004f40
 800f168:	2400006c 	.word	0x2400006c
 800f16c:	24005434 	.word	0x24005434
 800f170:	24005420 	.word	0x24005420
 800f174:	24005418 	.word	0x24005418

0800f178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f178:	b480      	push	{r7}
 800f17a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f17c:	4b04      	ldr	r3, [pc, #16]	; (800f190 <vTaskSuspendAll+0x18>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	3301      	adds	r3, #1
 800f182:	4a03      	ldr	r2, [pc, #12]	; (800f190 <vTaskSuspendAll+0x18>)
 800f184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f186:	bf00      	nop
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr
 800f190:	2400543c 	.word	0x2400543c

0800f194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f19a:	2300      	movs	r3, #0
 800f19c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1a2:	4b42      	ldr	r3, [pc, #264]	; (800f2ac <xTaskResumeAll+0x118>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10a      	bne.n	800f1c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	603b      	str	r3, [r7, #0]
}
 800f1bc:	bf00      	nop
 800f1be:	e7fe      	b.n	800f1be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1c0:	f7fe ff70 	bl	800e0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1c4:	4b39      	ldr	r3, [pc, #228]	; (800f2ac <xTaskResumeAll+0x118>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	4a38      	ldr	r2, [pc, #224]	; (800f2ac <xTaskResumeAll+0x118>)
 800f1cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1ce:	4b37      	ldr	r3, [pc, #220]	; (800f2ac <xTaskResumeAll+0x118>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d162      	bne.n	800f29c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1d6:	4b36      	ldr	r3, [pc, #216]	; (800f2b0 <xTaskResumeAll+0x11c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d05e      	beq.n	800f29c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1de:	e02f      	b.n	800f240 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e0:	4b34      	ldr	r3, [pc, #208]	; (800f2b4 <xTaskResumeAll+0x120>)
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	3318      	adds	r3, #24
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fe fe01 	bl	800ddf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fe fdfc 	bl	800ddf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f200:	4b2d      	ldr	r3, [pc, #180]	; (800f2b8 <xTaskResumeAll+0x124>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	429a      	cmp	r2, r3
 800f206:	d903      	bls.n	800f210 <xTaskResumeAll+0x7c>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20c:	4a2a      	ldr	r2, [pc, #168]	; (800f2b8 <xTaskResumeAll+0x124>)
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f214:	4613      	mov	r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	4a27      	ldr	r2, [pc, #156]	; (800f2bc <xTaskResumeAll+0x128>)
 800f21e:	441a      	add	r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3304      	adds	r3, #4
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7fe fd87 	bl	800dd3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f230:	4b23      	ldr	r3, [pc, #140]	; (800f2c0 <xTaskResumeAll+0x12c>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f236:	429a      	cmp	r2, r3
 800f238:	d302      	bcc.n	800f240 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f23a:	4b22      	ldr	r3, [pc, #136]	; (800f2c4 <xTaskResumeAll+0x130>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f240:	4b1c      	ldr	r3, [pc, #112]	; (800f2b4 <xTaskResumeAll+0x120>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1cb      	bne.n	800f1e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d001      	beq.n	800f252 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f24e:	f000 fb5f 	bl	800f910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f252:	4b1d      	ldr	r3, [pc, #116]	; (800f2c8 <xTaskResumeAll+0x134>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d010      	beq.n	800f280 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f25e:	f000 f847 	bl	800f2f0 <xTaskIncrementTick>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f268:	4b16      	ldr	r3, [pc, #88]	; (800f2c4 <xTaskResumeAll+0x130>)
 800f26a:	2201      	movs	r2, #1
 800f26c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	3b01      	subs	r3, #1
 800f272:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1f1      	bne.n	800f25e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f27a:	4b13      	ldr	r3, [pc, #76]	; (800f2c8 <xTaskResumeAll+0x134>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f280:	4b10      	ldr	r3, [pc, #64]	; (800f2c4 <xTaskResumeAll+0x130>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d009      	beq.n	800f29c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f288:	2301      	movs	r3, #1
 800f28a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f28c:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <xTaskResumeAll+0x138>)
 800f28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f29c:	f7fe ff32 	bl	800e104 <vPortExitCritical>

	return xAlreadyYielded;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	2400543c 	.word	0x2400543c
 800f2b0:	24005414 	.word	0x24005414
 800f2b4:	240053d4 	.word	0x240053d4
 800f2b8:	2400541c 	.word	0x2400541c
 800f2bc:	24004f44 	.word	0x24004f44
 800f2c0:	24004f40 	.word	0x24004f40
 800f2c4:	24005428 	.word	0x24005428
 800f2c8:	24005424 	.word	0x24005424
 800f2cc:	e000ed04 	.word	0xe000ed04

0800f2d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2d6:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <xTaskGetTickCount+0x1c>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2dc:	687b      	ldr	r3, [r7, #4]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	370c      	adds	r7, #12
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	24005418 	.word	0x24005418

0800f2f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b086      	sub	sp, #24
 800f2f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2fa:	4b4f      	ldr	r3, [pc, #316]	; (800f438 <xTaskIncrementTick+0x148>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f040 808f 	bne.w	800f422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f304:	4b4d      	ldr	r3, [pc, #308]	; (800f43c <xTaskIncrementTick+0x14c>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3301      	adds	r3, #1
 800f30a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f30c:	4a4b      	ldr	r2, [pc, #300]	; (800f43c <xTaskIncrementTick+0x14c>)
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d120      	bne.n	800f35a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f318:	4b49      	ldr	r3, [pc, #292]	; (800f440 <xTaskIncrementTick+0x150>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d00a      	beq.n	800f338 <xTaskIncrementTick+0x48>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	603b      	str	r3, [r7, #0]
}
 800f334:	bf00      	nop
 800f336:	e7fe      	b.n	800f336 <xTaskIncrementTick+0x46>
 800f338:	4b41      	ldr	r3, [pc, #260]	; (800f440 <xTaskIncrementTick+0x150>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	60fb      	str	r3, [r7, #12]
 800f33e:	4b41      	ldr	r3, [pc, #260]	; (800f444 <xTaskIncrementTick+0x154>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a3f      	ldr	r2, [pc, #252]	; (800f440 <xTaskIncrementTick+0x150>)
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	4a3f      	ldr	r2, [pc, #252]	; (800f444 <xTaskIncrementTick+0x154>)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6013      	str	r3, [r2, #0]
 800f34c:	4b3e      	ldr	r3, [pc, #248]	; (800f448 <xTaskIncrementTick+0x158>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	3301      	adds	r3, #1
 800f352:	4a3d      	ldr	r2, [pc, #244]	; (800f448 <xTaskIncrementTick+0x158>)
 800f354:	6013      	str	r3, [r2, #0]
 800f356:	f000 fadb 	bl	800f910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f35a:	4b3c      	ldr	r3, [pc, #240]	; (800f44c <xTaskIncrementTick+0x15c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	693a      	ldr	r2, [r7, #16]
 800f360:	429a      	cmp	r2, r3
 800f362:	d349      	bcc.n	800f3f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f364:	4b36      	ldr	r3, [pc, #216]	; (800f440 <xTaskIncrementTick+0x150>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d104      	bne.n	800f378 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f36e:	4b37      	ldr	r3, [pc, #220]	; (800f44c <xTaskIncrementTick+0x15c>)
 800f370:	f04f 32ff 	mov.w	r2, #4294967295
 800f374:	601a      	str	r2, [r3, #0]
					break;
 800f376:	e03f      	b.n	800f3f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f378:	4b31      	ldr	r3, [pc, #196]	; (800f440 <xTaskIncrementTick+0x150>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d203      	bcs.n	800f398 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f390:	4a2e      	ldr	r2, [pc, #184]	; (800f44c <xTaskIncrementTick+0x15c>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f396:	e02f      	b.n	800f3f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	3304      	adds	r3, #4
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fe fd29 	bl	800ddf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d004      	beq.n	800f3b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	3318      	adds	r3, #24
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe fd20 	bl	800ddf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3b8:	4b25      	ldr	r3, [pc, #148]	; (800f450 <xTaskIncrementTick+0x160>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d903      	bls.n	800f3c8 <xTaskIncrementTick+0xd8>
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c4:	4a22      	ldr	r2, [pc, #136]	; (800f450 <xTaskIncrementTick+0x160>)
 800f3c6:	6013      	str	r3, [r2, #0]
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	4413      	add	r3, r2
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4a1f      	ldr	r2, [pc, #124]	; (800f454 <xTaskIncrementTick+0x164>)
 800f3d6:	441a      	add	r2, r3
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4610      	mov	r0, r2
 800f3e0:	f7fe fcab 	bl	800dd3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e8:	4b1b      	ldr	r3, [pc, #108]	; (800f458 <xTaskIncrementTick+0x168>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d3b8      	bcc.n	800f364 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3f6:	e7b5      	b.n	800f364 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f3f8:	4b17      	ldr	r3, [pc, #92]	; (800f458 <xTaskIncrementTick+0x168>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3fe:	4915      	ldr	r1, [pc, #84]	; (800f454 <xTaskIncrementTick+0x164>)
 800f400:	4613      	mov	r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	440b      	add	r3, r1
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d901      	bls.n	800f414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f410:	2301      	movs	r3, #1
 800f412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f414:	4b11      	ldr	r3, [pc, #68]	; (800f45c <xTaskIncrementTick+0x16c>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d007      	beq.n	800f42c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f41c:	2301      	movs	r3, #1
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	e004      	b.n	800f42c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f422:	4b0f      	ldr	r3, [pc, #60]	; (800f460 <xTaskIncrementTick+0x170>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3301      	adds	r3, #1
 800f428:	4a0d      	ldr	r2, [pc, #52]	; (800f460 <xTaskIncrementTick+0x170>)
 800f42a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f42c:	697b      	ldr	r3, [r7, #20]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	2400543c 	.word	0x2400543c
 800f43c:	24005418 	.word	0x24005418
 800f440:	240053cc 	.word	0x240053cc
 800f444:	240053d0 	.word	0x240053d0
 800f448:	2400542c 	.word	0x2400542c
 800f44c:	24005434 	.word	0x24005434
 800f450:	2400541c 	.word	0x2400541c
 800f454:	24004f44 	.word	0x24004f44
 800f458:	24004f40 	.word	0x24004f40
 800f45c:	24005428 	.word	0x24005428
 800f460:	24005424 	.word	0x24005424

0800f464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f46a:	4b2a      	ldr	r3, [pc, #168]	; (800f514 <vTaskSwitchContext+0xb0>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d003      	beq.n	800f47a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f472:	4b29      	ldr	r3, [pc, #164]	; (800f518 <vTaskSwitchContext+0xb4>)
 800f474:	2201      	movs	r2, #1
 800f476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f478:	e046      	b.n	800f508 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f47a:	4b27      	ldr	r3, [pc, #156]	; (800f518 <vTaskSwitchContext+0xb4>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f480:	4b26      	ldr	r3, [pc, #152]	; (800f51c <vTaskSwitchContext+0xb8>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	60fb      	str	r3, [r7, #12]
 800f486:	e010      	b.n	800f4aa <vTaskSwitchContext+0x46>
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d10a      	bne.n	800f4a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	607b      	str	r3, [r7, #4]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <vTaskSwitchContext+0x3e>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	491d      	ldr	r1, [pc, #116]	; (800f520 <vTaskSwitchContext+0xbc>)
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4413      	add	r3, r2
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	440b      	add	r3, r1
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d0e4      	beq.n	800f488 <vTaskSwitchContext+0x24>
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	4413      	add	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4a15      	ldr	r2, [pc, #84]	; (800f520 <vTaskSwitchContext+0xbc>)
 800f4ca:	4413      	add	r3, r2
 800f4cc:	60bb      	str	r3, [r7, #8]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	605a      	str	r2, [r3, #4]
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	3308      	adds	r3, #8
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d104      	bne.n	800f4ee <vTaskSwitchContext+0x8a>
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	685a      	ldr	r2, [r3, #4]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	605a      	str	r2, [r3, #4]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	4a0b      	ldr	r2, [pc, #44]	; (800f524 <vTaskSwitchContext+0xc0>)
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	4a08      	ldr	r2, [pc, #32]	; (800f51c <vTaskSwitchContext+0xb8>)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f4fe:	4b09      	ldr	r3, [pc, #36]	; (800f524 <vTaskSwitchContext+0xc0>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3354      	adds	r3, #84	; 0x54
 800f504:	4a08      	ldr	r2, [pc, #32]	; (800f528 <vTaskSwitchContext+0xc4>)
 800f506:	6013      	str	r3, [r2, #0]
}
 800f508:	bf00      	nop
 800f50a:	3714      	adds	r7, #20
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr
 800f514:	2400543c 	.word	0x2400543c
 800f518:	24005428 	.word	0x24005428
 800f51c:	2400541c 	.word	0x2400541c
 800f520:	24004f44 	.word	0x24004f44
 800f524:	24004f40 	.word	0x24004f40
 800f528:	2400006c 	.word	0x2400006c

0800f52c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10a      	bne.n	800f552 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	60fb      	str	r3, [r7, #12]
}
 800f54e:	bf00      	nop
 800f550:	e7fe      	b.n	800f550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f552:	4b07      	ldr	r3, [pc, #28]	; (800f570 <vTaskPlaceOnEventList+0x44>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	3318      	adds	r3, #24
 800f558:	4619      	mov	r1, r3
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f7fe fc11 	bl	800dd82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f560:	2101      	movs	r1, #1
 800f562:	6838      	ldr	r0, [r7, #0]
 800f564:	f000 fa80 	bl	800fa68 <prvAddCurrentTaskToDelayedList>
}
 800f568:	bf00      	nop
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	24004f40 	.word	0x24004f40

0800f574 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10a      	bne.n	800f59c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	617b      	str	r3, [r7, #20]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f59c:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	3318      	adds	r3, #24
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7fe fbc8 	bl	800dd3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d002      	beq.n	800f5b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	68b8      	ldr	r0, [r7, #8]
 800f5ba:	f000 fa55 	bl	800fa68 <prvAddCurrentTaskToDelayedList>
	}
 800f5be:	bf00      	nop
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	24004f40 	.word	0x24004f40

0800f5cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10a      	bne.n	800f5f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	60fb      	str	r3, [r7, #12]
}
 800f5f4:	bf00      	nop
 800f5f6:	e7fe      	b.n	800f5f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	3318      	adds	r3, #24
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe fbf9 	bl	800ddf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f602:	4b1e      	ldr	r3, [pc, #120]	; (800f67c <xTaskRemoveFromEventList+0xb0>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d11d      	bne.n	800f646 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	3304      	adds	r3, #4
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fe fbf0 	bl	800ddf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f618:	4b19      	ldr	r3, [pc, #100]	; (800f680 <xTaskRemoveFromEventList+0xb4>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d903      	bls.n	800f628 <xTaskRemoveFromEventList+0x5c>
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f624:	4a16      	ldr	r2, [pc, #88]	; (800f680 <xTaskRemoveFromEventList+0xb4>)
 800f626:	6013      	str	r3, [r2, #0]
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f62c:	4613      	mov	r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	4413      	add	r3, r2
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	4a13      	ldr	r2, [pc, #76]	; (800f684 <xTaskRemoveFromEventList+0xb8>)
 800f636:	441a      	add	r2, r3
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	3304      	adds	r3, #4
 800f63c:	4619      	mov	r1, r3
 800f63e:	4610      	mov	r0, r2
 800f640:	f7fe fb7b 	bl	800dd3a <vListInsertEnd>
 800f644:	e005      	b.n	800f652 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	3318      	adds	r3, #24
 800f64a:	4619      	mov	r1, r3
 800f64c:	480e      	ldr	r0, [pc, #56]	; (800f688 <xTaskRemoveFromEventList+0xbc>)
 800f64e:	f7fe fb74 	bl	800dd3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f656:	4b0d      	ldr	r3, [pc, #52]	; (800f68c <xTaskRemoveFromEventList+0xc0>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d905      	bls.n	800f66c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f660:	2301      	movs	r3, #1
 800f662:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f664:	4b0a      	ldr	r3, [pc, #40]	; (800f690 <xTaskRemoveFromEventList+0xc4>)
 800f666:	2201      	movs	r2, #1
 800f668:	601a      	str	r2, [r3, #0]
 800f66a:	e001      	b.n	800f670 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f66c:	2300      	movs	r3, #0
 800f66e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f670:	697b      	ldr	r3, [r7, #20]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3718      	adds	r7, #24
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	2400543c 	.word	0x2400543c
 800f680:	2400541c 	.word	0x2400541c
 800f684:	24004f44 	.word	0x24004f44
 800f688:	240053d4 	.word	0x240053d4
 800f68c:	24004f40 	.word	0x24004f40
 800f690:	24005428 	.word	0x24005428

0800f694 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f69c:	4b06      	ldr	r3, [pc, #24]	; (800f6b8 <vTaskInternalSetTimeOutState+0x24>)
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f6a4:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <vTaskInternalSetTimeOutState+0x28>)
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	605a      	str	r2, [r3, #4]
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	2400542c 	.word	0x2400542c
 800f6bc:	24005418 	.word	0x24005418

0800f6c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b088      	sub	sp, #32
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10a      	bne.n	800f6e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d4:	f383 8811 	msr	BASEPRI, r3
 800f6d8:	f3bf 8f6f 	isb	sy
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	613b      	str	r3, [r7, #16]
}
 800f6e2:	bf00      	nop
 800f6e4:	e7fe      	b.n	800f6e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10a      	bne.n	800f702 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f0:	f383 8811 	msr	BASEPRI, r3
 800f6f4:	f3bf 8f6f 	isb	sy
 800f6f8:	f3bf 8f4f 	dsb	sy
 800f6fc:	60fb      	str	r3, [r7, #12]
}
 800f6fe:	bf00      	nop
 800f700:	e7fe      	b.n	800f700 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f702:	f7fe fccf 	bl	800e0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f706:	4b1d      	ldr	r3, [pc, #116]	; (800f77c <xTaskCheckForTimeOut+0xbc>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	69ba      	ldr	r2, [r7, #24]
 800f712:	1ad3      	subs	r3, r2, r3
 800f714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71e:	d102      	bne.n	800f726 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f720:	2300      	movs	r3, #0
 800f722:	61fb      	str	r3, [r7, #28]
 800f724:	e023      	b.n	800f76e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	4b15      	ldr	r3, [pc, #84]	; (800f780 <xTaskCheckForTimeOut+0xc0>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d007      	beq.n	800f742 <xTaskCheckForTimeOut+0x82>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	69ba      	ldr	r2, [r7, #24]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d302      	bcc.n	800f742 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f73c:	2301      	movs	r3, #1
 800f73e:	61fb      	str	r3, [r7, #28]
 800f740:	e015      	b.n	800f76e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	697a      	ldr	r2, [r7, #20]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d20b      	bcs.n	800f764 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	1ad2      	subs	r2, r2, r3
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff ff9b 	bl	800f694 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f75e:	2300      	movs	r3, #0
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	e004      	b.n	800f76e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	2200      	movs	r2, #0
 800f768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f76a:	2301      	movs	r3, #1
 800f76c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f76e:	f7fe fcc9 	bl	800e104 <vPortExitCritical>

	return xReturn;
 800f772:	69fb      	ldr	r3, [r7, #28]
}
 800f774:	4618      	mov	r0, r3
 800f776:	3720      	adds	r7, #32
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	24005418 	.word	0x24005418
 800f780:	2400542c 	.word	0x2400542c

0800f784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f784:	b480      	push	{r7}
 800f786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f788:	4b03      	ldr	r3, [pc, #12]	; (800f798 <vTaskMissedYield+0x14>)
 800f78a:	2201      	movs	r2, #1
 800f78c:	601a      	str	r2, [r3, #0]
}
 800f78e:	bf00      	nop
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr
 800f798:	24005428 	.word	0x24005428

0800f79c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f7a4:	f000 f852 	bl	800f84c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f7a8:	4b06      	ldr	r3, [pc, #24]	; (800f7c4 <prvIdleTask+0x28>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d9f9      	bls.n	800f7a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f7b0:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <prvIdleTask+0x2c>)
 800f7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7b6:	601a      	str	r2, [r3, #0]
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f7c0:	e7f0      	b.n	800f7a4 <prvIdleTask+0x8>
 800f7c2:	bf00      	nop
 800f7c4:	24004f44 	.word	0x24004f44
 800f7c8:	e000ed04 	.word	0xe000ed04

0800f7cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	607b      	str	r3, [r7, #4]
 800f7d6:	e00c      	b.n	800f7f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4a12      	ldr	r2, [pc, #72]	; (800f82c <prvInitialiseTaskLists+0x60>)
 800f7e4:	4413      	add	r3, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fe fa7a 	bl	800dce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	607b      	str	r3, [r7, #4]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b37      	cmp	r3, #55	; 0x37
 800f7f6:	d9ef      	bls.n	800f7d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f7f8:	480d      	ldr	r0, [pc, #52]	; (800f830 <prvInitialiseTaskLists+0x64>)
 800f7fa:	f7fe fa71 	bl	800dce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f7fe:	480d      	ldr	r0, [pc, #52]	; (800f834 <prvInitialiseTaskLists+0x68>)
 800f800:	f7fe fa6e 	bl	800dce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f804:	480c      	ldr	r0, [pc, #48]	; (800f838 <prvInitialiseTaskLists+0x6c>)
 800f806:	f7fe fa6b 	bl	800dce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f80a:	480c      	ldr	r0, [pc, #48]	; (800f83c <prvInitialiseTaskLists+0x70>)
 800f80c:	f7fe fa68 	bl	800dce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f810:	480b      	ldr	r0, [pc, #44]	; (800f840 <prvInitialiseTaskLists+0x74>)
 800f812:	f7fe fa65 	bl	800dce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f816:	4b0b      	ldr	r3, [pc, #44]	; (800f844 <prvInitialiseTaskLists+0x78>)
 800f818:	4a05      	ldr	r2, [pc, #20]	; (800f830 <prvInitialiseTaskLists+0x64>)
 800f81a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f81c:	4b0a      	ldr	r3, [pc, #40]	; (800f848 <prvInitialiseTaskLists+0x7c>)
 800f81e:	4a05      	ldr	r2, [pc, #20]	; (800f834 <prvInitialiseTaskLists+0x68>)
 800f820:	601a      	str	r2, [r3, #0]
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	24004f44 	.word	0x24004f44
 800f830:	240053a4 	.word	0x240053a4
 800f834:	240053b8 	.word	0x240053b8
 800f838:	240053d4 	.word	0x240053d4
 800f83c:	240053e8 	.word	0x240053e8
 800f840:	24005400 	.word	0x24005400
 800f844:	240053cc 	.word	0x240053cc
 800f848:	240053d0 	.word	0x240053d0

0800f84c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f852:	e019      	b.n	800f888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f854:	f7fe fc26 	bl	800e0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f858:	4b10      	ldr	r3, [pc, #64]	; (800f89c <prvCheckTasksWaitingTermination+0x50>)
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3304      	adds	r3, #4
 800f864:	4618      	mov	r0, r3
 800f866:	f7fe fac5 	bl	800ddf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f86a:	4b0d      	ldr	r3, [pc, #52]	; (800f8a0 <prvCheckTasksWaitingTermination+0x54>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	3b01      	subs	r3, #1
 800f870:	4a0b      	ldr	r2, [pc, #44]	; (800f8a0 <prvCheckTasksWaitingTermination+0x54>)
 800f872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f874:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <prvCheckTasksWaitingTermination+0x58>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	3b01      	subs	r3, #1
 800f87a:	4a0a      	ldr	r2, [pc, #40]	; (800f8a4 <prvCheckTasksWaitingTermination+0x58>)
 800f87c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f87e:	f7fe fc41 	bl	800e104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 f810 	bl	800f8a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f888:	4b06      	ldr	r3, [pc, #24]	; (800f8a4 <prvCheckTasksWaitingTermination+0x58>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1e1      	bne.n	800f854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f890:	bf00      	nop
 800f892:	bf00      	nop
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	240053e8 	.word	0x240053e8
 800f8a0:	24005414 	.word	0x24005414
 800f8a4:	240053fc 	.word	0x240053fc

0800f8a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3354      	adds	r3, #84	; 0x54
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f001 fcd1 	bl	801125c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d108      	bne.n	800f8d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe f8eb 	bl	800daa4 <vPortFree>
				vPortFree( pxTCB );
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7fe f8e8 	bl	800daa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f8d4:	e018      	b.n	800f908 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d103      	bne.n	800f8e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7fe f8df 	bl	800daa4 <vPortFree>
	}
 800f8e6:	e00f      	b.n	800f908 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d00a      	beq.n	800f908 <prvDeleteTCB+0x60>
	__asm volatile
 800f8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f6:	f383 8811 	msr	BASEPRI, r3
 800f8fa:	f3bf 8f6f 	isb	sy
 800f8fe:	f3bf 8f4f 	dsb	sy
 800f902:	60fb      	str	r3, [r7, #12]
}
 800f904:	bf00      	nop
 800f906:	e7fe      	b.n	800f906 <prvDeleteTCB+0x5e>
	}
 800f908:	bf00      	nop
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f916:	4b0c      	ldr	r3, [pc, #48]	; (800f948 <prvResetNextTaskUnblockTime+0x38>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d104      	bne.n	800f92a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f920:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <prvResetNextTaskUnblockTime+0x3c>)
 800f922:	f04f 32ff 	mov.w	r2, #4294967295
 800f926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f928:	e008      	b.n	800f93c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f92a:	4b07      	ldr	r3, [pc, #28]	; (800f948 <prvResetNextTaskUnblockTime+0x38>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	4a04      	ldr	r2, [pc, #16]	; (800f94c <prvResetNextTaskUnblockTime+0x3c>)
 800f93a:	6013      	str	r3, [r2, #0]
}
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr
 800f948:	240053cc 	.word	0x240053cc
 800f94c:	24005434 	.word	0x24005434

0800f950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f956:	4b0b      	ldr	r3, [pc, #44]	; (800f984 <xTaskGetSchedulerState+0x34>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d102      	bne.n	800f964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f95e:	2301      	movs	r3, #1
 800f960:	607b      	str	r3, [r7, #4]
 800f962:	e008      	b.n	800f976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f964:	4b08      	ldr	r3, [pc, #32]	; (800f988 <xTaskGetSchedulerState+0x38>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d102      	bne.n	800f972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f96c:	2302      	movs	r3, #2
 800f96e:	607b      	str	r3, [r7, #4]
 800f970:	e001      	b.n	800f976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f972:	2300      	movs	r3, #0
 800f974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f976:	687b      	ldr	r3, [r7, #4]
	}
 800f978:	4618      	mov	r0, r3
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr
 800f984:	24005420 	.word	0x24005420
 800f988:	2400543c 	.word	0x2400543c

0800f98c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f998:	2300      	movs	r3, #0
 800f99a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d056      	beq.n	800fa50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f9a2:	4b2e      	ldr	r3, [pc, #184]	; (800fa5c <xTaskPriorityDisinherit+0xd0>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	693a      	ldr	r2, [r7, #16]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d00a      	beq.n	800f9c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	60fb      	str	r3, [r7, #12]
}
 800f9be:	bf00      	nop
 800f9c0:	e7fe      	b.n	800f9c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10a      	bne.n	800f9e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	60bb      	str	r3, [r7, #8]
}
 800f9dc:	bf00      	nop
 800f9de:	e7fe      	b.n	800f9de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e4:	1e5a      	subs	r2, r3, #1
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d02c      	beq.n	800fa50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d128      	bne.n	800fa50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	3304      	adds	r3, #4
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fe f9f6 	bl	800ddf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa20:	4b0f      	ldr	r3, [pc, #60]	; (800fa60 <xTaskPriorityDisinherit+0xd4>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d903      	bls.n	800fa30 <xTaskPriorityDisinherit+0xa4>
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa2c:	4a0c      	ldr	r2, [pc, #48]	; (800fa60 <xTaskPriorityDisinherit+0xd4>)
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa34:	4613      	mov	r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	4413      	add	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	4a09      	ldr	r2, [pc, #36]	; (800fa64 <xTaskPriorityDisinherit+0xd8>)
 800fa3e:	441a      	add	r2, r3
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	3304      	adds	r3, #4
 800fa44:	4619      	mov	r1, r3
 800fa46:	4610      	mov	r0, r2
 800fa48:	f7fe f977 	bl	800dd3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa50:	697b      	ldr	r3, [r7, #20]
	}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	24004f40 	.word	0x24004f40
 800fa60:	2400541c 	.word	0x2400541c
 800fa64:	24004f44 	.word	0x24004f44

0800fa68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa72:	4b21      	ldr	r3, [pc, #132]	; (800faf8 <prvAddCurrentTaskToDelayedList+0x90>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa78:	4b20      	ldr	r3, [pc, #128]	; (800fafc <prvAddCurrentTaskToDelayedList+0x94>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fe f9b8 	bl	800ddf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa8a:	d10a      	bne.n	800faa2 <prvAddCurrentTaskToDelayedList+0x3a>
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d007      	beq.n	800faa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa92:	4b1a      	ldr	r3, [pc, #104]	; (800fafc <prvAddCurrentTaskToDelayedList+0x94>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3304      	adds	r3, #4
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4819      	ldr	r0, [pc, #100]	; (800fb00 <prvAddCurrentTaskToDelayedList+0x98>)
 800fa9c:	f7fe f94d 	bl	800dd3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800faa0:	e026      	b.n	800faf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4413      	add	r3, r2
 800faa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800faaa:	4b14      	ldr	r3, [pc, #80]	; (800fafc <prvAddCurrentTaskToDelayedList+0x94>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68ba      	ldr	r2, [r7, #8]
 800fab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d209      	bcs.n	800face <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800faba:	4b12      	ldr	r3, [pc, #72]	; (800fb04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	4b0f      	ldr	r3, [pc, #60]	; (800fafc <prvAddCurrentTaskToDelayedList+0x94>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	3304      	adds	r3, #4
 800fac4:	4619      	mov	r1, r3
 800fac6:	4610      	mov	r0, r2
 800fac8:	f7fe f95b 	bl	800dd82 <vListInsert>
}
 800facc:	e010      	b.n	800faf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800face:	4b0e      	ldr	r3, [pc, #56]	; (800fb08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <prvAddCurrentTaskToDelayedList+0x94>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3304      	adds	r3, #4
 800fad8:	4619      	mov	r1, r3
 800fada:	4610      	mov	r0, r2
 800fadc:	f7fe f951 	bl	800dd82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fae0:	4b0a      	ldr	r3, [pc, #40]	; (800fb0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d202      	bcs.n	800faf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800faea:	4a08      	ldr	r2, [pc, #32]	; (800fb0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	6013      	str	r3, [r2, #0]
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	24005418 	.word	0x24005418
 800fafc:	24004f40 	.word	0x24004f40
 800fb00:	24005400 	.word	0x24005400
 800fb04:	240053d0 	.word	0x240053d0
 800fb08:	240053cc 	.word	0x240053cc
 800fb0c:	24005434 	.word	0x24005434

0800fb10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08a      	sub	sp, #40	; 0x28
 800fb14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fb16:	2300      	movs	r3, #0
 800fb18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fb1a:	f000 fb07 	bl	801012c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fb1e:	4b1c      	ldr	r3, [pc, #112]	; (800fb90 <xTimerCreateTimerTask+0x80>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d021      	beq.n	800fb6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fb26:	2300      	movs	r3, #0
 800fb28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb2e:	1d3a      	adds	r2, r7, #4
 800fb30:	f107 0108 	add.w	r1, r7, #8
 800fb34:	f107 030c 	add.w	r3, r7, #12
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fd fecd 	bl	800d8d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	9202      	str	r2, [sp, #8]
 800fb46:	9301      	str	r3, [sp, #4]
 800fb48:	2302      	movs	r3, #2
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	460a      	mov	r2, r1
 800fb50:	4910      	ldr	r1, [pc, #64]	; (800fb94 <xTimerCreateTimerTask+0x84>)
 800fb52:	4811      	ldr	r0, [pc, #68]	; (800fb98 <xTimerCreateTimerTask+0x88>)
 800fb54:	f7ff f8b4 	bl	800ecc0 <xTaskCreateStatic>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	4a10      	ldr	r2, [pc, #64]	; (800fb9c <xTimerCreateTimerTask+0x8c>)
 800fb5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fb5e:	4b0f      	ldr	r3, [pc, #60]	; (800fb9c <xTimerCreateTimerTask+0x8c>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d001      	beq.n	800fb6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fb66:	2301      	movs	r3, #1
 800fb68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d10a      	bne.n	800fb86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	613b      	str	r3, [r7, #16]
}
 800fb82:	bf00      	nop
 800fb84:	e7fe      	b.n	800fb84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fb86:	697b      	ldr	r3, [r7, #20]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	24005470 	.word	0x24005470
 800fb94:	0801489c 	.word	0x0801489c
 800fb98:	0800fcd5 	.word	0x0800fcd5
 800fb9c:	24005474 	.word	0x24005474

0800fba0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	; 0x28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d10a      	bne.n	800fbce <xTimerGenericCommand+0x2e>
	__asm volatile
 800fbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbbc:	f383 8811 	msr	BASEPRI, r3
 800fbc0:	f3bf 8f6f 	isb	sy
 800fbc4:	f3bf 8f4f 	dsb	sy
 800fbc8:	623b      	str	r3, [r7, #32]
}
 800fbca:	bf00      	nop
 800fbcc:	e7fe      	b.n	800fbcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fbce:	4b1a      	ldr	r3, [pc, #104]	; (800fc38 <xTimerGenericCommand+0x98>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d02a      	beq.n	800fc2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	2b05      	cmp	r3, #5
 800fbe6:	dc18      	bgt.n	800fc1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbe8:	f7ff feb2 	bl	800f950 <xTaskGetSchedulerState>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b02      	cmp	r3, #2
 800fbf0:	d109      	bne.n	800fc06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbf2:	4b11      	ldr	r3, [pc, #68]	; (800fc38 <xTimerGenericCommand+0x98>)
 800fbf4:	6818      	ldr	r0, [r3, #0]
 800fbf6:	f107 0110 	add.w	r1, r7, #16
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfe:	f7fe fc77 	bl	800e4f0 <xQueueGenericSend>
 800fc02:	6278      	str	r0, [r7, #36]	; 0x24
 800fc04:	e012      	b.n	800fc2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc06:	4b0c      	ldr	r3, [pc, #48]	; (800fc38 <xTimerGenericCommand+0x98>)
 800fc08:	6818      	ldr	r0, [r3, #0]
 800fc0a:	f107 0110 	add.w	r1, r7, #16
 800fc0e:	2300      	movs	r3, #0
 800fc10:	2200      	movs	r2, #0
 800fc12:	f7fe fc6d 	bl	800e4f0 <xQueueGenericSend>
 800fc16:	6278      	str	r0, [r7, #36]	; 0x24
 800fc18:	e008      	b.n	800fc2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fc1a:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <xTimerGenericCommand+0x98>)
 800fc1c:	6818      	ldr	r0, [r3, #0]
 800fc1e:	f107 0110 	add.w	r1, r7, #16
 800fc22:	2300      	movs	r3, #0
 800fc24:	683a      	ldr	r2, [r7, #0]
 800fc26:	f7fe fd61 	bl	800e6ec <xQueueGenericSendFromISR>
 800fc2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3728      	adds	r7, #40	; 0x28
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	24005470 	.word	0x24005470

0800fc3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b088      	sub	sp, #32
 800fc40:	af02      	add	r7, sp, #8
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc46:	4b22      	ldr	r3, [pc, #136]	; (800fcd0 <prvProcessExpiredTimer+0x94>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	3304      	adds	r3, #4
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7fe f8cd 	bl	800ddf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc60:	f003 0304 	and.w	r3, r3, #4
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d022      	beq.n	800fcae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	699a      	ldr	r2, [r3, #24]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	18d1      	adds	r1, r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	6978      	ldr	r0, [r7, #20]
 800fc76:	f000 f8d1 	bl	800fe1c <prvInsertTimerInActiveList>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d01f      	beq.n	800fcc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc80:	2300      	movs	r3, #0
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	2300      	movs	r3, #0
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	2100      	movs	r1, #0
 800fc8a:	6978      	ldr	r0, [r7, #20]
 800fc8c:	f7ff ff88 	bl	800fba0 <xTimerGenericCommand>
 800fc90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d113      	bne.n	800fcc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9c:	f383 8811 	msr	BASEPRI, r3
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	60fb      	str	r3, [r7, #12]
}
 800fcaa:	bf00      	nop
 800fcac:	e7fe      	b.n	800fcac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcb4:	f023 0301 	bic.w	r3, r3, #1
 800fcb8:	b2da      	uxtb	r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	6a1b      	ldr	r3, [r3, #32]
 800fcc4:	6978      	ldr	r0, [r7, #20]
 800fcc6:	4798      	blx	r3
}
 800fcc8:	bf00      	nop
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	24005468 	.word	0x24005468

0800fcd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fcdc:	f107 0308 	add.w	r3, r7, #8
 800fce0:	4618      	mov	r0, r3
 800fce2:	f000 f857 	bl	800fd94 <prvGetNextExpireTime>
 800fce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	4619      	mov	r1, r3
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f000 f803 	bl	800fcf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fcf2:	f000 f8d5 	bl	800fea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fcf6:	e7f1      	b.n	800fcdc <prvTimerTask+0x8>

0800fcf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fd02:	f7ff fa39 	bl	800f178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd06:	f107 0308 	add.w	r3, r7, #8
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 f866 	bl	800fddc <prvSampleTimeNow>
 800fd10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d130      	bne.n	800fd7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10a      	bne.n	800fd34 <prvProcessTimerOrBlockTask+0x3c>
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d806      	bhi.n	800fd34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fd26:	f7ff fa35 	bl	800f194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fd2a:	68f9      	ldr	r1, [r7, #12]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff ff85 	bl	800fc3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fd32:	e024      	b.n	800fd7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d008      	beq.n	800fd4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd3a:	4b13      	ldr	r3, [pc, #76]	; (800fd88 <prvProcessTimerOrBlockTask+0x90>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d101      	bne.n	800fd48 <prvProcessTimerOrBlockTask+0x50>
 800fd44:	2301      	movs	r3, #1
 800fd46:	e000      	b.n	800fd4a <prvProcessTimerOrBlockTask+0x52>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd4c:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <prvProcessTimerOrBlockTask+0x94>)
 800fd4e:	6818      	ldr	r0, [r3, #0]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	f7fe ff7d 	bl	800ec58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd5e:	f7ff fa19 	bl	800f194 <xTaskResumeAll>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10a      	bne.n	800fd7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fd68:	4b09      	ldr	r3, [pc, #36]	; (800fd90 <prvProcessTimerOrBlockTask+0x98>)
 800fd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	f3bf 8f4f 	dsb	sy
 800fd74:	f3bf 8f6f 	isb	sy
}
 800fd78:	e001      	b.n	800fd7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fd7a:	f7ff fa0b 	bl	800f194 <xTaskResumeAll>
}
 800fd7e:	bf00      	nop
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	2400546c 	.word	0x2400546c
 800fd8c:	24005470 	.word	0x24005470
 800fd90:	e000ed04 	.word	0xe000ed04

0800fd94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fd9c:	4b0e      	ldr	r3, [pc, #56]	; (800fdd8 <prvGetNextExpireTime+0x44>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d101      	bne.n	800fdaa <prvGetNextExpireTime+0x16>
 800fda6:	2201      	movs	r2, #1
 800fda8:	e000      	b.n	800fdac <prvGetNextExpireTime+0x18>
 800fdaa:	2200      	movs	r2, #0
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d105      	bne.n	800fdc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdb8:	4b07      	ldr	r3, [pc, #28]	; (800fdd8 <prvGetNextExpireTime+0x44>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	e001      	b.n	800fdc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	24005468 	.word	0x24005468

0800fddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fde4:	f7ff fa74 	bl	800f2d0 <xTaskGetTickCount>
 800fde8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fdea:	4b0b      	ldr	r3, [pc, #44]	; (800fe18 <prvSampleTimeNow+0x3c>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d205      	bcs.n	800fe00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fdf4:	f000 f936 	bl	8010064 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	e002      	b.n	800fe06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fe06:	4a04      	ldr	r2, [pc, #16]	; (800fe18 <prvSampleTimeNow+0x3c>)
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	24005478 	.word	0x24005478

0800fe1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
 800fe28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	68ba      	ldr	r2, [r7, #8]
 800fe32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d812      	bhi.n	800fe68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	1ad2      	subs	r2, r2, r3
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	699b      	ldr	r3, [r3, #24]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d302      	bcc.n	800fe56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fe50:	2301      	movs	r3, #1
 800fe52:	617b      	str	r3, [r7, #20]
 800fe54:	e01b      	b.n	800fe8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fe56:	4b10      	ldr	r3, [pc, #64]	; (800fe98 <prvInsertTimerInActiveList+0x7c>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3304      	adds	r3, #4
 800fe5e:	4619      	mov	r1, r3
 800fe60:	4610      	mov	r0, r2
 800fe62:	f7fd ff8e 	bl	800dd82 <vListInsert>
 800fe66:	e012      	b.n	800fe8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d206      	bcs.n	800fe7e <prvInsertTimerInActiveList+0x62>
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d302      	bcc.n	800fe7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	617b      	str	r3, [r7, #20]
 800fe7c:	e007      	b.n	800fe8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe7e:	4b07      	ldr	r3, [pc, #28]	; (800fe9c <prvInsertTimerInActiveList+0x80>)
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	3304      	adds	r3, #4
 800fe86:	4619      	mov	r1, r3
 800fe88:	4610      	mov	r0, r2
 800fe8a:	f7fd ff7a 	bl	800dd82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fe8e:	697b      	ldr	r3, [r7, #20]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3718      	adds	r7, #24
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	2400546c 	.word	0x2400546c
 800fe9c:	24005468 	.word	0x24005468

0800fea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b08e      	sub	sp, #56	; 0x38
 800fea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fea6:	e0ca      	b.n	801003e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	da18      	bge.n	800fee0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800feae:	1d3b      	adds	r3, r7, #4
 800feb0:	3304      	adds	r3, #4
 800feb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800feb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10a      	bne.n	800fed0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	61fb      	str	r3, [r7, #28]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fed6:	6850      	ldr	r0, [r2, #4]
 800fed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800feda:	6892      	ldr	r2, [r2, #8]
 800fedc:	4611      	mov	r1, r2
 800fede:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f2c0 80ab 	blt.w	801003e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feee:	695b      	ldr	r3, [r3, #20]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d004      	beq.n	800fefe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef6:	3304      	adds	r3, #4
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fd ff7b 	bl	800ddf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fefe:	463b      	mov	r3, r7
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7ff ff6b 	bl	800fddc <prvSampleTimeNow>
 800ff06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2b09      	cmp	r3, #9
 800ff0c:	f200 8096 	bhi.w	801003c <prvProcessReceivedCommands+0x19c>
 800ff10:	a201      	add	r2, pc, #4	; (adr r2, 800ff18 <prvProcessReceivedCommands+0x78>)
 800ff12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff16:	bf00      	nop
 800ff18:	0800ff41 	.word	0x0800ff41
 800ff1c:	0800ff41 	.word	0x0800ff41
 800ff20:	0800ff41 	.word	0x0800ff41
 800ff24:	0800ffb5 	.word	0x0800ffb5
 800ff28:	0800ffc9 	.word	0x0800ffc9
 800ff2c:	08010013 	.word	0x08010013
 800ff30:	0800ff41 	.word	0x0800ff41
 800ff34:	0800ff41 	.word	0x0800ff41
 800ff38:	0800ffb5 	.word	0x0800ffb5
 800ff3c:	0800ffc9 	.word	0x0800ffc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff46:	f043 0301 	orr.w	r3, r3, #1
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff52:	68ba      	ldr	r2, [r7, #8]
 800ff54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff56:	699b      	ldr	r3, [r3, #24]
 800ff58:	18d1      	adds	r1, r2, r3
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff60:	f7ff ff5c 	bl	800fe1c <prvInsertTimerInActiveList>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d069      	beq.n	801003e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6c:	6a1b      	ldr	r3, [r3, #32]
 800ff6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff78:	f003 0304 	and.w	r3, r3, #4
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d05e      	beq.n	801003e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ff80:	68ba      	ldr	r2, [r7, #8]
 800ff82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff84:	699b      	ldr	r3, [r3, #24]
 800ff86:	441a      	add	r2, r3
 800ff88:	2300      	movs	r3, #0
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2100      	movs	r1, #0
 800ff90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff92:	f7ff fe05 	bl	800fba0 <xTimerGenericCommand>
 800ff96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d14f      	bne.n	801003e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ff9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	61bb      	str	r3, [r7, #24]
}
 800ffb0:	bf00      	nop
 800ffb2:	e7fe      	b.n	800ffb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffba:	f023 0301 	bic.w	r3, r3, #1
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ffc6:	e03a      	b.n	801003e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffce:	f043 0301 	orr.w	r3, r3, #1
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ffe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10a      	bne.n	800fffe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ffe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffec:	f383 8811 	msr	BASEPRI, r3
 800fff0:	f3bf 8f6f 	isb	sy
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	617b      	str	r3, [r7, #20]
}
 800fffa:	bf00      	nop
 800fffc:	e7fe      	b.n	800fffc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010000:	699a      	ldr	r2, [r3, #24]
 8010002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010004:	18d1      	adds	r1, r2, r3
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801000a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801000c:	f7ff ff06 	bl	800fe1c <prvInsertTimerInActiveList>
					break;
 8010010:	e015      	b.n	801003e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010018:	f003 0302 	and.w	r3, r3, #2
 801001c:	2b00      	cmp	r3, #0
 801001e:	d103      	bne.n	8010028 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010022:	f7fd fd3f 	bl	800daa4 <vPortFree>
 8010026:	e00a      	b.n	801003e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801002e:	f023 0301 	bic.w	r3, r3, #1
 8010032:	b2da      	uxtb	r2, r3
 8010034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801003a:	e000      	b.n	801003e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801003c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801003e:	4b08      	ldr	r3, [pc, #32]	; (8010060 <prvProcessReceivedCommands+0x1c0>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	1d39      	adds	r1, r7, #4
 8010044:	2200      	movs	r2, #0
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe fbec 	bl	800e824 <xQueueReceive>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	f47f af2a 	bne.w	800fea8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010054:	bf00      	nop
 8010056:	bf00      	nop
 8010058:	3730      	adds	r7, #48	; 0x30
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	24005470 	.word	0x24005470

08010064 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801006a:	e048      	b.n	80100fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801006c:	4b2d      	ldr	r3, [pc, #180]	; (8010124 <prvSwitchTimerLists+0xc0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010076:	4b2b      	ldr	r3, [pc, #172]	; (8010124 <prvSwitchTimerLists+0xc0>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	3304      	adds	r3, #4
 8010084:	4618      	mov	r0, r3
 8010086:	f7fd feb5 	bl	800ddf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6a1b      	ldr	r3, [r3, #32]
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010098:	f003 0304 	and.w	r3, r3, #4
 801009c:	2b00      	cmp	r3, #0
 801009e:	d02e      	beq.n	80100fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	699b      	ldr	r3, [r3, #24]
 80100a4:	693a      	ldr	r2, [r7, #16]
 80100a6:	4413      	add	r3, r2
 80100a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d90e      	bls.n	80100d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100be:	4b19      	ldr	r3, [pc, #100]	; (8010124 <prvSwitchTimerLists+0xc0>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	3304      	adds	r3, #4
 80100c6:	4619      	mov	r1, r3
 80100c8:	4610      	mov	r0, r2
 80100ca:	f7fd fe5a 	bl	800dd82 <vListInsert>
 80100ce:	e016      	b.n	80100fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80100d0:	2300      	movs	r3, #0
 80100d2:	9300      	str	r3, [sp, #0]
 80100d4:	2300      	movs	r3, #0
 80100d6:	693a      	ldr	r2, [r7, #16]
 80100d8:	2100      	movs	r1, #0
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f7ff fd60 	bl	800fba0 <xTimerGenericCommand>
 80100e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10a      	bne.n	80100fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80100e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	603b      	str	r3, [r7, #0]
}
 80100fa:	bf00      	nop
 80100fc:	e7fe      	b.n	80100fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100fe:	4b09      	ldr	r3, [pc, #36]	; (8010124 <prvSwitchTimerLists+0xc0>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1b1      	bne.n	801006c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010108:	4b06      	ldr	r3, [pc, #24]	; (8010124 <prvSwitchTimerLists+0xc0>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801010e:	4b06      	ldr	r3, [pc, #24]	; (8010128 <prvSwitchTimerLists+0xc4>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a04      	ldr	r2, [pc, #16]	; (8010124 <prvSwitchTimerLists+0xc0>)
 8010114:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010116:	4a04      	ldr	r2, [pc, #16]	; (8010128 <prvSwitchTimerLists+0xc4>)
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	6013      	str	r3, [r2, #0]
}
 801011c:	bf00      	nop
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	24005468 	.word	0x24005468
 8010128:	2400546c 	.word	0x2400546c

0801012c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010132:	f7fd ffb7 	bl	800e0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010136:	4b15      	ldr	r3, [pc, #84]	; (801018c <prvCheckForValidListAndQueue+0x60>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d120      	bne.n	8010180 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801013e:	4814      	ldr	r0, [pc, #80]	; (8010190 <prvCheckForValidListAndQueue+0x64>)
 8010140:	f7fd fdce 	bl	800dce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010144:	4813      	ldr	r0, [pc, #76]	; (8010194 <prvCheckForValidListAndQueue+0x68>)
 8010146:	f7fd fdcb 	bl	800dce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801014a:	4b13      	ldr	r3, [pc, #76]	; (8010198 <prvCheckForValidListAndQueue+0x6c>)
 801014c:	4a10      	ldr	r2, [pc, #64]	; (8010190 <prvCheckForValidListAndQueue+0x64>)
 801014e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010150:	4b12      	ldr	r3, [pc, #72]	; (801019c <prvCheckForValidListAndQueue+0x70>)
 8010152:	4a10      	ldr	r2, [pc, #64]	; (8010194 <prvCheckForValidListAndQueue+0x68>)
 8010154:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010156:	2300      	movs	r3, #0
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	4b11      	ldr	r3, [pc, #68]	; (80101a0 <prvCheckForValidListAndQueue+0x74>)
 801015c:	4a11      	ldr	r2, [pc, #68]	; (80101a4 <prvCheckForValidListAndQueue+0x78>)
 801015e:	2110      	movs	r1, #16
 8010160:	200a      	movs	r0, #10
 8010162:	f7fe f929 	bl	800e3b8 <xQueueGenericCreateStatic>
 8010166:	4603      	mov	r3, r0
 8010168:	4a08      	ldr	r2, [pc, #32]	; (801018c <prvCheckForValidListAndQueue+0x60>)
 801016a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801016c:	4b07      	ldr	r3, [pc, #28]	; (801018c <prvCheckForValidListAndQueue+0x60>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d005      	beq.n	8010180 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010174:	4b05      	ldr	r3, [pc, #20]	; (801018c <prvCheckForValidListAndQueue+0x60>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	490b      	ldr	r1, [pc, #44]	; (80101a8 <prvCheckForValidListAndQueue+0x7c>)
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe fd42 	bl	800ec04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010180:	f7fd ffc0 	bl	800e104 <vPortExitCritical>
}
 8010184:	bf00      	nop
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	24005470 	.word	0x24005470
 8010190:	24005440 	.word	0x24005440
 8010194:	24005454 	.word	0x24005454
 8010198:	24005468 	.word	0x24005468
 801019c:	2400546c 	.word	0x2400546c
 80101a0:	2400551c 	.word	0x2400551c
 80101a4:	2400547c 	.word	0x2400547c
 80101a8:	080148a4 	.word	0x080148a4

080101ac <malloc>:
 80101ac:	4b02      	ldr	r3, [pc, #8]	; (80101b8 <malloc+0xc>)
 80101ae:	4601      	mov	r1, r0
 80101b0:	6818      	ldr	r0, [r3, #0]
 80101b2:	f000 b823 	b.w	80101fc <_malloc_r>
 80101b6:	bf00      	nop
 80101b8:	2400006c 	.word	0x2400006c

080101bc <sbrk_aligned>:
 80101bc:	b570      	push	{r4, r5, r6, lr}
 80101be:	4e0e      	ldr	r6, [pc, #56]	; (80101f8 <sbrk_aligned+0x3c>)
 80101c0:	460c      	mov	r4, r1
 80101c2:	6831      	ldr	r1, [r6, #0]
 80101c4:	4605      	mov	r5, r0
 80101c6:	b911      	cbnz	r1, 80101ce <sbrk_aligned+0x12>
 80101c8:	f001 f8c2 	bl	8011350 <_sbrk_r>
 80101cc:	6030      	str	r0, [r6, #0]
 80101ce:	4621      	mov	r1, r4
 80101d0:	4628      	mov	r0, r5
 80101d2:	f001 f8bd 	bl	8011350 <_sbrk_r>
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	d00a      	beq.n	80101f0 <sbrk_aligned+0x34>
 80101da:	1cc4      	adds	r4, r0, #3
 80101dc:	f024 0403 	bic.w	r4, r4, #3
 80101e0:	42a0      	cmp	r0, r4
 80101e2:	d007      	beq.n	80101f4 <sbrk_aligned+0x38>
 80101e4:	1a21      	subs	r1, r4, r0
 80101e6:	4628      	mov	r0, r5
 80101e8:	f001 f8b2 	bl	8011350 <_sbrk_r>
 80101ec:	3001      	adds	r0, #1
 80101ee:	d101      	bne.n	80101f4 <sbrk_aligned+0x38>
 80101f0:	f04f 34ff 	mov.w	r4, #4294967295
 80101f4:	4620      	mov	r0, r4
 80101f6:	bd70      	pop	{r4, r5, r6, pc}
 80101f8:	24005570 	.word	0x24005570

080101fc <_malloc_r>:
 80101fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010200:	1ccd      	adds	r5, r1, #3
 8010202:	f025 0503 	bic.w	r5, r5, #3
 8010206:	3508      	adds	r5, #8
 8010208:	2d0c      	cmp	r5, #12
 801020a:	bf38      	it	cc
 801020c:	250c      	movcc	r5, #12
 801020e:	2d00      	cmp	r5, #0
 8010210:	4607      	mov	r7, r0
 8010212:	db01      	blt.n	8010218 <_malloc_r+0x1c>
 8010214:	42a9      	cmp	r1, r5
 8010216:	d905      	bls.n	8010224 <_malloc_r+0x28>
 8010218:	230c      	movs	r3, #12
 801021a:	603b      	str	r3, [r7, #0]
 801021c:	2600      	movs	r6, #0
 801021e:	4630      	mov	r0, r6
 8010220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80102f8 <_malloc_r+0xfc>
 8010228:	f000 f868 	bl	80102fc <__malloc_lock>
 801022c:	f8d8 3000 	ldr.w	r3, [r8]
 8010230:	461c      	mov	r4, r3
 8010232:	bb5c      	cbnz	r4, 801028c <_malloc_r+0x90>
 8010234:	4629      	mov	r1, r5
 8010236:	4638      	mov	r0, r7
 8010238:	f7ff ffc0 	bl	80101bc <sbrk_aligned>
 801023c:	1c43      	adds	r3, r0, #1
 801023e:	4604      	mov	r4, r0
 8010240:	d155      	bne.n	80102ee <_malloc_r+0xf2>
 8010242:	f8d8 4000 	ldr.w	r4, [r8]
 8010246:	4626      	mov	r6, r4
 8010248:	2e00      	cmp	r6, #0
 801024a:	d145      	bne.n	80102d8 <_malloc_r+0xdc>
 801024c:	2c00      	cmp	r4, #0
 801024e:	d048      	beq.n	80102e2 <_malloc_r+0xe6>
 8010250:	6823      	ldr	r3, [r4, #0]
 8010252:	4631      	mov	r1, r6
 8010254:	4638      	mov	r0, r7
 8010256:	eb04 0903 	add.w	r9, r4, r3
 801025a:	f001 f879 	bl	8011350 <_sbrk_r>
 801025e:	4581      	cmp	r9, r0
 8010260:	d13f      	bne.n	80102e2 <_malloc_r+0xe6>
 8010262:	6821      	ldr	r1, [r4, #0]
 8010264:	1a6d      	subs	r5, r5, r1
 8010266:	4629      	mov	r1, r5
 8010268:	4638      	mov	r0, r7
 801026a:	f7ff ffa7 	bl	80101bc <sbrk_aligned>
 801026e:	3001      	adds	r0, #1
 8010270:	d037      	beq.n	80102e2 <_malloc_r+0xe6>
 8010272:	6823      	ldr	r3, [r4, #0]
 8010274:	442b      	add	r3, r5
 8010276:	6023      	str	r3, [r4, #0]
 8010278:	f8d8 3000 	ldr.w	r3, [r8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d038      	beq.n	80102f2 <_malloc_r+0xf6>
 8010280:	685a      	ldr	r2, [r3, #4]
 8010282:	42a2      	cmp	r2, r4
 8010284:	d12b      	bne.n	80102de <_malloc_r+0xe2>
 8010286:	2200      	movs	r2, #0
 8010288:	605a      	str	r2, [r3, #4]
 801028a:	e00f      	b.n	80102ac <_malloc_r+0xb0>
 801028c:	6822      	ldr	r2, [r4, #0]
 801028e:	1b52      	subs	r2, r2, r5
 8010290:	d41f      	bmi.n	80102d2 <_malloc_r+0xd6>
 8010292:	2a0b      	cmp	r2, #11
 8010294:	d917      	bls.n	80102c6 <_malloc_r+0xca>
 8010296:	1961      	adds	r1, r4, r5
 8010298:	42a3      	cmp	r3, r4
 801029a:	6025      	str	r5, [r4, #0]
 801029c:	bf18      	it	ne
 801029e:	6059      	strne	r1, [r3, #4]
 80102a0:	6863      	ldr	r3, [r4, #4]
 80102a2:	bf08      	it	eq
 80102a4:	f8c8 1000 	streq.w	r1, [r8]
 80102a8:	5162      	str	r2, [r4, r5]
 80102aa:	604b      	str	r3, [r1, #4]
 80102ac:	4638      	mov	r0, r7
 80102ae:	f104 060b 	add.w	r6, r4, #11
 80102b2:	f000 f829 	bl	8010308 <__malloc_unlock>
 80102b6:	f026 0607 	bic.w	r6, r6, #7
 80102ba:	1d23      	adds	r3, r4, #4
 80102bc:	1af2      	subs	r2, r6, r3
 80102be:	d0ae      	beq.n	801021e <_malloc_r+0x22>
 80102c0:	1b9b      	subs	r3, r3, r6
 80102c2:	50a3      	str	r3, [r4, r2]
 80102c4:	e7ab      	b.n	801021e <_malloc_r+0x22>
 80102c6:	42a3      	cmp	r3, r4
 80102c8:	6862      	ldr	r2, [r4, #4]
 80102ca:	d1dd      	bne.n	8010288 <_malloc_r+0x8c>
 80102cc:	f8c8 2000 	str.w	r2, [r8]
 80102d0:	e7ec      	b.n	80102ac <_malloc_r+0xb0>
 80102d2:	4623      	mov	r3, r4
 80102d4:	6864      	ldr	r4, [r4, #4]
 80102d6:	e7ac      	b.n	8010232 <_malloc_r+0x36>
 80102d8:	4634      	mov	r4, r6
 80102da:	6876      	ldr	r6, [r6, #4]
 80102dc:	e7b4      	b.n	8010248 <_malloc_r+0x4c>
 80102de:	4613      	mov	r3, r2
 80102e0:	e7cc      	b.n	801027c <_malloc_r+0x80>
 80102e2:	230c      	movs	r3, #12
 80102e4:	603b      	str	r3, [r7, #0]
 80102e6:	4638      	mov	r0, r7
 80102e8:	f000 f80e 	bl	8010308 <__malloc_unlock>
 80102ec:	e797      	b.n	801021e <_malloc_r+0x22>
 80102ee:	6025      	str	r5, [r4, #0]
 80102f0:	e7dc      	b.n	80102ac <_malloc_r+0xb0>
 80102f2:	605b      	str	r3, [r3, #4]
 80102f4:	deff      	udf	#255	; 0xff
 80102f6:	bf00      	nop
 80102f8:	2400556c 	.word	0x2400556c

080102fc <__malloc_lock>:
 80102fc:	4801      	ldr	r0, [pc, #4]	; (8010304 <__malloc_lock+0x8>)
 80102fe:	f001 b873 	b.w	80113e8 <__retarget_lock_acquire_recursive>
 8010302:	bf00      	nop
 8010304:	240056b4 	.word	0x240056b4

08010308 <__malloc_unlock>:
 8010308:	4801      	ldr	r0, [pc, #4]	; (8010310 <__malloc_unlock+0x8>)
 801030a:	f001 b86e 	b.w	80113ea <__retarget_lock_release_recursive>
 801030e:	bf00      	nop
 8010310:	240056b4 	.word	0x240056b4

08010314 <__cvt>:
 8010314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010316:	ed2d 8b02 	vpush	{d8}
 801031a:	eeb0 8b40 	vmov.f64	d8, d0
 801031e:	b085      	sub	sp, #20
 8010320:	4617      	mov	r7, r2
 8010322:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010324:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010326:	ee18 2a90 	vmov	r2, s17
 801032a:	f025 0520 	bic.w	r5, r5, #32
 801032e:	2a00      	cmp	r2, #0
 8010330:	bfb6      	itet	lt
 8010332:	222d      	movlt	r2, #45	; 0x2d
 8010334:	2200      	movge	r2, #0
 8010336:	eeb1 8b40 	vneglt.f64	d8, d0
 801033a:	2d46      	cmp	r5, #70	; 0x46
 801033c:	460c      	mov	r4, r1
 801033e:	701a      	strb	r2, [r3, #0]
 8010340:	d004      	beq.n	801034c <__cvt+0x38>
 8010342:	2d45      	cmp	r5, #69	; 0x45
 8010344:	d100      	bne.n	8010348 <__cvt+0x34>
 8010346:	3401      	adds	r4, #1
 8010348:	2102      	movs	r1, #2
 801034a:	e000      	b.n	801034e <__cvt+0x3a>
 801034c:	2103      	movs	r1, #3
 801034e:	ab03      	add	r3, sp, #12
 8010350:	9301      	str	r3, [sp, #4]
 8010352:	ab02      	add	r3, sp, #8
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	4622      	mov	r2, r4
 8010358:	4633      	mov	r3, r6
 801035a:	eeb0 0b48 	vmov.f64	d0, d8
 801035e:	f001 f8e3 	bl	8011528 <_dtoa_r>
 8010362:	2d47      	cmp	r5, #71	; 0x47
 8010364:	d101      	bne.n	801036a <__cvt+0x56>
 8010366:	07fb      	lsls	r3, r7, #31
 8010368:	d51a      	bpl.n	80103a0 <__cvt+0x8c>
 801036a:	2d46      	cmp	r5, #70	; 0x46
 801036c:	eb00 0204 	add.w	r2, r0, r4
 8010370:	d10c      	bne.n	801038c <__cvt+0x78>
 8010372:	7803      	ldrb	r3, [r0, #0]
 8010374:	2b30      	cmp	r3, #48	; 0x30
 8010376:	d107      	bne.n	8010388 <__cvt+0x74>
 8010378:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010380:	bf1c      	itt	ne
 8010382:	f1c4 0401 	rsbne	r4, r4, #1
 8010386:	6034      	strne	r4, [r6, #0]
 8010388:	6833      	ldr	r3, [r6, #0]
 801038a:	441a      	add	r2, r3
 801038c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010394:	bf08      	it	eq
 8010396:	9203      	streq	r2, [sp, #12]
 8010398:	2130      	movs	r1, #48	; 0x30
 801039a:	9b03      	ldr	r3, [sp, #12]
 801039c:	4293      	cmp	r3, r2
 801039e:	d307      	bcc.n	80103b0 <__cvt+0x9c>
 80103a0:	9b03      	ldr	r3, [sp, #12]
 80103a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103a4:	1a1b      	subs	r3, r3, r0
 80103a6:	6013      	str	r3, [r2, #0]
 80103a8:	b005      	add	sp, #20
 80103aa:	ecbd 8b02 	vpop	{d8}
 80103ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b0:	1c5c      	adds	r4, r3, #1
 80103b2:	9403      	str	r4, [sp, #12]
 80103b4:	7019      	strb	r1, [r3, #0]
 80103b6:	e7f0      	b.n	801039a <__cvt+0x86>

080103b8 <__exponent>:
 80103b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103ba:	4603      	mov	r3, r0
 80103bc:	2900      	cmp	r1, #0
 80103be:	bfb8      	it	lt
 80103c0:	4249      	neglt	r1, r1
 80103c2:	f803 2b02 	strb.w	r2, [r3], #2
 80103c6:	bfb4      	ite	lt
 80103c8:	222d      	movlt	r2, #45	; 0x2d
 80103ca:	222b      	movge	r2, #43	; 0x2b
 80103cc:	2909      	cmp	r1, #9
 80103ce:	7042      	strb	r2, [r0, #1]
 80103d0:	dd2a      	ble.n	8010428 <__exponent+0x70>
 80103d2:	f10d 0207 	add.w	r2, sp, #7
 80103d6:	4617      	mov	r7, r2
 80103d8:	260a      	movs	r6, #10
 80103da:	4694      	mov	ip, r2
 80103dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80103e0:	fb06 1415 	mls	r4, r6, r5, r1
 80103e4:	3430      	adds	r4, #48	; 0x30
 80103e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80103ea:	460c      	mov	r4, r1
 80103ec:	2c63      	cmp	r4, #99	; 0x63
 80103ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80103f2:	4629      	mov	r1, r5
 80103f4:	dcf1      	bgt.n	80103da <__exponent+0x22>
 80103f6:	3130      	adds	r1, #48	; 0x30
 80103f8:	f1ac 0402 	sub.w	r4, ip, #2
 80103fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010400:	1c41      	adds	r1, r0, #1
 8010402:	4622      	mov	r2, r4
 8010404:	42ba      	cmp	r2, r7
 8010406:	d30a      	bcc.n	801041e <__exponent+0x66>
 8010408:	f10d 0209 	add.w	r2, sp, #9
 801040c:	eba2 020c 	sub.w	r2, r2, ip
 8010410:	42bc      	cmp	r4, r7
 8010412:	bf88      	it	hi
 8010414:	2200      	movhi	r2, #0
 8010416:	4413      	add	r3, r2
 8010418:	1a18      	subs	r0, r3, r0
 801041a:	b003      	add	sp, #12
 801041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801041e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010422:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010426:	e7ed      	b.n	8010404 <__exponent+0x4c>
 8010428:	2330      	movs	r3, #48	; 0x30
 801042a:	3130      	adds	r1, #48	; 0x30
 801042c:	7083      	strb	r3, [r0, #2]
 801042e:	70c1      	strb	r1, [r0, #3]
 8010430:	1d03      	adds	r3, r0, #4
 8010432:	e7f1      	b.n	8010418 <__exponent+0x60>
 8010434:	0000      	movs	r0, r0
	...

08010438 <_printf_float>:
 8010438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043c:	b08b      	sub	sp, #44	; 0x2c
 801043e:	460c      	mov	r4, r1
 8010440:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010444:	4616      	mov	r6, r2
 8010446:	461f      	mov	r7, r3
 8010448:	4605      	mov	r5, r0
 801044a:	f000 fef3 	bl	8011234 <_localeconv_r>
 801044e:	f8d0 b000 	ldr.w	fp, [r0]
 8010452:	4658      	mov	r0, fp
 8010454:	f7ef ff94 	bl	8000380 <strlen>
 8010458:	2300      	movs	r3, #0
 801045a:	9308      	str	r3, [sp, #32]
 801045c:	f8d8 3000 	ldr.w	r3, [r8]
 8010460:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010464:	6822      	ldr	r2, [r4, #0]
 8010466:	3307      	adds	r3, #7
 8010468:	f023 0307 	bic.w	r3, r3, #7
 801046c:	f103 0108 	add.w	r1, r3, #8
 8010470:	f8c8 1000 	str.w	r1, [r8]
 8010474:	ed93 0b00 	vldr	d0, [r3]
 8010478:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80106d8 <_printf_float+0x2a0>
 801047c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010480:	eeb4 7b46 	vcmp.f64	d7, d6
 8010484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010488:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801048c:	4682      	mov	sl, r0
 801048e:	dd24      	ble.n	80104da <_printf_float+0xa2>
 8010490:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010498:	d502      	bpl.n	80104a0 <_printf_float+0x68>
 801049a:	232d      	movs	r3, #45	; 0x2d
 801049c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104a0:	498f      	ldr	r1, [pc, #572]	; (80106e0 <_printf_float+0x2a8>)
 80104a2:	4b90      	ldr	r3, [pc, #576]	; (80106e4 <_printf_float+0x2ac>)
 80104a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80104a8:	bf94      	ite	ls
 80104aa:	4688      	movls	r8, r1
 80104ac:	4698      	movhi	r8, r3
 80104ae:	2303      	movs	r3, #3
 80104b0:	6123      	str	r3, [r4, #16]
 80104b2:	f022 0204 	bic.w	r2, r2, #4
 80104b6:	2300      	movs	r3, #0
 80104b8:	6022      	str	r2, [r4, #0]
 80104ba:	9304      	str	r3, [sp, #16]
 80104bc:	9700      	str	r7, [sp, #0]
 80104be:	4633      	mov	r3, r6
 80104c0:	aa09      	add	r2, sp, #36	; 0x24
 80104c2:	4621      	mov	r1, r4
 80104c4:	4628      	mov	r0, r5
 80104c6:	f000 f9d1 	bl	801086c <_printf_common>
 80104ca:	3001      	adds	r0, #1
 80104cc:	f040 808a 	bne.w	80105e4 <_printf_float+0x1ac>
 80104d0:	f04f 30ff 	mov.w	r0, #4294967295
 80104d4:	b00b      	add	sp, #44	; 0x2c
 80104d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104da:	eeb4 0b40 	vcmp.f64	d0, d0
 80104de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e2:	d709      	bvc.n	80104f8 <_printf_float+0xc0>
 80104e4:	ee10 3a90 	vmov	r3, s1
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	bfbc      	itt	lt
 80104ec:	232d      	movlt	r3, #45	; 0x2d
 80104ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80104f2:	497d      	ldr	r1, [pc, #500]	; (80106e8 <_printf_float+0x2b0>)
 80104f4:	4b7d      	ldr	r3, [pc, #500]	; (80106ec <_printf_float+0x2b4>)
 80104f6:	e7d5      	b.n	80104a4 <_printf_float+0x6c>
 80104f8:	6863      	ldr	r3, [r4, #4]
 80104fa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80104fe:	9104      	str	r1, [sp, #16]
 8010500:	1c59      	adds	r1, r3, #1
 8010502:	d13c      	bne.n	801057e <_printf_float+0x146>
 8010504:	2306      	movs	r3, #6
 8010506:	6063      	str	r3, [r4, #4]
 8010508:	2300      	movs	r3, #0
 801050a:	9303      	str	r3, [sp, #12]
 801050c:	ab08      	add	r3, sp, #32
 801050e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010516:	ab07      	add	r3, sp, #28
 8010518:	6861      	ldr	r1, [r4, #4]
 801051a:	9300      	str	r3, [sp, #0]
 801051c:	6022      	str	r2, [r4, #0]
 801051e:	f10d 031b 	add.w	r3, sp, #27
 8010522:	4628      	mov	r0, r5
 8010524:	f7ff fef6 	bl	8010314 <__cvt>
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	9907      	ldr	r1, [sp, #28]
 801052c:	2b47      	cmp	r3, #71	; 0x47
 801052e:	4680      	mov	r8, r0
 8010530:	d108      	bne.n	8010544 <_printf_float+0x10c>
 8010532:	1cc8      	adds	r0, r1, #3
 8010534:	db02      	blt.n	801053c <_printf_float+0x104>
 8010536:	6863      	ldr	r3, [r4, #4]
 8010538:	4299      	cmp	r1, r3
 801053a:	dd41      	ble.n	80105c0 <_printf_float+0x188>
 801053c:	f1a9 0902 	sub.w	r9, r9, #2
 8010540:	fa5f f989 	uxtb.w	r9, r9
 8010544:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010548:	d820      	bhi.n	801058c <_printf_float+0x154>
 801054a:	3901      	subs	r1, #1
 801054c:	464a      	mov	r2, r9
 801054e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010552:	9107      	str	r1, [sp, #28]
 8010554:	f7ff ff30 	bl	80103b8 <__exponent>
 8010558:	9a08      	ldr	r2, [sp, #32]
 801055a:	9004      	str	r0, [sp, #16]
 801055c:	1813      	adds	r3, r2, r0
 801055e:	2a01      	cmp	r2, #1
 8010560:	6123      	str	r3, [r4, #16]
 8010562:	dc02      	bgt.n	801056a <_printf_float+0x132>
 8010564:	6822      	ldr	r2, [r4, #0]
 8010566:	07d2      	lsls	r2, r2, #31
 8010568:	d501      	bpl.n	801056e <_printf_float+0x136>
 801056a:	3301      	adds	r3, #1
 801056c:	6123      	str	r3, [r4, #16]
 801056e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d0a2      	beq.n	80104bc <_printf_float+0x84>
 8010576:	232d      	movs	r3, #45	; 0x2d
 8010578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801057c:	e79e      	b.n	80104bc <_printf_float+0x84>
 801057e:	9904      	ldr	r1, [sp, #16]
 8010580:	2947      	cmp	r1, #71	; 0x47
 8010582:	d1c1      	bne.n	8010508 <_printf_float+0xd0>
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1bf      	bne.n	8010508 <_printf_float+0xd0>
 8010588:	2301      	movs	r3, #1
 801058a:	e7bc      	b.n	8010506 <_printf_float+0xce>
 801058c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010590:	d118      	bne.n	80105c4 <_printf_float+0x18c>
 8010592:	2900      	cmp	r1, #0
 8010594:	6863      	ldr	r3, [r4, #4]
 8010596:	dd0b      	ble.n	80105b0 <_printf_float+0x178>
 8010598:	6121      	str	r1, [r4, #16]
 801059a:	b913      	cbnz	r3, 80105a2 <_printf_float+0x16a>
 801059c:	6822      	ldr	r2, [r4, #0]
 801059e:	07d0      	lsls	r0, r2, #31
 80105a0:	d502      	bpl.n	80105a8 <_printf_float+0x170>
 80105a2:	3301      	adds	r3, #1
 80105a4:	440b      	add	r3, r1
 80105a6:	6123      	str	r3, [r4, #16]
 80105a8:	2300      	movs	r3, #0
 80105aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80105ac:	9304      	str	r3, [sp, #16]
 80105ae:	e7de      	b.n	801056e <_printf_float+0x136>
 80105b0:	b913      	cbnz	r3, 80105b8 <_printf_float+0x180>
 80105b2:	6822      	ldr	r2, [r4, #0]
 80105b4:	07d2      	lsls	r2, r2, #31
 80105b6:	d501      	bpl.n	80105bc <_printf_float+0x184>
 80105b8:	3302      	adds	r3, #2
 80105ba:	e7f4      	b.n	80105a6 <_printf_float+0x16e>
 80105bc:	2301      	movs	r3, #1
 80105be:	e7f2      	b.n	80105a6 <_printf_float+0x16e>
 80105c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80105c4:	9b08      	ldr	r3, [sp, #32]
 80105c6:	4299      	cmp	r1, r3
 80105c8:	db05      	blt.n	80105d6 <_printf_float+0x19e>
 80105ca:	6823      	ldr	r3, [r4, #0]
 80105cc:	6121      	str	r1, [r4, #16]
 80105ce:	07d8      	lsls	r0, r3, #31
 80105d0:	d5ea      	bpl.n	80105a8 <_printf_float+0x170>
 80105d2:	1c4b      	adds	r3, r1, #1
 80105d4:	e7e7      	b.n	80105a6 <_printf_float+0x16e>
 80105d6:	2900      	cmp	r1, #0
 80105d8:	bfd4      	ite	le
 80105da:	f1c1 0202 	rsble	r2, r1, #2
 80105de:	2201      	movgt	r2, #1
 80105e0:	4413      	add	r3, r2
 80105e2:	e7e0      	b.n	80105a6 <_printf_float+0x16e>
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	055a      	lsls	r2, r3, #21
 80105e8:	d407      	bmi.n	80105fa <_printf_float+0x1c2>
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	4642      	mov	r2, r8
 80105ee:	4631      	mov	r1, r6
 80105f0:	4628      	mov	r0, r5
 80105f2:	47b8      	blx	r7
 80105f4:	3001      	adds	r0, #1
 80105f6:	d12a      	bne.n	801064e <_printf_float+0x216>
 80105f8:	e76a      	b.n	80104d0 <_printf_float+0x98>
 80105fa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80105fe:	f240 80e0 	bls.w	80107c2 <_printf_float+0x38a>
 8010602:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010606:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801060a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060e:	d133      	bne.n	8010678 <_printf_float+0x240>
 8010610:	4a37      	ldr	r2, [pc, #220]	; (80106f0 <_printf_float+0x2b8>)
 8010612:	2301      	movs	r3, #1
 8010614:	4631      	mov	r1, r6
 8010616:	4628      	mov	r0, r5
 8010618:	47b8      	blx	r7
 801061a:	3001      	adds	r0, #1
 801061c:	f43f af58 	beq.w	80104d0 <_printf_float+0x98>
 8010620:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010624:	429a      	cmp	r2, r3
 8010626:	db02      	blt.n	801062e <_printf_float+0x1f6>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	07d8      	lsls	r0, r3, #31
 801062c:	d50f      	bpl.n	801064e <_printf_float+0x216>
 801062e:	4653      	mov	r3, sl
 8010630:	465a      	mov	r2, fp
 8010632:	4631      	mov	r1, r6
 8010634:	4628      	mov	r0, r5
 8010636:	47b8      	blx	r7
 8010638:	3001      	adds	r0, #1
 801063a:	f43f af49 	beq.w	80104d0 <_printf_float+0x98>
 801063e:	f04f 0800 	mov.w	r8, #0
 8010642:	f104 091a 	add.w	r9, r4, #26
 8010646:	9b08      	ldr	r3, [sp, #32]
 8010648:	3b01      	subs	r3, #1
 801064a:	4543      	cmp	r3, r8
 801064c:	dc09      	bgt.n	8010662 <_printf_float+0x22a>
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	079b      	lsls	r3, r3, #30
 8010652:	f100 8106 	bmi.w	8010862 <_printf_float+0x42a>
 8010656:	68e0      	ldr	r0, [r4, #12]
 8010658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801065a:	4298      	cmp	r0, r3
 801065c:	bfb8      	it	lt
 801065e:	4618      	movlt	r0, r3
 8010660:	e738      	b.n	80104d4 <_printf_float+0x9c>
 8010662:	2301      	movs	r3, #1
 8010664:	464a      	mov	r2, r9
 8010666:	4631      	mov	r1, r6
 8010668:	4628      	mov	r0, r5
 801066a:	47b8      	blx	r7
 801066c:	3001      	adds	r0, #1
 801066e:	f43f af2f 	beq.w	80104d0 <_printf_float+0x98>
 8010672:	f108 0801 	add.w	r8, r8, #1
 8010676:	e7e6      	b.n	8010646 <_printf_float+0x20e>
 8010678:	9b07      	ldr	r3, [sp, #28]
 801067a:	2b00      	cmp	r3, #0
 801067c:	dc3a      	bgt.n	80106f4 <_printf_float+0x2bc>
 801067e:	4a1c      	ldr	r2, [pc, #112]	; (80106f0 <_printf_float+0x2b8>)
 8010680:	2301      	movs	r3, #1
 8010682:	4631      	mov	r1, r6
 8010684:	4628      	mov	r0, r5
 8010686:	47b8      	blx	r7
 8010688:	3001      	adds	r0, #1
 801068a:	f43f af21 	beq.w	80104d0 <_printf_float+0x98>
 801068e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010692:	4313      	orrs	r3, r2
 8010694:	d102      	bne.n	801069c <_printf_float+0x264>
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	07d9      	lsls	r1, r3, #31
 801069a:	d5d8      	bpl.n	801064e <_printf_float+0x216>
 801069c:	4653      	mov	r3, sl
 801069e:	465a      	mov	r2, fp
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	47b8      	blx	r7
 80106a6:	3001      	adds	r0, #1
 80106a8:	f43f af12 	beq.w	80104d0 <_printf_float+0x98>
 80106ac:	f04f 0900 	mov.w	r9, #0
 80106b0:	f104 0a1a 	add.w	sl, r4, #26
 80106b4:	9b07      	ldr	r3, [sp, #28]
 80106b6:	425b      	negs	r3, r3
 80106b8:	454b      	cmp	r3, r9
 80106ba:	dc01      	bgt.n	80106c0 <_printf_float+0x288>
 80106bc:	9b08      	ldr	r3, [sp, #32]
 80106be:	e795      	b.n	80105ec <_printf_float+0x1b4>
 80106c0:	2301      	movs	r3, #1
 80106c2:	4652      	mov	r2, sl
 80106c4:	4631      	mov	r1, r6
 80106c6:	4628      	mov	r0, r5
 80106c8:	47b8      	blx	r7
 80106ca:	3001      	adds	r0, #1
 80106cc:	f43f af00 	beq.w	80104d0 <_printf_float+0x98>
 80106d0:	f109 0901 	add.w	r9, r9, #1
 80106d4:	e7ee      	b.n	80106b4 <_printf_float+0x27c>
 80106d6:	bf00      	nop
 80106d8:	ffffffff 	.word	0xffffffff
 80106dc:	7fefffff 	.word	0x7fefffff
 80106e0:	08014934 	.word	0x08014934
 80106e4:	08014938 	.word	0x08014938
 80106e8:	0801493c 	.word	0x0801493c
 80106ec:	08014940 	.word	0x08014940
 80106f0:	08014944 	.word	0x08014944
 80106f4:	9a08      	ldr	r2, [sp, #32]
 80106f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106f8:	429a      	cmp	r2, r3
 80106fa:	bfa8      	it	ge
 80106fc:	461a      	movge	r2, r3
 80106fe:	2a00      	cmp	r2, #0
 8010700:	4691      	mov	r9, r2
 8010702:	dc38      	bgt.n	8010776 <_printf_float+0x33e>
 8010704:	2300      	movs	r3, #0
 8010706:	9305      	str	r3, [sp, #20]
 8010708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801070c:	f104 021a 	add.w	r2, r4, #26
 8010710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010712:	9905      	ldr	r1, [sp, #20]
 8010714:	9304      	str	r3, [sp, #16]
 8010716:	eba3 0309 	sub.w	r3, r3, r9
 801071a:	428b      	cmp	r3, r1
 801071c:	dc33      	bgt.n	8010786 <_printf_float+0x34e>
 801071e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010722:	429a      	cmp	r2, r3
 8010724:	db3c      	blt.n	80107a0 <_printf_float+0x368>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	07da      	lsls	r2, r3, #31
 801072a:	d439      	bmi.n	80107a0 <_printf_float+0x368>
 801072c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010730:	eba2 0903 	sub.w	r9, r2, r3
 8010734:	9b04      	ldr	r3, [sp, #16]
 8010736:	1ad2      	subs	r2, r2, r3
 8010738:	4591      	cmp	r9, r2
 801073a:	bfa8      	it	ge
 801073c:	4691      	movge	r9, r2
 801073e:	f1b9 0f00 	cmp.w	r9, #0
 8010742:	dc35      	bgt.n	80107b0 <_printf_float+0x378>
 8010744:	f04f 0800 	mov.w	r8, #0
 8010748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801074c:	f104 0a1a 	add.w	sl, r4, #26
 8010750:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010754:	1a9b      	subs	r3, r3, r2
 8010756:	eba3 0309 	sub.w	r3, r3, r9
 801075a:	4543      	cmp	r3, r8
 801075c:	f77f af77 	ble.w	801064e <_printf_float+0x216>
 8010760:	2301      	movs	r3, #1
 8010762:	4652      	mov	r2, sl
 8010764:	4631      	mov	r1, r6
 8010766:	4628      	mov	r0, r5
 8010768:	47b8      	blx	r7
 801076a:	3001      	adds	r0, #1
 801076c:	f43f aeb0 	beq.w	80104d0 <_printf_float+0x98>
 8010770:	f108 0801 	add.w	r8, r8, #1
 8010774:	e7ec      	b.n	8010750 <_printf_float+0x318>
 8010776:	4613      	mov	r3, r2
 8010778:	4631      	mov	r1, r6
 801077a:	4642      	mov	r2, r8
 801077c:	4628      	mov	r0, r5
 801077e:	47b8      	blx	r7
 8010780:	3001      	adds	r0, #1
 8010782:	d1bf      	bne.n	8010704 <_printf_float+0x2cc>
 8010784:	e6a4      	b.n	80104d0 <_printf_float+0x98>
 8010786:	2301      	movs	r3, #1
 8010788:	4631      	mov	r1, r6
 801078a:	4628      	mov	r0, r5
 801078c:	9204      	str	r2, [sp, #16]
 801078e:	47b8      	blx	r7
 8010790:	3001      	adds	r0, #1
 8010792:	f43f ae9d 	beq.w	80104d0 <_printf_float+0x98>
 8010796:	9b05      	ldr	r3, [sp, #20]
 8010798:	9a04      	ldr	r2, [sp, #16]
 801079a:	3301      	adds	r3, #1
 801079c:	9305      	str	r3, [sp, #20]
 801079e:	e7b7      	b.n	8010710 <_printf_float+0x2d8>
 80107a0:	4653      	mov	r3, sl
 80107a2:	465a      	mov	r2, fp
 80107a4:	4631      	mov	r1, r6
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b8      	blx	r7
 80107aa:	3001      	adds	r0, #1
 80107ac:	d1be      	bne.n	801072c <_printf_float+0x2f4>
 80107ae:	e68f      	b.n	80104d0 <_printf_float+0x98>
 80107b0:	9a04      	ldr	r2, [sp, #16]
 80107b2:	464b      	mov	r3, r9
 80107b4:	4442      	add	r2, r8
 80107b6:	4631      	mov	r1, r6
 80107b8:	4628      	mov	r0, r5
 80107ba:	47b8      	blx	r7
 80107bc:	3001      	adds	r0, #1
 80107be:	d1c1      	bne.n	8010744 <_printf_float+0x30c>
 80107c0:	e686      	b.n	80104d0 <_printf_float+0x98>
 80107c2:	9a08      	ldr	r2, [sp, #32]
 80107c4:	2a01      	cmp	r2, #1
 80107c6:	dc01      	bgt.n	80107cc <_printf_float+0x394>
 80107c8:	07db      	lsls	r3, r3, #31
 80107ca:	d537      	bpl.n	801083c <_printf_float+0x404>
 80107cc:	2301      	movs	r3, #1
 80107ce:	4642      	mov	r2, r8
 80107d0:	4631      	mov	r1, r6
 80107d2:	4628      	mov	r0, r5
 80107d4:	47b8      	blx	r7
 80107d6:	3001      	adds	r0, #1
 80107d8:	f43f ae7a 	beq.w	80104d0 <_printf_float+0x98>
 80107dc:	4653      	mov	r3, sl
 80107de:	465a      	mov	r2, fp
 80107e0:	4631      	mov	r1, r6
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b8      	blx	r7
 80107e6:	3001      	adds	r0, #1
 80107e8:	f43f ae72 	beq.w	80104d0 <_printf_float+0x98>
 80107ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80107f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f8:	9b08      	ldr	r3, [sp, #32]
 80107fa:	d01a      	beq.n	8010832 <_printf_float+0x3fa>
 80107fc:	3b01      	subs	r3, #1
 80107fe:	f108 0201 	add.w	r2, r8, #1
 8010802:	4631      	mov	r1, r6
 8010804:	4628      	mov	r0, r5
 8010806:	47b8      	blx	r7
 8010808:	3001      	adds	r0, #1
 801080a:	d10e      	bne.n	801082a <_printf_float+0x3f2>
 801080c:	e660      	b.n	80104d0 <_printf_float+0x98>
 801080e:	2301      	movs	r3, #1
 8010810:	464a      	mov	r2, r9
 8010812:	4631      	mov	r1, r6
 8010814:	4628      	mov	r0, r5
 8010816:	47b8      	blx	r7
 8010818:	3001      	adds	r0, #1
 801081a:	f43f ae59 	beq.w	80104d0 <_printf_float+0x98>
 801081e:	f108 0801 	add.w	r8, r8, #1
 8010822:	9b08      	ldr	r3, [sp, #32]
 8010824:	3b01      	subs	r3, #1
 8010826:	4543      	cmp	r3, r8
 8010828:	dcf1      	bgt.n	801080e <_printf_float+0x3d6>
 801082a:	9b04      	ldr	r3, [sp, #16]
 801082c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010830:	e6dd      	b.n	80105ee <_printf_float+0x1b6>
 8010832:	f04f 0800 	mov.w	r8, #0
 8010836:	f104 091a 	add.w	r9, r4, #26
 801083a:	e7f2      	b.n	8010822 <_printf_float+0x3ea>
 801083c:	2301      	movs	r3, #1
 801083e:	4642      	mov	r2, r8
 8010840:	e7df      	b.n	8010802 <_printf_float+0x3ca>
 8010842:	2301      	movs	r3, #1
 8010844:	464a      	mov	r2, r9
 8010846:	4631      	mov	r1, r6
 8010848:	4628      	mov	r0, r5
 801084a:	47b8      	blx	r7
 801084c:	3001      	adds	r0, #1
 801084e:	f43f ae3f 	beq.w	80104d0 <_printf_float+0x98>
 8010852:	f108 0801 	add.w	r8, r8, #1
 8010856:	68e3      	ldr	r3, [r4, #12]
 8010858:	9909      	ldr	r1, [sp, #36]	; 0x24
 801085a:	1a5b      	subs	r3, r3, r1
 801085c:	4543      	cmp	r3, r8
 801085e:	dcf0      	bgt.n	8010842 <_printf_float+0x40a>
 8010860:	e6f9      	b.n	8010656 <_printf_float+0x21e>
 8010862:	f04f 0800 	mov.w	r8, #0
 8010866:	f104 0919 	add.w	r9, r4, #25
 801086a:	e7f4      	b.n	8010856 <_printf_float+0x41e>

0801086c <_printf_common>:
 801086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010870:	4616      	mov	r6, r2
 8010872:	4699      	mov	r9, r3
 8010874:	688a      	ldr	r2, [r1, #8]
 8010876:	690b      	ldr	r3, [r1, #16]
 8010878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801087c:	4293      	cmp	r3, r2
 801087e:	bfb8      	it	lt
 8010880:	4613      	movlt	r3, r2
 8010882:	6033      	str	r3, [r6, #0]
 8010884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010888:	4607      	mov	r7, r0
 801088a:	460c      	mov	r4, r1
 801088c:	b10a      	cbz	r2, 8010892 <_printf_common+0x26>
 801088e:	3301      	adds	r3, #1
 8010890:	6033      	str	r3, [r6, #0]
 8010892:	6823      	ldr	r3, [r4, #0]
 8010894:	0699      	lsls	r1, r3, #26
 8010896:	bf42      	ittt	mi
 8010898:	6833      	ldrmi	r3, [r6, #0]
 801089a:	3302      	addmi	r3, #2
 801089c:	6033      	strmi	r3, [r6, #0]
 801089e:	6825      	ldr	r5, [r4, #0]
 80108a0:	f015 0506 	ands.w	r5, r5, #6
 80108a4:	d106      	bne.n	80108b4 <_printf_common+0x48>
 80108a6:	f104 0a19 	add.w	sl, r4, #25
 80108aa:	68e3      	ldr	r3, [r4, #12]
 80108ac:	6832      	ldr	r2, [r6, #0]
 80108ae:	1a9b      	subs	r3, r3, r2
 80108b0:	42ab      	cmp	r3, r5
 80108b2:	dc26      	bgt.n	8010902 <_printf_common+0x96>
 80108b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80108b8:	1e13      	subs	r3, r2, #0
 80108ba:	6822      	ldr	r2, [r4, #0]
 80108bc:	bf18      	it	ne
 80108be:	2301      	movne	r3, #1
 80108c0:	0692      	lsls	r2, r2, #26
 80108c2:	d42b      	bmi.n	801091c <_printf_common+0xb0>
 80108c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108c8:	4649      	mov	r1, r9
 80108ca:	4638      	mov	r0, r7
 80108cc:	47c0      	blx	r8
 80108ce:	3001      	adds	r0, #1
 80108d0:	d01e      	beq.n	8010910 <_printf_common+0xa4>
 80108d2:	6823      	ldr	r3, [r4, #0]
 80108d4:	6922      	ldr	r2, [r4, #16]
 80108d6:	f003 0306 	and.w	r3, r3, #6
 80108da:	2b04      	cmp	r3, #4
 80108dc:	bf02      	ittt	eq
 80108de:	68e5      	ldreq	r5, [r4, #12]
 80108e0:	6833      	ldreq	r3, [r6, #0]
 80108e2:	1aed      	subeq	r5, r5, r3
 80108e4:	68a3      	ldr	r3, [r4, #8]
 80108e6:	bf0c      	ite	eq
 80108e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108ec:	2500      	movne	r5, #0
 80108ee:	4293      	cmp	r3, r2
 80108f0:	bfc4      	itt	gt
 80108f2:	1a9b      	subgt	r3, r3, r2
 80108f4:	18ed      	addgt	r5, r5, r3
 80108f6:	2600      	movs	r6, #0
 80108f8:	341a      	adds	r4, #26
 80108fa:	42b5      	cmp	r5, r6
 80108fc:	d11a      	bne.n	8010934 <_printf_common+0xc8>
 80108fe:	2000      	movs	r0, #0
 8010900:	e008      	b.n	8010914 <_printf_common+0xa8>
 8010902:	2301      	movs	r3, #1
 8010904:	4652      	mov	r2, sl
 8010906:	4649      	mov	r1, r9
 8010908:	4638      	mov	r0, r7
 801090a:	47c0      	blx	r8
 801090c:	3001      	adds	r0, #1
 801090e:	d103      	bne.n	8010918 <_printf_common+0xac>
 8010910:	f04f 30ff 	mov.w	r0, #4294967295
 8010914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010918:	3501      	adds	r5, #1
 801091a:	e7c6      	b.n	80108aa <_printf_common+0x3e>
 801091c:	18e1      	adds	r1, r4, r3
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	2030      	movs	r0, #48	; 0x30
 8010922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010926:	4422      	add	r2, r4
 8010928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801092c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010930:	3302      	adds	r3, #2
 8010932:	e7c7      	b.n	80108c4 <_printf_common+0x58>
 8010934:	2301      	movs	r3, #1
 8010936:	4622      	mov	r2, r4
 8010938:	4649      	mov	r1, r9
 801093a:	4638      	mov	r0, r7
 801093c:	47c0      	blx	r8
 801093e:	3001      	adds	r0, #1
 8010940:	d0e6      	beq.n	8010910 <_printf_common+0xa4>
 8010942:	3601      	adds	r6, #1
 8010944:	e7d9      	b.n	80108fa <_printf_common+0x8e>
	...

08010948 <_printf_i>:
 8010948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801094c:	7e0f      	ldrb	r7, [r1, #24]
 801094e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010950:	2f78      	cmp	r7, #120	; 0x78
 8010952:	4691      	mov	r9, r2
 8010954:	4680      	mov	r8, r0
 8010956:	460c      	mov	r4, r1
 8010958:	469a      	mov	sl, r3
 801095a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801095e:	d807      	bhi.n	8010970 <_printf_i+0x28>
 8010960:	2f62      	cmp	r7, #98	; 0x62
 8010962:	d80a      	bhi.n	801097a <_printf_i+0x32>
 8010964:	2f00      	cmp	r7, #0
 8010966:	f000 80d4 	beq.w	8010b12 <_printf_i+0x1ca>
 801096a:	2f58      	cmp	r7, #88	; 0x58
 801096c:	f000 80c0 	beq.w	8010af0 <_printf_i+0x1a8>
 8010970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010978:	e03a      	b.n	80109f0 <_printf_i+0xa8>
 801097a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801097e:	2b15      	cmp	r3, #21
 8010980:	d8f6      	bhi.n	8010970 <_printf_i+0x28>
 8010982:	a101      	add	r1, pc, #4	; (adr r1, 8010988 <_printf_i+0x40>)
 8010984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010988:	080109e1 	.word	0x080109e1
 801098c:	080109f5 	.word	0x080109f5
 8010990:	08010971 	.word	0x08010971
 8010994:	08010971 	.word	0x08010971
 8010998:	08010971 	.word	0x08010971
 801099c:	08010971 	.word	0x08010971
 80109a0:	080109f5 	.word	0x080109f5
 80109a4:	08010971 	.word	0x08010971
 80109a8:	08010971 	.word	0x08010971
 80109ac:	08010971 	.word	0x08010971
 80109b0:	08010971 	.word	0x08010971
 80109b4:	08010af9 	.word	0x08010af9
 80109b8:	08010a21 	.word	0x08010a21
 80109bc:	08010ab3 	.word	0x08010ab3
 80109c0:	08010971 	.word	0x08010971
 80109c4:	08010971 	.word	0x08010971
 80109c8:	08010b1b 	.word	0x08010b1b
 80109cc:	08010971 	.word	0x08010971
 80109d0:	08010a21 	.word	0x08010a21
 80109d4:	08010971 	.word	0x08010971
 80109d8:	08010971 	.word	0x08010971
 80109dc:	08010abb 	.word	0x08010abb
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	1d1a      	adds	r2, r3, #4
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	602a      	str	r2, [r5, #0]
 80109e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109f0:	2301      	movs	r3, #1
 80109f2:	e09f      	b.n	8010b34 <_printf_i+0x1ec>
 80109f4:	6820      	ldr	r0, [r4, #0]
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	0607      	lsls	r7, r0, #24
 80109fa:	f103 0104 	add.w	r1, r3, #4
 80109fe:	6029      	str	r1, [r5, #0]
 8010a00:	d501      	bpl.n	8010a06 <_printf_i+0xbe>
 8010a02:	681e      	ldr	r6, [r3, #0]
 8010a04:	e003      	b.n	8010a0e <_printf_i+0xc6>
 8010a06:	0646      	lsls	r6, r0, #25
 8010a08:	d5fb      	bpl.n	8010a02 <_printf_i+0xba>
 8010a0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010a0e:	2e00      	cmp	r6, #0
 8010a10:	da03      	bge.n	8010a1a <_printf_i+0xd2>
 8010a12:	232d      	movs	r3, #45	; 0x2d
 8010a14:	4276      	negs	r6, r6
 8010a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a1a:	485a      	ldr	r0, [pc, #360]	; (8010b84 <_printf_i+0x23c>)
 8010a1c:	230a      	movs	r3, #10
 8010a1e:	e012      	b.n	8010a46 <_printf_i+0xfe>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	6820      	ldr	r0, [r4, #0]
 8010a24:	1d19      	adds	r1, r3, #4
 8010a26:	6029      	str	r1, [r5, #0]
 8010a28:	0605      	lsls	r5, r0, #24
 8010a2a:	d501      	bpl.n	8010a30 <_printf_i+0xe8>
 8010a2c:	681e      	ldr	r6, [r3, #0]
 8010a2e:	e002      	b.n	8010a36 <_printf_i+0xee>
 8010a30:	0641      	lsls	r1, r0, #25
 8010a32:	d5fb      	bpl.n	8010a2c <_printf_i+0xe4>
 8010a34:	881e      	ldrh	r6, [r3, #0]
 8010a36:	4853      	ldr	r0, [pc, #332]	; (8010b84 <_printf_i+0x23c>)
 8010a38:	2f6f      	cmp	r7, #111	; 0x6f
 8010a3a:	bf0c      	ite	eq
 8010a3c:	2308      	moveq	r3, #8
 8010a3e:	230a      	movne	r3, #10
 8010a40:	2100      	movs	r1, #0
 8010a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a46:	6865      	ldr	r5, [r4, #4]
 8010a48:	60a5      	str	r5, [r4, #8]
 8010a4a:	2d00      	cmp	r5, #0
 8010a4c:	bfa2      	ittt	ge
 8010a4e:	6821      	ldrge	r1, [r4, #0]
 8010a50:	f021 0104 	bicge.w	r1, r1, #4
 8010a54:	6021      	strge	r1, [r4, #0]
 8010a56:	b90e      	cbnz	r6, 8010a5c <_printf_i+0x114>
 8010a58:	2d00      	cmp	r5, #0
 8010a5a:	d04b      	beq.n	8010af4 <_printf_i+0x1ac>
 8010a5c:	4615      	mov	r5, r2
 8010a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010a62:	fb03 6711 	mls	r7, r3, r1, r6
 8010a66:	5dc7      	ldrb	r7, [r0, r7]
 8010a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a6c:	4637      	mov	r7, r6
 8010a6e:	42bb      	cmp	r3, r7
 8010a70:	460e      	mov	r6, r1
 8010a72:	d9f4      	bls.n	8010a5e <_printf_i+0x116>
 8010a74:	2b08      	cmp	r3, #8
 8010a76:	d10b      	bne.n	8010a90 <_printf_i+0x148>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	07de      	lsls	r6, r3, #31
 8010a7c:	d508      	bpl.n	8010a90 <_printf_i+0x148>
 8010a7e:	6923      	ldr	r3, [r4, #16]
 8010a80:	6861      	ldr	r1, [r4, #4]
 8010a82:	4299      	cmp	r1, r3
 8010a84:	bfde      	ittt	le
 8010a86:	2330      	movle	r3, #48	; 0x30
 8010a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a90:	1b52      	subs	r2, r2, r5
 8010a92:	6122      	str	r2, [r4, #16]
 8010a94:	f8cd a000 	str.w	sl, [sp]
 8010a98:	464b      	mov	r3, r9
 8010a9a:	aa03      	add	r2, sp, #12
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	4640      	mov	r0, r8
 8010aa0:	f7ff fee4 	bl	801086c <_printf_common>
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	d14a      	bne.n	8010b3e <_printf_i+0x1f6>
 8010aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010aac:	b004      	add	sp, #16
 8010aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	f043 0320 	orr.w	r3, r3, #32
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	4833      	ldr	r0, [pc, #204]	; (8010b88 <_printf_i+0x240>)
 8010abc:	2778      	movs	r7, #120	; 0x78
 8010abe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	6829      	ldr	r1, [r5, #0]
 8010ac6:	061f      	lsls	r7, r3, #24
 8010ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010acc:	d402      	bmi.n	8010ad4 <_printf_i+0x18c>
 8010ace:	065f      	lsls	r7, r3, #25
 8010ad0:	bf48      	it	mi
 8010ad2:	b2b6      	uxthmi	r6, r6
 8010ad4:	07df      	lsls	r7, r3, #31
 8010ad6:	bf48      	it	mi
 8010ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8010adc:	6029      	str	r1, [r5, #0]
 8010ade:	bf48      	it	mi
 8010ae0:	6023      	strmi	r3, [r4, #0]
 8010ae2:	b91e      	cbnz	r6, 8010aec <_printf_i+0x1a4>
 8010ae4:	6823      	ldr	r3, [r4, #0]
 8010ae6:	f023 0320 	bic.w	r3, r3, #32
 8010aea:	6023      	str	r3, [r4, #0]
 8010aec:	2310      	movs	r3, #16
 8010aee:	e7a7      	b.n	8010a40 <_printf_i+0xf8>
 8010af0:	4824      	ldr	r0, [pc, #144]	; (8010b84 <_printf_i+0x23c>)
 8010af2:	e7e4      	b.n	8010abe <_printf_i+0x176>
 8010af4:	4615      	mov	r5, r2
 8010af6:	e7bd      	b.n	8010a74 <_printf_i+0x12c>
 8010af8:	682b      	ldr	r3, [r5, #0]
 8010afa:	6826      	ldr	r6, [r4, #0]
 8010afc:	6961      	ldr	r1, [r4, #20]
 8010afe:	1d18      	adds	r0, r3, #4
 8010b00:	6028      	str	r0, [r5, #0]
 8010b02:	0635      	lsls	r5, r6, #24
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	d501      	bpl.n	8010b0c <_printf_i+0x1c4>
 8010b08:	6019      	str	r1, [r3, #0]
 8010b0a:	e002      	b.n	8010b12 <_printf_i+0x1ca>
 8010b0c:	0670      	lsls	r0, r6, #25
 8010b0e:	d5fb      	bpl.n	8010b08 <_printf_i+0x1c0>
 8010b10:	8019      	strh	r1, [r3, #0]
 8010b12:	2300      	movs	r3, #0
 8010b14:	6123      	str	r3, [r4, #16]
 8010b16:	4615      	mov	r5, r2
 8010b18:	e7bc      	b.n	8010a94 <_printf_i+0x14c>
 8010b1a:	682b      	ldr	r3, [r5, #0]
 8010b1c:	1d1a      	adds	r2, r3, #4
 8010b1e:	602a      	str	r2, [r5, #0]
 8010b20:	681d      	ldr	r5, [r3, #0]
 8010b22:	6862      	ldr	r2, [r4, #4]
 8010b24:	2100      	movs	r1, #0
 8010b26:	4628      	mov	r0, r5
 8010b28:	f7ef fbda 	bl	80002e0 <memchr>
 8010b2c:	b108      	cbz	r0, 8010b32 <_printf_i+0x1ea>
 8010b2e:	1b40      	subs	r0, r0, r5
 8010b30:	6060      	str	r0, [r4, #4]
 8010b32:	6863      	ldr	r3, [r4, #4]
 8010b34:	6123      	str	r3, [r4, #16]
 8010b36:	2300      	movs	r3, #0
 8010b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b3c:	e7aa      	b.n	8010a94 <_printf_i+0x14c>
 8010b3e:	6923      	ldr	r3, [r4, #16]
 8010b40:	462a      	mov	r2, r5
 8010b42:	4649      	mov	r1, r9
 8010b44:	4640      	mov	r0, r8
 8010b46:	47d0      	blx	sl
 8010b48:	3001      	adds	r0, #1
 8010b4a:	d0ad      	beq.n	8010aa8 <_printf_i+0x160>
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	079b      	lsls	r3, r3, #30
 8010b50:	d413      	bmi.n	8010b7a <_printf_i+0x232>
 8010b52:	68e0      	ldr	r0, [r4, #12]
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	4298      	cmp	r0, r3
 8010b58:	bfb8      	it	lt
 8010b5a:	4618      	movlt	r0, r3
 8010b5c:	e7a6      	b.n	8010aac <_printf_i+0x164>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	4632      	mov	r2, r6
 8010b62:	4649      	mov	r1, r9
 8010b64:	4640      	mov	r0, r8
 8010b66:	47d0      	blx	sl
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d09d      	beq.n	8010aa8 <_printf_i+0x160>
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	68e3      	ldr	r3, [r4, #12]
 8010b70:	9903      	ldr	r1, [sp, #12]
 8010b72:	1a5b      	subs	r3, r3, r1
 8010b74:	42ab      	cmp	r3, r5
 8010b76:	dcf2      	bgt.n	8010b5e <_printf_i+0x216>
 8010b78:	e7eb      	b.n	8010b52 <_printf_i+0x20a>
 8010b7a:	2500      	movs	r5, #0
 8010b7c:	f104 0619 	add.w	r6, r4, #25
 8010b80:	e7f5      	b.n	8010b6e <_printf_i+0x226>
 8010b82:	bf00      	nop
 8010b84:	08014946 	.word	0x08014946
 8010b88:	08014957 	.word	0x08014957

08010b8c <_scanf_float>:
 8010b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	b087      	sub	sp, #28
 8010b92:	4617      	mov	r7, r2
 8010b94:	9303      	str	r3, [sp, #12]
 8010b96:	688b      	ldr	r3, [r1, #8]
 8010b98:	1e5a      	subs	r2, r3, #1
 8010b9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010b9e:	bf83      	ittte	hi
 8010ba0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010ba4:	195b      	addhi	r3, r3, r5
 8010ba6:	9302      	strhi	r3, [sp, #8]
 8010ba8:	2300      	movls	r3, #0
 8010baa:	bf86      	itte	hi
 8010bac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010bb0:	608b      	strhi	r3, [r1, #8]
 8010bb2:	9302      	strls	r3, [sp, #8]
 8010bb4:	680b      	ldr	r3, [r1, #0]
 8010bb6:	468b      	mov	fp, r1
 8010bb8:	2500      	movs	r5, #0
 8010bba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010bbe:	f84b 3b1c 	str.w	r3, [fp], #28
 8010bc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010bc6:	4680      	mov	r8, r0
 8010bc8:	460c      	mov	r4, r1
 8010bca:	465e      	mov	r6, fp
 8010bcc:	46aa      	mov	sl, r5
 8010bce:	46a9      	mov	r9, r5
 8010bd0:	9501      	str	r5, [sp, #4]
 8010bd2:	68a2      	ldr	r2, [r4, #8]
 8010bd4:	b152      	cbz	r2, 8010bec <_scanf_float+0x60>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	2b4e      	cmp	r3, #78	; 0x4e
 8010bdc:	d864      	bhi.n	8010ca8 <_scanf_float+0x11c>
 8010bde:	2b40      	cmp	r3, #64	; 0x40
 8010be0:	d83c      	bhi.n	8010c5c <_scanf_float+0xd0>
 8010be2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010be6:	b2c8      	uxtb	r0, r1
 8010be8:	280e      	cmp	r0, #14
 8010bea:	d93a      	bls.n	8010c62 <_scanf_float+0xd6>
 8010bec:	f1b9 0f00 	cmp.w	r9, #0
 8010bf0:	d003      	beq.n	8010bfa <_scanf_float+0x6e>
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bf8:	6023      	str	r3, [r4, #0]
 8010bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bfe:	f1ba 0f01 	cmp.w	sl, #1
 8010c02:	f200 8113 	bhi.w	8010e2c <_scanf_float+0x2a0>
 8010c06:	455e      	cmp	r6, fp
 8010c08:	f200 8105 	bhi.w	8010e16 <_scanf_float+0x28a>
 8010c0c:	2501      	movs	r5, #1
 8010c0e:	4628      	mov	r0, r5
 8010c10:	b007      	add	sp, #28
 8010c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010c1a:	2a0d      	cmp	r2, #13
 8010c1c:	d8e6      	bhi.n	8010bec <_scanf_float+0x60>
 8010c1e:	a101      	add	r1, pc, #4	; (adr r1, 8010c24 <_scanf_float+0x98>)
 8010c20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c24:	08010d63 	.word	0x08010d63
 8010c28:	08010bed 	.word	0x08010bed
 8010c2c:	08010bed 	.word	0x08010bed
 8010c30:	08010bed 	.word	0x08010bed
 8010c34:	08010dc3 	.word	0x08010dc3
 8010c38:	08010d9b 	.word	0x08010d9b
 8010c3c:	08010bed 	.word	0x08010bed
 8010c40:	08010bed 	.word	0x08010bed
 8010c44:	08010d71 	.word	0x08010d71
 8010c48:	08010bed 	.word	0x08010bed
 8010c4c:	08010bed 	.word	0x08010bed
 8010c50:	08010bed 	.word	0x08010bed
 8010c54:	08010bed 	.word	0x08010bed
 8010c58:	08010d29 	.word	0x08010d29
 8010c5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010c60:	e7db      	b.n	8010c1a <_scanf_float+0x8e>
 8010c62:	290e      	cmp	r1, #14
 8010c64:	d8c2      	bhi.n	8010bec <_scanf_float+0x60>
 8010c66:	a001      	add	r0, pc, #4	; (adr r0, 8010c6c <_scanf_float+0xe0>)
 8010c68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010c6c:	08010d1b 	.word	0x08010d1b
 8010c70:	08010bed 	.word	0x08010bed
 8010c74:	08010d1b 	.word	0x08010d1b
 8010c78:	08010daf 	.word	0x08010daf
 8010c7c:	08010bed 	.word	0x08010bed
 8010c80:	08010cc9 	.word	0x08010cc9
 8010c84:	08010d05 	.word	0x08010d05
 8010c88:	08010d05 	.word	0x08010d05
 8010c8c:	08010d05 	.word	0x08010d05
 8010c90:	08010d05 	.word	0x08010d05
 8010c94:	08010d05 	.word	0x08010d05
 8010c98:	08010d05 	.word	0x08010d05
 8010c9c:	08010d05 	.word	0x08010d05
 8010ca0:	08010d05 	.word	0x08010d05
 8010ca4:	08010d05 	.word	0x08010d05
 8010ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8010caa:	d809      	bhi.n	8010cc0 <_scanf_float+0x134>
 8010cac:	2b60      	cmp	r3, #96	; 0x60
 8010cae:	d8b2      	bhi.n	8010c16 <_scanf_float+0x8a>
 8010cb0:	2b54      	cmp	r3, #84	; 0x54
 8010cb2:	d077      	beq.n	8010da4 <_scanf_float+0x218>
 8010cb4:	2b59      	cmp	r3, #89	; 0x59
 8010cb6:	d199      	bne.n	8010bec <_scanf_float+0x60>
 8010cb8:	2d07      	cmp	r5, #7
 8010cba:	d197      	bne.n	8010bec <_scanf_float+0x60>
 8010cbc:	2508      	movs	r5, #8
 8010cbe:	e029      	b.n	8010d14 <_scanf_float+0x188>
 8010cc0:	2b74      	cmp	r3, #116	; 0x74
 8010cc2:	d06f      	beq.n	8010da4 <_scanf_float+0x218>
 8010cc4:	2b79      	cmp	r3, #121	; 0x79
 8010cc6:	e7f6      	b.n	8010cb6 <_scanf_float+0x12a>
 8010cc8:	6821      	ldr	r1, [r4, #0]
 8010cca:	05c8      	lsls	r0, r1, #23
 8010ccc:	d51a      	bpl.n	8010d04 <_scanf_float+0x178>
 8010cce:	9b02      	ldr	r3, [sp, #8]
 8010cd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010cd4:	6021      	str	r1, [r4, #0]
 8010cd6:	f109 0901 	add.w	r9, r9, #1
 8010cda:	b11b      	cbz	r3, 8010ce4 <_scanf_float+0x158>
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	3201      	adds	r2, #1
 8010ce0:	9302      	str	r3, [sp, #8]
 8010ce2:	60a2      	str	r2, [r4, #8]
 8010ce4:	68a3      	ldr	r3, [r4, #8]
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	60a3      	str	r3, [r4, #8]
 8010cea:	6923      	ldr	r3, [r4, #16]
 8010cec:	3301      	adds	r3, #1
 8010cee:	6123      	str	r3, [r4, #16]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	607b      	str	r3, [r7, #4]
 8010cf8:	f340 8084 	ble.w	8010e04 <_scanf_float+0x278>
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	603b      	str	r3, [r7, #0]
 8010d02:	e766      	b.n	8010bd2 <_scanf_float+0x46>
 8010d04:	eb1a 0f05 	cmn.w	sl, r5
 8010d08:	f47f af70 	bne.w	8010bec <_scanf_float+0x60>
 8010d0c:	6822      	ldr	r2, [r4, #0]
 8010d0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010d12:	6022      	str	r2, [r4, #0]
 8010d14:	f806 3b01 	strb.w	r3, [r6], #1
 8010d18:	e7e4      	b.n	8010ce4 <_scanf_float+0x158>
 8010d1a:	6822      	ldr	r2, [r4, #0]
 8010d1c:	0610      	lsls	r0, r2, #24
 8010d1e:	f57f af65 	bpl.w	8010bec <_scanf_float+0x60>
 8010d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d26:	e7f4      	b.n	8010d12 <_scanf_float+0x186>
 8010d28:	f1ba 0f00 	cmp.w	sl, #0
 8010d2c:	d10e      	bne.n	8010d4c <_scanf_float+0x1c0>
 8010d2e:	f1b9 0f00 	cmp.w	r9, #0
 8010d32:	d10e      	bne.n	8010d52 <_scanf_float+0x1c6>
 8010d34:	6822      	ldr	r2, [r4, #0]
 8010d36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010d3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010d3e:	d108      	bne.n	8010d52 <_scanf_float+0x1c6>
 8010d40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d44:	6022      	str	r2, [r4, #0]
 8010d46:	f04f 0a01 	mov.w	sl, #1
 8010d4a:	e7e3      	b.n	8010d14 <_scanf_float+0x188>
 8010d4c:	f1ba 0f02 	cmp.w	sl, #2
 8010d50:	d055      	beq.n	8010dfe <_scanf_float+0x272>
 8010d52:	2d01      	cmp	r5, #1
 8010d54:	d002      	beq.n	8010d5c <_scanf_float+0x1d0>
 8010d56:	2d04      	cmp	r5, #4
 8010d58:	f47f af48 	bne.w	8010bec <_scanf_float+0x60>
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	b2ed      	uxtb	r5, r5
 8010d60:	e7d8      	b.n	8010d14 <_scanf_float+0x188>
 8010d62:	f1ba 0f01 	cmp.w	sl, #1
 8010d66:	f47f af41 	bne.w	8010bec <_scanf_float+0x60>
 8010d6a:	f04f 0a02 	mov.w	sl, #2
 8010d6e:	e7d1      	b.n	8010d14 <_scanf_float+0x188>
 8010d70:	b97d      	cbnz	r5, 8010d92 <_scanf_float+0x206>
 8010d72:	f1b9 0f00 	cmp.w	r9, #0
 8010d76:	f47f af3c 	bne.w	8010bf2 <_scanf_float+0x66>
 8010d7a:	6822      	ldr	r2, [r4, #0]
 8010d7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010d80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010d84:	f47f af39 	bne.w	8010bfa <_scanf_float+0x6e>
 8010d88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d8c:	6022      	str	r2, [r4, #0]
 8010d8e:	2501      	movs	r5, #1
 8010d90:	e7c0      	b.n	8010d14 <_scanf_float+0x188>
 8010d92:	2d03      	cmp	r5, #3
 8010d94:	d0e2      	beq.n	8010d5c <_scanf_float+0x1d0>
 8010d96:	2d05      	cmp	r5, #5
 8010d98:	e7de      	b.n	8010d58 <_scanf_float+0x1cc>
 8010d9a:	2d02      	cmp	r5, #2
 8010d9c:	f47f af26 	bne.w	8010bec <_scanf_float+0x60>
 8010da0:	2503      	movs	r5, #3
 8010da2:	e7b7      	b.n	8010d14 <_scanf_float+0x188>
 8010da4:	2d06      	cmp	r5, #6
 8010da6:	f47f af21 	bne.w	8010bec <_scanf_float+0x60>
 8010daa:	2507      	movs	r5, #7
 8010dac:	e7b2      	b.n	8010d14 <_scanf_float+0x188>
 8010dae:	6822      	ldr	r2, [r4, #0]
 8010db0:	0591      	lsls	r1, r2, #22
 8010db2:	f57f af1b 	bpl.w	8010bec <_scanf_float+0x60>
 8010db6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010dba:	6022      	str	r2, [r4, #0]
 8010dbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010dc0:	e7a8      	b.n	8010d14 <_scanf_float+0x188>
 8010dc2:	6822      	ldr	r2, [r4, #0]
 8010dc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010dc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010dcc:	d006      	beq.n	8010ddc <_scanf_float+0x250>
 8010dce:	0550      	lsls	r0, r2, #21
 8010dd0:	f57f af0c 	bpl.w	8010bec <_scanf_float+0x60>
 8010dd4:	f1b9 0f00 	cmp.w	r9, #0
 8010dd8:	f43f af0f 	beq.w	8010bfa <_scanf_float+0x6e>
 8010ddc:	0591      	lsls	r1, r2, #22
 8010dde:	bf58      	it	pl
 8010de0:	9901      	ldrpl	r1, [sp, #4]
 8010de2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010de6:	bf58      	it	pl
 8010de8:	eba9 0101 	subpl.w	r1, r9, r1
 8010dec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010df0:	bf58      	it	pl
 8010df2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010df6:	6022      	str	r2, [r4, #0]
 8010df8:	f04f 0900 	mov.w	r9, #0
 8010dfc:	e78a      	b.n	8010d14 <_scanf_float+0x188>
 8010dfe:	f04f 0a03 	mov.w	sl, #3
 8010e02:	e787      	b.n	8010d14 <_scanf_float+0x188>
 8010e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e08:	4639      	mov	r1, r7
 8010e0a:	4640      	mov	r0, r8
 8010e0c:	4798      	blx	r3
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f43f aedf 	beq.w	8010bd2 <_scanf_float+0x46>
 8010e14:	e6ea      	b.n	8010bec <_scanf_float+0x60>
 8010e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e1e:	463a      	mov	r2, r7
 8010e20:	4640      	mov	r0, r8
 8010e22:	4798      	blx	r3
 8010e24:	6923      	ldr	r3, [r4, #16]
 8010e26:	3b01      	subs	r3, #1
 8010e28:	6123      	str	r3, [r4, #16]
 8010e2a:	e6ec      	b.n	8010c06 <_scanf_float+0x7a>
 8010e2c:	1e6b      	subs	r3, r5, #1
 8010e2e:	2b06      	cmp	r3, #6
 8010e30:	d825      	bhi.n	8010e7e <_scanf_float+0x2f2>
 8010e32:	2d02      	cmp	r5, #2
 8010e34:	d836      	bhi.n	8010ea4 <_scanf_float+0x318>
 8010e36:	455e      	cmp	r6, fp
 8010e38:	f67f aee8 	bls.w	8010c0c <_scanf_float+0x80>
 8010e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e44:	463a      	mov	r2, r7
 8010e46:	4640      	mov	r0, r8
 8010e48:	4798      	blx	r3
 8010e4a:	6923      	ldr	r3, [r4, #16]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	6123      	str	r3, [r4, #16]
 8010e50:	e7f1      	b.n	8010e36 <_scanf_float+0x2aa>
 8010e52:	9802      	ldr	r0, [sp, #8]
 8010e54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010e5c:	9002      	str	r0, [sp, #8]
 8010e5e:	463a      	mov	r2, r7
 8010e60:	4640      	mov	r0, r8
 8010e62:	4798      	blx	r3
 8010e64:	6923      	ldr	r3, [r4, #16]
 8010e66:	3b01      	subs	r3, #1
 8010e68:	6123      	str	r3, [r4, #16]
 8010e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e6e:	fa5f fa8a 	uxtb.w	sl, sl
 8010e72:	f1ba 0f02 	cmp.w	sl, #2
 8010e76:	d1ec      	bne.n	8010e52 <_scanf_float+0x2c6>
 8010e78:	3d03      	subs	r5, #3
 8010e7a:	b2ed      	uxtb	r5, r5
 8010e7c:	1b76      	subs	r6, r6, r5
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	05da      	lsls	r2, r3, #23
 8010e82:	d52f      	bpl.n	8010ee4 <_scanf_float+0x358>
 8010e84:	055b      	lsls	r3, r3, #21
 8010e86:	d510      	bpl.n	8010eaa <_scanf_float+0x31e>
 8010e88:	455e      	cmp	r6, fp
 8010e8a:	f67f aebf 	bls.w	8010c0c <_scanf_float+0x80>
 8010e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e96:	463a      	mov	r2, r7
 8010e98:	4640      	mov	r0, r8
 8010e9a:	4798      	blx	r3
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	6123      	str	r3, [r4, #16]
 8010ea2:	e7f1      	b.n	8010e88 <_scanf_float+0x2fc>
 8010ea4:	46aa      	mov	sl, r5
 8010ea6:	9602      	str	r6, [sp, #8]
 8010ea8:	e7df      	b.n	8010e6a <_scanf_float+0x2de>
 8010eaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010eae:	6923      	ldr	r3, [r4, #16]
 8010eb0:	2965      	cmp	r1, #101	; 0x65
 8010eb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010eb6:	f106 35ff 	add.w	r5, r6, #4294967295
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	d00c      	beq.n	8010ed8 <_scanf_float+0x34c>
 8010ebe:	2945      	cmp	r1, #69	; 0x45
 8010ec0:	d00a      	beq.n	8010ed8 <_scanf_float+0x34c>
 8010ec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ec6:	463a      	mov	r2, r7
 8010ec8:	4640      	mov	r0, r8
 8010eca:	4798      	blx	r3
 8010ecc:	6923      	ldr	r3, [r4, #16]
 8010ece:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	1eb5      	subs	r5, r6, #2
 8010ed6:	6123      	str	r3, [r4, #16]
 8010ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010edc:	463a      	mov	r2, r7
 8010ede:	4640      	mov	r0, r8
 8010ee0:	4798      	blx	r3
 8010ee2:	462e      	mov	r6, r5
 8010ee4:	6825      	ldr	r5, [r4, #0]
 8010ee6:	f015 0510 	ands.w	r5, r5, #16
 8010eea:	d14d      	bne.n	8010f88 <_scanf_float+0x3fc>
 8010eec:	7035      	strb	r5, [r6, #0]
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef8:	d11a      	bne.n	8010f30 <_scanf_float+0x3a4>
 8010efa:	9b01      	ldr	r3, [sp, #4]
 8010efc:	454b      	cmp	r3, r9
 8010efe:	eba3 0209 	sub.w	r2, r3, r9
 8010f02:	d122      	bne.n	8010f4a <_scanf_float+0x3be>
 8010f04:	2200      	movs	r2, #0
 8010f06:	4659      	mov	r1, fp
 8010f08:	4640      	mov	r0, r8
 8010f0a:	f002 fb3b 	bl	8013584 <_strtod_r>
 8010f0e:	9b03      	ldr	r3, [sp, #12]
 8010f10:	6821      	ldr	r1, [r4, #0]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f011 0f02 	tst.w	r1, #2
 8010f18:	f103 0204 	add.w	r2, r3, #4
 8010f1c:	d020      	beq.n	8010f60 <_scanf_float+0x3d4>
 8010f1e:	9903      	ldr	r1, [sp, #12]
 8010f20:	600a      	str	r2, [r1, #0]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	ed83 0b00 	vstr	d0, [r3]
 8010f28:	68e3      	ldr	r3, [r4, #12]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	60e3      	str	r3, [r4, #12]
 8010f2e:	e66e      	b.n	8010c0e <_scanf_float+0x82>
 8010f30:	9b04      	ldr	r3, [sp, #16]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0e6      	beq.n	8010f04 <_scanf_float+0x378>
 8010f36:	9905      	ldr	r1, [sp, #20]
 8010f38:	230a      	movs	r3, #10
 8010f3a:	462a      	mov	r2, r5
 8010f3c:	3101      	adds	r1, #1
 8010f3e:	4640      	mov	r0, r8
 8010f40:	f002 fba8 	bl	8013694 <_strtol_r>
 8010f44:	9b04      	ldr	r3, [sp, #16]
 8010f46:	9e05      	ldr	r6, [sp, #20]
 8010f48:	1ac2      	subs	r2, r0, r3
 8010f4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f4e:	429e      	cmp	r6, r3
 8010f50:	bf28      	it	cs
 8010f52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010f56:	490d      	ldr	r1, [pc, #52]	; (8010f8c <_scanf_float+0x400>)
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f000 f8ff 	bl	801115c <siprintf>
 8010f5e:	e7d1      	b.n	8010f04 <_scanf_float+0x378>
 8010f60:	f011 0f04 	tst.w	r1, #4
 8010f64:	9903      	ldr	r1, [sp, #12]
 8010f66:	600a      	str	r2, [r1, #0]
 8010f68:	d1db      	bne.n	8010f22 <_scanf_float+0x396>
 8010f6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8010f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f72:	681e      	ldr	r6, [r3, #0]
 8010f74:	d705      	bvc.n	8010f82 <_scanf_float+0x3f6>
 8010f76:	4806      	ldr	r0, [pc, #24]	; (8010f90 <_scanf_float+0x404>)
 8010f78:	f000 fa46 	bl	8011408 <nanf>
 8010f7c:	ed86 0a00 	vstr	s0, [r6]
 8010f80:	e7d2      	b.n	8010f28 <_scanf_float+0x39c>
 8010f82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f86:	e7f9      	b.n	8010f7c <_scanf_float+0x3f0>
 8010f88:	2500      	movs	r5, #0
 8010f8a:	e640      	b.n	8010c0e <_scanf_float+0x82>
 8010f8c:	08014968 	.word	0x08014968
 8010f90:	08014cfd 	.word	0x08014cfd

08010f94 <std>:
 8010f94:	2300      	movs	r3, #0
 8010f96:	b510      	push	{r4, lr}
 8010f98:	4604      	mov	r4, r0
 8010f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8010f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fa2:	6083      	str	r3, [r0, #8]
 8010fa4:	8181      	strh	r1, [r0, #12]
 8010fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8010fa8:	81c2      	strh	r2, [r0, #14]
 8010faa:	6183      	str	r3, [r0, #24]
 8010fac:	4619      	mov	r1, r3
 8010fae:	2208      	movs	r2, #8
 8010fb0:	305c      	adds	r0, #92	; 0x5c
 8010fb2:	f000 f936 	bl	8011222 <memset>
 8010fb6:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <std+0x38>)
 8010fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8010fba:	4b05      	ldr	r3, [pc, #20]	; (8010fd0 <std+0x3c>)
 8010fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8010fbe:	4b05      	ldr	r3, [pc, #20]	; (8010fd4 <std+0x40>)
 8010fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010fc2:	4b05      	ldr	r3, [pc, #20]	; (8010fd8 <std+0x44>)
 8010fc4:	6224      	str	r4, [r4, #32]
 8010fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8010fc8:	bd10      	pop	{r4, pc}
 8010fca:	bf00      	nop
 8010fcc:	0801119d 	.word	0x0801119d
 8010fd0:	080111bf 	.word	0x080111bf
 8010fd4:	080111f7 	.word	0x080111f7
 8010fd8:	0801121b 	.word	0x0801121b

08010fdc <stdio_exit_handler>:
 8010fdc:	4a02      	ldr	r2, [pc, #8]	; (8010fe8 <stdio_exit_handler+0xc>)
 8010fde:	4903      	ldr	r1, [pc, #12]	; (8010fec <stdio_exit_handler+0x10>)
 8010fe0:	4803      	ldr	r0, [pc, #12]	; (8010ff0 <stdio_exit_handler+0x14>)
 8010fe2:	f000 b869 	b.w	80110b8 <_fwalk_sglue>
 8010fe6:	bf00      	nop
 8010fe8:	24000014 	.word	0x24000014
 8010fec:	08013a55 	.word	0x08013a55
 8010ff0:	24000020 	.word	0x24000020

08010ff4 <cleanup_stdio>:
 8010ff4:	6841      	ldr	r1, [r0, #4]
 8010ff6:	4b0c      	ldr	r3, [pc, #48]	; (8011028 <cleanup_stdio+0x34>)
 8010ff8:	4299      	cmp	r1, r3
 8010ffa:	b510      	push	{r4, lr}
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	d001      	beq.n	8011004 <cleanup_stdio+0x10>
 8011000:	f002 fd28 	bl	8013a54 <_fflush_r>
 8011004:	68a1      	ldr	r1, [r4, #8]
 8011006:	4b09      	ldr	r3, [pc, #36]	; (801102c <cleanup_stdio+0x38>)
 8011008:	4299      	cmp	r1, r3
 801100a:	d002      	beq.n	8011012 <cleanup_stdio+0x1e>
 801100c:	4620      	mov	r0, r4
 801100e:	f002 fd21 	bl	8013a54 <_fflush_r>
 8011012:	68e1      	ldr	r1, [r4, #12]
 8011014:	4b06      	ldr	r3, [pc, #24]	; (8011030 <cleanup_stdio+0x3c>)
 8011016:	4299      	cmp	r1, r3
 8011018:	d004      	beq.n	8011024 <cleanup_stdio+0x30>
 801101a:	4620      	mov	r0, r4
 801101c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011020:	f002 bd18 	b.w	8013a54 <_fflush_r>
 8011024:	bd10      	pop	{r4, pc}
 8011026:	bf00      	nop
 8011028:	24005574 	.word	0x24005574
 801102c:	240055dc 	.word	0x240055dc
 8011030:	24005644 	.word	0x24005644

08011034 <global_stdio_init.part.0>:
 8011034:	b510      	push	{r4, lr}
 8011036:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <global_stdio_init.part.0+0x30>)
 8011038:	4c0b      	ldr	r4, [pc, #44]	; (8011068 <global_stdio_init.part.0+0x34>)
 801103a:	4a0c      	ldr	r2, [pc, #48]	; (801106c <global_stdio_init.part.0+0x38>)
 801103c:	601a      	str	r2, [r3, #0]
 801103e:	4620      	mov	r0, r4
 8011040:	2200      	movs	r2, #0
 8011042:	2104      	movs	r1, #4
 8011044:	f7ff ffa6 	bl	8010f94 <std>
 8011048:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801104c:	2201      	movs	r2, #1
 801104e:	2109      	movs	r1, #9
 8011050:	f7ff ffa0 	bl	8010f94 <std>
 8011054:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011058:	2202      	movs	r2, #2
 801105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801105e:	2112      	movs	r1, #18
 8011060:	f7ff bf98 	b.w	8010f94 <std>
 8011064:	240056ac 	.word	0x240056ac
 8011068:	24005574 	.word	0x24005574
 801106c:	08010fdd 	.word	0x08010fdd

08011070 <__sfp_lock_acquire>:
 8011070:	4801      	ldr	r0, [pc, #4]	; (8011078 <__sfp_lock_acquire+0x8>)
 8011072:	f000 b9b9 	b.w	80113e8 <__retarget_lock_acquire_recursive>
 8011076:	bf00      	nop
 8011078:	240056b5 	.word	0x240056b5

0801107c <__sfp_lock_release>:
 801107c:	4801      	ldr	r0, [pc, #4]	; (8011084 <__sfp_lock_release+0x8>)
 801107e:	f000 b9b4 	b.w	80113ea <__retarget_lock_release_recursive>
 8011082:	bf00      	nop
 8011084:	240056b5 	.word	0x240056b5

08011088 <__sinit>:
 8011088:	b510      	push	{r4, lr}
 801108a:	4604      	mov	r4, r0
 801108c:	f7ff fff0 	bl	8011070 <__sfp_lock_acquire>
 8011090:	6a23      	ldr	r3, [r4, #32]
 8011092:	b11b      	cbz	r3, 801109c <__sinit+0x14>
 8011094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011098:	f7ff bff0 	b.w	801107c <__sfp_lock_release>
 801109c:	4b04      	ldr	r3, [pc, #16]	; (80110b0 <__sinit+0x28>)
 801109e:	6223      	str	r3, [r4, #32]
 80110a0:	4b04      	ldr	r3, [pc, #16]	; (80110b4 <__sinit+0x2c>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d1f5      	bne.n	8011094 <__sinit+0xc>
 80110a8:	f7ff ffc4 	bl	8011034 <global_stdio_init.part.0>
 80110ac:	e7f2      	b.n	8011094 <__sinit+0xc>
 80110ae:	bf00      	nop
 80110b0:	08010ff5 	.word	0x08010ff5
 80110b4:	240056ac 	.word	0x240056ac

080110b8 <_fwalk_sglue>:
 80110b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110bc:	4607      	mov	r7, r0
 80110be:	4688      	mov	r8, r1
 80110c0:	4614      	mov	r4, r2
 80110c2:	2600      	movs	r6, #0
 80110c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110c8:	f1b9 0901 	subs.w	r9, r9, #1
 80110cc:	d505      	bpl.n	80110da <_fwalk_sglue+0x22>
 80110ce:	6824      	ldr	r4, [r4, #0]
 80110d0:	2c00      	cmp	r4, #0
 80110d2:	d1f7      	bne.n	80110c4 <_fwalk_sglue+0xc>
 80110d4:	4630      	mov	r0, r6
 80110d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110da:	89ab      	ldrh	r3, [r5, #12]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d907      	bls.n	80110f0 <_fwalk_sglue+0x38>
 80110e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110e4:	3301      	adds	r3, #1
 80110e6:	d003      	beq.n	80110f0 <_fwalk_sglue+0x38>
 80110e8:	4629      	mov	r1, r5
 80110ea:	4638      	mov	r0, r7
 80110ec:	47c0      	blx	r8
 80110ee:	4306      	orrs	r6, r0
 80110f0:	3568      	adds	r5, #104	; 0x68
 80110f2:	e7e9      	b.n	80110c8 <_fwalk_sglue+0x10>

080110f4 <sniprintf>:
 80110f4:	b40c      	push	{r2, r3}
 80110f6:	b530      	push	{r4, r5, lr}
 80110f8:	4b17      	ldr	r3, [pc, #92]	; (8011158 <sniprintf+0x64>)
 80110fa:	1e0c      	subs	r4, r1, #0
 80110fc:	681d      	ldr	r5, [r3, #0]
 80110fe:	b09d      	sub	sp, #116	; 0x74
 8011100:	da08      	bge.n	8011114 <sniprintf+0x20>
 8011102:	238b      	movs	r3, #139	; 0x8b
 8011104:	602b      	str	r3, [r5, #0]
 8011106:	f04f 30ff 	mov.w	r0, #4294967295
 801110a:	b01d      	add	sp, #116	; 0x74
 801110c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011110:	b002      	add	sp, #8
 8011112:	4770      	bx	lr
 8011114:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011118:	f8ad 3014 	strh.w	r3, [sp, #20]
 801111c:	bf14      	ite	ne
 801111e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011122:	4623      	moveq	r3, r4
 8011124:	9304      	str	r3, [sp, #16]
 8011126:	9307      	str	r3, [sp, #28]
 8011128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801112c:	9002      	str	r0, [sp, #8]
 801112e:	9006      	str	r0, [sp, #24]
 8011130:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011134:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011136:	ab21      	add	r3, sp, #132	; 0x84
 8011138:	a902      	add	r1, sp, #8
 801113a:	4628      	mov	r0, r5
 801113c:	9301      	str	r3, [sp, #4]
 801113e:	f002 fb05 	bl	801374c <_svfiprintf_r>
 8011142:	1c43      	adds	r3, r0, #1
 8011144:	bfbc      	itt	lt
 8011146:	238b      	movlt	r3, #139	; 0x8b
 8011148:	602b      	strlt	r3, [r5, #0]
 801114a:	2c00      	cmp	r4, #0
 801114c:	d0dd      	beq.n	801110a <sniprintf+0x16>
 801114e:	9b02      	ldr	r3, [sp, #8]
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
 8011154:	e7d9      	b.n	801110a <sniprintf+0x16>
 8011156:	bf00      	nop
 8011158:	2400006c 	.word	0x2400006c

0801115c <siprintf>:
 801115c:	b40e      	push	{r1, r2, r3}
 801115e:	b500      	push	{lr}
 8011160:	b09c      	sub	sp, #112	; 0x70
 8011162:	ab1d      	add	r3, sp, #116	; 0x74
 8011164:	9002      	str	r0, [sp, #8]
 8011166:	9006      	str	r0, [sp, #24]
 8011168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801116c:	4809      	ldr	r0, [pc, #36]	; (8011194 <siprintf+0x38>)
 801116e:	9107      	str	r1, [sp, #28]
 8011170:	9104      	str	r1, [sp, #16]
 8011172:	4909      	ldr	r1, [pc, #36]	; (8011198 <siprintf+0x3c>)
 8011174:	f853 2b04 	ldr.w	r2, [r3], #4
 8011178:	9105      	str	r1, [sp, #20]
 801117a:	6800      	ldr	r0, [r0, #0]
 801117c:	9301      	str	r3, [sp, #4]
 801117e:	a902      	add	r1, sp, #8
 8011180:	f002 fae4 	bl	801374c <_svfiprintf_r>
 8011184:	9b02      	ldr	r3, [sp, #8]
 8011186:	2200      	movs	r2, #0
 8011188:	701a      	strb	r2, [r3, #0]
 801118a:	b01c      	add	sp, #112	; 0x70
 801118c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011190:	b003      	add	sp, #12
 8011192:	4770      	bx	lr
 8011194:	2400006c 	.word	0x2400006c
 8011198:	ffff0208 	.word	0xffff0208

0801119c <__sread>:
 801119c:	b510      	push	{r4, lr}
 801119e:	460c      	mov	r4, r1
 80111a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a4:	f000 f8c2 	bl	801132c <_read_r>
 80111a8:	2800      	cmp	r0, #0
 80111aa:	bfab      	itete	ge
 80111ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111ae:	89a3      	ldrhlt	r3, [r4, #12]
 80111b0:	181b      	addge	r3, r3, r0
 80111b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111b6:	bfac      	ite	ge
 80111b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80111ba:	81a3      	strhlt	r3, [r4, #12]
 80111bc:	bd10      	pop	{r4, pc}

080111be <__swrite>:
 80111be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c2:	461f      	mov	r7, r3
 80111c4:	898b      	ldrh	r3, [r1, #12]
 80111c6:	05db      	lsls	r3, r3, #23
 80111c8:	4605      	mov	r5, r0
 80111ca:	460c      	mov	r4, r1
 80111cc:	4616      	mov	r6, r2
 80111ce:	d505      	bpl.n	80111dc <__swrite+0x1e>
 80111d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d4:	2302      	movs	r3, #2
 80111d6:	2200      	movs	r2, #0
 80111d8:	f000 f896 	bl	8011308 <_lseek_r>
 80111dc:	89a3      	ldrh	r3, [r4, #12]
 80111de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111e6:	81a3      	strh	r3, [r4, #12]
 80111e8:	4632      	mov	r2, r6
 80111ea:	463b      	mov	r3, r7
 80111ec:	4628      	mov	r0, r5
 80111ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111f2:	f000 b8bd 	b.w	8011370 <_write_r>

080111f6 <__sseek>:
 80111f6:	b510      	push	{r4, lr}
 80111f8:	460c      	mov	r4, r1
 80111fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111fe:	f000 f883 	bl	8011308 <_lseek_r>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	89a3      	ldrh	r3, [r4, #12]
 8011206:	bf15      	itete	ne
 8011208:	6560      	strne	r0, [r4, #84]	; 0x54
 801120a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801120e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011212:	81a3      	strheq	r3, [r4, #12]
 8011214:	bf18      	it	ne
 8011216:	81a3      	strhne	r3, [r4, #12]
 8011218:	bd10      	pop	{r4, pc}

0801121a <__sclose>:
 801121a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801121e:	f000 b80d 	b.w	801123c <_close_r>

08011222 <memset>:
 8011222:	4402      	add	r2, r0
 8011224:	4603      	mov	r3, r0
 8011226:	4293      	cmp	r3, r2
 8011228:	d100      	bne.n	801122c <memset+0xa>
 801122a:	4770      	bx	lr
 801122c:	f803 1b01 	strb.w	r1, [r3], #1
 8011230:	e7f9      	b.n	8011226 <memset+0x4>
	...

08011234 <_localeconv_r>:
 8011234:	4800      	ldr	r0, [pc, #0]	; (8011238 <_localeconv_r+0x4>)
 8011236:	4770      	bx	lr
 8011238:	24000160 	.word	0x24000160

0801123c <_close_r>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	4d06      	ldr	r5, [pc, #24]	; (8011258 <_close_r+0x1c>)
 8011240:	2300      	movs	r3, #0
 8011242:	4604      	mov	r4, r0
 8011244:	4608      	mov	r0, r1
 8011246:	602b      	str	r3, [r5, #0]
 8011248:	f7f0 ff33 	bl	80020b2 <_close>
 801124c:	1c43      	adds	r3, r0, #1
 801124e:	d102      	bne.n	8011256 <_close_r+0x1a>
 8011250:	682b      	ldr	r3, [r5, #0]
 8011252:	b103      	cbz	r3, 8011256 <_close_r+0x1a>
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	bd38      	pop	{r3, r4, r5, pc}
 8011258:	240056b0 	.word	0x240056b0

0801125c <_reclaim_reent>:
 801125c:	4b29      	ldr	r3, [pc, #164]	; (8011304 <_reclaim_reent+0xa8>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4283      	cmp	r3, r0
 8011262:	b570      	push	{r4, r5, r6, lr}
 8011264:	4604      	mov	r4, r0
 8011266:	d04b      	beq.n	8011300 <_reclaim_reent+0xa4>
 8011268:	69c3      	ldr	r3, [r0, #28]
 801126a:	b143      	cbz	r3, 801127e <_reclaim_reent+0x22>
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d144      	bne.n	80112fc <_reclaim_reent+0xa0>
 8011272:	69e3      	ldr	r3, [r4, #28]
 8011274:	6819      	ldr	r1, [r3, #0]
 8011276:	b111      	cbz	r1, 801127e <_reclaim_reent+0x22>
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fec1 	bl	8012000 <_free_r>
 801127e:	6961      	ldr	r1, [r4, #20]
 8011280:	b111      	cbz	r1, 8011288 <_reclaim_reent+0x2c>
 8011282:	4620      	mov	r0, r4
 8011284:	f000 febc 	bl	8012000 <_free_r>
 8011288:	69e1      	ldr	r1, [r4, #28]
 801128a:	b111      	cbz	r1, 8011292 <_reclaim_reent+0x36>
 801128c:	4620      	mov	r0, r4
 801128e:	f000 feb7 	bl	8012000 <_free_r>
 8011292:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011294:	b111      	cbz	r1, 801129c <_reclaim_reent+0x40>
 8011296:	4620      	mov	r0, r4
 8011298:	f000 feb2 	bl	8012000 <_free_r>
 801129c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801129e:	b111      	cbz	r1, 80112a6 <_reclaim_reent+0x4a>
 80112a0:	4620      	mov	r0, r4
 80112a2:	f000 fead 	bl	8012000 <_free_r>
 80112a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80112a8:	b111      	cbz	r1, 80112b0 <_reclaim_reent+0x54>
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 fea8 	bl	8012000 <_free_r>
 80112b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80112b2:	b111      	cbz	r1, 80112ba <_reclaim_reent+0x5e>
 80112b4:	4620      	mov	r0, r4
 80112b6:	f000 fea3 	bl	8012000 <_free_r>
 80112ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80112bc:	b111      	cbz	r1, 80112c4 <_reclaim_reent+0x68>
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fe9e 	bl	8012000 <_free_r>
 80112c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80112c6:	b111      	cbz	r1, 80112ce <_reclaim_reent+0x72>
 80112c8:	4620      	mov	r0, r4
 80112ca:	f000 fe99 	bl	8012000 <_free_r>
 80112ce:	6a23      	ldr	r3, [r4, #32]
 80112d0:	b1b3      	cbz	r3, 8011300 <_reclaim_reent+0xa4>
 80112d2:	4620      	mov	r0, r4
 80112d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112d8:	4718      	bx	r3
 80112da:	5949      	ldr	r1, [r1, r5]
 80112dc:	b941      	cbnz	r1, 80112f0 <_reclaim_reent+0x94>
 80112de:	3504      	adds	r5, #4
 80112e0:	69e3      	ldr	r3, [r4, #28]
 80112e2:	2d80      	cmp	r5, #128	; 0x80
 80112e4:	68d9      	ldr	r1, [r3, #12]
 80112e6:	d1f8      	bne.n	80112da <_reclaim_reent+0x7e>
 80112e8:	4620      	mov	r0, r4
 80112ea:	f000 fe89 	bl	8012000 <_free_r>
 80112ee:	e7c0      	b.n	8011272 <_reclaim_reent+0x16>
 80112f0:	680e      	ldr	r6, [r1, #0]
 80112f2:	4620      	mov	r0, r4
 80112f4:	f000 fe84 	bl	8012000 <_free_r>
 80112f8:	4631      	mov	r1, r6
 80112fa:	e7ef      	b.n	80112dc <_reclaim_reent+0x80>
 80112fc:	2500      	movs	r5, #0
 80112fe:	e7ef      	b.n	80112e0 <_reclaim_reent+0x84>
 8011300:	bd70      	pop	{r4, r5, r6, pc}
 8011302:	bf00      	nop
 8011304:	2400006c 	.word	0x2400006c

08011308 <_lseek_r>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	4d07      	ldr	r5, [pc, #28]	; (8011328 <_lseek_r+0x20>)
 801130c:	4604      	mov	r4, r0
 801130e:	4608      	mov	r0, r1
 8011310:	4611      	mov	r1, r2
 8011312:	2200      	movs	r2, #0
 8011314:	602a      	str	r2, [r5, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	f7f0 fef2 	bl	8002100 <_lseek>
 801131c:	1c43      	adds	r3, r0, #1
 801131e:	d102      	bne.n	8011326 <_lseek_r+0x1e>
 8011320:	682b      	ldr	r3, [r5, #0]
 8011322:	b103      	cbz	r3, 8011326 <_lseek_r+0x1e>
 8011324:	6023      	str	r3, [r4, #0]
 8011326:	bd38      	pop	{r3, r4, r5, pc}
 8011328:	240056b0 	.word	0x240056b0

0801132c <_read_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4d07      	ldr	r5, [pc, #28]	; (801134c <_read_r+0x20>)
 8011330:	4604      	mov	r4, r0
 8011332:	4608      	mov	r0, r1
 8011334:	4611      	mov	r1, r2
 8011336:	2200      	movs	r2, #0
 8011338:	602a      	str	r2, [r5, #0]
 801133a:	461a      	mov	r2, r3
 801133c:	f7f0 fe80 	bl	8002040 <_read>
 8011340:	1c43      	adds	r3, r0, #1
 8011342:	d102      	bne.n	801134a <_read_r+0x1e>
 8011344:	682b      	ldr	r3, [r5, #0]
 8011346:	b103      	cbz	r3, 801134a <_read_r+0x1e>
 8011348:	6023      	str	r3, [r4, #0]
 801134a:	bd38      	pop	{r3, r4, r5, pc}
 801134c:	240056b0 	.word	0x240056b0

08011350 <_sbrk_r>:
 8011350:	b538      	push	{r3, r4, r5, lr}
 8011352:	4d06      	ldr	r5, [pc, #24]	; (801136c <_sbrk_r+0x1c>)
 8011354:	2300      	movs	r3, #0
 8011356:	4604      	mov	r4, r0
 8011358:	4608      	mov	r0, r1
 801135a:	602b      	str	r3, [r5, #0]
 801135c:	f7f0 fede 	bl	800211c <_sbrk>
 8011360:	1c43      	adds	r3, r0, #1
 8011362:	d102      	bne.n	801136a <_sbrk_r+0x1a>
 8011364:	682b      	ldr	r3, [r5, #0]
 8011366:	b103      	cbz	r3, 801136a <_sbrk_r+0x1a>
 8011368:	6023      	str	r3, [r4, #0]
 801136a:	bd38      	pop	{r3, r4, r5, pc}
 801136c:	240056b0 	.word	0x240056b0

08011370 <_write_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4d07      	ldr	r5, [pc, #28]	; (8011390 <_write_r+0x20>)
 8011374:	4604      	mov	r4, r0
 8011376:	4608      	mov	r0, r1
 8011378:	4611      	mov	r1, r2
 801137a:	2200      	movs	r2, #0
 801137c:	602a      	str	r2, [r5, #0]
 801137e:	461a      	mov	r2, r3
 8011380:	f7f0 fe7b 	bl	800207a <_write>
 8011384:	1c43      	adds	r3, r0, #1
 8011386:	d102      	bne.n	801138e <_write_r+0x1e>
 8011388:	682b      	ldr	r3, [r5, #0]
 801138a:	b103      	cbz	r3, 801138e <_write_r+0x1e>
 801138c:	6023      	str	r3, [r4, #0]
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	240056b0 	.word	0x240056b0

08011394 <__errno>:
 8011394:	4b01      	ldr	r3, [pc, #4]	; (801139c <__errno+0x8>)
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	4770      	bx	lr
 801139a:	bf00      	nop
 801139c:	2400006c 	.word	0x2400006c

080113a0 <__libc_init_array>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4d0d      	ldr	r5, [pc, #52]	; (80113d8 <__libc_init_array+0x38>)
 80113a4:	4c0d      	ldr	r4, [pc, #52]	; (80113dc <__libc_init_array+0x3c>)
 80113a6:	1b64      	subs	r4, r4, r5
 80113a8:	10a4      	asrs	r4, r4, #2
 80113aa:	2600      	movs	r6, #0
 80113ac:	42a6      	cmp	r6, r4
 80113ae:	d109      	bne.n	80113c4 <__libc_init_array+0x24>
 80113b0:	4d0b      	ldr	r5, [pc, #44]	; (80113e0 <__libc_init_array+0x40>)
 80113b2:	4c0c      	ldr	r4, [pc, #48]	; (80113e4 <__libc_init_array+0x44>)
 80113b4:	f003 fa48 	bl	8014848 <_init>
 80113b8:	1b64      	subs	r4, r4, r5
 80113ba:	10a4      	asrs	r4, r4, #2
 80113bc:	2600      	movs	r6, #0
 80113be:	42a6      	cmp	r6, r4
 80113c0:	d105      	bne.n	80113ce <__libc_init_array+0x2e>
 80113c2:	bd70      	pop	{r4, r5, r6, pc}
 80113c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80113c8:	4798      	blx	r3
 80113ca:	3601      	adds	r6, #1
 80113cc:	e7ee      	b.n	80113ac <__libc_init_array+0xc>
 80113ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80113d2:	4798      	blx	r3
 80113d4:	3601      	adds	r6, #1
 80113d6:	e7f2      	b.n	80113be <__libc_init_array+0x1e>
 80113d8:	08014d68 	.word	0x08014d68
 80113dc:	08014d68 	.word	0x08014d68
 80113e0:	08014d68 	.word	0x08014d68
 80113e4:	08014d6c 	.word	0x08014d6c

080113e8 <__retarget_lock_acquire_recursive>:
 80113e8:	4770      	bx	lr

080113ea <__retarget_lock_release_recursive>:
 80113ea:	4770      	bx	lr

080113ec <memcpy>:
 80113ec:	440a      	add	r2, r1
 80113ee:	4291      	cmp	r1, r2
 80113f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80113f4:	d100      	bne.n	80113f8 <memcpy+0xc>
 80113f6:	4770      	bx	lr
 80113f8:	b510      	push	{r4, lr}
 80113fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011402:	4291      	cmp	r1, r2
 8011404:	d1f9      	bne.n	80113fa <memcpy+0xe>
 8011406:	bd10      	pop	{r4, pc}

08011408 <nanf>:
 8011408:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011410 <nanf+0x8>
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	7fc00000 	.word	0x7fc00000

08011414 <quorem>:
 8011414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011418:	6903      	ldr	r3, [r0, #16]
 801141a:	690c      	ldr	r4, [r1, #16]
 801141c:	42a3      	cmp	r3, r4
 801141e:	4607      	mov	r7, r0
 8011420:	db7e      	blt.n	8011520 <quorem+0x10c>
 8011422:	3c01      	subs	r4, #1
 8011424:	f101 0814 	add.w	r8, r1, #20
 8011428:	f100 0514 	add.w	r5, r0, #20
 801142c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801143a:	3301      	adds	r3, #1
 801143c:	429a      	cmp	r2, r3
 801143e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011442:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011446:	fbb2 f6f3 	udiv	r6, r2, r3
 801144a:	d331      	bcc.n	80114b0 <quorem+0x9c>
 801144c:	f04f 0e00 	mov.w	lr, #0
 8011450:	4640      	mov	r0, r8
 8011452:	46ac      	mov	ip, r5
 8011454:	46f2      	mov	sl, lr
 8011456:	f850 2b04 	ldr.w	r2, [r0], #4
 801145a:	b293      	uxth	r3, r2
 801145c:	fb06 e303 	mla	r3, r6, r3, lr
 8011460:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011464:	0c1a      	lsrs	r2, r3, #16
 8011466:	b29b      	uxth	r3, r3
 8011468:	ebaa 0303 	sub.w	r3, sl, r3
 801146c:	f8dc a000 	ldr.w	sl, [ip]
 8011470:	fa13 f38a 	uxtah	r3, r3, sl
 8011474:	fb06 220e 	mla	r2, r6, lr, r2
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	9b00      	ldr	r3, [sp, #0]
 801147c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011480:	b292      	uxth	r2, r2
 8011482:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011486:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801148a:	f8bd 3000 	ldrh.w	r3, [sp]
 801148e:	4581      	cmp	r9, r0
 8011490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011494:	f84c 3b04 	str.w	r3, [ip], #4
 8011498:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801149c:	d2db      	bcs.n	8011456 <quorem+0x42>
 801149e:	f855 300b 	ldr.w	r3, [r5, fp]
 80114a2:	b92b      	cbnz	r3, 80114b0 <quorem+0x9c>
 80114a4:	9b01      	ldr	r3, [sp, #4]
 80114a6:	3b04      	subs	r3, #4
 80114a8:	429d      	cmp	r5, r3
 80114aa:	461a      	mov	r2, r3
 80114ac:	d32c      	bcc.n	8011508 <quorem+0xf4>
 80114ae:	613c      	str	r4, [r7, #16]
 80114b0:	4638      	mov	r0, r7
 80114b2:	f001 f8b7 	bl	8012624 <__mcmp>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	db22      	blt.n	8011500 <quorem+0xec>
 80114ba:	3601      	adds	r6, #1
 80114bc:	4629      	mov	r1, r5
 80114be:	2000      	movs	r0, #0
 80114c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80114c4:	f8d1 c000 	ldr.w	ip, [r1]
 80114c8:	b293      	uxth	r3, r2
 80114ca:	1ac3      	subs	r3, r0, r3
 80114cc:	0c12      	lsrs	r2, r2, #16
 80114ce:	fa13 f38c 	uxtah	r3, r3, ip
 80114d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80114d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114da:	b29b      	uxth	r3, r3
 80114dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114e0:	45c1      	cmp	r9, r8
 80114e2:	f841 3b04 	str.w	r3, [r1], #4
 80114e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80114ea:	d2e9      	bcs.n	80114c0 <quorem+0xac>
 80114ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114f4:	b922      	cbnz	r2, 8011500 <quorem+0xec>
 80114f6:	3b04      	subs	r3, #4
 80114f8:	429d      	cmp	r5, r3
 80114fa:	461a      	mov	r2, r3
 80114fc:	d30a      	bcc.n	8011514 <quorem+0x100>
 80114fe:	613c      	str	r4, [r7, #16]
 8011500:	4630      	mov	r0, r6
 8011502:	b003      	add	sp, #12
 8011504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011508:	6812      	ldr	r2, [r2, #0]
 801150a:	3b04      	subs	r3, #4
 801150c:	2a00      	cmp	r2, #0
 801150e:	d1ce      	bne.n	80114ae <quorem+0x9a>
 8011510:	3c01      	subs	r4, #1
 8011512:	e7c9      	b.n	80114a8 <quorem+0x94>
 8011514:	6812      	ldr	r2, [r2, #0]
 8011516:	3b04      	subs	r3, #4
 8011518:	2a00      	cmp	r2, #0
 801151a:	d1f0      	bne.n	80114fe <quorem+0xea>
 801151c:	3c01      	subs	r4, #1
 801151e:	e7eb      	b.n	80114f8 <quorem+0xe4>
 8011520:	2000      	movs	r0, #0
 8011522:	e7ee      	b.n	8011502 <quorem+0xee>
 8011524:	0000      	movs	r0, r0
	...

08011528 <_dtoa_r>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	ed2d 8b02 	vpush	{d8}
 8011530:	69c5      	ldr	r5, [r0, #28]
 8011532:	b091      	sub	sp, #68	; 0x44
 8011534:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011538:	ec59 8b10 	vmov	r8, r9, d0
 801153c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801153e:	9106      	str	r1, [sp, #24]
 8011540:	4606      	mov	r6, r0
 8011542:	9208      	str	r2, [sp, #32]
 8011544:	930c      	str	r3, [sp, #48]	; 0x30
 8011546:	b975      	cbnz	r5, 8011566 <_dtoa_r+0x3e>
 8011548:	2010      	movs	r0, #16
 801154a:	f7fe fe2f 	bl	80101ac <malloc>
 801154e:	4602      	mov	r2, r0
 8011550:	61f0      	str	r0, [r6, #28]
 8011552:	b920      	cbnz	r0, 801155e <_dtoa_r+0x36>
 8011554:	4ba6      	ldr	r3, [pc, #664]	; (80117f0 <_dtoa_r+0x2c8>)
 8011556:	21ef      	movs	r1, #239	; 0xef
 8011558:	48a6      	ldr	r0, [pc, #664]	; (80117f4 <_dtoa_r+0x2cc>)
 801155a:	f002 fad9 	bl	8013b10 <__assert_func>
 801155e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011562:	6005      	str	r5, [r0, #0]
 8011564:	60c5      	str	r5, [r0, #12]
 8011566:	69f3      	ldr	r3, [r6, #28]
 8011568:	6819      	ldr	r1, [r3, #0]
 801156a:	b151      	cbz	r1, 8011582 <_dtoa_r+0x5a>
 801156c:	685a      	ldr	r2, [r3, #4]
 801156e:	604a      	str	r2, [r1, #4]
 8011570:	2301      	movs	r3, #1
 8011572:	4093      	lsls	r3, r2
 8011574:	608b      	str	r3, [r1, #8]
 8011576:	4630      	mov	r0, r6
 8011578:	f000 fdce 	bl	8012118 <_Bfree>
 801157c:	69f3      	ldr	r3, [r6, #28]
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	f1b9 0300 	subs.w	r3, r9, #0
 8011586:	bfbb      	ittet	lt
 8011588:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801158c:	9303      	strlt	r3, [sp, #12]
 801158e:	2300      	movge	r3, #0
 8011590:	2201      	movlt	r2, #1
 8011592:	bfac      	ite	ge
 8011594:	6023      	strge	r3, [r4, #0]
 8011596:	6022      	strlt	r2, [r4, #0]
 8011598:	4b97      	ldr	r3, [pc, #604]	; (80117f8 <_dtoa_r+0x2d0>)
 801159a:	9c03      	ldr	r4, [sp, #12]
 801159c:	43a3      	bics	r3, r4
 801159e:	d11c      	bne.n	80115da <_dtoa_r+0xb2>
 80115a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80115a6:	6013      	str	r3, [r2, #0]
 80115a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80115ac:	ea53 0308 	orrs.w	r3, r3, r8
 80115b0:	f000 84fb 	beq.w	8011faa <_dtoa_r+0xa82>
 80115b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80115b6:	b963      	cbnz	r3, 80115d2 <_dtoa_r+0xaa>
 80115b8:	4b90      	ldr	r3, [pc, #576]	; (80117fc <_dtoa_r+0x2d4>)
 80115ba:	e020      	b.n	80115fe <_dtoa_r+0xd6>
 80115bc:	4b90      	ldr	r3, [pc, #576]	; (8011800 <_dtoa_r+0x2d8>)
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	3308      	adds	r3, #8
 80115c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80115c4:	6013      	str	r3, [r2, #0]
 80115c6:	9801      	ldr	r0, [sp, #4]
 80115c8:	b011      	add	sp, #68	; 0x44
 80115ca:	ecbd 8b02 	vpop	{d8}
 80115ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d2:	4b8a      	ldr	r3, [pc, #552]	; (80117fc <_dtoa_r+0x2d4>)
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	3303      	adds	r3, #3
 80115d8:	e7f3      	b.n	80115c2 <_dtoa_r+0x9a>
 80115da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80115de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e6:	d10c      	bne.n	8011602 <_dtoa_r+0xda>
 80115e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115ea:	2301      	movs	r3, #1
 80115ec:	6013      	str	r3, [r2, #0]
 80115ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 84d7 	beq.w	8011fa4 <_dtoa_r+0xa7c>
 80115f6:	4b83      	ldr	r3, [pc, #524]	; (8011804 <_dtoa_r+0x2dc>)
 80115f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80115fa:	6013      	str	r3, [r2, #0]
 80115fc:	3b01      	subs	r3, #1
 80115fe:	9301      	str	r3, [sp, #4]
 8011600:	e7e1      	b.n	80115c6 <_dtoa_r+0x9e>
 8011602:	aa0e      	add	r2, sp, #56	; 0x38
 8011604:	a90f      	add	r1, sp, #60	; 0x3c
 8011606:	4630      	mov	r0, r6
 8011608:	eeb0 0b48 	vmov.f64	d0, d8
 801160c:	f001 f920 	bl	8012850 <__d2b>
 8011610:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011616:	4605      	mov	r5, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d046      	beq.n	80116aa <_dtoa_r+0x182>
 801161c:	eeb0 7b48 	vmov.f64	d7, d8
 8011620:	ee18 1a90 	vmov	r1, s17
 8011624:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011628:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801162c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011634:	2000      	movs	r0, #0
 8011636:	ee07 1a90 	vmov	s15, r1
 801163a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801163e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80117d8 <_dtoa_r+0x2b0>
 8011642:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011646:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80117e0 <_dtoa_r+0x2b8>
 801164a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801164e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80117e8 <_dtoa_r+0x2c0>
 8011652:	ee07 3a90 	vmov	s15, r3
 8011656:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801165a:	eeb0 7b46 	vmov.f64	d7, d6
 801165e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011662:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011666:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801166e:	ee16 ba90 	vmov	fp, s13
 8011672:	9009      	str	r0, [sp, #36]	; 0x24
 8011674:	d508      	bpl.n	8011688 <_dtoa_r+0x160>
 8011676:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801167a:	eeb4 6b47 	vcmp.f64	d6, d7
 801167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011682:	bf18      	it	ne
 8011684:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011688:	f1bb 0f16 	cmp.w	fp, #22
 801168c:	d82b      	bhi.n	80116e6 <_dtoa_r+0x1be>
 801168e:	495e      	ldr	r1, [pc, #376]	; (8011808 <_dtoa_r+0x2e0>)
 8011690:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8011694:	ed91 7b00 	vldr	d7, [r1]
 8011698:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a0:	d501      	bpl.n	80116a6 <_dtoa_r+0x17e>
 80116a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80116a6:	2100      	movs	r1, #0
 80116a8:	e01e      	b.n	80116e8 <_dtoa_r+0x1c0>
 80116aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116ac:	4413      	add	r3, r2
 80116ae:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80116b2:	2920      	cmp	r1, #32
 80116b4:	bfc1      	itttt	gt
 80116b6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80116ba:	408c      	lslgt	r4, r1
 80116bc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80116c0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80116c4:	bfd6      	itet	le
 80116c6:	f1c1 0120 	rsble	r1, r1, #32
 80116ca:	4321      	orrgt	r1, r4
 80116cc:	fa08 f101 	lslle.w	r1, r8, r1
 80116d0:	ee07 1a90 	vmov	s15, r1
 80116d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80116d8:	3b01      	subs	r3, #1
 80116da:	ee17 1a90 	vmov	r1, s15
 80116de:	2001      	movs	r0, #1
 80116e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80116e4:	e7a7      	b.n	8011636 <_dtoa_r+0x10e>
 80116e6:	2101      	movs	r1, #1
 80116e8:	1ad2      	subs	r2, r2, r3
 80116ea:	1e53      	subs	r3, r2, #1
 80116ec:	9305      	str	r3, [sp, #20]
 80116ee:	bf45      	ittet	mi
 80116f0:	f1c2 0301 	rsbmi	r3, r2, #1
 80116f4:	9304      	strmi	r3, [sp, #16]
 80116f6:	2300      	movpl	r3, #0
 80116f8:	2300      	movmi	r3, #0
 80116fa:	bf4c      	ite	mi
 80116fc:	9305      	strmi	r3, [sp, #20]
 80116fe:	9304      	strpl	r3, [sp, #16]
 8011700:	f1bb 0f00 	cmp.w	fp, #0
 8011704:	910b      	str	r1, [sp, #44]	; 0x2c
 8011706:	db18      	blt.n	801173a <_dtoa_r+0x212>
 8011708:	9b05      	ldr	r3, [sp, #20]
 801170a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801170e:	445b      	add	r3, fp
 8011710:	9305      	str	r3, [sp, #20]
 8011712:	2300      	movs	r3, #0
 8011714:	9a06      	ldr	r2, [sp, #24]
 8011716:	2a09      	cmp	r2, #9
 8011718:	d848      	bhi.n	80117ac <_dtoa_r+0x284>
 801171a:	2a05      	cmp	r2, #5
 801171c:	bfc4      	itt	gt
 801171e:	3a04      	subgt	r2, #4
 8011720:	9206      	strgt	r2, [sp, #24]
 8011722:	9a06      	ldr	r2, [sp, #24]
 8011724:	f1a2 0202 	sub.w	r2, r2, #2
 8011728:	bfcc      	ite	gt
 801172a:	2400      	movgt	r4, #0
 801172c:	2401      	movle	r4, #1
 801172e:	2a03      	cmp	r2, #3
 8011730:	d847      	bhi.n	80117c2 <_dtoa_r+0x29a>
 8011732:	e8df f002 	tbb	[pc, r2]
 8011736:	2d0b      	.short	0x2d0b
 8011738:	392b      	.short	0x392b
 801173a:	9b04      	ldr	r3, [sp, #16]
 801173c:	2200      	movs	r2, #0
 801173e:	eba3 030b 	sub.w	r3, r3, fp
 8011742:	9304      	str	r3, [sp, #16]
 8011744:	920a      	str	r2, [sp, #40]	; 0x28
 8011746:	f1cb 0300 	rsb	r3, fp, #0
 801174a:	e7e3      	b.n	8011714 <_dtoa_r+0x1ec>
 801174c:	2200      	movs	r2, #0
 801174e:	9207      	str	r2, [sp, #28]
 8011750:	9a08      	ldr	r2, [sp, #32]
 8011752:	2a00      	cmp	r2, #0
 8011754:	dc38      	bgt.n	80117c8 <_dtoa_r+0x2a0>
 8011756:	f04f 0a01 	mov.w	sl, #1
 801175a:	46d1      	mov	r9, sl
 801175c:	4652      	mov	r2, sl
 801175e:	f8cd a020 	str.w	sl, [sp, #32]
 8011762:	69f7      	ldr	r7, [r6, #28]
 8011764:	2100      	movs	r1, #0
 8011766:	2004      	movs	r0, #4
 8011768:	f100 0c14 	add.w	ip, r0, #20
 801176c:	4594      	cmp	ip, r2
 801176e:	d930      	bls.n	80117d2 <_dtoa_r+0x2aa>
 8011770:	6079      	str	r1, [r7, #4]
 8011772:	4630      	mov	r0, r6
 8011774:	930d      	str	r3, [sp, #52]	; 0x34
 8011776:	f000 fc8f 	bl	8012098 <_Balloc>
 801177a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801177c:	9001      	str	r0, [sp, #4]
 801177e:	4602      	mov	r2, r0
 8011780:	2800      	cmp	r0, #0
 8011782:	d145      	bne.n	8011810 <_dtoa_r+0x2e8>
 8011784:	4b21      	ldr	r3, [pc, #132]	; (801180c <_dtoa_r+0x2e4>)
 8011786:	f240 11af 	movw	r1, #431	; 0x1af
 801178a:	e6e5      	b.n	8011558 <_dtoa_r+0x30>
 801178c:	2201      	movs	r2, #1
 801178e:	e7de      	b.n	801174e <_dtoa_r+0x226>
 8011790:	2200      	movs	r2, #0
 8011792:	9207      	str	r2, [sp, #28]
 8011794:	9a08      	ldr	r2, [sp, #32]
 8011796:	eb0b 0a02 	add.w	sl, fp, r2
 801179a:	f10a 0901 	add.w	r9, sl, #1
 801179e:	464a      	mov	r2, r9
 80117a0:	2a01      	cmp	r2, #1
 80117a2:	bfb8      	it	lt
 80117a4:	2201      	movlt	r2, #1
 80117a6:	e7dc      	b.n	8011762 <_dtoa_r+0x23a>
 80117a8:	2201      	movs	r2, #1
 80117aa:	e7f2      	b.n	8011792 <_dtoa_r+0x26a>
 80117ac:	2401      	movs	r4, #1
 80117ae:	2200      	movs	r2, #0
 80117b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80117b4:	f04f 3aff 	mov.w	sl, #4294967295
 80117b8:	2100      	movs	r1, #0
 80117ba:	46d1      	mov	r9, sl
 80117bc:	2212      	movs	r2, #18
 80117be:	9108      	str	r1, [sp, #32]
 80117c0:	e7cf      	b.n	8011762 <_dtoa_r+0x23a>
 80117c2:	2201      	movs	r2, #1
 80117c4:	9207      	str	r2, [sp, #28]
 80117c6:	e7f5      	b.n	80117b4 <_dtoa_r+0x28c>
 80117c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80117cc:	46d1      	mov	r9, sl
 80117ce:	4652      	mov	r2, sl
 80117d0:	e7c7      	b.n	8011762 <_dtoa_r+0x23a>
 80117d2:	3101      	adds	r1, #1
 80117d4:	0040      	lsls	r0, r0, #1
 80117d6:	e7c7      	b.n	8011768 <_dtoa_r+0x240>
 80117d8:	636f4361 	.word	0x636f4361
 80117dc:	3fd287a7 	.word	0x3fd287a7
 80117e0:	8b60c8b3 	.word	0x8b60c8b3
 80117e4:	3fc68a28 	.word	0x3fc68a28
 80117e8:	509f79fb 	.word	0x509f79fb
 80117ec:	3fd34413 	.word	0x3fd34413
 80117f0:	0801497a 	.word	0x0801497a
 80117f4:	08014991 	.word	0x08014991
 80117f8:	7ff00000 	.word	0x7ff00000
 80117fc:	08014976 	.word	0x08014976
 8011800:	0801496d 	.word	0x0801496d
 8011804:	08014945 	.word	0x08014945
 8011808:	08014a80 	.word	0x08014a80
 801180c:	080149e9 	.word	0x080149e9
 8011810:	69f2      	ldr	r2, [r6, #28]
 8011812:	9901      	ldr	r1, [sp, #4]
 8011814:	6011      	str	r1, [r2, #0]
 8011816:	f1b9 0f0e 	cmp.w	r9, #14
 801181a:	d86c      	bhi.n	80118f6 <_dtoa_r+0x3ce>
 801181c:	2c00      	cmp	r4, #0
 801181e:	d06a      	beq.n	80118f6 <_dtoa_r+0x3ce>
 8011820:	f1bb 0f00 	cmp.w	fp, #0
 8011824:	f340 80a0 	ble.w	8011968 <_dtoa_r+0x440>
 8011828:	4ac1      	ldr	r2, [pc, #772]	; (8011b30 <_dtoa_r+0x608>)
 801182a:	f00b 010f 	and.w	r1, fp, #15
 801182e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011832:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011836:	ed92 7b00 	vldr	d7, [r2]
 801183a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801183e:	f000 8087 	beq.w	8011950 <_dtoa_r+0x428>
 8011842:	49bc      	ldr	r1, [pc, #752]	; (8011b34 <_dtoa_r+0x60c>)
 8011844:	ed91 6b08 	vldr	d6, [r1, #32]
 8011848:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801184c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011850:	f002 020f 	and.w	r2, r2, #15
 8011854:	2103      	movs	r1, #3
 8011856:	48b7      	ldr	r0, [pc, #732]	; (8011b34 <_dtoa_r+0x60c>)
 8011858:	2a00      	cmp	r2, #0
 801185a:	d17b      	bne.n	8011954 <_dtoa_r+0x42c>
 801185c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011860:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011864:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801186a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801186e:	2a00      	cmp	r2, #0
 8011870:	f000 80a0 	beq.w	80119b4 <_dtoa_r+0x48c>
 8011874:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011878:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	f140 8098 	bpl.w	80119b4 <_dtoa_r+0x48c>
 8011884:	f1b9 0f00 	cmp.w	r9, #0
 8011888:	f000 8094 	beq.w	80119b4 <_dtoa_r+0x48c>
 801188c:	f1ba 0f00 	cmp.w	sl, #0
 8011890:	dd2f      	ble.n	80118f2 <_dtoa_r+0x3ca>
 8011892:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011896:	ee27 7b06 	vmul.f64	d7, d7, d6
 801189a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801189e:	f10b 32ff 	add.w	r2, fp, #4294967295
 80118a2:	3101      	adds	r1, #1
 80118a4:	4654      	mov	r4, sl
 80118a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80118aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80118ae:	ee07 1a90 	vmov	s15, r1
 80118b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80118ba:	ee15 7a90 	vmov	r7, s11
 80118be:	ec51 0b15 	vmov	r0, r1, d5
 80118c2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80118c6:	2c00      	cmp	r4, #0
 80118c8:	d177      	bne.n	80119ba <_dtoa_r+0x492>
 80118ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80118ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80118d2:	ec41 0b17 	vmov	d7, r0, r1
 80118d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	f300 826a 	bgt.w	8011db6 <_dtoa_r+0x88e>
 80118e2:	eeb1 7b47 	vneg.f64	d7, d7
 80118e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80118ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ee:	f100 8260 	bmi.w	8011db2 <_dtoa_r+0x88a>
 80118f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80118f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80118f8:	2a00      	cmp	r2, #0
 80118fa:	f2c0 811d 	blt.w	8011b38 <_dtoa_r+0x610>
 80118fe:	f1bb 0f0e 	cmp.w	fp, #14
 8011902:	f300 8119 	bgt.w	8011b38 <_dtoa_r+0x610>
 8011906:	4b8a      	ldr	r3, [pc, #552]	; (8011b30 <_dtoa_r+0x608>)
 8011908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801190c:	ed93 6b00 	vldr	d6, [r3]
 8011910:	9b08      	ldr	r3, [sp, #32]
 8011912:	2b00      	cmp	r3, #0
 8011914:	f280 80b7 	bge.w	8011a86 <_dtoa_r+0x55e>
 8011918:	f1b9 0f00 	cmp.w	r9, #0
 801191c:	f300 80b3 	bgt.w	8011a86 <_dtoa_r+0x55e>
 8011920:	f040 8246 	bne.w	8011db0 <_dtoa_r+0x888>
 8011924:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011928:	ee26 6b07 	vmul.f64	d6, d6, d7
 801192c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011930:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011938:	464c      	mov	r4, r9
 801193a:	464f      	mov	r7, r9
 801193c:	f280 821c 	bge.w	8011d78 <_dtoa_r+0x850>
 8011940:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011944:	2331      	movs	r3, #49	; 0x31
 8011946:	f808 3b01 	strb.w	r3, [r8], #1
 801194a:	f10b 0b01 	add.w	fp, fp, #1
 801194e:	e218      	b.n	8011d82 <_dtoa_r+0x85a>
 8011950:	2102      	movs	r1, #2
 8011952:	e780      	b.n	8011856 <_dtoa_r+0x32e>
 8011954:	07d4      	lsls	r4, r2, #31
 8011956:	d504      	bpl.n	8011962 <_dtoa_r+0x43a>
 8011958:	ed90 6b00 	vldr	d6, [r0]
 801195c:	3101      	adds	r1, #1
 801195e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011962:	1052      	asrs	r2, r2, #1
 8011964:	3008      	adds	r0, #8
 8011966:	e777      	b.n	8011858 <_dtoa_r+0x330>
 8011968:	d022      	beq.n	80119b0 <_dtoa_r+0x488>
 801196a:	f1cb 0200 	rsb	r2, fp, #0
 801196e:	4970      	ldr	r1, [pc, #448]	; (8011b30 <_dtoa_r+0x608>)
 8011970:	f002 000f 	and.w	r0, r2, #15
 8011974:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011978:	ed91 7b00 	vldr	d7, [r1]
 801197c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011984:	486b      	ldr	r0, [pc, #428]	; (8011b34 <_dtoa_r+0x60c>)
 8011986:	1112      	asrs	r2, r2, #4
 8011988:	2400      	movs	r4, #0
 801198a:	2102      	movs	r1, #2
 801198c:	b92a      	cbnz	r2, 801199a <_dtoa_r+0x472>
 801198e:	2c00      	cmp	r4, #0
 8011990:	f43f af6a 	beq.w	8011868 <_dtoa_r+0x340>
 8011994:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011998:	e766      	b.n	8011868 <_dtoa_r+0x340>
 801199a:	07d7      	lsls	r7, r2, #31
 801199c:	d505      	bpl.n	80119aa <_dtoa_r+0x482>
 801199e:	ed90 6b00 	vldr	d6, [r0]
 80119a2:	3101      	adds	r1, #1
 80119a4:	2401      	movs	r4, #1
 80119a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119aa:	1052      	asrs	r2, r2, #1
 80119ac:	3008      	adds	r0, #8
 80119ae:	e7ed      	b.n	801198c <_dtoa_r+0x464>
 80119b0:	2102      	movs	r1, #2
 80119b2:	e759      	b.n	8011868 <_dtoa_r+0x340>
 80119b4:	465a      	mov	r2, fp
 80119b6:	464c      	mov	r4, r9
 80119b8:	e775      	b.n	80118a6 <_dtoa_r+0x37e>
 80119ba:	ec41 0b17 	vmov	d7, r0, r1
 80119be:	495c      	ldr	r1, [pc, #368]	; (8011b30 <_dtoa_r+0x608>)
 80119c0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80119c4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80119c8:	9901      	ldr	r1, [sp, #4]
 80119ca:	440c      	add	r4, r1
 80119cc:	9907      	ldr	r1, [sp, #28]
 80119ce:	b351      	cbz	r1, 8011a26 <_dtoa_r+0x4fe>
 80119d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80119d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80119d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80119dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80119e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80119e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80119e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80119ec:	ee14 1a90 	vmov	r1, s9
 80119f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80119f4:	3130      	adds	r1, #48	; 0x30
 80119f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80119fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80119fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a02:	f808 1b01 	strb.w	r1, [r8], #1
 8011a06:	d439      	bmi.n	8011a7c <_dtoa_r+0x554>
 8011a08:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011a0c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a14:	d472      	bmi.n	8011afc <_dtoa_r+0x5d4>
 8011a16:	45a0      	cmp	r8, r4
 8011a18:	f43f af6b 	beq.w	80118f2 <_dtoa_r+0x3ca>
 8011a1c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011a20:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011a24:	e7e0      	b.n	80119e8 <_dtoa_r+0x4c0>
 8011a26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011a2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011a2e:	4620      	mov	r0, r4
 8011a30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011a34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011a38:	ee14 1a90 	vmov	r1, s9
 8011a3c:	3130      	adds	r1, #48	; 0x30
 8011a3e:	f808 1b01 	strb.w	r1, [r8], #1
 8011a42:	45a0      	cmp	r8, r4
 8011a44:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011a48:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011a4c:	d118      	bne.n	8011a80 <_dtoa_r+0x558>
 8011a4e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011a52:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011a56:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	dc4d      	bgt.n	8011afc <_dtoa_r+0x5d4>
 8011a60:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011a64:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6c:	f57f af41 	bpl.w	80118f2 <_dtoa_r+0x3ca>
 8011a70:	4680      	mov	r8, r0
 8011a72:	3801      	subs	r0, #1
 8011a74:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011a78:	2b30      	cmp	r3, #48	; 0x30
 8011a7a:	d0f9      	beq.n	8011a70 <_dtoa_r+0x548>
 8011a7c:	4693      	mov	fp, r2
 8011a7e:	e02a      	b.n	8011ad6 <_dtoa_r+0x5ae>
 8011a80:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011a84:	e7d6      	b.n	8011a34 <_dtoa_r+0x50c>
 8011a86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a8a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011a8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011a92:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011a96:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011a9a:	ee15 3a10 	vmov	r3, s10
 8011a9e:	3330      	adds	r3, #48	; 0x30
 8011aa0:	f808 3b01 	strb.w	r3, [r8], #1
 8011aa4:	9b01      	ldr	r3, [sp, #4]
 8011aa6:	eba8 0303 	sub.w	r3, r8, r3
 8011aaa:	4599      	cmp	r9, r3
 8011aac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011ab0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011ab4:	d133      	bne.n	8011b1e <_dtoa_r+0x5f6>
 8011ab6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011aba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac2:	dc1a      	bgt.n	8011afa <_dtoa_r+0x5d2>
 8011ac4:	eeb4 7b46 	vcmp.f64	d7, d6
 8011ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011acc:	d103      	bne.n	8011ad6 <_dtoa_r+0x5ae>
 8011ace:	ee15 3a10 	vmov	r3, s10
 8011ad2:	07d9      	lsls	r1, r3, #31
 8011ad4:	d411      	bmi.n	8011afa <_dtoa_r+0x5d2>
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f000 fb1d 	bl	8012118 <_Bfree>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ae2:	f888 3000 	strb.w	r3, [r8]
 8011ae6:	f10b 0301 	add.w	r3, fp, #1
 8011aea:	6013      	str	r3, [r2, #0]
 8011aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f43f ad69 	beq.w	80115c6 <_dtoa_r+0x9e>
 8011af4:	f8c3 8000 	str.w	r8, [r3]
 8011af8:	e565      	b.n	80115c6 <_dtoa_r+0x9e>
 8011afa:	465a      	mov	r2, fp
 8011afc:	4643      	mov	r3, r8
 8011afe:	4698      	mov	r8, r3
 8011b00:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8011b04:	2939      	cmp	r1, #57	; 0x39
 8011b06:	d106      	bne.n	8011b16 <_dtoa_r+0x5ee>
 8011b08:	9901      	ldr	r1, [sp, #4]
 8011b0a:	4299      	cmp	r1, r3
 8011b0c:	d1f7      	bne.n	8011afe <_dtoa_r+0x5d6>
 8011b0e:	9801      	ldr	r0, [sp, #4]
 8011b10:	2130      	movs	r1, #48	; 0x30
 8011b12:	3201      	adds	r2, #1
 8011b14:	7001      	strb	r1, [r0, #0]
 8011b16:	7819      	ldrb	r1, [r3, #0]
 8011b18:	3101      	adds	r1, #1
 8011b1a:	7019      	strb	r1, [r3, #0]
 8011b1c:	e7ae      	b.n	8011a7c <_dtoa_r+0x554>
 8011b1e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011b22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b2a:	d1b2      	bne.n	8011a92 <_dtoa_r+0x56a>
 8011b2c:	e7d3      	b.n	8011ad6 <_dtoa_r+0x5ae>
 8011b2e:	bf00      	nop
 8011b30:	08014a80 	.word	0x08014a80
 8011b34:	08014a58 	.word	0x08014a58
 8011b38:	9907      	ldr	r1, [sp, #28]
 8011b3a:	2900      	cmp	r1, #0
 8011b3c:	f000 80d0 	beq.w	8011ce0 <_dtoa_r+0x7b8>
 8011b40:	9906      	ldr	r1, [sp, #24]
 8011b42:	2901      	cmp	r1, #1
 8011b44:	f300 80b4 	bgt.w	8011cb0 <_dtoa_r+0x788>
 8011b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b4a:	2900      	cmp	r1, #0
 8011b4c:	f000 80ac 	beq.w	8011ca8 <_dtoa_r+0x780>
 8011b50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011b54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011b58:	461c      	mov	r4, r3
 8011b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b5c:	9b04      	ldr	r3, [sp, #16]
 8011b5e:	4413      	add	r3, r2
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	9b05      	ldr	r3, [sp, #20]
 8011b64:	2101      	movs	r1, #1
 8011b66:	4413      	add	r3, r2
 8011b68:	4630      	mov	r0, r6
 8011b6a:	9305      	str	r3, [sp, #20]
 8011b6c:	f000 fbd4 	bl	8012318 <__i2b>
 8011b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b72:	4607      	mov	r7, r0
 8011b74:	f1b8 0f00 	cmp.w	r8, #0
 8011b78:	d00d      	beq.n	8011b96 <_dtoa_r+0x66e>
 8011b7a:	9a05      	ldr	r2, [sp, #20]
 8011b7c:	2a00      	cmp	r2, #0
 8011b7e:	dd0a      	ble.n	8011b96 <_dtoa_r+0x66e>
 8011b80:	4542      	cmp	r2, r8
 8011b82:	9904      	ldr	r1, [sp, #16]
 8011b84:	bfa8      	it	ge
 8011b86:	4642      	movge	r2, r8
 8011b88:	1a89      	subs	r1, r1, r2
 8011b8a:	9104      	str	r1, [sp, #16]
 8011b8c:	9905      	ldr	r1, [sp, #20]
 8011b8e:	eba8 0802 	sub.w	r8, r8, r2
 8011b92:	1a8a      	subs	r2, r1, r2
 8011b94:	9205      	str	r2, [sp, #20]
 8011b96:	b303      	cbz	r3, 8011bda <_dtoa_r+0x6b2>
 8011b98:	9a07      	ldr	r2, [sp, #28]
 8011b9a:	2a00      	cmp	r2, #0
 8011b9c:	f000 80a5 	beq.w	8011cea <_dtoa_r+0x7c2>
 8011ba0:	2c00      	cmp	r4, #0
 8011ba2:	dd13      	ble.n	8011bcc <_dtoa_r+0x6a4>
 8011ba4:	4639      	mov	r1, r7
 8011ba6:	4622      	mov	r2, r4
 8011ba8:	4630      	mov	r0, r6
 8011baa:	930d      	str	r3, [sp, #52]	; 0x34
 8011bac:	f000 fc74 	bl	8012498 <__pow5mult>
 8011bb0:	462a      	mov	r2, r5
 8011bb2:	4601      	mov	r1, r0
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	f000 fbc4 	bl	8012344 <__multiply>
 8011bbc:	4629      	mov	r1, r5
 8011bbe:	9009      	str	r0, [sp, #36]	; 0x24
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f000 faa9 	bl	8012118 <_Bfree>
 8011bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bca:	4615      	mov	r5, r2
 8011bcc:	1b1a      	subs	r2, r3, r4
 8011bce:	d004      	beq.n	8011bda <_dtoa_r+0x6b2>
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	f000 fc60 	bl	8012498 <__pow5mult>
 8011bd8:	4605      	mov	r5, r0
 8011bda:	2101      	movs	r1, #1
 8011bdc:	4630      	mov	r0, r6
 8011bde:	f000 fb9b 	bl	8012318 <__i2b>
 8011be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	4604      	mov	r4, r0
 8011be8:	f340 8081 	ble.w	8011cee <_dtoa_r+0x7c6>
 8011bec:	461a      	mov	r2, r3
 8011bee:	4601      	mov	r1, r0
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f000 fc51 	bl	8012498 <__pow5mult>
 8011bf6:	9b06      	ldr	r3, [sp, #24]
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	dd7a      	ble.n	8011cf4 <_dtoa_r+0x7cc>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	9309      	str	r3, [sp, #36]	; 0x24
 8011c02:	6922      	ldr	r2, [r4, #16]
 8011c04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011c08:	6910      	ldr	r0, [r2, #16]
 8011c0a:	f000 fb37 	bl	801227c <__hi0bits>
 8011c0e:	f1c0 0020 	rsb	r0, r0, #32
 8011c12:	9b05      	ldr	r3, [sp, #20]
 8011c14:	4418      	add	r0, r3
 8011c16:	f010 001f 	ands.w	r0, r0, #31
 8011c1a:	f000 8093 	beq.w	8011d44 <_dtoa_r+0x81c>
 8011c1e:	f1c0 0220 	rsb	r2, r0, #32
 8011c22:	2a04      	cmp	r2, #4
 8011c24:	f340 8085 	ble.w	8011d32 <_dtoa_r+0x80a>
 8011c28:	9b04      	ldr	r3, [sp, #16]
 8011c2a:	f1c0 001c 	rsb	r0, r0, #28
 8011c2e:	4403      	add	r3, r0
 8011c30:	9304      	str	r3, [sp, #16]
 8011c32:	9b05      	ldr	r3, [sp, #20]
 8011c34:	4480      	add	r8, r0
 8011c36:	4403      	add	r3, r0
 8011c38:	9305      	str	r3, [sp, #20]
 8011c3a:	9b04      	ldr	r3, [sp, #16]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	dd05      	ble.n	8011c4c <_dtoa_r+0x724>
 8011c40:	4629      	mov	r1, r5
 8011c42:	461a      	mov	r2, r3
 8011c44:	4630      	mov	r0, r6
 8011c46:	f000 fc81 	bl	801254c <__lshift>
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	9b05      	ldr	r3, [sp, #20]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	dd05      	ble.n	8011c5e <_dtoa_r+0x736>
 8011c52:	4621      	mov	r1, r4
 8011c54:	461a      	mov	r2, r3
 8011c56:	4630      	mov	r0, r6
 8011c58:	f000 fc78 	bl	801254c <__lshift>
 8011c5c:	4604      	mov	r4, r0
 8011c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d071      	beq.n	8011d48 <_dtoa_r+0x820>
 8011c64:	4621      	mov	r1, r4
 8011c66:	4628      	mov	r0, r5
 8011c68:	f000 fcdc 	bl	8012624 <__mcmp>
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	da6b      	bge.n	8011d48 <_dtoa_r+0x820>
 8011c70:	2300      	movs	r3, #0
 8011c72:	4629      	mov	r1, r5
 8011c74:	220a      	movs	r2, #10
 8011c76:	4630      	mov	r0, r6
 8011c78:	f000 fa70 	bl	801215c <__multadd>
 8011c7c:	9b07      	ldr	r3, [sp, #28]
 8011c7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c82:	4605      	mov	r5, r0
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f000 8197 	beq.w	8011fb8 <_dtoa_r+0xa90>
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	220a      	movs	r2, #10
 8011c90:	4630      	mov	r0, r6
 8011c92:	f000 fa63 	bl	801215c <__multadd>
 8011c96:	f1ba 0f00 	cmp.w	sl, #0
 8011c9a:	4607      	mov	r7, r0
 8011c9c:	f300 8093 	bgt.w	8011dc6 <_dtoa_r+0x89e>
 8011ca0:	9b06      	ldr	r3, [sp, #24]
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	dc57      	bgt.n	8011d56 <_dtoa_r+0x82e>
 8011ca6:	e08e      	b.n	8011dc6 <_dtoa_r+0x89e>
 8011ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011caa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011cae:	e751      	b.n	8011b54 <_dtoa_r+0x62c>
 8011cb0:	f109 34ff 	add.w	r4, r9, #4294967295
 8011cb4:	42a3      	cmp	r3, r4
 8011cb6:	bfbf      	itttt	lt
 8011cb8:	1ae2      	sublt	r2, r4, r3
 8011cba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011cbc:	189b      	addlt	r3, r3, r2
 8011cbe:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011cc0:	bfae      	itee	ge
 8011cc2:	1b1c      	subge	r4, r3, r4
 8011cc4:	4623      	movlt	r3, r4
 8011cc6:	2400      	movlt	r4, #0
 8011cc8:	f1b9 0f00 	cmp.w	r9, #0
 8011ccc:	bfb5      	itete	lt
 8011cce:	9a04      	ldrlt	r2, [sp, #16]
 8011cd0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8011cd4:	eba2 0809 	sublt.w	r8, r2, r9
 8011cd8:	464a      	movge	r2, r9
 8011cda:	bfb8      	it	lt
 8011cdc:	2200      	movlt	r2, #0
 8011cde:	e73c      	b.n	8011b5a <_dtoa_r+0x632>
 8011ce0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011ce4:	9f07      	ldr	r7, [sp, #28]
 8011ce6:	461c      	mov	r4, r3
 8011ce8:	e744      	b.n	8011b74 <_dtoa_r+0x64c>
 8011cea:	461a      	mov	r2, r3
 8011cec:	e770      	b.n	8011bd0 <_dtoa_r+0x6a8>
 8011cee:	9b06      	ldr	r3, [sp, #24]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	dc18      	bgt.n	8011d26 <_dtoa_r+0x7fe>
 8011cf4:	9b02      	ldr	r3, [sp, #8]
 8011cf6:	b9b3      	cbnz	r3, 8011d26 <_dtoa_r+0x7fe>
 8011cf8:	9b03      	ldr	r3, [sp, #12]
 8011cfa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011cfe:	b9a2      	cbnz	r2, 8011d2a <_dtoa_r+0x802>
 8011d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011d04:	0d12      	lsrs	r2, r2, #20
 8011d06:	0512      	lsls	r2, r2, #20
 8011d08:	b18a      	cbz	r2, 8011d2e <_dtoa_r+0x806>
 8011d0a:	9b04      	ldr	r3, [sp, #16]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	9304      	str	r3, [sp, #16]
 8011d10:	9b05      	ldr	r3, [sp, #20]
 8011d12:	3301      	adds	r3, #1
 8011d14:	9305      	str	r3, [sp, #20]
 8011d16:	2301      	movs	r3, #1
 8011d18:	9309      	str	r3, [sp, #36]	; 0x24
 8011d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f47f af70 	bne.w	8011c02 <_dtoa_r+0x6da>
 8011d22:	2001      	movs	r0, #1
 8011d24:	e775      	b.n	8011c12 <_dtoa_r+0x6ea>
 8011d26:	2300      	movs	r3, #0
 8011d28:	e7f6      	b.n	8011d18 <_dtoa_r+0x7f0>
 8011d2a:	9b02      	ldr	r3, [sp, #8]
 8011d2c:	e7f4      	b.n	8011d18 <_dtoa_r+0x7f0>
 8011d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8011d30:	e7f3      	b.n	8011d1a <_dtoa_r+0x7f2>
 8011d32:	d082      	beq.n	8011c3a <_dtoa_r+0x712>
 8011d34:	9b04      	ldr	r3, [sp, #16]
 8011d36:	321c      	adds	r2, #28
 8011d38:	4413      	add	r3, r2
 8011d3a:	9304      	str	r3, [sp, #16]
 8011d3c:	9b05      	ldr	r3, [sp, #20]
 8011d3e:	4490      	add	r8, r2
 8011d40:	4413      	add	r3, r2
 8011d42:	e779      	b.n	8011c38 <_dtoa_r+0x710>
 8011d44:	4602      	mov	r2, r0
 8011d46:	e7f5      	b.n	8011d34 <_dtoa_r+0x80c>
 8011d48:	f1b9 0f00 	cmp.w	r9, #0
 8011d4c:	dc36      	bgt.n	8011dbc <_dtoa_r+0x894>
 8011d4e:	9b06      	ldr	r3, [sp, #24]
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	dd33      	ble.n	8011dbc <_dtoa_r+0x894>
 8011d54:	46ca      	mov	sl, r9
 8011d56:	f1ba 0f00 	cmp.w	sl, #0
 8011d5a:	d10d      	bne.n	8011d78 <_dtoa_r+0x850>
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	4653      	mov	r3, sl
 8011d60:	2205      	movs	r2, #5
 8011d62:	4630      	mov	r0, r6
 8011d64:	f000 f9fa 	bl	801215c <__multadd>
 8011d68:	4601      	mov	r1, r0
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f000 fc59 	bl	8012624 <__mcmp>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	f73f ade4 	bgt.w	8011940 <_dtoa_r+0x418>
 8011d78:	9b08      	ldr	r3, [sp, #32]
 8011d7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d7e:	ea6f 0b03 	mvn.w	fp, r3
 8011d82:	f04f 0900 	mov.w	r9, #0
 8011d86:	4621      	mov	r1, r4
 8011d88:	4630      	mov	r0, r6
 8011d8a:	f000 f9c5 	bl	8012118 <_Bfree>
 8011d8e:	2f00      	cmp	r7, #0
 8011d90:	f43f aea1 	beq.w	8011ad6 <_dtoa_r+0x5ae>
 8011d94:	f1b9 0f00 	cmp.w	r9, #0
 8011d98:	d005      	beq.n	8011da6 <_dtoa_r+0x87e>
 8011d9a:	45b9      	cmp	r9, r7
 8011d9c:	d003      	beq.n	8011da6 <_dtoa_r+0x87e>
 8011d9e:	4649      	mov	r1, r9
 8011da0:	4630      	mov	r0, r6
 8011da2:	f000 f9b9 	bl	8012118 <_Bfree>
 8011da6:	4639      	mov	r1, r7
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 f9b5 	bl	8012118 <_Bfree>
 8011dae:	e692      	b.n	8011ad6 <_dtoa_r+0x5ae>
 8011db0:	2400      	movs	r4, #0
 8011db2:	4627      	mov	r7, r4
 8011db4:	e7e0      	b.n	8011d78 <_dtoa_r+0x850>
 8011db6:	4693      	mov	fp, r2
 8011db8:	4627      	mov	r7, r4
 8011dba:	e5c1      	b.n	8011940 <_dtoa_r+0x418>
 8011dbc:	9b07      	ldr	r3, [sp, #28]
 8011dbe:	46ca      	mov	sl, r9
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f000 8100 	beq.w	8011fc6 <_dtoa_r+0xa9e>
 8011dc6:	f1b8 0f00 	cmp.w	r8, #0
 8011dca:	dd05      	ble.n	8011dd8 <_dtoa_r+0x8b0>
 8011dcc:	4639      	mov	r1, r7
 8011dce:	4642      	mov	r2, r8
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f000 fbbb 	bl	801254c <__lshift>
 8011dd6:	4607      	mov	r7, r0
 8011dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d05d      	beq.n	8011e9a <_dtoa_r+0x972>
 8011dde:	6879      	ldr	r1, [r7, #4]
 8011de0:	4630      	mov	r0, r6
 8011de2:	f000 f959 	bl	8012098 <_Balloc>
 8011de6:	4680      	mov	r8, r0
 8011de8:	b928      	cbnz	r0, 8011df6 <_dtoa_r+0x8ce>
 8011dea:	4b82      	ldr	r3, [pc, #520]	; (8011ff4 <_dtoa_r+0xacc>)
 8011dec:	4602      	mov	r2, r0
 8011dee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011df2:	f7ff bbb1 	b.w	8011558 <_dtoa_r+0x30>
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	3202      	adds	r2, #2
 8011dfa:	0092      	lsls	r2, r2, #2
 8011dfc:	f107 010c 	add.w	r1, r7, #12
 8011e00:	300c      	adds	r0, #12
 8011e02:	f7ff faf3 	bl	80113ec <memcpy>
 8011e06:	2201      	movs	r2, #1
 8011e08:	4641      	mov	r1, r8
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f000 fb9e 	bl	801254c <__lshift>
 8011e10:	9b01      	ldr	r3, [sp, #4]
 8011e12:	3301      	adds	r3, #1
 8011e14:	9304      	str	r3, [sp, #16]
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	4453      	add	r3, sl
 8011e1a:	9308      	str	r3, [sp, #32]
 8011e1c:	9b02      	ldr	r3, [sp, #8]
 8011e1e:	f003 0301 	and.w	r3, r3, #1
 8011e22:	46b9      	mov	r9, r7
 8011e24:	9307      	str	r3, [sp, #28]
 8011e26:	4607      	mov	r7, r0
 8011e28:	9b04      	ldr	r3, [sp, #16]
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	4628      	mov	r0, r5
 8011e30:	9302      	str	r3, [sp, #8]
 8011e32:	f7ff faef 	bl	8011414 <quorem>
 8011e36:	4603      	mov	r3, r0
 8011e38:	3330      	adds	r3, #48	; 0x30
 8011e3a:	9005      	str	r0, [sp, #20]
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	4628      	mov	r0, r5
 8011e40:	9309      	str	r3, [sp, #36]	; 0x24
 8011e42:	f000 fbef 	bl	8012624 <__mcmp>
 8011e46:	463a      	mov	r2, r7
 8011e48:	4682      	mov	sl, r0
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f000 fc05 	bl	801265c <__mdiff>
 8011e52:	68c2      	ldr	r2, [r0, #12]
 8011e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e56:	4680      	mov	r8, r0
 8011e58:	bb0a      	cbnz	r2, 8011e9e <_dtoa_r+0x976>
 8011e5a:	4601      	mov	r1, r0
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f000 fbe1 	bl	8012624 <__mcmp>
 8011e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e64:	4602      	mov	r2, r0
 8011e66:	4641      	mov	r1, r8
 8011e68:	4630      	mov	r0, r6
 8011e6a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8011e6e:	f000 f953 	bl	8012118 <_Bfree>
 8011e72:	9b06      	ldr	r3, [sp, #24]
 8011e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e76:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011e7a:	ea43 0102 	orr.w	r1, r3, r2
 8011e7e:	9b07      	ldr	r3, [sp, #28]
 8011e80:	4319      	orrs	r1, r3
 8011e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e84:	d10d      	bne.n	8011ea2 <_dtoa_r+0x97a>
 8011e86:	2b39      	cmp	r3, #57	; 0x39
 8011e88:	d029      	beq.n	8011ede <_dtoa_r+0x9b6>
 8011e8a:	f1ba 0f00 	cmp.w	sl, #0
 8011e8e:	dd01      	ble.n	8011e94 <_dtoa_r+0x96c>
 8011e90:	9b05      	ldr	r3, [sp, #20]
 8011e92:	3331      	adds	r3, #49	; 0x31
 8011e94:	9a02      	ldr	r2, [sp, #8]
 8011e96:	7013      	strb	r3, [r2, #0]
 8011e98:	e775      	b.n	8011d86 <_dtoa_r+0x85e>
 8011e9a:	4638      	mov	r0, r7
 8011e9c:	e7b8      	b.n	8011e10 <_dtoa_r+0x8e8>
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	e7e1      	b.n	8011e66 <_dtoa_r+0x93e>
 8011ea2:	f1ba 0f00 	cmp.w	sl, #0
 8011ea6:	db06      	blt.n	8011eb6 <_dtoa_r+0x98e>
 8011ea8:	9906      	ldr	r1, [sp, #24]
 8011eaa:	ea41 0a0a 	orr.w	sl, r1, sl
 8011eae:	9907      	ldr	r1, [sp, #28]
 8011eb0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8011eb4:	d120      	bne.n	8011ef8 <_dtoa_r+0x9d0>
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	ddec      	ble.n	8011e94 <_dtoa_r+0x96c>
 8011eba:	4629      	mov	r1, r5
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	9304      	str	r3, [sp, #16]
 8011ec2:	f000 fb43 	bl	801254c <__lshift>
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	4605      	mov	r5, r0
 8011eca:	f000 fbab 	bl	8012624 <__mcmp>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	9b04      	ldr	r3, [sp, #16]
 8011ed2:	dc02      	bgt.n	8011eda <_dtoa_r+0x9b2>
 8011ed4:	d1de      	bne.n	8011e94 <_dtoa_r+0x96c>
 8011ed6:	07da      	lsls	r2, r3, #31
 8011ed8:	d5dc      	bpl.n	8011e94 <_dtoa_r+0x96c>
 8011eda:	2b39      	cmp	r3, #57	; 0x39
 8011edc:	d1d8      	bne.n	8011e90 <_dtoa_r+0x968>
 8011ede:	9a02      	ldr	r2, [sp, #8]
 8011ee0:	2339      	movs	r3, #57	; 0x39
 8011ee2:	7013      	strb	r3, [r2, #0]
 8011ee4:	4643      	mov	r3, r8
 8011ee6:	4698      	mov	r8, r3
 8011ee8:	3b01      	subs	r3, #1
 8011eea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011eee:	2a39      	cmp	r2, #57	; 0x39
 8011ef0:	d051      	beq.n	8011f96 <_dtoa_r+0xa6e>
 8011ef2:	3201      	adds	r2, #1
 8011ef4:	701a      	strb	r2, [r3, #0]
 8011ef6:	e746      	b.n	8011d86 <_dtoa_r+0x85e>
 8011ef8:	2a00      	cmp	r2, #0
 8011efa:	dd03      	ble.n	8011f04 <_dtoa_r+0x9dc>
 8011efc:	2b39      	cmp	r3, #57	; 0x39
 8011efe:	d0ee      	beq.n	8011ede <_dtoa_r+0x9b6>
 8011f00:	3301      	adds	r3, #1
 8011f02:	e7c7      	b.n	8011e94 <_dtoa_r+0x96c>
 8011f04:	9a04      	ldr	r2, [sp, #16]
 8011f06:	9908      	ldr	r1, [sp, #32]
 8011f08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011f0c:	428a      	cmp	r2, r1
 8011f0e:	d02b      	beq.n	8011f68 <_dtoa_r+0xa40>
 8011f10:	4629      	mov	r1, r5
 8011f12:	2300      	movs	r3, #0
 8011f14:	220a      	movs	r2, #10
 8011f16:	4630      	mov	r0, r6
 8011f18:	f000 f920 	bl	801215c <__multadd>
 8011f1c:	45b9      	cmp	r9, r7
 8011f1e:	4605      	mov	r5, r0
 8011f20:	f04f 0300 	mov.w	r3, #0
 8011f24:	f04f 020a 	mov.w	r2, #10
 8011f28:	4649      	mov	r1, r9
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	d107      	bne.n	8011f3e <_dtoa_r+0xa16>
 8011f2e:	f000 f915 	bl	801215c <__multadd>
 8011f32:	4681      	mov	r9, r0
 8011f34:	4607      	mov	r7, r0
 8011f36:	9b04      	ldr	r3, [sp, #16]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	9304      	str	r3, [sp, #16]
 8011f3c:	e774      	b.n	8011e28 <_dtoa_r+0x900>
 8011f3e:	f000 f90d 	bl	801215c <__multadd>
 8011f42:	4639      	mov	r1, r7
 8011f44:	4681      	mov	r9, r0
 8011f46:	2300      	movs	r3, #0
 8011f48:	220a      	movs	r2, #10
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f000 f906 	bl	801215c <__multadd>
 8011f50:	4607      	mov	r7, r0
 8011f52:	e7f0      	b.n	8011f36 <_dtoa_r+0xa0e>
 8011f54:	f1ba 0f00 	cmp.w	sl, #0
 8011f58:	9a01      	ldr	r2, [sp, #4]
 8011f5a:	bfcc      	ite	gt
 8011f5c:	46d0      	movgt	r8, sl
 8011f5e:	f04f 0801 	movle.w	r8, #1
 8011f62:	4490      	add	r8, r2
 8011f64:	f04f 0900 	mov.w	r9, #0
 8011f68:	4629      	mov	r1, r5
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	9302      	str	r3, [sp, #8]
 8011f70:	f000 faec 	bl	801254c <__lshift>
 8011f74:	4621      	mov	r1, r4
 8011f76:	4605      	mov	r5, r0
 8011f78:	f000 fb54 	bl	8012624 <__mcmp>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	dcb1      	bgt.n	8011ee4 <_dtoa_r+0x9bc>
 8011f80:	d102      	bne.n	8011f88 <_dtoa_r+0xa60>
 8011f82:	9b02      	ldr	r3, [sp, #8]
 8011f84:	07db      	lsls	r3, r3, #31
 8011f86:	d4ad      	bmi.n	8011ee4 <_dtoa_r+0x9bc>
 8011f88:	4643      	mov	r3, r8
 8011f8a:	4698      	mov	r8, r3
 8011f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f90:	2a30      	cmp	r2, #48	; 0x30
 8011f92:	d0fa      	beq.n	8011f8a <_dtoa_r+0xa62>
 8011f94:	e6f7      	b.n	8011d86 <_dtoa_r+0x85e>
 8011f96:	9a01      	ldr	r2, [sp, #4]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d1a4      	bne.n	8011ee6 <_dtoa_r+0x9be>
 8011f9c:	f10b 0b01 	add.w	fp, fp, #1
 8011fa0:	2331      	movs	r3, #49	; 0x31
 8011fa2:	e778      	b.n	8011e96 <_dtoa_r+0x96e>
 8011fa4:	4b14      	ldr	r3, [pc, #80]	; (8011ff8 <_dtoa_r+0xad0>)
 8011fa6:	f7ff bb2a 	b.w	80115fe <_dtoa_r+0xd6>
 8011faa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	f47f ab05 	bne.w	80115bc <_dtoa_r+0x94>
 8011fb2:	4b12      	ldr	r3, [pc, #72]	; (8011ffc <_dtoa_r+0xad4>)
 8011fb4:	f7ff bb23 	b.w	80115fe <_dtoa_r+0xd6>
 8011fb8:	f1ba 0f00 	cmp.w	sl, #0
 8011fbc:	dc03      	bgt.n	8011fc6 <_dtoa_r+0xa9e>
 8011fbe:	9b06      	ldr	r3, [sp, #24]
 8011fc0:	2b02      	cmp	r3, #2
 8011fc2:	f73f aec8 	bgt.w	8011d56 <_dtoa_r+0x82e>
 8011fc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011fca:	4621      	mov	r1, r4
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f7ff fa21 	bl	8011414 <quorem>
 8011fd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011fd6:	f808 3b01 	strb.w	r3, [r8], #1
 8011fda:	9a01      	ldr	r2, [sp, #4]
 8011fdc:	eba8 0202 	sub.w	r2, r8, r2
 8011fe0:	4592      	cmp	sl, r2
 8011fe2:	ddb7      	ble.n	8011f54 <_dtoa_r+0xa2c>
 8011fe4:	4629      	mov	r1, r5
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	220a      	movs	r2, #10
 8011fea:	4630      	mov	r0, r6
 8011fec:	f000 f8b6 	bl	801215c <__multadd>
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	e7ea      	b.n	8011fca <_dtoa_r+0xaa2>
 8011ff4:	080149e9 	.word	0x080149e9
 8011ff8:	08014944 	.word	0x08014944
 8011ffc:	0801496d 	.word	0x0801496d

08012000 <_free_r>:
 8012000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012002:	2900      	cmp	r1, #0
 8012004:	d044      	beq.n	8012090 <_free_r+0x90>
 8012006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801200a:	9001      	str	r0, [sp, #4]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f1a1 0404 	sub.w	r4, r1, #4
 8012012:	bfb8      	it	lt
 8012014:	18e4      	addlt	r4, r4, r3
 8012016:	f7fe f971 	bl	80102fc <__malloc_lock>
 801201a:	4a1e      	ldr	r2, [pc, #120]	; (8012094 <_free_r+0x94>)
 801201c:	9801      	ldr	r0, [sp, #4]
 801201e:	6813      	ldr	r3, [r2, #0]
 8012020:	b933      	cbnz	r3, 8012030 <_free_r+0x30>
 8012022:	6063      	str	r3, [r4, #4]
 8012024:	6014      	str	r4, [r2, #0]
 8012026:	b003      	add	sp, #12
 8012028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801202c:	f7fe b96c 	b.w	8010308 <__malloc_unlock>
 8012030:	42a3      	cmp	r3, r4
 8012032:	d908      	bls.n	8012046 <_free_r+0x46>
 8012034:	6825      	ldr	r5, [r4, #0]
 8012036:	1961      	adds	r1, r4, r5
 8012038:	428b      	cmp	r3, r1
 801203a:	bf01      	itttt	eq
 801203c:	6819      	ldreq	r1, [r3, #0]
 801203e:	685b      	ldreq	r3, [r3, #4]
 8012040:	1949      	addeq	r1, r1, r5
 8012042:	6021      	streq	r1, [r4, #0]
 8012044:	e7ed      	b.n	8012022 <_free_r+0x22>
 8012046:	461a      	mov	r2, r3
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	b10b      	cbz	r3, 8012050 <_free_r+0x50>
 801204c:	42a3      	cmp	r3, r4
 801204e:	d9fa      	bls.n	8012046 <_free_r+0x46>
 8012050:	6811      	ldr	r1, [r2, #0]
 8012052:	1855      	adds	r5, r2, r1
 8012054:	42a5      	cmp	r5, r4
 8012056:	d10b      	bne.n	8012070 <_free_r+0x70>
 8012058:	6824      	ldr	r4, [r4, #0]
 801205a:	4421      	add	r1, r4
 801205c:	1854      	adds	r4, r2, r1
 801205e:	42a3      	cmp	r3, r4
 8012060:	6011      	str	r1, [r2, #0]
 8012062:	d1e0      	bne.n	8012026 <_free_r+0x26>
 8012064:	681c      	ldr	r4, [r3, #0]
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	6053      	str	r3, [r2, #4]
 801206a:	440c      	add	r4, r1
 801206c:	6014      	str	r4, [r2, #0]
 801206e:	e7da      	b.n	8012026 <_free_r+0x26>
 8012070:	d902      	bls.n	8012078 <_free_r+0x78>
 8012072:	230c      	movs	r3, #12
 8012074:	6003      	str	r3, [r0, #0]
 8012076:	e7d6      	b.n	8012026 <_free_r+0x26>
 8012078:	6825      	ldr	r5, [r4, #0]
 801207a:	1961      	adds	r1, r4, r5
 801207c:	428b      	cmp	r3, r1
 801207e:	bf04      	itt	eq
 8012080:	6819      	ldreq	r1, [r3, #0]
 8012082:	685b      	ldreq	r3, [r3, #4]
 8012084:	6063      	str	r3, [r4, #4]
 8012086:	bf04      	itt	eq
 8012088:	1949      	addeq	r1, r1, r5
 801208a:	6021      	streq	r1, [r4, #0]
 801208c:	6054      	str	r4, [r2, #4]
 801208e:	e7ca      	b.n	8012026 <_free_r+0x26>
 8012090:	b003      	add	sp, #12
 8012092:	bd30      	pop	{r4, r5, pc}
 8012094:	2400556c 	.word	0x2400556c

08012098 <_Balloc>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	69c6      	ldr	r6, [r0, #28]
 801209c:	4604      	mov	r4, r0
 801209e:	460d      	mov	r5, r1
 80120a0:	b976      	cbnz	r6, 80120c0 <_Balloc+0x28>
 80120a2:	2010      	movs	r0, #16
 80120a4:	f7fe f882 	bl	80101ac <malloc>
 80120a8:	4602      	mov	r2, r0
 80120aa:	61e0      	str	r0, [r4, #28]
 80120ac:	b920      	cbnz	r0, 80120b8 <_Balloc+0x20>
 80120ae:	4b18      	ldr	r3, [pc, #96]	; (8012110 <_Balloc+0x78>)
 80120b0:	4818      	ldr	r0, [pc, #96]	; (8012114 <_Balloc+0x7c>)
 80120b2:	216b      	movs	r1, #107	; 0x6b
 80120b4:	f001 fd2c 	bl	8013b10 <__assert_func>
 80120b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120bc:	6006      	str	r6, [r0, #0]
 80120be:	60c6      	str	r6, [r0, #12]
 80120c0:	69e6      	ldr	r6, [r4, #28]
 80120c2:	68f3      	ldr	r3, [r6, #12]
 80120c4:	b183      	cbz	r3, 80120e8 <_Balloc+0x50>
 80120c6:	69e3      	ldr	r3, [r4, #28]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120ce:	b9b8      	cbnz	r0, 8012100 <_Balloc+0x68>
 80120d0:	2101      	movs	r1, #1
 80120d2:	fa01 f605 	lsl.w	r6, r1, r5
 80120d6:	1d72      	adds	r2, r6, #5
 80120d8:	0092      	lsls	r2, r2, #2
 80120da:	4620      	mov	r0, r4
 80120dc:	f001 fd36 	bl	8013b4c <_calloc_r>
 80120e0:	b160      	cbz	r0, 80120fc <_Balloc+0x64>
 80120e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120e6:	e00e      	b.n	8012106 <_Balloc+0x6e>
 80120e8:	2221      	movs	r2, #33	; 0x21
 80120ea:	2104      	movs	r1, #4
 80120ec:	4620      	mov	r0, r4
 80120ee:	f001 fd2d 	bl	8013b4c <_calloc_r>
 80120f2:	69e3      	ldr	r3, [r4, #28]
 80120f4:	60f0      	str	r0, [r6, #12]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e4      	bne.n	80120c6 <_Balloc+0x2e>
 80120fc:	2000      	movs	r0, #0
 80120fe:	bd70      	pop	{r4, r5, r6, pc}
 8012100:	6802      	ldr	r2, [r0, #0]
 8012102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012106:	2300      	movs	r3, #0
 8012108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801210c:	e7f7      	b.n	80120fe <_Balloc+0x66>
 801210e:	bf00      	nop
 8012110:	0801497a 	.word	0x0801497a
 8012114:	080149fa 	.word	0x080149fa

08012118 <_Bfree>:
 8012118:	b570      	push	{r4, r5, r6, lr}
 801211a:	69c6      	ldr	r6, [r0, #28]
 801211c:	4605      	mov	r5, r0
 801211e:	460c      	mov	r4, r1
 8012120:	b976      	cbnz	r6, 8012140 <_Bfree+0x28>
 8012122:	2010      	movs	r0, #16
 8012124:	f7fe f842 	bl	80101ac <malloc>
 8012128:	4602      	mov	r2, r0
 801212a:	61e8      	str	r0, [r5, #28]
 801212c:	b920      	cbnz	r0, 8012138 <_Bfree+0x20>
 801212e:	4b09      	ldr	r3, [pc, #36]	; (8012154 <_Bfree+0x3c>)
 8012130:	4809      	ldr	r0, [pc, #36]	; (8012158 <_Bfree+0x40>)
 8012132:	218f      	movs	r1, #143	; 0x8f
 8012134:	f001 fcec 	bl	8013b10 <__assert_func>
 8012138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801213c:	6006      	str	r6, [r0, #0]
 801213e:	60c6      	str	r6, [r0, #12]
 8012140:	b13c      	cbz	r4, 8012152 <_Bfree+0x3a>
 8012142:	69eb      	ldr	r3, [r5, #28]
 8012144:	6862      	ldr	r2, [r4, #4]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801214c:	6021      	str	r1, [r4, #0]
 801214e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012152:	bd70      	pop	{r4, r5, r6, pc}
 8012154:	0801497a 	.word	0x0801497a
 8012158:	080149fa 	.word	0x080149fa

0801215c <__multadd>:
 801215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012160:	690d      	ldr	r5, [r1, #16]
 8012162:	4607      	mov	r7, r0
 8012164:	460c      	mov	r4, r1
 8012166:	461e      	mov	r6, r3
 8012168:	f101 0c14 	add.w	ip, r1, #20
 801216c:	2000      	movs	r0, #0
 801216e:	f8dc 3000 	ldr.w	r3, [ip]
 8012172:	b299      	uxth	r1, r3
 8012174:	fb02 6101 	mla	r1, r2, r1, r6
 8012178:	0c1e      	lsrs	r6, r3, #16
 801217a:	0c0b      	lsrs	r3, r1, #16
 801217c:	fb02 3306 	mla	r3, r2, r6, r3
 8012180:	b289      	uxth	r1, r1
 8012182:	3001      	adds	r0, #1
 8012184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012188:	4285      	cmp	r5, r0
 801218a:	f84c 1b04 	str.w	r1, [ip], #4
 801218e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012192:	dcec      	bgt.n	801216e <__multadd+0x12>
 8012194:	b30e      	cbz	r6, 80121da <__multadd+0x7e>
 8012196:	68a3      	ldr	r3, [r4, #8]
 8012198:	42ab      	cmp	r3, r5
 801219a:	dc19      	bgt.n	80121d0 <__multadd+0x74>
 801219c:	6861      	ldr	r1, [r4, #4]
 801219e:	4638      	mov	r0, r7
 80121a0:	3101      	adds	r1, #1
 80121a2:	f7ff ff79 	bl	8012098 <_Balloc>
 80121a6:	4680      	mov	r8, r0
 80121a8:	b928      	cbnz	r0, 80121b6 <__multadd+0x5a>
 80121aa:	4602      	mov	r2, r0
 80121ac:	4b0c      	ldr	r3, [pc, #48]	; (80121e0 <__multadd+0x84>)
 80121ae:	480d      	ldr	r0, [pc, #52]	; (80121e4 <__multadd+0x88>)
 80121b0:	21ba      	movs	r1, #186	; 0xba
 80121b2:	f001 fcad 	bl	8013b10 <__assert_func>
 80121b6:	6922      	ldr	r2, [r4, #16]
 80121b8:	3202      	adds	r2, #2
 80121ba:	f104 010c 	add.w	r1, r4, #12
 80121be:	0092      	lsls	r2, r2, #2
 80121c0:	300c      	adds	r0, #12
 80121c2:	f7ff f913 	bl	80113ec <memcpy>
 80121c6:	4621      	mov	r1, r4
 80121c8:	4638      	mov	r0, r7
 80121ca:	f7ff ffa5 	bl	8012118 <_Bfree>
 80121ce:	4644      	mov	r4, r8
 80121d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121d4:	3501      	adds	r5, #1
 80121d6:	615e      	str	r6, [r3, #20]
 80121d8:	6125      	str	r5, [r4, #16]
 80121da:	4620      	mov	r0, r4
 80121dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e0:	080149e9 	.word	0x080149e9
 80121e4:	080149fa 	.word	0x080149fa

080121e8 <__s2b>:
 80121e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ec:	460c      	mov	r4, r1
 80121ee:	4615      	mov	r5, r2
 80121f0:	461f      	mov	r7, r3
 80121f2:	2209      	movs	r2, #9
 80121f4:	3308      	adds	r3, #8
 80121f6:	4606      	mov	r6, r0
 80121f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80121fc:	2100      	movs	r1, #0
 80121fe:	2201      	movs	r2, #1
 8012200:	429a      	cmp	r2, r3
 8012202:	db09      	blt.n	8012218 <__s2b+0x30>
 8012204:	4630      	mov	r0, r6
 8012206:	f7ff ff47 	bl	8012098 <_Balloc>
 801220a:	b940      	cbnz	r0, 801221e <__s2b+0x36>
 801220c:	4602      	mov	r2, r0
 801220e:	4b19      	ldr	r3, [pc, #100]	; (8012274 <__s2b+0x8c>)
 8012210:	4819      	ldr	r0, [pc, #100]	; (8012278 <__s2b+0x90>)
 8012212:	21d3      	movs	r1, #211	; 0xd3
 8012214:	f001 fc7c 	bl	8013b10 <__assert_func>
 8012218:	0052      	lsls	r2, r2, #1
 801221a:	3101      	adds	r1, #1
 801221c:	e7f0      	b.n	8012200 <__s2b+0x18>
 801221e:	9b08      	ldr	r3, [sp, #32]
 8012220:	6143      	str	r3, [r0, #20]
 8012222:	2d09      	cmp	r5, #9
 8012224:	f04f 0301 	mov.w	r3, #1
 8012228:	6103      	str	r3, [r0, #16]
 801222a:	dd16      	ble.n	801225a <__s2b+0x72>
 801222c:	f104 0909 	add.w	r9, r4, #9
 8012230:	46c8      	mov	r8, r9
 8012232:	442c      	add	r4, r5
 8012234:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012238:	4601      	mov	r1, r0
 801223a:	3b30      	subs	r3, #48	; 0x30
 801223c:	220a      	movs	r2, #10
 801223e:	4630      	mov	r0, r6
 8012240:	f7ff ff8c 	bl	801215c <__multadd>
 8012244:	45a0      	cmp	r8, r4
 8012246:	d1f5      	bne.n	8012234 <__s2b+0x4c>
 8012248:	f1a5 0408 	sub.w	r4, r5, #8
 801224c:	444c      	add	r4, r9
 801224e:	1b2d      	subs	r5, r5, r4
 8012250:	1963      	adds	r3, r4, r5
 8012252:	42bb      	cmp	r3, r7
 8012254:	db04      	blt.n	8012260 <__s2b+0x78>
 8012256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225a:	340a      	adds	r4, #10
 801225c:	2509      	movs	r5, #9
 801225e:	e7f6      	b.n	801224e <__s2b+0x66>
 8012260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012264:	4601      	mov	r1, r0
 8012266:	3b30      	subs	r3, #48	; 0x30
 8012268:	220a      	movs	r2, #10
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff ff76 	bl	801215c <__multadd>
 8012270:	e7ee      	b.n	8012250 <__s2b+0x68>
 8012272:	bf00      	nop
 8012274:	080149e9 	.word	0x080149e9
 8012278:	080149fa 	.word	0x080149fa

0801227c <__hi0bits>:
 801227c:	0c03      	lsrs	r3, r0, #16
 801227e:	041b      	lsls	r3, r3, #16
 8012280:	b9d3      	cbnz	r3, 80122b8 <__hi0bits+0x3c>
 8012282:	0400      	lsls	r0, r0, #16
 8012284:	2310      	movs	r3, #16
 8012286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801228a:	bf04      	itt	eq
 801228c:	0200      	lsleq	r0, r0, #8
 801228e:	3308      	addeq	r3, #8
 8012290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012294:	bf04      	itt	eq
 8012296:	0100      	lsleq	r0, r0, #4
 8012298:	3304      	addeq	r3, #4
 801229a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801229e:	bf04      	itt	eq
 80122a0:	0080      	lsleq	r0, r0, #2
 80122a2:	3302      	addeq	r3, #2
 80122a4:	2800      	cmp	r0, #0
 80122a6:	db05      	blt.n	80122b4 <__hi0bits+0x38>
 80122a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122ac:	f103 0301 	add.w	r3, r3, #1
 80122b0:	bf08      	it	eq
 80122b2:	2320      	moveq	r3, #32
 80122b4:	4618      	mov	r0, r3
 80122b6:	4770      	bx	lr
 80122b8:	2300      	movs	r3, #0
 80122ba:	e7e4      	b.n	8012286 <__hi0bits+0xa>

080122bc <__lo0bits>:
 80122bc:	6803      	ldr	r3, [r0, #0]
 80122be:	f013 0207 	ands.w	r2, r3, #7
 80122c2:	d00c      	beq.n	80122de <__lo0bits+0x22>
 80122c4:	07d9      	lsls	r1, r3, #31
 80122c6:	d422      	bmi.n	801230e <__lo0bits+0x52>
 80122c8:	079a      	lsls	r2, r3, #30
 80122ca:	bf49      	itett	mi
 80122cc:	085b      	lsrmi	r3, r3, #1
 80122ce:	089b      	lsrpl	r3, r3, #2
 80122d0:	6003      	strmi	r3, [r0, #0]
 80122d2:	2201      	movmi	r2, #1
 80122d4:	bf5c      	itt	pl
 80122d6:	6003      	strpl	r3, [r0, #0]
 80122d8:	2202      	movpl	r2, #2
 80122da:	4610      	mov	r0, r2
 80122dc:	4770      	bx	lr
 80122de:	b299      	uxth	r1, r3
 80122e0:	b909      	cbnz	r1, 80122e6 <__lo0bits+0x2a>
 80122e2:	0c1b      	lsrs	r3, r3, #16
 80122e4:	2210      	movs	r2, #16
 80122e6:	b2d9      	uxtb	r1, r3
 80122e8:	b909      	cbnz	r1, 80122ee <__lo0bits+0x32>
 80122ea:	3208      	adds	r2, #8
 80122ec:	0a1b      	lsrs	r3, r3, #8
 80122ee:	0719      	lsls	r1, r3, #28
 80122f0:	bf04      	itt	eq
 80122f2:	091b      	lsreq	r3, r3, #4
 80122f4:	3204      	addeq	r2, #4
 80122f6:	0799      	lsls	r1, r3, #30
 80122f8:	bf04      	itt	eq
 80122fa:	089b      	lsreq	r3, r3, #2
 80122fc:	3202      	addeq	r2, #2
 80122fe:	07d9      	lsls	r1, r3, #31
 8012300:	d403      	bmi.n	801230a <__lo0bits+0x4e>
 8012302:	085b      	lsrs	r3, r3, #1
 8012304:	f102 0201 	add.w	r2, r2, #1
 8012308:	d003      	beq.n	8012312 <__lo0bits+0x56>
 801230a:	6003      	str	r3, [r0, #0]
 801230c:	e7e5      	b.n	80122da <__lo0bits+0x1e>
 801230e:	2200      	movs	r2, #0
 8012310:	e7e3      	b.n	80122da <__lo0bits+0x1e>
 8012312:	2220      	movs	r2, #32
 8012314:	e7e1      	b.n	80122da <__lo0bits+0x1e>
	...

08012318 <__i2b>:
 8012318:	b510      	push	{r4, lr}
 801231a:	460c      	mov	r4, r1
 801231c:	2101      	movs	r1, #1
 801231e:	f7ff febb 	bl	8012098 <_Balloc>
 8012322:	4602      	mov	r2, r0
 8012324:	b928      	cbnz	r0, 8012332 <__i2b+0x1a>
 8012326:	4b05      	ldr	r3, [pc, #20]	; (801233c <__i2b+0x24>)
 8012328:	4805      	ldr	r0, [pc, #20]	; (8012340 <__i2b+0x28>)
 801232a:	f240 1145 	movw	r1, #325	; 0x145
 801232e:	f001 fbef 	bl	8013b10 <__assert_func>
 8012332:	2301      	movs	r3, #1
 8012334:	6144      	str	r4, [r0, #20]
 8012336:	6103      	str	r3, [r0, #16]
 8012338:	bd10      	pop	{r4, pc}
 801233a:	bf00      	nop
 801233c:	080149e9 	.word	0x080149e9
 8012340:	080149fa 	.word	0x080149fa

08012344 <__multiply>:
 8012344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012348:	4691      	mov	r9, r2
 801234a:	690a      	ldr	r2, [r1, #16]
 801234c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012350:	429a      	cmp	r2, r3
 8012352:	bfb8      	it	lt
 8012354:	460b      	movlt	r3, r1
 8012356:	460c      	mov	r4, r1
 8012358:	bfbc      	itt	lt
 801235a:	464c      	movlt	r4, r9
 801235c:	4699      	movlt	r9, r3
 801235e:	6927      	ldr	r7, [r4, #16]
 8012360:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012364:	68a3      	ldr	r3, [r4, #8]
 8012366:	6861      	ldr	r1, [r4, #4]
 8012368:	eb07 060a 	add.w	r6, r7, sl
 801236c:	42b3      	cmp	r3, r6
 801236e:	b085      	sub	sp, #20
 8012370:	bfb8      	it	lt
 8012372:	3101      	addlt	r1, #1
 8012374:	f7ff fe90 	bl	8012098 <_Balloc>
 8012378:	b930      	cbnz	r0, 8012388 <__multiply+0x44>
 801237a:	4602      	mov	r2, r0
 801237c:	4b44      	ldr	r3, [pc, #272]	; (8012490 <__multiply+0x14c>)
 801237e:	4845      	ldr	r0, [pc, #276]	; (8012494 <__multiply+0x150>)
 8012380:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012384:	f001 fbc4 	bl	8013b10 <__assert_func>
 8012388:	f100 0514 	add.w	r5, r0, #20
 801238c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012390:	462b      	mov	r3, r5
 8012392:	2200      	movs	r2, #0
 8012394:	4543      	cmp	r3, r8
 8012396:	d321      	bcc.n	80123dc <__multiply+0x98>
 8012398:	f104 0314 	add.w	r3, r4, #20
 801239c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80123a0:	f109 0314 	add.w	r3, r9, #20
 80123a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80123a8:	9202      	str	r2, [sp, #8]
 80123aa:	1b3a      	subs	r2, r7, r4
 80123ac:	3a15      	subs	r2, #21
 80123ae:	f022 0203 	bic.w	r2, r2, #3
 80123b2:	3204      	adds	r2, #4
 80123b4:	f104 0115 	add.w	r1, r4, #21
 80123b8:	428f      	cmp	r7, r1
 80123ba:	bf38      	it	cc
 80123bc:	2204      	movcc	r2, #4
 80123be:	9201      	str	r2, [sp, #4]
 80123c0:	9a02      	ldr	r2, [sp, #8]
 80123c2:	9303      	str	r3, [sp, #12]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d80c      	bhi.n	80123e2 <__multiply+0x9e>
 80123c8:	2e00      	cmp	r6, #0
 80123ca:	dd03      	ble.n	80123d4 <__multiply+0x90>
 80123cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d05b      	beq.n	801248c <__multiply+0x148>
 80123d4:	6106      	str	r6, [r0, #16]
 80123d6:	b005      	add	sp, #20
 80123d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123dc:	f843 2b04 	str.w	r2, [r3], #4
 80123e0:	e7d8      	b.n	8012394 <__multiply+0x50>
 80123e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80123e6:	f1ba 0f00 	cmp.w	sl, #0
 80123ea:	d024      	beq.n	8012436 <__multiply+0xf2>
 80123ec:	f104 0e14 	add.w	lr, r4, #20
 80123f0:	46a9      	mov	r9, r5
 80123f2:	f04f 0c00 	mov.w	ip, #0
 80123f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80123fa:	f8d9 1000 	ldr.w	r1, [r9]
 80123fe:	fa1f fb82 	uxth.w	fp, r2
 8012402:	b289      	uxth	r1, r1
 8012404:	fb0a 110b 	mla	r1, sl, fp, r1
 8012408:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801240c:	f8d9 2000 	ldr.w	r2, [r9]
 8012410:	4461      	add	r1, ip
 8012412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012416:	fb0a c20b 	mla	r2, sl, fp, ip
 801241a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801241e:	b289      	uxth	r1, r1
 8012420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012424:	4577      	cmp	r7, lr
 8012426:	f849 1b04 	str.w	r1, [r9], #4
 801242a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801242e:	d8e2      	bhi.n	80123f6 <__multiply+0xb2>
 8012430:	9a01      	ldr	r2, [sp, #4]
 8012432:	f845 c002 	str.w	ip, [r5, r2]
 8012436:	9a03      	ldr	r2, [sp, #12]
 8012438:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801243c:	3304      	adds	r3, #4
 801243e:	f1b9 0f00 	cmp.w	r9, #0
 8012442:	d021      	beq.n	8012488 <__multiply+0x144>
 8012444:	6829      	ldr	r1, [r5, #0]
 8012446:	f104 0c14 	add.w	ip, r4, #20
 801244a:	46ae      	mov	lr, r5
 801244c:	f04f 0a00 	mov.w	sl, #0
 8012450:	f8bc b000 	ldrh.w	fp, [ip]
 8012454:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012458:	fb09 220b 	mla	r2, r9, fp, r2
 801245c:	4452      	add	r2, sl
 801245e:	b289      	uxth	r1, r1
 8012460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012464:	f84e 1b04 	str.w	r1, [lr], #4
 8012468:	f85c 1b04 	ldr.w	r1, [ip], #4
 801246c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012470:	f8be 1000 	ldrh.w	r1, [lr]
 8012474:	fb09 110a 	mla	r1, r9, sl, r1
 8012478:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801247c:	4567      	cmp	r7, ip
 801247e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012482:	d8e5      	bhi.n	8012450 <__multiply+0x10c>
 8012484:	9a01      	ldr	r2, [sp, #4]
 8012486:	50a9      	str	r1, [r5, r2]
 8012488:	3504      	adds	r5, #4
 801248a:	e799      	b.n	80123c0 <__multiply+0x7c>
 801248c:	3e01      	subs	r6, #1
 801248e:	e79b      	b.n	80123c8 <__multiply+0x84>
 8012490:	080149e9 	.word	0x080149e9
 8012494:	080149fa 	.word	0x080149fa

08012498 <__pow5mult>:
 8012498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801249c:	4615      	mov	r5, r2
 801249e:	f012 0203 	ands.w	r2, r2, #3
 80124a2:	4606      	mov	r6, r0
 80124a4:	460f      	mov	r7, r1
 80124a6:	d007      	beq.n	80124b8 <__pow5mult+0x20>
 80124a8:	4c25      	ldr	r4, [pc, #148]	; (8012540 <__pow5mult+0xa8>)
 80124aa:	3a01      	subs	r2, #1
 80124ac:	2300      	movs	r3, #0
 80124ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124b2:	f7ff fe53 	bl	801215c <__multadd>
 80124b6:	4607      	mov	r7, r0
 80124b8:	10ad      	asrs	r5, r5, #2
 80124ba:	d03d      	beq.n	8012538 <__pow5mult+0xa0>
 80124bc:	69f4      	ldr	r4, [r6, #28]
 80124be:	b97c      	cbnz	r4, 80124e0 <__pow5mult+0x48>
 80124c0:	2010      	movs	r0, #16
 80124c2:	f7fd fe73 	bl	80101ac <malloc>
 80124c6:	4602      	mov	r2, r0
 80124c8:	61f0      	str	r0, [r6, #28]
 80124ca:	b928      	cbnz	r0, 80124d8 <__pow5mult+0x40>
 80124cc:	4b1d      	ldr	r3, [pc, #116]	; (8012544 <__pow5mult+0xac>)
 80124ce:	481e      	ldr	r0, [pc, #120]	; (8012548 <__pow5mult+0xb0>)
 80124d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80124d4:	f001 fb1c 	bl	8013b10 <__assert_func>
 80124d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124dc:	6004      	str	r4, [r0, #0]
 80124de:	60c4      	str	r4, [r0, #12]
 80124e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80124e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124e8:	b94c      	cbnz	r4, 80124fe <__pow5mult+0x66>
 80124ea:	f240 2171 	movw	r1, #625	; 0x271
 80124ee:	4630      	mov	r0, r6
 80124f0:	f7ff ff12 	bl	8012318 <__i2b>
 80124f4:	2300      	movs	r3, #0
 80124f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80124fa:	4604      	mov	r4, r0
 80124fc:	6003      	str	r3, [r0, #0]
 80124fe:	f04f 0900 	mov.w	r9, #0
 8012502:	07eb      	lsls	r3, r5, #31
 8012504:	d50a      	bpl.n	801251c <__pow5mult+0x84>
 8012506:	4639      	mov	r1, r7
 8012508:	4622      	mov	r2, r4
 801250a:	4630      	mov	r0, r6
 801250c:	f7ff ff1a 	bl	8012344 <__multiply>
 8012510:	4639      	mov	r1, r7
 8012512:	4680      	mov	r8, r0
 8012514:	4630      	mov	r0, r6
 8012516:	f7ff fdff 	bl	8012118 <_Bfree>
 801251a:	4647      	mov	r7, r8
 801251c:	106d      	asrs	r5, r5, #1
 801251e:	d00b      	beq.n	8012538 <__pow5mult+0xa0>
 8012520:	6820      	ldr	r0, [r4, #0]
 8012522:	b938      	cbnz	r0, 8012534 <__pow5mult+0x9c>
 8012524:	4622      	mov	r2, r4
 8012526:	4621      	mov	r1, r4
 8012528:	4630      	mov	r0, r6
 801252a:	f7ff ff0b 	bl	8012344 <__multiply>
 801252e:	6020      	str	r0, [r4, #0]
 8012530:	f8c0 9000 	str.w	r9, [r0]
 8012534:	4604      	mov	r4, r0
 8012536:	e7e4      	b.n	8012502 <__pow5mult+0x6a>
 8012538:	4638      	mov	r0, r7
 801253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801253e:	bf00      	nop
 8012540:	08014b48 	.word	0x08014b48
 8012544:	0801497a 	.word	0x0801497a
 8012548:	080149fa 	.word	0x080149fa

0801254c <__lshift>:
 801254c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012550:	460c      	mov	r4, r1
 8012552:	6849      	ldr	r1, [r1, #4]
 8012554:	6923      	ldr	r3, [r4, #16]
 8012556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801255a:	68a3      	ldr	r3, [r4, #8]
 801255c:	4607      	mov	r7, r0
 801255e:	4691      	mov	r9, r2
 8012560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012564:	f108 0601 	add.w	r6, r8, #1
 8012568:	42b3      	cmp	r3, r6
 801256a:	db0b      	blt.n	8012584 <__lshift+0x38>
 801256c:	4638      	mov	r0, r7
 801256e:	f7ff fd93 	bl	8012098 <_Balloc>
 8012572:	4605      	mov	r5, r0
 8012574:	b948      	cbnz	r0, 801258a <__lshift+0x3e>
 8012576:	4602      	mov	r2, r0
 8012578:	4b28      	ldr	r3, [pc, #160]	; (801261c <__lshift+0xd0>)
 801257a:	4829      	ldr	r0, [pc, #164]	; (8012620 <__lshift+0xd4>)
 801257c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012580:	f001 fac6 	bl	8013b10 <__assert_func>
 8012584:	3101      	adds	r1, #1
 8012586:	005b      	lsls	r3, r3, #1
 8012588:	e7ee      	b.n	8012568 <__lshift+0x1c>
 801258a:	2300      	movs	r3, #0
 801258c:	f100 0114 	add.w	r1, r0, #20
 8012590:	f100 0210 	add.w	r2, r0, #16
 8012594:	4618      	mov	r0, r3
 8012596:	4553      	cmp	r3, sl
 8012598:	db33      	blt.n	8012602 <__lshift+0xb6>
 801259a:	6920      	ldr	r0, [r4, #16]
 801259c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125a0:	f104 0314 	add.w	r3, r4, #20
 80125a4:	f019 091f 	ands.w	r9, r9, #31
 80125a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125b0:	d02b      	beq.n	801260a <__lshift+0xbe>
 80125b2:	f1c9 0e20 	rsb	lr, r9, #32
 80125b6:	468a      	mov	sl, r1
 80125b8:	2200      	movs	r2, #0
 80125ba:	6818      	ldr	r0, [r3, #0]
 80125bc:	fa00 f009 	lsl.w	r0, r0, r9
 80125c0:	4310      	orrs	r0, r2
 80125c2:	f84a 0b04 	str.w	r0, [sl], #4
 80125c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ca:	459c      	cmp	ip, r3
 80125cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80125d0:	d8f3      	bhi.n	80125ba <__lshift+0x6e>
 80125d2:	ebac 0304 	sub.w	r3, ip, r4
 80125d6:	3b15      	subs	r3, #21
 80125d8:	f023 0303 	bic.w	r3, r3, #3
 80125dc:	3304      	adds	r3, #4
 80125de:	f104 0015 	add.w	r0, r4, #21
 80125e2:	4584      	cmp	ip, r0
 80125e4:	bf38      	it	cc
 80125e6:	2304      	movcc	r3, #4
 80125e8:	50ca      	str	r2, [r1, r3]
 80125ea:	b10a      	cbz	r2, 80125f0 <__lshift+0xa4>
 80125ec:	f108 0602 	add.w	r6, r8, #2
 80125f0:	3e01      	subs	r6, #1
 80125f2:	4638      	mov	r0, r7
 80125f4:	612e      	str	r6, [r5, #16]
 80125f6:	4621      	mov	r1, r4
 80125f8:	f7ff fd8e 	bl	8012118 <_Bfree>
 80125fc:	4628      	mov	r0, r5
 80125fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012602:	f842 0f04 	str.w	r0, [r2, #4]!
 8012606:	3301      	adds	r3, #1
 8012608:	e7c5      	b.n	8012596 <__lshift+0x4a>
 801260a:	3904      	subs	r1, #4
 801260c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012610:	f841 2f04 	str.w	r2, [r1, #4]!
 8012614:	459c      	cmp	ip, r3
 8012616:	d8f9      	bhi.n	801260c <__lshift+0xc0>
 8012618:	e7ea      	b.n	80125f0 <__lshift+0xa4>
 801261a:	bf00      	nop
 801261c:	080149e9 	.word	0x080149e9
 8012620:	080149fa 	.word	0x080149fa

08012624 <__mcmp>:
 8012624:	b530      	push	{r4, r5, lr}
 8012626:	6902      	ldr	r2, [r0, #16]
 8012628:	690c      	ldr	r4, [r1, #16]
 801262a:	1b12      	subs	r2, r2, r4
 801262c:	d10e      	bne.n	801264c <__mcmp+0x28>
 801262e:	f100 0314 	add.w	r3, r0, #20
 8012632:	3114      	adds	r1, #20
 8012634:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012638:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801263c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012640:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012644:	42a5      	cmp	r5, r4
 8012646:	d003      	beq.n	8012650 <__mcmp+0x2c>
 8012648:	d305      	bcc.n	8012656 <__mcmp+0x32>
 801264a:	2201      	movs	r2, #1
 801264c:	4610      	mov	r0, r2
 801264e:	bd30      	pop	{r4, r5, pc}
 8012650:	4283      	cmp	r3, r0
 8012652:	d3f3      	bcc.n	801263c <__mcmp+0x18>
 8012654:	e7fa      	b.n	801264c <__mcmp+0x28>
 8012656:	f04f 32ff 	mov.w	r2, #4294967295
 801265a:	e7f7      	b.n	801264c <__mcmp+0x28>

0801265c <__mdiff>:
 801265c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012660:	460c      	mov	r4, r1
 8012662:	4606      	mov	r6, r0
 8012664:	4611      	mov	r1, r2
 8012666:	4620      	mov	r0, r4
 8012668:	4690      	mov	r8, r2
 801266a:	f7ff ffdb 	bl	8012624 <__mcmp>
 801266e:	1e05      	subs	r5, r0, #0
 8012670:	d110      	bne.n	8012694 <__mdiff+0x38>
 8012672:	4629      	mov	r1, r5
 8012674:	4630      	mov	r0, r6
 8012676:	f7ff fd0f 	bl	8012098 <_Balloc>
 801267a:	b930      	cbnz	r0, 801268a <__mdiff+0x2e>
 801267c:	4b3a      	ldr	r3, [pc, #232]	; (8012768 <__mdiff+0x10c>)
 801267e:	4602      	mov	r2, r0
 8012680:	f240 2137 	movw	r1, #567	; 0x237
 8012684:	4839      	ldr	r0, [pc, #228]	; (801276c <__mdiff+0x110>)
 8012686:	f001 fa43 	bl	8013b10 <__assert_func>
 801268a:	2301      	movs	r3, #1
 801268c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012694:	bfa4      	itt	ge
 8012696:	4643      	movge	r3, r8
 8012698:	46a0      	movge	r8, r4
 801269a:	4630      	mov	r0, r6
 801269c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126a0:	bfa6      	itte	ge
 80126a2:	461c      	movge	r4, r3
 80126a4:	2500      	movge	r5, #0
 80126a6:	2501      	movlt	r5, #1
 80126a8:	f7ff fcf6 	bl	8012098 <_Balloc>
 80126ac:	b920      	cbnz	r0, 80126b8 <__mdiff+0x5c>
 80126ae:	4b2e      	ldr	r3, [pc, #184]	; (8012768 <__mdiff+0x10c>)
 80126b0:	4602      	mov	r2, r0
 80126b2:	f240 2145 	movw	r1, #581	; 0x245
 80126b6:	e7e5      	b.n	8012684 <__mdiff+0x28>
 80126b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80126bc:	6926      	ldr	r6, [r4, #16]
 80126be:	60c5      	str	r5, [r0, #12]
 80126c0:	f104 0914 	add.w	r9, r4, #20
 80126c4:	f108 0514 	add.w	r5, r8, #20
 80126c8:	f100 0e14 	add.w	lr, r0, #20
 80126cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80126d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80126d4:	f108 0210 	add.w	r2, r8, #16
 80126d8:	46f2      	mov	sl, lr
 80126da:	2100      	movs	r1, #0
 80126dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80126e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126e4:	fa11 f88b 	uxtah	r8, r1, fp
 80126e8:	b299      	uxth	r1, r3
 80126ea:	0c1b      	lsrs	r3, r3, #16
 80126ec:	eba8 0801 	sub.w	r8, r8, r1
 80126f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80126f8:	fa1f f888 	uxth.w	r8, r8
 80126fc:	1419      	asrs	r1, r3, #16
 80126fe:	454e      	cmp	r6, r9
 8012700:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012704:	f84a 3b04 	str.w	r3, [sl], #4
 8012708:	d8e8      	bhi.n	80126dc <__mdiff+0x80>
 801270a:	1b33      	subs	r3, r6, r4
 801270c:	3b15      	subs	r3, #21
 801270e:	f023 0303 	bic.w	r3, r3, #3
 8012712:	3304      	adds	r3, #4
 8012714:	3415      	adds	r4, #21
 8012716:	42a6      	cmp	r6, r4
 8012718:	bf38      	it	cc
 801271a:	2304      	movcc	r3, #4
 801271c:	441d      	add	r5, r3
 801271e:	4473      	add	r3, lr
 8012720:	469e      	mov	lr, r3
 8012722:	462e      	mov	r6, r5
 8012724:	4566      	cmp	r6, ip
 8012726:	d30e      	bcc.n	8012746 <__mdiff+0xea>
 8012728:	f10c 0203 	add.w	r2, ip, #3
 801272c:	1b52      	subs	r2, r2, r5
 801272e:	f022 0203 	bic.w	r2, r2, #3
 8012732:	3d03      	subs	r5, #3
 8012734:	45ac      	cmp	ip, r5
 8012736:	bf38      	it	cc
 8012738:	2200      	movcc	r2, #0
 801273a:	4413      	add	r3, r2
 801273c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012740:	b17a      	cbz	r2, 8012762 <__mdiff+0x106>
 8012742:	6107      	str	r7, [r0, #16]
 8012744:	e7a4      	b.n	8012690 <__mdiff+0x34>
 8012746:	f856 8b04 	ldr.w	r8, [r6], #4
 801274a:	fa11 f288 	uxtah	r2, r1, r8
 801274e:	1414      	asrs	r4, r2, #16
 8012750:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012754:	b292      	uxth	r2, r2
 8012756:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801275a:	f84e 2b04 	str.w	r2, [lr], #4
 801275e:	1421      	asrs	r1, r4, #16
 8012760:	e7e0      	b.n	8012724 <__mdiff+0xc8>
 8012762:	3f01      	subs	r7, #1
 8012764:	e7ea      	b.n	801273c <__mdiff+0xe0>
 8012766:	bf00      	nop
 8012768:	080149e9 	.word	0x080149e9
 801276c:	080149fa 	.word	0x080149fa

08012770 <__ulp>:
 8012770:	b082      	sub	sp, #8
 8012772:	ed8d 0b00 	vstr	d0, [sp]
 8012776:	9a01      	ldr	r2, [sp, #4]
 8012778:	4b0f      	ldr	r3, [pc, #60]	; (80127b8 <__ulp+0x48>)
 801277a:	4013      	ands	r3, r2
 801277c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012780:	2b00      	cmp	r3, #0
 8012782:	dc08      	bgt.n	8012796 <__ulp+0x26>
 8012784:	425b      	negs	r3, r3
 8012786:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801278a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801278e:	da04      	bge.n	801279a <__ulp+0x2a>
 8012790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012794:	4113      	asrs	r3, r2
 8012796:	2200      	movs	r2, #0
 8012798:	e008      	b.n	80127ac <__ulp+0x3c>
 801279a:	f1a2 0314 	sub.w	r3, r2, #20
 801279e:	2b1e      	cmp	r3, #30
 80127a0:	bfda      	itte	le
 80127a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80127a6:	40da      	lsrle	r2, r3
 80127a8:	2201      	movgt	r2, #1
 80127aa:	2300      	movs	r3, #0
 80127ac:	4619      	mov	r1, r3
 80127ae:	4610      	mov	r0, r2
 80127b0:	ec41 0b10 	vmov	d0, r0, r1
 80127b4:	b002      	add	sp, #8
 80127b6:	4770      	bx	lr
 80127b8:	7ff00000 	.word	0x7ff00000

080127bc <__b2d>:
 80127bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c0:	6906      	ldr	r6, [r0, #16]
 80127c2:	f100 0814 	add.w	r8, r0, #20
 80127c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80127ca:	1f37      	subs	r7, r6, #4
 80127cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127d0:	4610      	mov	r0, r2
 80127d2:	f7ff fd53 	bl	801227c <__hi0bits>
 80127d6:	f1c0 0320 	rsb	r3, r0, #32
 80127da:	280a      	cmp	r0, #10
 80127dc:	600b      	str	r3, [r1, #0]
 80127de:	491b      	ldr	r1, [pc, #108]	; (801284c <__b2d+0x90>)
 80127e0:	dc15      	bgt.n	801280e <__b2d+0x52>
 80127e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80127e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80127ea:	45b8      	cmp	r8, r7
 80127ec:	ea43 0501 	orr.w	r5, r3, r1
 80127f0:	bf34      	ite	cc
 80127f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80127f6:	2300      	movcs	r3, #0
 80127f8:	3015      	adds	r0, #21
 80127fa:	fa02 f000 	lsl.w	r0, r2, r0
 80127fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8012802:	4303      	orrs	r3, r0
 8012804:	461c      	mov	r4, r3
 8012806:	ec45 4b10 	vmov	d0, r4, r5
 801280a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801280e:	45b8      	cmp	r8, r7
 8012810:	bf3a      	itte	cc
 8012812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012816:	f1a6 0708 	subcc.w	r7, r6, #8
 801281a:	2300      	movcs	r3, #0
 801281c:	380b      	subs	r0, #11
 801281e:	d012      	beq.n	8012846 <__b2d+0x8a>
 8012820:	f1c0 0120 	rsb	r1, r0, #32
 8012824:	fa23 f401 	lsr.w	r4, r3, r1
 8012828:	4082      	lsls	r2, r0
 801282a:	4322      	orrs	r2, r4
 801282c:	4547      	cmp	r7, r8
 801282e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012832:	bf8c      	ite	hi
 8012834:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012838:	2200      	movls	r2, #0
 801283a:	4083      	lsls	r3, r0
 801283c:	40ca      	lsrs	r2, r1
 801283e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012842:	4313      	orrs	r3, r2
 8012844:	e7de      	b.n	8012804 <__b2d+0x48>
 8012846:	ea42 0501 	orr.w	r5, r2, r1
 801284a:	e7db      	b.n	8012804 <__b2d+0x48>
 801284c:	3ff00000 	.word	0x3ff00000

08012850 <__d2b>:
 8012850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012854:	460f      	mov	r7, r1
 8012856:	2101      	movs	r1, #1
 8012858:	ec59 8b10 	vmov	r8, r9, d0
 801285c:	4616      	mov	r6, r2
 801285e:	f7ff fc1b 	bl	8012098 <_Balloc>
 8012862:	4604      	mov	r4, r0
 8012864:	b930      	cbnz	r0, 8012874 <__d2b+0x24>
 8012866:	4602      	mov	r2, r0
 8012868:	4b24      	ldr	r3, [pc, #144]	; (80128fc <__d2b+0xac>)
 801286a:	4825      	ldr	r0, [pc, #148]	; (8012900 <__d2b+0xb0>)
 801286c:	f240 310f 	movw	r1, #783	; 0x30f
 8012870:	f001 f94e 	bl	8013b10 <__assert_func>
 8012874:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801287c:	bb2d      	cbnz	r5, 80128ca <__d2b+0x7a>
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	f1b8 0300 	subs.w	r3, r8, #0
 8012884:	d026      	beq.n	80128d4 <__d2b+0x84>
 8012886:	4668      	mov	r0, sp
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	f7ff fd17 	bl	80122bc <__lo0bits>
 801288e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012892:	b1e8      	cbz	r0, 80128d0 <__d2b+0x80>
 8012894:	f1c0 0320 	rsb	r3, r0, #32
 8012898:	fa02 f303 	lsl.w	r3, r2, r3
 801289c:	430b      	orrs	r3, r1
 801289e:	40c2      	lsrs	r2, r0
 80128a0:	6163      	str	r3, [r4, #20]
 80128a2:	9201      	str	r2, [sp, #4]
 80128a4:	9b01      	ldr	r3, [sp, #4]
 80128a6:	61a3      	str	r3, [r4, #24]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	bf14      	ite	ne
 80128ac:	2202      	movne	r2, #2
 80128ae:	2201      	moveq	r2, #1
 80128b0:	6122      	str	r2, [r4, #16]
 80128b2:	b1bd      	cbz	r5, 80128e4 <__d2b+0x94>
 80128b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128b8:	4405      	add	r5, r0
 80128ba:	603d      	str	r5, [r7, #0]
 80128bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128c0:	6030      	str	r0, [r6, #0]
 80128c2:	4620      	mov	r0, r4
 80128c4:	b003      	add	sp, #12
 80128c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128ce:	e7d6      	b.n	801287e <__d2b+0x2e>
 80128d0:	6161      	str	r1, [r4, #20]
 80128d2:	e7e7      	b.n	80128a4 <__d2b+0x54>
 80128d4:	a801      	add	r0, sp, #4
 80128d6:	f7ff fcf1 	bl	80122bc <__lo0bits>
 80128da:	9b01      	ldr	r3, [sp, #4]
 80128dc:	6163      	str	r3, [r4, #20]
 80128de:	3020      	adds	r0, #32
 80128e0:	2201      	movs	r2, #1
 80128e2:	e7e5      	b.n	80128b0 <__d2b+0x60>
 80128e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128ec:	6038      	str	r0, [r7, #0]
 80128ee:	6918      	ldr	r0, [r3, #16]
 80128f0:	f7ff fcc4 	bl	801227c <__hi0bits>
 80128f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128f8:	e7e2      	b.n	80128c0 <__d2b+0x70>
 80128fa:	bf00      	nop
 80128fc:	080149e9 	.word	0x080149e9
 8012900:	080149fa 	.word	0x080149fa

08012904 <__ratio>:
 8012904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012908:	4688      	mov	r8, r1
 801290a:	4669      	mov	r1, sp
 801290c:	4681      	mov	r9, r0
 801290e:	f7ff ff55 	bl	80127bc <__b2d>
 8012912:	a901      	add	r1, sp, #4
 8012914:	4640      	mov	r0, r8
 8012916:	ec55 4b10 	vmov	r4, r5, d0
 801291a:	ee10 aa10 	vmov	sl, s0
 801291e:	f7ff ff4d 	bl	80127bc <__b2d>
 8012922:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012926:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801292a:	1ad2      	subs	r2, r2, r3
 801292c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012930:	1a5b      	subs	r3, r3, r1
 8012932:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012936:	ec57 6b10 	vmov	r6, r7, d0
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfd6      	itet	le
 801293e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012942:	462a      	movgt	r2, r5
 8012944:	463a      	movle	r2, r7
 8012946:	46ab      	mov	fp, r5
 8012948:	bfd6      	itet	le
 801294a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801294e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012952:	ee00 3a90 	vmovle	s1, r3
 8012956:	ec4b ab17 	vmov	d7, sl, fp
 801295a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801295e:	b003      	add	sp, #12
 8012960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012964 <__copybits>:
 8012964:	3901      	subs	r1, #1
 8012966:	b570      	push	{r4, r5, r6, lr}
 8012968:	1149      	asrs	r1, r1, #5
 801296a:	6914      	ldr	r4, [r2, #16]
 801296c:	3101      	adds	r1, #1
 801296e:	f102 0314 	add.w	r3, r2, #20
 8012972:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012976:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801297a:	1f05      	subs	r5, r0, #4
 801297c:	42a3      	cmp	r3, r4
 801297e:	d30c      	bcc.n	801299a <__copybits+0x36>
 8012980:	1aa3      	subs	r3, r4, r2
 8012982:	3b11      	subs	r3, #17
 8012984:	f023 0303 	bic.w	r3, r3, #3
 8012988:	3211      	adds	r2, #17
 801298a:	42a2      	cmp	r2, r4
 801298c:	bf88      	it	hi
 801298e:	2300      	movhi	r3, #0
 8012990:	4418      	add	r0, r3
 8012992:	2300      	movs	r3, #0
 8012994:	4288      	cmp	r0, r1
 8012996:	d305      	bcc.n	80129a4 <__copybits+0x40>
 8012998:	bd70      	pop	{r4, r5, r6, pc}
 801299a:	f853 6b04 	ldr.w	r6, [r3], #4
 801299e:	f845 6f04 	str.w	r6, [r5, #4]!
 80129a2:	e7eb      	b.n	801297c <__copybits+0x18>
 80129a4:	f840 3b04 	str.w	r3, [r0], #4
 80129a8:	e7f4      	b.n	8012994 <__copybits+0x30>

080129aa <__any_on>:
 80129aa:	f100 0214 	add.w	r2, r0, #20
 80129ae:	6900      	ldr	r0, [r0, #16]
 80129b0:	114b      	asrs	r3, r1, #5
 80129b2:	4298      	cmp	r0, r3
 80129b4:	b510      	push	{r4, lr}
 80129b6:	db11      	blt.n	80129dc <__any_on+0x32>
 80129b8:	dd0a      	ble.n	80129d0 <__any_on+0x26>
 80129ba:	f011 011f 	ands.w	r1, r1, #31
 80129be:	d007      	beq.n	80129d0 <__any_on+0x26>
 80129c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129c4:	fa24 f001 	lsr.w	r0, r4, r1
 80129c8:	fa00 f101 	lsl.w	r1, r0, r1
 80129cc:	428c      	cmp	r4, r1
 80129ce:	d10b      	bne.n	80129e8 <__any_on+0x3e>
 80129d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d803      	bhi.n	80129e0 <__any_on+0x36>
 80129d8:	2000      	movs	r0, #0
 80129da:	bd10      	pop	{r4, pc}
 80129dc:	4603      	mov	r3, r0
 80129de:	e7f7      	b.n	80129d0 <__any_on+0x26>
 80129e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129e4:	2900      	cmp	r1, #0
 80129e6:	d0f5      	beq.n	80129d4 <__any_on+0x2a>
 80129e8:	2001      	movs	r0, #1
 80129ea:	e7f6      	b.n	80129da <__any_on+0x30>

080129ec <sulp>:
 80129ec:	b570      	push	{r4, r5, r6, lr}
 80129ee:	4604      	mov	r4, r0
 80129f0:	460d      	mov	r5, r1
 80129f2:	4616      	mov	r6, r2
 80129f4:	ec45 4b10 	vmov	d0, r4, r5
 80129f8:	f7ff feba 	bl	8012770 <__ulp>
 80129fc:	b17e      	cbz	r6, 8012a1e <sulp+0x32>
 80129fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	dd09      	ble.n	8012a1e <sulp+0x32>
 8012a0a:	051b      	lsls	r3, r3, #20
 8012a0c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012a10:	2000      	movs	r0, #0
 8012a12:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012a16:	ec41 0b17 	vmov	d7, r0, r1
 8012a1a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012a1e:	bd70      	pop	{r4, r5, r6, pc}

08012a20 <_strtod_l>:
 8012a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a24:	ed2d 8b0e 	vpush	{d8-d14}
 8012a28:	b097      	sub	sp, #92	; 0x5c
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	920d      	str	r2, [sp, #52]	; 0x34
 8012a2e:	2200      	movs	r2, #0
 8012a30:	9212      	str	r2, [sp, #72]	; 0x48
 8012a32:	468a      	mov	sl, r1
 8012a34:	f04f 0800 	mov.w	r8, #0
 8012a38:	f04f 0900 	mov.w	r9, #0
 8012a3c:	460a      	mov	r2, r1
 8012a3e:	9211      	str	r2, [sp, #68]	; 0x44
 8012a40:	7811      	ldrb	r1, [r2, #0]
 8012a42:	292b      	cmp	r1, #43	; 0x2b
 8012a44:	d04c      	beq.n	8012ae0 <_strtod_l+0xc0>
 8012a46:	d839      	bhi.n	8012abc <_strtod_l+0x9c>
 8012a48:	290d      	cmp	r1, #13
 8012a4a:	d833      	bhi.n	8012ab4 <_strtod_l+0x94>
 8012a4c:	2908      	cmp	r1, #8
 8012a4e:	d833      	bhi.n	8012ab8 <_strtod_l+0x98>
 8012a50:	2900      	cmp	r1, #0
 8012a52:	d03c      	beq.n	8012ace <_strtod_l+0xae>
 8012a54:	2200      	movs	r2, #0
 8012a56:	9208      	str	r2, [sp, #32]
 8012a58:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012a5a:	7832      	ldrb	r2, [r6, #0]
 8012a5c:	2a30      	cmp	r2, #48	; 0x30
 8012a5e:	f040 80b8 	bne.w	8012bd2 <_strtod_l+0x1b2>
 8012a62:	7872      	ldrb	r2, [r6, #1]
 8012a64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012a68:	2a58      	cmp	r2, #88	; 0x58
 8012a6a:	d170      	bne.n	8012b4e <_strtod_l+0x12e>
 8012a6c:	9302      	str	r3, [sp, #8]
 8012a6e:	9b08      	ldr	r3, [sp, #32]
 8012a70:	9301      	str	r3, [sp, #4]
 8012a72:	ab12      	add	r3, sp, #72	; 0x48
 8012a74:	9300      	str	r3, [sp, #0]
 8012a76:	4a91      	ldr	r2, [pc, #580]	; (8012cbc <_strtod_l+0x29c>)
 8012a78:	ab13      	add	r3, sp, #76	; 0x4c
 8012a7a:	a911      	add	r1, sp, #68	; 0x44
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f001 f8e3 	bl	8013c48 <__gethex>
 8012a82:	f010 070f 	ands.w	r7, r0, #15
 8012a86:	4605      	mov	r5, r0
 8012a88:	d005      	beq.n	8012a96 <_strtod_l+0x76>
 8012a8a:	2f06      	cmp	r7, #6
 8012a8c:	d12a      	bne.n	8012ae4 <_strtod_l+0xc4>
 8012a8e:	3601      	adds	r6, #1
 8012a90:	2300      	movs	r3, #0
 8012a92:	9611      	str	r6, [sp, #68]	; 0x44
 8012a94:	9308      	str	r3, [sp, #32]
 8012a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f040 8555 	bne.w	8013548 <_strtod_l+0xb28>
 8012a9e:	9b08      	ldr	r3, [sp, #32]
 8012aa0:	ec49 8b10 	vmov	d0, r8, r9
 8012aa4:	b1cb      	cbz	r3, 8012ada <_strtod_l+0xba>
 8012aa6:	eeb1 0b40 	vneg.f64	d0, d0
 8012aaa:	b017      	add	sp, #92	; 0x5c
 8012aac:	ecbd 8b0e 	vpop	{d8-d14}
 8012ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab4:	2920      	cmp	r1, #32
 8012ab6:	d1cd      	bne.n	8012a54 <_strtod_l+0x34>
 8012ab8:	3201      	adds	r2, #1
 8012aba:	e7c0      	b.n	8012a3e <_strtod_l+0x1e>
 8012abc:	292d      	cmp	r1, #45	; 0x2d
 8012abe:	d1c9      	bne.n	8012a54 <_strtod_l+0x34>
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	9108      	str	r1, [sp, #32]
 8012ac4:	1c51      	adds	r1, r2, #1
 8012ac6:	9111      	str	r1, [sp, #68]	; 0x44
 8012ac8:	7852      	ldrb	r2, [r2, #1]
 8012aca:	2a00      	cmp	r2, #0
 8012acc:	d1c4      	bne.n	8012a58 <_strtod_l+0x38>
 8012ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ad0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	f040 8535 	bne.w	8013544 <_strtod_l+0xb24>
 8012ada:	ec49 8b10 	vmov	d0, r8, r9
 8012ade:	e7e4      	b.n	8012aaa <_strtod_l+0x8a>
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	e7ee      	b.n	8012ac2 <_strtod_l+0xa2>
 8012ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ae6:	b13a      	cbz	r2, 8012af8 <_strtod_l+0xd8>
 8012ae8:	2135      	movs	r1, #53	; 0x35
 8012aea:	a814      	add	r0, sp, #80	; 0x50
 8012aec:	f7ff ff3a 	bl	8012964 <__copybits>
 8012af0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012af2:	4620      	mov	r0, r4
 8012af4:	f7ff fb10 	bl	8012118 <_Bfree>
 8012af8:	1e7b      	subs	r3, r7, #1
 8012afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012afc:	2b04      	cmp	r3, #4
 8012afe:	d806      	bhi.n	8012b0e <_strtod_l+0xee>
 8012b00:	e8df f003 	tbb	[pc, r3]
 8012b04:	201d0314 	.word	0x201d0314
 8012b08:	14          	.byte	0x14
 8012b09:	00          	.byte	0x00
 8012b0a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8012b0e:	05eb      	lsls	r3, r5, #23
 8012b10:	bf48      	it	mi
 8012b12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8012b16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012b1a:	0d1b      	lsrs	r3, r3, #20
 8012b1c:	051b      	lsls	r3, r3, #20
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1b9      	bne.n	8012a96 <_strtod_l+0x76>
 8012b22:	f7fe fc37 	bl	8011394 <__errno>
 8012b26:	2322      	movs	r3, #34	; 0x22
 8012b28:	6003      	str	r3, [r0, #0]
 8012b2a:	e7b4      	b.n	8012a96 <_strtod_l+0x76>
 8012b2c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8012b30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012b34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012b38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012b3c:	e7e7      	b.n	8012b0e <_strtod_l+0xee>
 8012b3e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8012cc4 <_strtod_l+0x2a4>
 8012b42:	e7e4      	b.n	8012b0e <_strtod_l+0xee>
 8012b44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012b48:	f04f 38ff 	mov.w	r8, #4294967295
 8012b4c:	e7df      	b.n	8012b0e <_strtod_l+0xee>
 8012b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b50:	1c5a      	adds	r2, r3, #1
 8012b52:	9211      	str	r2, [sp, #68]	; 0x44
 8012b54:	785b      	ldrb	r3, [r3, #1]
 8012b56:	2b30      	cmp	r3, #48	; 0x30
 8012b58:	d0f9      	beq.n	8012b4e <_strtod_l+0x12e>
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d09b      	beq.n	8012a96 <_strtod_l+0x76>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	9306      	str	r3, [sp, #24]
 8012b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b64:	9309      	str	r3, [sp, #36]	; 0x24
 8012b66:	2300      	movs	r3, #0
 8012b68:	9305      	str	r3, [sp, #20]
 8012b6a:	9307      	str	r3, [sp, #28]
 8012b6c:	461e      	mov	r6, r3
 8012b6e:	220a      	movs	r2, #10
 8012b70:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012b72:	7805      	ldrb	r5, [r0, #0]
 8012b74:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8012b78:	b2d9      	uxtb	r1, r3
 8012b7a:	2909      	cmp	r1, #9
 8012b7c:	d92b      	bls.n	8012bd6 <_strtod_l+0x1b6>
 8012b7e:	4950      	ldr	r1, [pc, #320]	; (8012cc0 <_strtod_l+0x2a0>)
 8012b80:	2201      	movs	r2, #1
 8012b82:	f000 ffa9 	bl	8013ad8 <strncmp>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d035      	beq.n	8012bf6 <_strtod_l+0x1d6>
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	462a      	mov	r2, r5
 8012b8e:	4633      	mov	r3, r6
 8012b90:	4683      	mov	fp, r0
 8012b92:	4601      	mov	r1, r0
 8012b94:	2a65      	cmp	r2, #101	; 0x65
 8012b96:	d001      	beq.n	8012b9c <_strtod_l+0x17c>
 8012b98:	2a45      	cmp	r2, #69	; 0x45
 8012b9a:	d118      	bne.n	8012bce <_strtod_l+0x1ae>
 8012b9c:	b91b      	cbnz	r3, 8012ba6 <_strtod_l+0x186>
 8012b9e:	9b06      	ldr	r3, [sp, #24]
 8012ba0:	4303      	orrs	r3, r0
 8012ba2:	d094      	beq.n	8012ace <_strtod_l+0xae>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8012baa:	f10a 0201 	add.w	r2, sl, #1
 8012bae:	9211      	str	r2, [sp, #68]	; 0x44
 8012bb0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012bb4:	2a2b      	cmp	r2, #43	; 0x2b
 8012bb6:	d075      	beq.n	8012ca4 <_strtod_l+0x284>
 8012bb8:	2a2d      	cmp	r2, #45	; 0x2d
 8012bba:	d07b      	beq.n	8012cb4 <_strtod_l+0x294>
 8012bbc:	f04f 0e00 	mov.w	lr, #0
 8012bc0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8012bc4:	2d09      	cmp	r5, #9
 8012bc6:	f240 8083 	bls.w	8012cd0 <_strtod_l+0x2b0>
 8012bca:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8012bce:	2500      	movs	r5, #0
 8012bd0:	e09e      	b.n	8012d10 <_strtod_l+0x2f0>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e7c4      	b.n	8012b60 <_strtod_l+0x140>
 8012bd6:	2e08      	cmp	r6, #8
 8012bd8:	bfd5      	itete	le
 8012bda:	9907      	ldrle	r1, [sp, #28]
 8012bdc:	9905      	ldrgt	r1, [sp, #20]
 8012bde:	fb02 3301 	mlale	r3, r2, r1, r3
 8012be2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012be6:	f100 0001 	add.w	r0, r0, #1
 8012bea:	bfd4      	ite	le
 8012bec:	9307      	strle	r3, [sp, #28]
 8012bee:	9305      	strgt	r3, [sp, #20]
 8012bf0:	3601      	adds	r6, #1
 8012bf2:	9011      	str	r0, [sp, #68]	; 0x44
 8012bf4:	e7bc      	b.n	8012b70 <_strtod_l+0x150>
 8012bf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012bf8:	1c5a      	adds	r2, r3, #1
 8012bfa:	9211      	str	r2, [sp, #68]	; 0x44
 8012bfc:	785a      	ldrb	r2, [r3, #1]
 8012bfe:	b3ae      	cbz	r6, 8012c6c <_strtod_l+0x24c>
 8012c00:	4683      	mov	fp, r0
 8012c02:	4633      	mov	r3, r6
 8012c04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012c08:	2909      	cmp	r1, #9
 8012c0a:	d912      	bls.n	8012c32 <_strtod_l+0x212>
 8012c0c:	2101      	movs	r1, #1
 8012c0e:	e7c1      	b.n	8012b94 <_strtod_l+0x174>
 8012c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c12:	1c5a      	adds	r2, r3, #1
 8012c14:	9211      	str	r2, [sp, #68]	; 0x44
 8012c16:	785a      	ldrb	r2, [r3, #1]
 8012c18:	3001      	adds	r0, #1
 8012c1a:	2a30      	cmp	r2, #48	; 0x30
 8012c1c:	d0f8      	beq.n	8012c10 <_strtod_l+0x1f0>
 8012c1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012c22:	2b08      	cmp	r3, #8
 8012c24:	f200 8495 	bhi.w	8013552 <_strtod_l+0xb32>
 8012c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c2c:	4683      	mov	fp, r0
 8012c2e:	2000      	movs	r0, #0
 8012c30:	4603      	mov	r3, r0
 8012c32:	3a30      	subs	r2, #48	; 0x30
 8012c34:	f100 0101 	add.w	r1, r0, #1
 8012c38:	d012      	beq.n	8012c60 <_strtod_l+0x240>
 8012c3a:	448b      	add	fp, r1
 8012c3c:	eb00 0c03 	add.w	ip, r0, r3
 8012c40:	4619      	mov	r1, r3
 8012c42:	250a      	movs	r5, #10
 8012c44:	4561      	cmp	r1, ip
 8012c46:	d113      	bne.n	8012c70 <_strtod_l+0x250>
 8012c48:	1819      	adds	r1, r3, r0
 8012c4a:	2908      	cmp	r1, #8
 8012c4c:	f103 0301 	add.w	r3, r3, #1
 8012c50:	4403      	add	r3, r0
 8012c52:	dc1b      	bgt.n	8012c8c <_strtod_l+0x26c>
 8012c54:	9807      	ldr	r0, [sp, #28]
 8012c56:	210a      	movs	r1, #10
 8012c58:	fb01 2200 	mla	r2, r1, r0, r2
 8012c5c:	9207      	str	r2, [sp, #28]
 8012c5e:	2100      	movs	r1, #0
 8012c60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c62:	1c50      	adds	r0, r2, #1
 8012c64:	9011      	str	r0, [sp, #68]	; 0x44
 8012c66:	7852      	ldrb	r2, [r2, #1]
 8012c68:	4608      	mov	r0, r1
 8012c6a:	e7cb      	b.n	8012c04 <_strtod_l+0x1e4>
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	e7d4      	b.n	8012c1a <_strtod_l+0x1fa>
 8012c70:	2908      	cmp	r1, #8
 8012c72:	f101 0101 	add.w	r1, r1, #1
 8012c76:	dc03      	bgt.n	8012c80 <_strtod_l+0x260>
 8012c78:	9f07      	ldr	r7, [sp, #28]
 8012c7a:	436f      	muls	r7, r5
 8012c7c:	9707      	str	r7, [sp, #28]
 8012c7e:	e7e1      	b.n	8012c44 <_strtod_l+0x224>
 8012c80:	2910      	cmp	r1, #16
 8012c82:	bfde      	ittt	le
 8012c84:	9f05      	ldrle	r7, [sp, #20]
 8012c86:	436f      	mulle	r7, r5
 8012c88:	9705      	strle	r7, [sp, #20]
 8012c8a:	e7db      	b.n	8012c44 <_strtod_l+0x224>
 8012c8c:	2b10      	cmp	r3, #16
 8012c8e:	bfdf      	itttt	le
 8012c90:	9805      	ldrle	r0, [sp, #20]
 8012c92:	210a      	movle	r1, #10
 8012c94:	fb01 2200 	mlale	r2, r1, r0, r2
 8012c98:	9205      	strle	r2, [sp, #20]
 8012c9a:	e7e0      	b.n	8012c5e <_strtod_l+0x23e>
 8012c9c:	f04f 0b00 	mov.w	fp, #0
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	e77c      	b.n	8012b9e <_strtod_l+0x17e>
 8012ca4:	f04f 0e00 	mov.w	lr, #0
 8012ca8:	f10a 0202 	add.w	r2, sl, #2
 8012cac:	9211      	str	r2, [sp, #68]	; 0x44
 8012cae:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8012cb2:	e785      	b.n	8012bc0 <_strtod_l+0x1a0>
 8012cb4:	f04f 0e01 	mov.w	lr, #1
 8012cb8:	e7f6      	b.n	8012ca8 <_strtod_l+0x288>
 8012cba:	bf00      	nop
 8012cbc:	08014b58 	.word	0x08014b58
 8012cc0:	08014b54 	.word	0x08014b54
 8012cc4:	7ff00000 	.word	0x7ff00000
 8012cc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012cca:	1c55      	adds	r5, r2, #1
 8012ccc:	9511      	str	r5, [sp, #68]	; 0x44
 8012cce:	7852      	ldrb	r2, [r2, #1]
 8012cd0:	2a30      	cmp	r2, #48	; 0x30
 8012cd2:	d0f9      	beq.n	8012cc8 <_strtod_l+0x2a8>
 8012cd4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8012cd8:	2d08      	cmp	r5, #8
 8012cda:	f63f af78 	bhi.w	8012bce <_strtod_l+0x1ae>
 8012cde:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8012ce2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012ce4:	920a      	str	r2, [sp, #40]	; 0x28
 8012ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012ce8:	1c55      	adds	r5, r2, #1
 8012cea:	9511      	str	r5, [sp, #68]	; 0x44
 8012cec:	7852      	ldrb	r2, [r2, #1]
 8012cee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8012cf2:	2f09      	cmp	r7, #9
 8012cf4:	d937      	bls.n	8012d66 <_strtod_l+0x346>
 8012cf6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012cf8:	1bed      	subs	r5, r5, r7
 8012cfa:	2d08      	cmp	r5, #8
 8012cfc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012d00:	dc02      	bgt.n	8012d08 <_strtod_l+0x2e8>
 8012d02:	4565      	cmp	r5, ip
 8012d04:	bfa8      	it	ge
 8012d06:	4665      	movge	r5, ip
 8012d08:	f1be 0f00 	cmp.w	lr, #0
 8012d0c:	d000      	beq.n	8012d10 <_strtod_l+0x2f0>
 8012d0e:	426d      	negs	r5, r5
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d14d      	bne.n	8012db0 <_strtod_l+0x390>
 8012d14:	9b06      	ldr	r3, [sp, #24]
 8012d16:	4303      	orrs	r3, r0
 8012d18:	f47f aebd 	bne.w	8012a96 <_strtod_l+0x76>
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	f47f aed6 	bne.w	8012ace <_strtod_l+0xae>
 8012d22:	2a69      	cmp	r2, #105	; 0x69
 8012d24:	d027      	beq.n	8012d76 <_strtod_l+0x356>
 8012d26:	dc24      	bgt.n	8012d72 <_strtod_l+0x352>
 8012d28:	2a49      	cmp	r2, #73	; 0x49
 8012d2a:	d024      	beq.n	8012d76 <_strtod_l+0x356>
 8012d2c:	2a4e      	cmp	r2, #78	; 0x4e
 8012d2e:	f47f aece 	bne.w	8012ace <_strtod_l+0xae>
 8012d32:	4995      	ldr	r1, [pc, #596]	; (8012f88 <_strtod_l+0x568>)
 8012d34:	a811      	add	r0, sp, #68	; 0x44
 8012d36:	f001 f9c7 	bl	80140c8 <__match>
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	f43f aec7 	beq.w	8012ace <_strtod_l+0xae>
 8012d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2b28      	cmp	r3, #40	; 0x28
 8012d46:	d12d      	bne.n	8012da4 <_strtod_l+0x384>
 8012d48:	4990      	ldr	r1, [pc, #576]	; (8012f8c <_strtod_l+0x56c>)
 8012d4a:	aa14      	add	r2, sp, #80	; 0x50
 8012d4c:	a811      	add	r0, sp, #68	; 0x44
 8012d4e:	f001 f9cf 	bl	80140f0 <__hexnan>
 8012d52:	2805      	cmp	r0, #5
 8012d54:	d126      	bne.n	8012da4 <_strtod_l+0x384>
 8012d56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d58:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012d5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012d60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012d64:	e697      	b.n	8012a96 <_strtod_l+0x76>
 8012d66:	250a      	movs	r5, #10
 8012d68:	fb05 2c0c 	mla	ip, r5, ip, r2
 8012d6c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8012d70:	e7b9      	b.n	8012ce6 <_strtod_l+0x2c6>
 8012d72:	2a6e      	cmp	r2, #110	; 0x6e
 8012d74:	e7db      	b.n	8012d2e <_strtod_l+0x30e>
 8012d76:	4986      	ldr	r1, [pc, #536]	; (8012f90 <_strtod_l+0x570>)
 8012d78:	a811      	add	r0, sp, #68	; 0x44
 8012d7a:	f001 f9a5 	bl	80140c8 <__match>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	f43f aea5 	beq.w	8012ace <_strtod_l+0xae>
 8012d84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d86:	4983      	ldr	r1, [pc, #524]	; (8012f94 <_strtod_l+0x574>)
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	a811      	add	r0, sp, #68	; 0x44
 8012d8c:	9311      	str	r3, [sp, #68]	; 0x44
 8012d8e:	f001 f99b 	bl	80140c8 <__match>
 8012d92:	b910      	cbnz	r0, 8012d9a <_strtod_l+0x37a>
 8012d94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d96:	3301      	adds	r3, #1
 8012d98:	9311      	str	r3, [sp, #68]	; 0x44
 8012d9a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8012fa8 <_strtod_l+0x588>
 8012d9e:	f04f 0800 	mov.w	r8, #0
 8012da2:	e678      	b.n	8012a96 <_strtod_l+0x76>
 8012da4:	487c      	ldr	r0, [pc, #496]	; (8012f98 <_strtod_l+0x578>)
 8012da6:	f000 feab 	bl	8013b00 <nan>
 8012daa:	ec59 8b10 	vmov	r8, r9, d0
 8012dae:	e672      	b.n	8012a96 <_strtod_l+0x76>
 8012db0:	eddd 7a07 	vldr	s15, [sp, #28]
 8012db4:	eba5 020b 	sub.w	r2, r5, fp
 8012db8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012dbc:	2e00      	cmp	r6, #0
 8012dbe:	bf08      	it	eq
 8012dc0:	461e      	moveq	r6, r3
 8012dc2:	2b10      	cmp	r3, #16
 8012dc4:	9206      	str	r2, [sp, #24]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	bfa8      	it	ge
 8012dca:	2210      	movge	r2, #16
 8012dcc:	2b09      	cmp	r3, #9
 8012dce:	ec59 8b17 	vmov	r8, r9, d7
 8012dd2:	dd0c      	ble.n	8012dee <_strtod_l+0x3ce>
 8012dd4:	4971      	ldr	r1, [pc, #452]	; (8012f9c <_strtod_l+0x57c>)
 8012dd6:	eddd 6a05 	vldr	s13, [sp, #20]
 8012dda:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012dde:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8012de2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8012de6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012dea:	ec59 8b16 	vmov	r8, r9, d6
 8012dee:	2b0f      	cmp	r3, #15
 8012df0:	dc37      	bgt.n	8012e62 <_strtod_l+0x442>
 8012df2:	9906      	ldr	r1, [sp, #24]
 8012df4:	2900      	cmp	r1, #0
 8012df6:	f43f ae4e 	beq.w	8012a96 <_strtod_l+0x76>
 8012dfa:	dd23      	ble.n	8012e44 <_strtod_l+0x424>
 8012dfc:	2916      	cmp	r1, #22
 8012dfe:	dc0b      	bgt.n	8012e18 <_strtod_l+0x3f8>
 8012e00:	4b66      	ldr	r3, [pc, #408]	; (8012f9c <_strtod_l+0x57c>)
 8012e02:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012e06:	ed93 7b00 	vldr	d7, [r3]
 8012e0a:	ec49 8b16 	vmov	d6, r8, r9
 8012e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e12:	ec59 8b17 	vmov	r8, r9, d7
 8012e16:	e63e      	b.n	8012a96 <_strtod_l+0x76>
 8012e18:	9806      	ldr	r0, [sp, #24]
 8012e1a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8012e1e:	4281      	cmp	r1, r0
 8012e20:	db1f      	blt.n	8012e62 <_strtod_l+0x442>
 8012e22:	4a5e      	ldr	r2, [pc, #376]	; (8012f9c <_strtod_l+0x57c>)
 8012e24:	f1c3 030f 	rsb	r3, r3, #15
 8012e28:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012e2c:	ed91 7b00 	vldr	d7, [r1]
 8012e30:	ec49 8b16 	vmov	d6, r8, r9
 8012e34:	1ac3      	subs	r3, r0, r3
 8012e36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012e3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e3e:	ed92 6b00 	vldr	d6, [r2]
 8012e42:	e7e4      	b.n	8012e0e <_strtod_l+0x3ee>
 8012e44:	9906      	ldr	r1, [sp, #24]
 8012e46:	3116      	adds	r1, #22
 8012e48:	db0b      	blt.n	8012e62 <_strtod_l+0x442>
 8012e4a:	4b54      	ldr	r3, [pc, #336]	; (8012f9c <_strtod_l+0x57c>)
 8012e4c:	ebab 0505 	sub.w	r5, fp, r5
 8012e50:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012e54:	ed95 7b00 	vldr	d7, [r5]
 8012e58:	ec49 8b16 	vmov	d6, r8, r9
 8012e5c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012e60:	e7d7      	b.n	8012e12 <_strtod_l+0x3f2>
 8012e62:	9906      	ldr	r1, [sp, #24]
 8012e64:	1a9a      	subs	r2, r3, r2
 8012e66:	440a      	add	r2, r1
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	dd6e      	ble.n	8012f4a <_strtod_l+0x52a>
 8012e6c:	f012 000f 	ands.w	r0, r2, #15
 8012e70:	d00a      	beq.n	8012e88 <_strtod_l+0x468>
 8012e72:	494a      	ldr	r1, [pc, #296]	; (8012f9c <_strtod_l+0x57c>)
 8012e74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012e78:	ed91 7b00 	vldr	d7, [r1]
 8012e7c:	ec49 8b16 	vmov	d6, r8, r9
 8012e80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e84:	ec59 8b17 	vmov	r8, r9, d7
 8012e88:	f032 020f 	bics.w	r2, r2, #15
 8012e8c:	d04e      	beq.n	8012f2c <_strtod_l+0x50c>
 8012e8e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8012e92:	dd22      	ble.n	8012eda <_strtod_l+0x4ba>
 8012e94:	2500      	movs	r5, #0
 8012e96:	462e      	mov	r6, r5
 8012e98:	9507      	str	r5, [sp, #28]
 8012e9a:	462f      	mov	r7, r5
 8012e9c:	2322      	movs	r3, #34	; 0x22
 8012e9e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012fa8 <_strtod_l+0x588>
 8012ea2:	6023      	str	r3, [r4, #0]
 8012ea4:	f04f 0800 	mov.w	r8, #0
 8012ea8:	9b07      	ldr	r3, [sp, #28]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	f43f adf3 	beq.w	8012a96 <_strtod_l+0x76>
 8012eb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	f7ff f930 	bl	8012118 <_Bfree>
 8012eb8:	4639      	mov	r1, r7
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f7ff f92c 	bl	8012118 <_Bfree>
 8012ec0:	4631      	mov	r1, r6
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	f7ff f928 	bl	8012118 <_Bfree>
 8012ec8:	9907      	ldr	r1, [sp, #28]
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f7ff f924 	bl	8012118 <_Bfree>
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f7ff f920 	bl	8012118 <_Bfree>
 8012ed8:	e5dd      	b.n	8012a96 <_strtod_l+0x76>
 8012eda:	2000      	movs	r0, #0
 8012edc:	ec49 8b17 	vmov	d7, r8, r9
 8012ee0:	4f2f      	ldr	r7, [pc, #188]	; (8012fa0 <_strtod_l+0x580>)
 8012ee2:	1112      	asrs	r2, r2, #4
 8012ee4:	4601      	mov	r1, r0
 8012ee6:	2a01      	cmp	r2, #1
 8012ee8:	dc23      	bgt.n	8012f32 <_strtod_l+0x512>
 8012eea:	b108      	cbz	r0, 8012ef0 <_strtod_l+0x4d0>
 8012eec:	ec59 8b17 	vmov	r8, r9, d7
 8012ef0:	4a2b      	ldr	r2, [pc, #172]	; (8012fa0 <_strtod_l+0x580>)
 8012ef2:	482c      	ldr	r0, [pc, #176]	; (8012fa4 <_strtod_l+0x584>)
 8012ef4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012ef8:	ed92 7b00 	vldr	d7, [r2]
 8012efc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012f00:	ec49 8b16 	vmov	d6, r8, r9
 8012f04:	4a28      	ldr	r2, [pc, #160]	; (8012fa8 <_strtod_l+0x588>)
 8012f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f0a:	ee17 1a90 	vmov	r1, s15
 8012f0e:	400a      	ands	r2, r1
 8012f10:	4282      	cmp	r2, r0
 8012f12:	ec59 8b17 	vmov	r8, r9, d7
 8012f16:	d8bd      	bhi.n	8012e94 <_strtod_l+0x474>
 8012f18:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012f1c:	4282      	cmp	r2, r0
 8012f1e:	bf86      	itte	hi
 8012f20:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8012fac <_strtod_l+0x58c>
 8012f24:	f04f 38ff 	movhi.w	r8, #4294967295
 8012f28:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	9205      	str	r2, [sp, #20]
 8012f30:	e076      	b.n	8013020 <_strtod_l+0x600>
 8012f32:	f012 0f01 	tst.w	r2, #1
 8012f36:	d004      	beq.n	8012f42 <_strtod_l+0x522>
 8012f38:	ed97 6b00 	vldr	d6, [r7]
 8012f3c:	2001      	movs	r0, #1
 8012f3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f42:	3101      	adds	r1, #1
 8012f44:	1052      	asrs	r2, r2, #1
 8012f46:	3708      	adds	r7, #8
 8012f48:	e7cd      	b.n	8012ee6 <_strtod_l+0x4c6>
 8012f4a:	d0ef      	beq.n	8012f2c <_strtod_l+0x50c>
 8012f4c:	4252      	negs	r2, r2
 8012f4e:	f012 000f 	ands.w	r0, r2, #15
 8012f52:	d00a      	beq.n	8012f6a <_strtod_l+0x54a>
 8012f54:	4911      	ldr	r1, [pc, #68]	; (8012f9c <_strtod_l+0x57c>)
 8012f56:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012f5a:	ed91 7b00 	vldr	d7, [r1]
 8012f5e:	ec49 8b16 	vmov	d6, r8, r9
 8012f62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012f66:	ec59 8b17 	vmov	r8, r9, d7
 8012f6a:	1112      	asrs	r2, r2, #4
 8012f6c:	d0de      	beq.n	8012f2c <_strtod_l+0x50c>
 8012f6e:	2a1f      	cmp	r2, #31
 8012f70:	dd1e      	ble.n	8012fb0 <_strtod_l+0x590>
 8012f72:	2500      	movs	r5, #0
 8012f74:	462e      	mov	r6, r5
 8012f76:	9507      	str	r5, [sp, #28]
 8012f78:	462f      	mov	r7, r5
 8012f7a:	2322      	movs	r3, #34	; 0x22
 8012f7c:	f04f 0800 	mov.w	r8, #0
 8012f80:	f04f 0900 	mov.w	r9, #0
 8012f84:	6023      	str	r3, [r4, #0]
 8012f86:	e78f      	b.n	8012ea8 <_strtod_l+0x488>
 8012f88:	08014941 	.word	0x08014941
 8012f8c:	08014b6c 	.word	0x08014b6c
 8012f90:	08014939 	.word	0x08014939
 8012f94:	08014970 	.word	0x08014970
 8012f98:	08014cfd 	.word	0x08014cfd
 8012f9c:	08014a80 	.word	0x08014a80
 8012fa0:	08014a58 	.word	0x08014a58
 8012fa4:	7ca00000 	.word	0x7ca00000
 8012fa8:	7ff00000 	.word	0x7ff00000
 8012fac:	7fefffff 	.word	0x7fefffff
 8012fb0:	f012 0110 	ands.w	r1, r2, #16
 8012fb4:	bf18      	it	ne
 8012fb6:	216a      	movne	r1, #106	; 0x6a
 8012fb8:	9105      	str	r1, [sp, #20]
 8012fba:	ec49 8b17 	vmov	d7, r8, r9
 8012fbe:	49be      	ldr	r1, [pc, #760]	; (80132b8 <_strtod_l+0x898>)
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	07d7      	lsls	r7, r2, #31
 8012fc4:	d504      	bpl.n	8012fd0 <_strtod_l+0x5b0>
 8012fc6:	ed91 6b00 	vldr	d6, [r1]
 8012fca:	2001      	movs	r0, #1
 8012fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012fd0:	1052      	asrs	r2, r2, #1
 8012fd2:	f101 0108 	add.w	r1, r1, #8
 8012fd6:	d1f4      	bne.n	8012fc2 <_strtod_l+0x5a2>
 8012fd8:	b108      	cbz	r0, 8012fde <_strtod_l+0x5be>
 8012fda:	ec59 8b17 	vmov	r8, r9, d7
 8012fde:	9a05      	ldr	r2, [sp, #20]
 8012fe0:	b1ba      	cbz	r2, 8013012 <_strtod_l+0x5f2>
 8012fe2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8012fe6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8012fea:	2a00      	cmp	r2, #0
 8012fec:	4648      	mov	r0, r9
 8012fee:	dd10      	ble.n	8013012 <_strtod_l+0x5f2>
 8012ff0:	2a1f      	cmp	r2, #31
 8012ff2:	f340 812c 	ble.w	801324e <_strtod_l+0x82e>
 8012ff6:	2a34      	cmp	r2, #52	; 0x34
 8012ff8:	bfde      	ittt	le
 8012ffa:	f04f 32ff 	movle.w	r2, #4294967295
 8012ffe:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8013002:	408a      	lslle	r2, r1
 8013004:	f04f 0800 	mov.w	r8, #0
 8013008:	bfcc      	ite	gt
 801300a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801300e:	ea02 0900 	andle.w	r9, r2, r0
 8013012:	ec49 8b17 	vmov	d7, r8, r9
 8013016:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301e:	d0a8      	beq.n	8012f72 <_strtod_l+0x552>
 8013020:	9a07      	ldr	r2, [sp, #28]
 8013022:	9200      	str	r2, [sp, #0]
 8013024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013026:	4632      	mov	r2, r6
 8013028:	4620      	mov	r0, r4
 801302a:	f7ff f8dd 	bl	80121e8 <__s2b>
 801302e:	9007      	str	r0, [sp, #28]
 8013030:	2800      	cmp	r0, #0
 8013032:	f43f af2f 	beq.w	8012e94 <_strtod_l+0x474>
 8013036:	9a06      	ldr	r2, [sp, #24]
 8013038:	2a00      	cmp	r2, #0
 801303a:	ebab 0305 	sub.w	r3, fp, r5
 801303e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013298 <_strtod_l+0x878>
 8013042:	bfa8      	it	ge
 8013044:	2300      	movge	r3, #0
 8013046:	ed9f ab96 	vldr	d10, [pc, #600]	; 80132a0 <_strtod_l+0x880>
 801304a:	ed9f bb97 	vldr	d11, [pc, #604]	; 80132a8 <_strtod_l+0x888>
 801304e:	9309      	str	r3, [sp, #36]	; 0x24
 8013050:	2500      	movs	r5, #0
 8013052:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013056:	930c      	str	r3, [sp, #48]	; 0x30
 8013058:	462e      	mov	r6, r5
 801305a:	9b07      	ldr	r3, [sp, #28]
 801305c:	4620      	mov	r0, r4
 801305e:	6859      	ldr	r1, [r3, #4]
 8013060:	f7ff f81a 	bl	8012098 <_Balloc>
 8013064:	4607      	mov	r7, r0
 8013066:	2800      	cmp	r0, #0
 8013068:	f43f af18 	beq.w	8012e9c <_strtod_l+0x47c>
 801306c:	9b07      	ldr	r3, [sp, #28]
 801306e:	691a      	ldr	r2, [r3, #16]
 8013070:	3202      	adds	r2, #2
 8013072:	f103 010c 	add.w	r1, r3, #12
 8013076:	0092      	lsls	r2, r2, #2
 8013078:	300c      	adds	r0, #12
 801307a:	f7fe f9b7 	bl	80113ec <memcpy>
 801307e:	ec49 8b10 	vmov	d0, r8, r9
 8013082:	aa14      	add	r2, sp, #80	; 0x50
 8013084:	a913      	add	r1, sp, #76	; 0x4c
 8013086:	4620      	mov	r0, r4
 8013088:	f7ff fbe2 	bl	8012850 <__d2b>
 801308c:	ec49 8b18 	vmov	d8, r8, r9
 8013090:	9012      	str	r0, [sp, #72]	; 0x48
 8013092:	2800      	cmp	r0, #0
 8013094:	f43f af02 	beq.w	8012e9c <_strtod_l+0x47c>
 8013098:	2101      	movs	r1, #1
 801309a:	4620      	mov	r0, r4
 801309c:	f7ff f93c 	bl	8012318 <__i2b>
 80130a0:	4606      	mov	r6, r0
 80130a2:	2800      	cmp	r0, #0
 80130a4:	f43f aefa 	beq.w	8012e9c <_strtod_l+0x47c>
 80130a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80130aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	bfab      	itete	ge
 80130b0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80130b2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80130b4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80130b8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80130bc:	bfac      	ite	ge
 80130be:	eb03 0b02 	addge.w	fp, r3, r2
 80130c2:	eba2 0a03 	sublt.w	sl, r2, r3
 80130c6:	9a05      	ldr	r2, [sp, #20]
 80130c8:	1a9b      	subs	r3, r3, r2
 80130ca:	440b      	add	r3, r1
 80130cc:	4a7b      	ldr	r2, [pc, #492]	; (80132bc <_strtod_l+0x89c>)
 80130ce:	3b01      	subs	r3, #1
 80130d0:	4293      	cmp	r3, r2
 80130d2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80130d6:	f280 80cd 	bge.w	8013274 <_strtod_l+0x854>
 80130da:	1ad2      	subs	r2, r2, r3
 80130dc:	2a1f      	cmp	r2, #31
 80130de:	eba1 0102 	sub.w	r1, r1, r2
 80130e2:	f04f 0001 	mov.w	r0, #1
 80130e6:	f300 80b9 	bgt.w	801325c <_strtod_l+0x83c>
 80130ea:	fa00 f302 	lsl.w	r3, r0, r2
 80130ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80130f0:	2300      	movs	r3, #0
 80130f2:	930a      	str	r3, [sp, #40]	; 0x28
 80130f4:	eb0b 0301 	add.w	r3, fp, r1
 80130f8:	9a05      	ldr	r2, [sp, #20]
 80130fa:	459b      	cmp	fp, r3
 80130fc:	448a      	add	sl, r1
 80130fe:	4492      	add	sl, r2
 8013100:	465a      	mov	r2, fp
 8013102:	bfa8      	it	ge
 8013104:	461a      	movge	r2, r3
 8013106:	4552      	cmp	r2, sl
 8013108:	bfa8      	it	ge
 801310a:	4652      	movge	r2, sl
 801310c:	2a00      	cmp	r2, #0
 801310e:	bfc2      	ittt	gt
 8013110:	1a9b      	subgt	r3, r3, r2
 8013112:	ebaa 0a02 	subgt.w	sl, sl, r2
 8013116:	ebab 0b02 	subgt.w	fp, fp, r2
 801311a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801311c:	2a00      	cmp	r2, #0
 801311e:	dd18      	ble.n	8013152 <_strtod_l+0x732>
 8013120:	4631      	mov	r1, r6
 8013122:	4620      	mov	r0, r4
 8013124:	930f      	str	r3, [sp, #60]	; 0x3c
 8013126:	f7ff f9b7 	bl	8012498 <__pow5mult>
 801312a:	4606      	mov	r6, r0
 801312c:	2800      	cmp	r0, #0
 801312e:	f43f aeb5 	beq.w	8012e9c <_strtod_l+0x47c>
 8013132:	4601      	mov	r1, r0
 8013134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013136:	4620      	mov	r0, r4
 8013138:	f7ff f904 	bl	8012344 <__multiply>
 801313c:	900e      	str	r0, [sp, #56]	; 0x38
 801313e:	2800      	cmp	r0, #0
 8013140:	f43f aeac 	beq.w	8012e9c <_strtod_l+0x47c>
 8013144:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013146:	4620      	mov	r0, r4
 8013148:	f7fe ffe6 	bl	8012118 <_Bfree>
 801314c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801314e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013150:	9212      	str	r2, [sp, #72]	; 0x48
 8013152:	2b00      	cmp	r3, #0
 8013154:	f300 8093 	bgt.w	801327e <_strtod_l+0x85e>
 8013158:	9b06      	ldr	r3, [sp, #24]
 801315a:	2b00      	cmp	r3, #0
 801315c:	dd08      	ble.n	8013170 <_strtod_l+0x750>
 801315e:	4639      	mov	r1, r7
 8013160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013162:	4620      	mov	r0, r4
 8013164:	f7ff f998 	bl	8012498 <__pow5mult>
 8013168:	4607      	mov	r7, r0
 801316a:	2800      	cmp	r0, #0
 801316c:	f43f ae96 	beq.w	8012e9c <_strtod_l+0x47c>
 8013170:	f1ba 0f00 	cmp.w	sl, #0
 8013174:	dd08      	ble.n	8013188 <_strtod_l+0x768>
 8013176:	4639      	mov	r1, r7
 8013178:	4652      	mov	r2, sl
 801317a:	4620      	mov	r0, r4
 801317c:	f7ff f9e6 	bl	801254c <__lshift>
 8013180:	4607      	mov	r7, r0
 8013182:	2800      	cmp	r0, #0
 8013184:	f43f ae8a 	beq.w	8012e9c <_strtod_l+0x47c>
 8013188:	f1bb 0f00 	cmp.w	fp, #0
 801318c:	dd08      	ble.n	80131a0 <_strtod_l+0x780>
 801318e:	4631      	mov	r1, r6
 8013190:	465a      	mov	r2, fp
 8013192:	4620      	mov	r0, r4
 8013194:	f7ff f9da 	bl	801254c <__lshift>
 8013198:	4606      	mov	r6, r0
 801319a:	2800      	cmp	r0, #0
 801319c:	f43f ae7e 	beq.w	8012e9c <_strtod_l+0x47c>
 80131a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80131a2:	463a      	mov	r2, r7
 80131a4:	4620      	mov	r0, r4
 80131a6:	f7ff fa59 	bl	801265c <__mdiff>
 80131aa:	4605      	mov	r5, r0
 80131ac:	2800      	cmp	r0, #0
 80131ae:	f43f ae75 	beq.w	8012e9c <_strtod_l+0x47c>
 80131b2:	2300      	movs	r3, #0
 80131b4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80131b8:	60c3      	str	r3, [r0, #12]
 80131ba:	4631      	mov	r1, r6
 80131bc:	f7ff fa32 	bl	8012624 <__mcmp>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	da7f      	bge.n	80132c4 <_strtod_l+0x8a4>
 80131c4:	ea5a 0a08 	orrs.w	sl, sl, r8
 80131c8:	f040 80a5 	bne.w	8013316 <_strtod_l+0x8f6>
 80131cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	f040 80a0 	bne.w	8013316 <_strtod_l+0x8f6>
 80131d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80131da:	0d1b      	lsrs	r3, r3, #20
 80131dc:	051b      	lsls	r3, r3, #20
 80131de:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80131e2:	f240 8098 	bls.w	8013316 <_strtod_l+0x8f6>
 80131e6:	696b      	ldr	r3, [r5, #20]
 80131e8:	b91b      	cbnz	r3, 80131f2 <_strtod_l+0x7d2>
 80131ea:	692b      	ldr	r3, [r5, #16]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	f340 8092 	ble.w	8013316 <_strtod_l+0x8f6>
 80131f2:	4629      	mov	r1, r5
 80131f4:	2201      	movs	r2, #1
 80131f6:	4620      	mov	r0, r4
 80131f8:	f7ff f9a8 	bl	801254c <__lshift>
 80131fc:	4631      	mov	r1, r6
 80131fe:	4605      	mov	r5, r0
 8013200:	f7ff fa10 	bl	8012624 <__mcmp>
 8013204:	2800      	cmp	r0, #0
 8013206:	f340 8086 	ble.w	8013316 <_strtod_l+0x8f6>
 801320a:	9905      	ldr	r1, [sp, #20]
 801320c:	4a2c      	ldr	r2, [pc, #176]	; (80132c0 <_strtod_l+0x8a0>)
 801320e:	464b      	mov	r3, r9
 8013210:	2900      	cmp	r1, #0
 8013212:	f000 809f 	beq.w	8013354 <_strtod_l+0x934>
 8013216:	ea02 0109 	and.w	r1, r2, r9
 801321a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801321e:	f300 8099 	bgt.w	8013354 <_strtod_l+0x934>
 8013222:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013226:	f77f aea8 	ble.w	8012f7a <_strtod_l+0x55a>
 801322a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80132b0 <_strtod_l+0x890>
 801322e:	ec49 8b16 	vmov	d6, r8, r9
 8013232:	4b23      	ldr	r3, [pc, #140]	; (80132c0 <_strtod_l+0x8a0>)
 8013234:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013238:	ee17 2a90 	vmov	r2, s15
 801323c:	4013      	ands	r3, r2
 801323e:	ec59 8b17 	vmov	r8, r9, d7
 8013242:	2b00      	cmp	r3, #0
 8013244:	f47f ae34 	bne.w	8012eb0 <_strtod_l+0x490>
 8013248:	2322      	movs	r3, #34	; 0x22
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	e630      	b.n	8012eb0 <_strtod_l+0x490>
 801324e:	f04f 31ff 	mov.w	r1, #4294967295
 8013252:	fa01 f202 	lsl.w	r2, r1, r2
 8013256:	ea02 0808 	and.w	r8, r2, r8
 801325a:	e6da      	b.n	8013012 <_strtod_l+0x5f2>
 801325c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013260:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013264:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013268:	33e2      	adds	r3, #226	; 0xe2
 801326a:	fa00 f303 	lsl.w	r3, r0, r3
 801326e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8013272:	e73f      	b.n	80130f4 <_strtod_l+0x6d4>
 8013274:	2200      	movs	r2, #0
 8013276:	2301      	movs	r3, #1
 8013278:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801327c:	e73a      	b.n	80130f4 <_strtod_l+0x6d4>
 801327e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013280:	461a      	mov	r2, r3
 8013282:	4620      	mov	r0, r4
 8013284:	f7ff f962 	bl	801254c <__lshift>
 8013288:	9012      	str	r0, [sp, #72]	; 0x48
 801328a:	2800      	cmp	r0, #0
 801328c:	f47f af64 	bne.w	8013158 <_strtod_l+0x738>
 8013290:	e604      	b.n	8012e9c <_strtod_l+0x47c>
 8013292:	bf00      	nop
 8013294:	f3af 8000 	nop.w
 8013298:	94a03595 	.word	0x94a03595
 801329c:	3fcfffff 	.word	0x3fcfffff
 80132a0:	94a03595 	.word	0x94a03595
 80132a4:	3fdfffff 	.word	0x3fdfffff
 80132a8:	35afe535 	.word	0x35afe535
 80132ac:	3fe00000 	.word	0x3fe00000
 80132b0:	00000000 	.word	0x00000000
 80132b4:	39500000 	.word	0x39500000
 80132b8:	08014b80 	.word	0x08014b80
 80132bc:	fffffc02 	.word	0xfffffc02
 80132c0:	7ff00000 	.word	0x7ff00000
 80132c4:	46cb      	mov	fp, r9
 80132c6:	d15f      	bne.n	8013388 <_strtod_l+0x968>
 80132c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132cc:	f1ba 0f00 	cmp.w	sl, #0
 80132d0:	d02a      	beq.n	8013328 <_strtod_l+0x908>
 80132d2:	4aa7      	ldr	r2, [pc, #668]	; (8013570 <_strtod_l+0xb50>)
 80132d4:	4293      	cmp	r3, r2
 80132d6:	d12b      	bne.n	8013330 <_strtod_l+0x910>
 80132d8:	9b05      	ldr	r3, [sp, #20]
 80132da:	4642      	mov	r2, r8
 80132dc:	b1fb      	cbz	r3, 801331e <_strtod_l+0x8fe>
 80132de:	4ba5      	ldr	r3, [pc, #660]	; (8013574 <_strtod_l+0xb54>)
 80132e0:	ea09 0303 	and.w	r3, r9, r3
 80132e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80132e8:	f04f 31ff 	mov.w	r1, #4294967295
 80132ec:	d81a      	bhi.n	8013324 <_strtod_l+0x904>
 80132ee:	0d1b      	lsrs	r3, r3, #20
 80132f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132f4:	fa01 f303 	lsl.w	r3, r1, r3
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d119      	bne.n	8013330 <_strtod_l+0x910>
 80132fc:	4b9e      	ldr	r3, [pc, #632]	; (8013578 <_strtod_l+0xb58>)
 80132fe:	459b      	cmp	fp, r3
 8013300:	d102      	bne.n	8013308 <_strtod_l+0x8e8>
 8013302:	3201      	adds	r2, #1
 8013304:	f43f adca 	beq.w	8012e9c <_strtod_l+0x47c>
 8013308:	4b9a      	ldr	r3, [pc, #616]	; (8013574 <_strtod_l+0xb54>)
 801330a:	ea0b 0303 	and.w	r3, fp, r3
 801330e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013312:	f04f 0800 	mov.w	r8, #0
 8013316:	9b05      	ldr	r3, [sp, #20]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d186      	bne.n	801322a <_strtod_l+0x80a>
 801331c:	e5c8      	b.n	8012eb0 <_strtod_l+0x490>
 801331e:	f04f 33ff 	mov.w	r3, #4294967295
 8013322:	e7e9      	b.n	80132f8 <_strtod_l+0x8d8>
 8013324:	460b      	mov	r3, r1
 8013326:	e7e7      	b.n	80132f8 <_strtod_l+0x8d8>
 8013328:	ea53 0308 	orrs.w	r3, r3, r8
 801332c:	f43f af6d 	beq.w	801320a <_strtod_l+0x7ea>
 8013330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013332:	b1cb      	cbz	r3, 8013368 <_strtod_l+0x948>
 8013334:	ea13 0f0b 	tst.w	r3, fp
 8013338:	d0ed      	beq.n	8013316 <_strtod_l+0x8f6>
 801333a:	9a05      	ldr	r2, [sp, #20]
 801333c:	4640      	mov	r0, r8
 801333e:	4649      	mov	r1, r9
 8013340:	f1ba 0f00 	cmp.w	sl, #0
 8013344:	d014      	beq.n	8013370 <_strtod_l+0x950>
 8013346:	f7ff fb51 	bl	80129ec <sulp>
 801334a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801334e:	ec59 8b17 	vmov	r8, r9, d7
 8013352:	e7e0      	b.n	8013316 <_strtod_l+0x8f6>
 8013354:	4013      	ands	r3, r2
 8013356:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801335a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801335e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013362:	f04f 38ff 	mov.w	r8, #4294967295
 8013366:	e7d6      	b.n	8013316 <_strtod_l+0x8f6>
 8013368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801336a:	ea13 0f08 	tst.w	r3, r8
 801336e:	e7e3      	b.n	8013338 <_strtod_l+0x918>
 8013370:	f7ff fb3c 	bl	80129ec <sulp>
 8013374:	ee38 0b40 	vsub.f64	d0, d8, d0
 8013378:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013380:	ec59 8b10 	vmov	r8, r9, d0
 8013384:	d1c7      	bne.n	8013316 <_strtod_l+0x8f6>
 8013386:	e5f8      	b.n	8012f7a <_strtod_l+0x55a>
 8013388:	4631      	mov	r1, r6
 801338a:	4628      	mov	r0, r5
 801338c:	f7ff faba 	bl	8012904 <__ratio>
 8013390:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013394:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339c:	d85f      	bhi.n	801345e <_strtod_l+0xa3e>
 801339e:	f1ba 0f00 	cmp.w	sl, #0
 80133a2:	d166      	bne.n	8013472 <_strtod_l+0xa52>
 80133a4:	f1b8 0f00 	cmp.w	r8, #0
 80133a8:	d14d      	bne.n	8013446 <_strtod_l+0xa26>
 80133aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133ae:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d162      	bne.n	801347c <_strtod_l+0xa5c>
 80133b6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80133ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80133be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c2:	d401      	bmi.n	80133c8 <_strtod_l+0x9a8>
 80133c4:	ee20 db0d 	vmul.f64	d13, d0, d13
 80133c8:	eeb1 cb4d 	vneg.f64	d12, d13
 80133cc:	4869      	ldr	r0, [pc, #420]	; (8013574 <_strtod_l+0xb54>)
 80133ce:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8013580 <_strtod_l+0xb60>
 80133d2:	ea0b 0100 	and.w	r1, fp, r0
 80133d6:	4561      	cmp	r1, ip
 80133d8:	ec53 2b1c 	vmov	r2, r3, d12
 80133dc:	d17a      	bne.n	80134d4 <_strtod_l+0xab4>
 80133de:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80133e2:	ec49 8b10 	vmov	d0, r8, r9
 80133e6:	910a      	str	r1, [sp, #40]	; 0x28
 80133e8:	f7ff f9c2 	bl	8012770 <__ulp>
 80133ec:	ec49 8b1e 	vmov	d14, r8, r9
 80133f0:	4860      	ldr	r0, [pc, #384]	; (8013574 <_strtod_l+0xb54>)
 80133f2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80133f6:	ee1e 3a90 	vmov	r3, s29
 80133fa:	4a60      	ldr	r2, [pc, #384]	; (801357c <_strtod_l+0xb5c>)
 80133fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133fe:	4018      	ands	r0, r3
 8013400:	4290      	cmp	r0, r2
 8013402:	ec59 8b1e 	vmov	r8, r9, d14
 8013406:	d93c      	bls.n	8013482 <_strtod_l+0xa62>
 8013408:	ee18 2a90 	vmov	r2, s17
 801340c:	4b5a      	ldr	r3, [pc, #360]	; (8013578 <_strtod_l+0xb58>)
 801340e:	429a      	cmp	r2, r3
 8013410:	d104      	bne.n	801341c <_strtod_l+0x9fc>
 8013412:	ee18 3a10 	vmov	r3, s16
 8013416:	3301      	adds	r3, #1
 8013418:	f43f ad40 	beq.w	8012e9c <_strtod_l+0x47c>
 801341c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8013578 <_strtod_l+0xb58>
 8013420:	f04f 38ff 	mov.w	r8, #4294967295
 8013424:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013426:	4620      	mov	r0, r4
 8013428:	f7fe fe76 	bl	8012118 <_Bfree>
 801342c:	4639      	mov	r1, r7
 801342e:	4620      	mov	r0, r4
 8013430:	f7fe fe72 	bl	8012118 <_Bfree>
 8013434:	4631      	mov	r1, r6
 8013436:	4620      	mov	r0, r4
 8013438:	f7fe fe6e 	bl	8012118 <_Bfree>
 801343c:	4629      	mov	r1, r5
 801343e:	4620      	mov	r0, r4
 8013440:	f7fe fe6a 	bl	8012118 <_Bfree>
 8013444:	e609      	b.n	801305a <_strtod_l+0x63a>
 8013446:	f1b8 0f01 	cmp.w	r8, #1
 801344a:	d103      	bne.n	8013454 <_strtod_l+0xa34>
 801344c:	f1b9 0f00 	cmp.w	r9, #0
 8013450:	f43f ad93 	beq.w	8012f7a <_strtod_l+0x55a>
 8013454:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8013458:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801345c:	e7b6      	b.n	80133cc <_strtod_l+0x9ac>
 801345e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013462:	ee20 db0d 	vmul.f64	d13, d0, d13
 8013466:	f1ba 0f00 	cmp.w	sl, #0
 801346a:	d0ad      	beq.n	80133c8 <_strtod_l+0x9a8>
 801346c:	eeb0 cb4d 	vmov.f64	d12, d13
 8013470:	e7ac      	b.n	80133cc <_strtod_l+0x9ac>
 8013472:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8013476:	eeb0 db4c 	vmov.f64	d13, d12
 801347a:	e7a7      	b.n	80133cc <_strtod_l+0x9ac>
 801347c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8013480:	e7a4      	b.n	80133cc <_strtod_l+0x9ac>
 8013482:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013486:	9b05      	ldr	r3, [sp, #20]
 8013488:	46cb      	mov	fp, r9
 801348a:	2b00      	cmp	r3, #0
 801348c:	d1ca      	bne.n	8013424 <_strtod_l+0xa04>
 801348e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013492:	0d1b      	lsrs	r3, r3, #20
 8013494:	051b      	lsls	r3, r3, #20
 8013496:	4299      	cmp	r1, r3
 8013498:	d1c4      	bne.n	8013424 <_strtod_l+0xa04>
 801349a:	ec51 0b1d 	vmov	r0, r1, d13
 801349e:	f7ed f94b 	bl	8000738 <__aeabi_d2lz>
 80134a2:	f7ed f903 	bl	80006ac <__aeabi_l2d>
 80134a6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80134aa:	ec41 0b17 	vmov	d7, r0, r1
 80134ae:	ea4b 0b08 	orr.w	fp, fp, r8
 80134b2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80134b6:	ee3d db47 	vsub.f64	d13, d13, d7
 80134ba:	d03c      	beq.n	8013536 <_strtod_l+0xb16>
 80134bc:	eeb4 dbca 	vcmpe.f64	d13, d10
 80134c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c4:	f53f acf4 	bmi.w	8012eb0 <_strtod_l+0x490>
 80134c8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80134cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d0:	dda8      	ble.n	8013424 <_strtod_l+0xa04>
 80134d2:	e4ed      	b.n	8012eb0 <_strtod_l+0x490>
 80134d4:	9805      	ldr	r0, [sp, #20]
 80134d6:	b1f0      	cbz	r0, 8013516 <_strtod_l+0xaf6>
 80134d8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80134dc:	d81b      	bhi.n	8013516 <_strtod_l+0xaf6>
 80134de:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8013568 <_strtod_l+0xb48>
 80134e2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80134e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ea:	d811      	bhi.n	8013510 <_strtod_l+0xaf0>
 80134ec:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80134f0:	ee1d 3a10 	vmov	r3, s26
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	bf38      	it	cc
 80134f8:	2301      	movcc	r3, #1
 80134fa:	ee0d 3a10 	vmov	s26, r3
 80134fe:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8013502:	f1ba 0f00 	cmp.w	sl, #0
 8013506:	d113      	bne.n	8013530 <_strtod_l+0xb10>
 8013508:	eeb1 7b4d 	vneg.f64	d7, d13
 801350c:	ec53 2b17 	vmov	r2, r3, d7
 8013510:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8013514:	1a43      	subs	r3, r0, r1
 8013516:	eeb0 0b48 	vmov.f64	d0, d8
 801351a:	ec43 2b1c 	vmov	d12, r2, r3
 801351e:	910a      	str	r1, [sp, #40]	; 0x28
 8013520:	f7ff f926 	bl	8012770 <__ulp>
 8013524:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013526:	eeac 8b00 	vfma.f64	d8, d12, d0
 801352a:	ec59 8b18 	vmov	r8, r9, d8
 801352e:	e7aa      	b.n	8013486 <_strtod_l+0xa66>
 8013530:	eeb0 7b4d 	vmov.f64	d7, d13
 8013534:	e7ea      	b.n	801350c <_strtod_l+0xaec>
 8013536:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353e:	f57f af71 	bpl.w	8013424 <_strtod_l+0xa04>
 8013542:	e4b5      	b.n	8012eb0 <_strtod_l+0x490>
 8013544:	2300      	movs	r3, #0
 8013546:	9308      	str	r3, [sp, #32]
 8013548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801354a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801354c:	6013      	str	r3, [r2, #0]
 801354e:	f7ff baa6 	b.w	8012a9e <_strtod_l+0x7e>
 8013552:	2a65      	cmp	r2, #101	; 0x65
 8013554:	f43f aba2 	beq.w	8012c9c <_strtod_l+0x27c>
 8013558:	2a45      	cmp	r2, #69	; 0x45
 801355a:	f43f ab9f 	beq.w	8012c9c <_strtod_l+0x27c>
 801355e:	2101      	movs	r1, #1
 8013560:	f7ff bbd8 	b.w	8012d14 <_strtod_l+0x2f4>
 8013564:	f3af 8000 	nop.w
 8013568:	ffc00000 	.word	0xffc00000
 801356c:	41dfffff 	.word	0x41dfffff
 8013570:	000fffff 	.word	0x000fffff
 8013574:	7ff00000 	.word	0x7ff00000
 8013578:	7fefffff 	.word	0x7fefffff
 801357c:	7c9fffff 	.word	0x7c9fffff
 8013580:	7fe00000 	.word	0x7fe00000

08013584 <_strtod_r>:
 8013584:	4b01      	ldr	r3, [pc, #4]	; (801358c <_strtod_r+0x8>)
 8013586:	f7ff ba4b 	b.w	8012a20 <_strtod_l>
 801358a:	bf00      	nop
 801358c:	24000070 	.word	0x24000070

08013590 <_strtol_l.constprop.0>:
 8013590:	2b01      	cmp	r3, #1
 8013592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013596:	d001      	beq.n	801359c <_strtol_l.constprop.0+0xc>
 8013598:	2b24      	cmp	r3, #36	; 0x24
 801359a:	d906      	bls.n	80135aa <_strtol_l.constprop.0+0x1a>
 801359c:	f7fd fefa 	bl	8011394 <__errno>
 80135a0:	2316      	movs	r3, #22
 80135a2:	6003      	str	r3, [r0, #0]
 80135a4:	2000      	movs	r0, #0
 80135a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013690 <_strtol_l.constprop.0+0x100>
 80135ae:	460d      	mov	r5, r1
 80135b0:	462e      	mov	r6, r5
 80135b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135b6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80135ba:	f017 0708 	ands.w	r7, r7, #8
 80135be:	d1f7      	bne.n	80135b0 <_strtol_l.constprop.0+0x20>
 80135c0:	2c2d      	cmp	r4, #45	; 0x2d
 80135c2:	d132      	bne.n	801362a <_strtol_l.constprop.0+0x9a>
 80135c4:	782c      	ldrb	r4, [r5, #0]
 80135c6:	2701      	movs	r7, #1
 80135c8:	1cb5      	adds	r5, r6, #2
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d05b      	beq.n	8013686 <_strtol_l.constprop.0+0xf6>
 80135ce:	2b10      	cmp	r3, #16
 80135d0:	d109      	bne.n	80135e6 <_strtol_l.constprop.0+0x56>
 80135d2:	2c30      	cmp	r4, #48	; 0x30
 80135d4:	d107      	bne.n	80135e6 <_strtol_l.constprop.0+0x56>
 80135d6:	782c      	ldrb	r4, [r5, #0]
 80135d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80135dc:	2c58      	cmp	r4, #88	; 0x58
 80135de:	d14d      	bne.n	801367c <_strtol_l.constprop.0+0xec>
 80135e0:	786c      	ldrb	r4, [r5, #1]
 80135e2:	2310      	movs	r3, #16
 80135e4:	3502      	adds	r5, #2
 80135e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80135ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80135ee:	f04f 0e00 	mov.w	lr, #0
 80135f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80135f6:	4676      	mov	r6, lr
 80135f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80135fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013600:	f1bc 0f09 	cmp.w	ip, #9
 8013604:	d816      	bhi.n	8013634 <_strtol_l.constprop.0+0xa4>
 8013606:	4664      	mov	r4, ip
 8013608:	42a3      	cmp	r3, r4
 801360a:	dd24      	ble.n	8013656 <_strtol_l.constprop.0+0xc6>
 801360c:	f1be 3fff 	cmp.w	lr, #4294967295
 8013610:	d008      	beq.n	8013624 <_strtol_l.constprop.0+0x94>
 8013612:	45b1      	cmp	r9, r6
 8013614:	d31c      	bcc.n	8013650 <_strtol_l.constprop.0+0xc0>
 8013616:	d101      	bne.n	801361c <_strtol_l.constprop.0+0x8c>
 8013618:	45a2      	cmp	sl, r4
 801361a:	db19      	blt.n	8013650 <_strtol_l.constprop.0+0xc0>
 801361c:	fb06 4603 	mla	r6, r6, r3, r4
 8013620:	f04f 0e01 	mov.w	lr, #1
 8013624:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013628:	e7e8      	b.n	80135fc <_strtol_l.constprop.0+0x6c>
 801362a:	2c2b      	cmp	r4, #43	; 0x2b
 801362c:	bf04      	itt	eq
 801362e:	782c      	ldrbeq	r4, [r5, #0]
 8013630:	1cb5      	addeq	r5, r6, #2
 8013632:	e7ca      	b.n	80135ca <_strtol_l.constprop.0+0x3a>
 8013634:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013638:	f1bc 0f19 	cmp.w	ip, #25
 801363c:	d801      	bhi.n	8013642 <_strtol_l.constprop.0+0xb2>
 801363e:	3c37      	subs	r4, #55	; 0x37
 8013640:	e7e2      	b.n	8013608 <_strtol_l.constprop.0+0x78>
 8013642:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013646:	f1bc 0f19 	cmp.w	ip, #25
 801364a:	d804      	bhi.n	8013656 <_strtol_l.constprop.0+0xc6>
 801364c:	3c57      	subs	r4, #87	; 0x57
 801364e:	e7db      	b.n	8013608 <_strtol_l.constprop.0+0x78>
 8013650:	f04f 3eff 	mov.w	lr, #4294967295
 8013654:	e7e6      	b.n	8013624 <_strtol_l.constprop.0+0x94>
 8013656:	f1be 3fff 	cmp.w	lr, #4294967295
 801365a:	d105      	bne.n	8013668 <_strtol_l.constprop.0+0xd8>
 801365c:	2322      	movs	r3, #34	; 0x22
 801365e:	6003      	str	r3, [r0, #0]
 8013660:	4646      	mov	r6, r8
 8013662:	b942      	cbnz	r2, 8013676 <_strtol_l.constprop.0+0xe6>
 8013664:	4630      	mov	r0, r6
 8013666:	e79e      	b.n	80135a6 <_strtol_l.constprop.0+0x16>
 8013668:	b107      	cbz	r7, 801366c <_strtol_l.constprop.0+0xdc>
 801366a:	4276      	negs	r6, r6
 801366c:	2a00      	cmp	r2, #0
 801366e:	d0f9      	beq.n	8013664 <_strtol_l.constprop.0+0xd4>
 8013670:	f1be 0f00 	cmp.w	lr, #0
 8013674:	d000      	beq.n	8013678 <_strtol_l.constprop.0+0xe8>
 8013676:	1e69      	subs	r1, r5, #1
 8013678:	6011      	str	r1, [r2, #0]
 801367a:	e7f3      	b.n	8013664 <_strtol_l.constprop.0+0xd4>
 801367c:	2430      	movs	r4, #48	; 0x30
 801367e:	2b00      	cmp	r3, #0
 8013680:	d1b1      	bne.n	80135e6 <_strtol_l.constprop.0+0x56>
 8013682:	2308      	movs	r3, #8
 8013684:	e7af      	b.n	80135e6 <_strtol_l.constprop.0+0x56>
 8013686:	2c30      	cmp	r4, #48	; 0x30
 8013688:	d0a5      	beq.n	80135d6 <_strtol_l.constprop.0+0x46>
 801368a:	230a      	movs	r3, #10
 801368c:	e7ab      	b.n	80135e6 <_strtol_l.constprop.0+0x56>
 801368e:	bf00      	nop
 8013690:	08014ba9 	.word	0x08014ba9

08013694 <_strtol_r>:
 8013694:	f7ff bf7c 	b.w	8013590 <_strtol_l.constprop.0>

08013698 <__ssputs_r>:
 8013698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801369c:	688e      	ldr	r6, [r1, #8]
 801369e:	461f      	mov	r7, r3
 80136a0:	42be      	cmp	r6, r7
 80136a2:	680b      	ldr	r3, [r1, #0]
 80136a4:	4682      	mov	sl, r0
 80136a6:	460c      	mov	r4, r1
 80136a8:	4690      	mov	r8, r2
 80136aa:	d82c      	bhi.n	8013706 <__ssputs_r+0x6e>
 80136ac:	898a      	ldrh	r2, [r1, #12]
 80136ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80136b2:	d026      	beq.n	8013702 <__ssputs_r+0x6a>
 80136b4:	6965      	ldr	r5, [r4, #20]
 80136b6:	6909      	ldr	r1, [r1, #16]
 80136b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136bc:	eba3 0901 	sub.w	r9, r3, r1
 80136c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136c4:	1c7b      	adds	r3, r7, #1
 80136c6:	444b      	add	r3, r9
 80136c8:	106d      	asrs	r5, r5, #1
 80136ca:	429d      	cmp	r5, r3
 80136cc:	bf38      	it	cc
 80136ce:	461d      	movcc	r5, r3
 80136d0:	0553      	lsls	r3, r2, #21
 80136d2:	d527      	bpl.n	8013724 <__ssputs_r+0x8c>
 80136d4:	4629      	mov	r1, r5
 80136d6:	f7fc fd91 	bl	80101fc <_malloc_r>
 80136da:	4606      	mov	r6, r0
 80136dc:	b360      	cbz	r0, 8013738 <__ssputs_r+0xa0>
 80136de:	6921      	ldr	r1, [r4, #16]
 80136e0:	464a      	mov	r2, r9
 80136e2:	f7fd fe83 	bl	80113ec <memcpy>
 80136e6:	89a3      	ldrh	r3, [r4, #12]
 80136e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80136ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136f0:	81a3      	strh	r3, [r4, #12]
 80136f2:	6126      	str	r6, [r4, #16]
 80136f4:	6165      	str	r5, [r4, #20]
 80136f6:	444e      	add	r6, r9
 80136f8:	eba5 0509 	sub.w	r5, r5, r9
 80136fc:	6026      	str	r6, [r4, #0]
 80136fe:	60a5      	str	r5, [r4, #8]
 8013700:	463e      	mov	r6, r7
 8013702:	42be      	cmp	r6, r7
 8013704:	d900      	bls.n	8013708 <__ssputs_r+0x70>
 8013706:	463e      	mov	r6, r7
 8013708:	6820      	ldr	r0, [r4, #0]
 801370a:	4632      	mov	r2, r6
 801370c:	4641      	mov	r1, r8
 801370e:	f000 f9c9 	bl	8013aa4 <memmove>
 8013712:	68a3      	ldr	r3, [r4, #8]
 8013714:	1b9b      	subs	r3, r3, r6
 8013716:	60a3      	str	r3, [r4, #8]
 8013718:	6823      	ldr	r3, [r4, #0]
 801371a:	4433      	add	r3, r6
 801371c:	6023      	str	r3, [r4, #0]
 801371e:	2000      	movs	r0, #0
 8013720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013724:	462a      	mov	r2, r5
 8013726:	f000 fd90 	bl	801424a <_realloc_r>
 801372a:	4606      	mov	r6, r0
 801372c:	2800      	cmp	r0, #0
 801372e:	d1e0      	bne.n	80136f2 <__ssputs_r+0x5a>
 8013730:	6921      	ldr	r1, [r4, #16]
 8013732:	4650      	mov	r0, sl
 8013734:	f7fe fc64 	bl	8012000 <_free_r>
 8013738:	230c      	movs	r3, #12
 801373a:	f8ca 3000 	str.w	r3, [sl]
 801373e:	89a3      	ldrh	r3, [r4, #12]
 8013740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013744:	81a3      	strh	r3, [r4, #12]
 8013746:	f04f 30ff 	mov.w	r0, #4294967295
 801374a:	e7e9      	b.n	8013720 <__ssputs_r+0x88>

0801374c <_svfiprintf_r>:
 801374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013750:	4698      	mov	r8, r3
 8013752:	898b      	ldrh	r3, [r1, #12]
 8013754:	061b      	lsls	r3, r3, #24
 8013756:	b09d      	sub	sp, #116	; 0x74
 8013758:	4607      	mov	r7, r0
 801375a:	460d      	mov	r5, r1
 801375c:	4614      	mov	r4, r2
 801375e:	d50e      	bpl.n	801377e <_svfiprintf_r+0x32>
 8013760:	690b      	ldr	r3, [r1, #16]
 8013762:	b963      	cbnz	r3, 801377e <_svfiprintf_r+0x32>
 8013764:	2140      	movs	r1, #64	; 0x40
 8013766:	f7fc fd49 	bl	80101fc <_malloc_r>
 801376a:	6028      	str	r0, [r5, #0]
 801376c:	6128      	str	r0, [r5, #16]
 801376e:	b920      	cbnz	r0, 801377a <_svfiprintf_r+0x2e>
 8013770:	230c      	movs	r3, #12
 8013772:	603b      	str	r3, [r7, #0]
 8013774:	f04f 30ff 	mov.w	r0, #4294967295
 8013778:	e0d0      	b.n	801391c <_svfiprintf_r+0x1d0>
 801377a:	2340      	movs	r3, #64	; 0x40
 801377c:	616b      	str	r3, [r5, #20]
 801377e:	2300      	movs	r3, #0
 8013780:	9309      	str	r3, [sp, #36]	; 0x24
 8013782:	2320      	movs	r3, #32
 8013784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013788:	f8cd 800c 	str.w	r8, [sp, #12]
 801378c:	2330      	movs	r3, #48	; 0x30
 801378e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013934 <_svfiprintf_r+0x1e8>
 8013792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013796:	f04f 0901 	mov.w	r9, #1
 801379a:	4623      	mov	r3, r4
 801379c:	469a      	mov	sl, r3
 801379e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137a2:	b10a      	cbz	r2, 80137a8 <_svfiprintf_r+0x5c>
 80137a4:	2a25      	cmp	r2, #37	; 0x25
 80137a6:	d1f9      	bne.n	801379c <_svfiprintf_r+0x50>
 80137a8:	ebba 0b04 	subs.w	fp, sl, r4
 80137ac:	d00b      	beq.n	80137c6 <_svfiprintf_r+0x7a>
 80137ae:	465b      	mov	r3, fp
 80137b0:	4622      	mov	r2, r4
 80137b2:	4629      	mov	r1, r5
 80137b4:	4638      	mov	r0, r7
 80137b6:	f7ff ff6f 	bl	8013698 <__ssputs_r>
 80137ba:	3001      	adds	r0, #1
 80137bc:	f000 80a9 	beq.w	8013912 <_svfiprintf_r+0x1c6>
 80137c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137c2:	445a      	add	r2, fp
 80137c4:	9209      	str	r2, [sp, #36]	; 0x24
 80137c6:	f89a 3000 	ldrb.w	r3, [sl]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f000 80a1 	beq.w	8013912 <_svfiprintf_r+0x1c6>
 80137d0:	2300      	movs	r3, #0
 80137d2:	f04f 32ff 	mov.w	r2, #4294967295
 80137d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137da:	f10a 0a01 	add.w	sl, sl, #1
 80137de:	9304      	str	r3, [sp, #16]
 80137e0:	9307      	str	r3, [sp, #28]
 80137e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137e6:	931a      	str	r3, [sp, #104]	; 0x68
 80137e8:	4654      	mov	r4, sl
 80137ea:	2205      	movs	r2, #5
 80137ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f0:	4850      	ldr	r0, [pc, #320]	; (8013934 <_svfiprintf_r+0x1e8>)
 80137f2:	f7ec fd75 	bl	80002e0 <memchr>
 80137f6:	9a04      	ldr	r2, [sp, #16]
 80137f8:	b9d8      	cbnz	r0, 8013832 <_svfiprintf_r+0xe6>
 80137fa:	06d0      	lsls	r0, r2, #27
 80137fc:	bf44      	itt	mi
 80137fe:	2320      	movmi	r3, #32
 8013800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013804:	0711      	lsls	r1, r2, #28
 8013806:	bf44      	itt	mi
 8013808:	232b      	movmi	r3, #43	; 0x2b
 801380a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801380e:	f89a 3000 	ldrb.w	r3, [sl]
 8013812:	2b2a      	cmp	r3, #42	; 0x2a
 8013814:	d015      	beq.n	8013842 <_svfiprintf_r+0xf6>
 8013816:	9a07      	ldr	r2, [sp, #28]
 8013818:	4654      	mov	r4, sl
 801381a:	2000      	movs	r0, #0
 801381c:	f04f 0c0a 	mov.w	ip, #10
 8013820:	4621      	mov	r1, r4
 8013822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013826:	3b30      	subs	r3, #48	; 0x30
 8013828:	2b09      	cmp	r3, #9
 801382a:	d94d      	bls.n	80138c8 <_svfiprintf_r+0x17c>
 801382c:	b1b0      	cbz	r0, 801385c <_svfiprintf_r+0x110>
 801382e:	9207      	str	r2, [sp, #28]
 8013830:	e014      	b.n	801385c <_svfiprintf_r+0x110>
 8013832:	eba0 0308 	sub.w	r3, r0, r8
 8013836:	fa09 f303 	lsl.w	r3, r9, r3
 801383a:	4313      	orrs	r3, r2
 801383c:	9304      	str	r3, [sp, #16]
 801383e:	46a2      	mov	sl, r4
 8013840:	e7d2      	b.n	80137e8 <_svfiprintf_r+0x9c>
 8013842:	9b03      	ldr	r3, [sp, #12]
 8013844:	1d19      	adds	r1, r3, #4
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	9103      	str	r1, [sp, #12]
 801384a:	2b00      	cmp	r3, #0
 801384c:	bfbb      	ittet	lt
 801384e:	425b      	neglt	r3, r3
 8013850:	f042 0202 	orrlt.w	r2, r2, #2
 8013854:	9307      	strge	r3, [sp, #28]
 8013856:	9307      	strlt	r3, [sp, #28]
 8013858:	bfb8      	it	lt
 801385a:	9204      	strlt	r2, [sp, #16]
 801385c:	7823      	ldrb	r3, [r4, #0]
 801385e:	2b2e      	cmp	r3, #46	; 0x2e
 8013860:	d10c      	bne.n	801387c <_svfiprintf_r+0x130>
 8013862:	7863      	ldrb	r3, [r4, #1]
 8013864:	2b2a      	cmp	r3, #42	; 0x2a
 8013866:	d134      	bne.n	80138d2 <_svfiprintf_r+0x186>
 8013868:	9b03      	ldr	r3, [sp, #12]
 801386a:	1d1a      	adds	r2, r3, #4
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	9203      	str	r2, [sp, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	bfb8      	it	lt
 8013874:	f04f 33ff 	movlt.w	r3, #4294967295
 8013878:	3402      	adds	r4, #2
 801387a:	9305      	str	r3, [sp, #20]
 801387c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013944 <_svfiprintf_r+0x1f8>
 8013880:	7821      	ldrb	r1, [r4, #0]
 8013882:	2203      	movs	r2, #3
 8013884:	4650      	mov	r0, sl
 8013886:	f7ec fd2b 	bl	80002e0 <memchr>
 801388a:	b138      	cbz	r0, 801389c <_svfiprintf_r+0x150>
 801388c:	9b04      	ldr	r3, [sp, #16]
 801388e:	eba0 000a 	sub.w	r0, r0, sl
 8013892:	2240      	movs	r2, #64	; 0x40
 8013894:	4082      	lsls	r2, r0
 8013896:	4313      	orrs	r3, r2
 8013898:	3401      	adds	r4, #1
 801389a:	9304      	str	r3, [sp, #16]
 801389c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a0:	4825      	ldr	r0, [pc, #148]	; (8013938 <_svfiprintf_r+0x1ec>)
 80138a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138a6:	2206      	movs	r2, #6
 80138a8:	f7ec fd1a 	bl	80002e0 <memchr>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d038      	beq.n	8013922 <_svfiprintf_r+0x1d6>
 80138b0:	4b22      	ldr	r3, [pc, #136]	; (801393c <_svfiprintf_r+0x1f0>)
 80138b2:	bb1b      	cbnz	r3, 80138fc <_svfiprintf_r+0x1b0>
 80138b4:	9b03      	ldr	r3, [sp, #12]
 80138b6:	3307      	adds	r3, #7
 80138b8:	f023 0307 	bic.w	r3, r3, #7
 80138bc:	3308      	adds	r3, #8
 80138be:	9303      	str	r3, [sp, #12]
 80138c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138c2:	4433      	add	r3, r6
 80138c4:	9309      	str	r3, [sp, #36]	; 0x24
 80138c6:	e768      	b.n	801379a <_svfiprintf_r+0x4e>
 80138c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80138cc:	460c      	mov	r4, r1
 80138ce:	2001      	movs	r0, #1
 80138d0:	e7a6      	b.n	8013820 <_svfiprintf_r+0xd4>
 80138d2:	2300      	movs	r3, #0
 80138d4:	3401      	adds	r4, #1
 80138d6:	9305      	str	r3, [sp, #20]
 80138d8:	4619      	mov	r1, r3
 80138da:	f04f 0c0a 	mov.w	ip, #10
 80138de:	4620      	mov	r0, r4
 80138e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138e4:	3a30      	subs	r2, #48	; 0x30
 80138e6:	2a09      	cmp	r2, #9
 80138e8:	d903      	bls.n	80138f2 <_svfiprintf_r+0x1a6>
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d0c6      	beq.n	801387c <_svfiprintf_r+0x130>
 80138ee:	9105      	str	r1, [sp, #20]
 80138f0:	e7c4      	b.n	801387c <_svfiprintf_r+0x130>
 80138f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80138f6:	4604      	mov	r4, r0
 80138f8:	2301      	movs	r3, #1
 80138fa:	e7f0      	b.n	80138de <_svfiprintf_r+0x192>
 80138fc:	ab03      	add	r3, sp, #12
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	462a      	mov	r2, r5
 8013902:	4b0f      	ldr	r3, [pc, #60]	; (8013940 <_svfiprintf_r+0x1f4>)
 8013904:	a904      	add	r1, sp, #16
 8013906:	4638      	mov	r0, r7
 8013908:	f7fc fd96 	bl	8010438 <_printf_float>
 801390c:	1c42      	adds	r2, r0, #1
 801390e:	4606      	mov	r6, r0
 8013910:	d1d6      	bne.n	80138c0 <_svfiprintf_r+0x174>
 8013912:	89ab      	ldrh	r3, [r5, #12]
 8013914:	065b      	lsls	r3, r3, #25
 8013916:	f53f af2d 	bmi.w	8013774 <_svfiprintf_r+0x28>
 801391a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801391c:	b01d      	add	sp, #116	; 0x74
 801391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013922:	ab03      	add	r3, sp, #12
 8013924:	9300      	str	r3, [sp, #0]
 8013926:	462a      	mov	r2, r5
 8013928:	4b05      	ldr	r3, [pc, #20]	; (8013940 <_svfiprintf_r+0x1f4>)
 801392a:	a904      	add	r1, sp, #16
 801392c:	4638      	mov	r0, r7
 801392e:	f7fd f80b 	bl	8010948 <_printf_i>
 8013932:	e7eb      	b.n	801390c <_svfiprintf_r+0x1c0>
 8013934:	08014ca9 	.word	0x08014ca9
 8013938:	08014cb3 	.word	0x08014cb3
 801393c:	08010439 	.word	0x08010439
 8013940:	08013699 	.word	0x08013699
 8013944:	08014caf 	.word	0x08014caf

08013948 <__sflush_r>:
 8013948:	898a      	ldrh	r2, [r1, #12]
 801394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801394e:	4605      	mov	r5, r0
 8013950:	0710      	lsls	r0, r2, #28
 8013952:	460c      	mov	r4, r1
 8013954:	d458      	bmi.n	8013a08 <__sflush_r+0xc0>
 8013956:	684b      	ldr	r3, [r1, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	dc05      	bgt.n	8013968 <__sflush_r+0x20>
 801395c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801395e:	2b00      	cmp	r3, #0
 8013960:	dc02      	bgt.n	8013968 <__sflush_r+0x20>
 8013962:	2000      	movs	r0, #0
 8013964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801396a:	2e00      	cmp	r6, #0
 801396c:	d0f9      	beq.n	8013962 <__sflush_r+0x1a>
 801396e:	2300      	movs	r3, #0
 8013970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013974:	682f      	ldr	r7, [r5, #0]
 8013976:	6a21      	ldr	r1, [r4, #32]
 8013978:	602b      	str	r3, [r5, #0]
 801397a:	d032      	beq.n	80139e2 <__sflush_r+0x9a>
 801397c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801397e:	89a3      	ldrh	r3, [r4, #12]
 8013980:	075a      	lsls	r2, r3, #29
 8013982:	d505      	bpl.n	8013990 <__sflush_r+0x48>
 8013984:	6863      	ldr	r3, [r4, #4]
 8013986:	1ac0      	subs	r0, r0, r3
 8013988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801398a:	b10b      	cbz	r3, 8013990 <__sflush_r+0x48>
 801398c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801398e:	1ac0      	subs	r0, r0, r3
 8013990:	2300      	movs	r3, #0
 8013992:	4602      	mov	r2, r0
 8013994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013996:	6a21      	ldr	r1, [r4, #32]
 8013998:	4628      	mov	r0, r5
 801399a:	47b0      	blx	r6
 801399c:	1c43      	adds	r3, r0, #1
 801399e:	89a3      	ldrh	r3, [r4, #12]
 80139a0:	d106      	bne.n	80139b0 <__sflush_r+0x68>
 80139a2:	6829      	ldr	r1, [r5, #0]
 80139a4:	291d      	cmp	r1, #29
 80139a6:	d82b      	bhi.n	8013a00 <__sflush_r+0xb8>
 80139a8:	4a29      	ldr	r2, [pc, #164]	; (8013a50 <__sflush_r+0x108>)
 80139aa:	410a      	asrs	r2, r1
 80139ac:	07d6      	lsls	r6, r2, #31
 80139ae:	d427      	bmi.n	8013a00 <__sflush_r+0xb8>
 80139b0:	2200      	movs	r2, #0
 80139b2:	6062      	str	r2, [r4, #4]
 80139b4:	04d9      	lsls	r1, r3, #19
 80139b6:	6922      	ldr	r2, [r4, #16]
 80139b8:	6022      	str	r2, [r4, #0]
 80139ba:	d504      	bpl.n	80139c6 <__sflush_r+0x7e>
 80139bc:	1c42      	adds	r2, r0, #1
 80139be:	d101      	bne.n	80139c4 <__sflush_r+0x7c>
 80139c0:	682b      	ldr	r3, [r5, #0]
 80139c2:	b903      	cbnz	r3, 80139c6 <__sflush_r+0x7e>
 80139c4:	6560      	str	r0, [r4, #84]	; 0x54
 80139c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139c8:	602f      	str	r7, [r5, #0]
 80139ca:	2900      	cmp	r1, #0
 80139cc:	d0c9      	beq.n	8013962 <__sflush_r+0x1a>
 80139ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139d2:	4299      	cmp	r1, r3
 80139d4:	d002      	beq.n	80139dc <__sflush_r+0x94>
 80139d6:	4628      	mov	r0, r5
 80139d8:	f7fe fb12 	bl	8012000 <_free_r>
 80139dc:	2000      	movs	r0, #0
 80139de:	6360      	str	r0, [r4, #52]	; 0x34
 80139e0:	e7c0      	b.n	8013964 <__sflush_r+0x1c>
 80139e2:	2301      	movs	r3, #1
 80139e4:	4628      	mov	r0, r5
 80139e6:	47b0      	blx	r6
 80139e8:	1c41      	adds	r1, r0, #1
 80139ea:	d1c8      	bne.n	801397e <__sflush_r+0x36>
 80139ec:	682b      	ldr	r3, [r5, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d0c5      	beq.n	801397e <__sflush_r+0x36>
 80139f2:	2b1d      	cmp	r3, #29
 80139f4:	d001      	beq.n	80139fa <__sflush_r+0xb2>
 80139f6:	2b16      	cmp	r3, #22
 80139f8:	d101      	bne.n	80139fe <__sflush_r+0xb6>
 80139fa:	602f      	str	r7, [r5, #0]
 80139fc:	e7b1      	b.n	8013962 <__sflush_r+0x1a>
 80139fe:	89a3      	ldrh	r3, [r4, #12]
 8013a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a04:	81a3      	strh	r3, [r4, #12]
 8013a06:	e7ad      	b.n	8013964 <__sflush_r+0x1c>
 8013a08:	690f      	ldr	r7, [r1, #16]
 8013a0a:	2f00      	cmp	r7, #0
 8013a0c:	d0a9      	beq.n	8013962 <__sflush_r+0x1a>
 8013a0e:	0793      	lsls	r3, r2, #30
 8013a10:	680e      	ldr	r6, [r1, #0]
 8013a12:	bf08      	it	eq
 8013a14:	694b      	ldreq	r3, [r1, #20]
 8013a16:	600f      	str	r7, [r1, #0]
 8013a18:	bf18      	it	ne
 8013a1a:	2300      	movne	r3, #0
 8013a1c:	eba6 0807 	sub.w	r8, r6, r7
 8013a20:	608b      	str	r3, [r1, #8]
 8013a22:	f1b8 0f00 	cmp.w	r8, #0
 8013a26:	dd9c      	ble.n	8013962 <__sflush_r+0x1a>
 8013a28:	6a21      	ldr	r1, [r4, #32]
 8013a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a2c:	4643      	mov	r3, r8
 8013a2e:	463a      	mov	r2, r7
 8013a30:	4628      	mov	r0, r5
 8013a32:	47b0      	blx	r6
 8013a34:	2800      	cmp	r0, #0
 8013a36:	dc06      	bgt.n	8013a46 <__sflush_r+0xfe>
 8013a38:	89a3      	ldrh	r3, [r4, #12]
 8013a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a3e:	81a3      	strh	r3, [r4, #12]
 8013a40:	f04f 30ff 	mov.w	r0, #4294967295
 8013a44:	e78e      	b.n	8013964 <__sflush_r+0x1c>
 8013a46:	4407      	add	r7, r0
 8013a48:	eba8 0800 	sub.w	r8, r8, r0
 8013a4c:	e7e9      	b.n	8013a22 <__sflush_r+0xda>
 8013a4e:	bf00      	nop
 8013a50:	dfbffffe 	.word	0xdfbffffe

08013a54 <_fflush_r>:
 8013a54:	b538      	push	{r3, r4, r5, lr}
 8013a56:	690b      	ldr	r3, [r1, #16]
 8013a58:	4605      	mov	r5, r0
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	b913      	cbnz	r3, 8013a64 <_fflush_r+0x10>
 8013a5e:	2500      	movs	r5, #0
 8013a60:	4628      	mov	r0, r5
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	b118      	cbz	r0, 8013a6e <_fflush_r+0x1a>
 8013a66:	6a03      	ldr	r3, [r0, #32]
 8013a68:	b90b      	cbnz	r3, 8013a6e <_fflush_r+0x1a>
 8013a6a:	f7fd fb0d 	bl	8011088 <__sinit>
 8013a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d0f3      	beq.n	8013a5e <_fflush_r+0xa>
 8013a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a78:	07d0      	lsls	r0, r2, #31
 8013a7a:	d404      	bmi.n	8013a86 <_fflush_r+0x32>
 8013a7c:	0599      	lsls	r1, r3, #22
 8013a7e:	d402      	bmi.n	8013a86 <_fflush_r+0x32>
 8013a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a82:	f7fd fcb1 	bl	80113e8 <__retarget_lock_acquire_recursive>
 8013a86:	4628      	mov	r0, r5
 8013a88:	4621      	mov	r1, r4
 8013a8a:	f7ff ff5d 	bl	8013948 <__sflush_r>
 8013a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a90:	07da      	lsls	r2, r3, #31
 8013a92:	4605      	mov	r5, r0
 8013a94:	d4e4      	bmi.n	8013a60 <_fflush_r+0xc>
 8013a96:	89a3      	ldrh	r3, [r4, #12]
 8013a98:	059b      	lsls	r3, r3, #22
 8013a9a:	d4e1      	bmi.n	8013a60 <_fflush_r+0xc>
 8013a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a9e:	f7fd fca4 	bl	80113ea <__retarget_lock_release_recursive>
 8013aa2:	e7dd      	b.n	8013a60 <_fflush_r+0xc>

08013aa4 <memmove>:
 8013aa4:	4288      	cmp	r0, r1
 8013aa6:	b510      	push	{r4, lr}
 8013aa8:	eb01 0402 	add.w	r4, r1, r2
 8013aac:	d902      	bls.n	8013ab4 <memmove+0x10>
 8013aae:	4284      	cmp	r4, r0
 8013ab0:	4623      	mov	r3, r4
 8013ab2:	d807      	bhi.n	8013ac4 <memmove+0x20>
 8013ab4:	1e43      	subs	r3, r0, #1
 8013ab6:	42a1      	cmp	r1, r4
 8013ab8:	d008      	beq.n	8013acc <memmove+0x28>
 8013aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ac2:	e7f8      	b.n	8013ab6 <memmove+0x12>
 8013ac4:	4402      	add	r2, r0
 8013ac6:	4601      	mov	r1, r0
 8013ac8:	428a      	cmp	r2, r1
 8013aca:	d100      	bne.n	8013ace <memmove+0x2a>
 8013acc:	bd10      	pop	{r4, pc}
 8013ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ad6:	e7f7      	b.n	8013ac8 <memmove+0x24>

08013ad8 <strncmp>:
 8013ad8:	b510      	push	{r4, lr}
 8013ada:	b16a      	cbz	r2, 8013af8 <strncmp+0x20>
 8013adc:	3901      	subs	r1, #1
 8013ade:	1884      	adds	r4, r0, r2
 8013ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ae4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d103      	bne.n	8013af4 <strncmp+0x1c>
 8013aec:	42a0      	cmp	r0, r4
 8013aee:	d001      	beq.n	8013af4 <strncmp+0x1c>
 8013af0:	2a00      	cmp	r2, #0
 8013af2:	d1f5      	bne.n	8013ae0 <strncmp+0x8>
 8013af4:	1ad0      	subs	r0, r2, r3
 8013af6:	bd10      	pop	{r4, pc}
 8013af8:	4610      	mov	r0, r2
 8013afa:	e7fc      	b.n	8013af6 <strncmp+0x1e>
 8013afc:	0000      	movs	r0, r0
	...

08013b00 <nan>:
 8013b00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b08 <nan+0x8>
 8013b04:	4770      	bx	lr
 8013b06:	bf00      	nop
 8013b08:	00000000 	.word	0x00000000
 8013b0c:	7ff80000 	.word	0x7ff80000

08013b10 <__assert_func>:
 8013b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b12:	4614      	mov	r4, r2
 8013b14:	461a      	mov	r2, r3
 8013b16:	4b09      	ldr	r3, [pc, #36]	; (8013b3c <__assert_func+0x2c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	4605      	mov	r5, r0
 8013b1c:	68d8      	ldr	r0, [r3, #12]
 8013b1e:	b14c      	cbz	r4, 8013b34 <__assert_func+0x24>
 8013b20:	4b07      	ldr	r3, [pc, #28]	; (8013b40 <__assert_func+0x30>)
 8013b22:	9100      	str	r1, [sp, #0]
 8013b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b28:	4906      	ldr	r1, [pc, #24]	; (8013b44 <__assert_func+0x34>)
 8013b2a:	462b      	mov	r3, r5
 8013b2c:	f000 fbca 	bl	80142c4 <fiprintf>
 8013b30:	f000 fbda 	bl	80142e8 <abort>
 8013b34:	4b04      	ldr	r3, [pc, #16]	; (8013b48 <__assert_func+0x38>)
 8013b36:	461c      	mov	r4, r3
 8013b38:	e7f3      	b.n	8013b22 <__assert_func+0x12>
 8013b3a:	bf00      	nop
 8013b3c:	2400006c 	.word	0x2400006c
 8013b40:	08014cc2 	.word	0x08014cc2
 8013b44:	08014ccf 	.word	0x08014ccf
 8013b48:	08014cfd 	.word	0x08014cfd

08013b4c <_calloc_r>:
 8013b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b4e:	fba1 2402 	umull	r2, r4, r1, r2
 8013b52:	b94c      	cbnz	r4, 8013b68 <_calloc_r+0x1c>
 8013b54:	4611      	mov	r1, r2
 8013b56:	9201      	str	r2, [sp, #4]
 8013b58:	f7fc fb50 	bl	80101fc <_malloc_r>
 8013b5c:	9a01      	ldr	r2, [sp, #4]
 8013b5e:	4605      	mov	r5, r0
 8013b60:	b930      	cbnz	r0, 8013b70 <_calloc_r+0x24>
 8013b62:	4628      	mov	r0, r5
 8013b64:	b003      	add	sp, #12
 8013b66:	bd30      	pop	{r4, r5, pc}
 8013b68:	220c      	movs	r2, #12
 8013b6a:	6002      	str	r2, [r0, #0]
 8013b6c:	2500      	movs	r5, #0
 8013b6e:	e7f8      	b.n	8013b62 <_calloc_r+0x16>
 8013b70:	4621      	mov	r1, r4
 8013b72:	f7fd fb56 	bl	8011222 <memset>
 8013b76:	e7f4      	b.n	8013b62 <_calloc_r+0x16>

08013b78 <rshift>:
 8013b78:	6903      	ldr	r3, [r0, #16]
 8013b7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013b86:	f100 0414 	add.w	r4, r0, #20
 8013b8a:	dd45      	ble.n	8013c18 <rshift+0xa0>
 8013b8c:	f011 011f 	ands.w	r1, r1, #31
 8013b90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013b94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013b98:	d10c      	bne.n	8013bb4 <rshift+0x3c>
 8013b9a:	f100 0710 	add.w	r7, r0, #16
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	42b1      	cmp	r1, r6
 8013ba2:	d334      	bcc.n	8013c0e <rshift+0x96>
 8013ba4:	1a9b      	subs	r3, r3, r2
 8013ba6:	009b      	lsls	r3, r3, #2
 8013ba8:	1eea      	subs	r2, r5, #3
 8013baa:	4296      	cmp	r6, r2
 8013bac:	bf38      	it	cc
 8013bae:	2300      	movcc	r3, #0
 8013bb0:	4423      	add	r3, r4
 8013bb2:	e015      	b.n	8013be0 <rshift+0x68>
 8013bb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013bb8:	f1c1 0820 	rsb	r8, r1, #32
 8013bbc:	40cf      	lsrs	r7, r1
 8013bbe:	f105 0e04 	add.w	lr, r5, #4
 8013bc2:	46a1      	mov	r9, r4
 8013bc4:	4576      	cmp	r6, lr
 8013bc6:	46f4      	mov	ip, lr
 8013bc8:	d815      	bhi.n	8013bf6 <rshift+0x7e>
 8013bca:	1a9a      	subs	r2, r3, r2
 8013bcc:	0092      	lsls	r2, r2, #2
 8013bce:	3a04      	subs	r2, #4
 8013bd0:	3501      	adds	r5, #1
 8013bd2:	42ae      	cmp	r6, r5
 8013bd4:	bf38      	it	cc
 8013bd6:	2200      	movcc	r2, #0
 8013bd8:	18a3      	adds	r3, r4, r2
 8013bda:	50a7      	str	r7, [r4, r2]
 8013bdc:	b107      	cbz	r7, 8013be0 <rshift+0x68>
 8013bde:	3304      	adds	r3, #4
 8013be0:	1b1a      	subs	r2, r3, r4
 8013be2:	42a3      	cmp	r3, r4
 8013be4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013be8:	bf08      	it	eq
 8013bea:	2300      	moveq	r3, #0
 8013bec:	6102      	str	r2, [r0, #16]
 8013bee:	bf08      	it	eq
 8013bf0:	6143      	streq	r3, [r0, #20]
 8013bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bf6:	f8dc c000 	ldr.w	ip, [ip]
 8013bfa:	fa0c fc08 	lsl.w	ip, ip, r8
 8013bfe:	ea4c 0707 	orr.w	r7, ip, r7
 8013c02:	f849 7b04 	str.w	r7, [r9], #4
 8013c06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c0a:	40cf      	lsrs	r7, r1
 8013c0c:	e7da      	b.n	8013bc4 <rshift+0x4c>
 8013c0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013c12:	f847 cf04 	str.w	ip, [r7, #4]!
 8013c16:	e7c3      	b.n	8013ba0 <rshift+0x28>
 8013c18:	4623      	mov	r3, r4
 8013c1a:	e7e1      	b.n	8013be0 <rshift+0x68>

08013c1c <__hexdig_fun>:
 8013c1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013c20:	2b09      	cmp	r3, #9
 8013c22:	d802      	bhi.n	8013c2a <__hexdig_fun+0xe>
 8013c24:	3820      	subs	r0, #32
 8013c26:	b2c0      	uxtb	r0, r0
 8013c28:	4770      	bx	lr
 8013c2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013c2e:	2b05      	cmp	r3, #5
 8013c30:	d801      	bhi.n	8013c36 <__hexdig_fun+0x1a>
 8013c32:	3847      	subs	r0, #71	; 0x47
 8013c34:	e7f7      	b.n	8013c26 <__hexdig_fun+0xa>
 8013c36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013c3a:	2b05      	cmp	r3, #5
 8013c3c:	d801      	bhi.n	8013c42 <__hexdig_fun+0x26>
 8013c3e:	3827      	subs	r0, #39	; 0x27
 8013c40:	e7f1      	b.n	8013c26 <__hexdig_fun+0xa>
 8013c42:	2000      	movs	r0, #0
 8013c44:	4770      	bx	lr
	...

08013c48 <__gethex>:
 8013c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c4c:	4617      	mov	r7, r2
 8013c4e:	680a      	ldr	r2, [r1, #0]
 8013c50:	b085      	sub	sp, #20
 8013c52:	f102 0b02 	add.w	fp, r2, #2
 8013c56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013c5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013c5e:	4681      	mov	r9, r0
 8013c60:	468a      	mov	sl, r1
 8013c62:	9302      	str	r3, [sp, #8]
 8013c64:	32fe      	adds	r2, #254	; 0xfe
 8013c66:	eb02 030b 	add.w	r3, r2, fp
 8013c6a:	46d8      	mov	r8, fp
 8013c6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013c70:	9301      	str	r3, [sp, #4]
 8013c72:	2830      	cmp	r0, #48	; 0x30
 8013c74:	d0f7      	beq.n	8013c66 <__gethex+0x1e>
 8013c76:	f7ff ffd1 	bl	8013c1c <__hexdig_fun>
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d138      	bne.n	8013cf2 <__gethex+0xaa>
 8013c80:	49a7      	ldr	r1, [pc, #668]	; (8013f20 <__gethex+0x2d8>)
 8013c82:	2201      	movs	r2, #1
 8013c84:	4640      	mov	r0, r8
 8013c86:	f7ff ff27 	bl	8013ad8 <strncmp>
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	d169      	bne.n	8013d64 <__gethex+0x11c>
 8013c90:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013c94:	465d      	mov	r5, fp
 8013c96:	f7ff ffc1 	bl	8013c1c <__hexdig_fun>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	d064      	beq.n	8013d68 <__gethex+0x120>
 8013c9e:	465a      	mov	r2, fp
 8013ca0:	7810      	ldrb	r0, [r2, #0]
 8013ca2:	2830      	cmp	r0, #48	; 0x30
 8013ca4:	4690      	mov	r8, r2
 8013ca6:	f102 0201 	add.w	r2, r2, #1
 8013caa:	d0f9      	beq.n	8013ca0 <__gethex+0x58>
 8013cac:	f7ff ffb6 	bl	8013c1c <__hexdig_fun>
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	fab0 f480 	clz	r4, r0
 8013cb6:	0964      	lsrs	r4, r4, #5
 8013cb8:	465e      	mov	r6, fp
 8013cba:	9301      	str	r3, [sp, #4]
 8013cbc:	4642      	mov	r2, r8
 8013cbe:	4615      	mov	r5, r2
 8013cc0:	3201      	adds	r2, #1
 8013cc2:	7828      	ldrb	r0, [r5, #0]
 8013cc4:	f7ff ffaa 	bl	8013c1c <__hexdig_fun>
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	d1f8      	bne.n	8013cbe <__gethex+0x76>
 8013ccc:	4994      	ldr	r1, [pc, #592]	; (8013f20 <__gethex+0x2d8>)
 8013cce:	2201      	movs	r2, #1
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	f7ff ff01 	bl	8013ad8 <strncmp>
 8013cd6:	b978      	cbnz	r0, 8013cf8 <__gethex+0xb0>
 8013cd8:	b946      	cbnz	r6, 8013cec <__gethex+0xa4>
 8013cda:	1c6e      	adds	r6, r5, #1
 8013cdc:	4632      	mov	r2, r6
 8013cde:	4615      	mov	r5, r2
 8013ce0:	3201      	adds	r2, #1
 8013ce2:	7828      	ldrb	r0, [r5, #0]
 8013ce4:	f7ff ff9a 	bl	8013c1c <__hexdig_fun>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	d1f8      	bne.n	8013cde <__gethex+0x96>
 8013cec:	1b73      	subs	r3, r6, r5
 8013cee:	009e      	lsls	r6, r3, #2
 8013cf0:	e004      	b.n	8013cfc <__gethex+0xb4>
 8013cf2:	2400      	movs	r4, #0
 8013cf4:	4626      	mov	r6, r4
 8013cf6:	e7e1      	b.n	8013cbc <__gethex+0x74>
 8013cf8:	2e00      	cmp	r6, #0
 8013cfa:	d1f7      	bne.n	8013cec <__gethex+0xa4>
 8013cfc:	782b      	ldrb	r3, [r5, #0]
 8013cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013d02:	2b50      	cmp	r3, #80	; 0x50
 8013d04:	d13d      	bne.n	8013d82 <__gethex+0x13a>
 8013d06:	786b      	ldrb	r3, [r5, #1]
 8013d08:	2b2b      	cmp	r3, #43	; 0x2b
 8013d0a:	d02f      	beq.n	8013d6c <__gethex+0x124>
 8013d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8013d0e:	d031      	beq.n	8013d74 <__gethex+0x12c>
 8013d10:	1c69      	adds	r1, r5, #1
 8013d12:	f04f 0b00 	mov.w	fp, #0
 8013d16:	7808      	ldrb	r0, [r1, #0]
 8013d18:	f7ff ff80 	bl	8013c1c <__hexdig_fun>
 8013d1c:	1e42      	subs	r2, r0, #1
 8013d1e:	b2d2      	uxtb	r2, r2
 8013d20:	2a18      	cmp	r2, #24
 8013d22:	d82e      	bhi.n	8013d82 <__gethex+0x13a>
 8013d24:	f1a0 0210 	sub.w	r2, r0, #16
 8013d28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013d2c:	f7ff ff76 	bl	8013c1c <__hexdig_fun>
 8013d30:	f100 3cff 	add.w	ip, r0, #4294967295
 8013d34:	fa5f fc8c 	uxtb.w	ip, ip
 8013d38:	f1bc 0f18 	cmp.w	ip, #24
 8013d3c:	d91d      	bls.n	8013d7a <__gethex+0x132>
 8013d3e:	f1bb 0f00 	cmp.w	fp, #0
 8013d42:	d000      	beq.n	8013d46 <__gethex+0xfe>
 8013d44:	4252      	negs	r2, r2
 8013d46:	4416      	add	r6, r2
 8013d48:	f8ca 1000 	str.w	r1, [sl]
 8013d4c:	b1dc      	cbz	r4, 8013d86 <__gethex+0x13e>
 8013d4e:	9b01      	ldr	r3, [sp, #4]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	bf14      	ite	ne
 8013d54:	f04f 0800 	movne.w	r8, #0
 8013d58:	f04f 0806 	moveq.w	r8, #6
 8013d5c:	4640      	mov	r0, r8
 8013d5e:	b005      	add	sp, #20
 8013d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d64:	4645      	mov	r5, r8
 8013d66:	4626      	mov	r6, r4
 8013d68:	2401      	movs	r4, #1
 8013d6a:	e7c7      	b.n	8013cfc <__gethex+0xb4>
 8013d6c:	f04f 0b00 	mov.w	fp, #0
 8013d70:	1ca9      	adds	r1, r5, #2
 8013d72:	e7d0      	b.n	8013d16 <__gethex+0xce>
 8013d74:	f04f 0b01 	mov.w	fp, #1
 8013d78:	e7fa      	b.n	8013d70 <__gethex+0x128>
 8013d7a:	230a      	movs	r3, #10
 8013d7c:	fb03 0002 	mla	r0, r3, r2, r0
 8013d80:	e7d0      	b.n	8013d24 <__gethex+0xdc>
 8013d82:	4629      	mov	r1, r5
 8013d84:	e7e0      	b.n	8013d48 <__gethex+0x100>
 8013d86:	eba5 0308 	sub.w	r3, r5, r8
 8013d8a:	3b01      	subs	r3, #1
 8013d8c:	4621      	mov	r1, r4
 8013d8e:	2b07      	cmp	r3, #7
 8013d90:	dc0a      	bgt.n	8013da8 <__gethex+0x160>
 8013d92:	4648      	mov	r0, r9
 8013d94:	f7fe f980 	bl	8012098 <_Balloc>
 8013d98:	4604      	mov	r4, r0
 8013d9a:	b940      	cbnz	r0, 8013dae <__gethex+0x166>
 8013d9c:	4b61      	ldr	r3, [pc, #388]	; (8013f24 <__gethex+0x2dc>)
 8013d9e:	4602      	mov	r2, r0
 8013da0:	21e4      	movs	r1, #228	; 0xe4
 8013da2:	4861      	ldr	r0, [pc, #388]	; (8013f28 <__gethex+0x2e0>)
 8013da4:	f7ff feb4 	bl	8013b10 <__assert_func>
 8013da8:	3101      	adds	r1, #1
 8013daa:	105b      	asrs	r3, r3, #1
 8013dac:	e7ef      	b.n	8013d8e <__gethex+0x146>
 8013dae:	f100 0a14 	add.w	sl, r0, #20
 8013db2:	2300      	movs	r3, #0
 8013db4:	495a      	ldr	r1, [pc, #360]	; (8013f20 <__gethex+0x2d8>)
 8013db6:	f8cd a004 	str.w	sl, [sp, #4]
 8013dba:	469b      	mov	fp, r3
 8013dbc:	45a8      	cmp	r8, r5
 8013dbe:	d342      	bcc.n	8013e46 <__gethex+0x1fe>
 8013dc0:	9801      	ldr	r0, [sp, #4]
 8013dc2:	f840 bb04 	str.w	fp, [r0], #4
 8013dc6:	eba0 000a 	sub.w	r0, r0, sl
 8013dca:	1080      	asrs	r0, r0, #2
 8013dcc:	6120      	str	r0, [r4, #16]
 8013dce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013dd2:	4658      	mov	r0, fp
 8013dd4:	f7fe fa52 	bl	801227c <__hi0bits>
 8013dd8:	683d      	ldr	r5, [r7, #0]
 8013dda:	eba8 0000 	sub.w	r0, r8, r0
 8013dde:	42a8      	cmp	r0, r5
 8013de0:	dd59      	ble.n	8013e96 <__gethex+0x24e>
 8013de2:	eba0 0805 	sub.w	r8, r0, r5
 8013de6:	4641      	mov	r1, r8
 8013de8:	4620      	mov	r0, r4
 8013dea:	f7fe fdde 	bl	80129aa <__any_on>
 8013dee:	4683      	mov	fp, r0
 8013df0:	b1b8      	cbz	r0, 8013e22 <__gethex+0x1da>
 8013df2:	f108 33ff 	add.w	r3, r8, #4294967295
 8013df6:	1159      	asrs	r1, r3, #5
 8013df8:	f003 021f 	and.w	r2, r3, #31
 8013dfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013e00:	f04f 0b01 	mov.w	fp, #1
 8013e04:	fa0b f202 	lsl.w	r2, fp, r2
 8013e08:	420a      	tst	r2, r1
 8013e0a:	d00a      	beq.n	8013e22 <__gethex+0x1da>
 8013e0c:	455b      	cmp	r3, fp
 8013e0e:	dd06      	ble.n	8013e1e <__gethex+0x1d6>
 8013e10:	f1a8 0102 	sub.w	r1, r8, #2
 8013e14:	4620      	mov	r0, r4
 8013e16:	f7fe fdc8 	bl	80129aa <__any_on>
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	d138      	bne.n	8013e90 <__gethex+0x248>
 8013e1e:	f04f 0b02 	mov.w	fp, #2
 8013e22:	4641      	mov	r1, r8
 8013e24:	4620      	mov	r0, r4
 8013e26:	f7ff fea7 	bl	8013b78 <rshift>
 8013e2a:	4446      	add	r6, r8
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	42b3      	cmp	r3, r6
 8013e30:	da41      	bge.n	8013eb6 <__gethex+0x26e>
 8013e32:	4621      	mov	r1, r4
 8013e34:	4648      	mov	r0, r9
 8013e36:	f7fe f96f 	bl	8012118 <_Bfree>
 8013e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	6013      	str	r3, [r2, #0]
 8013e40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013e44:	e78a      	b.n	8013d5c <__gethex+0x114>
 8013e46:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013e4a:	2a2e      	cmp	r2, #46	; 0x2e
 8013e4c:	d014      	beq.n	8013e78 <__gethex+0x230>
 8013e4e:	2b20      	cmp	r3, #32
 8013e50:	d106      	bne.n	8013e60 <__gethex+0x218>
 8013e52:	9b01      	ldr	r3, [sp, #4]
 8013e54:	f843 bb04 	str.w	fp, [r3], #4
 8013e58:	f04f 0b00 	mov.w	fp, #0
 8013e5c:	9301      	str	r3, [sp, #4]
 8013e5e:	465b      	mov	r3, fp
 8013e60:	7828      	ldrb	r0, [r5, #0]
 8013e62:	9303      	str	r3, [sp, #12]
 8013e64:	f7ff feda 	bl	8013c1c <__hexdig_fun>
 8013e68:	9b03      	ldr	r3, [sp, #12]
 8013e6a:	f000 000f 	and.w	r0, r0, #15
 8013e6e:	4098      	lsls	r0, r3
 8013e70:	ea4b 0b00 	orr.w	fp, fp, r0
 8013e74:	3304      	adds	r3, #4
 8013e76:	e7a1      	b.n	8013dbc <__gethex+0x174>
 8013e78:	45a8      	cmp	r8, r5
 8013e7a:	d8e8      	bhi.n	8013e4e <__gethex+0x206>
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	4628      	mov	r0, r5
 8013e80:	9303      	str	r3, [sp, #12]
 8013e82:	f7ff fe29 	bl	8013ad8 <strncmp>
 8013e86:	4926      	ldr	r1, [pc, #152]	; (8013f20 <__gethex+0x2d8>)
 8013e88:	9b03      	ldr	r3, [sp, #12]
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	d1df      	bne.n	8013e4e <__gethex+0x206>
 8013e8e:	e795      	b.n	8013dbc <__gethex+0x174>
 8013e90:	f04f 0b03 	mov.w	fp, #3
 8013e94:	e7c5      	b.n	8013e22 <__gethex+0x1da>
 8013e96:	da0b      	bge.n	8013eb0 <__gethex+0x268>
 8013e98:	eba5 0800 	sub.w	r8, r5, r0
 8013e9c:	4621      	mov	r1, r4
 8013e9e:	4642      	mov	r2, r8
 8013ea0:	4648      	mov	r0, r9
 8013ea2:	f7fe fb53 	bl	801254c <__lshift>
 8013ea6:	eba6 0608 	sub.w	r6, r6, r8
 8013eaa:	4604      	mov	r4, r0
 8013eac:	f100 0a14 	add.w	sl, r0, #20
 8013eb0:	f04f 0b00 	mov.w	fp, #0
 8013eb4:	e7ba      	b.n	8013e2c <__gethex+0x1e4>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	42b3      	cmp	r3, r6
 8013eba:	dd73      	ble.n	8013fa4 <__gethex+0x35c>
 8013ebc:	1b9e      	subs	r6, r3, r6
 8013ebe:	42b5      	cmp	r5, r6
 8013ec0:	dc34      	bgt.n	8013f2c <__gethex+0x2e4>
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2b02      	cmp	r3, #2
 8013ec6:	d023      	beq.n	8013f10 <__gethex+0x2c8>
 8013ec8:	2b03      	cmp	r3, #3
 8013eca:	d025      	beq.n	8013f18 <__gethex+0x2d0>
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d115      	bne.n	8013efc <__gethex+0x2b4>
 8013ed0:	42b5      	cmp	r5, r6
 8013ed2:	d113      	bne.n	8013efc <__gethex+0x2b4>
 8013ed4:	2d01      	cmp	r5, #1
 8013ed6:	d10b      	bne.n	8013ef0 <__gethex+0x2a8>
 8013ed8:	9a02      	ldr	r2, [sp, #8]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6013      	str	r3, [r2, #0]
 8013ede:	2301      	movs	r3, #1
 8013ee0:	6123      	str	r3, [r4, #16]
 8013ee2:	f8ca 3000 	str.w	r3, [sl]
 8013ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ee8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013eec:	601c      	str	r4, [r3, #0]
 8013eee:	e735      	b.n	8013d5c <__gethex+0x114>
 8013ef0:	1e69      	subs	r1, r5, #1
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f7fe fd59 	bl	80129aa <__any_on>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d1ed      	bne.n	8013ed8 <__gethex+0x290>
 8013efc:	4621      	mov	r1, r4
 8013efe:	4648      	mov	r0, r9
 8013f00:	f7fe f90a 	bl	8012118 <_Bfree>
 8013f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f06:	2300      	movs	r3, #0
 8013f08:	6013      	str	r3, [r2, #0]
 8013f0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013f0e:	e725      	b.n	8013d5c <__gethex+0x114>
 8013f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1f2      	bne.n	8013efc <__gethex+0x2b4>
 8013f16:	e7df      	b.n	8013ed8 <__gethex+0x290>
 8013f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1dc      	bne.n	8013ed8 <__gethex+0x290>
 8013f1e:	e7ed      	b.n	8013efc <__gethex+0x2b4>
 8013f20:	08014b54 	.word	0x08014b54
 8013f24:	080149e9 	.word	0x080149e9
 8013f28:	08014cfe 	.word	0x08014cfe
 8013f2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013f30:	f1bb 0f00 	cmp.w	fp, #0
 8013f34:	d133      	bne.n	8013f9e <__gethex+0x356>
 8013f36:	f1b8 0f00 	cmp.w	r8, #0
 8013f3a:	d004      	beq.n	8013f46 <__gethex+0x2fe>
 8013f3c:	4641      	mov	r1, r8
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f7fe fd33 	bl	80129aa <__any_on>
 8013f44:	4683      	mov	fp, r0
 8013f46:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013f50:	f008 081f 	and.w	r8, r8, #31
 8013f54:	fa03 f308 	lsl.w	r3, r3, r8
 8013f58:	4213      	tst	r3, r2
 8013f5a:	4631      	mov	r1, r6
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	bf18      	it	ne
 8013f60:	f04b 0b02 	orrne.w	fp, fp, #2
 8013f64:	1bad      	subs	r5, r5, r6
 8013f66:	f7ff fe07 	bl	8013b78 <rshift>
 8013f6a:	687e      	ldr	r6, [r7, #4]
 8013f6c:	f04f 0802 	mov.w	r8, #2
 8013f70:	f1bb 0f00 	cmp.w	fp, #0
 8013f74:	d04a      	beq.n	801400c <__gethex+0x3c4>
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2b02      	cmp	r3, #2
 8013f7a:	d016      	beq.n	8013faa <__gethex+0x362>
 8013f7c:	2b03      	cmp	r3, #3
 8013f7e:	d018      	beq.n	8013fb2 <__gethex+0x36a>
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d109      	bne.n	8013f98 <__gethex+0x350>
 8013f84:	f01b 0f02 	tst.w	fp, #2
 8013f88:	d006      	beq.n	8013f98 <__gethex+0x350>
 8013f8a:	f8da 3000 	ldr.w	r3, [sl]
 8013f8e:	ea4b 0b03 	orr.w	fp, fp, r3
 8013f92:	f01b 0f01 	tst.w	fp, #1
 8013f96:	d10f      	bne.n	8013fb8 <__gethex+0x370>
 8013f98:	f048 0810 	orr.w	r8, r8, #16
 8013f9c:	e036      	b.n	801400c <__gethex+0x3c4>
 8013f9e:	f04f 0b01 	mov.w	fp, #1
 8013fa2:	e7d0      	b.n	8013f46 <__gethex+0x2fe>
 8013fa4:	f04f 0801 	mov.w	r8, #1
 8013fa8:	e7e2      	b.n	8013f70 <__gethex+0x328>
 8013faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fac:	f1c3 0301 	rsb	r3, r3, #1
 8013fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d0ef      	beq.n	8013f98 <__gethex+0x350>
 8013fb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013fbc:	f104 0214 	add.w	r2, r4, #20
 8013fc0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013fca:	2300      	movs	r3, #0
 8013fcc:	4694      	mov	ip, r2
 8013fce:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fd2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013fd6:	d01e      	beq.n	8014016 <__gethex+0x3ce>
 8013fd8:	3101      	adds	r1, #1
 8013fda:	f8cc 1000 	str.w	r1, [ip]
 8013fde:	f1b8 0f02 	cmp.w	r8, #2
 8013fe2:	f104 0214 	add.w	r2, r4, #20
 8013fe6:	d13d      	bne.n	8014064 <__gethex+0x41c>
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	3b01      	subs	r3, #1
 8013fec:	42ab      	cmp	r3, r5
 8013fee:	d10b      	bne.n	8014008 <__gethex+0x3c0>
 8013ff0:	1169      	asrs	r1, r5, #5
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	f005 051f 	and.w	r5, r5, #31
 8013ff8:	fa03 f505 	lsl.w	r5, r3, r5
 8013ffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014000:	421d      	tst	r5, r3
 8014002:	bf18      	it	ne
 8014004:	f04f 0801 	movne.w	r8, #1
 8014008:	f048 0820 	orr.w	r8, r8, #32
 801400c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801400e:	601c      	str	r4, [r3, #0]
 8014010:	9b02      	ldr	r3, [sp, #8]
 8014012:	601e      	str	r6, [r3, #0]
 8014014:	e6a2      	b.n	8013d5c <__gethex+0x114>
 8014016:	4290      	cmp	r0, r2
 8014018:	f842 3c04 	str.w	r3, [r2, #-4]
 801401c:	d8d6      	bhi.n	8013fcc <__gethex+0x384>
 801401e:	68a2      	ldr	r2, [r4, #8]
 8014020:	4593      	cmp	fp, r2
 8014022:	db17      	blt.n	8014054 <__gethex+0x40c>
 8014024:	6861      	ldr	r1, [r4, #4]
 8014026:	4648      	mov	r0, r9
 8014028:	3101      	adds	r1, #1
 801402a:	f7fe f835 	bl	8012098 <_Balloc>
 801402e:	4682      	mov	sl, r0
 8014030:	b918      	cbnz	r0, 801403a <__gethex+0x3f2>
 8014032:	4b1b      	ldr	r3, [pc, #108]	; (80140a0 <__gethex+0x458>)
 8014034:	4602      	mov	r2, r0
 8014036:	2184      	movs	r1, #132	; 0x84
 8014038:	e6b3      	b.n	8013da2 <__gethex+0x15a>
 801403a:	6922      	ldr	r2, [r4, #16]
 801403c:	3202      	adds	r2, #2
 801403e:	f104 010c 	add.w	r1, r4, #12
 8014042:	0092      	lsls	r2, r2, #2
 8014044:	300c      	adds	r0, #12
 8014046:	f7fd f9d1 	bl	80113ec <memcpy>
 801404a:	4621      	mov	r1, r4
 801404c:	4648      	mov	r0, r9
 801404e:	f7fe f863 	bl	8012118 <_Bfree>
 8014052:	4654      	mov	r4, sl
 8014054:	6922      	ldr	r2, [r4, #16]
 8014056:	1c51      	adds	r1, r2, #1
 8014058:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801405c:	6121      	str	r1, [r4, #16]
 801405e:	2101      	movs	r1, #1
 8014060:	6151      	str	r1, [r2, #20]
 8014062:	e7bc      	b.n	8013fde <__gethex+0x396>
 8014064:	6921      	ldr	r1, [r4, #16]
 8014066:	4559      	cmp	r1, fp
 8014068:	dd0b      	ble.n	8014082 <__gethex+0x43a>
 801406a:	2101      	movs	r1, #1
 801406c:	4620      	mov	r0, r4
 801406e:	f7ff fd83 	bl	8013b78 <rshift>
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	3601      	adds	r6, #1
 8014076:	42b3      	cmp	r3, r6
 8014078:	f6ff aedb 	blt.w	8013e32 <__gethex+0x1ea>
 801407c:	f04f 0801 	mov.w	r8, #1
 8014080:	e7c2      	b.n	8014008 <__gethex+0x3c0>
 8014082:	f015 051f 	ands.w	r5, r5, #31
 8014086:	d0f9      	beq.n	801407c <__gethex+0x434>
 8014088:	9b01      	ldr	r3, [sp, #4]
 801408a:	441a      	add	r2, r3
 801408c:	f1c5 0520 	rsb	r5, r5, #32
 8014090:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014094:	f7fe f8f2 	bl	801227c <__hi0bits>
 8014098:	42a8      	cmp	r0, r5
 801409a:	dbe6      	blt.n	801406a <__gethex+0x422>
 801409c:	e7ee      	b.n	801407c <__gethex+0x434>
 801409e:	bf00      	nop
 80140a0:	080149e9 	.word	0x080149e9

080140a4 <L_shift>:
 80140a4:	f1c2 0208 	rsb	r2, r2, #8
 80140a8:	0092      	lsls	r2, r2, #2
 80140aa:	b570      	push	{r4, r5, r6, lr}
 80140ac:	f1c2 0620 	rsb	r6, r2, #32
 80140b0:	6843      	ldr	r3, [r0, #4]
 80140b2:	6804      	ldr	r4, [r0, #0]
 80140b4:	fa03 f506 	lsl.w	r5, r3, r6
 80140b8:	432c      	orrs	r4, r5
 80140ba:	40d3      	lsrs	r3, r2
 80140bc:	6004      	str	r4, [r0, #0]
 80140be:	f840 3f04 	str.w	r3, [r0, #4]!
 80140c2:	4288      	cmp	r0, r1
 80140c4:	d3f4      	bcc.n	80140b0 <L_shift+0xc>
 80140c6:	bd70      	pop	{r4, r5, r6, pc}

080140c8 <__match>:
 80140c8:	b530      	push	{r4, r5, lr}
 80140ca:	6803      	ldr	r3, [r0, #0]
 80140cc:	3301      	adds	r3, #1
 80140ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140d2:	b914      	cbnz	r4, 80140da <__match+0x12>
 80140d4:	6003      	str	r3, [r0, #0]
 80140d6:	2001      	movs	r0, #1
 80140d8:	bd30      	pop	{r4, r5, pc}
 80140da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80140e2:	2d19      	cmp	r5, #25
 80140e4:	bf98      	it	ls
 80140e6:	3220      	addls	r2, #32
 80140e8:	42a2      	cmp	r2, r4
 80140ea:	d0f0      	beq.n	80140ce <__match+0x6>
 80140ec:	2000      	movs	r0, #0
 80140ee:	e7f3      	b.n	80140d8 <__match+0x10>

080140f0 <__hexnan>:
 80140f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f4:	680b      	ldr	r3, [r1, #0]
 80140f6:	6801      	ldr	r1, [r0, #0]
 80140f8:	115e      	asrs	r6, r3, #5
 80140fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80140fe:	f013 031f 	ands.w	r3, r3, #31
 8014102:	b087      	sub	sp, #28
 8014104:	bf18      	it	ne
 8014106:	3604      	addne	r6, #4
 8014108:	2500      	movs	r5, #0
 801410a:	1f37      	subs	r7, r6, #4
 801410c:	4682      	mov	sl, r0
 801410e:	4690      	mov	r8, r2
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	f846 5c04 	str.w	r5, [r6, #-4]
 8014116:	46b9      	mov	r9, r7
 8014118:	463c      	mov	r4, r7
 801411a:	9502      	str	r5, [sp, #8]
 801411c:	46ab      	mov	fp, r5
 801411e:	784a      	ldrb	r2, [r1, #1]
 8014120:	1c4b      	adds	r3, r1, #1
 8014122:	9303      	str	r3, [sp, #12]
 8014124:	b342      	cbz	r2, 8014178 <__hexnan+0x88>
 8014126:	4610      	mov	r0, r2
 8014128:	9105      	str	r1, [sp, #20]
 801412a:	9204      	str	r2, [sp, #16]
 801412c:	f7ff fd76 	bl	8013c1c <__hexdig_fun>
 8014130:	2800      	cmp	r0, #0
 8014132:	d14f      	bne.n	80141d4 <__hexnan+0xe4>
 8014134:	9a04      	ldr	r2, [sp, #16]
 8014136:	9905      	ldr	r1, [sp, #20]
 8014138:	2a20      	cmp	r2, #32
 801413a:	d818      	bhi.n	801416e <__hexnan+0x7e>
 801413c:	9b02      	ldr	r3, [sp, #8]
 801413e:	459b      	cmp	fp, r3
 8014140:	dd13      	ble.n	801416a <__hexnan+0x7a>
 8014142:	454c      	cmp	r4, r9
 8014144:	d206      	bcs.n	8014154 <__hexnan+0x64>
 8014146:	2d07      	cmp	r5, #7
 8014148:	dc04      	bgt.n	8014154 <__hexnan+0x64>
 801414a:	462a      	mov	r2, r5
 801414c:	4649      	mov	r1, r9
 801414e:	4620      	mov	r0, r4
 8014150:	f7ff ffa8 	bl	80140a4 <L_shift>
 8014154:	4544      	cmp	r4, r8
 8014156:	d950      	bls.n	80141fa <__hexnan+0x10a>
 8014158:	2300      	movs	r3, #0
 801415a:	f1a4 0904 	sub.w	r9, r4, #4
 801415e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014162:	f8cd b008 	str.w	fp, [sp, #8]
 8014166:	464c      	mov	r4, r9
 8014168:	461d      	mov	r5, r3
 801416a:	9903      	ldr	r1, [sp, #12]
 801416c:	e7d7      	b.n	801411e <__hexnan+0x2e>
 801416e:	2a29      	cmp	r2, #41	; 0x29
 8014170:	d155      	bne.n	801421e <__hexnan+0x12e>
 8014172:	3102      	adds	r1, #2
 8014174:	f8ca 1000 	str.w	r1, [sl]
 8014178:	f1bb 0f00 	cmp.w	fp, #0
 801417c:	d04f      	beq.n	801421e <__hexnan+0x12e>
 801417e:	454c      	cmp	r4, r9
 8014180:	d206      	bcs.n	8014190 <__hexnan+0xa0>
 8014182:	2d07      	cmp	r5, #7
 8014184:	dc04      	bgt.n	8014190 <__hexnan+0xa0>
 8014186:	462a      	mov	r2, r5
 8014188:	4649      	mov	r1, r9
 801418a:	4620      	mov	r0, r4
 801418c:	f7ff ff8a 	bl	80140a4 <L_shift>
 8014190:	4544      	cmp	r4, r8
 8014192:	d934      	bls.n	80141fe <__hexnan+0x10e>
 8014194:	f1a8 0204 	sub.w	r2, r8, #4
 8014198:	4623      	mov	r3, r4
 801419a:	f853 1b04 	ldr.w	r1, [r3], #4
 801419e:	f842 1f04 	str.w	r1, [r2, #4]!
 80141a2:	429f      	cmp	r7, r3
 80141a4:	d2f9      	bcs.n	801419a <__hexnan+0xaa>
 80141a6:	1b3b      	subs	r3, r7, r4
 80141a8:	f023 0303 	bic.w	r3, r3, #3
 80141ac:	3304      	adds	r3, #4
 80141ae:	3e03      	subs	r6, #3
 80141b0:	3401      	adds	r4, #1
 80141b2:	42a6      	cmp	r6, r4
 80141b4:	bf38      	it	cc
 80141b6:	2304      	movcc	r3, #4
 80141b8:	4443      	add	r3, r8
 80141ba:	2200      	movs	r2, #0
 80141bc:	f843 2b04 	str.w	r2, [r3], #4
 80141c0:	429f      	cmp	r7, r3
 80141c2:	d2fb      	bcs.n	80141bc <__hexnan+0xcc>
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	b91b      	cbnz	r3, 80141d0 <__hexnan+0xe0>
 80141c8:	4547      	cmp	r7, r8
 80141ca:	d126      	bne.n	801421a <__hexnan+0x12a>
 80141cc:	2301      	movs	r3, #1
 80141ce:	603b      	str	r3, [r7, #0]
 80141d0:	2005      	movs	r0, #5
 80141d2:	e025      	b.n	8014220 <__hexnan+0x130>
 80141d4:	3501      	adds	r5, #1
 80141d6:	2d08      	cmp	r5, #8
 80141d8:	f10b 0b01 	add.w	fp, fp, #1
 80141dc:	dd06      	ble.n	80141ec <__hexnan+0xfc>
 80141de:	4544      	cmp	r4, r8
 80141e0:	d9c3      	bls.n	801416a <__hexnan+0x7a>
 80141e2:	2300      	movs	r3, #0
 80141e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80141e8:	2501      	movs	r5, #1
 80141ea:	3c04      	subs	r4, #4
 80141ec:	6822      	ldr	r2, [r4, #0]
 80141ee:	f000 000f 	and.w	r0, r0, #15
 80141f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80141f6:	6020      	str	r0, [r4, #0]
 80141f8:	e7b7      	b.n	801416a <__hexnan+0x7a>
 80141fa:	2508      	movs	r5, #8
 80141fc:	e7b5      	b.n	801416a <__hexnan+0x7a>
 80141fe:	9b01      	ldr	r3, [sp, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d0df      	beq.n	80141c4 <__hexnan+0xd4>
 8014204:	f1c3 0320 	rsb	r3, r3, #32
 8014208:	f04f 32ff 	mov.w	r2, #4294967295
 801420c:	40da      	lsrs	r2, r3
 801420e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014212:	4013      	ands	r3, r2
 8014214:	f846 3c04 	str.w	r3, [r6, #-4]
 8014218:	e7d4      	b.n	80141c4 <__hexnan+0xd4>
 801421a:	3f04      	subs	r7, #4
 801421c:	e7d2      	b.n	80141c4 <__hexnan+0xd4>
 801421e:	2004      	movs	r0, #4
 8014220:	b007      	add	sp, #28
 8014222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014226 <__ascii_mbtowc>:
 8014226:	b082      	sub	sp, #8
 8014228:	b901      	cbnz	r1, 801422c <__ascii_mbtowc+0x6>
 801422a:	a901      	add	r1, sp, #4
 801422c:	b142      	cbz	r2, 8014240 <__ascii_mbtowc+0x1a>
 801422e:	b14b      	cbz	r3, 8014244 <__ascii_mbtowc+0x1e>
 8014230:	7813      	ldrb	r3, [r2, #0]
 8014232:	600b      	str	r3, [r1, #0]
 8014234:	7812      	ldrb	r2, [r2, #0]
 8014236:	1e10      	subs	r0, r2, #0
 8014238:	bf18      	it	ne
 801423a:	2001      	movne	r0, #1
 801423c:	b002      	add	sp, #8
 801423e:	4770      	bx	lr
 8014240:	4610      	mov	r0, r2
 8014242:	e7fb      	b.n	801423c <__ascii_mbtowc+0x16>
 8014244:	f06f 0001 	mvn.w	r0, #1
 8014248:	e7f8      	b.n	801423c <__ascii_mbtowc+0x16>

0801424a <_realloc_r>:
 801424a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801424e:	4680      	mov	r8, r0
 8014250:	4614      	mov	r4, r2
 8014252:	460e      	mov	r6, r1
 8014254:	b921      	cbnz	r1, 8014260 <_realloc_r+0x16>
 8014256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801425a:	4611      	mov	r1, r2
 801425c:	f7fb bfce 	b.w	80101fc <_malloc_r>
 8014260:	b92a      	cbnz	r2, 801426e <_realloc_r+0x24>
 8014262:	f7fd fecd 	bl	8012000 <_free_r>
 8014266:	4625      	mov	r5, r4
 8014268:	4628      	mov	r0, r5
 801426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801426e:	f000 f842 	bl	80142f6 <_malloc_usable_size_r>
 8014272:	4284      	cmp	r4, r0
 8014274:	4607      	mov	r7, r0
 8014276:	d802      	bhi.n	801427e <_realloc_r+0x34>
 8014278:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801427c:	d812      	bhi.n	80142a4 <_realloc_r+0x5a>
 801427e:	4621      	mov	r1, r4
 8014280:	4640      	mov	r0, r8
 8014282:	f7fb ffbb 	bl	80101fc <_malloc_r>
 8014286:	4605      	mov	r5, r0
 8014288:	2800      	cmp	r0, #0
 801428a:	d0ed      	beq.n	8014268 <_realloc_r+0x1e>
 801428c:	42bc      	cmp	r4, r7
 801428e:	4622      	mov	r2, r4
 8014290:	4631      	mov	r1, r6
 8014292:	bf28      	it	cs
 8014294:	463a      	movcs	r2, r7
 8014296:	f7fd f8a9 	bl	80113ec <memcpy>
 801429a:	4631      	mov	r1, r6
 801429c:	4640      	mov	r0, r8
 801429e:	f7fd feaf 	bl	8012000 <_free_r>
 80142a2:	e7e1      	b.n	8014268 <_realloc_r+0x1e>
 80142a4:	4635      	mov	r5, r6
 80142a6:	e7df      	b.n	8014268 <_realloc_r+0x1e>

080142a8 <__ascii_wctomb>:
 80142a8:	b149      	cbz	r1, 80142be <__ascii_wctomb+0x16>
 80142aa:	2aff      	cmp	r2, #255	; 0xff
 80142ac:	bf85      	ittet	hi
 80142ae:	238a      	movhi	r3, #138	; 0x8a
 80142b0:	6003      	strhi	r3, [r0, #0]
 80142b2:	700a      	strbls	r2, [r1, #0]
 80142b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80142b8:	bf98      	it	ls
 80142ba:	2001      	movls	r0, #1
 80142bc:	4770      	bx	lr
 80142be:	4608      	mov	r0, r1
 80142c0:	4770      	bx	lr
	...

080142c4 <fiprintf>:
 80142c4:	b40e      	push	{r1, r2, r3}
 80142c6:	b503      	push	{r0, r1, lr}
 80142c8:	4601      	mov	r1, r0
 80142ca:	ab03      	add	r3, sp, #12
 80142cc:	4805      	ldr	r0, [pc, #20]	; (80142e4 <fiprintf+0x20>)
 80142ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80142d2:	6800      	ldr	r0, [r0, #0]
 80142d4:	9301      	str	r3, [sp, #4]
 80142d6:	f000 f83f 	bl	8014358 <_vfiprintf_r>
 80142da:	b002      	add	sp, #8
 80142dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80142e0:	b003      	add	sp, #12
 80142e2:	4770      	bx	lr
 80142e4:	2400006c 	.word	0x2400006c

080142e8 <abort>:
 80142e8:	b508      	push	{r3, lr}
 80142ea:	2006      	movs	r0, #6
 80142ec:	f000 fa0c 	bl	8014708 <raise>
 80142f0:	2001      	movs	r0, #1
 80142f2:	f7ed fe9b 	bl	800202c <_exit>

080142f6 <_malloc_usable_size_r>:
 80142f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142fa:	1f18      	subs	r0, r3, #4
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	bfbc      	itt	lt
 8014300:	580b      	ldrlt	r3, [r1, r0]
 8014302:	18c0      	addlt	r0, r0, r3
 8014304:	4770      	bx	lr

08014306 <__sfputc_r>:
 8014306:	6893      	ldr	r3, [r2, #8]
 8014308:	3b01      	subs	r3, #1
 801430a:	2b00      	cmp	r3, #0
 801430c:	b410      	push	{r4}
 801430e:	6093      	str	r3, [r2, #8]
 8014310:	da08      	bge.n	8014324 <__sfputc_r+0x1e>
 8014312:	6994      	ldr	r4, [r2, #24]
 8014314:	42a3      	cmp	r3, r4
 8014316:	db01      	blt.n	801431c <__sfputc_r+0x16>
 8014318:	290a      	cmp	r1, #10
 801431a:	d103      	bne.n	8014324 <__sfputc_r+0x1e>
 801431c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014320:	f000 b934 	b.w	801458c <__swbuf_r>
 8014324:	6813      	ldr	r3, [r2, #0]
 8014326:	1c58      	adds	r0, r3, #1
 8014328:	6010      	str	r0, [r2, #0]
 801432a:	7019      	strb	r1, [r3, #0]
 801432c:	4608      	mov	r0, r1
 801432e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014332:	4770      	bx	lr

08014334 <__sfputs_r>:
 8014334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014336:	4606      	mov	r6, r0
 8014338:	460f      	mov	r7, r1
 801433a:	4614      	mov	r4, r2
 801433c:	18d5      	adds	r5, r2, r3
 801433e:	42ac      	cmp	r4, r5
 8014340:	d101      	bne.n	8014346 <__sfputs_r+0x12>
 8014342:	2000      	movs	r0, #0
 8014344:	e007      	b.n	8014356 <__sfputs_r+0x22>
 8014346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801434a:	463a      	mov	r2, r7
 801434c:	4630      	mov	r0, r6
 801434e:	f7ff ffda 	bl	8014306 <__sfputc_r>
 8014352:	1c43      	adds	r3, r0, #1
 8014354:	d1f3      	bne.n	801433e <__sfputs_r+0xa>
 8014356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014358 <_vfiprintf_r>:
 8014358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801435c:	460d      	mov	r5, r1
 801435e:	b09d      	sub	sp, #116	; 0x74
 8014360:	4614      	mov	r4, r2
 8014362:	4698      	mov	r8, r3
 8014364:	4606      	mov	r6, r0
 8014366:	b118      	cbz	r0, 8014370 <_vfiprintf_r+0x18>
 8014368:	6a03      	ldr	r3, [r0, #32]
 801436a:	b90b      	cbnz	r3, 8014370 <_vfiprintf_r+0x18>
 801436c:	f7fc fe8c 	bl	8011088 <__sinit>
 8014370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014372:	07d9      	lsls	r1, r3, #31
 8014374:	d405      	bmi.n	8014382 <_vfiprintf_r+0x2a>
 8014376:	89ab      	ldrh	r3, [r5, #12]
 8014378:	059a      	lsls	r2, r3, #22
 801437a:	d402      	bmi.n	8014382 <_vfiprintf_r+0x2a>
 801437c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801437e:	f7fd f833 	bl	80113e8 <__retarget_lock_acquire_recursive>
 8014382:	89ab      	ldrh	r3, [r5, #12]
 8014384:	071b      	lsls	r3, r3, #28
 8014386:	d501      	bpl.n	801438c <_vfiprintf_r+0x34>
 8014388:	692b      	ldr	r3, [r5, #16]
 801438a:	b99b      	cbnz	r3, 80143b4 <_vfiprintf_r+0x5c>
 801438c:	4629      	mov	r1, r5
 801438e:	4630      	mov	r0, r6
 8014390:	f000 f93a 	bl	8014608 <__swsetup_r>
 8014394:	b170      	cbz	r0, 80143b4 <_vfiprintf_r+0x5c>
 8014396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014398:	07dc      	lsls	r4, r3, #31
 801439a:	d504      	bpl.n	80143a6 <_vfiprintf_r+0x4e>
 801439c:	f04f 30ff 	mov.w	r0, #4294967295
 80143a0:	b01d      	add	sp, #116	; 0x74
 80143a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a6:	89ab      	ldrh	r3, [r5, #12]
 80143a8:	0598      	lsls	r0, r3, #22
 80143aa:	d4f7      	bmi.n	801439c <_vfiprintf_r+0x44>
 80143ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143ae:	f7fd f81c 	bl	80113ea <__retarget_lock_release_recursive>
 80143b2:	e7f3      	b.n	801439c <_vfiprintf_r+0x44>
 80143b4:	2300      	movs	r3, #0
 80143b6:	9309      	str	r3, [sp, #36]	; 0x24
 80143b8:	2320      	movs	r3, #32
 80143ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143be:	f8cd 800c 	str.w	r8, [sp, #12]
 80143c2:	2330      	movs	r3, #48	; 0x30
 80143c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014578 <_vfiprintf_r+0x220>
 80143c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143cc:	f04f 0901 	mov.w	r9, #1
 80143d0:	4623      	mov	r3, r4
 80143d2:	469a      	mov	sl, r3
 80143d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143d8:	b10a      	cbz	r2, 80143de <_vfiprintf_r+0x86>
 80143da:	2a25      	cmp	r2, #37	; 0x25
 80143dc:	d1f9      	bne.n	80143d2 <_vfiprintf_r+0x7a>
 80143de:	ebba 0b04 	subs.w	fp, sl, r4
 80143e2:	d00b      	beq.n	80143fc <_vfiprintf_r+0xa4>
 80143e4:	465b      	mov	r3, fp
 80143e6:	4622      	mov	r2, r4
 80143e8:	4629      	mov	r1, r5
 80143ea:	4630      	mov	r0, r6
 80143ec:	f7ff ffa2 	bl	8014334 <__sfputs_r>
 80143f0:	3001      	adds	r0, #1
 80143f2:	f000 80a9 	beq.w	8014548 <_vfiprintf_r+0x1f0>
 80143f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143f8:	445a      	add	r2, fp
 80143fa:	9209      	str	r2, [sp, #36]	; 0x24
 80143fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014400:	2b00      	cmp	r3, #0
 8014402:	f000 80a1 	beq.w	8014548 <_vfiprintf_r+0x1f0>
 8014406:	2300      	movs	r3, #0
 8014408:	f04f 32ff 	mov.w	r2, #4294967295
 801440c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014410:	f10a 0a01 	add.w	sl, sl, #1
 8014414:	9304      	str	r3, [sp, #16]
 8014416:	9307      	str	r3, [sp, #28]
 8014418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801441c:	931a      	str	r3, [sp, #104]	; 0x68
 801441e:	4654      	mov	r4, sl
 8014420:	2205      	movs	r2, #5
 8014422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014426:	4854      	ldr	r0, [pc, #336]	; (8014578 <_vfiprintf_r+0x220>)
 8014428:	f7eb ff5a 	bl	80002e0 <memchr>
 801442c:	9a04      	ldr	r2, [sp, #16]
 801442e:	b9d8      	cbnz	r0, 8014468 <_vfiprintf_r+0x110>
 8014430:	06d1      	lsls	r1, r2, #27
 8014432:	bf44      	itt	mi
 8014434:	2320      	movmi	r3, #32
 8014436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801443a:	0713      	lsls	r3, r2, #28
 801443c:	bf44      	itt	mi
 801443e:	232b      	movmi	r3, #43	; 0x2b
 8014440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014444:	f89a 3000 	ldrb.w	r3, [sl]
 8014448:	2b2a      	cmp	r3, #42	; 0x2a
 801444a:	d015      	beq.n	8014478 <_vfiprintf_r+0x120>
 801444c:	9a07      	ldr	r2, [sp, #28]
 801444e:	4654      	mov	r4, sl
 8014450:	2000      	movs	r0, #0
 8014452:	f04f 0c0a 	mov.w	ip, #10
 8014456:	4621      	mov	r1, r4
 8014458:	f811 3b01 	ldrb.w	r3, [r1], #1
 801445c:	3b30      	subs	r3, #48	; 0x30
 801445e:	2b09      	cmp	r3, #9
 8014460:	d94d      	bls.n	80144fe <_vfiprintf_r+0x1a6>
 8014462:	b1b0      	cbz	r0, 8014492 <_vfiprintf_r+0x13a>
 8014464:	9207      	str	r2, [sp, #28]
 8014466:	e014      	b.n	8014492 <_vfiprintf_r+0x13a>
 8014468:	eba0 0308 	sub.w	r3, r0, r8
 801446c:	fa09 f303 	lsl.w	r3, r9, r3
 8014470:	4313      	orrs	r3, r2
 8014472:	9304      	str	r3, [sp, #16]
 8014474:	46a2      	mov	sl, r4
 8014476:	e7d2      	b.n	801441e <_vfiprintf_r+0xc6>
 8014478:	9b03      	ldr	r3, [sp, #12]
 801447a:	1d19      	adds	r1, r3, #4
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	9103      	str	r1, [sp, #12]
 8014480:	2b00      	cmp	r3, #0
 8014482:	bfbb      	ittet	lt
 8014484:	425b      	neglt	r3, r3
 8014486:	f042 0202 	orrlt.w	r2, r2, #2
 801448a:	9307      	strge	r3, [sp, #28]
 801448c:	9307      	strlt	r3, [sp, #28]
 801448e:	bfb8      	it	lt
 8014490:	9204      	strlt	r2, [sp, #16]
 8014492:	7823      	ldrb	r3, [r4, #0]
 8014494:	2b2e      	cmp	r3, #46	; 0x2e
 8014496:	d10c      	bne.n	80144b2 <_vfiprintf_r+0x15a>
 8014498:	7863      	ldrb	r3, [r4, #1]
 801449a:	2b2a      	cmp	r3, #42	; 0x2a
 801449c:	d134      	bne.n	8014508 <_vfiprintf_r+0x1b0>
 801449e:	9b03      	ldr	r3, [sp, #12]
 80144a0:	1d1a      	adds	r2, r3, #4
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	9203      	str	r2, [sp, #12]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	bfb8      	it	lt
 80144aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80144ae:	3402      	adds	r4, #2
 80144b0:	9305      	str	r3, [sp, #20]
 80144b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014588 <_vfiprintf_r+0x230>
 80144b6:	7821      	ldrb	r1, [r4, #0]
 80144b8:	2203      	movs	r2, #3
 80144ba:	4650      	mov	r0, sl
 80144bc:	f7eb ff10 	bl	80002e0 <memchr>
 80144c0:	b138      	cbz	r0, 80144d2 <_vfiprintf_r+0x17a>
 80144c2:	9b04      	ldr	r3, [sp, #16]
 80144c4:	eba0 000a 	sub.w	r0, r0, sl
 80144c8:	2240      	movs	r2, #64	; 0x40
 80144ca:	4082      	lsls	r2, r0
 80144cc:	4313      	orrs	r3, r2
 80144ce:	3401      	adds	r4, #1
 80144d0:	9304      	str	r3, [sp, #16]
 80144d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144d6:	4829      	ldr	r0, [pc, #164]	; (801457c <_vfiprintf_r+0x224>)
 80144d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144dc:	2206      	movs	r2, #6
 80144de:	f7eb feff 	bl	80002e0 <memchr>
 80144e2:	2800      	cmp	r0, #0
 80144e4:	d03f      	beq.n	8014566 <_vfiprintf_r+0x20e>
 80144e6:	4b26      	ldr	r3, [pc, #152]	; (8014580 <_vfiprintf_r+0x228>)
 80144e8:	bb1b      	cbnz	r3, 8014532 <_vfiprintf_r+0x1da>
 80144ea:	9b03      	ldr	r3, [sp, #12]
 80144ec:	3307      	adds	r3, #7
 80144ee:	f023 0307 	bic.w	r3, r3, #7
 80144f2:	3308      	adds	r3, #8
 80144f4:	9303      	str	r3, [sp, #12]
 80144f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144f8:	443b      	add	r3, r7
 80144fa:	9309      	str	r3, [sp, #36]	; 0x24
 80144fc:	e768      	b.n	80143d0 <_vfiprintf_r+0x78>
 80144fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014502:	460c      	mov	r4, r1
 8014504:	2001      	movs	r0, #1
 8014506:	e7a6      	b.n	8014456 <_vfiprintf_r+0xfe>
 8014508:	2300      	movs	r3, #0
 801450a:	3401      	adds	r4, #1
 801450c:	9305      	str	r3, [sp, #20]
 801450e:	4619      	mov	r1, r3
 8014510:	f04f 0c0a 	mov.w	ip, #10
 8014514:	4620      	mov	r0, r4
 8014516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801451a:	3a30      	subs	r2, #48	; 0x30
 801451c:	2a09      	cmp	r2, #9
 801451e:	d903      	bls.n	8014528 <_vfiprintf_r+0x1d0>
 8014520:	2b00      	cmp	r3, #0
 8014522:	d0c6      	beq.n	80144b2 <_vfiprintf_r+0x15a>
 8014524:	9105      	str	r1, [sp, #20]
 8014526:	e7c4      	b.n	80144b2 <_vfiprintf_r+0x15a>
 8014528:	fb0c 2101 	mla	r1, ip, r1, r2
 801452c:	4604      	mov	r4, r0
 801452e:	2301      	movs	r3, #1
 8014530:	e7f0      	b.n	8014514 <_vfiprintf_r+0x1bc>
 8014532:	ab03      	add	r3, sp, #12
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	462a      	mov	r2, r5
 8014538:	4b12      	ldr	r3, [pc, #72]	; (8014584 <_vfiprintf_r+0x22c>)
 801453a:	a904      	add	r1, sp, #16
 801453c:	4630      	mov	r0, r6
 801453e:	f7fb ff7b 	bl	8010438 <_printf_float>
 8014542:	4607      	mov	r7, r0
 8014544:	1c78      	adds	r0, r7, #1
 8014546:	d1d6      	bne.n	80144f6 <_vfiprintf_r+0x19e>
 8014548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801454a:	07d9      	lsls	r1, r3, #31
 801454c:	d405      	bmi.n	801455a <_vfiprintf_r+0x202>
 801454e:	89ab      	ldrh	r3, [r5, #12]
 8014550:	059a      	lsls	r2, r3, #22
 8014552:	d402      	bmi.n	801455a <_vfiprintf_r+0x202>
 8014554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014556:	f7fc ff48 	bl	80113ea <__retarget_lock_release_recursive>
 801455a:	89ab      	ldrh	r3, [r5, #12]
 801455c:	065b      	lsls	r3, r3, #25
 801455e:	f53f af1d 	bmi.w	801439c <_vfiprintf_r+0x44>
 8014562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014564:	e71c      	b.n	80143a0 <_vfiprintf_r+0x48>
 8014566:	ab03      	add	r3, sp, #12
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	462a      	mov	r2, r5
 801456c:	4b05      	ldr	r3, [pc, #20]	; (8014584 <_vfiprintf_r+0x22c>)
 801456e:	a904      	add	r1, sp, #16
 8014570:	4630      	mov	r0, r6
 8014572:	f7fc f9e9 	bl	8010948 <_printf_i>
 8014576:	e7e4      	b.n	8014542 <_vfiprintf_r+0x1ea>
 8014578:	08014ca9 	.word	0x08014ca9
 801457c:	08014cb3 	.word	0x08014cb3
 8014580:	08010439 	.word	0x08010439
 8014584:	08014335 	.word	0x08014335
 8014588:	08014caf 	.word	0x08014caf

0801458c <__swbuf_r>:
 801458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801458e:	460e      	mov	r6, r1
 8014590:	4614      	mov	r4, r2
 8014592:	4605      	mov	r5, r0
 8014594:	b118      	cbz	r0, 801459e <__swbuf_r+0x12>
 8014596:	6a03      	ldr	r3, [r0, #32]
 8014598:	b90b      	cbnz	r3, 801459e <__swbuf_r+0x12>
 801459a:	f7fc fd75 	bl	8011088 <__sinit>
 801459e:	69a3      	ldr	r3, [r4, #24]
 80145a0:	60a3      	str	r3, [r4, #8]
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	071a      	lsls	r2, r3, #28
 80145a6:	d525      	bpl.n	80145f4 <__swbuf_r+0x68>
 80145a8:	6923      	ldr	r3, [r4, #16]
 80145aa:	b31b      	cbz	r3, 80145f4 <__swbuf_r+0x68>
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	6922      	ldr	r2, [r4, #16]
 80145b0:	1a98      	subs	r0, r3, r2
 80145b2:	6963      	ldr	r3, [r4, #20]
 80145b4:	b2f6      	uxtb	r6, r6
 80145b6:	4283      	cmp	r3, r0
 80145b8:	4637      	mov	r7, r6
 80145ba:	dc04      	bgt.n	80145c6 <__swbuf_r+0x3a>
 80145bc:	4621      	mov	r1, r4
 80145be:	4628      	mov	r0, r5
 80145c0:	f7ff fa48 	bl	8013a54 <_fflush_r>
 80145c4:	b9e0      	cbnz	r0, 8014600 <__swbuf_r+0x74>
 80145c6:	68a3      	ldr	r3, [r4, #8]
 80145c8:	3b01      	subs	r3, #1
 80145ca:	60a3      	str	r3, [r4, #8]
 80145cc:	6823      	ldr	r3, [r4, #0]
 80145ce:	1c5a      	adds	r2, r3, #1
 80145d0:	6022      	str	r2, [r4, #0]
 80145d2:	701e      	strb	r6, [r3, #0]
 80145d4:	6962      	ldr	r2, [r4, #20]
 80145d6:	1c43      	adds	r3, r0, #1
 80145d8:	429a      	cmp	r2, r3
 80145da:	d004      	beq.n	80145e6 <__swbuf_r+0x5a>
 80145dc:	89a3      	ldrh	r3, [r4, #12]
 80145de:	07db      	lsls	r3, r3, #31
 80145e0:	d506      	bpl.n	80145f0 <__swbuf_r+0x64>
 80145e2:	2e0a      	cmp	r6, #10
 80145e4:	d104      	bne.n	80145f0 <__swbuf_r+0x64>
 80145e6:	4621      	mov	r1, r4
 80145e8:	4628      	mov	r0, r5
 80145ea:	f7ff fa33 	bl	8013a54 <_fflush_r>
 80145ee:	b938      	cbnz	r0, 8014600 <__swbuf_r+0x74>
 80145f0:	4638      	mov	r0, r7
 80145f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145f4:	4621      	mov	r1, r4
 80145f6:	4628      	mov	r0, r5
 80145f8:	f000 f806 	bl	8014608 <__swsetup_r>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d0d5      	beq.n	80145ac <__swbuf_r+0x20>
 8014600:	f04f 37ff 	mov.w	r7, #4294967295
 8014604:	e7f4      	b.n	80145f0 <__swbuf_r+0x64>
	...

08014608 <__swsetup_r>:
 8014608:	b538      	push	{r3, r4, r5, lr}
 801460a:	4b2a      	ldr	r3, [pc, #168]	; (80146b4 <__swsetup_r+0xac>)
 801460c:	4605      	mov	r5, r0
 801460e:	6818      	ldr	r0, [r3, #0]
 8014610:	460c      	mov	r4, r1
 8014612:	b118      	cbz	r0, 801461c <__swsetup_r+0x14>
 8014614:	6a03      	ldr	r3, [r0, #32]
 8014616:	b90b      	cbnz	r3, 801461c <__swsetup_r+0x14>
 8014618:	f7fc fd36 	bl	8011088 <__sinit>
 801461c:	89a3      	ldrh	r3, [r4, #12]
 801461e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014622:	0718      	lsls	r0, r3, #28
 8014624:	d422      	bmi.n	801466c <__swsetup_r+0x64>
 8014626:	06d9      	lsls	r1, r3, #27
 8014628:	d407      	bmi.n	801463a <__swsetup_r+0x32>
 801462a:	2309      	movs	r3, #9
 801462c:	602b      	str	r3, [r5, #0]
 801462e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014632:	81a3      	strh	r3, [r4, #12]
 8014634:	f04f 30ff 	mov.w	r0, #4294967295
 8014638:	e034      	b.n	80146a4 <__swsetup_r+0x9c>
 801463a:	0758      	lsls	r0, r3, #29
 801463c:	d512      	bpl.n	8014664 <__swsetup_r+0x5c>
 801463e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014640:	b141      	cbz	r1, 8014654 <__swsetup_r+0x4c>
 8014642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014646:	4299      	cmp	r1, r3
 8014648:	d002      	beq.n	8014650 <__swsetup_r+0x48>
 801464a:	4628      	mov	r0, r5
 801464c:	f7fd fcd8 	bl	8012000 <_free_r>
 8014650:	2300      	movs	r3, #0
 8014652:	6363      	str	r3, [r4, #52]	; 0x34
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801465a:	81a3      	strh	r3, [r4, #12]
 801465c:	2300      	movs	r3, #0
 801465e:	6063      	str	r3, [r4, #4]
 8014660:	6923      	ldr	r3, [r4, #16]
 8014662:	6023      	str	r3, [r4, #0]
 8014664:	89a3      	ldrh	r3, [r4, #12]
 8014666:	f043 0308 	orr.w	r3, r3, #8
 801466a:	81a3      	strh	r3, [r4, #12]
 801466c:	6923      	ldr	r3, [r4, #16]
 801466e:	b94b      	cbnz	r3, 8014684 <__swsetup_r+0x7c>
 8014670:	89a3      	ldrh	r3, [r4, #12]
 8014672:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801467a:	d003      	beq.n	8014684 <__swsetup_r+0x7c>
 801467c:	4621      	mov	r1, r4
 801467e:	4628      	mov	r0, r5
 8014680:	f000 f884 	bl	801478c <__smakebuf_r>
 8014684:	89a0      	ldrh	r0, [r4, #12]
 8014686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801468a:	f010 0301 	ands.w	r3, r0, #1
 801468e:	d00a      	beq.n	80146a6 <__swsetup_r+0x9e>
 8014690:	2300      	movs	r3, #0
 8014692:	60a3      	str	r3, [r4, #8]
 8014694:	6963      	ldr	r3, [r4, #20]
 8014696:	425b      	negs	r3, r3
 8014698:	61a3      	str	r3, [r4, #24]
 801469a:	6923      	ldr	r3, [r4, #16]
 801469c:	b943      	cbnz	r3, 80146b0 <__swsetup_r+0xa8>
 801469e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80146a2:	d1c4      	bne.n	801462e <__swsetup_r+0x26>
 80146a4:	bd38      	pop	{r3, r4, r5, pc}
 80146a6:	0781      	lsls	r1, r0, #30
 80146a8:	bf58      	it	pl
 80146aa:	6963      	ldrpl	r3, [r4, #20]
 80146ac:	60a3      	str	r3, [r4, #8]
 80146ae:	e7f4      	b.n	801469a <__swsetup_r+0x92>
 80146b0:	2000      	movs	r0, #0
 80146b2:	e7f7      	b.n	80146a4 <__swsetup_r+0x9c>
 80146b4:	2400006c 	.word	0x2400006c

080146b8 <_raise_r>:
 80146b8:	291f      	cmp	r1, #31
 80146ba:	b538      	push	{r3, r4, r5, lr}
 80146bc:	4604      	mov	r4, r0
 80146be:	460d      	mov	r5, r1
 80146c0:	d904      	bls.n	80146cc <_raise_r+0x14>
 80146c2:	2316      	movs	r3, #22
 80146c4:	6003      	str	r3, [r0, #0]
 80146c6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ca:	bd38      	pop	{r3, r4, r5, pc}
 80146cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80146ce:	b112      	cbz	r2, 80146d6 <_raise_r+0x1e>
 80146d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146d4:	b94b      	cbnz	r3, 80146ea <_raise_r+0x32>
 80146d6:	4620      	mov	r0, r4
 80146d8:	f000 f830 	bl	801473c <_getpid_r>
 80146dc:	462a      	mov	r2, r5
 80146de:	4601      	mov	r1, r0
 80146e0:	4620      	mov	r0, r4
 80146e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146e6:	f000 b817 	b.w	8014718 <_kill_r>
 80146ea:	2b01      	cmp	r3, #1
 80146ec:	d00a      	beq.n	8014704 <_raise_r+0x4c>
 80146ee:	1c59      	adds	r1, r3, #1
 80146f0:	d103      	bne.n	80146fa <_raise_r+0x42>
 80146f2:	2316      	movs	r3, #22
 80146f4:	6003      	str	r3, [r0, #0]
 80146f6:	2001      	movs	r0, #1
 80146f8:	e7e7      	b.n	80146ca <_raise_r+0x12>
 80146fa:	2400      	movs	r4, #0
 80146fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014700:	4628      	mov	r0, r5
 8014702:	4798      	blx	r3
 8014704:	2000      	movs	r0, #0
 8014706:	e7e0      	b.n	80146ca <_raise_r+0x12>

08014708 <raise>:
 8014708:	4b02      	ldr	r3, [pc, #8]	; (8014714 <raise+0xc>)
 801470a:	4601      	mov	r1, r0
 801470c:	6818      	ldr	r0, [r3, #0]
 801470e:	f7ff bfd3 	b.w	80146b8 <_raise_r>
 8014712:	bf00      	nop
 8014714:	2400006c 	.word	0x2400006c

08014718 <_kill_r>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	4d07      	ldr	r5, [pc, #28]	; (8014738 <_kill_r+0x20>)
 801471c:	2300      	movs	r3, #0
 801471e:	4604      	mov	r4, r0
 8014720:	4608      	mov	r0, r1
 8014722:	4611      	mov	r1, r2
 8014724:	602b      	str	r3, [r5, #0]
 8014726:	f7ed fc71 	bl	800200c <_kill>
 801472a:	1c43      	adds	r3, r0, #1
 801472c:	d102      	bne.n	8014734 <_kill_r+0x1c>
 801472e:	682b      	ldr	r3, [r5, #0]
 8014730:	b103      	cbz	r3, 8014734 <_kill_r+0x1c>
 8014732:	6023      	str	r3, [r4, #0]
 8014734:	bd38      	pop	{r3, r4, r5, pc}
 8014736:	bf00      	nop
 8014738:	240056b0 	.word	0x240056b0

0801473c <_getpid_r>:
 801473c:	f7ed bc5e 	b.w	8001ffc <_getpid>

08014740 <__swhatbuf_r>:
 8014740:	b570      	push	{r4, r5, r6, lr}
 8014742:	460c      	mov	r4, r1
 8014744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014748:	2900      	cmp	r1, #0
 801474a:	b096      	sub	sp, #88	; 0x58
 801474c:	4615      	mov	r5, r2
 801474e:	461e      	mov	r6, r3
 8014750:	da0d      	bge.n	801476e <__swhatbuf_r+0x2e>
 8014752:	89a3      	ldrh	r3, [r4, #12]
 8014754:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014758:	f04f 0100 	mov.w	r1, #0
 801475c:	bf0c      	ite	eq
 801475e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014762:	2340      	movne	r3, #64	; 0x40
 8014764:	2000      	movs	r0, #0
 8014766:	6031      	str	r1, [r6, #0]
 8014768:	602b      	str	r3, [r5, #0]
 801476a:	b016      	add	sp, #88	; 0x58
 801476c:	bd70      	pop	{r4, r5, r6, pc}
 801476e:	466a      	mov	r2, sp
 8014770:	f000 f848 	bl	8014804 <_fstat_r>
 8014774:	2800      	cmp	r0, #0
 8014776:	dbec      	blt.n	8014752 <__swhatbuf_r+0x12>
 8014778:	9901      	ldr	r1, [sp, #4]
 801477a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801477e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014782:	4259      	negs	r1, r3
 8014784:	4159      	adcs	r1, r3
 8014786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801478a:	e7eb      	b.n	8014764 <__swhatbuf_r+0x24>

0801478c <__smakebuf_r>:
 801478c:	898b      	ldrh	r3, [r1, #12]
 801478e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014790:	079d      	lsls	r5, r3, #30
 8014792:	4606      	mov	r6, r0
 8014794:	460c      	mov	r4, r1
 8014796:	d507      	bpl.n	80147a8 <__smakebuf_r+0x1c>
 8014798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801479c:	6023      	str	r3, [r4, #0]
 801479e:	6123      	str	r3, [r4, #16]
 80147a0:	2301      	movs	r3, #1
 80147a2:	6163      	str	r3, [r4, #20]
 80147a4:	b002      	add	sp, #8
 80147a6:	bd70      	pop	{r4, r5, r6, pc}
 80147a8:	ab01      	add	r3, sp, #4
 80147aa:	466a      	mov	r2, sp
 80147ac:	f7ff ffc8 	bl	8014740 <__swhatbuf_r>
 80147b0:	9900      	ldr	r1, [sp, #0]
 80147b2:	4605      	mov	r5, r0
 80147b4:	4630      	mov	r0, r6
 80147b6:	f7fb fd21 	bl	80101fc <_malloc_r>
 80147ba:	b948      	cbnz	r0, 80147d0 <__smakebuf_r+0x44>
 80147bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147c0:	059a      	lsls	r2, r3, #22
 80147c2:	d4ef      	bmi.n	80147a4 <__smakebuf_r+0x18>
 80147c4:	f023 0303 	bic.w	r3, r3, #3
 80147c8:	f043 0302 	orr.w	r3, r3, #2
 80147cc:	81a3      	strh	r3, [r4, #12]
 80147ce:	e7e3      	b.n	8014798 <__smakebuf_r+0xc>
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	6020      	str	r0, [r4, #0]
 80147d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147d8:	81a3      	strh	r3, [r4, #12]
 80147da:	9b00      	ldr	r3, [sp, #0]
 80147dc:	6163      	str	r3, [r4, #20]
 80147de:	9b01      	ldr	r3, [sp, #4]
 80147e0:	6120      	str	r0, [r4, #16]
 80147e2:	b15b      	cbz	r3, 80147fc <__smakebuf_r+0x70>
 80147e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147e8:	4630      	mov	r0, r6
 80147ea:	f000 f81d 	bl	8014828 <_isatty_r>
 80147ee:	b128      	cbz	r0, 80147fc <__smakebuf_r+0x70>
 80147f0:	89a3      	ldrh	r3, [r4, #12]
 80147f2:	f023 0303 	bic.w	r3, r3, #3
 80147f6:	f043 0301 	orr.w	r3, r3, #1
 80147fa:	81a3      	strh	r3, [r4, #12]
 80147fc:	89a3      	ldrh	r3, [r4, #12]
 80147fe:	431d      	orrs	r5, r3
 8014800:	81a5      	strh	r5, [r4, #12]
 8014802:	e7cf      	b.n	80147a4 <__smakebuf_r+0x18>

08014804 <_fstat_r>:
 8014804:	b538      	push	{r3, r4, r5, lr}
 8014806:	4d07      	ldr	r5, [pc, #28]	; (8014824 <_fstat_r+0x20>)
 8014808:	2300      	movs	r3, #0
 801480a:	4604      	mov	r4, r0
 801480c:	4608      	mov	r0, r1
 801480e:	4611      	mov	r1, r2
 8014810:	602b      	str	r3, [r5, #0]
 8014812:	f7ed fc5a 	bl	80020ca <_fstat>
 8014816:	1c43      	adds	r3, r0, #1
 8014818:	d102      	bne.n	8014820 <_fstat_r+0x1c>
 801481a:	682b      	ldr	r3, [r5, #0]
 801481c:	b103      	cbz	r3, 8014820 <_fstat_r+0x1c>
 801481e:	6023      	str	r3, [r4, #0]
 8014820:	bd38      	pop	{r3, r4, r5, pc}
 8014822:	bf00      	nop
 8014824:	240056b0 	.word	0x240056b0

08014828 <_isatty_r>:
 8014828:	b538      	push	{r3, r4, r5, lr}
 801482a:	4d06      	ldr	r5, [pc, #24]	; (8014844 <_isatty_r+0x1c>)
 801482c:	2300      	movs	r3, #0
 801482e:	4604      	mov	r4, r0
 8014830:	4608      	mov	r0, r1
 8014832:	602b      	str	r3, [r5, #0]
 8014834:	f7ed fc59 	bl	80020ea <_isatty>
 8014838:	1c43      	adds	r3, r0, #1
 801483a:	d102      	bne.n	8014842 <_isatty_r+0x1a>
 801483c:	682b      	ldr	r3, [r5, #0]
 801483e:	b103      	cbz	r3, 8014842 <_isatty_r+0x1a>
 8014840:	6023      	str	r3, [r4, #0]
 8014842:	bd38      	pop	{r3, r4, r5, pc}
 8014844:	240056b0 	.word	0x240056b0

08014848 <_init>:
 8014848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801484a:	bf00      	nop
 801484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801484e:	bc08      	pop	{r3}
 8014850:	469e      	mov	lr, r3
 8014852:	4770      	bx	lr

08014854 <_fini>:
 8014854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014856:	bf00      	nop
 8014858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801485a:	bc08      	pop	{r3}
 801485c:	469e      	mov	lr, r3
 801485e:	4770      	bx	lr
