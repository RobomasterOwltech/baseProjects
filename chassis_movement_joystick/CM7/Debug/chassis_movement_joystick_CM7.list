
chassis_movement_joystick_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015320  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080155c0  080155c0  000255c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b18  08015b18  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08015b18  08015b18  00025b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b20  08015b20  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b20  08015b20  00025b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b24  08015b24  00025b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  08015b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c4  240001dc  08015d04  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240056a0  08015d04  000356a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003467f  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cb1  00000000  00000000  0006490f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002350  00000000  00000000  0006a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b5a  00000000  00000000  0006c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00043823  00000000  00000000  0006e46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e31e  00000000  00000000  000b1c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001ab1ea  00000000  00000000  000dffab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ac08  00000000  00000000  0028b198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00295da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080155a8 	.word	0x080155a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	080155a8 	.word	0x080155a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bae:	fefa 7a67 	vrintp.f32	s15, s15
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>:
 *      Author: josue
 */

#include "Encoder.hpp"

LL_Control::Encoder::Encoder(TIM_HandleTypeDef * htim, int int_freq) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x34>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]

	// Assignments
	this->htimCounter = htim;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	605a      	str	r2, [r3, #4]
	this->int_freq = int_freq;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]

	set_encoderRes (537.667);
 8000bde:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000bf8 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x38>
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f838 	bl	8000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>

}
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	0801563c 	.word	0x0801563c
 8000bf8:	44066ab0 	.word	0x44066ab0

08000bfc <_ZN10LL_Control7EncoderD1Ev>:
LL_Control::Encoder::Encoder(){

}
LL_Control::Encoder::~Encoder() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <_ZN10LL_Control7EncoderD1Ev+0x1c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	0801563c 	.word	0x0801563c

08000c1c <_ZN10LL_Control7EncoderD0Ev>:
LL_Control::Encoder::~Encoder() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
}
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffe9 	bl	8000bfc <_ZN10LL_Control7EncoderD1Ev>
 8000c2a:	211c      	movs	r1, #28
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f010 f94d 	bl	8010ecc <_ZdlPvj>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>:
void LL_Control::Encoder::set_ticksPR(int ticks){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	ticksPerRevolution = ticks;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	60da      	str	r2, [r3, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>:
void LL_Control::Encoder::set_encoderRes(float res){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	ed87 0a00 	vstr	s0, [r7]
	encoderRes = res;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	609a      	str	r2, [r3, #8]
	set_ticksPR((int) std::ceil(res) );
 8000c6a:	ed97 0a00 	vldr	s0, [r7]
 8000c6e:	f7ff ff97 	bl	8000ba0 <_ZSt4ceilf>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7a:	ee17 1a90 	vmov	r1, s15
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffdc 	bl	8000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN10LL_Control7Encoder7get_velEv>:
float LL_Control::Encoder::get_vel(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return vel;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	ee07 3a90 	vmov	s15, r3
}
 8000c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_ZN10LL_Control7Encoder13get_frequencyEv>:

int LL_Control::Encoder::get_frequency(){
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return int_freq;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_ZN10LL_Control7Encoder6updateEv>:

void LL_Control::Encoder::update(){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin (GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

	int tick =__HAL_TIM_GET_COUNTER(htimCounter);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	60fb      	str	r3, [r7, #12]
	//int tick = htimCounter->Instance->CNT;

	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
	if (std::abs(lastTick - tick) > ticksPerRevolution - 1){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6959      	ldr	r1, [r3, #20]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc04      	bgt.n	8000cf6 <_ZN10LL_Control7Encoder6updateEv+0x32>
		tick -= ticksPerRevolution;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]
	}

	// Update angular velocities:
	//w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
	vel = 2*pi*(lastTick - tick)*1000/(encoderRes*int_freq);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d48 <_ZN10LL_Control7Encoder6updateEv+0x84>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000d4c <_ZN10LL_Control7Encoder6updateEv+0x88>
 8000d12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	edc3 7a06 	vstr	s15, [r3, #24]

	// Update last readout
	lastTick = tick;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	615a      	str	r2, [r3, #20]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40c90ff9 	.word	0x40c90ff9
 8000d4c:	447a0000 	.word	0x447a0000

08000d50 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>:
 *      Author: serfa
 */

#include "Joystick.hpp"

Joystick::Joystick(ADC_HandleTypeDef *_hadc1, ADC_HandleTypeDef *_hadc2) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]

	hadc1 = _hadc1;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	605a      	str	r2, [r3, #4]
	hadc2 = _hadc2;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]

    in_min  =  35;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2223      	movs	r2, #35	; 0x23
 8000d6c:	621a      	str	r2, [r3, #32]
    in_max  =  65;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2241      	movs	r2, #65	; 0x41
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
    out_min = -1;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
    out_max =  1;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4618      	mov	r0, r3
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8Joystick4readEv>:
void Joystick::read(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fadd 	bl	800335c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f04f 31ff 	mov.w	r1, #4294967295
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fba0 	bl	80034f0 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(hadc1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 fc8f 	bl	80036d8 <HAL_ADC_GetValue>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	819a      	strh	r2, [r3, #12]
    x_axis = x_adc / 1000;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	899b      	ldrh	r3, [r3, #12]
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <_ZN8Joystick4readEv+0x9c>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	099b      	lsrs	r3, r3, #6
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	edc3 7a04 	vstr	s15, [r3, #16]
    HAL_ADC_Start(hadc2);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 faba 	bl	800335c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc2, HAL_MAX_DELAY);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fb7d 	bl	80034f0 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(hadc2);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fc6c 	bl	80036d8 <HAL_ADC_GetValue>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	81da      	strh	r2, [r3, #14]
    y_axis = y_adc / 1000;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	89db      	ldrh	r3, [r3, #14]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <_ZN8Joystick4readEv+0x9c>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	099b      	lsrs	r3, r3, #6
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	10624dd3 	.word	0x10624dd3

08000e30 <_ZN8Joystick3mapEf>:
float Joystick::map(float x){
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	ed87 0a00 	vstr	s0, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e48:	ed97 7a00 	vldr	s14, [r7]
 8000e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_ZN8Joystick7set_posEv>:
void Joystick::set_pos(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	x_pos = map(x_axis);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffbe 	bl	8000e30 <_ZN8Joystick3mapEf>
 8000eb4:	eef0 7a40 	vmov.f32	s15, s0
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	edc3 7a06 	vstr	s15, [r3, #24]
	y_pos = map(y_axis);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffb1 	bl	8000e30 <_ZN8Joystick3mapEf>
 8000ece:	eef0 7a40 	vmov.f32	s15, s0
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	edc3 7a07 	vstr	s15, [r3, #28]

	if(x_pos < -1){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ede:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d502      	bpl.n	8000ef2 <_ZN8Joystick7set_posEv+0x56>
	    	x_pos = -1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <_ZN8Joystick7set_posEv+0x7c>)
 8000ef0:	619a      	str	r2, [r3, #24]
	}
	if(y_pos < -1){
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ef8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d400      	bmi.n	8000f08 <_ZN8Joystick7set_posEv+0x6c>
	        y_pos = -1;
	}
}
 8000f06:	e002      	b.n	8000f0e <_ZN8Joystick7set_posEv+0x72>
	        y_pos = -1;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <_ZN8Joystick7set_posEv+0x7c>)
 8000f0c:	61da      	str	r2, [r3, #28]
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	bf800000 	.word	0xbf800000

08000f1c <_ZN8Joystick8get_xPosEv>:
float Joystick::get_xPos(){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	return x_pos;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	ee07 3a90 	vmov	s15, r3
}
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_ZN8Joystick8get_yPosEv>:
float Joystick::get_yPos(){
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return y_pos;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	ee07 3a90 	vmov	s15, r3
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>:
 *
 *
 * */


LL_Control::Motor_PI::Motor_PI(LL_Control::Encoder * e, TIM_HandleTypeDef * htim, int minFreq, int maxFreq) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x80>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	619a      	str	r2, [r3, #24]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c

	enc = e;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	605a      	str	r2, [r3, #4]
	htimPWM = htim;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]

	runFrequency = enc->get_frequency();
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fe89 	bl	8000caa <_ZN10LL_Control7Encoder13get_frequencyEv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
    // Velocity
    set_MaxVel(32.0f);
 8000f9e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000fdc <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x84>
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f840 	bl	8001028 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>
    set_MinVel(-32.0f);
 8000fa8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000fe0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x88>
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 f84a 	bl	8001046 <_ZN10LL_Control8Motor_PI10set_MinVelEf>
    // Frequency
    minFreqPWM = minFreq;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	621a      	str	r2, [r3, #32]
    maxFreqPWM = maxFreq;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	61da      	str	r2, [r3, #28]
    // Threshold
    set_threshold(0.05);
 8000fbe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000fe4 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x8c>
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f896 	bl	80010f4 <_ZN10LL_Control8Motor_PI13set_thresholdEf>

    // Don't move
    stop();
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 f9c5 	bl	8001358 <_ZN10LL_Control8Motor_PI4stopEv>
}
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	0801564c 	.word	0x0801564c
 8000fdc:	42000000 	.word	0x42000000
 8000fe0:	c2000000 	.word	0xc2000000
 8000fe4:	3d4ccccd 	.word	0x3d4ccccd

08000fe8 <_ZN10LL_Control8Motor_PID1Ev>:

LL_Control::Motor_PI::~Motor_PI() {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <_ZN10LL_Control8Motor_PID1Ev+0x1c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	0801564c 	.word	0x0801564c

08001008 <_ZN10LL_Control8Motor_PID0Ev>:
LL_Control::Motor_PI::~Motor_PI() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
}
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ffe9 	bl	8000fe8 <_ZN10LL_Control8Motor_PID1Ev>
 8001016:	214c      	movs	r1, #76	; 0x4c
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f00f ff57 	bl	8010ecc <_ZdlPvj>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>:

// ===== Setters =====

void LL_Control::Motor_PI::set_MaxVel(float nMax){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	maxVel = nMax;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	60da      	str	r2, [r3, #12]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_ZN10LL_Control8Motor_PI10set_MinVelEf>:
void LL_Control::Motor_PI::set_MinVel(float nMin){
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	ed87 0a00 	vstr	s0, [r7]
	minVel = nMin;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	611a      	str	r2, [r3, #16]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_ZN10LL_Control8Motor_PI13set_referenceEf>:
void LL_Control::Motor_PI::set_reference(float ref){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	ed87 0a00 	vstr	s0, [r7]
	// Limit the value if the ref is bigger
        // than our operational space
	if (ref > maxVel){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 7a03 	vldr	s15, [r3, #12]
 8001076:	ed97 7a00 	vldr	s14, [r7]
 800107a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd03      	ble.n	800108c <_ZN10LL_Control8Motor_PI13set_referenceEf+0x28>
		ref = maxVel;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	e00c      	b.n	80010a6 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
	}else if (ref < minVel){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001092:	ed97 7a00 	vldr	s14, [r7]
 8001096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d502      	bpl.n	80010a6 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
		ref = minVel;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	603b      	str	r3, [r7, #0]
	}
    reference = direction*ref;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b2:	edd7 7a00 	vldr	s15, [r7]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_ZN10LL_Control8Motor_PI6set_KsEff>:
void LL_Control::Motor_PI::set_Ks(float k_i, float k_p){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d8:	edc7 0a01 	vstr	s1, [r7, #4]
	this->k_i = k_i;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
	this->k_p = k_p;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_ZN10LL_Control8Motor_PI13set_thresholdEf>:
void LL_Control::Motor_PI::set_runFrequency(int f){
	runFrequency = f;
}
void LL_Control::Motor_PI::set_threshold(float t){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	ed87 0a00 	vstr	s0, [r7]
	threshold = t;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_ZN10LL_Control8Motor_PI7get_velEv>:

// ===== Getters =====
float LL_Control::Motor_PI::get_vel(){
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

	float vel = enc->get_vel();
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fdb4 	bl	8000c8c <_ZN10LL_Control7Encoder7get_velEv>
 8001124:	ed87 0a03 	vstr	s0, [r7, #12]
	// Sometimes it overflows into an invalid value
		// We double check to clean even more the data
	// If the calculated value is bigger than our maximum velocity
	if (vel >  maxVel || vel < minVel){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a03 	vldr	s15, [r3, #12]
 800112e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	dc09      	bgt.n	8001150 <_ZN10LL_Control8Motor_PI7get_velEv+0x3e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001142:	ed97 7a03 	vldr	s14, [r7, #12]
 8001146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d502      	bpl.n	8001156 <_ZN10LL_Control8Motor_PI7get_velEv+0x44>
		vel = lastVel;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	60fb      	str	r3, [r7, #12]
	}

	// Update last reading
	lastVel = vel;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	615a      	str	r2, [r3, #20]

    // Should we invert this? 
	return vel;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	ee07 3a90 	vmov	s15, r3
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN10LL_Control8Motor_PI3mapEfffff>:

// ===== Others =====
void LL_Control::Motor_PI::invert(){
    direction *= -1;
}
float LL_Control::Motor_PI::map(float x, float in_min, float in_max, float out_min, float out_max){
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6178      	str	r0, [r7, #20]
 8001174:	ed87 0a04 	vstr	s0, [r7, #16]
 8001178:	edc7 0a03 	vstr	s1, [r7, #12]
 800117c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001180:	edc7 1a01 	vstr	s3, [r7, #4]
 8001184:	ed87 2a00 	vstr	s4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001188:	ed97 7a04 	vldr	s14, [r7, #16]
 800118c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001190:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001194:	edd7 6a00 	vldr	s13, [r7]
 8001198:	edd7 7a01 	vldr	s15, [r7, #4]
 800119c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_ZN10LL_Control8Motor_PI3mapEf>:
int LL_Control::Motor_PI::map(float x){
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	ed87 0a00 	vstr	s0, [r7]
	if (x > maxVel){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011dc:	ed97 7a00 	vldr	s14, [r7]
 80011e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	dd03      	ble.n	80011f2 <_ZN10LL_Control8Motor_PI3mapEf+0x28>
		x = maxVel;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	e00c      	b.n	800120c <_ZN10LL_Control8Motor_PI3mapEf+0x42>
	}else if (x < minVel){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011f8:	ed97 7a00 	vldr	s14, [r7]
 80011fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	d502      	bpl.n	800120c <_ZN10LL_Control8Motor_PI3mapEf+0x42>
		x = minVel;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	603b      	str	r3, [r7, #0]
	}
	return (int) map(x, minVel, maxVel, minFreqPWM, maxFreqPWM);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	ed93 7a03 	vldr	s14, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	ee06 3a90 	vmov	s13, r3
 8001220:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	ee06 3a10 	vmov	s12, r3
 800122c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001230:	eeb0 2a46 	vmov.f32	s4, s12
 8001234:	eef0 1a66 	vmov.f32	s3, s13
 8001238:	eeb0 1a47 	vmov.f32	s2, s14
 800123c:	eef0 0a67 	vmov.f32	s1, s15
 8001240:	ed97 0a00 	vldr	s0, [r7]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff91 	bl	800116c <_ZN10LL_Control8Motor_PI3mapEfffff>
 800124a:	eef0 7a40 	vmov.f32	s15, s0
 800124e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001252:	ee17 3a90 	vmov	r3, s15
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZN10LL_Control8Motor_PI9go_to_refEv>:

void LL_Control::Motor_PI::go_to_ref(){
 800125e:	b580      	push	{r7, lr}
 8001260:	ed2d 8b02 	vpush	{d8}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

    // ===== #CONTROL =====
	error = reference - get_vel();
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff4e 	bl	8001112 <_ZN10LL_Control8Motor_PI7get_velEv>
 8001276:	eef0 7a40 	vmov.f32	s15, s0
 800127a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	// Since we are not working with tasks, we can't actually make whiles
	if (error <= threshold && error >= -threshold){
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	d80c      	bhi.n	80012b4 <_ZN10LL_Control8Motor_PI9go_to_refEv+0x56>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012a6:	eef1 7a67 	vneg.f32	s15, s15
 80012aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	da4a      	bge.n	800134a <_ZN10LL_Control8Motor_PI9go_to_refEv+0xec>
		return;
	}
    // If we are not on the threshold, keep altering PWM pulse
    
    // Update error on integral term
    intError += (float) (1.0f/runFrequency)*error ;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80012ca:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    	 * */
    //float intTerm = (1000/runFrequency)*error + lastError;

    // Regulate voltage to motor
        // Sadly, it isn't torque ;(
    control += (float) (1.0f/runFrequency)*(k_p*error + k_i*intError);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80012f8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001308:	ee26 6a27 	vmul.f32	s12, s12, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001318:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800131c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


    // Actually move motor
    //__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_1, control);
    htimPWM -> Instance-> CCR1 = map(control);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff46 	bl	80011ca <_ZN10LL_Control8Motor_PI3mapEf>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
 8001348:	e000      	b.n	800134c <_ZN10LL_Control8Motor_PI9go_to_refEv+0xee>
		return;
 800134a:	bf00      	nop

    // Update integral component
    //lastIntegral = intTerm;
}
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	ecbd 8b02 	vpop	{d8}
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <_ZN10LL_Control8Motor_PI4stopEv>:

void LL_Control::Motor_PI::stop(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	set_reference(0.0);
 8001360:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001374 <_ZN10LL_Control8Motor_PI4stopEv+0x1c>
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe7d 	bl	8001064 <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	00000000 	.word	0x00000000

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001382:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001384:	bf00      	nop
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <main+0x108>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <main+0x28>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	1e5a      	subs	r2, r3, #1
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	dd01      	ble.n	80013a0 <main+0x28>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <main+0x2a>
 80013a0:	2300      	movs	r3, #0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ef      	bne.n	8001386 <main+0xe>
  if ( timeout < 0 )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da01      	bge.n	80013b0 <main+0x38>
  {
  Error_Handler();
 80013ac:	f000 fee4 	bl	8002178 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f001 fbc4 	bl	8002b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f878 	bl	80014a8 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013b8:	f000 f902 	bl	80015c0 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <main+0x108>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <main+0x108>)
 80013c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <main+0x108>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80013da:	2000      	movs	r0, #0
 80013dc:	f005 fc44 	bl	8006c68 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	f005 fc5a 	bl	8006c9c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80013e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ec:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80013ee:	bf00      	nop
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <main+0x108>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <main+0x92>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	dd01      	ble.n	800140a <main+0x92>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <main+0x94>
 800140a:	2300      	movs	r3, #0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ef      	bne.n	80013f0 <main+0x78>
if ( timeout < 0 )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da01      	bge.n	800141a <main+0xa2>
{
Error_Handler();
 8001416:	f000 feaf 	bl	8002178 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 fd03 	bl	8001e24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800141e:	f000 fcd9 	bl	8001dd4 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001422:	f000 fc41 	bl	8001ca8 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001426:	f000 fc9f 	bl	8001d68 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 800142a:	f000 fbd9 	bl	8001be0 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 800142e:	f000 fb77 	bl	8001b20 <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8001432:	f000 fa55 	bl	80018e0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001436:	f000 fae3 	bl	8001a00 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 800143a:	f000 f9ef 	bl	800181c <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 800143e:	f000 f8f5 	bl	800162c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8001442:	f000 f97b 	bl	800173c <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001446:	f00c ffc7 	bl	800e3d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <main+0x10c>)
 800144c:	2100      	movs	r1, #0
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <main+0x110>)
 8001450:	f00d f80c 	bl	800e46c <osThreadNew>
 8001454:	4603      	mov	r3, r0
 8001456:	4a0d      	ldr	r2, [pc, #52]	; (800148c <main+0x114>)
 8001458:	6013      	str	r3, [r2, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(StartJoystick, NULL, &Joystick_attributes);
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <main+0x118>)
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <main+0x11c>)
 8001460:	f00d f804 	bl	800e46c <osThreadNew>
 8001464:	4603      	mov	r3, r0
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <main+0x120>)
 8001468:	6013      	str	r3, [r2, #0]

  /* creation of Chassis */
  ChassisHandle = osThreadNew(StartChassis, NULL, &Chassis_attributes);
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <main+0x124>)
 800146c:	2100      	movs	r1, #0
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <main+0x128>)
 8001470:	f00c fffc 	bl	800e46c <osThreadNew>
 8001474:	4603      	mov	r3, r0
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <main+0x12c>)
 8001478:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800147a:	f00c ffd1 	bl	800e420 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800147e:	e7fe      	b.n	800147e <main+0x106>
 8001480:	58024400 	.word	0x58024400
 8001484:	08015654 	.word	0x08015654
 8001488:	08001f55 	.word	0x08001f55
 800148c:	24000acc 	.word	0x24000acc
 8001490:	08015678 	.word	0x08015678
 8001494:	08001f65 	.word	0x08001f65
 8001498:	24000ad0 	.word	0x24000ad0
 800149c:	0801569c 	.word	0x0801569c
 80014a0:	08001fd5 	.word	0x08001fd5
 80014a4:	24000ad4 	.word	0x24000ad4

080014a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09c      	sub	sp, #112	; 0x70
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	224c      	movs	r2, #76	; 0x4c
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f010 fd61 	bl	8011f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2220      	movs	r2, #32
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f010 fd5b 	bl	8011f7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014c8:	2004      	movs	r0, #4
 80014ca:	f005 fd43 	bl	8006f54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <_Z18SystemClock_Configv+0x110>)
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	4a38      	ldr	r2, [pc, #224]	; (80015b8 <_Z18SystemClock_Configv+0x110>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <_Z18SystemClock_Configv+0x110>)
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4b34      	ldr	r3, [pc, #208]	; (80015bc <_Z18SystemClock_Configv+0x114>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014f0:	4a32      	ldr	r2, [pc, #200]	; (80015bc <_Z18SystemClock_Configv+0x114>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <_Z18SystemClock_Configv+0x114>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001504:	bf00      	nop
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <_Z18SystemClock_Configv+0x114>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f3      	bne.n	8001506 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001522:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152c:	2302      	movs	r3, #2
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001534:	2312      	movs	r3, #18
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001538:	2302      	movs	r3, #2
 800153a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001544:	230c      	movs	r3, #12
 8001546:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001548:	2302      	movs	r3, #2
 800154a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800154c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001550:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fd66 	bl	8007028 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 800156c:	f000 fe04 	bl	8002178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	233f      	movs	r3, #63	; 0x3f
 8001572:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	2303      	movs	r3, #3
 8001576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800158e:	2340      	movs	r3, #64	; 0x40
 8001590:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f006 f9a0 	bl	80078dc <HAL_RCC_ClockConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 80015ac:	f000 fde4 	bl	8002178 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3770      	adds	r7, #112	; 0x70
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	58000400 	.word	0x58000400
 80015bc:	58024800 	.word	0x58024800

080015c0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0b0      	sub	sp, #192	; 0xc0
 80015c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	22c0      	movs	r2, #192	; 0xc0
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f010 fcd6 	bl	8011f7e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80015e2:	2312      	movs	r3, #18
 80015e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80015e6:	2304      	movs	r3, #4
 80015e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015f2:	23c0      	movs	r3, #192	; 0xc0
 80015f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80015f6:	2320      	movs	r3, #32
 80015f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80015fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	4618      	mov	r0, r3
 800160a:	f006 fd35 	bl	8008078 <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 800161e:	f000 fdab 	bl	8002178 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	37c0      	adds	r7, #192	; 0xc0
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001652:	4a38      	ldr	r2, [pc, #224]	; (8001734 <_ZL12MX_ADC1_Initv+0x108>)
 8001654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800165c:	4b34      	ldr	r3, [pc, #208]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 800166a:	2204      	movs	r2, #4
 800166c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001670:	2200      	movs	r2, #0
 8001672:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001676:	2200      	movs	r2, #0
 8001678:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 800167c:	2201      	movs	r2, #1
 800167e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001682:	2200      	movs	r2, #0
 8001684:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 800169a:	2200      	movs	r2, #0
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ac:	4820      	ldr	r0, [pc, #128]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 80016ae:	f001 fcb3 	bl	8003018 <HAL_ADC_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 80016c2:	f000 fd59 	bl	8002178 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4817      	ldr	r0, [pc, #92]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 80016d2:	f002 fd1b 	bl	800410c <HAL_ADCEx_MultiModeConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80016e6:	f000 fd47 	bl	8002178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <_ZL12MX_ADC1_Initv+0x10c>)
 80016ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ee:	2306      	movs	r3, #6
 80016f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016fc:	2304      	movs	r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	4619      	mov	r1, r3
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <_ZL12MX_ADC1_Initv+0x104>)
 800170e:	f001 fff1 	bl	80036f4 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 8001722:	f000 fd29 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240001f8 	.word	0x240001f8
 8001734:	40022000 	.word	0x40022000
 8001738:	4b840000 	.word	0x4b840000

0800173c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001754:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <_ZL12MX_ADC2_Initv+0xd8>)
 8001758:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 800176e:	2204      	movs	r2, #4
 8001770:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001774:	2200      	movs	r2, #0
 8001776:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 800177a:	2200      	movs	r2, #0
 800177c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001780:	2201      	movs	r2, #1
 8001782:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001786:	2200      	movs	r2, #0
 8001788:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017b0:	4817      	ldr	r0, [pc, #92]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 80017b2:	f001 fc31 	bl	8003018 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 80017c6:	f000 fcd7 	bl	8002178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_ZL12MX_ADC2_Initv+0xdc>)
 80017cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ce:	2306      	movs	r3, #6
 80017d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80017da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017dc:	2304      	movs	r3, #4
 80017de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <_ZL12MX_ADC2_Initv+0xd4>)
 80017ee:	f001 ff81 	bl	80036f4 <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8001802:	f000 fcb9 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2400025c 	.word	0x2400025c
 8001814:	40022100 	.word	0x40022100
 8001818:	4fb80000 	.word	0x4fb80000

0800181c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <_ZL12MX_TIM1_Initv+0xc0>)
 800183e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001842:	224a      	movs	r2, #74	; 0x4a
 8001844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 800184e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001866:	481c      	ldr	r0, [pc, #112]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001868:	f009 f904 	bl	800aa74 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800187c:	f000 fc7c 	bl	8002178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 800188e:	f009 feb9 	bl	800b604 <HAL_TIM_ConfigClockSource>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 80018a2:	f000 fc69 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4808      	ldr	r0, [pc, #32]	; (80018d8 <_ZL12MX_TIM1_Initv+0xbc>)
 80018b8:	f00a fbf8 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 80018cc:	f000 fc54 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	240002c0 	.word	0x240002c0
 80018dc:	40010000 	.word	0x40010000

080018e0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 8001914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001918:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 800191c:	224b      	movs	r2, #75	; 0x4b
 800191e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 8001928:	f240 729e 	movw	r2, #1950	; 0x79e
 800192c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193a:	4830      	ldr	r0, [pc, #192]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 800193c:	f009 f89a 	bl	800aa74 <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001950:	f000 fc12 	bl	8002178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	4619      	mov	r1, r3
 8001960:	4826      	ldr	r0, [pc, #152]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 8001962:	f009 fe4f 	bl	800b604 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001976:	f000 fbff 	bl	8002178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 800197c:	f009 f94a 	bl	800ac14 <HAL_TIM_PWM_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf14      	ite	ne
 8001986:	2301      	movne	r3, #1
 8001988:	2300      	moveq	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001990:	f000 fbf2 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4816      	ldr	r0, [pc, #88]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 80019a4:	f00a fb82 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80019b8:	f000 fbde 	bl	8002178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 80019d4:	f009 fd02 	bl	800b3dc <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 80019e8:	f000 fbc6 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <_ZL12MX_TIM2_Initv+0x11c>)
 80019ee:	f000 fd49 	bl	8002484 <HAL_TIM_MspPostInit>

}
 80019f2:	bf00      	nop
 80019f4:	3738      	adds	r7, #56	; 0x38
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2400030c 	.word	0x2400030c

08001a00 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a34:	4a39      	ldr	r2, [pc, #228]	; (8001b1c <_ZL12MX_TIM3_Initv+0x11c>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a3a:	224b      	movs	r2, #75	; 0x4b
 8001a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8001a44:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a46:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a58:	482f      	ldr	r0, [pc, #188]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a5a:	f009 f80b 	bl	800aa74 <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001a6e:	f000 fb83 	bl	8002178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a80:	f009 fdc0 	bl	800b604 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001a94:	f000 fb70 	bl	8002178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a98:	481f      	ldr	r0, [pc, #124]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001a9a:	f009 f8bb 	bl	800ac14 <HAL_TIM_PWM_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001aae:	f000 fb63 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4815      	ldr	r0, [pc, #84]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001ac2:	f00a faf3 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001ad6:	f000 fb4f 	bl	8002178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ada:	2360      	movs	r3, #96	; 0x60
 8001adc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4809      	ldr	r0, [pc, #36]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001af2:	f009 fc73 	bl	800b3dc <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8001b06:	f000 fb37 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <_ZL12MX_TIM3_Initv+0x118>)
 8001b0c:	f000 fcba 	bl	8002484 <HAL_TIM_MspPostInit>

}
 8001b10:	bf00      	nop
 8001b12:	3738      	adds	r7, #56	; 0x38
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	24000358 	.word	0x24000358
 8001b1c:	40000400 	.word	0x40000400

08001b20 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	2224      	movs	r2, #36	; 0x24
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f010 fa25 	bl	8011f7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <_ZL12MX_TIM4_Initv+0xbc>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b52:	f240 221a 	movw	r2, #538	; 0x21a
 8001b56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b64:	2303      	movs	r3, #3
 8001b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b90:	f009 f9b0 	bl	800aef4 <HAL_TIM_Encoder_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8001ba4:	f000 fae8 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001bb6:	f00a fa79 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8001bca:	f000 fad5 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3730      	adds	r7, #48	; 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	240003a4 	.word	0x240003a4
 8001bdc:	40000800 	.word	0x40000800

08001be0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f010 f9c5 	bl	8011f7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <_ZL12MX_TIM8_Initv+0xc4>)
 8001c02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c12:	f240 221a 	movw	r2, #538	; 0x21a
 8001c16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c56:	f009 f94d 	bl	800aef4 <HAL_TIM_Encoder_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 8001c6a:	f000 fa85 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001c80:	f00a fa14 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf14      	ite	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	2300      	moveq	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8001c94:	f000 fa70 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3730      	adds	r7, #48	; 0x30
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	240003f0 	.word	0x240003f0
 8001ca4:	40010400 	.word	0x40010400

08001ca8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cae:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cf2:	f00a fa87 	bl	800c204 <HAL_UART_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001d06:	f000 fa37 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4814      	ldr	r0, [pc, #80]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001d0e:	f00b ff4b 	bl	800dba8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001d22:	f000 fa29 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001d2a:	f00b ff7b 	bl	800dc24 <HAL_UARTEx_SetRxFifoThreshold>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d3e:	f000 fa1b 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001d44:	f00b fef7 	bl	800db36 <HAL_UARTEx_DisableFifoMode>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d58:	f000 fa0e 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2400043c 	.word	0x2400043c
 8001d64:	40004800 	.word	0x40004800

08001d68 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d74:	2209      	movs	r2, #9
 8001d76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dae:	4807      	ldr	r0, [pc, #28]	; (8001dcc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001db0:	f004 ff88 	bl	8006cc4 <HAL_PCD_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001dc4:	f000 f9d8 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	240005c0 	.word	0x240005c0
 8001dd0:	40080000 	.word	0x40080000

08001dd4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_ZL11MX_DMA_Initv+0x4c>)
 8001ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <_ZL11MX_DMA_Initv+0x4c>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <_ZL11MX_DMA_Initv+0x4c>)
 8001dec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2105      	movs	r1, #5
 8001dfc:	200b      	movs	r0, #11
 8001dfe:	f002 fb1b 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e02:	200b      	movs	r0, #11
 8001e04:	f002 fb32 	bl	800446c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2105      	movs	r1, #5
 8001e0c:	200c      	movs	r0, #12
 8001e0e:	f002 fb13 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e12:	200c      	movs	r0, #12
 8001e14:	f002 fb2a 	bl	800446c <HAL_NVIC_EnableIRQ>

}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	58024400 	.word	0x58024400

08001e24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a41      	ldr	r2, [pc, #260]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a32      	ldr	r2, [pc, #200]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001ed8:	f043 0310 	orr.w	r3, r3, #16
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <_ZL12MX_GPIO_Initv+0x124>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f244 0101 	movw	r1, #16385	; 0x4001
 8001ef4:	4815      	ldr	r0, [pc, #84]	; (8001f4c <_ZL12MX_GPIO_Initv+0x128>)
 8001ef6:	f004 fe9d 	bl	8006c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2102      	movs	r1, #2
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <_ZL12MX_GPIO_Initv+0x12c>)
 8001f00:	f004 fe98 	bl	8006c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001f04:	f244 0301 	movw	r3, #16385	; 0x4001
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <_ZL12MX_GPIO_Initv+0x128>)
 8001f1e:	f004 fcd9 	bl	80068d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <_ZL12MX_GPIO_Initv+0x12c>)
 8001f3a:	f004 fccb 	bl	80068d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	; 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	58020400 	.word	0x58020400
 8001f50:	58021000 	.word	0x58021000

08001f54 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f00c fb17 	bl	800e590 <osDelay>
 8001f62:	e7fb      	b.n	8001f5c <_Z16StartDefaultTaskPv+0x8>

08001f64 <_Z13StartJoystickPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystick */
void StartJoystick(void *argument)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b09c      	sub	sp, #112	; 0x70
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystick */
  Joystick j1(&hadc1, &hadc2);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_Z13StartJoystickPv+0x60>)
 8001f72:	4915      	ldr	r1, [pc, #84]	; (8001fc8 <_Z13StartJoystickPv+0x64>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe feeb 	bl	8000d50 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>
  //Data data_joystick;
  /* Infinite loop */
  for(;;)
  {
    j1.read();
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff06 	bl	8000d90 <_ZN8Joystick4readEv>
    j1.set_pos();
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe ff87 	bl	8000e9c <_ZN8Joystick7set_posEv>
    osDelay(10U);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f00c fafe 	bl	800e590 <osDelay>
    //data_joystick = {j1.get_xPos(), j1.get_yPos()};
    x_data = j1.get_xPos();
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ffbf 	bl	8000f1c <_ZN8Joystick8get_xPosEv>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <_Z13StartJoystickPv+0x68>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
    y_data = j1.get_yPos();
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe ffc4 	bl	8000f3a <_ZN8Joystick8get_yPosEv>
 8001fb2:	eef0 7a40 	vmov.f32	s15, s0
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <_Z13StartJoystickPv+0x6c>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
    //osMessageQueuePut(JoystickQueueHandle,&data_joystick,0,200);
    osDelay(250U);
 8001fbc:	20fa      	movs	r0, #250	; 0xfa
 8001fbe:	f00c fae7 	bl	800e590 <osDelay>
    j1.read();
 8001fc2:	e7da      	b.n	8001f7a <_Z13StartJoystickPv+0x16>
 8001fc4:	2400025c 	.word	0x2400025c
 8001fc8:	240001f8 	.word	0x240001f8
 8001fcc:	24000b0c 	.word	0x24000b0c
 8001fd0:	24000b10 	.word	0x24000b10

08001fd4 <_Z12StartChassisPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassis */
void StartChassis(void *argument)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0ba      	sub	sp, #232	; 0xe8
 8001fd8:	af04      	add	r7, sp, #16
 8001fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassis */
  //Data reference;

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001fdc:	213c      	movs	r1, #60	; 0x3c
 8001fde:	4854      	ldr	r0, [pc, #336]	; (8002130 <_Z12StartChassisPv+0x15c>)
 8001fe0:	f009 f82e 	bl	800b040 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001fe4:	213c      	movs	r1, #60	; 0x3c
 8001fe6:	4853      	ldr	r0, [pc, #332]	; (8002134 <_Z12StartChassisPv+0x160>)
 8001fe8:	f009 f82a 	bl	800b040 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001fec:	2100      	movs	r1, #0
 8001fee:	4852      	ldr	r0, [pc, #328]	; (8002138 <_Z12StartChassisPv+0x164>)
 8001ff0:	f008 fe72 	bl	800acd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4851      	ldr	r0, [pc, #324]	; (800213c <_Z12StartChassisPv+0x168>)
 8001ff8:	f008 fe6e 	bl	800acd8 <HAL_TIM_PWM_Start>

  LL_Control::Encoder encL(&htim4, 50);
 8001ffc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002000:	2232      	movs	r2, #50	; 0x32
 8002002:	494c      	ldr	r1, [pc, #304]	; (8002134 <_Z12StartChassisPv+0x160>)
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fddb 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorL(&encL, &htim2, 1050, 1950);
 800200a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800200e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002012:	f240 739e 	movw	r3, #1950	; 0x79e
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	f240 431a 	movw	r3, #1050	; 0x41a
 800201c:	4a47      	ldr	r2, [pc, #284]	; (800213c <_Z12StartChassisPv+0x168>)
 800201e:	f7fe ff9b 	bl	8000f58 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorL.set_Ks(10.0f,5);
 8002022:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002026:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800202a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f84c 	bl	80010cc <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorL.stop();
 8002034:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f98d 	bl	8001358 <_ZN10LL_Control8Motor_PI4stopEv>

  LL_Control::Encoder encR(&htim8, 50);
 800203e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002042:	2232      	movs	r2, #50	; 0x32
 8002044:	493a      	ldr	r1, [pc, #232]	; (8002130 <_Z12StartChassisPv+0x15c>)
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fdba 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorR(&encR, &htim3, 1050, 1950);
 800204c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002050:	f107 0008 	add.w	r0, r7, #8
 8002054:	f240 739e 	movw	r3, #1950	; 0x79e
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	f240 431a 	movw	r3, #1050	; 0x41a
 800205e:	4a36      	ldr	r2, [pc, #216]	; (8002138 <_Z12StartChassisPv+0x164>)
 8002060:	f7fe ff7a 	bl	8000f58 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorR.set_Ks(10.0f,5);
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800206c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f82b 	bl	80010cc <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorR.stop();
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f96c 	bl	8001358 <_ZN10LL_Control8Motor_PI4stopEv>
  {

    //osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);

    //motorL.set_reference((reference.x_data * 2) - (reference.y_data*2));
    motorL.set_reference((x_data*2)+(y_data*2));
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <_Z12StartChassisPv+0x16c>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <_Z12StartChassisPv+0x170>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800209c:	eeb0 0a67 	vmov.f32	s0, s15
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe ffdf 	bl	8001064 <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encL.update();
 80020a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fe0a 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorL.go_to_ref();
 80020b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f8d2 	bl	800125e <_ZN10LL_Control8Motor_PI9go_to_refEv>

    //motorR.set_reference((reference.x_data * 2) + (reference.y_data*2));
    motorR.set_reference(-(x_data*2)+(y_data*2));
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <_Z12StartChassisPv+0x170>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <_Z12StartChassisPv+0x16c>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ffc2 	bl	8001064 <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encR.update();
 80020e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fded 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorR.go_to_ref();
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff f8b5 	bl	800125e <_ZN10LL_Control8Motor_PI9go_to_refEv>

    snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", x_data, y_data);
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <_Z12StartChassisPv+0x16c>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_Z12StartChassisPv+0x170>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002108:	ed8d 6b02 	vstr	d6, [sp, #8]
 800210c:	ed8d 7b00 	vstr	d7, [sp]
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <_Z12StartChassisPv+0x174>)
 8002112:	2132      	movs	r1, #50	; 0x32
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <_Z12StartChassisPv+0x178>)
 8002116:	f00f fe9b 	bl	8011e50 <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);
 800211a:	230a      	movs	r3, #10
 800211c:	2232      	movs	r2, #50	; 0x32
 800211e:	490b      	ldr	r1, [pc, #44]	; (800214c <_Z12StartChassisPv+0x178>)
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <_Z12StartChassisPv+0x17c>)
 8002122:	f00a f8bf 	bl	800c2a4 <HAL_UART_Transmit>
    osDelay(20U);
 8002126:	2014      	movs	r0, #20
 8002128:	f00c fa32 	bl	800e590 <osDelay>
    motorL.set_reference((x_data*2)+(y_data*2));
 800212c:	e7a8      	b.n	8002080 <_Z12StartChassisPv+0xac>
 800212e:	bf00      	nop
 8002130:	240003f0 	.word	0x240003f0
 8002134:	240003a4 	.word	0x240003a4
 8002138:	24000358 	.word	0x24000358
 800213c:	2400030c 	.word	0x2400030c
 8002140:	24000b0c 	.word	0x24000b0c
 8002144:	24000b10 	.word	0x24000b10
 8002148:	080155f0 	.word	0x080155f0
 800214c:	24000ad8 	.word	0x24000ad8
 8002150:	2400043c 	.word	0x2400043c

08002154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002166:	f000 fd25 	bl	8002bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40014800 	.word	0x40014800

08002178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002180:	e7fe      	b.n	8002180 <Error_Handler+0x8>
	...

08002184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_MspInit+0x38>)
 800218c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_MspInit+0x38>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_MspInit+0x38>)
 800219c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	210f      	movs	r1, #15
 80021ac:	f06f 0001 	mvn.w	r0, #1
 80021b0:	f002 f942 	bl	8004438 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	58024400 	.word	0x58024400

080021c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a39      	ldr	r2, [pc, #228]	; (80022c4 <HAL_ADC_MspInit+0x104>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d133      	bne.n	800224a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_ADC_MspInit+0x108>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	4a37      	ldr	r2, [pc, #220]	; (80022c8 <HAL_ADC_MspInit+0x108>)
 80021ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_ADC_MspInit+0x108>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10e      	bne.n	8002212 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 80021f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021fa:	4a34      	ldr	r2, [pc, #208]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 80021fc:	f043 0320 	orr.w	r3, r3, #32
 8002200:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002230:	2310      	movs	r3, #16
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002234:	2303      	movs	r3, #3
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4823      	ldr	r0, [pc, #140]	; (80022d0 <HAL_ADC_MspInit+0x110>)
 8002244:	f004 fb46 	bl	80068d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002248:	e037      	b.n	80022ba <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <HAL_ADC_MspInit+0x114>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d132      	bne.n	80022ba <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_ADC_MspInit+0x108>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_ADC_MspInit+0x108>)
 800225c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_ADC_MspInit+0x108>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10e      	bne.n	8002284 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 800226e:	f043 0320 	orr.w	r3, r3, #32
 8002272:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_ADC_MspInit+0x10c>)
 8002296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022a2:	2320      	movs	r3, #32
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a6:	2303      	movs	r3, #3
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <HAL_ADC_MspInit+0x110>)
 80022b6:	f004 fb0d 	bl	80068d4 <HAL_GPIO_Init>
}
 80022ba:	bf00      	nop
 80022bc:	3730      	adds	r7, #48	; 0x30
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	24000b14 	.word	0x24000b14
 80022cc:	58024400 	.word	0x58024400
 80022d0:	58020000 	.word	0x58020000
 80022d4:	40022100 	.word	0x40022100

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a23      	ldr	r2, [pc, #140]	; (8002374 <HAL_TIM_Base_MspInit+0x9c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d117      	bne.n	800231a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 80022ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022f0:	4a21      	ldr	r2, [pc, #132]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 80022fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2105      	movs	r1, #5
 800230c:	2019      	movs	r0, #25
 800230e:	f002 f893 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002312:	2019      	movs	r0, #25
 8002314:	f002 f8aa 	bl	800446c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002318:	e028      	b.n	800236c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002322:	d10f      	bne.n	8002344 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 8002326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 8002336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
}
 8002342:	e013      	b.n	800236c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_TIM_Base_MspInit+0xa4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10e      	bne.n	800236c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 8002350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002354:	4a08      	ldr	r2, [pc, #32]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 8002360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	bf00      	nop
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010000 	.word	0x40010000
 8002378:	58024400 	.word	0x58024400
 800237c:	40000400 	.word	0x40000400

08002380 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a34      	ldr	r2, [pc, #208]	; (8002470 <HAL_TIM_Encoder_MspInit+0xf0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12f      	bne.n	8002402 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a8:	4a32      	ldr	r2, [pc, #200]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c6:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 80023de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ec:	2302      	movs	r3, #2
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	481f      	ldr	r0, [pc, #124]	; (8002478 <HAL_TIM_Encoder_MspInit+0xf8>)
 80023fc:	f004 fa6a 	bl	80068d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002400:	e032      	b.n	8002468 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_TIM_Encoder_MspInit+0xfc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d12d      	bne.n	8002468 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 800240e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 800241e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a10      	ldr	r2, [pc, #64]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_TIM_Encoder_MspInit+0xf4>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8002448:	23c0      	movs	r3, #192	; 0xc0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002458:	2303      	movs	r3, #3
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <HAL_TIM_Encoder_MspInit+0x100>)
 8002464:	f004 fa36 	bl	80068d4 <HAL_GPIO_Init>
}
 8002468:	bf00      	nop
 800246a:	3730      	adds	r7, #48	; 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40000800 	.word	0x40000800
 8002474:	58024400 	.word	0x58024400
 8002478:	58020c00 	.word	0x58020c00
 800247c:	40010400 	.word	0x40010400
 8002480:	58020800 	.word	0x58020800

08002484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d11f      	bne.n	80024e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_TIM_MspPostInit+0xb4>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	4a22      	ldr	r2, [pc, #136]	; (8002538 <HAL_TIM_MspPostInit+0xb4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_TIM_MspPostInit+0xb4>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 80024c4:	2301      	movs	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d0:	2302      	movs	r3, #2
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024d4:	2301      	movs	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	4817      	ldr	r0, [pc, #92]	; (800253c <HAL_TIM_MspPostInit+0xb8>)
 80024e0:	f004 f9f8 	bl	80068d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024e4:	e023      	b.n	800252e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <HAL_TIM_MspPostInit+0xbc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d11e      	bne.n	800252e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_TIM_MspPostInit+0xb4>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_TIM_MspPostInit+0xb4>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_TIM_MspPostInit+0xb4>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2302      	movs	r3, #2
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251e:	2302      	movs	r3, #2
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <HAL_TIM_MspPostInit+0xb8>)
 800252a:	f004 f9d3 	bl	80068d4 <HAL_GPIO_Init>
}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	58024400 	.word	0x58024400
 800253c:	58020000 	.word	0x58020000
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0ba      	sub	sp, #232	; 0xe8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	22c0      	movs	r2, #192	; 0xc0
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f00f fd0a 	bl	8011f7e <memset>
  if(huart->Instance==USART3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a59      	ldr	r2, [pc, #356]	; (80026d4 <HAL_UART_MspInit+0x190>)
 8002570:	4293      	cmp	r3, r2
 8002572:	f040 80aa 	bne.w	80026ca <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002576:	f04f 0202 	mov.w	r2, #2
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	4618      	mov	r0, r3
 800258e:	f005 fd73 	bl	8008078 <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002598:	f7ff fdee 	bl	8002178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <HAL_UART_MspInit+0x194>)
 800259e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025a2:	4a4d      	ldr	r2, [pc, #308]	; (80026d8 <HAL_UART_MspInit+0x194>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025ac:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_UART_MspInit+0x194>)
 80025ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_UART_MspInit+0x194>)
 80025bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c0:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <HAL_UART_MspInit+0x194>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ca:	4b43      	ldr	r3, [pc, #268]	; (80026d8 <HAL_UART_MspInit+0x194>)
 80025cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025f2:	2307      	movs	r3, #7
 80025f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4837      	ldr	r0, [pc, #220]	; (80026dc <HAL_UART_MspInit+0x198>)
 8002600:	f004 f968 	bl	80068d4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002606:	4a37      	ldr	r2, [pc, #220]	; (80026e4 <HAL_UART_MspInit+0x1a0>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 800260c:	222d      	movs	r2, #45	; 0x2d
 800260e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 800261e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002622:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002624:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002642:	4827      	ldr	r0, [pc, #156]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002644:	f001 ff20 	bl	8004488 <HAL_DMA_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800264e:	f7ff fd93 	bl	8002178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 8002656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <HAL_UART_MspInit+0x19c>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 8002662:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_UART_MspInit+0x1a8>)
 8002664:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 8002668:	222e      	movs	r2, #46	; 0x2e
 800266a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 800267a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800267e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 800269a:	2200      	movs	r2, #0
 800269c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800269e:	4812      	ldr	r0, [pc, #72]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 80026a0:	f001 fef2 	bl	8004488 <HAL_DMA_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80026aa:	f7ff fd65 	bl	8002178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 80026b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <HAL_UART_MspInit+0x1a4>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2105      	movs	r1, #5
 80026be:	2027      	movs	r0, #39	; 0x27
 80026c0:	f001 feba 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026c4:	2027      	movs	r0, #39	; 0x27
 80026c6:	f001 fed1 	bl	800446c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	37e8      	adds	r7, #232	; 0xe8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40004800 	.word	0x40004800
 80026d8:	58024400 	.word	0x58024400
 80026dc:	58020c00 	.word	0x58020c00
 80026e0:	240004d0 	.word	0x240004d0
 80026e4:	40020010 	.word	0x40020010
 80026e8:	24000548 	.word	0x24000548
 80026ec:	40020028 	.word	0x40020028

080026f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0ba      	sub	sp, #232	; 0xe8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	22c0      	movs	r2, #192	; 0xc0
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f00f fc34 	bl	8011f7e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a38      	ldr	r2, [pc, #224]	; (80027fc <HAL_PCD_MspInit+0x10c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d169      	bne.n	80027f4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002720:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800272c:	2301      	movs	r3, #1
 800272e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8002730:	2312      	movs	r3, #18
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002734:	2302      	movs	r3, #2
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8002738:	2303      	movs	r3, #3
 800273a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800273c:	2302      	movs	r3, #2
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002744:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8002746:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800274a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800274c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4618      	mov	r0, r3
 800275a:	f005 fc8d 	bl	8008078 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8002764:	f7ff fd08 	bl	8002178 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002768:	f004 fc4e 	bl	8007008 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_PCD_MspInit+0x110>)
 800276e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_PCD_MspInit+0x110>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_PCD_MspInit+0x110>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800278a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800278e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027a4:	230a      	movs	r3, #10
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4814      	ldr	r0, [pc, #80]	; (8002804 <HAL_PCD_MspInit+0x114>)
 80027b2:	f004 f88f 	bl	80068d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027ce:	4619      	mov	r1, r3
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <HAL_PCD_MspInit+0x114>)
 80027d2:	f004 f87f 	bl	80068d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_PCD_MspInit+0x110>)
 80027d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027dc:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_PCD_MspInit+0x110>)
 80027de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_PCD_MspInit+0x110>)
 80027e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	37e8      	adds	r7, #232	; 0xe8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40080000 	.word	0x40080000
 8002800:	58024400 	.word	0x58024400
 8002804:	58020000 	.word	0x58020000

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	d844      	bhi.n	80028a0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8002816:	2200      	movs	r2, #0
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	2076      	movs	r0, #118	; 0x76
 800281c:	f001 fe0c 	bl	8004438 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002820:	2076      	movs	r0, #118	; 0x76
 8002822:	f001 fe23 	bl	800446c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002826:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <HAL_InitTick+0xb0>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_InitTick+0xb4>)
 800282e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002832:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_InitTick+0xb4>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_InitTick+0xb4>)
 800283e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800284a:	f107 020c 	add.w	r2, r7, #12
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f005 fbcd 	bl	8007ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800285a:	f005 fbb5 	bl	8007fc8 <HAL_RCC_GetPCLK2Freq>
 800285e:	4603      	mov	r3, r0
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_InitTick+0xb8>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9b      	lsrs	r3, r3, #18
 800286e:	3b01      	subs	r3, #1
 8002870:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_InitTick+0xbc>)
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_InitTick+0xc0>)
 8002876:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_InitTick+0xbc>)
 800287a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800287e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002880:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_InitTick+0xbc>)
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_InitTick+0xbc>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_InitTick+0xbc>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002892:	480c      	ldr	r0, [pc, #48]	; (80028c4 <HAL_InitTick+0xbc>)
 8002894:	f008 f8ee 	bl	800aa74 <HAL_TIM_Base_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_InitTick+0xa6>
 800289e:	e001      	b.n	80028a4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e005      	b.n	80028b0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80028a4:	4807      	ldr	r0, [pc, #28]	; (80028c4 <HAL_InitTick+0xbc>)
 80028a6:	f008 f93d 	bl	800ab24 <HAL_TIM_Base_Start_IT>
 80028aa:	4603      	mov	r3, r0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	24000008 	.word	0x24000008
 80028bc:	58024400 	.word	0x58024400
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	24000b18 	.word	0x24000b18
 80028c8:	40014800 	.word	0x40014800

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA1_Stream0_IRQHandler+0x10>)
 80028fe:	f002 fe83 	bl	8005608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	240004d0 	.word	0x240004d0

0800290c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <DMA1_Stream1_IRQHandler+0x10>)
 8002912:	f002 fe79 	bl	8005608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	24000548 	.word	0x24000548

08002920 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <TIM1_UP_IRQHandler+0x10>)
 8002926:	f008 fc39 	bl	800b19c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	240002c0 	.word	0x240002c0

08002934 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <USART3_IRQHandler+0x10>)
 800293a:	f009 fd41 	bl	800c3c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2400043c 	.word	0x2400043c

08002948 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <TIM17_IRQHandler+0x10>)
 800294e:	f008 fc25 	bl	800b19c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	24000b18 	.word	0x24000b18

0800295c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return 1;
 8002960:	2301      	movs	r3, #1
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_kill>:

int _kill(int pid, int sig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002976:	f00f fbbb 	bl	80120f0 <__errno>
 800297a:	4603      	mov	r3, r0
 800297c:	2216      	movs	r2, #22
 800297e:	601a      	str	r2, [r3, #0]
  return -1;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_exit>:

void _exit (int status)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffe7 	bl	800296c <_kill>
  while (1) {}    /* Make sure we hang here */
 800299e:	e7fe      	b.n	800299e <_exit+0x12>

080029a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e00a      	b.n	80029c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b2:	f3af 8000 	nop.w
 80029b6:	4601      	mov	r1, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60ba      	str	r2, [r7, #8]
 80029be:	b2ca      	uxtb	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbf0      	blt.n	80029b2 <_read+0x12>
  }

  return len;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e009      	b.n	8002a00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	dbf1      	blt.n	80029ec <_write+0x12>
  }
  return len;
 8002a08:	687b      	ldr	r3, [r7, #4]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_close>:

int _close(int file)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a3a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_isatty>:

int _isatty(int file)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <_sbrk+0x5c>)
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <_sbrk+0x60>)
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <_sbrk+0x64>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <_sbrk+0x68>)
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d207      	bcs.n	8002abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aac:	f00f fb20 	bl	80120f0 <__errno>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	e009      	b.n	8002ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <_sbrk+0x64>)
 8002acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	24080000 	.word	0x24080000
 8002adc:	00000400 	.word	0x00000400
 8002ae0:	24000b64 	.word	0x24000b64
 8002ae4:	240056a0 	.word	0x240056a0

08002ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002aec:	f7fd ffc2 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b08:	4c0a      	ldr	r4, [pc, #40]	; (8002b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b16:	f00f faf1 	bl	80120fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1a:	f7fe fc2d 	bl	8001378 <main>
  bx  lr
 8002b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b28:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002b2c:	08015b28 	.word	0x08015b28
  ldr r2, =_sbss
 8002b30:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002b34:	240056a0 	.word	0x240056a0

08002b38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b38:	e7fe      	b.n	8002b38 <ADC3_IRQHandler>
	...

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f001 fc6d 	bl	8004422 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b48:	f005 f87e 	bl	8007c48 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_Init+0x68>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	4913      	ldr	r1, [pc, #76]	; (8002ba8 <HAL_Init+0x6c>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_Init+0x68>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_Init+0x6c>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <HAL_Init+0x70>)
 8002b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_Init+0x74>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b86:	200f      	movs	r0, #15
 8002b88:	f7ff fe3e 	bl	8002808 <HAL_InitTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e002      	b.n	8002b9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b96:	f7ff faf5 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	08015624 	.word	0x08015624
 8002bac:	24000004 	.word	0x24000004
 8002bb0:	24000000 	.word	0x24000000

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2400000c 	.word	0x2400000c
 8002bd8:	24000b68 	.word	0x24000b68

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	24000b68 	.word	0x24000b68

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2400000c 	.word	0x2400000c

08002c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_GetREVID+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0c1b      	lsrs	r3, r3, #16
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	5c001000 	.word	0x5c001000

08002c54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3360      	adds	r3, #96	; 0x60
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	431a      	orrs	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	611a      	str	r2, [r3, #16]
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3360      	adds	r3, #96	; 0x60
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]
  }
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3330      	adds	r3, #48	; 0x30
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	4413      	add	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	211f      	movs	r1, #31
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	f003 011f 	and.w	r1, r3, #31
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3314      	adds	r3, #20
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	0e5b      	lsrs	r3, r3, #25
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	4413      	add	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	0d1b      	lsrs	r3, r3, #20
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2107      	movs	r1, #7
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	401a      	ands	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0d1b      	lsrs	r3, r3, #20
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	431a      	orrs	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e50:	43db      	mvns	r3, r3
 8002e52:	401a      	ands	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0318 	and.w	r3, r3, #24
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e5c:	40d9      	lsrs	r1, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	400b      	ands	r3, r1
 8002e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e66:	431a      	orrs	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	000fffff 	.word	0x000fffff

08002e80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6093      	str	r3, [r2, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	5fffffc0 	.word	0x5fffffc0

08002edc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	6fffffc0 	.word	0x6fffffc0

08002f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <LL_ADC_Enable+0x24>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	7fffffc0 	.word	0x7fffffc0

08002f7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <LL_ADC_IsEnabled+0x18>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <LL_ADC_IsEnabled+0x1a>
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <LL_ADC_REG_StartConversion+0x24>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	7fffffc0 	.word	0x7fffffc0

08002fcc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b08      	cmp	r3, #8
 8003004:	d101      	bne.n	800300a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e18f      	b.n	8003352 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff f8bd 	bl	80021c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff3f 	bl	8002edc <LL_ADC_IsDeepPowerDownEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff25 	bl	8002eb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ff5a 	bl	8002f2c <LL_ADC_IsInternalRegulatorEnabled>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d114      	bne.n	80030a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff3e 	bl	8002f04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003088:	4b87      	ldr	r3, [pc, #540]	; (80032a8 <HAL_ADC_Init+0x290>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_ADC_Init+0x294>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff3d 	bl	8002f2c <LL_ADC_IsInternalRegulatorEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff77 	bl	8002fcc <LL_ADC_REG_IsConversionOngoing>
 80030de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 8129 	bne.w	8003340 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 8125 	bne.w	8003340 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030fe:	f043 0202 	orr.w	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff36 	bl	8002f7c <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d136      	bne.n	8003184 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a65      	ldr	r2, [pc, #404]	; (80032b0 <HAL_ADC_Init+0x298>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_ADC_Init+0x112>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_ADC_Init+0x29c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10e      	bne.n	8003148 <HAL_ADC_Init+0x130>
 800312a:	4861      	ldr	r0, [pc, #388]	; (80032b0 <HAL_ADC_Init+0x298>)
 800312c:	f7ff ff26 	bl	8002f7c <LL_ADC_IsEnabled>
 8003130:	4604      	mov	r4, r0
 8003132:	4860      	ldr	r0, [pc, #384]	; (80032b4 <HAL_ADC_Init+0x29c>)
 8003134:	f7ff ff22 	bl	8002f7c <LL_ADC_IsEnabled>
 8003138:	4603      	mov	r3, r0
 800313a:	4323      	orrs	r3, r4
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e008      	b.n	800315a <HAL_ADC_Init+0x142>
 8003148:	485b      	ldr	r0, [pc, #364]	; (80032b8 <HAL_ADC_Init+0x2a0>)
 800314a:	f7ff ff17 	bl	8002f7c <LL_ADC_IsEnabled>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_ADC_Init+0x298>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_ADC_Init+0x15a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_ADC_Init+0x29c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Init+0x15e>
 8003172:	4a52      	ldr	r2, [pc, #328]	; (80032bc <HAL_ADC_Init+0x2a4>)
 8003174:	e000      	b.n	8003178 <HAL_ADC_Init+0x160>
 8003176:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_ADC_Init+0x2a8>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fd68 	bl	8002c54 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003184:	f7ff fd5a 	bl	8002c3c <HAL_GetREVID>
 8003188:	4603      	mov	r3, r0
 800318a:	f241 0203 	movw	r2, #4099	; 0x1003
 800318e:	4293      	cmp	r3, r2
 8003190:	d914      	bls.n	80031bc <HAL_ADC_Init+0x1a4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b10      	cmp	r3, #16
 8003198:	d110      	bne.n	80031bc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7d5b      	ldrb	r3, [r3, #21]
 800319e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7f1b      	ldrb	r3, [r3, #28]
 80031b0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031b2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031b4:	f043 030c 	orr.w	r3, r3, #12
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e00d      	b.n	80031d8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7d5b      	ldrb	r3, [r3, #21]
 80031c0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031cc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7f1b      	ldrb	r3, [r3, #28]
 80031d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7f1b      	ldrb	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	045b      	lsls	r3, r3, #17
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_ADC_Init+0x2ac>)
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	430b      	orrs	r3, r1
 800321c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fed2 	bl	8002fcc <LL_ADC_REG_IsConversionOngoing>
 8003228:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fedf 	bl	8002ff2 <LL_ADC_INJ_IsConversionOngoing>
 8003234:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d15f      	bne.n	80032fc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d15c      	bne.n	80032fc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7d1b      	ldrb	r3, [r3, #20]
 8003246:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_ADC_Init+0x2b0>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	69b9      	ldr	r1, [r7, #24]
 8003260:	430b      	orrs	r3, r1
 8003262:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800326a:	2b01      	cmp	r3, #1
 800326c:	d130      	bne.n	80032d0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_ADC_Init+0x2b4>)
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003282:	3a01      	subs	r2, #1
 8003284:	0411      	lsls	r1, r2, #16
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800328a:	4311      	orrs	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003296:	430a      	orrs	r2, r1
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	611a      	str	r2, [r3, #16]
 80032a4:	e01c      	b.n	80032e0 <HAL_ADC_Init+0x2c8>
 80032a6:	bf00      	nop
 80032a8:	24000000 	.word	0x24000000
 80032ac:	053e2d63 	.word	0x053e2d63
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40022100 	.word	0x40022100
 80032b8:	58026000 	.word	0x58026000
 80032bc:	40022300 	.word	0x40022300
 80032c0:	58026300 	.word	0x58026300
 80032c4:	fff0c003 	.word	0xfff0c003
 80032c8:	ffffbffc 	.word	0xffffbffc
 80032cc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fdd6 	bl	8003ea8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f023 010f 	bic.w	r1, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	1e5a      	subs	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
 800331c:	e007      	b.n	800332e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 020f 	bic.w	r2, r2, #15
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
 800333e:	e007      	b.n	8003350 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003350:	7ffb      	ldrb	r3, [r7, #31]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
 800335a:	bf00      	nop

0800335c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5c      	ldr	r2, [pc, #368]	; (80034dc <HAL_ADC_Start+0x180>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADC_Start+0x1c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5b      	ldr	r2, [pc, #364]	; (80034e0 <HAL_ADC_Start+0x184>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_ADC_Start+0x20>
 8003378:	4b5a      	ldr	r3, [pc, #360]	; (80034e4 <HAL_ADC_Start+0x188>)
 800337a:	e000      	b.n	800337e <HAL_ADC_Start+0x22>
 800337c:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <HAL_ADC_Start+0x18c>)
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fd7e 	bl	8002e80 <LL_ADC_GetMultimode>
 8003384:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fe1e 	bl	8002fcc <LL_ADC_REG_IsConversionOngoing>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 809a 	bne.w	80034cc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start+0x4a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e095      	b.n	80034d2 <HAL_ADC_Start+0x176>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fcf0 	bl	8003d94 <ADC_Enable>
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 8081 	bne.w	80034c2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033c4:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_ADC_Start+0x190>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <HAL_ADC_Start+0x184>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d002      	beq.n	80033e0 <HAL_ADC_Start+0x84>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	e000      	b.n	80033e2 <HAL_ADC_Start+0x86>
 80033e0:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_ADC_Start+0x180>)
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d002      	beq.n	80033f0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003408:	d106      	bne.n	8003418 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	f023 0206 	bic.w	r2, r3, #6
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	659a      	str	r2, [r3, #88]	; 0x58
 8003416:	e002      	b.n	800341e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	221c      	movs	r2, #28
 8003424:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <HAL_ADC_Start+0x184>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d002      	beq.n	800343e <HAL_ADC_Start+0xe2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	e000      	b.n	8003440 <HAL_ADC_Start+0xe4>
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_ADC_Start+0x180>)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	4293      	cmp	r3, r2
 8003446:	d008      	beq.n	800345a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d002      	beq.n	800345a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b09      	cmp	r3, #9
 8003458:	d114      	bne.n	8003484 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fd91 	bl	8002fa4 <LL_ADC_REG_StartConversion>
 8003482:	e025      	b.n	80034d0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <HAL_ADC_Start+0x184>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d002      	beq.n	80034a0 <HAL_ADC_Start+0x144>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e000      	b.n	80034a2 <HAL_ADC_Start+0x146>
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_ADC_Start+0x180>)
 80034a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00f      	beq.n	80034d0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
 80034c0:	e006      	b.n	80034d0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034ca:	e001      	b.n	80034d0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
 80034ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40022100 	.word	0x40022100
 80034e4:	40022300 	.word	0x40022300
 80034e8:	58026300 	.word	0x58026300
 80034ec:	fffff0fe 	.word	0xfffff0fe

080034f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a72      	ldr	r2, [pc, #456]	; (80036c8 <HAL_ADC_PollForConversion+0x1d8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_ADC_PollForConversion+0x1e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a70      	ldr	r2, [pc, #448]	; (80036cc <HAL_ADC_PollForConversion+0x1dc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_ADC_PollForConversion+0x22>
 800350e:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <HAL_ADC_PollForConversion+0x1e0>)
 8003510:	e000      	b.n	8003514 <HAL_ADC_PollForConversion+0x24>
 8003512:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <HAL_ADC_PollForConversion+0x1e4>)
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fcb3 	bl	8002e80 <LL_ADC_GetMultimode>
 800351a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d102      	bne.n	800352a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003524:	2308      	movs	r3, #8
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	e037      	b.n	800359a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b05      	cmp	r3, #5
 8003534:	d002      	beq.n	800353c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b09      	cmp	r3, #9
 800353a:	d111      	bne.n	8003560 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0b1      	b.n	80036be <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800355a:	2304      	movs	r3, #4
 800355c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800355e:	e01c      	b.n	800359a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a58      	ldr	r2, [pc, #352]	; (80036c8 <HAL_ADC_PollForConversion+0x1d8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_ADC_PollForConversion+0x84>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_ADC_PollForConversion+0x1dc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <HAL_ADC_PollForConversion+0x88>
 8003574:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <HAL_ADC_PollForConversion+0x1e0>)
 8003576:	e000      	b.n	800357a <HAL_ADC_PollForConversion+0x8a>
 8003578:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_ADC_PollForConversion+0x1e4>)
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fc8e 	bl	8002e9c <LL_ADC_GetMultiDMATransfer>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e093      	b.n	80036be <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003596:	2304      	movs	r3, #4
 8003598:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800359a:	f7ff fb1f 	bl	8002bdc <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035a0:	e021      	b.n	80035e6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d01d      	beq.n	80035e6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80035aa:	f7ff fb17 	bl	8002bdc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <HAL_ADC_PollForConversion+0xd0>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d112      	bne.n	80035e6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e06b      	b.n	80036be <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0d6      	beq.n	80035a2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fbad 	bl	8002d64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01c      	beq.n	800364a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7d5b      	ldrb	r3, [r3, #21]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d118      	bne.n	800364a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d111      	bne.n	800364a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_ADC_PollForConversion+0x1dc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d002      	beq.n	800365a <HAL_ADC_PollForConversion+0x16a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e000      	b.n	800365c <HAL_ADC_PollForConversion+0x16c>
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_ADC_PollForConversion+0x1d8>)
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	4293      	cmp	r3, r2
 8003662:	d008      	beq.n	8003676 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d002      	beq.n	8003676 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b09      	cmp	r3, #9
 8003674:	d104      	bne.n	8003680 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	e00c      	b.n	800369a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a11      	ldr	r2, [pc, #68]	; (80036cc <HAL_ADC_PollForConversion+0x1dc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d002      	beq.n	8003690 <HAL_ADC_PollForConversion+0x1a0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e000      	b.n	8003692 <HAL_ADC_PollForConversion+0x1a2>
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_ADC_PollForConversion+0x1d8>)
 8003692:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d104      	bne.n	80036aa <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2208      	movs	r2, #8
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e008      	b.n	80036bc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	220c      	movs	r2, #12
 80036ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40022100 	.word	0x40022100
 80036d0:	40022300 	.word	0x40022300
 80036d4:	58026300 	.word	0x58026300

080036d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b0a1      	sub	sp, #132	; 0x84
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a9d      	ldr	r2, [pc, #628]	; (8003984 <HAL_ADC_ConfigChannel+0x290>)
 800370e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x2a>
 800371a:	2302      	movs	r3, #2
 800371c:	e321      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x66e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fc4e 	bl	8002fcc <LL_ADC_REG_IsConversionOngoing>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 8306 	bne.w	8003d44 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x62>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2201      	movs	r2, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	e016      	b.n	8003784 <HAL_ADC_ConfigChannel+0x90>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e003      	b.n	800377a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2201      	movs	r2, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	69d1      	ldr	r1, [r2, #28]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	430b      	orrs	r3, r1
 8003790:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7ff faf3 	bl	8002d8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fc0f 	bl	8002fcc <LL_ADC_REG_IsConversionOngoing>
 80037ae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fc1c 	bl	8002ff2 <LL_ADC_INJ_IsConversionOngoing>
 80037ba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 80b3 	bne.w	800392a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f040 80af 	bne.w	800392a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	461a      	mov	r2, r3
 80037da:	f7ff fb02 	bl	8002de2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037de:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_ADC_ConfigChannel+0x294>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ea:	d10b      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x110>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	e01d      	b.n	8003840 <HAL_ADC_ConfigChannel+0x14c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_ADC_ConfigChannel+0x136>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	e00a      	b.n	8003840 <HAL_ADC_ConfigChannel+0x14c>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d027      	beq.n	800389a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003858:	f7ff fa30 	bl	8002cbc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6919      	ldr	r1, [r3, #16]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	7e5b      	ldrb	r3, [r3, #25]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x17e>
 800386c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003870:	e000      	b.n	8003874 <HAL_ADC_ConfigChannel+0x180>
 8003872:	2300      	movs	r3, #0
 8003874:	461a      	mov	r2, r3
 8003876:	f7ff fa5a 	bl	8002d2e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6919      	ldr	r1, [r3, #16]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	7e1b      	ldrb	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x19c>
 800388a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800388e:	e000      	b.n	8003892 <HAL_ADC_ConfigChannel+0x19e>
 8003890:	2300      	movs	r3, #0
 8003892:	461a      	mov	r2, r3
 8003894:	f7ff fa32 	bl	8002cfc <LL_ADC_SetDataRightShift>
 8003898:	e047      	b.n	800392a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	069b      	lsls	r3, r3, #26
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d107      	bne.n	80038be <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	069b      	lsls	r3, r3, #26
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d107      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038e0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	069b      	lsls	r3, r3, #26
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d107      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003904:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	069b      	lsls	r3, r3, #26
 8003916:	429a      	cmp	r2, r3
 8003918:	d107      	bne.n	800392a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003928:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fb24 	bl	8002f7c <LL_ADC_IsEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 820d 	bne.w	8003d56 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	461a      	mov	r2, r3
 800394a:	f7ff fa75 	bl	8002e38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <HAL_ADC_ConfigChannel+0x290>)
 8003954:	4293      	cmp	r3, r2
 8003956:	f040 8133 	bne.w	8003bc0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003966:	2b00      	cmp	r3, #0
 8003968:	d110      	bne.n	800398c <HAL_ADC_ConfigChannel+0x298>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	3301      	adds	r3, #1
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2b09      	cmp	r3, #9
 8003978:	bf94      	ite	ls
 800397a:	2301      	movls	r3, #1
 800397c:	2300      	movhi	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e01e      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x2cc>
 8003982:	bf00      	nop
 8003984:	47ff0000 	.word	0x47ff0000
 8003988:	5c001000 	.word	0x5c001000
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800399a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800399e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80039a4:	2320      	movs	r3, #32
 80039a6:	e003      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80039a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2b09      	cmp	r3, #9
 80039b8:	bf94      	ite	ls
 80039ba:	2301      	movls	r3, #1
 80039bc:	2300      	movhi	r3, #0
 80039be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d079      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x2ec>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0e9b      	lsrs	r3, r3, #26
 80039d6:	3301      	adds	r3, #1
 80039d8:	069b      	lsls	r3, r3, #26
 80039da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039de:	e015      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x318>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e003      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80039fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	069b      	lsls	r3, r3, #26
 8003a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x338>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	e017      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x368>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e003      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	ea42 0103 	orr.w	r1, r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x38e>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	3301      	adds	r3, #1
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	051b      	lsls	r3, r3, #20
 8003a80:	e018      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x3c0>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e003      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	e07e      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x3e0>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	3301      	adds	r3, #1
 8003acc:	069b      	lsls	r3, r3, #26
 8003ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad2:	e015      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x40c>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003aec:	2320      	movs	r3, #32
 8003aee:	e003      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	069b      	lsls	r3, r3, #26
 8003afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x42c>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0e9b      	lsrs	r3, r3, #26
 8003b12:	3301      	adds	r3, #1
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	2101      	movs	r1, #1
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	e017      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x45c>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003b38:	2320      	movs	r3, #32
 8003b3a:	e003      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	ea42 0103 	orr.w	r1, r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x488>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0e9b      	lsrs	r3, r3, #26
 8003b66:	3301      	adds	r3, #1
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	3b1e      	subs	r3, #30
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	e01b      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x4c0>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	60fb      	str	r3, [r7, #12]
  return result;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003b94:	2320      	movs	r3, #32
 8003b96:	e003      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f003 021f 	and.w	r2, r3, #31
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	3b1e      	subs	r3, #30
 8003bae:	051b      	lsls	r3, r3, #20
 8003bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f7ff f911 	bl	8002de2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f280 80c6 	bge.w	8003d56 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a67      	ldr	r2, [pc, #412]	; (8003d6c <HAL_ADC_ConfigChannel+0x678>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x4ea>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a65      	ldr	r2, [pc, #404]	; (8003d70 <HAL_ADC_ConfigChannel+0x67c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x4ee>
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <HAL_ADC_ConfigChannel+0x680>)
 8003be0:	e000      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x4f0>
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_ADC_ConfigChannel+0x684>)
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff f85b 	bl	8002ca0 <LL_ADC_GetCommonPathInternalCh>
 8003bea:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5e      	ldr	r2, [pc, #376]	; (8003d6c <HAL_ADC_ConfigChannel+0x678>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_ConfigChannel+0x50c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a5d      	ldr	r2, [pc, #372]	; (8003d70 <HAL_ADC_ConfigChannel+0x67c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10e      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x52a>
 8003c00:	485a      	ldr	r0, [pc, #360]	; (8003d6c <HAL_ADC_ConfigChannel+0x678>)
 8003c02:	f7ff f9bb 	bl	8002f7c <LL_ADC_IsEnabled>
 8003c06:	4604      	mov	r4, r0
 8003c08:	4859      	ldr	r0, [pc, #356]	; (8003d70 <HAL_ADC_ConfigChannel+0x67c>)
 8003c0a:	f7ff f9b7 	bl	8002f7c <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4323      	orrs	r3, r4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e008      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x53c>
 8003c1e:	4857      	ldr	r0, [pc, #348]	; (8003d7c <HAL_ADC_ConfigChannel+0x688>)
 8003c20:	f7ff f9ac 	bl	8002f7c <LL_ADC_IsEnabled>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07d      	beq.n	8003d30 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a51      	ldr	r2, [pc, #324]	; (8003d80 <HAL_ADC_ConfigChannel+0x68c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d130      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x5ac>
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d12b      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_ADC_ConfigChannel+0x688>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f040 8081 	bne.w	8003d56 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a44      	ldr	r2, [pc, #272]	; (8003d6c <HAL_ADC_ConfigChannel+0x678>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x574>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_ADC_ConfigChannel+0x67c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x578>
 8003c68:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <HAL_ADC_ConfigChannel+0x680>)
 8003c6a:	e000      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x57a>
 8003c6c:	4a42      	ldr	r2, [pc, #264]	; (8003d78 <HAL_ADC_ConfigChannel+0x684>)
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe ffff 	bl	8002c7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_ADC_ConfigChannel+0x690>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	4a41      	ldr	r2, [pc, #260]	; (8003d88 <HAL_ADC_ConfigChannel+0x694>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c90:	e002      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f9      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c9e:	e05a      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_ADC_ConfigChannel+0x698>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d11e      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x5f4>
 8003caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d119      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <HAL_ADC_ConfigChannel+0x688>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d14b      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <HAL_ADC_ConfigChannel+0x678>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x5de>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <HAL_ADC_ConfigChannel+0x67c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x5e2>
 8003cd2:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <HAL_ADC_ConfigChannel+0x680>)
 8003cd4:	e000      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x5e4>
 8003cd6:	4a28      	ldr	r2, [pc, #160]	; (8003d78 <HAL_ADC_ConfigChannel+0x684>)
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7fe ffca 	bl	8002c7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce6:	e036      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <HAL_ADC_ConfigChannel+0x69c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d131      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d12c      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_ADC_ConfigChannel+0x688>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d127      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_ADC_ConfigChannel+0x678>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_ADC_ConfigChannel+0x626>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_ADC_ConfigChannel+0x67c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x62a>
 8003d1a:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <HAL_ADC_ConfigChannel+0x680>)
 8003d1c:	e000      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x62c>
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_ADC_ConfigChannel+0x684>)
 8003d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f7fe ffa6 	bl	8002c7a <LL_ADC_SetCommonPathInternalCh>
 8003d2e:	e012      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d42:	e008      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3784      	adds	r7, #132	; 0x84
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40022000 	.word	0x40022000
 8003d70:	40022100 	.word	0x40022100
 8003d74:	40022300 	.word	0x40022300
 8003d78:	58026300 	.word	0x58026300
 8003d7c:	58026000 	.word	0x58026000
 8003d80:	cb840000 	.word	0xcb840000
 8003d84:	24000000 	.word	0x24000000
 8003d88:	053e2d63 	.word	0x053e2d63
 8003d8c:	c7520000 	.word	0xc7520000
 8003d90:	cfb80000 	.word	0xcfb80000

08003d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f8eb 	bl	8002f7c <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d16e      	bne.n	8003e8a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <ADC_Enable+0x100>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e05a      	b.n	8003e8c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f8ba 	bl	8002f54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003de0:	f7fe fefc 	bl	8002bdc <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <ADC_Enable+0x104>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <ADC_Enable+0x66>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <ADC_Enable+0x108>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <ADC_Enable+0x6a>
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <ADC_Enable+0x10c>)
 8003dfc:	e000      	b.n	8003e00 <ADC_Enable+0x6c>
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <ADC_Enable+0x110>)
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff f83d 	bl	8002e80 <LL_ADC_GetMultimode>
 8003e06:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <ADC_Enable+0x108>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d002      	beq.n	8003e18 <ADC_Enable+0x84>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	e000      	b.n	8003e1a <ADC_Enable+0x86>
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <ADC_Enable+0x104>)
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02c      	beq.n	8003e7c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d130      	bne.n	8003e8a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e28:	e028      	b.n	8003e7c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff f8a4 	bl	8002f7c <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff f888 	bl	8002f54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e44:	f7fe feca 	bl	8002bdc <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d914      	bls.n	8003e7c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d00d      	beq.n	8003e7c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0210 	orr.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e007      	b.n	8003e8c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d1cf      	bne.n	8003e2a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	8000003f 	.word	0x8000003f
 8003e98:	40022000 	.word	0x40022000
 8003e9c:	40022100 	.word	0x40022100
 8003ea0:	40022300 	.word	0x40022300
 8003ea4:	58026300 	.word	0x58026300

08003ea8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <ADC_ConfigureBoostMode+0x1f8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <ADC_ConfigureBoostMode+0x1c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a79      	ldr	r2, [pc, #484]	; (80040a4 <ADC_ConfigureBoostMode+0x1fc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d109      	bne.n	8003ed8 <ADC_ConfigureBoostMode+0x30>
 8003ec4:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <ADC_ConfigureBoostMode+0x200>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e008      	b.n	8003eea <ADC_ConfigureBoostMode+0x42>
 8003ed8:	4b74      	ldr	r3, [pc, #464]	; (80040ac <ADC_ConfigureBoostMode+0x204>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01c      	beq.n	8003f28 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003eee:	f004 f825 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 8003ef2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003efc:	d010      	beq.n	8003f20 <ADC_ConfigureBoostMode+0x78>
 8003efe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f02:	d873      	bhi.n	8003fec <ADC_ConfigureBoostMode+0x144>
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d002      	beq.n	8003f10 <ADC_ConfigureBoostMode+0x68>
 8003f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0e:	d16d      	bne.n	8003fec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
        break;
 8003f1e:	e068      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	60fb      	str	r3, [r7, #12]
        break;
 8003f26:	e064      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f005 faac 	bl	800948c <HAL_RCCEx_GetPeriphCLKFreq>
 8003f34:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f3e:	d051      	beq.n	8003fe4 <ADC_ConfigureBoostMode+0x13c>
 8003f40:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f44:	d854      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f46:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f4a:	d047      	beq.n	8003fdc <ADC_ConfigureBoostMode+0x134>
 8003f4c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f50:	d84e      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f52:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f56:	d03d      	beq.n	8003fd4 <ADC_ConfigureBoostMode+0x12c>
 8003f58:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f5c:	d848      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f62:	d033      	beq.n	8003fcc <ADC_ConfigureBoostMode+0x124>
 8003f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f68:	d842      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f6a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f6e:	d029      	beq.n	8003fc4 <ADC_ConfigureBoostMode+0x11c>
 8003f70:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f74:	d83c      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f7a:	d01a      	beq.n	8003fb2 <ADC_ConfigureBoostMode+0x10a>
 8003f7c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f80:	d836      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f86:	d014      	beq.n	8003fb2 <ADC_ConfigureBoostMode+0x10a>
 8003f88:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f8c:	d830      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f92:	d00e      	beq.n	8003fb2 <ADC_ConfigureBoostMode+0x10a>
 8003f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f98:	d82a      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003f9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f9e:	d008      	beq.n	8003fb2 <ADC_ConfigureBoostMode+0x10a>
 8003fa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fa4:	d824      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
 8003fa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003faa:	d002      	beq.n	8003fb2 <ADC_ConfigureBoostMode+0x10a>
 8003fac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fb0:	d11e      	bne.n	8003ff0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	0c9b      	lsrs	r3, r3, #18
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
        break;
 8003fc2:	e016      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
        break;
 8003fca:	e012      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	60fb      	str	r3, [r7, #12]
        break;
 8003fd2:	e00e      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	60fb      	str	r3, [r7, #12]
        break;
 8003fda:	e00a      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	09db      	lsrs	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]
        break;
 8003fe2:	e006      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	60fb      	str	r3, [r7, #12]
        break;
 8003fea:	e002      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ff0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ff2:	f7fe fe23 	bl	8002c3c <HAL_GetREVID>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d815      	bhi.n	800402c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <ADC_ConfigureBoostMode+0x208>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d908      	bls.n	800401a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004016:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004018:	e03e      	b.n	8004098 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004028:	609a      	str	r2, [r3, #8]
}
 800402a:	e035      	b.n	8004098 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <ADC_ConfigureBoostMode+0x20c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d808      	bhi.n	800404c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004048:	609a      	str	r2, [r3, #8]
}
 800404a:	e025      	b.n	8004098 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <ADC_ConfigureBoostMode+0x210>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d80a      	bhi.n	800406a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	e016      	b.n	8004098 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <ADC_ConfigureBoostMode+0x214>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d80a      	bhi.n	8004088 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004084:	609a      	str	r2, [r3, #8]
}
 8004086:	e007      	b.n	8004098 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40022100 	.word	0x40022100
 80040a8:	40022300 	.word	0x40022300
 80040ac:	58026300 	.word	0x58026300
 80040b0:	01312d00 	.word	0x01312d00
 80040b4:	005f5e10 	.word	0x005f5e10
 80040b8:	00bebc20 	.word	0x00bebc20
 80040bc:	017d7840 	.word	0x017d7840

080040c0 <LL_ADC_IsEnabled>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <LL_ADC_IsEnabled+0x18>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <LL_ADC_IsEnabled+0x1a>
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d101      	bne.n	80040fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b09f      	sub	sp, #124	; 0x7c
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004126:	2302      	movs	r3, #2
 8004128:	e0be      	b.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004136:	2300      	movs	r3, #0
 8004138:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5c      	ldr	r2, [pc, #368]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d102      	bne.n	800414a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004144:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	e001      	b.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e09d      	b.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff ffb9 	bl	80040e6 <LL_ADC_REG_IsConversionOngoing>
 8004174:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ffb3 	bl	80040e6 <LL_ADC_REG_IsConversionOngoing>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d17f      	bne.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004188:	2b00      	cmp	r3, #0
 800418a:	d17c      	bne.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a47      	ldr	r2, [pc, #284]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80041a0:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80041a2:	e000      	b.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80041a4:	4b45      	ldr	r3, [pc, #276]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80041a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d039      	beq.n	8004224 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	431a      	orrs	r2, r3
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a3a      	ldr	r2, [pc, #232]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a38      	ldr	r2, [pc, #224]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10e      	bne.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041d6:	4836      	ldr	r0, [pc, #216]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041d8:	f7ff ff72 	bl	80040c0 <LL_ADC_IsEnabled>
 80041dc:	4604      	mov	r4, r0
 80041de:	4835      	ldr	r0, [pc, #212]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041e0:	f7ff ff6e 	bl	80040c0 <LL_ADC_IsEnabled>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4323      	orrs	r3, r4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e008      	b.n	8004206 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80041f4:	4832      	ldr	r0, [pc, #200]	; (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041f6:	f7ff ff63 	bl	80040c0 <LL_ADC_IsEnabled>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d047      	beq.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004210:	4013      	ands	r3, r2
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	430a      	orrs	r2, r1
 800421c:	431a      	orrs	r2, r3
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004222:	e03a      	b.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10e      	bne.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004244:	481a      	ldr	r0, [pc, #104]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004246:	f7ff ff3b 	bl	80040c0 <LL_ADC_IsEnabled>
 800424a:	4604      	mov	r4, r0
 800424c:	4819      	ldr	r0, [pc, #100]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800424e:	f7ff ff37 	bl	80040c0 <LL_ADC_IsEnabled>
 8004252:	4603      	mov	r3, r0
 8004254:	4323      	orrs	r3, r4
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e008      	b.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004262:	4817      	ldr	r0, [pc, #92]	; (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004264:	f7ff ff2c 	bl	80040c0 <LL_ADC_IsEnabled>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d010      	beq.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800427e:	4013      	ands	r3, r2
 8004280:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004282:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004284:	e009      	b.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004298:	e000      	b.n	800429c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800429a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	377c      	adds	r7, #124	; 0x7c
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd90      	pop	{r4, r7, pc}
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40022100 	.word	0x40022100
 80042b8:	40022300 	.word	0x40022300
 80042bc:	58026300 	.word	0x58026300
 80042c0:	58026000 	.word	0x58026000
 80042c4:	fffff0e0 	.word	0xfffff0e0

080042c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <__NVIC_SetPriorityGrouping+0x40>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042e4:	4013      	ands	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042f6:	4a04      	ldr	r2, [pc, #16]	; (8004308 <__NVIC_SetPriorityGrouping+0x40>)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	60d3      	str	r3, [r2, #12]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000ed00 	.word	0xe000ed00
 800430c:	05fa0000 	.word	0x05fa0000

08004310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__NVIC_GetPriorityGrouping+0x18>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0307 	and.w	r3, r3, #7
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db0b      	blt.n	8004356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	4907      	ldr	r1, [pc, #28]	; (8004364 <__NVIC_EnableIRQ+0x38>)
 8004346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2001      	movs	r0, #1
 800434e:	fa00 f202 	lsl.w	r2, r0, r2
 8004352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000e100 	.word	0xe000e100

08004368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004378:	2b00      	cmp	r3, #0
 800437a:	db0a      	blt.n	8004392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	490c      	ldr	r1, [pc, #48]	; (80043b4 <__NVIC_SetPriority+0x4c>)
 8004382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	440b      	add	r3, r1
 800438c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004390:	e00a      	b.n	80043a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4908      	ldr	r1, [pc, #32]	; (80043b8 <__NVIC_SetPriority+0x50>)
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	3b04      	subs	r3, #4
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	440b      	add	r3, r1
 80043a6:	761a      	strb	r2, [r3, #24]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f1c3 0307 	rsb	r3, r3, #7
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf28      	it	cs
 80043da:	2304      	movcs	r3, #4
 80043dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d902      	bls.n	80043ec <NVIC_EncodePriority+0x30>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3b03      	subs	r3, #3
 80043ea:	e000      	b.n	80043ee <NVIC_EncodePriority+0x32>
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	401a      	ands	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004404:	f04f 31ff 	mov.w	r1, #4294967295
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	43d9      	mvns	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	4313      	orrs	r3, r2
         );
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff4c 	bl	80042c8 <__NVIC_SetPriorityGrouping>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004446:	f7ff ff63 	bl	8004310 <__NVIC_GetPriorityGrouping>
 800444a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	6978      	ldr	r0, [r7, #20]
 8004452:	f7ff ffb3 	bl	80043bc <NVIC_EncodePriority>
 8004456:	4602      	mov	r2, r0
 8004458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff82 	bl	8004368 <__NVIC_SetPriority>
}
 8004464:	bf00      	nop
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff ff56 	bl	800432c <__NVIC_EnableIRQ>
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7fe fba4 	bl	8002bdc <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e316      	b.n	8004ace <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a66      	ldr	r2, [pc, #408]	; (8004640 <HAL_DMA_Init+0x1b8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d04a      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a65      	ldr	r2, [pc, #404]	; (8004644 <HAL_DMA_Init+0x1bc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d045      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a63      	ldr	r2, [pc, #396]	; (8004648 <HAL_DMA_Init+0x1c0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d040      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a62      	ldr	r2, [pc, #392]	; (800464c <HAL_DMA_Init+0x1c4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d03b      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a60      	ldr	r2, [pc, #384]	; (8004650 <HAL_DMA_Init+0x1c8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d036      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5f      	ldr	r2, [pc, #380]	; (8004654 <HAL_DMA_Init+0x1cc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d031      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5d      	ldr	r2, [pc, #372]	; (8004658 <HAL_DMA_Init+0x1d0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02c      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a5c      	ldr	r2, [pc, #368]	; (800465c <HAL_DMA_Init+0x1d4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d027      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <HAL_DMA_Init+0x1d8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a59      	ldr	r2, [pc, #356]	; (8004664 <HAL_DMA_Init+0x1dc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01d      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a57      	ldr	r2, [pc, #348]	; (8004668 <HAL_DMA_Init+0x1e0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a56      	ldr	r2, [pc, #344]	; (800466c <HAL_DMA_Init+0x1e4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a54      	ldr	r2, [pc, #336]	; (8004670 <HAL_DMA_Init+0x1e8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a53      	ldr	r2, [pc, #332]	; (8004674 <HAL_DMA_Init+0x1ec>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a51      	ldr	r2, [pc, #324]	; (8004678 <HAL_DMA_Init+0x1f0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_DMA_Init+0xb8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a50      	ldr	r2, [pc, #320]	; (800467c <HAL_DMA_Init+0x1f4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <HAL_DMA_Init+0xbc>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_DMA_Init+0xbe>
 8004544:	2300      	movs	r3, #0
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 813b 	beq.w	80047c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a37      	ldr	r2, [pc, #220]	; (8004640 <HAL_DMA_Init+0x1b8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d04a      	beq.n	80045fc <HAL_DMA_Init+0x174>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a36      	ldr	r2, [pc, #216]	; (8004644 <HAL_DMA_Init+0x1bc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d045      	beq.n	80045fc <HAL_DMA_Init+0x174>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_DMA_Init+0x1c0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d040      	beq.n	80045fc <HAL_DMA_Init+0x174>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a33      	ldr	r2, [pc, #204]	; (800464c <HAL_DMA_Init+0x1c4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d03b      	beq.n	80045fc <HAL_DMA_Init+0x174>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a31      	ldr	r2, [pc, #196]	; (8004650 <HAL_DMA_Init+0x1c8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d036      	beq.n	80045fc <HAL_DMA_Init+0x174>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <HAL_DMA_Init+0x1cc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d031      	beq.n	80045fc <HAL_DMA_Init+0x174>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <HAL_DMA_Init+0x1d0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02c      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_DMA_Init+0x1d4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d027      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <HAL_DMA_Init+0x1d8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d022      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <HAL_DMA_Init+0x1dc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d01d      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_DMA_Init+0x1e0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d018      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a27      	ldr	r2, [pc, #156]	; (800466c <HAL_DMA_Init+0x1e4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <HAL_DMA_Init+0x1e8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00e      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a24      	ldr	r2, [pc, #144]	; (8004674 <HAL_DMA_Init+0x1ec>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_DMA_Init+0x1f0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_DMA_Init+0x174>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_DMA_Init+0x1f4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d108      	bne.n	800460e <HAL_DMA_Init+0x186>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e007      	b.n	800461e <HAL_DMA_Init+0x196>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800461e:	e02f      	b.n	8004680 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004620:	f7fe fadc 	bl	8002bdc <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b05      	cmp	r3, #5
 800462c:	d928      	bls.n	8004680 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e246      	b.n	8004ace <HAL_DMA_Init+0x646>
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1c8      	bne.n	8004620 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4b83      	ldr	r3, [pc, #524]	; (80048a8 <HAL_DMA_Init+0x420>)
 800469a:	4013      	ands	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80046a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d107      	bne.n	80046e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4313      	orrs	r3, r2
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80046e4:	4b71      	ldr	r3, [pc, #452]	; (80048ac <HAL_DMA_Init+0x424>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b71      	ldr	r3, [pc, #452]	; (80048b0 <HAL_DMA_Init+0x428>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f0:	d328      	bcc.n	8004744 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b28      	cmp	r3, #40	; 0x28
 80046f8:	d903      	bls.n	8004702 <HAL_DMA_Init+0x27a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004700:	d917      	bls.n	8004732 <HAL_DMA_Init+0x2aa>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b3e      	cmp	r3, #62	; 0x3e
 8004708:	d903      	bls.n	8004712 <HAL_DMA_Init+0x28a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b42      	cmp	r3, #66	; 0x42
 8004710:	d90f      	bls.n	8004732 <HAL_DMA_Init+0x2aa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b46      	cmp	r3, #70	; 0x46
 8004718:	d903      	bls.n	8004722 <HAL_DMA_Init+0x29a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b48      	cmp	r3, #72	; 0x48
 8004720:	d907      	bls.n	8004732 <HAL_DMA_Init+0x2aa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b4e      	cmp	r3, #78	; 0x4e
 8004728:	d905      	bls.n	8004736 <HAL_DMA_Init+0x2ae>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b52      	cmp	r3, #82	; 0x52
 8004730:	d801      	bhi.n	8004736 <HAL_DMA_Init+0x2ae>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_DMA_Init+0x2b0>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b04      	cmp	r3, #4
 800476c:	d117      	bne.n	800479e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 ff1d 	bl	80065c0 <DMA_CheckFifoParam>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e197      	b.n	8004ace <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f001 fe58 	bl	800645c <DMA_CalcBaseAndBitshift>
 80047ac:	4603      	mov	r3, r0
 80047ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	223f      	movs	r2, #63	; 0x3f
 80047ba:	409a      	lsls	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	e0cd      	b.n	800495e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3b      	ldr	r2, [pc, #236]	; (80048b4 <HAL_DMA_Init+0x42c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a39      	ldr	r2, [pc, #228]	; (80048b8 <HAL_DMA_Init+0x430>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01d      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a38      	ldr	r2, [pc, #224]	; (80048bc <HAL_DMA_Init+0x434>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <HAL_DMA_Init+0x438>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a35      	ldr	r2, [pc, #212]	; (80048c4 <HAL_DMA_Init+0x43c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <HAL_DMA_Init+0x440>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a32      	ldr	r2, [pc, #200]	; (80048cc <HAL_DMA_Init+0x444>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_DMA_Init+0x38a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_DMA_Init+0x448>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_DMA_Init+0x38e>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_DMA_Init+0x390>
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8097 	beq.w	800494c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a24      	ldr	r2, [pc, #144]	; (80048b4 <HAL_DMA_Init+0x42c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d021      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <HAL_DMA_Init+0x430>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01c      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a21      	ldr	r2, [pc, #132]	; (80048bc <HAL_DMA_Init+0x434>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d017      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_DMA_Init+0x438>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d012      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <HAL_DMA_Init+0x43c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00d      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_DMA_Init+0x440>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d008      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <HAL_DMA_Init+0x444>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <HAL_DMA_Init+0x3e4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_DMA_Init+0x448>)
 800486a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <HAL_DMA_Init+0x44c>)
 8004888:	4013      	ands	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d021      	beq.n	80048d8 <HAL_DMA_Init+0x450>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d102      	bne.n	80048a2 <HAL_DMA_Init+0x41a>
 800489c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048a0:	e01b      	b.n	80048da <HAL_DMA_Init+0x452>
 80048a2:	2300      	movs	r3, #0
 80048a4:	e019      	b.n	80048da <HAL_DMA_Init+0x452>
 80048a6:	bf00      	nop
 80048a8:	fe10803f 	.word	0xfe10803f
 80048ac:	5c001000 	.word	0x5c001000
 80048b0:	ffff0000 	.word	0xffff0000
 80048b4:	58025408 	.word	0x58025408
 80048b8:	5802541c 	.word	0x5802541c
 80048bc:	58025430 	.word	0x58025430
 80048c0:	58025444 	.word	0x58025444
 80048c4:	58025458 	.word	0x58025458
 80048c8:	5802546c 	.word	0x5802546c
 80048cc:	58025480 	.word	0x58025480
 80048d0:	58025494 	.word	0x58025494
 80048d4:	fffe000f 	.word	0xfffe000f
 80048d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004908:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	4b6e      	ldr	r3, [pc, #440]	; (8004ad8 <HAL_DMA_Init+0x650>)
 8004920:	4413      	add	r3, r2
 8004922:	4a6e      	ldr	r2, [pc, #440]	; (8004adc <HAL_DMA_Init+0x654>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	009a      	lsls	r2, r3, #2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f001 fd93 	bl	800645c <DMA_CalcBaseAndBitshift>
 8004936:	4603      	mov	r3, r0
 8004938:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2201      	movs	r2, #1
 8004944:	409a      	lsls	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e008      	b.n	800495e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2240      	movs	r2, #64	; 0x40
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0b7      	b.n	8004ace <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a5f      	ldr	r2, [pc, #380]	; (8004ae0 <HAL_DMA_Init+0x658>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d072      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a5d      	ldr	r2, [pc, #372]	; (8004ae4 <HAL_DMA_Init+0x65c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d06d      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a5c      	ldr	r2, [pc, #368]	; (8004ae8 <HAL_DMA_Init+0x660>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d068      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5a      	ldr	r2, [pc, #360]	; (8004aec <HAL_DMA_Init+0x664>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d063      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a59      	ldr	r2, [pc, #356]	; (8004af0 <HAL_DMA_Init+0x668>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d05e      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a57      	ldr	r2, [pc, #348]	; (8004af4 <HAL_DMA_Init+0x66c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d059      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a56      	ldr	r2, [pc, #344]	; (8004af8 <HAL_DMA_Init+0x670>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d054      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a54      	ldr	r2, [pc, #336]	; (8004afc <HAL_DMA_Init+0x674>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d04f      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a53      	ldr	r2, [pc, #332]	; (8004b00 <HAL_DMA_Init+0x678>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d04a      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a51      	ldr	r2, [pc, #324]	; (8004b04 <HAL_DMA_Init+0x67c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d045      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a50      	ldr	r2, [pc, #320]	; (8004b08 <HAL_DMA_Init+0x680>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d040      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a4e      	ldr	r2, [pc, #312]	; (8004b0c <HAL_DMA_Init+0x684>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d03b      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4d      	ldr	r2, [pc, #308]	; (8004b10 <HAL_DMA_Init+0x688>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d036      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a4b      	ldr	r2, [pc, #300]	; (8004b14 <HAL_DMA_Init+0x68c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d031      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a4a      	ldr	r2, [pc, #296]	; (8004b18 <HAL_DMA_Init+0x690>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d02c      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a48      	ldr	r2, [pc, #288]	; (8004b1c <HAL_DMA_Init+0x694>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d027      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a47      	ldr	r2, [pc, #284]	; (8004b20 <HAL_DMA_Init+0x698>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a45      	ldr	r2, [pc, #276]	; (8004b24 <HAL_DMA_Init+0x69c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a44      	ldr	r2, [pc, #272]	; (8004b28 <HAL_DMA_Init+0x6a0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <HAL_DMA_Init+0x6a4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a41      	ldr	r2, [pc, #260]	; (8004b30 <HAL_DMA_Init+0x6a8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3f      	ldr	r2, [pc, #252]	; (8004b34 <HAL_DMA_Init+0x6ac>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3e      	ldr	r2, [pc, #248]	; (8004b38 <HAL_DMA_Init+0x6b0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_DMA_Init+0x5c6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3c      	ldr	r2, [pc, #240]	; (8004b3c <HAL_DMA_Init+0x6b4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_DMA_Init+0x5ca>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_DMA_Init+0x5cc>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d032      	beq.n	8004abe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fe2d 	bl	80066b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d102      	bne.n	8004a6c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d010      	beq.n	8004aac <HAL_DMA_Init+0x624>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d80c      	bhi.n	8004aac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f001 feaa 	bl	80067ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	e008      	b.n	8004abe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	a7fdabf8 	.word	0xa7fdabf8
 8004adc:	cccccccd 	.word	0xcccccccd
 8004ae0:	40020010 	.word	0x40020010
 8004ae4:	40020028 	.word	0x40020028
 8004ae8:	40020040 	.word	0x40020040
 8004aec:	40020058 	.word	0x40020058
 8004af0:	40020070 	.word	0x40020070
 8004af4:	40020088 	.word	0x40020088
 8004af8:	400200a0 	.word	0x400200a0
 8004afc:	400200b8 	.word	0x400200b8
 8004b00:	40020410 	.word	0x40020410
 8004b04:	40020428 	.word	0x40020428
 8004b08:	40020440 	.word	0x40020440
 8004b0c:	40020458 	.word	0x40020458
 8004b10:	40020470 	.word	0x40020470
 8004b14:	40020488 	.word	0x40020488
 8004b18:	400204a0 	.word	0x400204a0
 8004b1c:	400204b8 	.word	0x400204b8
 8004b20:	58025408 	.word	0x58025408
 8004b24:	5802541c 	.word	0x5802541c
 8004b28:	58025430 	.word	0x58025430
 8004b2c:	58025444 	.word	0x58025444
 8004b30:	58025458 	.word	0x58025458
 8004b34:	5802546c 	.word	0x5802546c
 8004b38:	58025480 	.word	0x58025480
 8004b3c:	58025494 	.word	0x58025494

08004b40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7fe f848 	bl	8002bdc <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e2dc      	b.n	8005112 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d008      	beq.n	8004b76 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e2cd      	b.n	8005112 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a76      	ldr	r2, [pc, #472]	; (8004d54 <HAL_DMA_Abort+0x214>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d04a      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a74      	ldr	r2, [pc, #464]	; (8004d58 <HAL_DMA_Abort+0x218>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d045      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a73      	ldr	r2, [pc, #460]	; (8004d5c <HAL_DMA_Abort+0x21c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d040      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a71      	ldr	r2, [pc, #452]	; (8004d60 <HAL_DMA_Abort+0x220>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d03b      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a70      	ldr	r2, [pc, #448]	; (8004d64 <HAL_DMA_Abort+0x224>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d036      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_DMA_Abort+0x228>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d031      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6d      	ldr	r2, [pc, #436]	; (8004d6c <HAL_DMA_Abort+0x22c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d02c      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6b      	ldr	r2, [pc, #428]	; (8004d70 <HAL_DMA_Abort+0x230>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d027      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6a      	ldr	r2, [pc, #424]	; (8004d74 <HAL_DMA_Abort+0x234>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a68      	ldr	r2, [pc, #416]	; (8004d78 <HAL_DMA_Abort+0x238>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a67      	ldr	r2, [pc, #412]	; (8004d7c <HAL_DMA_Abort+0x23c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a65      	ldr	r2, [pc, #404]	; (8004d80 <HAL_DMA_Abort+0x240>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a64      	ldr	r2, [pc, #400]	; (8004d84 <HAL_DMA_Abort+0x244>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a62      	ldr	r2, [pc, #392]	; (8004d88 <HAL_DMA_Abort+0x248>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a61      	ldr	r2, [pc, #388]	; (8004d8c <HAL_DMA_Abort+0x24c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_DMA_Abort+0xd6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5f      	ldr	r2, [pc, #380]	; (8004d90 <HAL_DMA_Abort+0x250>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_DMA_Abort+0xda>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_DMA_Abort+0xdc>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 021e 	bic.w	r2, r2, #30
 8004c2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c3e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e00a      	b.n	8004c5e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 020e 	bic.w	r2, r2, #14
 8004c56:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3c      	ldr	r2, [pc, #240]	; (8004d54 <HAL_DMA_Abort+0x214>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d072      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3a      	ldr	r2, [pc, #232]	; (8004d58 <HAL_DMA_Abort+0x218>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d06d      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <HAL_DMA_Abort+0x21c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d068      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a37      	ldr	r2, [pc, #220]	; (8004d60 <HAL_DMA_Abort+0x220>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d063      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a36      	ldr	r2, [pc, #216]	; (8004d64 <HAL_DMA_Abort+0x224>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d05e      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a34      	ldr	r2, [pc, #208]	; (8004d68 <HAL_DMA_Abort+0x228>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d059      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a33      	ldr	r2, [pc, #204]	; (8004d6c <HAL_DMA_Abort+0x22c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d054      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a31      	ldr	r2, [pc, #196]	; (8004d70 <HAL_DMA_Abort+0x230>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d04f      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a30      	ldr	r2, [pc, #192]	; (8004d74 <HAL_DMA_Abort+0x234>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d04a      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2e      	ldr	r2, [pc, #184]	; (8004d78 <HAL_DMA_Abort+0x238>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d045      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2d      	ldr	r2, [pc, #180]	; (8004d7c <HAL_DMA_Abort+0x23c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d040      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2b      	ldr	r2, [pc, #172]	; (8004d80 <HAL_DMA_Abort+0x240>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d03b      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2a      	ldr	r2, [pc, #168]	; (8004d84 <HAL_DMA_Abort+0x244>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d036      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <HAL_DMA_Abort+0x248>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d031      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <HAL_DMA_Abort+0x24c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d02c      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <HAL_DMA_Abort+0x250>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d027      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <HAL_DMA_Abort+0x254>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d022      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <HAL_DMA_Abort+0x258>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01d      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <HAL_DMA_Abort+0x25c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d018      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_DMA_Abort+0x260>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <HAL_DMA_Abort+0x264>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <HAL_DMA_Abort+0x268>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <HAL_DMA_Abort+0x26c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_DMA_Abort+0x20e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <HAL_DMA_Abort+0x270>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d132      	bne.n	8004db4 <HAL_DMA_Abort+0x274>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e031      	b.n	8004db6 <HAL_DMA_Abort+0x276>
 8004d52:	bf00      	nop
 8004d54:	40020010 	.word	0x40020010
 8004d58:	40020028 	.word	0x40020028
 8004d5c:	40020040 	.word	0x40020040
 8004d60:	40020058 	.word	0x40020058
 8004d64:	40020070 	.word	0x40020070
 8004d68:	40020088 	.word	0x40020088
 8004d6c:	400200a0 	.word	0x400200a0
 8004d70:	400200b8 	.word	0x400200b8
 8004d74:	40020410 	.word	0x40020410
 8004d78:	40020428 	.word	0x40020428
 8004d7c:	40020440 	.word	0x40020440
 8004d80:	40020458 	.word	0x40020458
 8004d84:	40020470 	.word	0x40020470
 8004d88:	40020488 	.word	0x40020488
 8004d8c:	400204a0 	.word	0x400204a0
 8004d90:	400204b8 	.word	0x400204b8
 8004d94:	58025408 	.word	0x58025408
 8004d98:	5802541c 	.word	0x5802541c
 8004d9c:	58025430 	.word	0x58025430
 8004da0:	58025444 	.word	0x58025444
 8004da4:	58025458 	.word	0x58025458
 8004da8:	5802546c 	.word	0x5802546c
 8004dac:	58025480 	.word	0x58025480
 8004db0:	58025494 	.word	0x58025494
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6d      	ldr	r2, [pc, #436]	; (8004f84 <HAL_DMA_Abort+0x444>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a6b      	ldr	r2, [pc, #428]	; (8004f88 <HAL_DMA_Abort+0x448>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6a      	ldr	r2, [pc, #424]	; (8004f8c <HAL_DMA_Abort+0x44c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a68      	ldr	r2, [pc, #416]	; (8004f90 <HAL_DMA_Abort+0x450>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a67      	ldr	r2, [pc, #412]	; (8004f94 <HAL_DMA_Abort+0x454>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a65      	ldr	r2, [pc, #404]	; (8004f98 <HAL_DMA_Abort+0x458>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a64      	ldr	r2, [pc, #400]	; (8004f9c <HAL_DMA_Abort+0x45c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a62      	ldr	r2, [pc, #392]	; (8004fa0 <HAL_DMA_Abort+0x460>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a61      	ldr	r2, [pc, #388]	; (8004fa4 <HAL_DMA_Abort+0x464>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5f      	ldr	r2, [pc, #380]	; (8004fa8 <HAL_DMA_Abort+0x468>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5e      	ldr	r2, [pc, #376]	; (8004fac <HAL_DMA_Abort+0x46c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5c      	ldr	r2, [pc, #368]	; (8004fb0 <HAL_DMA_Abort+0x470>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5b      	ldr	r2, [pc, #364]	; (8004fb4 <HAL_DMA_Abort+0x474>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a59      	ldr	r2, [pc, #356]	; (8004fb8 <HAL_DMA_Abort+0x478>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_DMA_Abort+0x47c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_Abort+0x32a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <HAL_DMA_Abort+0x480>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_DMA_Abort+0x33c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e007      	b.n	8004e8c <HAL_DMA_Abort+0x34c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e8c:	e013      	b.n	8004eb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e8e:	f7fd fea5 	bl	8002bdc <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	d90c      	bls.n	8004eb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e12d      	b.n	8005112 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <HAL_DMA_Abort+0x444>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <HAL_DMA_Abort+0x448>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_DMA_Abort+0x44c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_DMA_Abort+0x450>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_DMA_Abort+0x454>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a27      	ldr	r2, [pc, #156]	; (8004f98 <HAL_DMA_Abort+0x458>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a26      	ldr	r2, [pc, #152]	; (8004f9c <HAL_DMA_Abort+0x45c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <HAL_DMA_Abort+0x460>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a23      	ldr	r2, [pc, #140]	; (8004fa4 <HAL_DMA_Abort+0x464>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <HAL_DMA_Abort+0x468>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a20      	ldr	r2, [pc, #128]	; (8004fac <HAL_DMA_Abort+0x46c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1e      	ldr	r2, [pc, #120]	; (8004fb0 <HAL_DMA_Abort+0x470>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <HAL_DMA_Abort+0x474>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1b      	ldr	r2, [pc, #108]	; (8004fb8 <HAL_DMA_Abort+0x478>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_DMA_Abort+0x47c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_DMA_Abort+0x422>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_DMA_Abort+0x480>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_DMA_Abort+0x426>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_DMA_Abort+0x428>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02b      	beq.n	8004fc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	223f      	movs	r2, #63	; 0x3f
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	609a      	str	r2, [r3, #8]
 8004f82:	e02a      	b.n	8004fda <HAL_DMA_Abort+0x49a>
 8004f84:	40020010 	.word	0x40020010
 8004f88:	40020028 	.word	0x40020028
 8004f8c:	40020040 	.word	0x40020040
 8004f90:	40020058 	.word	0x40020058
 8004f94:	40020070 	.word	0x40020070
 8004f98:	40020088 	.word	0x40020088
 8004f9c:	400200a0 	.word	0x400200a0
 8004fa0:	400200b8 	.word	0x400200b8
 8004fa4:	40020410 	.word	0x40020410
 8004fa8:	40020428 	.word	0x40020428
 8004fac:	40020440 	.word	0x40020440
 8004fb0:	40020458 	.word	0x40020458
 8004fb4:	40020470 	.word	0x40020470
 8004fb8:	40020488 	.word	0x40020488
 8004fbc:	400204a0 	.word	0x400204a0
 8004fc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4f      	ldr	r2, [pc, #316]	; (800511c <HAL_DMA_Abort+0x5dc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d072      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a4d      	ldr	r2, [pc, #308]	; (8005120 <HAL_DMA_Abort+0x5e0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d06d      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a4c      	ldr	r2, [pc, #304]	; (8005124 <HAL_DMA_Abort+0x5e4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d068      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a4a      	ldr	r2, [pc, #296]	; (8005128 <HAL_DMA_Abort+0x5e8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d063      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a49      	ldr	r2, [pc, #292]	; (800512c <HAL_DMA_Abort+0x5ec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d05e      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a47      	ldr	r2, [pc, #284]	; (8005130 <HAL_DMA_Abort+0x5f0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d059      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a46      	ldr	r2, [pc, #280]	; (8005134 <HAL_DMA_Abort+0x5f4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d054      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a44      	ldr	r2, [pc, #272]	; (8005138 <HAL_DMA_Abort+0x5f8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d04f      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a43      	ldr	r2, [pc, #268]	; (800513c <HAL_DMA_Abort+0x5fc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d04a      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a41      	ldr	r2, [pc, #260]	; (8005140 <HAL_DMA_Abort+0x600>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d045      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a40      	ldr	r2, [pc, #256]	; (8005144 <HAL_DMA_Abort+0x604>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d040      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3e      	ldr	r2, [pc, #248]	; (8005148 <HAL_DMA_Abort+0x608>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d03b      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3d      	ldr	r2, [pc, #244]	; (800514c <HAL_DMA_Abort+0x60c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d036      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3b      	ldr	r2, [pc, #236]	; (8005150 <HAL_DMA_Abort+0x610>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d031      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3a      	ldr	r2, [pc, #232]	; (8005154 <HAL_DMA_Abort+0x614>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d02c      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a38      	ldr	r2, [pc, #224]	; (8005158 <HAL_DMA_Abort+0x618>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d027      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a37      	ldr	r2, [pc, #220]	; (800515c <HAL_DMA_Abort+0x61c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a35      	ldr	r2, [pc, #212]	; (8005160 <HAL_DMA_Abort+0x620>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a34      	ldr	r2, [pc, #208]	; (8005164 <HAL_DMA_Abort+0x624>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d018      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a32      	ldr	r2, [pc, #200]	; (8005168 <HAL_DMA_Abort+0x628>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a31      	ldr	r2, [pc, #196]	; (800516c <HAL_DMA_Abort+0x62c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2f      	ldr	r2, [pc, #188]	; (8005170 <HAL_DMA_Abort+0x630>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2e      	ldr	r2, [pc, #184]	; (8005174 <HAL_DMA_Abort+0x634>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_DMA_Abort+0x58a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <HAL_DMA_Abort+0x638>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <HAL_DMA_Abort+0x58e>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_DMA_Abort+0x590>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8
 800515c:	58025408 	.word	0x58025408
 8005160:	5802541c 	.word	0x5802541c
 8005164:	58025430 	.word	0x58025430
 8005168:	58025444 	.word	0x58025444
 800516c:	58025458 	.word	0x58025458
 8005170:	5802546c 	.word	0x5802546c
 8005174:	58025480 	.word	0x58025480
 8005178:	58025494 	.word	0x58025494

0800517c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e237      	b.n	80055fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d004      	beq.n	80051a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e22c      	b.n	80055fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5c      	ldr	r2, [pc, #368]	; (800531c <HAL_DMA_Abort_IT+0x1a0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04a      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5b      	ldr	r2, [pc, #364]	; (8005320 <HAL_DMA_Abort_IT+0x1a4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d045      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a59      	ldr	r2, [pc, #356]	; (8005324 <HAL_DMA_Abort_IT+0x1a8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d040      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a58      	ldr	r2, [pc, #352]	; (8005328 <HAL_DMA_Abort_IT+0x1ac>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d03b      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a56      	ldr	r2, [pc, #344]	; (800532c <HAL_DMA_Abort_IT+0x1b0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d036      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a55      	ldr	r2, [pc, #340]	; (8005330 <HAL_DMA_Abort_IT+0x1b4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d031      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a53      	ldr	r2, [pc, #332]	; (8005334 <HAL_DMA_Abort_IT+0x1b8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02c      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_DMA_Abort_IT+0x1bc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d027      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a50      	ldr	r2, [pc, #320]	; (800533c <HAL_DMA_Abort_IT+0x1c0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a4f      	ldr	r2, [pc, #316]	; (8005340 <HAL_DMA_Abort_IT+0x1c4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01d      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4d      	ldr	r2, [pc, #308]	; (8005344 <HAL_DMA_Abort_IT+0x1c8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a4c      	ldr	r2, [pc, #304]	; (8005348 <HAL_DMA_Abort_IT+0x1cc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a4a      	ldr	r2, [pc, #296]	; (800534c <HAL_DMA_Abort_IT+0x1d0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a49      	ldr	r2, [pc, #292]	; (8005350 <HAL_DMA_Abort_IT+0x1d4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a47      	ldr	r2, [pc, #284]	; (8005354 <HAL_DMA_Abort_IT+0x1d8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_DMA_Abort_IT+0xc8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a46      	ldr	r2, [pc, #280]	; (8005358 <HAL_DMA_Abort_IT+0x1dc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_DMA_Abort_IT+0xcc>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_DMA_Abort_IT+0xce>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 8086 	beq.w	800535c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2204      	movs	r2, #4
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2f      	ldr	r2, [pc, #188]	; (800531c <HAL_DMA_Abort_IT+0x1a0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2e      	ldr	r2, [pc, #184]	; (8005320 <HAL_DMA_Abort_IT+0x1a4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <HAL_DMA_Abort_IT+0x1a8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <HAL_DMA_Abort_IT+0x1ac>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a29      	ldr	r2, [pc, #164]	; (800532c <HAL_DMA_Abort_IT+0x1b0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a28      	ldr	r2, [pc, #160]	; (8005330 <HAL_DMA_Abort_IT+0x1b4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <HAL_DMA_Abort_IT+0x1b8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a25      	ldr	r2, [pc, #148]	; (8005338 <HAL_DMA_Abort_IT+0x1bc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a23      	ldr	r2, [pc, #140]	; (800533c <HAL_DMA_Abort_IT+0x1c0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a22      	ldr	r2, [pc, #136]	; (8005340 <HAL_DMA_Abort_IT+0x1c4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a20      	ldr	r2, [pc, #128]	; (8005344 <HAL_DMA_Abort_IT+0x1c8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <HAL_DMA_Abort_IT+0x1cc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_DMA_Abort_IT+0x1d0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_DMA_Abort_IT+0x1d4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <HAL_DMA_Abort_IT+0x1d8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x17c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a19      	ldr	r2, [pc, #100]	; (8005358 <HAL_DMA_Abort_IT+0x1dc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <HAL_DMA_Abort_IT+0x18e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e178      	b.n	80055fc <HAL_DMA_Abort_IT+0x480>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e16f      	b.n	80055fc <HAL_DMA_Abort_IT+0x480>
 800531c:	40020010 	.word	0x40020010
 8005320:	40020028 	.word	0x40020028
 8005324:	40020040 	.word	0x40020040
 8005328:	40020058 	.word	0x40020058
 800532c:	40020070 	.word	0x40020070
 8005330:	40020088 	.word	0x40020088
 8005334:	400200a0 	.word	0x400200a0
 8005338:	400200b8 	.word	0x400200b8
 800533c:	40020410 	.word	0x40020410
 8005340:	40020428 	.word	0x40020428
 8005344:	40020440 	.word	0x40020440
 8005348:	40020458 	.word	0x40020458
 800534c:	40020470 	.word	0x40020470
 8005350:	40020488 	.word	0x40020488
 8005354:	400204a0 	.word	0x400204a0
 8005358:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 020e 	bic.w	r2, r2, #14
 800536a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6c      	ldr	r2, [pc, #432]	; (8005524 <HAL_DMA_Abort_IT+0x3a8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04a      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6b      	ldr	r2, [pc, #428]	; (8005528 <HAL_DMA_Abort_IT+0x3ac>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d045      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a69      	ldr	r2, [pc, #420]	; (800552c <HAL_DMA_Abort_IT+0x3b0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d040      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a68      	ldr	r2, [pc, #416]	; (8005530 <HAL_DMA_Abort_IT+0x3b4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a66      	ldr	r2, [pc, #408]	; (8005534 <HAL_DMA_Abort_IT+0x3b8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d036      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a65      	ldr	r2, [pc, #404]	; (8005538 <HAL_DMA_Abort_IT+0x3bc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d031      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a63      	ldr	r2, [pc, #396]	; (800553c <HAL_DMA_Abort_IT+0x3c0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02c      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a62      	ldr	r2, [pc, #392]	; (8005540 <HAL_DMA_Abort_IT+0x3c4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d027      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a60      	ldr	r2, [pc, #384]	; (8005544 <HAL_DMA_Abort_IT+0x3c8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a5f      	ldr	r2, [pc, #380]	; (8005548 <HAL_DMA_Abort_IT+0x3cc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5d      	ldr	r2, [pc, #372]	; (800554c <HAL_DMA_Abort_IT+0x3d0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5c      	ldr	r2, [pc, #368]	; (8005550 <HAL_DMA_Abort_IT+0x3d4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5a      	ldr	r2, [pc, #360]	; (8005554 <HAL_DMA_Abort_IT+0x3d8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a59      	ldr	r2, [pc, #356]	; (8005558 <HAL_DMA_Abort_IT+0x3dc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a57      	ldr	r2, [pc, #348]	; (800555c <HAL_DMA_Abort_IT+0x3e0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_DMA_Abort_IT+0x290>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a56      	ldr	r2, [pc, #344]	; (8005560 <HAL_DMA_Abort_IT+0x3e4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <HAL_DMA_Abort_IT+0x2a2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_DMA_Abort_IT+0x2b2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a3c      	ldr	r2, [pc, #240]	; (8005524 <HAL_DMA_Abort_IT+0x3a8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d072      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a3a      	ldr	r2, [pc, #232]	; (8005528 <HAL_DMA_Abort_IT+0x3ac>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d06d      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a39      	ldr	r2, [pc, #228]	; (800552c <HAL_DMA_Abort_IT+0x3b0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d068      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a37      	ldr	r2, [pc, #220]	; (8005530 <HAL_DMA_Abort_IT+0x3b4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d063      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a36      	ldr	r2, [pc, #216]	; (8005534 <HAL_DMA_Abort_IT+0x3b8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d05e      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a34      	ldr	r2, [pc, #208]	; (8005538 <HAL_DMA_Abort_IT+0x3bc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d059      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a33      	ldr	r2, [pc, #204]	; (800553c <HAL_DMA_Abort_IT+0x3c0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d054      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a31      	ldr	r2, [pc, #196]	; (8005540 <HAL_DMA_Abort_IT+0x3c4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d04f      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a30      	ldr	r2, [pc, #192]	; (8005544 <HAL_DMA_Abort_IT+0x3c8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d04a      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <HAL_DMA_Abort_IT+0x3cc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d045      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2d      	ldr	r2, [pc, #180]	; (800554c <HAL_DMA_Abort_IT+0x3d0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d040      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2b      	ldr	r2, [pc, #172]	; (8005550 <HAL_DMA_Abort_IT+0x3d4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d03b      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <HAL_DMA_Abort_IT+0x3d8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d036      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a28      	ldr	r2, [pc, #160]	; (8005558 <HAL_DMA_Abort_IT+0x3dc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d031      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a27      	ldr	r2, [pc, #156]	; (800555c <HAL_DMA_Abort_IT+0x3e0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d02c      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <HAL_DMA_Abort_IT+0x3e4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d027      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a24      	ldr	r2, [pc, #144]	; (8005564 <HAL_DMA_Abort_IT+0x3e8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d022      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <HAL_DMA_Abort_IT+0x3ec>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01d      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_DMA_Abort_IT+0x3f0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d018      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <HAL_DMA_Abort_IT+0x3f4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <HAL_DMA_Abort_IT+0x3f8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <HAL_DMA_Abort_IT+0x3fc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_DMA_Abort_IT+0x400>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_DMA_Abort_IT+0x3a2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a19      	ldr	r2, [pc, #100]	; (8005580 <HAL_DMA_Abort_IT+0x404>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d132      	bne.n	8005584 <HAL_DMA_Abort_IT+0x408>
 800551e:	2301      	movs	r3, #1
 8005520:	e031      	b.n	8005586 <HAL_DMA_Abort_IT+0x40a>
 8005522:	bf00      	nop
 8005524:	40020010 	.word	0x40020010
 8005528:	40020028 	.word	0x40020028
 800552c:	40020040 	.word	0x40020040
 8005530:	40020058 	.word	0x40020058
 8005534:	40020070 	.word	0x40020070
 8005538:	40020088 	.word	0x40020088
 800553c:	400200a0 	.word	0x400200a0
 8005540:	400200b8 	.word	0x400200b8
 8005544:	40020410 	.word	0x40020410
 8005548:	40020428 	.word	0x40020428
 800554c:	40020440 	.word	0x40020440
 8005550:	40020458 	.word	0x40020458
 8005554:	40020470 	.word	0x40020470
 8005558:	40020488 	.word	0x40020488
 800555c:	400204a0 	.word	0x400204a0
 8005560:	400204b8 	.word	0x400204b8
 8005564:	58025408 	.word	0x58025408
 8005568:	5802541c 	.word	0x5802541c
 800556c:	58025430 	.word	0x58025430
 8005570:	58025444 	.word	0x58025444
 8005574:	58025458 	.word	0x58025458
 8005578:	5802546c 	.word	0x5802546c
 800557c:	58025480 	.word	0x58025480
 8005580:	58025494 	.word	0x58025494
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d028      	beq.n	80055dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005598:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop

08005608 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005614:	4b67      	ldr	r3, [pc, #412]	; (80057b4 <HAL_DMA_IRQHandler+0x1ac>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a67      	ldr	r2, [pc, #412]	; (80057b8 <HAL_DMA_IRQHandler+0x1b0>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	0a9b      	lsrs	r3, r3, #10
 8005620:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a5f      	ldr	r2, [pc, #380]	; (80057bc <HAL_DMA_IRQHandler+0x1b4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5d      	ldr	r2, [pc, #372]	; (80057c0 <HAL_DMA_IRQHandler+0x1b8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a5c      	ldr	r2, [pc, #368]	; (80057c4 <HAL_DMA_IRQHandler+0x1bc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a5a      	ldr	r2, [pc, #360]	; (80057c8 <HAL_DMA_IRQHandler+0x1c0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a59      	ldr	r2, [pc, #356]	; (80057cc <HAL_DMA_IRQHandler+0x1c4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a57      	ldr	r2, [pc, #348]	; (80057d0 <HAL_DMA_IRQHandler+0x1c8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a56      	ldr	r2, [pc, #344]	; (80057d4 <HAL_DMA_IRQHandler+0x1cc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a54      	ldr	r2, [pc, #336]	; (80057d8 <HAL_DMA_IRQHandler+0x1d0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a53      	ldr	r2, [pc, #332]	; (80057dc <HAL_DMA_IRQHandler+0x1d4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a51      	ldr	r2, [pc, #324]	; (80057e0 <HAL_DMA_IRQHandler+0x1d8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a50      	ldr	r2, [pc, #320]	; (80057e4 <HAL_DMA_IRQHandler+0x1dc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a4e      	ldr	r2, [pc, #312]	; (80057e8 <HAL_DMA_IRQHandler+0x1e0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a4d      	ldr	r2, [pc, #308]	; (80057ec <HAL_DMA_IRQHandler+0x1e4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a4b      	ldr	r2, [pc, #300]	; (80057f0 <HAL_DMA_IRQHandler+0x1e8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a4a      	ldr	r2, [pc, #296]	; (80057f4 <HAL_DMA_IRQHandler+0x1ec>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_IRQHandler+0xd2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a48      	ldr	r2, [pc, #288]	; (80057f8 <HAL_DMA_IRQHandler+0x1f0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMA_IRQHandler+0xd6>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMA_IRQHandler+0xd8>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 842b 	beq.w	8005f3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	2208      	movs	r2, #8
 80056f0:	409a      	lsls	r2, r3
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80a2 	beq.w	8005840 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <HAL_DMA_IRQHandler+0x1b4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d04a      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <HAL_DMA_IRQHandler+0x1b8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d045      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <HAL_DMA_IRQHandler+0x1bc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d040      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <HAL_DMA_IRQHandler+0x1c0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d03b      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a28      	ldr	r2, [pc, #160]	; (80057cc <HAL_DMA_IRQHandler+0x1c4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d036      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a27      	ldr	r2, [pc, #156]	; (80057d0 <HAL_DMA_IRQHandler+0x1c8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d031      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a25      	ldr	r2, [pc, #148]	; (80057d4 <HAL_DMA_IRQHandler+0x1cc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02c      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <HAL_DMA_IRQHandler+0x1d0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d027      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <HAL_DMA_IRQHandler+0x1d4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <HAL_DMA_IRQHandler+0x1d8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d01d      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_DMA_IRQHandler+0x1dc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_DMA_IRQHandler+0x1e0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_DMA_IRQHandler+0x1e4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_DMA_IRQHandler+0x1e8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_DMA_IRQHandler+0x1ec>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_DMA_IRQHandler+0x194>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_DMA_IRQHandler+0x1f0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d12f      	bne.n	80057fc <HAL_DMA_IRQHandler+0x1f4>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bf14      	ite	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	2300      	moveq	r3, #0
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	e02e      	b.n	8005810 <HAL_DMA_IRQHandler+0x208>
 80057b2:	bf00      	nop
 80057b4:	24000000 	.word	0x24000000
 80057b8:	1b4e81b5 	.word	0x1b4e81b5
 80057bc:	40020010 	.word	0x40020010
 80057c0:	40020028 	.word	0x40020028
 80057c4:	40020040 	.word	0x40020040
 80057c8:	40020058 	.word	0x40020058
 80057cc:	40020070 	.word	0x40020070
 80057d0:	40020088 	.word	0x40020088
 80057d4:	400200a0 	.word	0x400200a0
 80057d8:	400200b8 	.word	0x400200b8
 80057dc:	40020410 	.word	0x40020410
 80057e0:	40020428 	.word	0x40020428
 80057e4:	40020440 	.word	0x40020440
 80057e8:	40020458 	.word	0x40020458
 80057ec:	40020470 	.word	0x40020470
 80057f0:	40020488 	.word	0x40020488
 80057f4:	400204a0 	.word	0x400204a0
 80057f8:	400204b8 	.word	0x400204b8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0204 	bic.w	r2, r2, #4
 8005822:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	2208      	movs	r2, #8
 800582e:	409a      	lsls	r2, r3
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f043 0201 	orr.w	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d06e      	beq.n	8005934 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a69      	ldr	r2, [pc, #420]	; (8005a00 <HAL_DMA_IRQHandler+0x3f8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04a      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a67      	ldr	r2, [pc, #412]	; (8005a04 <HAL_DMA_IRQHandler+0x3fc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d045      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a66      	ldr	r2, [pc, #408]	; (8005a08 <HAL_DMA_IRQHandler+0x400>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d040      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a64      	ldr	r2, [pc, #400]	; (8005a0c <HAL_DMA_IRQHandler+0x404>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d03b      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a63      	ldr	r2, [pc, #396]	; (8005a10 <HAL_DMA_IRQHandler+0x408>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d036      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a61      	ldr	r2, [pc, #388]	; (8005a14 <HAL_DMA_IRQHandler+0x40c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a60      	ldr	r2, [pc, #384]	; (8005a18 <HAL_DMA_IRQHandler+0x410>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d02c      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a5e      	ldr	r2, [pc, #376]	; (8005a1c <HAL_DMA_IRQHandler+0x414>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d027      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a5d      	ldr	r2, [pc, #372]	; (8005a20 <HAL_DMA_IRQHandler+0x418>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5b      	ldr	r2, [pc, #364]	; (8005a24 <HAL_DMA_IRQHandler+0x41c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a5a      	ldr	r2, [pc, #360]	; (8005a28 <HAL_DMA_IRQHandler+0x420>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a58      	ldr	r2, [pc, #352]	; (8005a2c <HAL_DMA_IRQHandler+0x424>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a57      	ldr	r2, [pc, #348]	; (8005a30 <HAL_DMA_IRQHandler+0x428>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a55      	ldr	r2, [pc, #340]	; (8005a34 <HAL_DMA_IRQHandler+0x42c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a54      	ldr	r2, [pc, #336]	; (8005a38 <HAL_DMA_IRQHandler+0x430>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x2ee>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_DMA_IRQHandler+0x434>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10a      	bne.n	800590c <HAL_DMA_IRQHandler+0x304>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e003      	b.n	8005914 <HAL_DMA_IRQHandler+0x30c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2201      	movs	r2, #1
 8005922:	409a      	lsls	r2, r3
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592c:	f043 0202 	orr.w	r2, r3, #2
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2204      	movs	r2, #4
 800593e:	409a      	lsls	r2, r3
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	4013      	ands	r3, r2
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 808f 	beq.w	8005a68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2c      	ldr	r2, [pc, #176]	; (8005a00 <HAL_DMA_IRQHandler+0x3f8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d04a      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <HAL_DMA_IRQHandler+0x3fc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d045      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <HAL_DMA_IRQHandler+0x400>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d040      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <HAL_DMA_IRQHandler+0x404>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d03b      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <HAL_DMA_IRQHandler+0x408>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d036      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a24      	ldr	r2, [pc, #144]	; (8005a14 <HAL_DMA_IRQHandler+0x40c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d031      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a23      	ldr	r2, [pc, #140]	; (8005a18 <HAL_DMA_IRQHandler+0x410>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d02c      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a21      	ldr	r2, [pc, #132]	; (8005a1c <HAL_DMA_IRQHandler+0x414>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d027      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <HAL_DMA_IRQHandler+0x418>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <HAL_DMA_IRQHandler+0x41c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <HAL_DMA_IRQHandler+0x420>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <HAL_DMA_IRQHandler+0x424>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <HAL_DMA_IRQHandler+0x428>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <HAL_DMA_IRQHandler+0x42c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <HAL_DMA_IRQHandler+0x430>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_IRQHandler+0x3e2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <HAL_DMA_IRQHandler+0x434>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d12a      	bne.n	8005a40 <HAL_DMA_IRQHandler+0x438>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf14      	ite	ne
 80059f8:	2301      	movne	r3, #1
 80059fa:	2300      	moveq	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e023      	b.n	8005a48 <HAL_DMA_IRQHandler+0x440>
 8005a00:	40020010 	.word	0x40020010
 8005a04:	40020028 	.word	0x40020028
 8005a08:	40020040 	.word	0x40020040
 8005a0c:	40020058 	.word	0x40020058
 8005a10:	40020070 	.word	0x40020070
 8005a14:	40020088 	.word	0x40020088
 8005a18:	400200a0 	.word	0x400200a0
 8005a1c:	400200b8 	.word	0x400200b8
 8005a20:	40020410 	.word	0x40020410
 8005a24:	40020428 	.word	0x40020428
 8005a28:	40020440 	.word	0x40020440
 8005a2c:	40020458 	.word	0x40020458
 8005a30:	40020470 	.word	0x40020470
 8005a34:	40020488 	.word	0x40020488
 8005a38:	400204a0 	.word	0x400204a0
 8005a3c:	400204b8 	.word	0x400204b8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2204      	movs	r2, #4
 8005a56:	409a      	lsls	r2, r3
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	f043 0204 	orr.w	r2, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2210      	movs	r2, #16
 8005a72:	409a      	lsls	r2, r3
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a6 	beq.w	8005bca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a85      	ldr	r2, [pc, #532]	; (8005c98 <HAL_DMA_IRQHandler+0x690>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d04a      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a83      	ldr	r2, [pc, #524]	; (8005c9c <HAL_DMA_IRQHandler+0x694>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d045      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a82      	ldr	r2, [pc, #520]	; (8005ca0 <HAL_DMA_IRQHandler+0x698>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d040      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a80      	ldr	r2, [pc, #512]	; (8005ca4 <HAL_DMA_IRQHandler+0x69c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d03b      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7f      	ldr	r2, [pc, #508]	; (8005ca8 <HAL_DMA_IRQHandler+0x6a0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d036      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <HAL_DMA_IRQHandler+0x6a4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d031      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7c      	ldr	r2, [pc, #496]	; (8005cb0 <HAL_DMA_IRQHandler+0x6a8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d02c      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7a      	ldr	r2, [pc, #488]	; (8005cb4 <HAL_DMA_IRQHandler+0x6ac>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d027      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a79      	ldr	r2, [pc, #484]	; (8005cb8 <HAL_DMA_IRQHandler+0x6b0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d022      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a77      	ldr	r2, [pc, #476]	; (8005cbc <HAL_DMA_IRQHandler+0x6b4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01d      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a76      	ldr	r2, [pc, #472]	; (8005cc0 <HAL_DMA_IRQHandler+0x6b8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d018      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a74      	ldr	r2, [pc, #464]	; (8005cc4 <HAL_DMA_IRQHandler+0x6bc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a73      	ldr	r2, [pc, #460]	; (8005cc8 <HAL_DMA_IRQHandler+0x6c0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00e      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a71      	ldr	r2, [pc, #452]	; (8005ccc <HAL_DMA_IRQHandler+0x6c4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d009      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a70      	ldr	r2, [pc, #448]	; (8005cd0 <HAL_DMA_IRQHandler+0x6c8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x516>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a6e      	ldr	r2, [pc, #440]	; (8005cd4 <HAL_DMA_IRQHandler+0x6cc>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d10a      	bne.n	8005b34 <HAL_DMA_IRQHandler+0x52c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bf14      	ite	ne
 8005b2c:	2301      	movne	r3, #1
 8005b2e:	2300      	moveq	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e009      	b.n	8005b48 <HAL_DMA_IRQHandler+0x540>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d03e      	beq.n	8005bca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	2210      	movs	r2, #16
 8005b56:	409a      	lsls	r2, r3
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d108      	bne.n	8005b8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d024      	beq.n	8005bca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
 8005b88:	e01f      	b.n	8005bca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01b      	beq.n	8005bca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	e016      	b.n	8005bca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d107      	bne.n	8005bba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0208 	bic.w	r2, r2, #8
 8005bb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8110 	beq.w	8005e00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <HAL_DMA_IRQHandler+0x690>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04a      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <HAL_DMA_IRQHandler+0x694>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d045      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <HAL_DMA_IRQHandler+0x698>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d040      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a28      	ldr	r2, [pc, #160]	; (8005ca4 <HAL_DMA_IRQHandler+0x69c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d03b      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <HAL_DMA_IRQHandler+0x6a0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d036      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a25      	ldr	r2, [pc, #148]	; (8005cac <HAL_DMA_IRQHandler+0x6a4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d031      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_DMA_IRQHandler+0x6a8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02c      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <HAL_DMA_IRQHandler+0x6ac>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d027      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a20      	ldr	r2, [pc, #128]	; (8005cb8 <HAL_DMA_IRQHandler+0x6b0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d022      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <HAL_DMA_IRQHandler+0x6b4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01d      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <HAL_DMA_IRQHandler+0x6b8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <HAL_DMA_IRQHandler+0x6bc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <HAL_DMA_IRQHandler+0x6c0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <HAL_DMA_IRQHandler+0x6c4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <HAL_DMA_IRQHandler+0x6c8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x678>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <HAL_DMA_IRQHandler+0x6cc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d12b      	bne.n	8005cd8 <HAL_DMA_IRQHandler+0x6d0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	e02a      	b.n	8005cec <HAL_DMA_IRQHandler+0x6e4>
 8005c96:	bf00      	nop
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bf14      	ite	ne
 8005ce6:	2301      	movne	r3, #1
 8005ce8:	2300      	moveq	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8087 	beq.w	8005e00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d139      	bne.n	8005d82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0216 	bic.w	r2, r2, #22
 8005d1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x736>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0208 	bic.w	r2, r2, #8
 8005d4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	223f      	movs	r2, #63	; 0x3f
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 834a 	beq.w	800640c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4798      	blx	r3
          }
          return;
 8005d80:	e344      	b.n	800640c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d018      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02c      	beq.n	8005e00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
 8005dae:	e027      	b.n	8005e00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d023      	beq.n	8005e00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
 8005dc0:	e01e      	b.n	8005e00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0210 	bic.w	r2, r2, #16
 8005dde:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8306 	beq.w	8006416 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8088 	beq.w	8005f28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7a      	ldr	r2, [pc, #488]	; (8006010 <HAL_DMA_IRQHandler+0xa08>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d04a      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a79      	ldr	r2, [pc, #484]	; (8006014 <HAL_DMA_IRQHandler+0xa0c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d045      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a77      	ldr	r2, [pc, #476]	; (8006018 <HAL_DMA_IRQHandler+0xa10>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d040      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a76      	ldr	r2, [pc, #472]	; (800601c <HAL_DMA_IRQHandler+0xa14>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d03b      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a74      	ldr	r2, [pc, #464]	; (8006020 <HAL_DMA_IRQHandler+0xa18>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d036      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a73      	ldr	r2, [pc, #460]	; (8006024 <HAL_DMA_IRQHandler+0xa1c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d031      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a71      	ldr	r2, [pc, #452]	; (8006028 <HAL_DMA_IRQHandler+0xa20>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d02c      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a70      	ldr	r2, [pc, #448]	; (800602c <HAL_DMA_IRQHandler+0xa24>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d027      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6e      	ldr	r2, [pc, #440]	; (8006030 <HAL_DMA_IRQHandler+0xa28>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d022      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6d      	ldr	r2, [pc, #436]	; (8006034 <HAL_DMA_IRQHandler+0xa2c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d01d      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6b      	ldr	r2, [pc, #428]	; (8006038 <HAL_DMA_IRQHandler+0xa30>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d018      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6a      	ldr	r2, [pc, #424]	; (800603c <HAL_DMA_IRQHandler+0xa34>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a68      	ldr	r2, [pc, #416]	; (8006040 <HAL_DMA_IRQHandler+0xa38>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a67      	ldr	r2, [pc, #412]	; (8006044 <HAL_DMA_IRQHandler+0xa3c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d009      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a65      	ldr	r2, [pc, #404]	; (8006048 <HAL_DMA_IRQHandler+0xa40>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x8b8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a64      	ldr	r2, [pc, #400]	; (800604c <HAL_DMA_IRQHandler+0xa44>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <HAL_DMA_IRQHandler+0x8ca>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e007      	b.n	8005ee2 <HAL_DMA_IRQHandler+0x8da>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d307      	bcc.n	8005efe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f2      	bne.n	8005ee2 <HAL_DMA_IRQHandler+0x8da>
 8005efc:	e000      	b.n	8005f00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005efe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2203      	movs	r2, #3
 8005f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f16:	e003      	b.n	8005f20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8272 	beq.w	8006416 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
 8005f3a:	e26c      	b.n	8006416 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a43      	ldr	r2, [pc, #268]	; (8006050 <HAL_DMA_IRQHandler+0xa48>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d022      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a42      	ldr	r2, [pc, #264]	; (8006054 <HAL_DMA_IRQHandler+0xa4c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d01d      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a40      	ldr	r2, [pc, #256]	; (8006058 <HAL_DMA_IRQHandler+0xa50>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d018      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a3f      	ldr	r2, [pc, #252]	; (800605c <HAL_DMA_IRQHandler+0xa54>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d013      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <HAL_DMA_IRQHandler+0xa58>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00e      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a3c      	ldr	r2, [pc, #240]	; (8006064 <HAL_DMA_IRQHandler+0xa5c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3a      	ldr	r2, [pc, #232]	; (8006068 <HAL_DMA_IRQHandler+0xa60>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x984>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a39      	ldr	r2, [pc, #228]	; (800606c <HAL_DMA_IRQHandler+0xa64>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d101      	bne.n	8005f90 <HAL_DMA_IRQHandler+0x988>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <HAL_DMA_IRQHandler+0x98a>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 823f 	beq.w	8006416 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	2204      	movs	r2, #4
 8005faa:	409a      	lsls	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80cd 	beq.w	8006150 <HAL_DMA_IRQHandler+0xb48>
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80c7 	beq.w	8006150 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2204      	movs	r2, #4
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d049      	beq.n	8006070 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8210 	beq.w	8006410 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ff8:	e20a      	b.n	8006410 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 8206 	beq.w	8006410 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800600c:	e200      	b.n	8006410 <HAL_DMA_IRQHandler+0xe08>
 800600e:	bf00      	nop
 8006010:	40020010 	.word	0x40020010
 8006014:	40020028 	.word	0x40020028
 8006018:	40020040 	.word	0x40020040
 800601c:	40020058 	.word	0x40020058
 8006020:	40020070 	.word	0x40020070
 8006024:	40020088 	.word	0x40020088
 8006028:	400200a0 	.word	0x400200a0
 800602c:	400200b8 	.word	0x400200b8
 8006030:	40020410 	.word	0x40020410
 8006034:	40020428 	.word	0x40020428
 8006038:	40020440 	.word	0x40020440
 800603c:	40020458 	.word	0x40020458
 8006040:	40020470 	.word	0x40020470
 8006044:	40020488 	.word	0x40020488
 8006048:	400204a0 	.word	0x400204a0
 800604c:	400204b8 	.word	0x400204b8
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d160      	bne.n	800613c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a7f      	ldr	r2, [pc, #508]	; (800627c <HAL_DMA_IRQHandler+0xc74>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d04a      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a7d      	ldr	r2, [pc, #500]	; (8006280 <HAL_DMA_IRQHandler+0xc78>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d045      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a7c      	ldr	r2, [pc, #496]	; (8006284 <HAL_DMA_IRQHandler+0xc7c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d040      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a7a      	ldr	r2, [pc, #488]	; (8006288 <HAL_DMA_IRQHandler+0xc80>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d03b      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a79      	ldr	r2, [pc, #484]	; (800628c <HAL_DMA_IRQHandler+0xc84>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d036      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a77      	ldr	r2, [pc, #476]	; (8006290 <HAL_DMA_IRQHandler+0xc88>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a76      	ldr	r2, [pc, #472]	; (8006294 <HAL_DMA_IRQHandler+0xc8c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d02c      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a74      	ldr	r2, [pc, #464]	; (8006298 <HAL_DMA_IRQHandler+0xc90>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d027      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a73      	ldr	r2, [pc, #460]	; (800629c <HAL_DMA_IRQHandler+0xc94>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a71      	ldr	r2, [pc, #452]	; (80062a0 <HAL_DMA_IRQHandler+0xc98>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d01d      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a70      	ldr	r2, [pc, #448]	; (80062a4 <HAL_DMA_IRQHandler+0xc9c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a6e      	ldr	r2, [pc, #440]	; (80062a8 <HAL_DMA_IRQHandler+0xca0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a6d      	ldr	r2, [pc, #436]	; (80062ac <HAL_DMA_IRQHandler+0xca4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a6b      	ldr	r2, [pc, #428]	; (80062b0 <HAL_DMA_IRQHandler+0xca8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a6a      	ldr	r2, [pc, #424]	; (80062b4 <HAL_DMA_IRQHandler+0xcac>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_DMA_IRQHandler+0xb12>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a68      	ldr	r2, [pc, #416]	; (80062b8 <HAL_DMA_IRQHandler+0xcb0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <HAL_DMA_IRQHandler+0xb24>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0208 	bic.w	r2, r2, #8
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e007      	b.n	800613c <HAL_DMA_IRQHandler+0xb34>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8165 	beq.w	8006410 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800614e:	e15f      	b.n	8006410 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2202      	movs	r2, #2
 800615a:	409a      	lsls	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80c5 	beq.w	80062f0 <HAL_DMA_IRQHandler+0xce8>
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 80bf 	beq.w	80062f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2202      	movs	r2, #2
 800617c:	409a      	lsls	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d018      	beq.n	80061be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 813a 	beq.w	8006414 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a8:	e134      	b.n	8006414 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8130 	beq.w	8006414 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061bc:	e12a      	b.n	8006414 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 8089 	bne.w	80062dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2b      	ldr	r2, [pc, #172]	; (800627c <HAL_DMA_IRQHandler+0xc74>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d04a      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a29      	ldr	r2, [pc, #164]	; (8006280 <HAL_DMA_IRQHandler+0xc78>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d045      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a28      	ldr	r2, [pc, #160]	; (8006284 <HAL_DMA_IRQHandler+0xc7c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d040      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a26      	ldr	r2, [pc, #152]	; (8006288 <HAL_DMA_IRQHandler+0xc80>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d03b      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a25      	ldr	r2, [pc, #148]	; (800628c <HAL_DMA_IRQHandler+0xc84>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d036      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a23      	ldr	r2, [pc, #140]	; (8006290 <HAL_DMA_IRQHandler+0xc88>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d031      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a22      	ldr	r2, [pc, #136]	; (8006294 <HAL_DMA_IRQHandler+0xc8c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d02c      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a20      	ldr	r2, [pc, #128]	; (8006298 <HAL_DMA_IRQHandler+0xc90>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d027      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1f      	ldr	r2, [pc, #124]	; (800629c <HAL_DMA_IRQHandler+0xc94>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d022      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_DMA_IRQHandler+0xc98>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01d      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_DMA_IRQHandler+0xc9c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d018      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <HAL_DMA_IRQHandler+0xca0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_DMA_IRQHandler+0xca4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00e      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <HAL_DMA_IRQHandler+0xca8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <HAL_DMA_IRQHandler+0xcac>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_DMA_IRQHandler+0xc62>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <HAL_DMA_IRQHandler+0xcb0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d128      	bne.n	80062bc <HAL_DMA_IRQHandler+0xcb4>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0214 	bic.w	r2, r2, #20
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e027      	b.n	80062cc <HAL_DMA_IRQHandler+0xcc4>
 800627c:	40020010 	.word	0x40020010
 8006280:	40020028 	.word	0x40020028
 8006284:	40020040 	.word	0x40020040
 8006288:	40020058 	.word	0x40020058
 800628c:	40020070 	.word	0x40020070
 8006290:	40020088 	.word	0x40020088
 8006294:	400200a0 	.word	0x400200a0
 8006298:	400200b8 	.word	0x400200b8
 800629c:	40020410 	.word	0x40020410
 80062a0:	40020428 	.word	0x40020428
 80062a4:	40020440 	.word	0x40020440
 80062a8:	40020458 	.word	0x40020458
 80062ac:	40020470 	.word	0x40020470
 80062b0:	40020488 	.word	0x40020488
 80062b4:	400204a0 	.word	0x400204a0
 80062b8:	400204b8 	.word	0x400204b8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 020a 	bic.w	r2, r2, #10
 80062ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8097 	beq.w	8006414 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ee:	e091      	b.n	8006414 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2208      	movs	r2, #8
 80062fa:	409a      	lsls	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8088 	beq.w	8006416 <HAL_DMA_IRQHandler+0xe0e>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8082 	beq.w	8006416 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a41      	ldr	r2, [pc, #260]	; (800641c <HAL_DMA_IRQHandler+0xe14>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d04a      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3f      	ldr	r2, [pc, #252]	; (8006420 <HAL_DMA_IRQHandler+0xe18>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d045      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3e      	ldr	r2, [pc, #248]	; (8006424 <HAL_DMA_IRQHandler+0xe1c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d040      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3c      	ldr	r2, [pc, #240]	; (8006428 <HAL_DMA_IRQHandler+0xe20>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d03b      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3b      	ldr	r2, [pc, #236]	; (800642c <HAL_DMA_IRQHandler+0xe24>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d036      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a39      	ldr	r2, [pc, #228]	; (8006430 <HAL_DMA_IRQHandler+0xe28>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d031      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a38      	ldr	r2, [pc, #224]	; (8006434 <HAL_DMA_IRQHandler+0xe2c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d02c      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a36      	ldr	r2, [pc, #216]	; (8006438 <HAL_DMA_IRQHandler+0xe30>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d027      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a35      	ldr	r2, [pc, #212]	; (800643c <HAL_DMA_IRQHandler+0xe34>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a33      	ldr	r2, [pc, #204]	; (8006440 <HAL_DMA_IRQHandler+0xe38>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01d      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a32      	ldr	r2, [pc, #200]	; (8006444 <HAL_DMA_IRQHandler+0xe3c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a30      	ldr	r2, [pc, #192]	; (8006448 <HAL_DMA_IRQHandler+0xe40>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2f      	ldr	r2, [pc, #188]	; (800644c <HAL_DMA_IRQHandler+0xe44>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2d      	ldr	r2, [pc, #180]	; (8006450 <HAL_DMA_IRQHandler+0xe48>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2c      	ldr	r2, [pc, #176]	; (8006454 <HAL_DMA_IRQHandler+0xe4c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xdaa>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_DMA_IRQHandler+0xe50>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d108      	bne.n	80063c4 <HAL_DMA_IRQHandler+0xdbc>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 021c 	bic.w	r2, r2, #28
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e007      	b.n	80063d4 <HAL_DMA_IRQHandler+0xdcc>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 020e 	bic.w	r2, r2, #14
 80063d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2201      	movs	r2, #1
 80063de:	409a      	lsls	r2, r3
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
 800640a:	e004      	b.n	8006416 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006414:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006416:	3728      	adds	r7, #40	; 0x28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40020010 	.word	0x40020010
 8006420:	40020028 	.word	0x40020028
 8006424:	40020040 	.word	0x40020040
 8006428:	40020058 	.word	0x40020058
 800642c:	40020070 	.word	0x40020070
 8006430:	40020088 	.word	0x40020088
 8006434:	400200a0 	.word	0x400200a0
 8006438:	400200b8 	.word	0x400200b8
 800643c:	40020410 	.word	0x40020410
 8006440:	40020428 	.word	0x40020428
 8006444:	40020440 	.word	0x40020440
 8006448:	40020458 	.word	0x40020458
 800644c:	40020470 	.word	0x40020470
 8006450:	40020488 	.word	0x40020488
 8006454:	400204a0 	.word	0x400204a0
 8006458:	400204b8 	.word	0x400204b8

0800645c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a42      	ldr	r2, [pc, #264]	; (8006574 <DMA_CalcBaseAndBitshift+0x118>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04a      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a41      	ldr	r2, [pc, #260]	; (8006578 <DMA_CalcBaseAndBitshift+0x11c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d045      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3f      	ldr	r2, [pc, #252]	; (800657c <DMA_CalcBaseAndBitshift+0x120>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d040      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3e      	ldr	r2, [pc, #248]	; (8006580 <DMA_CalcBaseAndBitshift+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d03b      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a3c      	ldr	r2, [pc, #240]	; (8006584 <DMA_CalcBaseAndBitshift+0x128>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d036      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3b      	ldr	r2, [pc, #236]	; (8006588 <DMA_CalcBaseAndBitshift+0x12c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d031      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a39      	ldr	r2, [pc, #228]	; (800658c <DMA_CalcBaseAndBitshift+0x130>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02c      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a38      	ldr	r2, [pc, #224]	; (8006590 <DMA_CalcBaseAndBitshift+0x134>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a36      	ldr	r2, [pc, #216]	; (8006594 <DMA_CalcBaseAndBitshift+0x138>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a35      	ldr	r2, [pc, #212]	; (8006598 <DMA_CalcBaseAndBitshift+0x13c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a33      	ldr	r2, [pc, #204]	; (800659c <DMA_CalcBaseAndBitshift+0x140>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <DMA_CalcBaseAndBitshift+0x144>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a30      	ldr	r2, [pc, #192]	; (80065a4 <DMA_CalcBaseAndBitshift+0x148>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <DMA_CalcBaseAndBitshift+0x150>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <DMA_CalcBaseAndBitshift+0xa8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2c      	ldr	r2, [pc, #176]	; (80065b0 <DMA_CalcBaseAndBitshift+0x154>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d101      	bne.n	8006508 <DMA_CalcBaseAndBitshift+0xac>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <DMA_CalcBaseAndBitshift+0xae>
 8006508:	2300      	movs	r3, #0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d024      	beq.n	8006558 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	3b10      	subs	r3, #16
 8006516:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <DMA_CalcBaseAndBitshift+0x158>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d908      	bls.n	8006548 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <DMA_CalcBaseAndBitshift+0x160>)
 800653e:	4013      	ands	r3, r2
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	659a      	str	r2, [r3, #88]	; 0x58
 8006546:	e00d      	b.n	8006564 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	4b1b      	ldr	r3, [pc, #108]	; (80065bc <DMA_CalcBaseAndBitshift+0x160>)
 8006550:	4013      	ands	r3, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6593      	str	r3, [r2, #88]	; 0x58
 8006556:	e005      	b.n	8006564 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40020010 	.word	0x40020010
 8006578:	40020028 	.word	0x40020028
 800657c:	40020040 	.word	0x40020040
 8006580:	40020058 	.word	0x40020058
 8006584:	40020070 	.word	0x40020070
 8006588:	40020088 	.word	0x40020088
 800658c:	400200a0 	.word	0x400200a0
 8006590:	400200b8 	.word	0x400200b8
 8006594:	40020410 	.word	0x40020410
 8006598:	40020428 	.word	0x40020428
 800659c:	40020440 	.word	0x40020440
 80065a0:	40020458 	.word	0x40020458
 80065a4:	40020470 	.word	0x40020470
 80065a8:	40020488 	.word	0x40020488
 80065ac:	400204a0 	.word	0x400204a0
 80065b0:	400204b8 	.word	0x400204b8
 80065b4:	aaaaaaab 	.word	0xaaaaaaab
 80065b8:	080156c0 	.word	0x080156c0
 80065bc:	fffffc00 	.word	0xfffffc00

080065c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d120      	bne.n	8006616 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d858      	bhi.n	800668e <DMA_CheckFifoParam+0xce>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <DMA_CheckFifoParam+0x24>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	08006607 	.word	0x08006607
 80065ec:	080065f5 	.word	0x080065f5
 80065f0:	0800668f 	.word	0x0800668f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d048      	beq.n	8006692 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006604:	e045      	b.n	8006692 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800660e:	d142      	bne.n	8006696 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006614:	e03f      	b.n	8006696 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	d123      	bne.n	8006668 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	2b03      	cmp	r3, #3
 8006626:	d838      	bhi.n	800669a <DMA_CheckFifoParam+0xda>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <DMA_CheckFifoParam+0x70>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006641 	.word	0x08006641
 8006634:	08006647 	.word	0x08006647
 8006638:	08006641 	.word	0x08006641
 800663c:	08006659 	.word	0x08006659
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
        break;
 8006644:	e030      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d025      	beq.n	800669e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006656:	e022      	b.n	800669e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006660:	d11f      	bne.n	80066a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006666:	e01c      	b.n	80066a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	2b02      	cmp	r3, #2
 800666e:	d902      	bls.n	8006676 <DMA_CheckFifoParam+0xb6>
 8006670:	2b03      	cmp	r3, #3
 8006672:	d003      	beq.n	800667c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006674:	e018      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	73fb      	strb	r3, [r7, #15]
        break;
 800667a:	e015      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
    break;
 800668c:	e00b      	b.n	80066a6 <DMA_CheckFifoParam+0xe6>
        break;
 800668e:	bf00      	nop
 8006690:	e00a      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        break;
 8006692:	bf00      	nop
 8006694:	e008      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        break;
 8006696:	bf00      	nop
 8006698:	e006      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        break;
 800669a:	bf00      	nop
 800669c:	e004      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        break;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
        break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <DMA_CheckFifoParam+0xe8>
    break;
 80066a6:	bf00      	nop
    }
  }

  return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop

080066b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a38      	ldr	r2, [pc, #224]	; (80067ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d022      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a36      	ldr	r2, [pc, #216]	; (80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01d      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a35      	ldr	r2, [pc, #212]	; (80067b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d018      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a33      	ldr	r2, [pc, #204]	; (80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a32      	ldr	r2, [pc, #200]	; (80067bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a30      	ldr	r2, [pc, #192]	; (80067c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2f      	ldr	r2, [pc, #188]	; (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a2d      	ldr	r2, [pc, #180]	; (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d101      	bne.n	800671a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01a      	beq.n	8006756 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	3b08      	subs	r3, #8
 8006728:	4a28      	ldr	r2, [pc, #160]	; (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800672a:	fba2 2303 	umull	r2, r3, r2, r3
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4b26      	ldr	r3, [pc, #152]	; (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a24      	ldr	r2, [pc, #144]	; (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006744:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2201      	movs	r2, #1
 800674e:	409a      	lsls	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006754:	e024      	b.n	80067a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	3b10      	subs	r3, #16
 800675e:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4a1c      	ldr	r2, [pc, #112]	; (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d806      	bhi.n	800677e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d902      	bls.n	800677e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3308      	adds	r3, #8
 800677c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006790:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2201      	movs	r2, #1
 800679a:	409a      	lsls	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	58025408 	.word	0x58025408
 80067b0:	5802541c 	.word	0x5802541c
 80067b4:	58025430 	.word	0x58025430
 80067b8:	58025444 	.word	0x58025444
 80067bc:	58025458 	.word	0x58025458
 80067c0:	5802546c 	.word	0x5802546c
 80067c4:	58025480 	.word	0x58025480
 80067c8:	58025494 	.word	0x58025494
 80067cc:	cccccccd 	.word	0xcccccccd
 80067d0:	16009600 	.word	0x16009600
 80067d4:	58025880 	.word	0x58025880
 80067d8:	aaaaaaab 	.word	0xaaaaaaab
 80067dc:	400204b8 	.word	0x400204b8
 80067e0:	4002040f 	.word	0x4002040f
 80067e4:	10008200 	.word	0x10008200
 80067e8:	40020880 	.word	0x40020880

080067ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d04a      	beq.n	8006898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d847      	bhi.n	8006898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a25      	ldr	r2, [pc, #148]	; (80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d022      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a24      	ldr	r2, [pc, #144]	; (80068a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d01d      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a22      	ldr	r2, [pc, #136]	; (80068ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a21      	ldr	r2, [pc, #132]	; (80068b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d101      	bne.n	800685c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006874:	671a      	str	r2, [r3, #112]	; 0x70
 8006876:	e009      	b.n	800688c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a11      	ldr	r2, [pc, #68]	; (80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800688a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	58025408 	.word	0x58025408
 80068a8:	5802541c 	.word	0x5802541c
 80068ac:	58025430 	.word	0x58025430
 80068b0:	58025444 	.word	0x58025444
 80068b4:	58025458 	.word	0x58025458
 80068b8:	5802546c 	.word	0x5802546c
 80068bc:	58025480 	.word	0x58025480
 80068c0:	58025494 	.word	0x58025494
 80068c4:	1600963f 	.word	0x1600963f
 80068c8:	58025940 	.word	0x58025940
 80068cc:	1000823f 	.word	0x1000823f
 80068d0:	40020940 	.word	0x40020940

080068d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068e2:	4b89      	ldr	r3, [pc, #548]	; (8006b08 <HAL_GPIO_Init+0x234>)
 80068e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068e6:	e194      	b.n	8006c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	2101      	movs	r1, #1
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	4013      	ands	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8186 	beq.w	8006c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b01      	cmp	r3, #1
 800690a:	d005      	beq.n	8006918 <HAL_GPIO_Init+0x44>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d130      	bne.n	800697a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	2203      	movs	r2, #3
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	43db      	mvns	r3, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4013      	ands	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800694e:	2201      	movs	r2, #1
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	091b      	lsrs	r3, r3, #4
 8006964:	f003 0201 	and.w	r2, r3, #1
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	4313      	orrs	r3, r2
 8006972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b03      	cmp	r3, #3
 8006984:	d017      	beq.n	80069b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	2203      	movs	r2, #3
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	43db      	mvns	r3, r3
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4013      	ands	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d123      	bne.n	8006a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	08da      	lsrs	r2, r3, #3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3208      	adds	r2, #8
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	220f      	movs	r2, #15
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	43db      	mvns	r3, r3
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	4013      	ands	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	08da      	lsrs	r2, r3, #3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3208      	adds	r2, #8
 8006a04:	69b9      	ldr	r1, [r7, #24]
 8006a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	2203      	movs	r2, #3
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f003 0203 	and.w	r2, r3, #3
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80e0 	beq.w	8006c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a4c:	4b2f      	ldr	r3, [pc, #188]	; (8006b0c <HAL_GPIO_Init+0x238>)
 8006a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a52:	4a2e      	ldr	r2, [pc, #184]	; (8006b0c <HAL_GPIO_Init+0x238>)
 8006a54:	f043 0302 	orr.w	r3, r3, #2
 8006a58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a5c:	4b2b      	ldr	r3, [pc, #172]	; (8006b0c <HAL_GPIO_Init+0x238>)
 8006a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a6a:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <HAL_GPIO_Init+0x23c>)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	089b      	lsrs	r3, r3, #2
 8006a70:	3302      	adds	r3, #2
 8006a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	220f      	movs	r2, #15
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <HAL_GPIO_Init+0x240>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d052      	beq.n	8006b3c <HAL_GPIO_Init+0x268>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <HAL_GPIO_Init+0x244>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d031      	beq.n	8006b02 <HAL_GPIO_Init+0x22e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <HAL_GPIO_Init+0x248>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02b      	beq.n	8006afe <HAL_GPIO_Init+0x22a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <HAL_GPIO_Init+0x24c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d025      	beq.n	8006afa <HAL_GPIO_Init+0x226>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <HAL_GPIO_Init+0x250>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01f      	beq.n	8006af6 <HAL_GPIO_Init+0x222>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <HAL_GPIO_Init+0x254>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d019      	beq.n	8006af2 <HAL_GPIO_Init+0x21e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1a      	ldr	r2, [pc, #104]	; (8006b2c <HAL_GPIO_Init+0x258>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_GPIO_Init+0x21a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <HAL_GPIO_Init+0x25c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00d      	beq.n	8006aea <HAL_GPIO_Init+0x216>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_GPIO_Init+0x260>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d007      	beq.n	8006ae6 <HAL_GPIO_Init+0x212>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <HAL_GPIO_Init+0x264>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d101      	bne.n	8006ae2 <HAL_GPIO_Init+0x20e>
 8006ade:	2309      	movs	r3, #9
 8006ae0:	e02d      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	e02b      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	e029      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006aea:	2307      	movs	r3, #7
 8006aec:	e027      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006aee:	2306      	movs	r3, #6
 8006af0:	e025      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006af2:	2305      	movs	r3, #5
 8006af4:	e023      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006af6:	2304      	movs	r3, #4
 8006af8:	e021      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006afa:	2303      	movs	r3, #3
 8006afc:	e01f      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e01d      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e01b      	b.n	8006b3e <HAL_GPIO_Init+0x26a>
 8006b06:	bf00      	nop
 8006b08:	58000080 	.word	0x58000080
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	58000400 	.word	0x58000400
 8006b14:	58020000 	.word	0x58020000
 8006b18:	58020400 	.word	0x58020400
 8006b1c:	58020800 	.word	0x58020800
 8006b20:	58020c00 	.word	0x58020c00
 8006b24:	58021000 	.word	0x58021000
 8006b28:	58021400 	.word	0x58021400
 8006b2c:	58021800 	.word	0x58021800
 8006b30:	58021c00 	.word	0x58021c00
 8006b34:	58022000 	.word	0x58022000
 8006b38:	58022400 	.word	0x58022400
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	f002 0203 	and.w	r2, r2, #3
 8006b44:	0092      	lsls	r2, r2, #2
 8006b46:	4093      	lsls	r3, r2
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b4e:	4938      	ldr	r1, [pc, #224]	; (8006c30 <HAL_GPIO_Init+0x35c>)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	089b      	lsrs	r3, r3, #2
 8006b54:	3302      	adds	r3, #2
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	43db      	mvns	r3, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	43db      	mvns	r3, r3
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f47f ae63 	bne.w	80068e8 <HAL_GPIO_Init+0x14>
  }
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	3724      	adds	r7, #36	; 0x24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	58000400 	.word	0x58000400

08006c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	807b      	strh	r3, [r7, #2]
 8006c40:	4613      	mov	r3, r2
 8006c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c44:	787b      	ldrb	r3, [r7, #1]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c4a:	887a      	ldrh	r2, [r7, #2]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c50:	e003      	b.n	8006c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c52:	887b      	ldrh	r3, [r7, #2]
 8006c54:	041a      	lsls	r2, r3, #16
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	619a      	str	r2, [r3, #24]
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006c70:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <HAL_HSEM_FastTake+0x2c>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3320      	adds	r3, #32
 8006c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7a:	4a07      	ldr	r2, [pc, #28]	; (8006c98 <HAL_HSEM_FastTake+0x30>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d101      	bne.n	8006c84 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e000      	b.n	8006c86 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	58026400 	.word	0x58026400
 8006c98:	80000300 	.word	0x80000300

08006c9c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006ca6:	4906      	ldr	r1, [pc, #24]	; (8006cc0 <HAL_HSEM_Release+0x24>)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	58026400 	.word	0x58026400

08006cc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	b08f      	sub	sp, #60	; 0x3c
 8006cc8:	af0a      	add	r7, sp, #40	; 0x28
 8006cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e116      	b.n	8006f04 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fb fcfd 	bl	80026f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f007 f87f 	bl	800de18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	687e      	ldr	r6, [r7, #4]
 8006d22:	466d      	mov	r5, sp
 8006d24:	f106 0410 	add.w	r4, r6, #16
 8006d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d38:	1d33      	adds	r3, r6, #4
 8006d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3c:	6838      	ldr	r0, [r7, #0]
 8006d3e:	f006 fffd 	bl	800dd3c <USB_CoreInit>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0d7      	b.n	8006f04 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f007 f86d 	bl	800de3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	e04a      	b.n	8006dfc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d66:	7bfa      	ldrb	r2, [r7, #15]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	333d      	adds	r3, #61	; 0x3d
 8006d76:	2201      	movs	r2, #1
 8006d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d7a:	7bfa      	ldrb	r2, [r7, #15]
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	440b      	add	r3, r1
 8006d88:	333c      	adds	r3, #60	; 0x3c
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d8e:	7bfa      	ldrb	r2, [r7, #15]
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	b298      	uxth	r0, r3
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3356      	adds	r3, #86	; 0x56
 8006da2:	4602      	mov	r2, r0
 8006da4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006da6:	7bfa      	ldrb	r2, [r7, #15]
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	3340      	adds	r3, #64	; 0x40
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dba:	7bfa      	ldrb	r2, [r7, #15]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3344      	adds	r3, #68	; 0x44
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dce:	7bfa      	ldrb	r2, [r7, #15]
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	3348      	adds	r3, #72	; 0x48
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006de2:	7bfa      	ldrb	r2, [r7, #15]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	334c      	adds	r3, #76	; 0x4c
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	7bfa      	ldrb	r2, [r7, #15]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d3af      	bcc.n	8006d66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	e044      	b.n	8006e96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e38:	7bfa      	ldrb	r2, [r7, #15]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e4e:	7bfa      	ldrb	r2, [r7, #15]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e7a:	7bfa      	ldrb	r2, [r7, #15]
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	3301      	adds	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	7bfa      	ldrb	r2, [r7, #15]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3b5      	bcc.n	8006e0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	687e      	ldr	r6, [r7, #4]
 8006ea8:	466d      	mov	r5, sp
 8006eaa:	f106 0410 	add.w	r4, r6, #16
 8006eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ebe:	1d33      	adds	r3, r6, #4
 8006ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ec2:	6838      	ldr	r0, [r7, #0]
 8006ec4:	f007 f806 	bl	800ded4 <USB_DevInit>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e014      	b.n	8006f04 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d102      	bne.n	8006ef8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f80a 	bl	8006f0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f007 f9c4 	bl	800e28a <USB_DevDisconnect>

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <HAL_PCDEx_ActivateLPM+0x44>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	10000003 	.word	0x10000003

08006f54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006f5c:	4b29      	ldr	r3, [pc, #164]	; (8007004 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	2b06      	cmp	r3, #6
 8006f66:	d00a      	beq.n	8006f7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f68:	4b26      	ldr	r3, [pc, #152]	; (8007004 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d001      	beq.n	8006f7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e040      	b.n	8006ffc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e03e      	b.n	8006ffc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f7e:	4b21      	ldr	r3, [pc, #132]	; (8007004 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006f86:	491f      	ldr	r1, [pc, #124]	; (8007004 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f8e:	f7fb fe25 	bl	8002bdc <HAL_GetTick>
 8006f92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f94:	e009      	b.n	8006faa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f96:	f7fb fe21 	bl	8002bdc <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa4:	d901      	bls.n	8006faa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e028      	b.n	8006ffc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006faa:	4b16      	ldr	r3, [pc, #88]	; (8007004 <HAL_PWREx_ConfigSupply+0xb0>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	d1ee      	bne.n	8006f96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b1e      	cmp	r3, #30
 8006fbc:	d008      	beq.n	8006fd0 <HAL_PWREx_ConfigSupply+0x7c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc2:	d005      	beq.n	8006fd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b1d      	cmp	r3, #29
 8006fc8:	d002      	beq.n	8006fd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8006fce:	d114      	bne.n	8006ffa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006fd0:	f7fb fe04 	bl	8002bdc <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fd6:	e009      	b.n	8006fec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fd8:	f7fb fe00 	bl	8002bdc <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fe6:	d901      	bls.n	8006fec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e007      	b.n	8006ffc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_PWREx_ConfigSupply+0xb0>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d1ee      	bne.n	8006fd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	58024800 	.word	0x58024800

08007008 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a04      	ldr	r2, [pc, #16]	; (8007024 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007016:	60d3      	str	r3, [r2, #12]
}
 8007018:	bf00      	nop
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	58024800 	.word	0x58024800

08007028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	; 0x30
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f000 bc48 	b.w	80078cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8088 	beq.w	800715a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800704a:	4b99      	ldr	r3, [pc, #612]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007054:	4b96      	ldr	r3, [pc, #600]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2b10      	cmp	r3, #16
 800705e:	d007      	beq.n	8007070 <HAL_RCC_OscConfig+0x48>
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	2b18      	cmp	r3, #24
 8007064:	d111      	bne.n	800708a <HAL_RCC_OscConfig+0x62>
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d10c      	bne.n	800708a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007070:	4b8f      	ldr	r3, [pc, #572]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d06d      	beq.n	8007158 <HAL_RCC_OscConfig+0x130>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d169      	bne.n	8007158 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f000 bc21 	b.w	80078cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007092:	d106      	bne.n	80070a2 <HAL_RCC_OscConfig+0x7a>
 8007094:	4b86      	ldr	r3, [pc, #536]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a85      	ldr	r2, [pc, #532]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800709a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e02e      	b.n	8007100 <HAL_RCC_OscConfig+0xd8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x9c>
 80070aa:	4b81      	ldr	r3, [pc, #516]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a80      	ldr	r2, [pc, #512]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	4b7e      	ldr	r3, [pc, #504]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a7d      	ldr	r2, [pc, #500]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e01d      	b.n	8007100 <HAL_RCC_OscConfig+0xd8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCC_OscConfig+0xc0>
 80070ce:	4b78      	ldr	r3, [pc, #480]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a77      	ldr	r2, [pc, #476]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	4b75      	ldr	r3, [pc, #468]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a74      	ldr	r2, [pc, #464]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e00b      	b.n	8007100 <HAL_RCC_OscConfig+0xd8>
 80070e8:	4b71      	ldr	r3, [pc, #452]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a70      	ldr	r2, [pc, #448]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	4b6e      	ldr	r3, [pc, #440]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a6d      	ldr	r2, [pc, #436]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80070fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d013      	beq.n	8007130 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fb fd68 	bl	8002bdc <HAL_GetTick>
 800710c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007110:	f7fb fd64 	bl	8002bdc <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b64      	cmp	r3, #100	; 0x64
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e3d4      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007122:	4b63      	ldr	r3, [pc, #396]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0xe8>
 800712e:	e014      	b.n	800715a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fb fd54 	bl	8002bdc <HAL_GetTick>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007138:	f7fb fd50 	bl	8002bdc <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b64      	cmp	r3, #100	; 0x64
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e3c0      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800714a:	4b59      	ldr	r3, [pc, #356]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x110>
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 80ca 	beq.w	80072fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007168:	4b51      	ldr	r3, [pc, #324]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007170:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007172:	4b4f      	ldr	r3, [pc, #316]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <HAL_RCC_OscConfig+0x166>
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2b18      	cmp	r3, #24
 8007182:	d156      	bne.n	8007232 <HAL_RCC_OscConfig+0x20a>
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d151      	bne.n	8007232 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800718e:	4b48      	ldr	r3, [pc, #288]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_RCC_OscConfig+0x17e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e392      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071a6:	4b42      	ldr	r3, [pc, #264]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 0219 	bic.w	r2, r3, #25
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	493f      	ldr	r1, [pc, #252]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fb fd10 	bl	8002bdc <HAL_GetTick>
 80071bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c0:	f7fb fd0c 	bl	8002bdc <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e37c      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071d2:	4b37      	ldr	r3, [pc, #220]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071de:	f7fb fd2d 	bl	8002c3c <HAL_GetREVID>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d817      	bhi.n	800721c <HAL_RCC_OscConfig+0x1f4>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d108      	bne.n	8007206 <HAL_RCC_OscConfig+0x1de>
 80071f4:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071fc:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80071fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007202:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007204:	e07a      	b.n	80072fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007206:	4b2a      	ldr	r3, [pc, #168]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	031b      	lsls	r3, r3, #12
 8007214:	4926      	ldr	r1, [pc, #152]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007216:	4313      	orrs	r3, r2
 8007218:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800721a:	e06f      	b.n	80072fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721c:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	4921      	ldr	r1, [pc, #132]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800722c:	4313      	orrs	r3, r2
 800722e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007230:	e064      	b.n	80072fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d047      	beq.n	80072ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800723a:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 0219 	bic.w	r2, r3, #25
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	491a      	ldr	r1, [pc, #104]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007248:	4313      	orrs	r3, r2
 800724a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fb fcc6 	bl	8002bdc <HAL_GetTick>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007254:	f7fb fcc2 	bl	8002bdc <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e332      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f0      	beq.n	8007254 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007272:	f7fb fce3 	bl	8002c3c <HAL_GetREVID>
 8007276:	4603      	mov	r3, r0
 8007278:	f241 0203 	movw	r2, #4099	; 0x1003
 800727c:	4293      	cmp	r3, r2
 800727e:	d819      	bhi.n	80072b4 <HAL_RCC_OscConfig+0x28c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b40      	cmp	r3, #64	; 0x40
 8007286:	d108      	bne.n	800729a <HAL_RCC_OscConfig+0x272>
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007290:	4a07      	ldr	r2, [pc, #28]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 8007292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007296:	6053      	str	r3, [r2, #4]
 8007298:	e030      	b.n	80072fc <HAL_RCC_OscConfig+0x2d4>
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	031b      	lsls	r3, r3, #12
 80072a8:	4901      	ldr	r1, [pc, #4]	; (80072b0 <HAL_RCC_OscConfig+0x288>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	604b      	str	r3, [r1, #4]
 80072ae:	e025      	b.n	80072fc <HAL_RCC_OscConfig+0x2d4>
 80072b0:	58024400 	.word	0x58024400
 80072b4:	4b9a      	ldr	r3, [pc, #616]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	4997      	ldr	r1, [pc, #604]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]
 80072c8:	e018      	b.n	80072fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ca:	4b95      	ldr	r3, [pc, #596]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a94      	ldr	r2, [pc, #592]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d6:	f7fb fc81 	bl	8002bdc <HAL_GetTick>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072de:	f7fb fc7d 	bl	8002bdc <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e2ed      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072f0:	4b8b      	ldr	r3, [pc, #556]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1f0      	bne.n	80072de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 80a9 	beq.w	800745c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800730a:	4b85      	ldr	r3, [pc, #532]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007312:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007314:	4b82      	ldr	r3, [pc, #520]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d007      	beq.n	8007330 <HAL_RCC_OscConfig+0x308>
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b18      	cmp	r3, #24
 8007324:	d13a      	bne.n	800739c <HAL_RCC_OscConfig+0x374>
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d135      	bne.n	800739c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007330:	4b7b      	ldr	r3, [pc, #492]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_RCC_OscConfig+0x320>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b80      	cmp	r3, #128	; 0x80
 8007342:	d001      	beq.n	8007348 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e2c1      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007348:	f7fb fc78 	bl	8002c3c <HAL_GetREVID>
 800734c:	4603      	mov	r3, r0
 800734e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007352:	4293      	cmp	r3, r2
 8007354:	d817      	bhi.n	8007386 <HAL_RCC_OscConfig+0x35e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	2b20      	cmp	r3, #32
 800735c:	d108      	bne.n	8007370 <HAL_RCC_OscConfig+0x348>
 800735e:	4b70      	ldr	r3, [pc, #448]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007366:	4a6e      	ldr	r2, [pc, #440]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800736e:	e075      	b.n	800745c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007370:	4b6b      	ldr	r3, [pc, #428]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	069b      	lsls	r3, r3, #26
 800737e:	4968      	ldr	r1, [pc, #416]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007380:	4313      	orrs	r3, r2
 8007382:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007384:	e06a      	b.n	800745c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007386:	4b66      	ldr	r3, [pc, #408]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	061b      	lsls	r3, r3, #24
 8007394:	4962      	ldr	r1, [pc, #392]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007396:	4313      	orrs	r3, r2
 8007398:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800739a:	e05f      	b.n	800745c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d042      	beq.n	800742a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80073a4:	4b5e      	ldr	r3, [pc, #376]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5d      	ldr	r2, [pc, #372]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80073aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7fb fc14 	bl	8002bdc <HAL_GetTick>
 80073b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073b8:	f7fb fc10 	bl	8002bdc <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e280      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073ca:	4b55      	ldr	r3, [pc, #340]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0f0      	beq.n	80073b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073d6:	f7fb fc31 	bl	8002c3c <HAL_GetREVID>
 80073da:	4603      	mov	r3, r0
 80073dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d817      	bhi.n	8007414 <HAL_RCC_OscConfig+0x3ec>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d108      	bne.n	80073fe <HAL_RCC_OscConfig+0x3d6>
 80073ec:	4b4c      	ldr	r3, [pc, #304]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073f4:	4a4a      	ldr	r2, [pc, #296]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80073f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073fa:	6053      	str	r3, [r2, #4]
 80073fc:	e02e      	b.n	800745c <HAL_RCC_OscConfig+0x434>
 80073fe:	4b48      	ldr	r3, [pc, #288]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	069b      	lsls	r3, r3, #26
 800740c:	4944      	ldr	r1, [pc, #272]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 800740e:	4313      	orrs	r3, r2
 8007410:	604b      	str	r3, [r1, #4]
 8007412:	e023      	b.n	800745c <HAL_RCC_OscConfig+0x434>
 8007414:	4b42      	ldr	r3, [pc, #264]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	061b      	lsls	r3, r3, #24
 8007422:	493f      	ldr	r1, [pc, #252]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007424:	4313      	orrs	r3, r2
 8007426:	60cb      	str	r3, [r1, #12]
 8007428:	e018      	b.n	800745c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800742a:	4b3d      	ldr	r3, [pc, #244]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007436:	f7fb fbd1 	bl	8002bdc <HAL_GetTick>
 800743a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800743c:	e008      	b.n	8007450 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800743e:	f7fb fbcd 	bl	8002bdc <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e23d      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007450:	4b33      	ldr	r3, [pc, #204]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f0      	bne.n	800743e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d036      	beq.n	80074d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d019      	beq.n	80074a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007470:	4b2b      	ldr	r3, [pc, #172]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007474:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747c:	f7fb fbae 	bl	8002bdc <HAL_GetTick>
 8007480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007484:	f7fb fbaa 	bl	8002bdc <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e21a      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007496:	4b22      	ldr	r3, [pc, #136]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <HAL_RCC_OscConfig+0x45c>
 80074a2:	e018      	b.n	80074d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074a4:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80074a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a8:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b0:	f7fb fb94 	bl	8002bdc <HAL_GetTick>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b8:	f7fb fb90 	bl	8002bdc <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e200      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074ca:	4b15      	ldr	r3, [pc, #84]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80074cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f0      	bne.n	80074b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d039      	beq.n	8007556 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01c      	beq.n	8007524 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a0c      	ldr	r2, [pc, #48]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 80074f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074f6:	f7fb fb71 	bl	8002bdc <HAL_GetTick>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074fe:	f7fb fb6d 	bl	8002bdc <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e1dd      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007510:	4b03      	ldr	r3, [pc, #12]	; (8007520 <HAL_RCC_OscConfig+0x4f8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <HAL_RCC_OscConfig+0x4d6>
 800751c:	e01b      	b.n	8007556 <HAL_RCC_OscConfig+0x52e>
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007524:	4b9b      	ldr	r3, [pc, #620]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a9a      	ldr	r2, [pc, #616]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800752a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800752e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007530:	f7fb fb54 	bl	8002bdc <HAL_GetTick>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007538:	f7fb fb50 	bl	8002bdc <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e1c0      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800754a:	4b92      	ldr	r3, [pc, #584]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8081 	beq.w	8007666 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007564:	4b8c      	ldr	r3, [pc, #560]	; (8007798 <HAL_RCC_OscConfig+0x770>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a8b      	ldr	r2, [pc, #556]	; (8007798 <HAL_RCC_OscConfig+0x770>)
 800756a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800756e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007570:	f7fb fb34 	bl	8002bdc <HAL_GetTick>
 8007574:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007578:	f7fb fb30 	bl	8002bdc <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b64      	cmp	r3, #100	; 0x64
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e1a0      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800758a:	4b83      	ldr	r3, [pc, #524]	; (8007798 <HAL_RCC_OscConfig+0x770>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d106      	bne.n	80075ac <HAL_RCC_OscConfig+0x584>
 800759e:	4b7d      	ldr	r3, [pc, #500]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a7c      	ldr	r2, [pc, #496]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
 80075aa:	e02d      	b.n	8007608 <HAL_RCC_OscConfig+0x5e0>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10c      	bne.n	80075ce <HAL_RCC_OscConfig+0x5a6>
 80075b4:	4b77      	ldr	r3, [pc, #476]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b8:	4a76      	ldr	r2, [pc, #472]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	6713      	str	r3, [r2, #112]	; 0x70
 80075c0:	4b74      	ldr	r3, [pc, #464]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c4:	4a73      	ldr	r2, [pc, #460]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075c6:	f023 0304 	bic.w	r3, r3, #4
 80075ca:	6713      	str	r3, [r2, #112]	; 0x70
 80075cc:	e01c      	b.n	8007608 <HAL_RCC_OscConfig+0x5e0>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x5c8>
 80075d6:	4b6f      	ldr	r3, [pc, #444]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	4a6e      	ldr	r2, [pc, #440]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075dc:	f043 0304 	orr.w	r3, r3, #4
 80075e0:	6713      	str	r3, [r2, #112]	; 0x70
 80075e2:	4b6c      	ldr	r3, [pc, #432]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	4a6b      	ldr	r2, [pc, #428]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	6713      	str	r3, [r2, #112]	; 0x70
 80075ee:	e00b      	b.n	8007608 <HAL_RCC_OscConfig+0x5e0>
 80075f0:	4b68      	ldr	r3, [pc, #416]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f4:	4a67      	ldr	r2, [pc, #412]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	6713      	str	r3, [r2, #112]	; 0x70
 80075fc:	4b65      	ldr	r3, [pc, #404]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80075fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007600:	4a64      	ldr	r2, [pc, #400]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007602:	f023 0304 	bic.w	r3, r3, #4
 8007606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d015      	beq.n	800763c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007610:	f7fb fae4 	bl	8002bdc <HAL_GetTick>
 8007614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007616:	e00a      	b.n	800762e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007618:	f7fb fae0 	bl	8002bdc <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f241 3288 	movw	r2, #5000	; 0x1388
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e14e      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800762e:	4b59      	ldr	r3, [pc, #356]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0ee      	beq.n	8007618 <HAL_RCC_OscConfig+0x5f0>
 800763a:	e014      	b.n	8007666 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800763c:	f7fb face 	bl	8002bdc <HAL_GetTick>
 8007640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007642:	e00a      	b.n	800765a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007644:	f7fb faca 	bl	8002bdc <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007652:	4293      	cmp	r3, r2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e138      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800765a:	4b4e      	ldr	r3, [pc, #312]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1ee      	bne.n	8007644 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 812d 	beq.w	80078ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007670:	4b48      	ldr	r3, [pc, #288]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007678:	2b18      	cmp	r3, #24
 800767a:	f000 80bd 	beq.w	80077f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	2b02      	cmp	r3, #2
 8007684:	f040 809e 	bne.w	80077c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007688:	4b42      	ldr	r3, [pc, #264]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a41      	ldr	r2, [pc, #260]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800768e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fb faa2 	bl	8002bdc <HAL_GetTick>
 8007698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800769c:	f7fb fa9e 	bl	8002bdc <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e10e      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076ae:	4b39      	ldr	r3, [pc, #228]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ba:	4b36      	ldr	r3, [pc, #216]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80076bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076be:	4b37      	ldr	r3, [pc, #220]	; (800779c <HAL_RCC_OscConfig+0x774>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076ca:	0112      	lsls	r2, r2, #4
 80076cc:	430a      	orrs	r2, r1
 80076ce:	4931      	ldr	r1, [pc, #196]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	628b      	str	r3, [r1, #40]	; 0x28
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	3b01      	subs	r3, #1
 80076da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	3b01      	subs	r3, #1
 80076e4:	025b      	lsls	r3, r3, #9
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	3b01      	subs	r3, #1
 80076f0:	041b      	lsls	r3, r3, #16
 80076f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	3b01      	subs	r3, #1
 80076fe:	061b      	lsls	r3, r3, #24
 8007700:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007704:	4923      	ldr	r1, [pc, #140]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800770a:	4b22      	ldr	r3, [pc, #136]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	4a21      	ldr	r2, [pc, #132]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <HAL_RCC_OscConfig+0x778>)
 800771c:	4013      	ands	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007722:	00d2      	lsls	r2, r2, #3
 8007724:	491b      	ldr	r1, [pc, #108]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800772a:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	f023 020c 	bic.w	r2, r3, #12
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	4917      	ldr	r1, [pc, #92]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800773c:	4b15      	ldr	r3, [pc, #84]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f023 0202 	bic.w	r2, r3, #2
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007748:	4912      	ldr	r1, [pc, #72]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800774e:	4b11      	ldr	r3, [pc, #68]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775a:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	4a0a      	ldr	r2, [pc, #40]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 800776c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	4a07      	ldr	r2, [pc, #28]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007778:	f043 0301 	orr.w	r3, r3, #1
 800777c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a04      	ldr	r2, [pc, #16]	; (8007794 <HAL_RCC_OscConfig+0x76c>)
 8007784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778a:	f7fb fa27 	bl	8002bdc <HAL_GetTick>
 800778e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007790:	e011      	b.n	80077b6 <HAL_RCC_OscConfig+0x78e>
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	58024800 	.word	0x58024800
 800779c:	fffffc0c 	.word	0xfffffc0c
 80077a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a4:	f7fb fa1a 	bl	8002bdc <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e08a      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f0      	beq.n	80077a4 <HAL_RCC_OscConfig+0x77c>
 80077c2:	e082      	b.n	80078ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c4:	4b43      	ldr	r3, [pc, #268]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a42      	ldr	r2, [pc, #264]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80077ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d0:	f7fb fa04 	bl	8002bdc <HAL_GetTick>
 80077d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d8:	f7fb fa00 	bl	8002bdc <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e070      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077ea:	4b3a      	ldr	r3, [pc, #232]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x7b0>
 80077f6:	e068      	b.n	80078ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077f8:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077fe:	4b35      	ldr	r3, [pc, #212]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b01      	cmp	r3, #1
 800780a:	d031      	beq.n	8007870 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f003 0203 	and.w	r2, r3, #3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007816:	429a      	cmp	r2, r3
 8007818:	d12a      	bne.n	8007870 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007826:	429a      	cmp	r2, r3
 8007828:	d122      	bne.n	8007870 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007836:	429a      	cmp	r2, r3
 8007838:	d11a      	bne.n	8007870 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	0a5b      	lsrs	r3, r3, #9
 800783e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007846:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007848:	429a      	cmp	r2, r3
 800784a:	d111      	bne.n	8007870 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	0c1b      	lsrs	r3, r3, #16
 8007850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800785a:	429a      	cmp	r2, r3
 800785c:	d108      	bne.n	8007870 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	0e1b      	lsrs	r3, r3, #24
 8007862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800786c:	429a      	cmp	r2, r3
 800786e:	d001      	beq.n	8007874 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e02b      	b.n	80078cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007874:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 8007876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007878:	08db      	lsrs	r3, r3, #3
 800787a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800787e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	429a      	cmp	r2, r3
 8007888:	d01f      	beq.n	80078ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a11      	ldr	r2, [pc, #68]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007896:	f7fb f9a1 	bl	8002bdc <HAL_GetTick>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800789c:	bf00      	nop
 800789e:	f7fb f99d 	bl	8002bdc <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d0f9      	beq.n	800789e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80078ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <HAL_RCC_OscConfig+0x8b0>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078b6:	00d2      	lsls	r2, r2, #3
 80078b8:	4906      	ldr	r1, [pc, #24]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <HAL_RCC_OscConfig+0x8ac>)
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3730      	adds	r7, #48	; 0x30
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	58024400 	.word	0x58024400
 80078d8:	ffff0007 	.word	0xffff0007

080078dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e19c      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078f0:	4b8a      	ldr	r3, [pc, #552]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d910      	bls.n	8007920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fe:	4b87      	ldr	r3, [pc, #540]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f023 020f 	bic.w	r2, r3, #15
 8007906:	4985      	ldr	r1, [pc, #532]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	4313      	orrs	r3, r2
 800790c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800790e:	4b83      	ldr	r3, [pc, #524]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d001      	beq.n	8007920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e184      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d010      	beq.n	800794e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	4b7b      	ldr	r3, [pc, #492]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007938:	429a      	cmp	r2, r3
 800793a:	d908      	bls.n	800794e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800793c:	4b78      	ldr	r3, [pc, #480]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	4975      	ldr	r1, [pc, #468]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 800794a:	4313      	orrs	r3, r2
 800794c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d010      	beq.n	800797c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695a      	ldr	r2, [r3, #20]
 800795e:	4b70      	ldr	r3, [pc, #448]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007966:	429a      	cmp	r2, r3
 8007968:	d908      	bls.n	800797c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800796a:	4b6d      	ldr	r3, [pc, #436]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	496a      	ldr	r1, [pc, #424]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007978:	4313      	orrs	r3, r2
 800797a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d010      	beq.n	80079aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	4b64      	ldr	r3, [pc, #400]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007994:	429a      	cmp	r2, r3
 8007996:	d908      	bls.n	80079aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007998:	4b61      	ldr	r3, [pc, #388]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	495e      	ldr	r1, [pc, #376]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d010      	beq.n	80079d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69da      	ldr	r2, [r3, #28]
 80079ba:	4b59      	ldr	r3, [pc, #356]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d908      	bls.n	80079d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80079c6:	4b56      	ldr	r3, [pc, #344]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	4953      	ldr	r1, [pc, #332]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d010      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d908      	bls.n	8007a06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079f4:	4b4a      	ldr	r3, [pc, #296]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f023 020f 	bic.w	r2, r3, #15
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	4947      	ldr	r1, [pc, #284]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d055      	beq.n	8007abe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007a12:	4b43      	ldr	r3, [pc, #268]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	4940      	ldr	r1, [pc, #256]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d107      	bne.n	8007a3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a2c:	4b3c      	ldr	r3, [pc, #240]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d121      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0f6      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d107      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a44:	4b36      	ldr	r3, [pc, #216]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d115      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0ea      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d107      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a5c:	4b30      	ldr	r3, [pc, #192]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d109      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0de      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a6c:	4b2c      	ldr	r3, [pc, #176]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0d6      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a7c:	4b28      	ldr	r3, [pc, #160]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f023 0207 	bic.w	r2, r3, #7
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4925      	ldr	r1, [pc, #148]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8e:	f7fb f8a5 	bl	8002bdc <HAL_GetTick>
 8007a92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a94:	e00a      	b.n	8007aac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a96:	f7fb f8a1 	bl	8002bdc <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e0be      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aac:	4b1c      	ldr	r3, [pc, #112]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d1eb      	bne.n	8007a96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d010      	beq.n	8007aec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f003 030f 	and.w	r3, r3, #15
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d208      	bcs.n	8007aec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ada:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f023 020f 	bic.w	r2, r3, #15
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	490e      	ldr	r1, [pc, #56]	; (8007b20 <HAL_RCC_ClockConfig+0x244>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d214      	bcs.n	8007b24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afa:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 020f 	bic.w	r2, r3, #15
 8007b02:	4906      	ldr	r1, [pc, #24]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0a:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <HAL_RCC_ClockConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d005      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e086      	b.n	8007c2a <HAL_RCC_ClockConfig+0x34e>
 8007b1c:	52002000 	.word	0x52002000
 8007b20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d010      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	4b3f      	ldr	r3, [pc, #252]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d208      	bcs.n	8007b52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b40:	4b3c      	ldr	r3, [pc, #240]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	4939      	ldr	r1, [pc, #228]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0308 	and.w	r3, r3, #8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d010      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	4b34      	ldr	r3, [pc, #208]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d208      	bcs.n	8007b80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b6e:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	492e      	ldr	r1, [pc, #184]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d010      	beq.n	8007bae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d208      	bcs.n	8007bae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b9c:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	4922      	ldr	r1, [pc, #136]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d010      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69da      	ldr	r2, [r3, #28]
 8007bbe:	4b1d      	ldr	r3, [pc, #116]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d208      	bcs.n	8007bdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007bca:	4b1a      	ldr	r3, [pc, #104]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	4917      	ldr	r1, [pc, #92]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007bdc:	f000 f834 	bl	8007c48 <HAL_RCC_GetSysClockFreq>
 8007be0:	4602      	mov	r2, r0
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	0a1b      	lsrs	r3, r3, #8
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	4912      	ldr	r1, [pc, #72]	; (8007c38 <HAL_RCC_ClockConfig+0x35c>)
 8007bee:	5ccb      	ldrb	r3, [r1, r3]
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bfa:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <HAL_RCC_ClockConfig+0x358>)
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	4a0d      	ldr	r2, [pc, #52]	; (8007c38 <HAL_RCC_ClockConfig+0x35c>)
 8007c04:	5cd3      	ldrb	r3, [r2, r3]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <HAL_RCC_ClockConfig+0x360>)
 8007c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c14:	4a0a      	ldr	r2, [pc, #40]	; (8007c40 <HAL_RCC_ClockConfig+0x364>)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <HAL_RCC_ClockConfig+0x368>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fa fdf2 	bl	8002808 <HAL_InitTick>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400
 8007c38:	08015624 	.word	0x08015624
 8007c3c:	24000004 	.word	0x24000004
 8007c40:	24000000 	.word	0x24000000
 8007c44:	24000008 	.word	0x24000008

08007c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b089      	sub	sp, #36	; 0x24
 8007c4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c4e:	4bb3      	ldr	r3, [pc, #716]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c56:	2b18      	cmp	r3, #24
 8007c58:	f200 8155 	bhi.w	8007f06 <HAL_RCC_GetSysClockFreq+0x2be>
 8007c5c:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007cc9 	.word	0x08007cc9
 8007c68:	08007f07 	.word	0x08007f07
 8007c6c:	08007f07 	.word	0x08007f07
 8007c70:	08007f07 	.word	0x08007f07
 8007c74:	08007f07 	.word	0x08007f07
 8007c78:	08007f07 	.word	0x08007f07
 8007c7c:	08007f07 	.word	0x08007f07
 8007c80:	08007f07 	.word	0x08007f07
 8007c84:	08007cef 	.word	0x08007cef
 8007c88:	08007f07 	.word	0x08007f07
 8007c8c:	08007f07 	.word	0x08007f07
 8007c90:	08007f07 	.word	0x08007f07
 8007c94:	08007f07 	.word	0x08007f07
 8007c98:	08007f07 	.word	0x08007f07
 8007c9c:	08007f07 	.word	0x08007f07
 8007ca0:	08007f07 	.word	0x08007f07
 8007ca4:	08007cf5 	.word	0x08007cf5
 8007ca8:	08007f07 	.word	0x08007f07
 8007cac:	08007f07 	.word	0x08007f07
 8007cb0:	08007f07 	.word	0x08007f07
 8007cb4:	08007f07 	.word	0x08007f07
 8007cb8:	08007f07 	.word	0x08007f07
 8007cbc:	08007f07 	.word	0x08007f07
 8007cc0:	08007f07 	.word	0x08007f07
 8007cc4:	08007cfb 	.word	0x08007cfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc8:	4b94      	ldr	r3, [pc, #592]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d009      	beq.n	8007ce8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cd4:	4b91      	ldr	r3, [pc, #580]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	08db      	lsrs	r3, r3, #3
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	4a90      	ldr	r2, [pc, #576]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007ce6:	e111      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ce8:	4b8d      	ldr	r3, [pc, #564]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cea:	61bb      	str	r3, [r7, #24]
      break;
 8007cec:	e10e      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007cee:	4b8d      	ldr	r3, [pc, #564]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007cf0:	61bb      	str	r3, [r7, #24]
      break;
 8007cf2:	e10b      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007cf4:	4b8c      	ldr	r3, [pc, #560]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007cf6:	61bb      	str	r3, [r7, #24]
      break;
 8007cf8:	e108      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cfa:	4b88      	ldr	r3, [pc, #544]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007d04:	4b85      	ldr	r3, [pc, #532]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	091b      	lsrs	r3, r3, #4
 8007d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007d10:	4b82      	ldr	r3, [pc, #520]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d1a:	4b80      	ldr	r3, [pc, #512]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	08db      	lsrs	r3, r3, #3
 8007d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	fb02 f303 	mul.w	r3, r2, r3
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80e1 	beq.w	8007f00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	f000 8083 	beq.w	8007e4c <HAL_RCC_GetSysClockFreq+0x204>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	f200 80a1 	bhi.w	8007e90 <HAL_RCC_GetSysClockFreq+0x248>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_RCC_GetSysClockFreq+0x114>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d056      	beq.n	8007e08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d5a:	e099      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d5c:	4b6f      	ldr	r3, [pc, #444]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02d      	beq.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d68:	4b6c      	ldr	r3, [pc, #432]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	08db      	lsrs	r3, r3, #3
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	4a6b      	ldr	r2, [pc, #428]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d74:	fa22 f303 	lsr.w	r3, r2, r3
 8007d78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	ee07 3a90 	vmov	s15, r3
 8007d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d92:	4b62      	ldr	r3, [pc, #392]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007da6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007dc2:	e087      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007f30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd6:	4b51      	ldr	r3, [pc, #324]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e06:	e065      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1a:	4b40      	ldr	r3, [pc, #256]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e4a:	e043      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007f38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5e:	4b2f      	ldr	r3, [pc, #188]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e8e:	e021      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007f2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ed2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	0a5b      	lsrs	r3, r3, #9
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	3301      	adds	r3, #1
 8007ee0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ef8:	ee17 3a90 	vmov	r3, s15
 8007efc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007efe:	e005      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]
      break;
 8007f04:	e002      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007f06:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f08:	61bb      	str	r3, [r7, #24]
      break;
 8007f0a:	bf00      	nop
  }

  return sysclockfreq;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3724      	adds	r7, #36	; 0x24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	03d09000 	.word	0x03d09000
 8007f24:	003d0900 	.word	0x003d0900
 8007f28:	007a1200 	.word	0x007a1200
 8007f2c:	46000000 	.word	0x46000000
 8007f30:	4c742400 	.word	0x4c742400
 8007f34:	4a742400 	.word	0x4a742400
 8007f38:	4af42400 	.word	0x4af42400

08007f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f42:	f7ff fe81 	bl	8007c48 <HAL_RCC_GetSysClockFreq>
 8007f46:	4602      	mov	r2, r0
 8007f48:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <HAL_RCC_GetHCLKFreq+0x50>)
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	0a1b      	lsrs	r3, r3, #8
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	490f      	ldr	r1, [pc, #60]	; (8007f90 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f54:	5ccb      	ldrb	r3, [r1, r3]
 8007f56:	f003 031f 	and.w	r3, r3, #31
 8007f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <HAL_RCC_GetHCLKFreq+0x50>)
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f6a:	5cd3      	ldrb	r3, [r2, r3]
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	fa22 f303 	lsr.w	r3, r2, r3
 8007f76:	4a07      	ldr	r2, [pc, #28]	; (8007f94 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f7a:	4a07      	ldr	r2, [pc, #28]	; (8007f98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f82:	681b      	ldr	r3, [r3, #0]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	08015624 	.word	0x08015624
 8007f94:	24000004 	.word	0x24000004
 8007f98:	24000000 	.word	0x24000000

08007f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007fa0:	f7ff ffcc 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fb2:	5ccb      	ldrb	r3, [r1, r3]
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	08015624 	.word	0x08015624

08007fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007fcc:	f7ff ffb6 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	4b06      	ldr	r3, [pc, #24]	; (8007fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007fde:	5ccb      	ldrb	r3, [r1, r3]
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	58024400 	.word	0x58024400
 8007ff0:	08015624 	.word	0x08015624

08007ff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	223f      	movs	r2, #63	; 0x3f
 8008002:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0207 	and.w	r2, r3, #7
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008010:	4b17      	ldr	r3, [pc, #92]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008034:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800804c:	4b08      	ldr	r3, [pc, #32]	; (8008070 <HAL_RCC_GetClockConfig+0x7c>)
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <HAL_RCC_GetClockConfig+0x80>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	601a      	str	r2, [r3, #0]
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	58024400 	.word	0x58024400
 8008074:	52002000 	.word	0x52002000

08008078 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800807c:	b0ca      	sub	sp, #296	; 0x128
 800807e:	af00      	add	r7, sp, #0
 8008080:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008084:	2300      	movs	r3, #0
 8008086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800808a:	2300      	movs	r3, #0
 800808c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800809c:	2500      	movs	r5, #0
 800809e:	ea54 0305 	orrs.w	r3, r4, r5
 80080a2:	d049      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080ae:	d02f      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80080b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080b4:	d828      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80080b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ba:	d01a      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80080bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c0:	d822      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80080c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ca:	d007      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080cc:	e01c      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ce:	4bb8      	ldr	r3, [pc, #736]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	4ab7      	ldr	r2, [pc, #732]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080da:	e01a      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e0:	3308      	adds	r3, #8
 80080e2:	2102      	movs	r1, #2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f002 fb61 	bl	800a7ac <RCCEx_PLL2_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080f0:	e00f      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f6:	3328      	adds	r3, #40	; 0x28
 80080f8:	2102      	movs	r1, #2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f002 fc08 	bl	800a910 <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008106:	e004      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800810e:	e000      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800811a:	4ba5      	ldr	r3, [pc, #660]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800811c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008128:	4aa1      	ldr	r2, [pc, #644]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800812a:	430b      	orrs	r3, r1
 800812c:	6513      	str	r3, [r2, #80]	; 0x50
 800812e:	e003      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008134:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008144:	f04f 0900 	mov.w	r9, #0
 8008148:	ea58 0309 	orrs.w	r3, r8, r9
 800814c:	d047      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800814e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008154:	2b04      	cmp	r3, #4
 8008156:	d82a      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008175 	.word	0x08008175
 8008164:	08008183 	.word	0x08008183
 8008168:	08008199 	.word	0x08008199
 800816c:	080081b7 	.word	0x080081b7
 8008170:	080081b7 	.word	0x080081b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008174:	4b8e      	ldr	r3, [pc, #568]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	4a8d      	ldr	r2, [pc, #564]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800817a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800817e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008180:	e01a      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008186:	3308      	adds	r3, #8
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f002 fb0e 	bl	800a7ac <RCCEx_PLL2_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008196:	e00f      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819c:	3328      	adds	r3, #40	; 0x28
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 fbb5 	bl	800a910 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081ac:	e004      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081b4:	e000      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80081b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081c0:	4b7b      	ldr	r3, [pc, #492]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	f023 0107 	bic.w	r1, r3, #7
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	4a78      	ldr	r2, [pc, #480]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081d0:	430b      	orrs	r3, r1
 80081d2:	6513      	str	r3, [r2, #80]	; 0x50
 80081d4:	e003      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80081ea:	f04f 0b00 	mov.w	fp, #0
 80081ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80081f2:	d04c      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fe:	d030      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008204:	d829      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008206:	2bc0      	cmp	r3, #192	; 0xc0
 8008208:	d02d      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800820a:	2bc0      	cmp	r3, #192	; 0xc0
 800820c:	d825      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d018      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d821      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d007      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800821e:	e01c      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008220:	4b63      	ldr	r3, [pc, #396]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	4a62      	ldr	r2, [pc, #392]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800822a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800822c:	e01c      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008232:	3308      	adds	r3, #8
 8008234:	2100      	movs	r1, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f002 fab8 	bl	800a7ac <RCCEx_PLL2_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008242:	e011      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008248:	3328      	adds	r3, #40	; 0x28
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f002 fb5f 	bl	800a910 <RCCEx_PLL3_Config>
 8008252:	4603      	mov	r3, r0
 8008254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008258:	e006      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008260:	e002      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008262:	bf00      	nop
 8008264:	e000      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008270:	4b4f      	ldr	r3, [pc, #316]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008274:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800827c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827e:	4a4c      	ldr	r2, [pc, #304]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008280:	430b      	orrs	r3, r1
 8008282:	6513      	str	r3, [r2, #80]	; 0x50
 8008284:	e003      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800828a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800829a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800829e:	2300      	movs	r3, #0
 80082a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80082a8:	460b      	mov	r3, r1
 80082aa:	4313      	orrs	r3, r2
 80082ac:	d053      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80082b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082ba:	d035      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80082bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082c0:	d82e      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80082c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082c6:	d031      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80082c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082cc:	d828      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80082ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d2:	d01a      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80082d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d8:	d822      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80082de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082e2:	d007      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80082e4:	e01c      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e6:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	4a31      	ldr	r2, [pc, #196]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082f2:	e01c      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f8:	3308      	adds	r3, #8
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f002 fa55 	bl	800a7ac <RCCEx_PLL2_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008308:	e011      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830e:	3328      	adds	r3, #40	; 0x28
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f002 fafc 	bl	800a910 <RCCEx_PLL3_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800831e:	e006      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008326:	e002      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800832c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008336:	4b1e      	ldr	r3, [pc, #120]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008346:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008348:	430b      	orrs	r3, r1
 800834a:	6593      	str	r3, [r2, #88]	; 0x58
 800834c:	e003      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008352:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008362:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800836c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008370:	460b      	mov	r3, r1
 8008372:	4313      	orrs	r3, r2
 8008374:	d056      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800837e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008382:	d038      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008388:	d831      	bhi.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800838a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800838e:	d034      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008390:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008394:	d82b      	bhi.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800839a:	d01d      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800839c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083a0:	d825      	bhi.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80083a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083aa:	d00a      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80083ac:	e01f      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80083ae:	bf00      	nop
 80083b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b4:	4ba2      	ldr	r3, [pc, #648]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	4aa1      	ldr	r2, [pc, #644]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083c0:	e01c      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c6:	3308      	adds	r3, #8
 80083c8:	2100      	movs	r1, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f002 f9ee 	bl	800a7ac <RCCEx_PLL2_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083d6:	e011      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083dc:	3328      	adds	r3, #40	; 0x28
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f002 fa95 	bl	800a910 <RCCEx_PLL3_Config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083ec:	e006      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083f4:	e002      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80083f6:	bf00      	nop
 80083f8:	e000      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80083fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008404:	4b8e      	ldr	r3, [pc, #568]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008408:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800840c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008410:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008414:	4a8a      	ldr	r2, [pc, #552]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008416:	430b      	orrs	r3, r1
 8008418:	6593      	str	r3, [r2, #88]	; 0x58
 800841a:	e003      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008434:	2300      	movs	r3, #0
 8008436:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800843a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800843e:	460b      	mov	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	d03a      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844a:	2b30      	cmp	r3, #48	; 0x30
 800844c:	d01f      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800844e:	2b30      	cmp	r3, #48	; 0x30
 8008450:	d819      	bhi.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008452:	2b20      	cmp	r3, #32
 8008454:	d00c      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008456:	2b20      	cmp	r3, #32
 8008458:	d815      	bhi.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d019      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800845e:	2b10      	cmp	r3, #16
 8008460:	d111      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008462:	4b77      	ldr	r3, [pc, #476]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	4a76      	ldr	r2, [pc, #472]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800846c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800846e:	e011      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008474:	3308      	adds	r3, #8
 8008476:	2102      	movs	r1, #2
 8008478:	4618      	mov	r0, r3
 800847a:	f002 f997 	bl	800a7ac <RCCEx_PLL2_Config>
 800847e:	4603      	mov	r3, r0
 8008480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008484:	e006      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800848c:	e002      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800848e:	bf00      	nop
 8008490:	e000      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800849c:	4b68      	ldr	r3, [pc, #416]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800849e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084aa:	4a65      	ldr	r2, [pc, #404]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084b0:	e003      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80084c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4313      	orrs	r3, r2
 80084d8:	d051      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084e4:	d035      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80084e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084ea:	d82e      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80084ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084f0:	d031      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80084f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084f6:	d828      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80084f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fc:	d01a      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80084fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008502:	d822      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850c:	d007      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800850e:	e01c      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008510:	4b4b      	ldr	r3, [pc, #300]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	4a4a      	ldr	r2, [pc, #296]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800851a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800851c:	e01c      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008522:	3308      	adds	r3, #8
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f002 f940 	bl	800a7ac <RCCEx_PLL2_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008532:	e011      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008538:	3328      	adds	r3, #40	; 0x28
 800853a:	2100      	movs	r1, #0
 800853c:	4618      	mov	r0, r3
 800853e:	f002 f9e7 	bl	800a910 <RCCEx_PLL3_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008548:	e006      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008550:	e002      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008560:	4b37      	ldr	r3, [pc, #220]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008564:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856e:	4a34      	ldr	r2, [pc, #208]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008570:	430b      	orrs	r3, r1
 8008572:	6513      	str	r3, [r2, #80]	; 0x50
 8008574:	e003      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800857a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800858a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800858e:	2300      	movs	r3, #0
 8008590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008594:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008598:	460b      	mov	r3, r1
 800859a:	4313      	orrs	r3, r2
 800859c:	d056      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085a8:	d033      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80085aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085ae:	d82c      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085b4:	d02f      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80085b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085ba:	d826      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085c0:	d02b      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80085c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085c6:	d820      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085cc:	d012      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085d2:	d81a      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d022      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80085d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085dc:	d115      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e2:	3308      	adds	r3, #8
 80085e4:	2101      	movs	r1, #1
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 f8e0 	bl	800a7ac <RCCEx_PLL2_Config>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80085f2:	e015      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f8:	3328      	adds	r3, #40	; 0x28
 80085fa:	2101      	movs	r1, #1
 80085fc:	4618      	mov	r0, r3
 80085fe:	f002 f987 	bl	800a910 <RCCEx_PLL3_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008608:	e00a      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008610:	e006      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008612:	bf00      	nop
 8008614:	e004      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008616:	bf00      	nop
 8008618:	e002      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800861a:	bf00      	nop
 800861c:	e000      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800861e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800862a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008636:	4a02      	ldr	r2, [pc, #8]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008638:	430b      	orrs	r3, r1
 800863a:	6513      	str	r3, [r2, #80]	; 0x50
 800863c:	e006      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008648:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800865c:	2300      	movs	r3, #0
 800865e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008662:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008666:	460b      	mov	r3, r1
 8008668:	4313      	orrs	r3, r2
 800866a:	d055      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800866c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008678:	d033      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800867a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800867e:	d82c      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008684:	d02f      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868a:	d826      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800868c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008690:	d02b      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008696:	d820      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800869c:	d012      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800869e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a2:	d81a      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d022      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80086a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ac:	d115      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	3308      	adds	r3, #8
 80086b4:	2101      	movs	r1, #1
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 f878 	bl	800a7ac <RCCEx_PLL2_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80086c2:	e015      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c8:	3328      	adds	r3, #40	; 0x28
 80086ca:	2101      	movs	r1, #1
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 f91f 	bl	800a910 <RCCEx_PLL3_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80086d8:	e00a      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086e0:	e006      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086e2:	bf00      	nop
 80086e4:	e004      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086e6:	bf00      	nop
 80086e8:	e002      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086ea:	bf00      	nop
 80086ec:	e000      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10b      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80086f8:	4ba3      	ldr	r3, [pc, #652]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008708:	4a9f      	ldr	r2, [pc, #636]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800870a:	430b      	orrs	r3, r1
 800870c:	6593      	str	r3, [r2, #88]	; 0x58
 800870e:	e003      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800872e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008732:	460b      	mov	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	d037      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008742:	d00e      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008748:	d816      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d018      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800874e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008752:	d111      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008754:	4b8c      	ldr	r3, [pc, #560]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	4a8b      	ldr	r2, [pc, #556]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800875a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800875e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008760:	e00f      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008766:	3308      	adds	r3, #8
 8008768:	2101      	movs	r1, #1
 800876a:	4618      	mov	r0, r3
 800876c:	f002 f81e 	bl	800a7ac <RCCEx_PLL2_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008776:	e004      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800877e:	e000      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800878a:	4b7f      	ldr	r3, [pc, #508]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800878c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008798:	4a7b      	ldr	r2, [pc, #492]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800879a:	430b      	orrs	r3, r1
 800879c:	6513      	str	r3, [r2, #80]	; 0x50
 800879e:	e003      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80087b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4313      	orrs	r3, r2
 80087c6:	d039      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d81c      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	08008815 	.word	0x08008815
 80087dc:	080087e9 	.word	0x080087e9
 80087e0:	080087f7 	.word	0x080087f7
 80087e4:	08008815 	.word	0x08008815
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e8:	4b67      	ldr	r3, [pc, #412]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a66      	ldr	r2, [pc, #408]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80087f4:	e00f      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fa:	3308      	adds	r3, #8
 80087fc:	2102      	movs	r1, #2
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 ffd4 	bl	800a7ac <RCCEx_PLL2_Config>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800880a:	e004      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008812:	e000      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800881e:	4b5a      	ldr	r3, [pc, #360]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008822:	f023 0103 	bic.w	r1, r3, #3
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800882c:	4a56      	ldr	r2, [pc, #344]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800882e:	430b      	orrs	r3, r1
 8008830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008832:	e003      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800884c:	2300      	movs	r3, #0
 800884e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008852:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008856:	460b      	mov	r3, r1
 8008858:	4313      	orrs	r3, r2
 800885a:	f000 809f 	beq.w	800899c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800885e:	4b4b      	ldr	r3, [pc, #300]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a4a      	ldr	r2, [pc, #296]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008868:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800886a:	f7fa f9b7 	bl	8002bdc <HAL_GetTick>
 800886e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008872:	e00b      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008874:	f7fa f9b2 	bl	8002bdc <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b64      	cmp	r3, #100	; 0x64
 8008882:	d903      	bls.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800888a:	e005      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800888c:	4b3f      	ldr	r3, [pc, #252]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0ed      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800889c:	2b00      	cmp	r3, #0
 800889e:	d179      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80088a0:	4b39      	ldr	r3, [pc, #228]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088ac:	4053      	eors	r3, r2
 80088ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d015      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088b6:	4b34      	ldr	r3, [pc, #208]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088c2:	4b31      	ldr	r3, [pc, #196]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	4a30      	ldr	r2, [pc, #192]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088ce:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d2:	4a2d      	ldr	r2, [pc, #180]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80088da:	4a2b      	ldr	r2, [pc, #172]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ee:	d118      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f0:	f7fa f974 	bl	8002bdc <HAL_GetTick>
 80088f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088f8:	e00d      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088fa:	f7fa f96f 	bl	8002bdc <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008904:	1ad2      	subs	r2, r2, r3
 8008906:	f241 3388 	movw	r3, #5000	; 0x1388
 800890a:	429a      	cmp	r2, r3
 800890c:	d903      	bls.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008914:	e005      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008916:	4b1c      	ldr	r3, [pc, #112]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0eb      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008926:	2b00      	cmp	r3, #0
 8008928:	d129      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800893a:	d10e      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800893c:	4b12      	ldr	r3, [pc, #72]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008948:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800894c:	091a      	lsrs	r2, r3, #4
 800894e:	4b10      	ldr	r3, [pc, #64]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008950:	4013      	ands	r3, r2
 8008952:	4a0d      	ldr	r2, [pc, #52]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008954:	430b      	orrs	r3, r1
 8008956:	6113      	str	r3, [r2, #16]
 8008958:	e005      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800895a:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	4a0a      	ldr	r2, [pc, #40]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008960:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008964:	6113      	str	r3, [r2, #16]
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008968:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008976:	4a04      	ldr	r2, [pc, #16]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008978:	430b      	orrs	r3, r1
 800897a:	6713      	str	r3, [r2, #112]	; 0x70
 800897c:	e00e      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800897e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008986:	e009      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008988:	58024400 	.word	0x58024400
 800898c:	58024800 	.word	0x58024800
 8008990:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800899c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f002 0301 	and.w	r3, r2, #1
 80089a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089ac:	2300      	movs	r3, #0
 80089ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f000 8089 	beq.w	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c4:	2b28      	cmp	r3, #40	; 0x28
 80089c6:	d86b      	bhi.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80089c8:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	08008aa9 	.word	0x08008aa9
 80089d4:	08008aa1 	.word	0x08008aa1
 80089d8:	08008aa1 	.word	0x08008aa1
 80089dc:	08008aa1 	.word	0x08008aa1
 80089e0:	08008aa1 	.word	0x08008aa1
 80089e4:	08008aa1 	.word	0x08008aa1
 80089e8:	08008aa1 	.word	0x08008aa1
 80089ec:	08008aa1 	.word	0x08008aa1
 80089f0:	08008a75 	.word	0x08008a75
 80089f4:	08008aa1 	.word	0x08008aa1
 80089f8:	08008aa1 	.word	0x08008aa1
 80089fc:	08008aa1 	.word	0x08008aa1
 8008a00:	08008aa1 	.word	0x08008aa1
 8008a04:	08008aa1 	.word	0x08008aa1
 8008a08:	08008aa1 	.word	0x08008aa1
 8008a0c:	08008aa1 	.word	0x08008aa1
 8008a10:	08008a8b 	.word	0x08008a8b
 8008a14:	08008aa1 	.word	0x08008aa1
 8008a18:	08008aa1 	.word	0x08008aa1
 8008a1c:	08008aa1 	.word	0x08008aa1
 8008a20:	08008aa1 	.word	0x08008aa1
 8008a24:	08008aa1 	.word	0x08008aa1
 8008a28:	08008aa1 	.word	0x08008aa1
 8008a2c:	08008aa1 	.word	0x08008aa1
 8008a30:	08008aa9 	.word	0x08008aa9
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008aa1 	.word	0x08008aa1
 8008a40:	08008aa1 	.word	0x08008aa1
 8008a44:	08008aa1 	.word	0x08008aa1
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008aa9 	.word	0x08008aa9
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008aa1 	.word	0x08008aa1
 8008a5c:	08008aa1 	.word	0x08008aa1
 8008a60:	08008aa1 	.word	0x08008aa1
 8008a64:	08008aa1 	.word	0x08008aa1
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008aa9 	.word	0x08008aa9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a78:	3308      	adds	r3, #8
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 fe95 	bl	800a7ac <RCCEx_PLL2_Config>
 8008a82:	4603      	mov	r3, r0
 8008a84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a88:	e00f      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8e:	3328      	adds	r3, #40	; 0x28
 8008a90:	2101      	movs	r1, #1
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 ff3c 	bl	800a910 <RCCEx_PLL3_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a9e:	e004      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008aa6:	e000      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ab2:	4bbf      	ldr	r3, [pc, #764]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac0:	4abb      	ldr	r2, [pc, #748]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	6553      	str	r3, [r2, #84]	; 0x54
 8008ac6:	e003      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f002 0302 	and.w	r3, r2, #2
 8008adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ae6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008aea:	460b      	mov	r3, r1
 8008aec:	4313      	orrs	r3, r2
 8008aee:	d041      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008af6:	2b05      	cmp	r3, #5
 8008af8:	d824      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b19 	.word	0x08008b19
 8008b08:	08008b2f 	.word	0x08008b2f
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b4d 	.word	0x08008b4d
 8008b14:	08008b4d 	.word	0x08008b4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fe43 	bl	800a7ac <RCCEx_PLL2_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008b2c:	e00f      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b32:	3328      	adds	r3, #40	; 0x28
 8008b34:	2101      	movs	r1, #1
 8008b36:	4618      	mov	r0, r3
 8008b38:	f001 feea 	bl	800a910 <RCCEx_PLL3_Config>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008b42:	e004      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b56:	4b96      	ldr	r3, [pc, #600]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	f023 0107 	bic.w	r1, r3, #7
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b64:	4a92      	ldr	r2, [pc, #584]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b66:	430b      	orrs	r3, r1
 8008b68:	6553      	str	r3, [r2, #84]	; 0x54
 8008b6a:	e003      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f002 0304 	and.w	r3, r2, #4
 8008b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	d044      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b9c:	2b05      	cmp	r3, #5
 8008b9e:	d825      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bf5 	.word	0x08008bf5
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bd7 	.word	0x08008bd7
 8008bb4:	08008bf5 	.word	0x08008bf5
 8008bb8:	08008bf5 	.word	0x08008bf5
 8008bbc:	08008bf5 	.word	0x08008bf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f001 fdef 	bl	800a7ac <RCCEx_PLL2_Config>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008bd4:	e00f      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	3328      	adds	r3, #40	; 0x28
 8008bdc:	2101      	movs	r1, #1
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 fe96 	bl	800a910 <RCCEx_PLL3_Config>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008bea:	e004      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bf2:	e000      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10b      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bfe:	4b6c      	ldr	r3, [pc, #432]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c02:	f023 0107 	bic.w	r1, r3, #7
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c0e:	4a68      	ldr	r2, [pc, #416]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c10:	430b      	orrs	r3, r1
 8008c12:	6593      	str	r3, [r2, #88]	; 0x58
 8008c14:	e003      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f002 0320 	and.w	r3, r2, #32
 8008c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	d055      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c4a:	d033      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c50:	d82c      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c56:	d02f      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5c:	d826      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c62:	d02b      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008c64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c68:	d820      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c6e:	d012      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c74:	d81a      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d022      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c7e:	d115      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c84:	3308      	adds	r3, #8
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 fd8f 	bl	800a7ac <RCCEx_PLL2_Config>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008c94:	e015      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9a:	3328      	adds	r3, #40	; 0x28
 8008c9c:	2102      	movs	r1, #2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 fe36 	bl	800a910 <RCCEx_PLL3_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008caa:	e00a      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cb2:	e006      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cb4:	bf00      	nop
 8008cb6:	e004      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cb8:	bf00      	nop
 8008cba:	e002      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cbc:	bf00      	nop
 8008cbe:	e000      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cca:	4b39      	ldr	r3, [pc, #228]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cda:	4a35      	ldr	r2, [pc, #212]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	6553      	str	r3, [r2, #84]	; 0x54
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4313      	orrs	r3, r2
 8008d08:	d058      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d16:	d033      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008d18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d1c:	d82c      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d22:	d02f      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d28:	d826      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d2e:	d02b      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d34:	d820      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d3a:	d012      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d40:	d81a      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d022      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d4a:	d115      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	3308      	adds	r3, #8
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 fd29 	bl	800a7ac <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d60:	e015      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d66:	3328      	adds	r3, #40	; 0x28
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fdd0 	bl	800a910 <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d76:	e00a      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d7e:	e006      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d80:	bf00      	nop
 8008d82:	e004      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10e      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d96:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008da6:	4a02      	ldr	r2, [pc, #8]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6593      	str	r3, [r2, #88]	; 0x58
 8008dac:	e006      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	d055      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008de4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008de8:	d033      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008dea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008dee:	d82c      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008df4:	d02f      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dfa:	d826      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008dfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e00:	d02b      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008e02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e06:	d820      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e0c:	d012      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e12:	d81a      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d022      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e1c:	d115      	bne.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e22:	3308      	adds	r3, #8
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fcc0 	bl	800a7ac <RCCEx_PLL2_Config>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008e32:	e015      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e38:	3328      	adds	r3, #40	; 0x28
 8008e3a:	2102      	movs	r1, #2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 fd67 	bl	800a910 <RCCEx_PLL3_Config>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008e48:	e00a      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e50:	e006      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e52:	bf00      	nop
 8008e54:	e004      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e56:	bf00      	nop
 8008e58:	e002      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e5a:	bf00      	nop
 8008e5c:	e000      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10b      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e68:	4ba1      	ldr	r3, [pc, #644]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e78:	4a9d      	ldr	r2, [pc, #628]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e7e:	e003      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f002 0308 	and.w	r3, r2, #8
 8008e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	d01e      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eba:	3328      	adds	r3, #40	; 0x28
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fd26 	bl	800a910 <RCCEx_PLL3_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ed0:	4b87      	ldr	r3, [pc, #540]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ee0:	4a83      	ldr	r2, [pc, #524]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f002 0310 	and.w	r3, r2, #16
 8008ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008efc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008f00:	460b      	mov	r3, r1
 8008f02:	4313      	orrs	r3, r2
 8008f04:	d01e      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f12:	d10c      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f18:	3328      	adds	r3, #40	; 0x28
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fcf7 	bl	800a910 <RCCEx_PLL3_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f2e:	4b70      	ldr	r3, [pc, #448]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f3e:	4a6c      	ldr	r2, [pc, #432]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f40:	430b      	orrs	r3, r1
 8008f42:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d03e      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f70:	d022      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f76:	d81b      	bhi.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f80:	d00b      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008f82:	e015      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f88:	3308      	adds	r3, #8
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f001 fc0d 	bl	800a7ac <RCCEx_PLL2_Config>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008f98:	e00f      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f9e:	3328      	adds	r3, #40	; 0x28
 8008fa0:	2102      	movs	r1, #2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 fcb4 	bl	800a910 <RCCEx_PLL3_Config>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008fae:	e004      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fb6:	e000      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10b      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008fc2:	4b4b      	ldr	r3, [pc, #300]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fd2:	4a47      	ldr	r2, [pc, #284]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8008fd8:	e003      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ff4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	d03b      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009006:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800900a:	d01f      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800900c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009010:	d818      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009016:	d003      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800901c:	d007      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800901e:	e011      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009020:	4b33      	ldr	r3, [pc, #204]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	4a32      	ldr	r2, [pc, #200]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800902c:	e00f      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009032:	3328      	adds	r3, #40	; 0x28
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f001 fc6a 	bl	800a910 <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009042:	e004      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800904a:	e000      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800904c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10b      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009056:	4b26      	ldr	r3, [pc, #152]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009066:	4a22      	ldr	r2, [pc, #136]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009068:	430b      	orrs	r3, r1
 800906a:	6553      	str	r3, [r2, #84]	; 0x54
 800906c:	e003      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009082:	673b      	str	r3, [r7, #112]	; 0x70
 8009084:	2300      	movs	r3, #0
 8009086:	677b      	str	r3, [r7, #116]	; 0x74
 8009088:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800908c:	460b      	mov	r3, r1
 800908e:	4313      	orrs	r3, r2
 8009090:	d034      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a0:	d007      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80090a2:	e011      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a4:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	4a11      	ldr	r2, [pc, #68]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80090b0:	e00e      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b6:	3308      	adds	r3, #8
 80090b8:	2102      	movs	r1, #2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 fb76 	bl	800a7ac <RCCEx_PLL2_Config>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80090c6:	e003      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10d      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e6:	4a02      	ldr	r2, [pc, #8]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090e8:	430b      	orrs	r3, r1
 80090ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090ec:	e006      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80090ee:	bf00      	nop
 80090f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80090fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009108:	66bb      	str	r3, [r7, #104]	; 0x68
 800910a:	2300      	movs	r3, #0
 800910c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800910e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009112:	460b      	mov	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	d00c      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800911c:	3328      	adds	r3, #40	; 0x28
 800911e:	2102      	movs	r1, #2
 8009120:	4618      	mov	r0, r3
 8009122:	f001 fbf5 	bl	800a910 <RCCEx_PLL3_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800913e:	663b      	str	r3, [r7, #96]	; 0x60
 8009140:	2300      	movs	r3, #0
 8009142:	667b      	str	r3, [r7, #100]	; 0x64
 8009144:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009148:	460b      	mov	r3, r1
 800914a:	4313      	orrs	r3, r2
 800914c:	d038      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800914e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800915a:	d018      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800915c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009160:	d811      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009166:	d014      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800916c:	d80b      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800916e:	2b00      	cmp	r3, #0
 8009170:	d011      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009176:	d106      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009178:	4bc3      	ldr	r3, [pc, #780]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	4ac2      	ldr	r2, [pc, #776]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800917e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009184:	e008      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800918c:	e004      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800918e:	bf00      	nop
 8009190:	e002      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009192:	bf00      	nop
 8009194:	e000      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009198:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10b      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091a0:	4bb9      	ldr	r3, [pc, #740]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091b0:	4ab5      	ldr	r2, [pc, #724]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091b2:	430b      	orrs	r3, r1
 80091b4:	6553      	str	r3, [r2, #84]	; 0x54
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80091cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80091ce:	2300      	movs	r3, #0
 80091d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80091d6:	460b      	mov	r3, r1
 80091d8:	4313      	orrs	r3, r2
 80091da:	d009      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091dc:	4baa      	ldr	r3, [pc, #680]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ea:	4aa7      	ldr	r2, [pc, #668]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091ec:	430b      	orrs	r3, r1
 80091ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80091fc:	653b      	str	r3, [r7, #80]	; 0x50
 80091fe:	2300      	movs	r3, #0
 8009200:	657b      	str	r3, [r7, #84]	; 0x54
 8009202:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009206:	460b      	mov	r3, r1
 8009208:	4313      	orrs	r3, r2
 800920a:	d00a      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800920c:	4b9e      	ldr	r3, [pc, #632]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009218:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800921c:	4a9a      	ldr	r2, [pc, #616]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800921e:	430b      	orrs	r3, r1
 8009220:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800922e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009230:	2300      	movs	r3, #0
 8009232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009234:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009238:	460b      	mov	r3, r1
 800923a:	4313      	orrs	r3, r2
 800923c:	d009      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800923e:	4b92      	ldr	r3, [pc, #584]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009242:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800924c:	4a8e      	ldr	r2, [pc, #568]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800924e:	430b      	orrs	r3, r1
 8009250:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800925e:	643b      	str	r3, [r7, #64]	; 0x40
 8009260:	2300      	movs	r3, #0
 8009262:	647b      	str	r3, [r7, #68]	; 0x44
 8009264:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009268:	460b      	mov	r3, r1
 800926a:	4313      	orrs	r3, r2
 800926c:	d00e      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800926e:	4b86      	ldr	r3, [pc, #536]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	4a85      	ldr	r2, [pc, #532]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009274:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009278:	6113      	str	r3, [r2, #16]
 800927a:	4b83      	ldr	r3, [pc, #524]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800927c:	6919      	ldr	r1, [r3, #16]
 800927e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009282:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009286:	4a80      	ldr	r2, [pc, #512]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009288:	430b      	orrs	r3, r1
 800928a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800928c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
 800929a:	2300      	movs	r3, #0
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80092a2:	460b      	mov	r3, r1
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d009      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092a8:	4b77      	ldr	r3, [pc, #476]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b6:	4a74      	ldr	r2, [pc, #464]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092b8:	430b      	orrs	r3, r1
 80092ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30
 80092ca:	2300      	movs	r3, #0
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
 80092ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80092d2:	460b      	mov	r3, r1
 80092d4:	4313      	orrs	r3, r2
 80092d6:	d00a      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092d8:	4b6b      	ldr	r3, [pc, #428]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e8:	4a67      	ldr	r2, [pc, #412]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ea:	430b      	orrs	r3, r1
 80092ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	2100      	movs	r1, #0
 80092f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009300:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009304:	460b      	mov	r3, r1
 8009306:	4313      	orrs	r3, r2
 8009308:	d011      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930e:	3308      	adds	r3, #8
 8009310:	2100      	movs	r1, #0
 8009312:	4618      	mov	r0, r3
 8009314:	f001 fa4a 	bl	800a7ac <RCCEx_PLL2_Config>
 8009318:	4603      	mov	r3, r0
 800931a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800931e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800932a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	2100      	movs	r1, #0
 8009338:	6239      	str	r1, [r7, #32]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
 8009340:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009344:	460b      	mov	r3, r1
 8009346:	4313      	orrs	r3, r2
 8009348:	d011      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800934a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934e:	3308      	adds	r3, #8
 8009350:	2101      	movs	r1, #1
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fa2a 	bl	800a7ac <RCCEx_PLL2_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800935e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800936a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800936e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	2100      	movs	r1, #0
 8009378:	61b9      	str	r1, [r7, #24]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009384:	460b      	mov	r3, r1
 8009386:	4313      	orrs	r3, r2
 8009388:	d011      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800938a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938e:	3308      	adds	r3, #8
 8009390:	2102      	movs	r1, #2
 8009392:	4618      	mov	r0, r3
 8009394:	f001 fa0a 	bl	800a7ac <RCCEx_PLL2_Config>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800939e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	2100      	movs	r1, #0
 80093b8:	6139      	str	r1, [r7, #16]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80093c4:	460b      	mov	r3, r1
 80093c6:	4313      	orrs	r3, r2
 80093c8:	d011      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ce:	3328      	adds	r3, #40	; 0x28
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fa9c 	bl	800a910 <RCCEx_PLL3_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80093de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	2100      	movs	r1, #0
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	f003 0310 	and.w	r3, r3, #16
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009404:	460b      	mov	r3, r1
 8009406:	4313      	orrs	r3, r2
 8009408:	d011      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800940a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800940e:	3328      	adds	r3, #40	; 0x28
 8009410:	2101      	movs	r1, #1
 8009412:	4618      	mov	r0, r3
 8009414:	f001 fa7c 	bl	800a910 <RCCEx_PLL3_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800941e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800942a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800942e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	2100      	movs	r1, #0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	607b      	str	r3, [r7, #4]
 8009440:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009444:	460b      	mov	r3, r1
 8009446:	4313      	orrs	r3, r2
 8009448:	d011      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800944a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800944e:	3328      	adds	r3, #40	; 0x28
 8009450:	2102      	movs	r1, #2
 8009452:	4618      	mov	r0, r3
 8009454:	f001 fa5c 	bl	800a910 <RCCEx_PLL3_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800945e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800946a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800946e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	e000      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
}
 800947c:	4618      	mov	r0, r3
 800947e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009482:	46bd      	mov	sp, r7
 8009484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009488:	58024400 	.word	0x58024400

0800948c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b090      	sub	sp, #64	; 0x40
 8009490:	af00      	add	r7, sp, #0
 8009492:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800949e:	430b      	orrs	r3, r1
 80094a0:	f040 8094 	bne.w	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80094a4:	4b9e      	ldr	r3, [pc, #632]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	f200 8087 	bhi.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	080094f9 	.word	0x080094f9
 80094c4:	08009521 	.word	0x08009521
 80094c8:	080095bd 	.word	0x080095bd
 80094cc:	08009549 	.word	0x08009549
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094d0:	4b93      	ldr	r3, [pc, #588]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094dc:	d108      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f810 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ec:	f000 bd45 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f4:	f000 bd41 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094f8:	4b89      	ldr	r3, [pc, #548]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009504:	d108      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009506:	f107 0318 	add.w	r3, r7, #24
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fd54 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009514:	f000 bd31 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800951c:	f000 bd2d 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009520:	4b7f      	ldr	r3, [pc, #508]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952c:	d108      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800952e:	f107 030c 	add.w	r3, r7, #12
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fe94 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800953c:	f000 bd1d 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009544:	f000 bd19 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009548:	4b75      	ldr	r3, [pc, #468]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800954a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009550:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009552:	4b73      	ldr	r3, [pc, #460]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b04      	cmp	r3, #4
 800955c:	d10c      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009560:	2b00      	cmp	r3, #0
 8009562:	d109      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009564:	4b6e      	ldr	r3, [pc, #440]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	08db      	lsrs	r3, r3, #3
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	4a6d      	ldr	r2, [pc, #436]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009576:	e01f      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009578:	4b69      	ldr	r3, [pc, #420]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009584:	d106      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800958c:	d102      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800958e:	4b66      	ldr	r3, [pc, #408]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009592:	e011      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009594:	4b62      	ldr	r3, [pc, #392]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800959c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095a0:	d106      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80095a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a8:	d102      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095aa:	4b60      	ldr	r3, [pc, #384]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ae:	e003      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80095b4:	f000 bce1 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095b8:	f000 bcdf 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095bc:	4b5c      	ldr	r3, [pc, #368]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c0:	f000 bcdb 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c8:	f000 bcd7 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80095cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80095d4:	430b      	orrs	r3, r1
 80095d6:	f040 80ad 	bne.w	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80095da:	4b51      	ldr	r3, [pc, #324]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80095e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ea:	d056      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f2:	f200 8090 	bhi.w	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	2bc0      	cmp	r3, #192	; 0xc0
 80095fa:	f000 8088 	beq.w	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	2bc0      	cmp	r3, #192	; 0xc0
 8009602:	f200 8088 	bhi.w	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	2b80      	cmp	r3, #128	; 0x80
 800960a:	d032      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	f200 8081 	bhi.w	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	2b40      	cmp	r3, #64	; 0x40
 800961e:	d014      	beq.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009620:	e079      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009622:	4b3f      	ldr	r3, [pc, #252]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800962a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800962e:	d108      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009634:	4618      	mov	r0, r3
 8009636:	f000 ff67 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963e:	f000 bc9c 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009646:	f000 bc98 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800964a:	4b35      	ldr	r3, [pc, #212]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009656:	d108      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009658:	f107 0318 	add.w	r3, r7, #24
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fcab 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009666:	f000 bc88 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966e:	f000 bc84 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009672:	4b2b      	ldr	r3, [pc, #172]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800967a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800967e:	d108      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009680:	f107 030c 	add.w	r3, r7, #12
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fdeb 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800968e:	f000 bc74 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009696:	f000 bc70 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800969a:	4b21      	ldr	r3, [pc, #132]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800969c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800969e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d10c      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80096b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d109      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b6:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	08db      	lsrs	r3, r3, #3
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	4a18      	ldr	r2, [pc, #96]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80096c2:	fa22 f303 	lsr.w	r3, r2, r3
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c8:	e01f      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096ca:	4b15      	ldr	r3, [pc, #84]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d6:	d106      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80096d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096de:	d102      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e4:	e011      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096e6:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096f2:	d106      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fa:	d102      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80096fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009700:	e003      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009706:	f000 bc38 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800970a:	f000 bc36 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009712:	f000 bc32 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800971a:	f000 bc2e 	b.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800971e:	bf00      	nop
 8009720:	58024400 	.word	0x58024400
 8009724:	03d09000 	.word	0x03d09000
 8009728:	003d0900 	.word	0x003d0900
 800972c:	007a1200 	.word	0x007a1200
 8009730:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009738:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800973c:	430b      	orrs	r3, r1
 800973e:	f040 809c 	bne.w	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009742:	4b9e      	ldr	r3, [pc, #632]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009746:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800974a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009752:	d054      	beq.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800975a:	f200 808b 	bhi.w	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009764:	f000 8083 	beq.w	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800976e:	f200 8081 	bhi.w	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009778:	d02f      	beq.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009780:	d878      	bhi.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800978e:	d012      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009790:	e070      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009792:	4b8a      	ldr	r3, [pc, #552]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800979e:	d107      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 feaf 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ae:	e3e4      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b4:	e3e1      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097b6:	4b81      	ldr	r3, [pc, #516]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097c2:	d107      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097c4:	f107 0318 	add.w	r3, r7, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 fbf5 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097d2:	e3d2      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097d8:	e3cf      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097da:	4b78      	ldr	r3, [pc, #480]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e6:	d107      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fd37 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097f6:	e3c0      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097fc:	e3bd      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097fe:	4b6f      	ldr	r3, [pc, #444]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009806:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009808:	4b6c      	ldr	r3, [pc, #432]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b04      	cmp	r3, #4
 8009812:	d10c      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800981a:	4b68      	ldr	r3, [pc, #416]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	08db      	lsrs	r3, r3, #3
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	4a66      	ldr	r2, [pc, #408]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009826:	fa22 f303 	lsr.w	r3, r2, r3
 800982a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800982c:	e01e      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800982e:	4b63      	ldr	r3, [pc, #396]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983a:	d106      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800983c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009842:	d102      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009844:	4b5f      	ldr	r3, [pc, #380]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009848:	e010      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800984a:	4b5c      	ldr	r3, [pc, #368]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009856:	d106      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800985e:	d102      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009860:	4b59      	ldr	r3, [pc, #356]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009864:	e002      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800986a:	e386      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800986c:	e385      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800986e:	4b57      	ldr	r3, [pc, #348]	; (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009872:	e382      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009878:	e37f      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800987a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800987e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009882:	430b      	orrs	r3, r1
 8009884:	f040 80a7 	bne.w	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009888:	4b4c      	ldr	r3, [pc, #304]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800988a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009890:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009898:	d055      	beq.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098a0:	f200 8096 	bhi.w	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098aa:	f000 8084 	beq.w	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098b4:	f200 808c 	bhi.w	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098be:	d030      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098c6:	f200 8083 	bhi.w	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098d6:	d012      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80098d8:	e07a      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098da:	4b38      	ldr	r3, [pc, #224]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098e6:	d107      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fe0b 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098f6:	e340      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098fc:	e33d      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098fe:	4b2f      	ldr	r3, [pc, #188]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800990a:	d107      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990c:	f107 0318 	add.w	r3, r7, #24
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fb51 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800991a:	e32e      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009920:	e32b      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009922:	4b26      	ldr	r3, [pc, #152]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800992a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800992e:	d107      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fc93 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993e:	e31c      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009944:	e319      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009946:	4b1d      	ldr	r3, [pc, #116]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800994e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009950:	4b1a      	ldr	r3, [pc, #104]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b04      	cmp	r3, #4
 800995a:	d10c      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800995c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009962:	4b16      	ldr	r3, [pc, #88]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	08db      	lsrs	r3, r3, #3
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	4a14      	ldr	r2, [pc, #80]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800996e:	fa22 f303 	lsr.w	r3, r2, r3
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009974:	e01e      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009976:	4b11      	ldr	r3, [pc, #68]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009982:	d106      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800998a:	d102      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800998e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009990:	e010      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009992:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800999e:	d106      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80099a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a6:	d102      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099a8:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ac:	e002      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80099b2:	e2e2      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099b4:	e2e1      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80099b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ba:	e2de      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099bc:	58024400 	.word	0x58024400
 80099c0:	03d09000 	.word	0x03d09000
 80099c4:	003d0900 	.word	0x003d0900
 80099c8:	007a1200 	.word	0x007a1200
 80099cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099d4:	e2d1      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80099d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099da:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80099de:	430b      	orrs	r3, r1
 80099e0:	f040 809c 	bne.w	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80099e4:	4b93      	ldr	r3, [pc, #588]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80099ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099f4:	d054      	beq.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099fc:	f200 808b 	bhi.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a06:	f000 8083 	beq.w	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a10:	f200 8081 	bhi.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a1a:	d02f      	beq.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a22:	d878      	bhi.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a30:	d012      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009a32:	e070      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a34:	4b7f      	ldr	r3, [pc, #508]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a40:	d107      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fd5e 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a50:	e293      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a56:	e290      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a58:	4b76      	ldr	r3, [pc, #472]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a64:	d107      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a66:	f107 0318 	add.w	r3, r7, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 faa4 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a74:	e281      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a7a:	e27e      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a7c:	4b6d      	ldr	r3, [pc, #436]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a88:	d107      	bne.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fbe6 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a98:	e26f      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a9e:	e26c      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aa0:	4b64      	ldr	r3, [pc, #400]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009aa8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009aaa:	4b62      	ldr	r3, [pc, #392]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d10c      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d109      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009abc:	4b5d      	ldr	r3, [pc, #372]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	08db      	lsrs	r3, r3, #3
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	4a5c      	ldr	r2, [pc, #368]	; (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ace:	e01e      	b.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ad0:	4b58      	ldr	r3, [pc, #352]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009adc:	d106      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ae4:	d102      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ae6:	4b55      	ldr	r3, [pc, #340]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aea:	e010      	b.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aec:	4b51      	ldr	r3, [pc, #324]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af8:	d106      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b00:	d102      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b02:	4b4f      	ldr	r3, [pc, #316]	; (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b06:	e002      	b.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009b0c:	e235      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b0e:	e234      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b10:	4b4c      	ldr	r3, [pc, #304]	; (8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b14:	e231      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b1a:	e22e      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b20:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009b24:	430b      	orrs	r3, r1
 8009b26:	f040 808f 	bne.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009b2a:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009b32:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b3a:	d06b      	beq.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b42:	d874      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b4a:	d056      	beq.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b52:	d86c      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b5a:	d03b      	beq.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b62:	d864      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b6a:	d021      	beq.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b72:	d85c      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d004      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b80:	d004      	beq.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009b82:	e054      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009b84:	f7fe fa0a 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 8009b88:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b8a:	e1f6      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b8c:	4b29      	ldr	r3, [pc, #164]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b98:	d107      	bne.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b9a:	f107 0318 	add.w	r3, r7, #24
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fa0a 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ba8:	e1e7      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bae:	e1e4      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bb0:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bbc:	d107      	bne.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bbe:	f107 030c 	add.w	r3, r7, #12
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fb4c 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bcc:	e1d5      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bd2:	e1d2      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bd4:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d109      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009be0:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	08db      	lsrs	r3, r3, #3
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	4a13      	ldr	r2, [pc, #76]	; (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009bec:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bf2:	e1c2      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf8:	e1bf      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c06:	d102      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c0c:	e1b5      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c12:	e1b2      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c14:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c20:	d102      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c26:	e1a8      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c2c:	e1a5      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c32:	e1a2      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c34:	58024400 	.word	0x58024400
 8009c38:	03d09000 	.word	0x03d09000
 8009c3c:	003d0900 	.word	0x003d0900
 8009c40:	007a1200 	.word	0x007a1200
 8009c44:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c4c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009c50:	430b      	orrs	r3, r1
 8009c52:	d173      	bne.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009c54:	4b9c      	ldr	r3, [pc, #624]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c64:	d02f      	beq.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6c:	d863      	bhi.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7a:	d012      	beq.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009c7c:	e05b      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c7e:	4b92      	ldr	r3, [pc, #584]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c8a:	d107      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8c:	f107 0318 	add.w	r3, r7, #24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 f991 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c9a:	e16e      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca0:	e16b      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ca2:	4b89      	ldr	r3, [pc, #548]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cae:	d107      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb0:	f107 030c 	add.w	r3, r7, #12
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fad3 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbe:	e15c      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cc4:	e159      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cc6:	4b80      	ldr	r3, [pc, #512]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd0:	4b7d      	ldr	r3, [pc, #500]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d10c      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ce2:	4b79      	ldr	r3, [pc, #484]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	08db      	lsrs	r3, r3, #3
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	4a77      	ldr	r2, [pc, #476]	; (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009cee:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf4:	e01e      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cf6:	4b74      	ldr	r3, [pc, #464]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d02:	d106      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d0a:	d102      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d0c:	4b70      	ldr	r3, [pc, #448]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d10:	e010      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d12:	4b6d      	ldr	r3, [pc, #436]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d1e:	d106      	bne.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d26:	d102      	bne.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d28:	4b6a      	ldr	r3, [pc, #424]	; (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2c:	e002      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d32:	e122      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d34:	e121      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d3a:	e11e      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d40:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009d44:	430b      	orrs	r3, r1
 8009d46:	d133      	bne.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009d48:	4b5f      	ldr	r3, [pc, #380]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d5e:	d012      	beq.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009d60:	e023      	b.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d62:	4b59      	ldr	r3, [pc, #356]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d6e:	d107      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fbc7 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d7e:	e0fc      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d84:	e0f9      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d86:	4b50      	ldr	r3, [pc, #320]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d92:	d107      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d94:	f107 0318 	add.w	r3, r7, #24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f90d 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da2:	e0ea      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da8:	e0e7      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dae:	e0e4      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009db4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009db8:	430b      	orrs	r3, r1
 8009dba:	f040 808d 	bne.w	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009dbe:	4b42      	ldr	r3, [pc, #264]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009dc6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dce:	d06b      	beq.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dd6:	d874      	bhi.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dde:	d056      	beq.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de6:	d86c      	bhi.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dee:	d03b      	beq.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009df6:	d864      	bhi.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dfe:	d021      	beq.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e06:	d85c      	bhi.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e14:	d004      	beq.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009e16:	e054      	b.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009e18:	f000 f8b8 	bl	8009f8c <HAL_RCCEx_GetD3PCLK1Freq>
 8009e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009e1e:	e0ac      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e20:	4b29      	ldr	r3, [pc, #164]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e2c:	d107      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e2e:	f107 0318 	add.w	r3, r7, #24
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f8c0 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e3c:	e09d      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e42:	e09a      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e44:	4b20      	ldr	r3, [pc, #128]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e50:	d107      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fa02 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e60:	e08b      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e66:	e088      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e68:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d109      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e74:	4b14      	ldr	r3, [pc, #80]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	08db      	lsrs	r3, r3, #3
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	4a13      	ldr	r2, [pc, #76]	; (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009e80:	fa22 f303 	lsr.w	r3, r2, r3
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e86:	e078      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e8c:	e075      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9a:	d102      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009e9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ea0:	e06b      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ea6:	e068      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb4:	d102      	bne.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009eb6:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eba:	e05e      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec0:	e05b      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec6:	e058      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ec8:	58024400 	.word	0x58024400
 8009ecc:	03d09000 	.word	0x03d09000
 8009ed0:	003d0900 	.word	0x003d0900
 8009ed4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009edc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	d148      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ee4:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ef4:	d02a      	beq.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efc:	d838      	bhi.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f0a:	d00d      	beq.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009f0c:	e030      	b.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f0e:	4b1d      	ldr	r3, [pc, #116]	; (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f1a:	d102      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f20:	e02b      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f26:	e028      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f28:	4b16      	ldr	r3, [pc, #88]	; (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f34:	d107      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fae4 	bl	800a508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f44:	e019      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4a:	e016      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f4c:	4b0d      	ldr	r3, [pc, #52]	; (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f58:	d107      	bne.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f5a:	f107 0318 	add.w	r3, r7, #24
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f82a 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f68:	e007      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f6e:	e004      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f74:	e001      	b.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3740      	adds	r7, #64	; 0x40
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	58024400 	.word	0x58024400
 8009f88:	007a1200 	.word	0x007a1200

08009f8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009f90:	f7fd ffd4 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 8009f94:	4602      	mov	r2, r0
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	091b      	lsrs	r3, r3, #4
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	4904      	ldr	r1, [pc, #16]	; (8009fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009fa2:	5ccb      	ldrb	r3, [r1, r3]
 8009fa4:	f003 031f 	and.w	r3, r3, #31
 8009fa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	58024400 	.word	0x58024400
 8009fb4:	08015624 	.word	0x08015624

08009fb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b089      	sub	sp, #36	; 0x24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fc0:	4ba1      	ldr	r3, [pc, #644]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	f003 0303 	and.w	r3, r3, #3
 8009fc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009fca:	4b9f      	ldr	r3, [pc, #636]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	0b1b      	lsrs	r3, r3, #12
 8009fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009fd6:	4b9c      	ldr	r3, [pc, #624]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	091b      	lsrs	r3, r3, #4
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009fe2:	4b99      	ldr	r3, [pc, #612]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	08db      	lsrs	r3, r3, #3
 8009fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	fb02 f303 	mul.w	r3, r2, r3
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8111 	beq.w	800a228 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	f000 8083 	beq.w	800a114 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b02      	cmp	r3, #2
 800a012:	f200 80a1 	bhi.w	800a158 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d056      	beq.n	800a0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a022:	e099      	b.n	800a158 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a024:	4b88      	ldr	r3, [pc, #544]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d02d      	beq.n	800a08c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a030:	4b85      	ldr	r3, [pc, #532]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	08db      	lsrs	r3, r3, #3
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	4a84      	ldr	r2, [pc, #528]	; (800a24c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a03c:	fa22 f303 	lsr.w	r3, r2, r3
 800a040:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05a:	4b7b      	ldr	r3, [pc, #492]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a06e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a086:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a08a:	e087      	b.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a096:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09e:	4b6a      	ldr	r3, [pc, #424]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ce:	e065      	b.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e2:	4b59      	ldr	r3, [pc, #356]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a112:	e043      	b.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a126:	4b48      	ldr	r3, [pc, #288]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a136:	ed97 6a03 	vldr	s12, [r7, #12]
 800a13a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a156:	e021      	b.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16a:	4b37      	ldr	r3, [pc, #220]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a17e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a19a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a19c:	4b2a      	ldr	r3, [pc, #168]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	0a5b      	lsrs	r3, r3, #9
 800a1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c2:	ee17 2a90 	vmov	r2, s15
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a1ca:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d4:	ee07 3a90 	vmov	s15, r3
 800a1d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f0:	ee17 2a90 	vmov	r2, s15
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a1f8:	4b13      	ldr	r3, [pc, #76]	; (800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	0e1b      	lsrs	r3, r3, #24
 800a1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a20e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a212:	edd7 6a07 	vldr	s13, [r7, #28]
 800a216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a21a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21e:	ee17 2a90 	vmov	r2, s15
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a226:	e008      	b.n	800a23a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	609a      	str	r2, [r3, #8]
}
 800a23a:	bf00      	nop
 800a23c:	3724      	adds	r7, #36	; 0x24
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	58024400 	.word	0x58024400
 800a24c:	03d09000 	.word	0x03d09000
 800a250:	46000000 	.word	0x46000000
 800a254:	4c742400 	.word	0x4c742400
 800a258:	4a742400 	.word	0x4a742400
 800a25c:	4af42400 	.word	0x4af42400

0800a260 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a260:	b480      	push	{r7}
 800a262:	b089      	sub	sp, #36	; 0x24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a268:	4ba1      	ldr	r3, [pc, #644]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a272:	4b9f      	ldr	r3, [pc, #636]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a276:	0d1b      	lsrs	r3, r3, #20
 800a278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a27c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a27e:	4b9c      	ldr	r3, [pc, #624]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a28a:	4b99      	ldr	r3, [pc, #612]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28e:	08db      	lsrs	r3, r3, #3
 800a290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	fb02 f303 	mul.w	r3, r2, r3
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 8111 	beq.w	800a4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	f000 8083 	beq.w	800a3bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	f200 80a1 	bhi.w	800a400 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d003      	beq.n	800a2cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d056      	beq.n	800a378 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a2ca:	e099      	b.n	800a400 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2cc:	4b88      	ldr	r3, [pc, #544]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0320 	and.w	r3, r3, #32
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02d      	beq.n	800a334 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2d8:	4b85      	ldr	r3, [pc, #532]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	08db      	lsrs	r3, r3, #3
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	4a84      	ldr	r2, [pc, #528]	; (800a4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	ee07 3a90 	vmov	s15, r3
 800a2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30a:	ee07 3a90 	vmov	s15, r3
 800a30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a312:	ed97 6a03 	vldr	s12, [r7, #12]
 800a316:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a332:	e087      	b.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a346:	4b6a      	ldr	r3, [pc, #424]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34e:	ee07 3a90 	vmov	s15, r3
 800a352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a356:	ed97 6a03 	vldr	s12, [r7, #12]
 800a35a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a376:	e065      	b.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a382:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a38a:	4b59      	ldr	r3, [pc, #356]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a39e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ba:	e043      	b.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ce:	4b48      	ldr	r3, [pc, #288]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3fe:	e021      	b.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a412:	4b37      	ldr	r3, [pc, #220]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a422:	ed97 6a03 	vldr	s12, [r7, #12]
 800a426:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a442:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a444:	4b2a      	ldr	r3, [pc, #168]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a448:	0a5b      	lsrs	r3, r3, #9
 800a44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a45a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a45e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46a:	ee17 2a90 	vmov	r2, s15
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a472:	4b1f      	ldr	r3, [pc, #124]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	0c1b      	lsrs	r3, r3, #16
 800a478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47c:	ee07 3a90 	vmov	s15, r3
 800a480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a48c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a498:	ee17 2a90 	vmov	r2, s15
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a4a0:	4b13      	ldr	r3, [pc, #76]	; (800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	0e1b      	lsrs	r3, r3, #24
 800a4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c6:	ee17 2a90 	vmov	r2, s15
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a4ce:	e008      	b.n	800a4e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	609a      	str	r2, [r3, #8]
}
 800a4e2:	bf00      	nop
 800a4e4:	3724      	adds	r7, #36	; 0x24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	58024400 	.word	0x58024400
 800a4f4:	03d09000 	.word	0x03d09000
 800a4f8:	46000000 	.word	0x46000000
 800a4fc:	4c742400 	.word	0x4c742400
 800a500:	4a742400 	.word	0x4a742400
 800a504:	4af42400 	.word	0x4af42400

0800a508 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a508:	b480      	push	{r7}
 800a50a:	b089      	sub	sp, #36	; 0x24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a510:	4ba0      	ldr	r3, [pc, #640]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a51a:	4b9e      	ldr	r3, [pc, #632]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51e:	091b      	lsrs	r3, r3, #4
 800a520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a524:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a526:	4b9b      	ldr	r3, [pc, #620]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a530:	4b98      	ldr	r3, [pc, #608]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a534:	08db      	lsrs	r3, r3, #3
 800a536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a548:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 8111 	beq.w	800a776 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	2b02      	cmp	r3, #2
 800a558:	f000 8083 	beq.w	800a662 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	f200 80a1 	bhi.w	800a6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d056      	beq.n	800a61e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a570:	e099      	b.n	800a6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a572:	4b88      	ldr	r3, [pc, #544]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d02d      	beq.n	800a5da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a57e:	4b85      	ldr	r3, [pc, #532]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	08db      	lsrs	r3, r3, #3
 800a584:	f003 0303 	and.w	r3, r3, #3
 800a588:	4a83      	ldr	r2, [pc, #524]	; (800a798 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a58a:	fa22 f303 	lsr.w	r3, r2, r3
 800a58e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a8:	4b7a      	ldr	r3, [pc, #488]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a79c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a5d8:	e087      	b.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	ee07 3a90 	vmov	s15, r3
 800a5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a5e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ec:	4b69      	ldr	r3, [pc, #420]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a600:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a79c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a61c:	e065      	b.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	ee07 3a90 	vmov	s15, r3
 800a624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a628:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a62c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a630:	4b58      	ldr	r3, [pc, #352]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a638:	ee07 3a90 	vmov	s15, r3
 800a63c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a640:	ed97 6a03 	vldr	s12, [r7, #12]
 800a644:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a79c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a660:	e043      	b.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	ee07 3a90 	vmov	s15, r3
 800a668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a674:	4b47      	ldr	r3, [pc, #284]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67c:	ee07 3a90 	vmov	s15, r3
 800a680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a684:	ed97 6a03 	vldr	s12, [r7, #12]
 800a688:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a79c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a68c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6a4:	e021      	b.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	ee07 3a90 	vmov	s15, r3
 800a6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b8:	4b36      	ldr	r3, [pc, #216]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c0:	ee07 3a90 	vmov	s15, r3
 800a6c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a79c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a6ea:	4b2a      	ldr	r3, [pc, #168]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	0a5b      	lsrs	r3, r3, #9
 800a6f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a700:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a704:	edd7 6a07 	vldr	s13, [r7, #28]
 800a708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a70c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a710:	ee17 2a90 	vmov	r2, s15
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a718:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	0c1b      	lsrs	r3, r3, #16
 800a71e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a72e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a732:	edd7 6a07 	vldr	s13, [r7, #28]
 800a736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73e:	ee17 2a90 	vmov	r2, s15
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a746:	4b13      	ldr	r3, [pc, #76]	; (800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	0e1b      	lsrs	r3, r3, #24
 800a74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a750:	ee07 3a90 	vmov	s15, r3
 800a754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a75c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a760:	edd7 6a07 	vldr	s13, [r7, #28]
 800a764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a76c:	ee17 2a90 	vmov	r2, s15
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a774:	e008      	b.n	800a788 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	609a      	str	r2, [r3, #8]
}
 800a788:	bf00      	nop
 800a78a:	3724      	adds	r7, #36	; 0x24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	58024400 	.word	0x58024400
 800a798:	03d09000 	.word	0x03d09000
 800a79c:	46000000 	.word	0x46000000
 800a7a0:	4c742400 	.word	0x4c742400
 800a7a4:	4a742400 	.word	0x4a742400
 800a7a8:	4af42400 	.word	0x4af42400

0800a7ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7ba:	4b53      	ldr	r3, [pc, #332]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d101      	bne.n	800a7ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e099      	b.n	800a8fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a7ca:	4b4f      	ldr	r3, [pc, #316]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a4e      	ldr	r2, [pc, #312]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7d6:	f7f8 fa01 	bl	8002bdc <HAL_GetTick>
 800a7da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7dc:	e008      	b.n	800a7f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7de:	f7f8 f9fd 	bl	8002bdc <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d901      	bls.n	800a7f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e086      	b.n	800a8fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7f0:	4b45      	ldr	r3, [pc, #276]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f0      	bne.n	800a7de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a7fc:	4b42      	ldr	r3, [pc, #264]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	031b      	lsls	r3, r3, #12
 800a80a:	493f      	ldr	r1, [pc, #252]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	628b      	str	r3, [r1, #40]	; 0x28
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	3b01      	subs	r3, #1
 800a816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	3b01      	subs	r3, #1
 800a820:	025b      	lsls	r3, r3, #9
 800a822:	b29b      	uxth	r3, r3
 800a824:	431a      	orrs	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	041b      	lsls	r3, r3, #16
 800a82e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a832:	431a      	orrs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	3b01      	subs	r3, #1
 800a83a:	061b      	lsls	r3, r3, #24
 800a83c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a840:	4931      	ldr	r1, [pc, #196]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a842:	4313      	orrs	r3, r2
 800a844:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a846:	4b30      	ldr	r3, [pc, #192]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	492d      	ldr	r1, [pc, #180]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a854:	4313      	orrs	r3, r2
 800a856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a858:	4b2b      	ldr	r3, [pc, #172]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	f023 0220 	bic.w	r2, r3, #32
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	4928      	ldr	r1, [pc, #160]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a866:	4313      	orrs	r3, r2
 800a868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a86a:	4b27      	ldr	r3, [pc, #156]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86e:	4a26      	ldr	r2, [pc, #152]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a870:	f023 0310 	bic.w	r3, r3, #16
 800a874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a876:	4b24      	ldr	r3, [pc, #144]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a87a:	4b24      	ldr	r3, [pc, #144]	; (800a90c <RCCEx_PLL2_Config+0x160>)
 800a87c:	4013      	ands	r3, r2
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	69d2      	ldr	r2, [r2, #28]
 800a882:	00d2      	lsls	r2, r2, #3
 800a884:	4920      	ldr	r1, [pc, #128]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a886:	4313      	orrs	r3, r2
 800a888:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a88a:	4b1f      	ldr	r3, [pc, #124]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88e:	4a1e      	ldr	r2, [pc, #120]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a890:	f043 0310 	orr.w	r3, r3, #16
 800a894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d106      	bne.n	800a8aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a89c:	4b1a      	ldr	r3, [pc, #104]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a0:	4a19      	ldr	r2, [pc, #100]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8a8:	e00f      	b.n	800a8ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d106      	bne.n	800a8be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a8b0:	4b15      	ldr	r3, [pc, #84]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	4a14      	ldr	r2, [pc, #80]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8bc:	e005      	b.n	800a8ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c2:	4a11      	ldr	r2, [pc, #68]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a8ca:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a0e      	ldr	r2, [pc, #56]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8d6:	f7f8 f981 	bl	8002bdc <HAL_GetTick>
 800a8da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8dc:	e008      	b.n	800a8f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8de:	f7f8 f97d 	bl	8002bdc <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d901      	bls.n	800a8f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e006      	b.n	800a8fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8f0:	4b05      	ldr	r3, [pc, #20]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0f0      	beq.n	800a8de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	58024400 	.word	0x58024400
 800a90c:	ffff0007 	.word	0xffff0007

0800a910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a91e:	4b53      	ldr	r3, [pc, #332]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	f003 0303 	and.w	r3, r3, #3
 800a926:	2b03      	cmp	r3, #3
 800a928:	d101      	bne.n	800a92e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e099      	b.n	800aa62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a92e:	4b4f      	ldr	r3, [pc, #316]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a4e      	ldr	r2, [pc, #312]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a93a:	f7f8 f94f 	bl	8002bdc <HAL_GetTick>
 800a93e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a940:	e008      	b.n	800a954 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a942:	f7f8 f94b 	bl	8002bdc <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d901      	bls.n	800a954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e086      	b.n	800aa62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a954:	4b45      	ldr	r3, [pc, #276]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1f0      	bne.n	800a942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a960:	4b42      	ldr	r3, [pc, #264]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	051b      	lsls	r3, r3, #20
 800a96e:	493f      	ldr	r1, [pc, #252]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a970:	4313      	orrs	r3, r2
 800a972:	628b      	str	r3, [r1, #40]	; 0x28
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	3b01      	subs	r3, #1
 800a97a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	025b      	lsls	r3, r3, #9
 800a986:	b29b      	uxth	r3, r3
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	3b01      	subs	r3, #1
 800a990:	041b      	lsls	r3, r3, #16
 800a992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	061b      	lsls	r3, r3, #24
 800a9a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a9a4:	4931      	ldr	r1, [pc, #196]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a9aa:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	492d      	ldr	r1, [pc, #180]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a9bc:	4b2b      	ldr	r3, [pc, #172]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	4928      	ldr	r1, [pc, #160]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a9ce:	4b27      	ldr	r3, [pc, #156]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	4a26      	ldr	r2, [pc, #152]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a9da:	4b24      	ldr	r3, [pc, #144]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9de:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <RCCEx_PLL3_Config+0x160>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	69d2      	ldr	r2, [r2, #28]
 800a9e6:	00d2      	lsls	r2, r2, #3
 800a9e8:	4920      	ldr	r1, [pc, #128]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a9ee:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	4a1e      	ldr	r2, [pc, #120]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aa00:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	4a19      	ldr	r2, [pc, #100]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa0c:	e00f      	b.n	800aa2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d106      	bne.n	800aa22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa14:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	4a14      	ldr	r2, [pc, #80]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa20:	e005      	b.n	800aa2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa22:	4b12      	ldr	r3, [pc, #72]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	4a11      	ldr	r2, [pc, #68]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a0e      	ldr	r2, [pc, #56]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa3a:	f7f8 f8cf 	bl	8002bdc <HAL_GetTick>
 800aa3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa40:	e008      	b.n	800aa54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa42:	f7f8 f8cb 	bl	8002bdc <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d901      	bls.n	800aa54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e006      	b.n	800aa62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0f0      	beq.n	800aa42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	ffff0007 	.word	0xffff0007

0800aa74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e049      	b.n	800ab1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d106      	bne.n	800aaa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7f7 fc1c 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f000 fec6 	bl	800b844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d001      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e054      	b.n	800abe6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a26      	ldr	r2, [pc, #152]	; (800abf4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d022      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab66:	d01d      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a22      	ldr	r2, [pc, #136]	; (800abf8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d018      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a21      	ldr	r2, [pc, #132]	; (800abfc <HAL_TIM_Base_Start_IT+0xd8>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d013      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a1f      	ldr	r2, [pc, #124]	; (800ac00 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00e      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a1e      	ldr	r2, [pc, #120]	; (800ac04 <HAL_TIM_Base_Start_IT+0xe0>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d009      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a1c      	ldr	r2, [pc, #112]	; (800ac08 <HAL_TIM_Base_Start_IT+0xe4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d004      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x80>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a1b      	ldr	r2, [pc, #108]	; (800ac0c <HAL_TIM_Base_Start_IT+0xe8>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d115      	bne.n	800abd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	4b19      	ldr	r3, [pc, #100]	; (800ac10 <HAL_TIM_Base_Start_IT+0xec>)
 800abac:	4013      	ands	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b06      	cmp	r3, #6
 800abb4:	d015      	beq.n	800abe2 <HAL_TIM_Base_Start_IT+0xbe>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abbc:	d011      	beq.n	800abe2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f042 0201 	orr.w	r2, r2, #1
 800abcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abce:	e008      	b.n	800abe2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f042 0201 	orr.w	r2, r2, #1
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	e000      	b.n	800abe4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	40010000 	.word	0x40010000
 800abf8:	40000400 	.word	0x40000400
 800abfc:	40000800 	.word	0x40000800
 800ac00:	40000c00 	.word	0x40000c00
 800ac04:	40010400 	.word	0x40010400
 800ac08:	40001800 	.word	0x40001800
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	00010007 	.word	0x00010007

0800ac14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e049      	b.n	800acba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f841 	bl	800acc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f000 fdf6 	bl	800b844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800acca:	bf00      	nop
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d109      	bne.n	800acfc <HAL_TIM_PWM_Start+0x24>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	bf14      	ite	ne
 800acf4:	2301      	movne	r3, #1
 800acf6:	2300      	moveq	r3, #0
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	e03c      	b.n	800ad76 <HAL_TIM_PWM_Start+0x9e>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d109      	bne.n	800ad16 <HAL_TIM_PWM_Start+0x3e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	bf14      	ite	ne
 800ad0e:	2301      	movne	r3, #1
 800ad10:	2300      	moveq	r3, #0
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	e02f      	b.n	800ad76 <HAL_TIM_PWM_Start+0x9e>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	d109      	bne.n	800ad30 <HAL_TIM_PWM_Start+0x58>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	bf14      	ite	ne
 800ad28:	2301      	movne	r3, #1
 800ad2a:	2300      	moveq	r3, #0
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	e022      	b.n	800ad76 <HAL_TIM_PWM_Start+0x9e>
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b0c      	cmp	r3, #12
 800ad34:	d109      	bne.n	800ad4a <HAL_TIM_PWM_Start+0x72>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	bf14      	ite	ne
 800ad42:	2301      	movne	r3, #1
 800ad44:	2300      	moveq	r3, #0
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	e015      	b.n	800ad76 <HAL_TIM_PWM_Start+0x9e>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d109      	bne.n	800ad64 <HAL_TIM_PWM_Start+0x8c>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	bf14      	ite	ne
 800ad5c:	2301      	movne	r3, #1
 800ad5e:	2300      	moveq	r3, #0
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	e008      	b.n	800ad76 <HAL_TIM_PWM_Start+0x9e>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	bf14      	ite	ne
 800ad70:	2301      	movne	r3, #1
 800ad72:	2300      	moveq	r3, #0
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e0a1      	b.n	800aec2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <HAL_TIM_PWM_Start+0xb6>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad8c:	e023      	b.n	800add6 <HAL_TIM_PWM_Start+0xfe>
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b04      	cmp	r3, #4
 800ad92:	d104      	bne.n	800ad9e <HAL_TIM_PWM_Start+0xc6>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad9c:	e01b      	b.n	800add6 <HAL_TIM_PWM_Start+0xfe>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d104      	bne.n	800adae <HAL_TIM_PWM_Start+0xd6>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adac:	e013      	b.n	800add6 <HAL_TIM_PWM_Start+0xfe>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b0c      	cmp	r3, #12
 800adb2:	d104      	bne.n	800adbe <HAL_TIM_PWM_Start+0xe6>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2202      	movs	r2, #2
 800adb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adbc:	e00b      	b.n	800add6 <HAL_TIM_PWM_Start+0xfe>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b10      	cmp	r3, #16
 800adc2:	d104      	bne.n	800adce <HAL_TIM_PWM_Start+0xf6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adcc:	e003      	b.n	800add6 <HAL_TIM_PWM_Start+0xfe>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2202      	movs	r2, #2
 800add2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2201      	movs	r2, #1
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 f93e 	bl	800c060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a38      	ldr	r2, [pc, #224]	; (800aecc <HAL_TIM_PWM_Start+0x1f4>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d013      	beq.n	800ae16 <HAL_TIM_PWM_Start+0x13e>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a37      	ldr	r2, [pc, #220]	; (800aed0 <HAL_TIM_PWM_Start+0x1f8>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00e      	beq.n	800ae16 <HAL_TIM_PWM_Start+0x13e>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a35      	ldr	r2, [pc, #212]	; (800aed4 <HAL_TIM_PWM_Start+0x1fc>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d009      	beq.n	800ae16 <HAL_TIM_PWM_Start+0x13e>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a34      	ldr	r2, [pc, #208]	; (800aed8 <HAL_TIM_PWM_Start+0x200>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d004      	beq.n	800ae16 <HAL_TIM_PWM_Start+0x13e>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a32      	ldr	r2, [pc, #200]	; (800aedc <HAL_TIM_PWM_Start+0x204>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d101      	bne.n	800ae1a <HAL_TIM_PWM_Start+0x142>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <HAL_TIM_PWM_Start+0x144>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d007      	beq.n	800ae30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a25      	ldr	r2, [pc, #148]	; (800aecc <HAL_TIM_PWM_Start+0x1f4>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d022      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae42:	d01d      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a25      	ldr	r2, [pc, #148]	; (800aee0 <HAL_TIM_PWM_Start+0x208>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d018      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a24      	ldr	r2, [pc, #144]	; (800aee4 <HAL_TIM_PWM_Start+0x20c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d013      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a22      	ldr	r2, [pc, #136]	; (800aee8 <HAL_TIM_PWM_Start+0x210>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d00e      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a1a      	ldr	r2, [pc, #104]	; (800aed0 <HAL_TIM_PWM_Start+0x1f8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d009      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a1e      	ldr	r2, [pc, #120]	; (800aeec <HAL_TIM_PWM_Start+0x214>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d004      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x1a8>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a16      	ldr	r2, [pc, #88]	; (800aed4 <HAL_TIM_PWM_Start+0x1fc>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d115      	bne.n	800aeac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689a      	ldr	r2, [r3, #8]
 800ae86:	4b1a      	ldr	r3, [pc, #104]	; (800aef0 <HAL_TIM_PWM_Start+0x218>)
 800ae88:	4013      	ands	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b06      	cmp	r3, #6
 800ae90:	d015      	beq.n	800aebe <HAL_TIM_PWM_Start+0x1e6>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae98:	d011      	beq.n	800aebe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f042 0201 	orr.w	r2, r2, #1
 800aea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeaa:	e008      	b.n	800aebe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0201 	orr.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e000      	b.n	800aec0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	40010000 	.word	0x40010000
 800aed0:	40010400 	.word	0x40010400
 800aed4:	40014000 	.word	0x40014000
 800aed8:	40014400 	.word	0x40014400
 800aedc:	40014800 	.word	0x40014800
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40001800 	.word	0x40001800
 800aef0:	00010007 	.word	0x00010007

0800aef4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e08f      	b.n	800b028 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b00      	cmp	r3, #0
 800af12:	d106      	bne.n	800af22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7f7 fa2f 	bl	8002380 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2202      	movs	r2, #2
 800af26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6899      	ldr	r1, [r3, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b3e      	ldr	r3, [pc, #248]	; (800b030 <HAL_TIM_Encoder_Init+0x13c>)
 800af36:	400b      	ands	r3, r1
 800af38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	3304      	adds	r3, #4
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f000 fc7d 	bl	800b844 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	4313      	orrs	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4b31      	ldr	r3, [pc, #196]	; (800b034 <HAL_TIM_Encoder_Init+0x140>)
 800af70:	4013      	ands	r3, r2
 800af72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	4313      	orrs	r3, r2
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	4313      	orrs	r3, r2
 800af84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4b2b      	ldr	r3, [pc, #172]	; (800b038 <HAL_TIM_Encoder_Init+0x144>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	4b2a      	ldr	r3, [pc, #168]	; (800b03c <HAL_TIM_Encoder_Init+0x148>)
 800af92:	4013      	ands	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	4313      	orrs	r3, r2
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	011a      	lsls	r2, r3, #4
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	031b      	lsls	r3, r3, #12
 800afb4:	4313      	orrs	r3, r2
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	4313      	orrs	r3, r2
 800afba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800afc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800afca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	011b      	lsls	r3, r3, #4
 800afd6:	4313      	orrs	r3, r2
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	fffebff8 	.word	0xfffebff8
 800b034:	fffffcfc 	.word	0xfffffcfc
 800b038:	fffff3f3 	.word	0xfffff3f3
 800b03c:	ffff0f0f 	.word	0xffff0f0f

0800b040 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b050:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b058:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b060:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b068:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d110      	bne.n	800b092 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d102      	bne.n	800b07c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b076:	7b7b      	ldrb	r3, [r7, #13]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d001      	beq.n	800b080 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e089      	b.n	800b194 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b090:	e031      	b.n	800b0f6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2b04      	cmp	r3, #4
 800b096:	d110      	bne.n	800b0ba <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d102      	bne.n	800b0a4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b09e:	7b3b      	ldrb	r3, [r7, #12]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d001      	beq.n	800b0a8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e075      	b.n	800b194 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b8:	e01d      	b.n	800b0f6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d108      	bne.n	800b0d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d105      	bne.n	800b0d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0c6:	7b7b      	ldrb	r3, [r7, #13]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d102      	bne.n	800b0d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0cc:	7b3b      	ldrb	r3, [r7, #12]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d001      	beq.n	800b0d6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e05e      	b.n	800b194 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2202      	movs	r2, #2
 800b0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <HAL_TIM_Encoder_Start_IT+0xc4>
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b04      	cmp	r3, #4
 800b100:	d010      	beq.n	800b124 <HAL_TIM_Encoder_Start_IT+0xe4>
 800b102:	e01f      	b.n	800b144 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2201      	movs	r2, #1
 800b10a:	2100      	movs	r1, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 ffa7 	bl	800c060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f042 0202 	orr.w	r2, r2, #2
 800b120:	60da      	str	r2, [r3, #12]
      break;
 800b122:	e02e      	b.n	800b182 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2201      	movs	r2, #1
 800b12a:	2104      	movs	r1, #4
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 ff97 	bl	800c060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68da      	ldr	r2, [r3, #12]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f042 0204 	orr.w	r2, r2, #4
 800b140:	60da      	str	r2, [r3, #12]
      break;
 800b142:	e01e      	b.n	800b182 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2201      	movs	r2, #1
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 ff87 	bl	800c060 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2201      	movs	r2, #1
 800b158:	2104      	movs	r1, #4
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 ff80 	bl	800c060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f042 0202 	orr.w	r2, r2, #2
 800b16e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68da      	ldr	r2, [r3, #12]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f042 0204 	orr.w	r2, r2, #4
 800b17e:	60da      	str	r2, [r3, #12]
      break;
 800b180:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f042 0201 	orr.w	r2, r2, #1
 800b190:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0302 	and.w	r3, r3, #2
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d122      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d11b      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f06f 0202 	mvn.w	r2, #2
 800b1c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fb12 	bl	800b808 <HAL_TIM_IC_CaptureCallback>
 800b1e4:	e005      	b.n	800b1f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb04 	bl	800b7f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fb15 	bl	800b81c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b04      	cmp	r3, #4
 800b204:	d122      	bne.n	800b24c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b04      	cmp	r3, #4
 800b212:	d11b      	bne.n	800b24c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0204 	mvn.w	r2, #4
 800b21c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2202      	movs	r2, #2
 800b222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fae8 	bl	800b808 <HAL_TIM_IC_CaptureCallback>
 800b238:	e005      	b.n	800b246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fada 	bl	800b7f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 faeb 	bl	800b81c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0308 	and.w	r3, r3, #8
 800b256:	2b08      	cmp	r3, #8
 800b258:	d122      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0308 	and.w	r3, r3, #8
 800b264:	2b08      	cmp	r3, #8
 800b266:	d11b      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f06f 0208 	mvn.w	r2, #8
 800b270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2204      	movs	r2, #4
 800b276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fabe 	bl	800b808 <HAL_TIM_IC_CaptureCallback>
 800b28c:	e005      	b.n	800b29a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fab0 	bl	800b7f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fac1 	bl	800b81c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0310 	and.w	r3, r3, #16
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	d122      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0310 	and.w	r3, r3, #16
 800b2b8:	2b10      	cmp	r3, #16
 800b2ba:	d11b      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0210 	mvn.w	r2, #16
 800b2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2208      	movs	r2, #8
 800b2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa94 	bl	800b808 <HAL_TIM_IC_CaptureCallback>
 800b2e0:	e005      	b.n	800b2ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fa86 	bl	800b7f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fa97 	bl	800b81c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d10e      	bne.n	800b320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d107      	bne.n	800b320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0201 	mvn.w	r2, #1
 800b318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7f6 ff1a 	bl	8002154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32a:	2b80      	cmp	r3, #128	; 0x80
 800b32c:	d10e      	bne.n	800b34c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b338:	2b80      	cmp	r3, #128	; 0x80
 800b33a:	d107      	bne.n	800b34c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 ff48 	bl	800c1dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35a:	d10e      	bne.n	800b37a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b366:	2b80      	cmp	r3, #128	; 0x80
 800b368:	d107      	bne.n	800b37a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 ff3b 	bl	800c1f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b384:	2b40      	cmp	r3, #64	; 0x40
 800b386:	d10e      	bne.n	800b3a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b392:	2b40      	cmp	r3, #64	; 0x40
 800b394:	d107      	bne.n	800b3a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fa45 	bl	800b830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	f003 0320 	and.w	r3, r3, #32
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	d10e      	bne.n	800b3d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	f003 0320 	and.w	r3, r3, #32
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	d107      	bne.n	800b3d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f06f 0220 	mvn.w	r2, #32
 800b3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fefb 	bl	800c1c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d101      	bne.n	800b3fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e0ff      	b.n	800b5fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b14      	cmp	r3, #20
 800b406:	f200 80f0 	bhi.w	800b5ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b40a:	a201      	add	r2, pc, #4	; (adr r2, 800b410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b410:	0800b465 	.word	0x0800b465
 800b414:	0800b5eb 	.word	0x0800b5eb
 800b418:	0800b5eb 	.word	0x0800b5eb
 800b41c:	0800b5eb 	.word	0x0800b5eb
 800b420:	0800b4a5 	.word	0x0800b4a5
 800b424:	0800b5eb 	.word	0x0800b5eb
 800b428:	0800b5eb 	.word	0x0800b5eb
 800b42c:	0800b5eb 	.word	0x0800b5eb
 800b430:	0800b4e7 	.word	0x0800b4e7
 800b434:	0800b5eb 	.word	0x0800b5eb
 800b438:	0800b5eb 	.word	0x0800b5eb
 800b43c:	0800b5eb 	.word	0x0800b5eb
 800b440:	0800b527 	.word	0x0800b527
 800b444:	0800b5eb 	.word	0x0800b5eb
 800b448:	0800b5eb 	.word	0x0800b5eb
 800b44c:	0800b5eb 	.word	0x0800b5eb
 800b450:	0800b569 	.word	0x0800b569
 800b454:	0800b5eb 	.word	0x0800b5eb
 800b458:	0800b5eb 	.word	0x0800b5eb
 800b45c:	0800b5eb 	.word	0x0800b5eb
 800b460:	0800b5a9 	.word	0x0800b5a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68b9      	ldr	r1, [r7, #8]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fa84 	bl	800b978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f042 0208 	orr.w	r2, r2, #8
 800b47e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0204 	bic.w	r2, r2, #4
 800b48e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6999      	ldr	r1, [r3, #24]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	691a      	ldr	r2, [r3, #16]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	619a      	str	r2, [r3, #24]
      break;
 800b4a2:	e0a5      	b.n	800b5f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68b9      	ldr	r1, [r7, #8]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 faf4 	bl	800ba98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	699a      	ldr	r2, [r3, #24]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6999      	ldr	r1, [r3, #24]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	021a      	lsls	r2, r3, #8
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	619a      	str	r2, [r3, #24]
      break;
 800b4e4:	e084      	b.n	800b5f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68b9      	ldr	r1, [r7, #8]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fb5d 	bl	800bbac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	69da      	ldr	r2, [r3, #28]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f042 0208 	orr.w	r2, r2, #8
 800b500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69da      	ldr	r2, [r3, #28]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f022 0204 	bic.w	r2, r2, #4
 800b510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69d9      	ldr	r1, [r3, #28]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	61da      	str	r2, [r3, #28]
      break;
 800b524:	e064      	b.n	800b5f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68b9      	ldr	r1, [r7, #8]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fbc5 	bl	800bcbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	69da      	ldr	r2, [r3, #28]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69da      	ldr	r2, [r3, #28]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	69d9      	ldr	r1, [r3, #28]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	021a      	lsls	r2, r3, #8
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	430a      	orrs	r2, r1
 800b564:	61da      	str	r2, [r3, #28]
      break;
 800b566:	e043      	b.n	800b5f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fc0e 	bl	800bd90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0208 	orr.w	r2, r2, #8
 800b582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0204 	bic.w	r2, r2, #4
 800b592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	691a      	ldr	r2, [r3, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5a6:	e023      	b.n	800b5f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fc52 	bl	800be58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	021a      	lsls	r2, r3, #8
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5e8:	e002      	b.n	800b5f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop

0800b604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d101      	bne.n	800b620 <HAL_TIM_ConfigClockSource+0x1c>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e0dc      	b.n	800b7da <HAL_TIM_ConfigClockSource+0x1d6>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2202      	movs	r2, #2
 800b62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	4b6a      	ldr	r3, [pc, #424]	; (800b7e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a64      	ldr	r2, [pc, #400]	; (800b7e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b656:	4293      	cmp	r3, r2
 800b658:	f000 80a9 	beq.w	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b65c:	4a62      	ldr	r2, [pc, #392]	; (800b7e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	f200 80ae 	bhi.w	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b664:	4a61      	ldr	r2, [pc, #388]	; (800b7ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800b666:	4293      	cmp	r3, r2
 800b668:	f000 80a1 	beq.w	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b66c:	4a5f      	ldr	r2, [pc, #380]	; (800b7ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	f200 80a6 	bhi.w	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b674:	4a5e      	ldr	r2, [pc, #376]	; (800b7f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b676:	4293      	cmp	r3, r2
 800b678:	f000 8099 	beq.w	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b67c:	4a5c      	ldr	r2, [pc, #368]	; (800b7f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	f200 809e 	bhi.w	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b684:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b688:	f000 8091 	beq.w	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b68c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b690:	f200 8096 	bhi.w	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b698:	f000 8089 	beq.w	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6a0:	f200 808e 	bhi.w	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a8:	d03e      	beq.n	800b728 <HAL_TIM_ConfigClockSource+0x124>
 800b6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ae:	f200 8087 	bhi.w	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b6:	f000 8086 	beq.w	800b7c6 <HAL_TIM_ConfigClockSource+0x1c2>
 800b6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6be:	d87f      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6c0:	2b70      	cmp	r3, #112	; 0x70
 800b6c2:	d01a      	beq.n	800b6fa <HAL_TIM_ConfigClockSource+0xf6>
 800b6c4:	2b70      	cmp	r3, #112	; 0x70
 800b6c6:	d87b      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6c8:	2b60      	cmp	r3, #96	; 0x60
 800b6ca:	d050      	beq.n	800b76e <HAL_TIM_ConfigClockSource+0x16a>
 800b6cc:	2b60      	cmp	r3, #96	; 0x60
 800b6ce:	d877      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6d0:	2b50      	cmp	r3, #80	; 0x50
 800b6d2:	d03c      	beq.n	800b74e <HAL_TIM_ConfigClockSource+0x14a>
 800b6d4:	2b50      	cmp	r3, #80	; 0x50
 800b6d6:	d873      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6d8:	2b40      	cmp	r3, #64	; 0x40
 800b6da:	d058      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0x18a>
 800b6dc:	2b40      	cmp	r3, #64	; 0x40
 800b6de:	d86f      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6e0:	2b30      	cmp	r3, #48	; 0x30
 800b6e2:	d064      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b6e4:	2b30      	cmp	r3, #48	; 0x30
 800b6e6:	d86b      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6e8:	2b20      	cmp	r3, #32
 800b6ea:	d060      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b6ec:	2b20      	cmp	r3, #32
 800b6ee:	d867      	bhi.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d05c      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b6f4:	2b10      	cmp	r3, #16
 800b6f6:	d05a      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b6f8:	e062      	b.n	800b7c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b70a:	f000 fc89 	bl	800c020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b71c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	609a      	str	r2, [r3, #8]
      break;
 800b726:	e04f      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b738:	f000 fc72 	bl	800c020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b74a:	609a      	str	r2, [r3, #8]
      break;
 800b74c:	e03c      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b75a:	461a      	mov	r2, r3
 800b75c:	f000 fbe2 	bl	800bf24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2150      	movs	r1, #80	; 0x50
 800b766:	4618      	mov	r0, r3
 800b768:	f000 fc3c 	bl	800bfe4 <TIM_ITRx_SetConfig>
      break;
 800b76c:	e02c      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b77a:	461a      	mov	r2, r3
 800b77c:	f000 fc01 	bl	800bf82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2160      	movs	r1, #96	; 0x60
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fc2c 	bl	800bfe4 <TIM_ITRx_SetConfig>
      break;
 800b78c:	e01c      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b79a:	461a      	mov	r2, r3
 800b79c:	f000 fbc2 	bl	800bf24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2140      	movs	r1, #64	; 0x40
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 fc1c 	bl	800bfe4 <TIM_ITRx_SetConfig>
      break;
 800b7ac:	e00c      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	f000 fc13 	bl	800bfe4 <TIM_ITRx_SetConfig>
      break;
 800b7be:	e003      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c4:	e000      	b.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b7c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	ffceff88 	.word	0xffceff88
 800b7e8:	00100040 	.word	0x00100040
 800b7ec:	00100030 	.word	0x00100030
 800b7f0:	00100020 	.word	0x00100020

0800b7f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a40      	ldr	r2, [pc, #256]	; (800b958 <TIM_Base_SetConfig+0x114>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d013      	beq.n	800b884 <TIM_Base_SetConfig+0x40>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b862:	d00f      	beq.n	800b884 <TIM_Base_SetConfig+0x40>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a3d      	ldr	r2, [pc, #244]	; (800b95c <TIM_Base_SetConfig+0x118>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d00b      	beq.n	800b884 <TIM_Base_SetConfig+0x40>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a3c      	ldr	r2, [pc, #240]	; (800b960 <TIM_Base_SetConfig+0x11c>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d007      	beq.n	800b884 <TIM_Base_SetConfig+0x40>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a3b      	ldr	r2, [pc, #236]	; (800b964 <TIM_Base_SetConfig+0x120>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d003      	beq.n	800b884 <TIM_Base_SetConfig+0x40>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a3a      	ldr	r2, [pc, #232]	; (800b968 <TIM_Base_SetConfig+0x124>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d108      	bne.n	800b896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b88a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a2f      	ldr	r2, [pc, #188]	; (800b958 <TIM_Base_SetConfig+0x114>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d01f      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a4:	d01b      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a2c      	ldr	r2, [pc, #176]	; (800b95c <TIM_Base_SetConfig+0x118>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d017      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a2b      	ldr	r2, [pc, #172]	; (800b960 <TIM_Base_SetConfig+0x11c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d013      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a2a      	ldr	r2, [pc, #168]	; (800b964 <TIM_Base_SetConfig+0x120>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d00f      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a29      	ldr	r2, [pc, #164]	; (800b968 <TIM_Base_SetConfig+0x124>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d00b      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a28      	ldr	r2, [pc, #160]	; (800b96c <TIM_Base_SetConfig+0x128>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d007      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a27      	ldr	r2, [pc, #156]	; (800b970 <TIM_Base_SetConfig+0x12c>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d003      	beq.n	800b8de <TIM_Base_SetConfig+0x9a>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a26      	ldr	r2, [pc, #152]	; (800b974 <TIM_Base_SetConfig+0x130>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d108      	bne.n	800b8f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a10      	ldr	r2, [pc, #64]	; (800b958 <TIM_Base_SetConfig+0x114>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d00f      	beq.n	800b93c <TIM_Base_SetConfig+0xf8>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a12      	ldr	r2, [pc, #72]	; (800b968 <TIM_Base_SetConfig+0x124>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d00b      	beq.n	800b93c <TIM_Base_SetConfig+0xf8>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a11      	ldr	r2, [pc, #68]	; (800b96c <TIM_Base_SetConfig+0x128>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d007      	beq.n	800b93c <TIM_Base_SetConfig+0xf8>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a10      	ldr	r2, [pc, #64]	; (800b970 <TIM_Base_SetConfig+0x12c>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d003      	beq.n	800b93c <TIM_Base_SetConfig+0xf8>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a0f      	ldr	r2, [pc, #60]	; (800b974 <TIM_Base_SetConfig+0x130>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d103      	bne.n	800b944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	691a      	ldr	r2, [r3, #16]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	615a      	str	r2, [r3, #20]
}
 800b94a:	bf00      	nop
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	40010000 	.word	0x40010000
 800b95c:	40000400 	.word	0x40000400
 800b960:	40000800 	.word	0x40000800
 800b964:	40000c00 	.word	0x40000c00
 800b968:	40010400 	.word	0x40010400
 800b96c:	40014000 	.word	0x40014000
 800b970:	40014400 	.word	0x40014400
 800b974:	40014800 	.word	0x40014800

0800b978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	f023 0201 	bic.w	r2, r3, #1
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4b37      	ldr	r3, [pc, #220]	; (800ba80 <TIM_OC1_SetConfig+0x108>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f023 0303 	bic.w	r3, r3, #3
 800b9ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f023 0302 	bic.w	r3, r3, #2
 800b9c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a2d      	ldr	r2, [pc, #180]	; (800ba84 <TIM_OC1_SetConfig+0x10c>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d00f      	beq.n	800b9f4 <TIM_OC1_SetConfig+0x7c>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a2c      	ldr	r2, [pc, #176]	; (800ba88 <TIM_OC1_SetConfig+0x110>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00b      	beq.n	800b9f4 <TIM_OC1_SetConfig+0x7c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a2b      	ldr	r2, [pc, #172]	; (800ba8c <TIM_OC1_SetConfig+0x114>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d007      	beq.n	800b9f4 <TIM_OC1_SetConfig+0x7c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a2a      	ldr	r2, [pc, #168]	; (800ba90 <TIM_OC1_SetConfig+0x118>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d003      	beq.n	800b9f4 <TIM_OC1_SetConfig+0x7c>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <TIM_OC1_SetConfig+0x11c>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d10c      	bne.n	800ba0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	f023 0308 	bic.w	r3, r3, #8
 800b9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f023 0304 	bic.w	r3, r3, #4
 800ba0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a1c      	ldr	r2, [pc, #112]	; (800ba84 <TIM_OC1_SetConfig+0x10c>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d00f      	beq.n	800ba36 <TIM_OC1_SetConfig+0xbe>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a1b      	ldr	r2, [pc, #108]	; (800ba88 <TIM_OC1_SetConfig+0x110>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d00b      	beq.n	800ba36 <TIM_OC1_SetConfig+0xbe>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a1a      	ldr	r2, [pc, #104]	; (800ba8c <TIM_OC1_SetConfig+0x114>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d007      	beq.n	800ba36 <TIM_OC1_SetConfig+0xbe>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a19      	ldr	r2, [pc, #100]	; (800ba90 <TIM_OC1_SetConfig+0x118>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d003      	beq.n	800ba36 <TIM_OC1_SetConfig+0xbe>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a18      	ldr	r2, [pc, #96]	; (800ba94 <TIM_OC1_SetConfig+0x11c>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d111      	bne.n	800ba5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	621a      	str	r2, [r3, #32]
}
 800ba74:	bf00      	nop
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	fffeff8f 	.word	0xfffeff8f
 800ba84:	40010000 	.word	0x40010000
 800ba88:	40010400 	.word	0x40010400
 800ba8c:	40014000 	.word	0x40014000
 800ba90:	40014400 	.word	0x40014400
 800ba94:	40014800 	.word	0x40014800

0800ba98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	f023 0210 	bic.w	r2, r3, #16
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4b34      	ldr	r3, [pc, #208]	; (800bb94 <TIM_OC2_SetConfig+0xfc>)
 800bac4:	4013      	ands	r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f023 0320 	bic.w	r3, r3, #32
 800bae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4313      	orrs	r3, r2
 800baee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a29      	ldr	r2, [pc, #164]	; (800bb98 <TIM_OC2_SetConfig+0x100>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d003      	beq.n	800bb00 <TIM_OC2_SetConfig+0x68>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a28      	ldr	r2, [pc, #160]	; (800bb9c <TIM_OC2_SetConfig+0x104>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d10d      	bne.n	800bb1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	697a      	ldr	r2, [r7, #20]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a1e      	ldr	r2, [pc, #120]	; (800bb98 <TIM_OC2_SetConfig+0x100>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00f      	beq.n	800bb44 <TIM_OC2_SetConfig+0xac>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a1d      	ldr	r2, [pc, #116]	; (800bb9c <TIM_OC2_SetConfig+0x104>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d00b      	beq.n	800bb44 <TIM_OC2_SetConfig+0xac>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a1c      	ldr	r2, [pc, #112]	; (800bba0 <TIM_OC2_SetConfig+0x108>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d007      	beq.n	800bb44 <TIM_OC2_SetConfig+0xac>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a1b      	ldr	r2, [pc, #108]	; (800bba4 <TIM_OC2_SetConfig+0x10c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d003      	beq.n	800bb44 <TIM_OC2_SetConfig+0xac>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a1a      	ldr	r2, [pc, #104]	; (800bba8 <TIM_OC2_SetConfig+0x110>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d113      	bne.n	800bb6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	621a      	str	r2, [r3, #32]
}
 800bb86:	bf00      	nop
 800bb88:	371c      	adds	r7, #28
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	feff8fff 	.word	0xfeff8fff
 800bb98:	40010000 	.word	0x40010000
 800bb9c:	40010400 	.word	0x40010400
 800bba0:	40014000 	.word	0x40014000
 800bba4:	40014400 	.word	0x40014400
 800bba8:	40014800 	.word	0x40014800

0800bbac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	4b33      	ldr	r3, [pc, #204]	; (800bca4 <TIM_OC3_SetConfig+0xf8>)
 800bbd8:	4013      	ands	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f023 0303 	bic.w	r3, r3, #3
 800bbe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a28      	ldr	r2, [pc, #160]	; (800bca8 <TIM_OC3_SetConfig+0xfc>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d003      	beq.n	800bc12 <TIM_OC3_SetConfig+0x66>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a27      	ldr	r2, [pc, #156]	; (800bcac <TIM_OC3_SetConfig+0x100>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d10d      	bne.n	800bc2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a1d      	ldr	r2, [pc, #116]	; (800bca8 <TIM_OC3_SetConfig+0xfc>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d00f      	beq.n	800bc56 <TIM_OC3_SetConfig+0xaa>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a1c      	ldr	r2, [pc, #112]	; (800bcac <TIM_OC3_SetConfig+0x100>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d00b      	beq.n	800bc56 <TIM_OC3_SetConfig+0xaa>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a1b      	ldr	r2, [pc, #108]	; (800bcb0 <TIM_OC3_SetConfig+0x104>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d007      	beq.n	800bc56 <TIM_OC3_SetConfig+0xaa>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a1a      	ldr	r2, [pc, #104]	; (800bcb4 <TIM_OC3_SetConfig+0x108>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d003      	beq.n	800bc56 <TIM_OC3_SetConfig+0xaa>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a19      	ldr	r2, [pc, #100]	; (800bcb8 <TIM_OC3_SetConfig+0x10c>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d113      	bne.n	800bc7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	011b      	lsls	r3, r3, #4
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	621a      	str	r2, [r3, #32]
}
 800bc98:	bf00      	nop
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	fffeff8f 	.word	0xfffeff8f
 800bca8:	40010000 	.word	0x40010000
 800bcac:	40010400 	.word	0x40010400
 800bcb0:	40014000 	.word	0x40014000
 800bcb4:	40014400 	.word	0x40014400
 800bcb8:	40014800 	.word	0x40014800

0800bcbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	4b24      	ldr	r3, [pc, #144]	; (800bd78 <TIM_OC4_SetConfig+0xbc>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	031b      	lsls	r3, r3, #12
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a19      	ldr	r2, [pc, #100]	; (800bd7c <TIM_OC4_SetConfig+0xc0>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00f      	beq.n	800bd3c <TIM_OC4_SetConfig+0x80>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a18      	ldr	r2, [pc, #96]	; (800bd80 <TIM_OC4_SetConfig+0xc4>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d00b      	beq.n	800bd3c <TIM_OC4_SetConfig+0x80>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a17      	ldr	r2, [pc, #92]	; (800bd84 <TIM_OC4_SetConfig+0xc8>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d007      	beq.n	800bd3c <TIM_OC4_SetConfig+0x80>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a16      	ldr	r2, [pc, #88]	; (800bd88 <TIM_OC4_SetConfig+0xcc>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d003      	beq.n	800bd3c <TIM_OC4_SetConfig+0x80>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a15      	ldr	r2, [pc, #84]	; (800bd8c <TIM_OC4_SetConfig+0xd0>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d109      	bne.n	800bd50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	019b      	lsls	r3, r3, #6
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	621a      	str	r2, [r3, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	feff8fff 	.word	0xfeff8fff
 800bd7c:	40010000 	.word	0x40010000
 800bd80:	40010400 	.word	0x40010400
 800bd84:	40014000 	.word	0x40014000
 800bd88:	40014400 	.word	0x40014400
 800bd8c:	40014800 	.word	0x40014800

0800bd90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4b21      	ldr	r3, [pc, #132]	; (800be40 <TIM_OC5_SetConfig+0xb0>)
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bdd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	041b      	lsls	r3, r3, #16
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a18      	ldr	r2, [pc, #96]	; (800be44 <TIM_OC5_SetConfig+0xb4>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d00f      	beq.n	800be06 <TIM_OC5_SetConfig+0x76>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a17      	ldr	r2, [pc, #92]	; (800be48 <TIM_OC5_SetConfig+0xb8>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00b      	beq.n	800be06 <TIM_OC5_SetConfig+0x76>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a16      	ldr	r2, [pc, #88]	; (800be4c <TIM_OC5_SetConfig+0xbc>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d007      	beq.n	800be06 <TIM_OC5_SetConfig+0x76>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a15      	ldr	r2, [pc, #84]	; (800be50 <TIM_OC5_SetConfig+0xc0>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d003      	beq.n	800be06 <TIM_OC5_SetConfig+0x76>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a14      	ldr	r2, [pc, #80]	; (800be54 <TIM_OC5_SetConfig+0xc4>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d109      	bne.n	800be1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	021b      	lsls	r3, r3, #8
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	4313      	orrs	r3, r2
 800be18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	621a      	str	r2, [r3, #32]
}
 800be34:	bf00      	nop
 800be36:	371c      	adds	r7, #28
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	fffeff8f 	.word	0xfffeff8f
 800be44:	40010000 	.word	0x40010000
 800be48:	40010400 	.word	0x40010400
 800be4c:	40014000 	.word	0x40014000
 800be50:	40014400 	.word	0x40014400
 800be54:	40014800 	.word	0x40014800

0800be58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4b22      	ldr	r3, [pc, #136]	; (800bf0c <TIM_OC6_SetConfig+0xb4>)
 800be84:	4013      	ands	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	021b      	lsls	r3, r3, #8
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4313      	orrs	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	051b      	lsls	r3, r3, #20
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a19      	ldr	r2, [pc, #100]	; (800bf10 <TIM_OC6_SetConfig+0xb8>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d00f      	beq.n	800bed0 <TIM_OC6_SetConfig+0x78>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a18      	ldr	r2, [pc, #96]	; (800bf14 <TIM_OC6_SetConfig+0xbc>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00b      	beq.n	800bed0 <TIM_OC6_SetConfig+0x78>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <TIM_OC6_SetConfig+0xc0>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d007      	beq.n	800bed0 <TIM_OC6_SetConfig+0x78>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a16      	ldr	r2, [pc, #88]	; (800bf1c <TIM_OC6_SetConfig+0xc4>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d003      	beq.n	800bed0 <TIM_OC6_SetConfig+0x78>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a15      	ldr	r2, [pc, #84]	; (800bf20 <TIM_OC6_SetConfig+0xc8>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d109      	bne.n	800bee4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bed6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	029b      	lsls	r3, r3, #10
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	621a      	str	r2, [r3, #32]
}
 800befe:	bf00      	nop
 800bf00:	371c      	adds	r7, #28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	feff8fff 	.word	0xfeff8fff
 800bf10:	40010000 	.word	0x40010000
 800bf14:	40010400 	.word	0x40010400
 800bf18:	40014000 	.word	0x40014000
 800bf1c:	40014400 	.word	0x40014400
 800bf20:	40014800 	.word	0x40014800

0800bf24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	f023 0201 	bic.w	r2, r3, #1
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f023 030a 	bic.w	r3, r3, #10
 800bf60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	697a      	ldr	r2, [r7, #20]
 800bf74:	621a      	str	r2, [r3, #32]
}
 800bf76:	bf00      	nop
 800bf78:	371c      	adds	r7, #28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b087      	sub	sp, #28
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	f023 0210 	bic.w	r2, r3, #16
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a1b      	ldr	r3, [r3, #32]
 800bfa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bfac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	031b      	lsls	r3, r3, #12
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bfbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	011b      	lsls	r3, r3, #4
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	621a      	str	r2, [r3, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	371c      	adds	r7, #28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
	...

0800bfe4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4b09      	ldr	r3, [pc, #36]	; (800c01c <TIM_ITRx_SetConfig+0x38>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	4313      	orrs	r3, r2
 800c002:	f043 0307 	orr.w	r3, r3, #7
 800c006:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	609a      	str	r2, [r3, #8]
}
 800c00e:	bf00      	nop
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	ffcfff8f 	.word	0xffcfff8f

0800c020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c03a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	021a      	lsls	r2, r3, #8
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	431a      	orrs	r2, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	4313      	orrs	r3, r2
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	609a      	str	r2, [r3, #8]
}
 800c054:	bf00      	nop
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f003 031f 	and.w	r3, r3, #31
 800c072:	2201      	movs	r2, #1
 800c074:	fa02 f303 	lsl.w	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6a1a      	ldr	r2, [r3, #32]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	43db      	mvns	r3, r3
 800c082:	401a      	ands	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6a1a      	ldr	r2, [r3, #32]
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	f003 031f 	and.w	r3, r3, #31
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	fa01 f303 	lsl.w	r3, r1, r3
 800c098:	431a      	orrs	r2, r3
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	621a      	str	r2, [r3, #32]
}
 800c09e:	bf00      	nop
 800c0a0:	371c      	adds	r7, #28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
	...

0800c0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d101      	bne.n	800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e06d      	b.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a30      	ldr	r2, [pc, #192]	; (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d004      	beq.n	800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a2f      	ldr	r2, [pc, #188]	; (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d108      	bne.n	800c10a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c0fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	4313      	orrs	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a20      	ldr	r2, [pc, #128]	; (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d022      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c136:	d01d      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a1d      	ldr	r2, [pc, #116]	; (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d018      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a1c      	ldr	r2, [pc, #112]	; (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d013      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a1a      	ldr	r2, [pc, #104]	; (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d00e      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d009      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a16      	ldr	r2, [pc, #88]	; (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d004      	beq.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a15      	ldr	r2, [pc, #84]	; (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d10c      	bne.n	800c18e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c17a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	4313      	orrs	r3, r2
 800c184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	40010000 	.word	0x40010000
 800c1b0:	40010400 	.word	0x40010400
 800c1b4:	40000400 	.word	0x40000400
 800c1b8:	40000800 	.word	0x40000800
 800c1bc:	40000c00 	.word	0x40000c00
 800c1c0:	40001800 	.word	0x40001800
 800c1c4:	40014000 	.word	0x40014000

0800c1c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e042      	b.n	800c29c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7f6 f98b 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2224      	movs	r2, #36	; 0x24
 800c232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f022 0201 	bic.w	r2, r2, #1
 800c244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fc94 	bl	800cb74 <UART_SetConfig>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d101      	bne.n	800c256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e022      	b.n	800c29c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 f9f0 	bl	800d644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689a      	ldr	r2, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f042 0201 	orr.w	r2, r2, #1
 800c292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 fa77 	bl	800d788 <UART_CheckIdleState>
 800c29a:	4603      	mov	r3, r0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08a      	sub	sp, #40	; 0x28
 800c2a8:	af02      	add	r7, sp, #8
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ba:	2b20      	cmp	r3, #32
 800c2bc:	d17b      	bne.n	800c3b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <HAL_UART_Transmit+0x26>
 800c2c4:	88fb      	ldrh	r3, [r7, #6]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e074      	b.n	800c3b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2221      	movs	r2, #33	; 0x21
 800c2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2de:	f7f6 fc7d 	bl	8002bdc <HAL_GetTick>
 800c2e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	88fa      	ldrh	r2, [r7, #6]
 800c2e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	88fa      	ldrh	r2, [r7, #6]
 800c2f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2fc:	d108      	bne.n	800c310 <HAL_UART_Transmit+0x6c>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d104      	bne.n	800c310 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	61bb      	str	r3, [r7, #24]
 800c30e:	e003      	b.n	800c318 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c314:	2300      	movs	r3, #0
 800c316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c318:	e030      	b.n	800c37c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2200      	movs	r2, #0
 800c322:	2180      	movs	r1, #128	; 0x80
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f001 fad9 	bl	800d8dc <UART_WaitOnFlagUntilTimeout>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d005      	beq.n	800c33c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2220      	movs	r2, #32
 800c334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e03d      	b.n	800c3b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10b      	bne.n	800c35a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c350:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	3302      	adds	r3, #2
 800c356:	61bb      	str	r3, [r7, #24]
 800c358:	e007      	b.n	800c36a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	3301      	adds	r3, #1
 800c368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c370:	b29b      	uxth	r3, r3
 800c372:	3b01      	subs	r3, #1
 800c374:	b29a      	uxth	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c382:	b29b      	uxth	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1c8      	bne.n	800c31a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	2200      	movs	r2, #0
 800c390:	2140      	movs	r1, #64	; 0x40
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f001 faa2 	bl	800d8dc <UART_WaitOnFlagUntilTimeout>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e006      	b.n	800c3b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e000      	b.n	800c3b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c3b6:	2302      	movs	r3, #2
  }
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b0ba      	sub	sp, #232	; 0xe8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	69db      	ldr	r3, [r3, #28]
 800c3ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c3e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c3ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c3f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d11b      	bne.n	800c434 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b00      	cmp	r3, #0
 800c406:	d015      	beq.n	800c434 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40c:	f003 0320 	and.w	r3, r3, #32
 800c410:	2b00      	cmp	r3, #0
 800c412:	d105      	bne.n	800c420 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 8377 	beq.w	800cb18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	4798      	blx	r3
      }
      return;
 800c432:	e371      	b.n	800cb18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 8123 	beq.w	800c684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c43e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c442:	4b8d      	ldr	r3, [pc, #564]	; (800c678 <HAL_UART_IRQHandler+0x2b8>)
 800c444:	4013      	ands	r3, r2
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c44a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c44e:	4b8b      	ldr	r3, [pc, #556]	; (800c67c <HAL_UART_IRQHandler+0x2bc>)
 800c450:	4013      	ands	r3, r2
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 8116 	beq.w	800c684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c45c:	f003 0301 	and.w	r3, r3, #1
 800c460:	2b00      	cmp	r3, #0
 800c462:	d011      	beq.n	800c488 <HAL_UART_IRQHandler+0xc8>
 800c464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00b      	beq.n	800c488 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2201      	movs	r2, #1
 800c476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c47e:	f043 0201 	orr.w	r2, r3, #1
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d011      	beq.n	800c4b8 <HAL_UART_IRQHandler+0xf8>
 800c494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ae:	f043 0204 	orr.w	r2, r3, #4
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4bc:	f003 0304 	and.w	r3, r3, #4
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d011      	beq.n	800c4e8 <HAL_UART_IRQHandler+0x128>
 800c4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2204      	movs	r2, #4
 800c4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4de:	f043 0202 	orr.w	r2, r3, #2
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ec:	f003 0308 	and.w	r3, r3, #8
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d017      	beq.n	800c524 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4f8:	f003 0320 	and.w	r3, r3, #32
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d105      	bne.n	800c50c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c504:	4b5c      	ldr	r3, [pc, #368]	; (800c678 <HAL_UART_IRQHandler+0x2b8>)
 800c506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2208      	movs	r2, #8
 800c512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51a:	f043 0208 	orr.w	r2, r3, #8
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d012      	beq.n	800c556 <HAL_UART_IRQHandler+0x196>
 800c530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00c      	beq.n	800c556 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c54c:	f043 0220 	orr.w	r2, r3, #32
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 82dd 	beq.w	800cb1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d013      	beq.n	800c596 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	d105      	bne.n	800c586 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c57e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d007      	beq.n	800c596 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5aa:	2b40      	cmp	r3, #64	; 0x40
 800c5ac:	d005      	beq.n	800c5ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c5ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d054      	beq.n	800c664 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f001 f9f6 	bl	800d9ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ca:	2b40      	cmp	r3, #64	; 0x40
 800c5cc:	d146      	bne.n	800c65c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c60a:	e841 2300 	strex	r3, r2, [r1]
 800c60e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1d9      	bne.n	800c5ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c620:	2b00      	cmp	r3, #0
 800c622:	d017      	beq.n	800c654 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c62a:	4a15      	ldr	r2, [pc, #84]	; (800c680 <HAL_UART_IRQHandler+0x2c0>)
 800c62c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c634:	4618      	mov	r0, r3
 800c636:	f7f8 fda1 	bl	800517c <HAL_DMA_Abort_IT>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d019      	beq.n	800c674 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c64e:	4610      	mov	r0, r2
 800c650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c652:	e00f      	b.n	800c674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fa77 	bl	800cb48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c65a:	e00b      	b.n	800c674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fa73 	bl	800cb48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c662:	e007      	b.n	800c674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fa6f 	bl	800cb48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c672:	e253      	b.n	800cb1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c674:	bf00      	nop
    return;
 800c676:	e251      	b.n	800cb1c <HAL_UART_IRQHandler+0x75c>
 800c678:	10000001 	.word	0x10000001
 800c67c:	04000120 	.word	0x04000120
 800c680:	0800da79 	.word	0x0800da79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c688:	2b01      	cmp	r3, #1
 800c68a:	f040 81e7 	bne.w	800ca5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c692:	f003 0310 	and.w	r3, r3, #16
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 81e0 	beq.w	800ca5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a0:	f003 0310 	and.w	r3, r3, #16
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 81d9 	beq.w	800ca5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2210      	movs	r2, #16
 800c6b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6bc:	2b40      	cmp	r3, #64	; 0x40
 800c6be:	f040 8151 	bne.w	800c964 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a96      	ldr	r2, [pc, #600]	; (800c924 <HAL_UART_IRQHandler+0x564>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d068      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a93      	ldr	r2, [pc, #588]	; (800c928 <HAL_UART_IRQHandler+0x568>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d061      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a91      	ldr	r2, [pc, #580]	; (800c92c <HAL_UART_IRQHandler+0x56c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d05a      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a8e      	ldr	r2, [pc, #568]	; (800c930 <HAL_UART_IRQHandler+0x570>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d053      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a8c      	ldr	r2, [pc, #560]	; (800c934 <HAL_UART_IRQHandler+0x574>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d04c      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a89      	ldr	r2, [pc, #548]	; (800c938 <HAL_UART_IRQHandler+0x578>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d045      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a87      	ldr	r2, [pc, #540]	; (800c93c <HAL_UART_IRQHandler+0x57c>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d03e      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a84      	ldr	r2, [pc, #528]	; (800c940 <HAL_UART_IRQHandler+0x580>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d037      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a82      	ldr	r2, [pc, #520]	; (800c944 <HAL_UART_IRQHandler+0x584>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d030      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a7f      	ldr	r2, [pc, #508]	; (800c948 <HAL_UART_IRQHandler+0x588>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d029      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a7d      	ldr	r2, [pc, #500]	; (800c94c <HAL_UART_IRQHandler+0x58c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d022      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a7a      	ldr	r2, [pc, #488]	; (800c950 <HAL_UART_IRQHandler+0x590>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d01b      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a78      	ldr	r2, [pc, #480]	; (800c954 <HAL_UART_IRQHandler+0x594>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d014      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a75      	ldr	r2, [pc, #468]	; (800c958 <HAL_UART_IRQHandler+0x598>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d00d      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a73      	ldr	r2, [pc, #460]	; (800c95c <HAL_UART_IRQHandler+0x59c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d006      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x3e2>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a70      	ldr	r2, [pc, #448]	; (800c960 <HAL_UART_IRQHandler+0x5a0>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d106      	bne.n	800c7b0 <HAL_UART_IRQHandler+0x3f0>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	e005      	b.n	800c7bc <HAL_UART_IRQHandler+0x3fc>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 81ab 	beq.w	800cb20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	f080 81a3 	bcs.w	800cb20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f0:	f000 8087 	beq.w	800c902 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c800:	e853 3f00 	ldrex	r3, [r3]
 800c804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	461a      	mov	r2, r3
 800c81a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c81e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c822:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c82a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c82e:	e841 2300 	strex	r3, r2, [r1]
 800c832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1da      	bne.n	800c7f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3308      	adds	r3, #8
 800c844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c848:	e853 3f00 	ldrex	r3, [r3]
 800c84c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c84e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c850:	f023 0301 	bic.w	r3, r3, #1
 800c854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3308      	adds	r3, #8
 800c85e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c86a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c86e:	e841 2300 	strex	r3, r2, [r1]
 800c872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1e1      	bne.n	800c83e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3308      	adds	r3, #8
 800c880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c884:	e853 3f00 	ldrex	r3, [r3]
 800c888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c88c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3308      	adds	r3, #8
 800c89a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c89e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e3      	bne.n	800c87a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2220      	movs	r2, #32
 800c8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d0:	f023 0310 	bic.w	r3, r3, #16
 800c8d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e4      	bne.n	800c8c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f8 f91f 	bl	8004b40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2202      	movs	r2, #2
 800c906:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c914:	b29b      	uxth	r3, r3
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	b29b      	uxth	r3, r3
 800c91a:	4619      	mov	r1, r3
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f91d 	bl	800cb5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c922:	e0fd      	b.n	800cb20 <HAL_UART_IRQHandler+0x760>
 800c924:	40020010 	.word	0x40020010
 800c928:	40020028 	.word	0x40020028
 800c92c:	40020040 	.word	0x40020040
 800c930:	40020058 	.word	0x40020058
 800c934:	40020070 	.word	0x40020070
 800c938:	40020088 	.word	0x40020088
 800c93c:	400200a0 	.word	0x400200a0
 800c940:	400200b8 	.word	0x400200b8
 800c944:	40020410 	.word	0x40020410
 800c948:	40020428 	.word	0x40020428
 800c94c:	40020440 	.word	0x40020440
 800c950:	40020458 	.word	0x40020458
 800c954:	40020470 	.word	0x40020470
 800c958:	40020488 	.word	0x40020488
 800c95c:	400204a0 	.word	0x400204a0
 800c960:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c970:	b29b      	uxth	r3, r3
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c97e:	b29b      	uxth	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 80cf 	beq.w	800cb24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 80ca 	beq.w	800cb24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	e853 3f00 	ldrex	r3, [r3]
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c9b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c9b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9ba:	e841 2300 	strex	r3, r2, [r1]
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e4      	bne.n	800c990 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3308      	adds	r3, #8
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	e853 3f00 	ldrex	r3, [r3]
 800c9d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c9d6:	6a3a      	ldr	r2, [r7, #32]
 800c9d8:	4b55      	ldr	r3, [pc, #340]	; (800cb30 <HAL_UART_IRQHandler+0x770>)
 800c9da:	4013      	ands	r3, r2
 800c9dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9ea:	633a      	str	r2, [r7, #48]	; 0x30
 800c9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f2:	e841 2300 	strex	r3, r2, [r1]
 800c9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1e3      	bne.n	800c9c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	e853 3f00 	ldrex	r3, [r3]
 800ca1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0310 	bic.w	r3, r3, #16
 800ca26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca34:	61fb      	str	r3, [r7, #28]
 800ca36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca38:	69b9      	ldr	r1, [r7, #24]
 800ca3a:	69fa      	ldr	r2, [r7, #28]
 800ca3c:	e841 2300 	strex	r3, r2, [r1]
 800ca40:	617b      	str	r3, [r7, #20]
   return(result);
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1e4      	bne.n	800ca12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f881 	bl	800cb5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca5a:	e063      	b.n	800cb24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00e      	beq.n	800ca86 <HAL_UART_IRQHandler+0x6c6>
 800ca68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d008      	beq.n	800ca86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 f83b 	bl	800dafa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca84:	e051      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d014      	beq.n	800cabc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d105      	bne.n	800caaa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d008      	beq.n	800cabc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d03a      	beq.n	800cb28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	4798      	blx	r3
    }
    return;
 800caba:	e035      	b.n	800cb28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d009      	beq.n	800cadc <HAL_UART_IRQHandler+0x71c>
 800cac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d003      	beq.n	800cadc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 ffe5 	bl	800daa4 <UART_EndTransmit_IT>
    return;
 800cada:	e026      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cadc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d009      	beq.n	800cafc <HAL_UART_IRQHandler+0x73c>
 800cae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d003      	beq.n	800cafc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f001 f814 	bl	800db22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cafa:	e016      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d010      	beq.n	800cb2a <HAL_UART_IRQHandler+0x76a>
 800cb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	da0c      	bge.n	800cb2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fffc 	bl	800db0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb16:	e008      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb18:	bf00      	nop
 800cb1a:	e006      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
    return;
 800cb1c:	bf00      	nop
 800cb1e:	e004      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb20:	bf00      	nop
 800cb22:	e002      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb24:	bf00      	nop
 800cb26:	e000      	b.n	800cb2a <HAL_UART_IRQHandler+0x76a>
    return;
 800cb28:	bf00      	nop
  }
}
 800cb2a:	37e8      	adds	r7, #232	; 0xe8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	effffffe 	.word	0xeffffffe

0800cb34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb78:	b092      	sub	sp, #72	; 0x48
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	689a      	ldr	r2, [r3, #8]
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	431a      	orrs	r2, r3
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	431a      	orrs	r2, r3
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4bbe      	ldr	r3, [pc, #760]	; (800ce9c <UART_SetConfig+0x328>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	6812      	ldr	r2, [r2, #0]
 800cbaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbac:	430b      	orrs	r3, r1
 800cbae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	68da      	ldr	r2, [r3, #12]
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	430a      	orrs	r2, r1
 800cbc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4ab3      	ldr	r2, [pc, #716]	; (800cea0 <UART_SetConfig+0x32c>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d004      	beq.n	800cbe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	689a      	ldr	r2, [r3, #8]
 800cbe6:	4baf      	ldr	r3, [pc, #700]	; (800cea4 <UART_SetConfig+0x330>)
 800cbe8:	4013      	ands	r3, r2
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	6812      	ldr	r2, [r2, #0]
 800cbee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbf0:	430b      	orrs	r3, r1
 800cbf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	f023 010f 	bic.w	r1, r3, #15
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4aa6      	ldr	r2, [pc, #664]	; (800cea8 <UART_SetConfig+0x334>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d177      	bne.n	800cd04 <UART_SetConfig+0x190>
 800cc14:	4ba5      	ldr	r3, [pc, #660]	; (800ceac <UART_SetConfig+0x338>)
 800cc16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc1c:	2b28      	cmp	r3, #40	; 0x28
 800cc1e:	d86d      	bhi.n	800ccfc <UART_SetConfig+0x188>
 800cc20:	a201      	add	r2, pc, #4	; (adr r2, 800cc28 <UART_SetConfig+0xb4>)
 800cc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc26:	bf00      	nop
 800cc28:	0800cccd 	.word	0x0800cccd
 800cc2c:	0800ccfd 	.word	0x0800ccfd
 800cc30:	0800ccfd 	.word	0x0800ccfd
 800cc34:	0800ccfd 	.word	0x0800ccfd
 800cc38:	0800ccfd 	.word	0x0800ccfd
 800cc3c:	0800ccfd 	.word	0x0800ccfd
 800cc40:	0800ccfd 	.word	0x0800ccfd
 800cc44:	0800ccfd 	.word	0x0800ccfd
 800cc48:	0800ccd5 	.word	0x0800ccd5
 800cc4c:	0800ccfd 	.word	0x0800ccfd
 800cc50:	0800ccfd 	.word	0x0800ccfd
 800cc54:	0800ccfd 	.word	0x0800ccfd
 800cc58:	0800ccfd 	.word	0x0800ccfd
 800cc5c:	0800ccfd 	.word	0x0800ccfd
 800cc60:	0800ccfd 	.word	0x0800ccfd
 800cc64:	0800ccfd 	.word	0x0800ccfd
 800cc68:	0800ccdd 	.word	0x0800ccdd
 800cc6c:	0800ccfd 	.word	0x0800ccfd
 800cc70:	0800ccfd 	.word	0x0800ccfd
 800cc74:	0800ccfd 	.word	0x0800ccfd
 800cc78:	0800ccfd 	.word	0x0800ccfd
 800cc7c:	0800ccfd 	.word	0x0800ccfd
 800cc80:	0800ccfd 	.word	0x0800ccfd
 800cc84:	0800ccfd 	.word	0x0800ccfd
 800cc88:	0800cce5 	.word	0x0800cce5
 800cc8c:	0800ccfd 	.word	0x0800ccfd
 800cc90:	0800ccfd 	.word	0x0800ccfd
 800cc94:	0800ccfd 	.word	0x0800ccfd
 800cc98:	0800ccfd 	.word	0x0800ccfd
 800cc9c:	0800ccfd 	.word	0x0800ccfd
 800cca0:	0800ccfd 	.word	0x0800ccfd
 800cca4:	0800ccfd 	.word	0x0800ccfd
 800cca8:	0800cced 	.word	0x0800cced
 800ccac:	0800ccfd 	.word	0x0800ccfd
 800ccb0:	0800ccfd 	.word	0x0800ccfd
 800ccb4:	0800ccfd 	.word	0x0800ccfd
 800ccb8:	0800ccfd 	.word	0x0800ccfd
 800ccbc:	0800ccfd 	.word	0x0800ccfd
 800ccc0:	0800ccfd 	.word	0x0800ccfd
 800ccc4:	0800ccfd 	.word	0x0800ccfd
 800ccc8:	0800ccf5 	.word	0x0800ccf5
 800cccc:	2301      	movs	r3, #1
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd2:	e222      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ccd4:	2304      	movs	r3, #4
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccda:	e21e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ccdc:	2308      	movs	r3, #8
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce2:	e21a      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cce4:	2310      	movs	r3, #16
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e216      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ccec:	2320      	movs	r3, #32
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e212      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ccf4:	2340      	movs	r3, #64	; 0x40
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfa:	e20e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ccfc:	2380      	movs	r3, #128	; 0x80
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd02:	e20a      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a69      	ldr	r2, [pc, #420]	; (800ceb0 <UART_SetConfig+0x33c>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d130      	bne.n	800cd70 <UART_SetConfig+0x1fc>
 800cd0e:	4b67      	ldr	r3, [pc, #412]	; (800ceac <UART_SetConfig+0x338>)
 800cd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd12:	f003 0307 	and.w	r3, r3, #7
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	d826      	bhi.n	800cd68 <UART_SetConfig+0x1f4>
 800cd1a:	a201      	add	r2, pc, #4	; (adr r2, 800cd20 <UART_SetConfig+0x1ac>)
 800cd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd20:	0800cd39 	.word	0x0800cd39
 800cd24:	0800cd41 	.word	0x0800cd41
 800cd28:	0800cd49 	.word	0x0800cd49
 800cd2c:	0800cd51 	.word	0x0800cd51
 800cd30:	0800cd59 	.word	0x0800cd59
 800cd34:	0800cd61 	.word	0x0800cd61
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3e:	e1ec      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd40:	2304      	movs	r3, #4
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd46:	e1e8      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd48:	2308      	movs	r3, #8
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd4e:	e1e4      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd50:	2310      	movs	r3, #16
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd56:	e1e0      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd58:	2320      	movs	r3, #32
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5e:	e1dc      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd60:	2340      	movs	r3, #64	; 0x40
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd66:	e1d8      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd68:	2380      	movs	r3, #128	; 0x80
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6e:	e1d4      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a4f      	ldr	r2, [pc, #316]	; (800ceb4 <UART_SetConfig+0x340>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d130      	bne.n	800cddc <UART_SetConfig+0x268>
 800cd7a:	4b4c      	ldr	r3, [pc, #304]	; (800ceac <UART_SetConfig+0x338>)
 800cd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd7e:	f003 0307 	and.w	r3, r3, #7
 800cd82:	2b05      	cmp	r3, #5
 800cd84:	d826      	bhi.n	800cdd4 <UART_SetConfig+0x260>
 800cd86:	a201      	add	r2, pc, #4	; (adr r2, 800cd8c <UART_SetConfig+0x218>)
 800cd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8c:	0800cda5 	.word	0x0800cda5
 800cd90:	0800cdad 	.word	0x0800cdad
 800cd94:	0800cdb5 	.word	0x0800cdb5
 800cd98:	0800cdbd 	.word	0x0800cdbd
 800cd9c:	0800cdc5 	.word	0x0800cdc5
 800cda0:	0800cdcd 	.word	0x0800cdcd
 800cda4:	2300      	movs	r3, #0
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdaa:	e1b6      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cdac:	2304      	movs	r3, #4
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb2:	e1b2      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cdb4:	2308      	movs	r3, #8
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdba:	e1ae      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cdbc:	2310      	movs	r3, #16
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc2:	e1aa      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cdc4:	2320      	movs	r3, #32
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdca:	e1a6      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cdcc:	2340      	movs	r3, #64	; 0x40
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd2:	e1a2      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cdd4:	2380      	movs	r3, #128	; 0x80
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdda:	e19e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a35      	ldr	r2, [pc, #212]	; (800ceb8 <UART_SetConfig+0x344>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d130      	bne.n	800ce48 <UART_SetConfig+0x2d4>
 800cde6:	4b31      	ldr	r3, [pc, #196]	; (800ceac <UART_SetConfig+0x338>)
 800cde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdea:	f003 0307 	and.w	r3, r3, #7
 800cdee:	2b05      	cmp	r3, #5
 800cdf0:	d826      	bhi.n	800ce40 <UART_SetConfig+0x2cc>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <UART_SetConfig+0x284>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce11 	.word	0x0800ce11
 800cdfc:	0800ce19 	.word	0x0800ce19
 800ce00:	0800ce21 	.word	0x0800ce21
 800ce04:	0800ce29 	.word	0x0800ce29
 800ce08:	0800ce31 	.word	0x0800ce31
 800ce0c:	0800ce39 	.word	0x0800ce39
 800ce10:	2300      	movs	r3, #0
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce16:	e180      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce18:	2304      	movs	r3, #4
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1e:	e17c      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce20:	2308      	movs	r3, #8
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce26:	e178      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce28:	2310      	movs	r3, #16
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2e:	e174      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce30:	2320      	movs	r3, #32
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce36:	e170      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce38:	2340      	movs	r3, #64	; 0x40
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3e:	e16c      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce40:	2380      	movs	r3, #128	; 0x80
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce46:	e168      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a1b      	ldr	r2, [pc, #108]	; (800cebc <UART_SetConfig+0x348>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d142      	bne.n	800ced8 <UART_SetConfig+0x364>
 800ce52:	4b16      	ldr	r3, [pc, #88]	; (800ceac <UART_SetConfig+0x338>)
 800ce54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce56:	f003 0307 	and.w	r3, r3, #7
 800ce5a:	2b05      	cmp	r3, #5
 800ce5c:	d838      	bhi.n	800ced0 <UART_SetConfig+0x35c>
 800ce5e:	a201      	add	r2, pc, #4	; (adr r2, 800ce64 <UART_SetConfig+0x2f0>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800ce7d 	.word	0x0800ce7d
 800ce68:	0800ce85 	.word	0x0800ce85
 800ce6c:	0800ce8d 	.word	0x0800ce8d
 800ce70:	0800ce95 	.word	0x0800ce95
 800ce74:	0800cec1 	.word	0x0800cec1
 800ce78:	0800cec9 	.word	0x0800cec9
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce82:	e14a      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce84:	2304      	movs	r3, #4
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8a:	e146      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce8c:	2308      	movs	r3, #8
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce92:	e142      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce94:	2310      	movs	r3, #16
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9a:	e13e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ce9c:	cfff69f3 	.word	0xcfff69f3
 800cea0:	58000c00 	.word	0x58000c00
 800cea4:	11fff4ff 	.word	0x11fff4ff
 800cea8:	40011000 	.word	0x40011000
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	40004400 	.word	0x40004400
 800ceb4:	40004800 	.word	0x40004800
 800ceb8:	40004c00 	.word	0x40004c00
 800cebc:	40005000 	.word	0x40005000
 800cec0:	2320      	movs	r3, #32
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec6:	e128      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cec8:	2340      	movs	r3, #64	; 0x40
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cece:	e124      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ced0:	2380      	movs	r3, #128	; 0x80
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced6:	e120      	b.n	800d11a <UART_SetConfig+0x5a6>
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4acb      	ldr	r2, [pc, #812]	; (800d20c <UART_SetConfig+0x698>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d176      	bne.n	800cfd0 <UART_SetConfig+0x45c>
 800cee2:	4bcb      	ldr	r3, [pc, #812]	; (800d210 <UART_SetConfig+0x69c>)
 800cee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ceea:	2b28      	cmp	r3, #40	; 0x28
 800ceec:	d86c      	bhi.n	800cfc8 <UART_SetConfig+0x454>
 800ceee:	a201      	add	r2, pc, #4	; (adr r2, 800cef4 <UART_SetConfig+0x380>)
 800cef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef4:	0800cf99 	.word	0x0800cf99
 800cef8:	0800cfc9 	.word	0x0800cfc9
 800cefc:	0800cfc9 	.word	0x0800cfc9
 800cf00:	0800cfc9 	.word	0x0800cfc9
 800cf04:	0800cfc9 	.word	0x0800cfc9
 800cf08:	0800cfc9 	.word	0x0800cfc9
 800cf0c:	0800cfc9 	.word	0x0800cfc9
 800cf10:	0800cfc9 	.word	0x0800cfc9
 800cf14:	0800cfa1 	.word	0x0800cfa1
 800cf18:	0800cfc9 	.word	0x0800cfc9
 800cf1c:	0800cfc9 	.word	0x0800cfc9
 800cf20:	0800cfc9 	.word	0x0800cfc9
 800cf24:	0800cfc9 	.word	0x0800cfc9
 800cf28:	0800cfc9 	.word	0x0800cfc9
 800cf2c:	0800cfc9 	.word	0x0800cfc9
 800cf30:	0800cfc9 	.word	0x0800cfc9
 800cf34:	0800cfa9 	.word	0x0800cfa9
 800cf38:	0800cfc9 	.word	0x0800cfc9
 800cf3c:	0800cfc9 	.word	0x0800cfc9
 800cf40:	0800cfc9 	.word	0x0800cfc9
 800cf44:	0800cfc9 	.word	0x0800cfc9
 800cf48:	0800cfc9 	.word	0x0800cfc9
 800cf4c:	0800cfc9 	.word	0x0800cfc9
 800cf50:	0800cfc9 	.word	0x0800cfc9
 800cf54:	0800cfb1 	.word	0x0800cfb1
 800cf58:	0800cfc9 	.word	0x0800cfc9
 800cf5c:	0800cfc9 	.word	0x0800cfc9
 800cf60:	0800cfc9 	.word	0x0800cfc9
 800cf64:	0800cfc9 	.word	0x0800cfc9
 800cf68:	0800cfc9 	.word	0x0800cfc9
 800cf6c:	0800cfc9 	.word	0x0800cfc9
 800cf70:	0800cfc9 	.word	0x0800cfc9
 800cf74:	0800cfb9 	.word	0x0800cfb9
 800cf78:	0800cfc9 	.word	0x0800cfc9
 800cf7c:	0800cfc9 	.word	0x0800cfc9
 800cf80:	0800cfc9 	.word	0x0800cfc9
 800cf84:	0800cfc9 	.word	0x0800cfc9
 800cf88:	0800cfc9 	.word	0x0800cfc9
 800cf8c:	0800cfc9 	.word	0x0800cfc9
 800cf90:	0800cfc9 	.word	0x0800cfc9
 800cf94:	0800cfc1 	.word	0x0800cfc1
 800cf98:	2301      	movs	r3, #1
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9e:	e0bc      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfa0:	2304      	movs	r3, #4
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa6:	e0b8      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfa8:	2308      	movs	r3, #8
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfae:	e0b4      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb6:	e0b0      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfb8:	2320      	movs	r3, #32
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfbe:	e0ac      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfc0:	2340      	movs	r3, #64	; 0x40
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc6:	e0a8      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfc8:	2380      	movs	r3, #128	; 0x80
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfce:	e0a4      	b.n	800d11a <UART_SetConfig+0x5a6>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a8f      	ldr	r2, [pc, #572]	; (800d214 <UART_SetConfig+0x6a0>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d130      	bne.n	800d03c <UART_SetConfig+0x4c8>
 800cfda:	4b8d      	ldr	r3, [pc, #564]	; (800d210 <UART_SetConfig+0x69c>)
 800cfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfde:	f003 0307 	and.w	r3, r3, #7
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d826      	bhi.n	800d034 <UART_SetConfig+0x4c0>
 800cfe6:	a201      	add	r2, pc, #4	; (adr r2, 800cfec <UART_SetConfig+0x478>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d005 	.word	0x0800d005
 800cff0:	0800d00d 	.word	0x0800d00d
 800cff4:	0800d015 	.word	0x0800d015
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d025 	.word	0x0800d025
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	2300      	movs	r3, #0
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00a:	e086      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d00c:	2304      	movs	r3, #4
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d012:	e082      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d014:	2308      	movs	r3, #8
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d01a:	e07e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d01c:	2310      	movs	r3, #16
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d022:	e07a      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d024:	2320      	movs	r3, #32
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02a:	e076      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d02c:	2340      	movs	r3, #64	; 0x40
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d032:	e072      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d034:	2380      	movs	r3, #128	; 0x80
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e06e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a75      	ldr	r2, [pc, #468]	; (800d218 <UART_SetConfig+0x6a4>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d130      	bne.n	800d0a8 <UART_SetConfig+0x534>
 800d046:	4b72      	ldr	r3, [pc, #456]	; (800d210 <UART_SetConfig+0x69c>)
 800d048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	2b05      	cmp	r3, #5
 800d050:	d826      	bhi.n	800d0a0 <UART_SetConfig+0x52c>
 800d052:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <UART_SetConfig+0x4e4>)
 800d054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d058:	0800d071 	.word	0x0800d071
 800d05c:	0800d079 	.word	0x0800d079
 800d060:	0800d081 	.word	0x0800d081
 800d064:	0800d089 	.word	0x0800d089
 800d068:	0800d091 	.word	0x0800d091
 800d06c:	0800d099 	.word	0x0800d099
 800d070:	2300      	movs	r3, #0
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d076:	e050      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d078:	2304      	movs	r3, #4
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d07e:	e04c      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d080:	2308      	movs	r3, #8
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d086:	e048      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d088:	2310      	movs	r3, #16
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08e:	e044      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d090:	2320      	movs	r3, #32
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d096:	e040      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d098:	2340      	movs	r3, #64	; 0x40
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d09e:	e03c      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d0a0:	2380      	movs	r3, #128	; 0x80
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0a6:	e038      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a5b      	ldr	r2, [pc, #364]	; (800d21c <UART_SetConfig+0x6a8>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d130      	bne.n	800d114 <UART_SetConfig+0x5a0>
 800d0b2:	4b57      	ldr	r3, [pc, #348]	; (800d210 <UART_SetConfig+0x69c>)
 800d0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b05      	cmp	r3, #5
 800d0bc:	d826      	bhi.n	800d10c <UART_SetConfig+0x598>
 800d0be:	a201      	add	r2, pc, #4	; (adr r2, 800d0c4 <UART_SetConfig+0x550>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d0dd 	.word	0x0800d0dd
 800d0c8:	0800d0e5 	.word	0x0800d0e5
 800d0cc:	0800d0ed 	.word	0x0800d0ed
 800d0d0:	0800d0f5 	.word	0x0800d0f5
 800d0d4:	0800d0fd 	.word	0x0800d0fd
 800d0d8:	0800d105 	.word	0x0800d105
 800d0dc:	2302      	movs	r3, #2
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0e2:	e01a      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ea:	e016      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d0ec:	2308      	movs	r3, #8
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0f2:	e012      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0fa:	e00e      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d0fc:	2320      	movs	r3, #32
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d102:	e00a      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d104:	2340      	movs	r3, #64	; 0x40
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d10a:	e006      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d10c:	2380      	movs	r3, #128	; 0x80
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e002      	b.n	800d11a <UART_SetConfig+0x5a6>
 800d114:	2380      	movs	r3, #128	; 0x80
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a3f      	ldr	r2, [pc, #252]	; (800d21c <UART_SetConfig+0x6a8>)
 800d120:	4293      	cmp	r3, r2
 800d122:	f040 80f8 	bne.w	800d316 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d126:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	dc46      	bgt.n	800d1bc <UART_SetConfig+0x648>
 800d12e:	2b02      	cmp	r3, #2
 800d130:	f2c0 8082 	blt.w	800d238 <UART_SetConfig+0x6c4>
 800d134:	3b02      	subs	r3, #2
 800d136:	2b1e      	cmp	r3, #30
 800d138:	d87e      	bhi.n	800d238 <UART_SetConfig+0x6c4>
 800d13a:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <UART_SetConfig+0x5cc>)
 800d13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d140:	0800d1c3 	.word	0x0800d1c3
 800d144:	0800d239 	.word	0x0800d239
 800d148:	0800d1cb 	.word	0x0800d1cb
 800d14c:	0800d239 	.word	0x0800d239
 800d150:	0800d239 	.word	0x0800d239
 800d154:	0800d239 	.word	0x0800d239
 800d158:	0800d1db 	.word	0x0800d1db
 800d15c:	0800d239 	.word	0x0800d239
 800d160:	0800d239 	.word	0x0800d239
 800d164:	0800d239 	.word	0x0800d239
 800d168:	0800d239 	.word	0x0800d239
 800d16c:	0800d239 	.word	0x0800d239
 800d170:	0800d239 	.word	0x0800d239
 800d174:	0800d239 	.word	0x0800d239
 800d178:	0800d1eb 	.word	0x0800d1eb
 800d17c:	0800d239 	.word	0x0800d239
 800d180:	0800d239 	.word	0x0800d239
 800d184:	0800d239 	.word	0x0800d239
 800d188:	0800d239 	.word	0x0800d239
 800d18c:	0800d239 	.word	0x0800d239
 800d190:	0800d239 	.word	0x0800d239
 800d194:	0800d239 	.word	0x0800d239
 800d198:	0800d239 	.word	0x0800d239
 800d19c:	0800d239 	.word	0x0800d239
 800d1a0:	0800d239 	.word	0x0800d239
 800d1a4:	0800d239 	.word	0x0800d239
 800d1a8:	0800d239 	.word	0x0800d239
 800d1ac:	0800d239 	.word	0x0800d239
 800d1b0:	0800d239 	.word	0x0800d239
 800d1b4:	0800d239 	.word	0x0800d239
 800d1b8:	0800d22b 	.word	0x0800d22b
 800d1bc:	2b40      	cmp	r3, #64	; 0x40
 800d1be:	d037      	beq.n	800d230 <UART_SetConfig+0x6bc>
 800d1c0:	e03a      	b.n	800d238 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d1c2:	f7fc fee3 	bl	8009f8c <HAL_RCCEx_GetD3PCLK1Freq>
 800d1c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1c8:	e03c      	b.n	800d244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fc fef2 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d8:	e034      	b.n	800d244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1da:	f107 0318 	add.w	r3, r7, #24
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fd f83e 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1e8:	e02c      	b.n	800d244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1ea:	4b09      	ldr	r3, [pc, #36]	; (800d210 <UART_SetConfig+0x69c>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f003 0320 	and.w	r3, r3, #32
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d016      	beq.n	800d224 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1f6:	4b06      	ldr	r3, [pc, #24]	; (800d210 <UART_SetConfig+0x69c>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	08db      	lsrs	r3, r3, #3
 800d1fc:	f003 0303 	and.w	r3, r3, #3
 800d200:	4a07      	ldr	r2, [pc, #28]	; (800d220 <UART_SetConfig+0x6ac>)
 800d202:	fa22 f303 	lsr.w	r3, r2, r3
 800d206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d208:	e01c      	b.n	800d244 <UART_SetConfig+0x6d0>
 800d20a:	bf00      	nop
 800d20c:	40011400 	.word	0x40011400
 800d210:	58024400 	.word	0x58024400
 800d214:	40007800 	.word	0x40007800
 800d218:	40007c00 	.word	0x40007c00
 800d21c:	58000c00 	.word	0x58000c00
 800d220:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d224:	4b9d      	ldr	r3, [pc, #628]	; (800d49c <UART_SetConfig+0x928>)
 800d226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d228:	e00c      	b.n	800d244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d22a:	4b9d      	ldr	r3, [pc, #628]	; (800d4a0 <UART_SetConfig+0x92c>)
 800d22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d22e:	e009      	b.n	800d244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d236:	e005      	b.n	800d244 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d242:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d246:	2b00      	cmp	r3, #0
 800d248:	f000 81de 	beq.w	800d608 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	4a94      	ldr	r2, [pc, #592]	; (800d4a4 <UART_SetConfig+0x930>)
 800d252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d256:	461a      	mov	r2, r3
 800d258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d25e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	685a      	ldr	r2, [r3, #4]
 800d264:	4613      	mov	r3, r2
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	4413      	add	r3, r2
 800d26a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d305      	bcc.n	800d27c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d278:	429a      	cmp	r2, r3
 800d27a:	d903      	bls.n	800d284 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d282:	e1c1      	b.n	800d608 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d286:	2200      	movs	r2, #0
 800d288:	60bb      	str	r3, [r7, #8]
 800d28a:	60fa      	str	r2, [r7, #12]
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d290:	4a84      	ldr	r2, [pc, #528]	; (800d4a4 <UART_SetConfig+0x930>)
 800d292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d296:	b29b      	uxth	r3, r3
 800d298:	2200      	movs	r2, #0
 800d29a:	603b      	str	r3, [r7, #0]
 800d29c:	607a      	str	r2, [r7, #4]
 800d29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2a6:	f7f3 fa2f 	bl	8000708 <__aeabi_uldivmod>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	f04f 0200 	mov.w	r2, #0
 800d2b6:	f04f 0300 	mov.w	r3, #0
 800d2ba:	020b      	lsls	r3, r1, #8
 800d2bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2c0:	0202      	lsls	r2, r0, #8
 800d2c2:	6979      	ldr	r1, [r7, #20]
 800d2c4:	6849      	ldr	r1, [r1, #4]
 800d2c6:	0849      	lsrs	r1, r1, #1
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	eb12 0804 	adds.w	r8, r2, r4
 800d2d2:	eb43 0905 	adc.w	r9, r3, r5
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	469a      	mov	sl, r3
 800d2de:	4693      	mov	fp, r2
 800d2e0:	4652      	mov	r2, sl
 800d2e2:	465b      	mov	r3, fp
 800d2e4:	4640      	mov	r0, r8
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	f7f3 fa0e 	bl	8000708 <__aeabi_uldivmod>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2fa:	d308      	bcc.n	800d30e <UART_SetConfig+0x79a>
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d302:	d204      	bcs.n	800d30e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d30a:	60da      	str	r2, [r3, #12]
 800d30c:	e17c      	b.n	800d608 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d314:	e178      	b.n	800d608 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d31e:	f040 80c5 	bne.w	800d4ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d322:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d326:	2b20      	cmp	r3, #32
 800d328:	dc48      	bgt.n	800d3bc <UART_SetConfig+0x848>
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	db7b      	blt.n	800d426 <UART_SetConfig+0x8b2>
 800d32e:	2b20      	cmp	r3, #32
 800d330:	d879      	bhi.n	800d426 <UART_SetConfig+0x8b2>
 800d332:	a201      	add	r2, pc, #4	; (adr r2, 800d338 <UART_SetConfig+0x7c4>)
 800d334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d338:	0800d3c3 	.word	0x0800d3c3
 800d33c:	0800d3cb 	.word	0x0800d3cb
 800d340:	0800d427 	.word	0x0800d427
 800d344:	0800d427 	.word	0x0800d427
 800d348:	0800d3d3 	.word	0x0800d3d3
 800d34c:	0800d427 	.word	0x0800d427
 800d350:	0800d427 	.word	0x0800d427
 800d354:	0800d427 	.word	0x0800d427
 800d358:	0800d3e3 	.word	0x0800d3e3
 800d35c:	0800d427 	.word	0x0800d427
 800d360:	0800d427 	.word	0x0800d427
 800d364:	0800d427 	.word	0x0800d427
 800d368:	0800d427 	.word	0x0800d427
 800d36c:	0800d427 	.word	0x0800d427
 800d370:	0800d427 	.word	0x0800d427
 800d374:	0800d427 	.word	0x0800d427
 800d378:	0800d3f3 	.word	0x0800d3f3
 800d37c:	0800d427 	.word	0x0800d427
 800d380:	0800d427 	.word	0x0800d427
 800d384:	0800d427 	.word	0x0800d427
 800d388:	0800d427 	.word	0x0800d427
 800d38c:	0800d427 	.word	0x0800d427
 800d390:	0800d427 	.word	0x0800d427
 800d394:	0800d427 	.word	0x0800d427
 800d398:	0800d427 	.word	0x0800d427
 800d39c:	0800d427 	.word	0x0800d427
 800d3a0:	0800d427 	.word	0x0800d427
 800d3a4:	0800d427 	.word	0x0800d427
 800d3a8:	0800d427 	.word	0x0800d427
 800d3ac:	0800d427 	.word	0x0800d427
 800d3b0:	0800d427 	.word	0x0800d427
 800d3b4:	0800d427 	.word	0x0800d427
 800d3b8:	0800d419 	.word	0x0800d419
 800d3bc:	2b40      	cmp	r3, #64	; 0x40
 800d3be:	d02e      	beq.n	800d41e <UART_SetConfig+0x8aa>
 800d3c0:	e031      	b.n	800d426 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3c2:	f7fa fdeb 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 800d3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3c8:	e033      	b.n	800d432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3ca:	f7fa fdfd 	bl	8007fc8 <HAL_RCC_GetPCLK2Freq>
 800d3ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3d0:	e02f      	b.n	800d432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fc fdee 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3e0:	e027      	b.n	800d432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3e2:	f107 0318 	add.w	r3, r7, #24
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fc ff3a 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3f0:	e01f      	b.n	800d432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3f2:	4b2d      	ldr	r3, [pc, #180]	; (800d4a8 <UART_SetConfig+0x934>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0320 	and.w	r3, r3, #32
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d009      	beq.n	800d412 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3fe:	4b2a      	ldr	r3, [pc, #168]	; (800d4a8 <UART_SetConfig+0x934>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	08db      	lsrs	r3, r3, #3
 800d404:	f003 0303 	and.w	r3, r3, #3
 800d408:	4a24      	ldr	r2, [pc, #144]	; (800d49c <UART_SetConfig+0x928>)
 800d40a:	fa22 f303 	lsr.w	r3, r2, r3
 800d40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d410:	e00f      	b.n	800d432 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d412:	4b22      	ldr	r3, [pc, #136]	; (800d49c <UART_SetConfig+0x928>)
 800d414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d416:	e00c      	b.n	800d432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d418:	4b21      	ldr	r3, [pc, #132]	; (800d4a0 <UART_SetConfig+0x92c>)
 800d41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d41c:	e009      	b.n	800d432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d41e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d424:	e005      	b.n	800d432 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d426:	2300      	movs	r3, #0
 800d428:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 80e7 	beq.w	800d608 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	4a19      	ldr	r2, [pc, #100]	; (800d4a4 <UART_SetConfig+0x930>)
 800d440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d444:	461a      	mov	r2, r3
 800d446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d448:	fbb3 f3f2 	udiv	r3, r3, r2
 800d44c:	005a      	lsls	r2, r3, #1
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	085b      	lsrs	r3, r3, #1
 800d454:	441a      	add	r2, r3
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	2b0f      	cmp	r3, #15
 800d464:	d916      	bls.n	800d494 <UART_SetConfig+0x920>
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d46c:	d212      	bcs.n	800d494 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d470:	b29b      	uxth	r3, r3
 800d472:	f023 030f 	bic.w	r3, r3, #15
 800d476:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47a:	085b      	lsrs	r3, r3, #1
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	f003 0307 	and.w	r3, r3, #7
 800d482:	b29a      	uxth	r2, r3
 800d484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d486:	4313      	orrs	r3, r2
 800d488:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d490:	60da      	str	r2, [r3, #12]
 800d492:	e0b9      	b.n	800d608 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d49a:	e0b5      	b.n	800d608 <UART_SetConfig+0xa94>
 800d49c:	03d09000 	.word	0x03d09000
 800d4a0:	003d0900 	.word	0x003d0900
 800d4a4:	080156c8 	.word	0x080156c8
 800d4a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d4ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4b0:	2b20      	cmp	r3, #32
 800d4b2:	dc49      	bgt.n	800d548 <UART_SetConfig+0x9d4>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	db7c      	blt.n	800d5b2 <UART_SetConfig+0xa3e>
 800d4b8:	2b20      	cmp	r3, #32
 800d4ba:	d87a      	bhi.n	800d5b2 <UART_SetConfig+0xa3e>
 800d4bc:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <UART_SetConfig+0x950>)
 800d4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c2:	bf00      	nop
 800d4c4:	0800d54f 	.word	0x0800d54f
 800d4c8:	0800d557 	.word	0x0800d557
 800d4cc:	0800d5b3 	.word	0x0800d5b3
 800d4d0:	0800d5b3 	.word	0x0800d5b3
 800d4d4:	0800d55f 	.word	0x0800d55f
 800d4d8:	0800d5b3 	.word	0x0800d5b3
 800d4dc:	0800d5b3 	.word	0x0800d5b3
 800d4e0:	0800d5b3 	.word	0x0800d5b3
 800d4e4:	0800d56f 	.word	0x0800d56f
 800d4e8:	0800d5b3 	.word	0x0800d5b3
 800d4ec:	0800d5b3 	.word	0x0800d5b3
 800d4f0:	0800d5b3 	.word	0x0800d5b3
 800d4f4:	0800d5b3 	.word	0x0800d5b3
 800d4f8:	0800d5b3 	.word	0x0800d5b3
 800d4fc:	0800d5b3 	.word	0x0800d5b3
 800d500:	0800d5b3 	.word	0x0800d5b3
 800d504:	0800d57f 	.word	0x0800d57f
 800d508:	0800d5b3 	.word	0x0800d5b3
 800d50c:	0800d5b3 	.word	0x0800d5b3
 800d510:	0800d5b3 	.word	0x0800d5b3
 800d514:	0800d5b3 	.word	0x0800d5b3
 800d518:	0800d5b3 	.word	0x0800d5b3
 800d51c:	0800d5b3 	.word	0x0800d5b3
 800d520:	0800d5b3 	.word	0x0800d5b3
 800d524:	0800d5b3 	.word	0x0800d5b3
 800d528:	0800d5b3 	.word	0x0800d5b3
 800d52c:	0800d5b3 	.word	0x0800d5b3
 800d530:	0800d5b3 	.word	0x0800d5b3
 800d534:	0800d5b3 	.word	0x0800d5b3
 800d538:	0800d5b3 	.word	0x0800d5b3
 800d53c:	0800d5b3 	.word	0x0800d5b3
 800d540:	0800d5b3 	.word	0x0800d5b3
 800d544:	0800d5a5 	.word	0x0800d5a5
 800d548:	2b40      	cmp	r3, #64	; 0x40
 800d54a:	d02e      	beq.n	800d5aa <UART_SetConfig+0xa36>
 800d54c:	e031      	b.n	800d5b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d54e:	f7fa fd25 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 800d552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d554:	e033      	b.n	800d5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d556:	f7fa fd37 	bl	8007fc8 <HAL_RCC_GetPCLK2Freq>
 800d55a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d55c:	e02f      	b.n	800d5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d55e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d562:	4618      	mov	r0, r3
 800d564:	f7fc fd28 	bl	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d56c:	e027      	b.n	800d5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d56e:	f107 0318 	add.w	r3, r7, #24
 800d572:	4618      	mov	r0, r3
 800d574:	f7fc fe74 	bl	800a260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d57c:	e01f      	b.n	800d5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d57e:	4b2d      	ldr	r3, [pc, #180]	; (800d634 <UART_SetConfig+0xac0>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d009      	beq.n	800d59e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d58a:	4b2a      	ldr	r3, [pc, #168]	; (800d634 <UART_SetConfig+0xac0>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	08db      	lsrs	r3, r3, #3
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	4a28      	ldr	r2, [pc, #160]	; (800d638 <UART_SetConfig+0xac4>)
 800d596:	fa22 f303 	lsr.w	r3, r2, r3
 800d59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d59c:	e00f      	b.n	800d5be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d59e:	4b26      	ldr	r3, [pc, #152]	; (800d638 <UART_SetConfig+0xac4>)
 800d5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a2:	e00c      	b.n	800d5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5a4:	4b25      	ldr	r3, [pc, #148]	; (800d63c <UART_SetConfig+0xac8>)
 800d5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a8:	e009      	b.n	800d5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5b0:	e005      	b.n	800d5be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5bc:	bf00      	nop
    }

    if (pclk != 0U)
 800d5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d021      	beq.n	800d608 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	4a1d      	ldr	r2, [pc, #116]	; (800d640 <UART_SetConfig+0xacc>)
 800d5ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	085b      	lsrs	r3, r3, #1
 800d5dc:	441a      	add	r2, r3
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	2b0f      	cmp	r3, #15
 800d5ec:	d909      	bls.n	800d602 <UART_SetConfig+0xa8e>
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5f4:	d205      	bcs.n	800d602 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	60da      	str	r2, [r3, #12]
 800d600:	e002      	b.n	800d608 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2201      	movs	r2, #1
 800d614:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	2200      	movs	r2, #0
 800d61c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2200      	movs	r2, #0
 800d622:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d624:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3748      	adds	r7, #72	; 0x48
 800d62c:	46bd      	mov	sp, r7
 800d62e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d632:	bf00      	nop
 800d634:	58024400 	.word	0x58024400
 800d638:	03d09000 	.word	0x03d09000
 800d63c:	003d0900 	.word	0x003d0900
 800d640:	080156c8 	.word	0x080156c8

0800d644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d650:	f003 0301 	and.w	r3, r3, #1
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00a      	beq.n	800d66e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	430a      	orrs	r2, r1
 800d66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d672:	f003 0302 	and.w	r3, r3, #2
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00a      	beq.n	800d690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	430a      	orrs	r2, r1
 800d68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00a      	beq.n	800d6b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b6:	f003 0308 	and.w	r3, r3, #8
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00a      	beq.n	800d6d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	430a      	orrs	r2, r1
 800d6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d8:	f003 0310 	and.w	r3, r3, #16
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00a      	beq.n	800d6f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6fa:	f003 0320 	and.w	r3, r3, #32
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00a      	beq.n	800d718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	430a      	orrs	r2, r1
 800d716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01a      	beq.n	800d75a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	430a      	orrs	r2, r1
 800d738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d742:	d10a      	bne.n	800d75a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	430a      	orrs	r2, r1
 800d758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00a      	beq.n	800d77c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	430a      	orrs	r2, r1
 800d77a:	605a      	str	r2, [r3, #4]
  }
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b098      	sub	sp, #96	; 0x60
 800d78c:	af02      	add	r7, sp, #8
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d798:	f7f5 fa20 	bl	8002bdc <HAL_GetTick>
 800d79c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 0308 	and.w	r3, r3, #8
 800d7a8:	2b08      	cmp	r3, #8
 800d7aa:	d12f      	bne.n	800d80c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f88e 	bl	800d8dc <UART_WaitOnFlagUntilTimeout>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d022      	beq.n	800d80c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ce:	e853 3f00 	ldrex	r3, [r3]
 800d7d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7da:	653b      	str	r3, [r7, #80]	; 0x50
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d7e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e6      	bne.n	800d7c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2220      	movs	r2, #32
 800d7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d808:	2303      	movs	r3, #3
 800d80a:	e063      	b.n	800d8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f003 0304 	and.w	r3, r3, #4
 800d816:	2b04      	cmp	r3, #4
 800d818:	d149      	bne.n	800d8ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d81a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d822:	2200      	movs	r2, #0
 800d824:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f857 	bl	800d8dc <UART_WaitOnFlagUntilTimeout>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d03c      	beq.n	800d8ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	623b      	str	r3, [r7, #32]
   return(result);
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d852:	633b      	str	r3, [r7, #48]	; 0x30
 800d854:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85a:	e841 2300 	strex	r3, r2, [r1]
 800d85e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e6      	bne.n	800d834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	3308      	adds	r3, #8
 800d86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	e853 3f00 	ldrex	r3, [r3]
 800d874:	60fb      	str	r3, [r7, #12]
   return(result);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f023 0301 	bic.w	r3, r3, #1
 800d87c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3308      	adds	r3, #8
 800d884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d886:	61fa      	str	r2, [r7, #28]
 800d888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d88a:	69b9      	ldr	r1, [r7, #24]
 800d88c:	69fa      	ldr	r2, [r7, #28]
 800d88e:	e841 2300 	strex	r3, r2, [r1]
 800d892:	617b      	str	r3, [r7, #20]
   return(result);
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1e5      	bne.n	800d866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2220      	movs	r2, #32
 800d89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8aa:	2303      	movs	r3, #3
 800d8ac:	e012      	b.n	800d8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2220      	movs	r2, #32
 800d8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3758      	adds	r7, #88	; 0x58
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	603b      	str	r3, [r7, #0]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8ec:	e049      	b.n	800d982 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f4:	d045      	beq.n	800d982 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8f6:	f7f5 f971 	bl	8002bdc <HAL_GetTick>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	429a      	cmp	r2, r3
 800d904:	d302      	bcc.n	800d90c <UART_WaitOnFlagUntilTimeout+0x30>
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d90c:	2303      	movs	r3, #3
 800d90e:	e048      	b.n	800d9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0304 	and.w	r3, r3, #4
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d031      	beq.n	800d982 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	69db      	ldr	r3, [r3, #28]
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b08      	cmp	r3, #8
 800d92a:	d110      	bne.n	800d94e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2208      	movs	r2, #8
 800d932:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f000 f839 	bl	800d9ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2208      	movs	r2, #8
 800d93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e029      	b.n	800d9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	69db      	ldr	r3, [r3, #28]
 800d954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d95c:	d111      	bne.n	800d982 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f000 f81f 	bl	800d9ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2220      	movs	r2, #32
 800d972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e00f      	b.n	800d9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	69da      	ldr	r2, [r3, #28]
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	4013      	ands	r3, r2
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	bf0c      	ite	eq
 800d992:	2301      	moveq	r3, #1
 800d994:	2300      	movne	r3, #0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	461a      	mov	r2, r3
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d0a6      	beq.n	800d8ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b095      	sub	sp, #84	; 0x54
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9bc:	e853 3f00 	ldrex	r3, [r3]
 800d9c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d2:	643b      	str	r3, [r7, #64]	; 0x40
 800d9d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9da:	e841 2300 	strex	r3, r2, [r1]
 800d9de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e6      	bne.n	800d9b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	e853 3f00 	ldrex	r3, [r3]
 800d9f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9f6:	69fa      	ldr	r2, [r7, #28]
 800d9f8:	4b1e      	ldr	r3, [pc, #120]	; (800da74 <UART_EndRxTransfer+0xc8>)
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3308      	adds	r3, #8
 800da04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da0e:	e841 2300 	strex	r3, r2, [r1]
 800da12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1e5      	bne.n	800d9e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d118      	bne.n	800da54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	e853 3f00 	ldrex	r3, [r3]
 800da2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f023 0310 	bic.w	r3, r3, #16
 800da36:	647b      	str	r3, [r7, #68]	; 0x44
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6979      	ldr	r1, [r7, #20]
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	613b      	str	r3, [r7, #16]
   return(result);
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e6      	bne.n	800da22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2220      	movs	r2, #32
 800da58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	675a      	str	r2, [r3, #116]	; 0x74
}
 800da68:	bf00      	nop
 800da6a:	3754      	adds	r7, #84	; 0x54
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	effffffe 	.word	0xeffffffe

0800da78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2200      	movs	r2, #0
 800da8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2200      	movs	r2, #0
 800da92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7ff f856 	bl	800cb48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da9c:	bf00      	nop
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	e853 3f00 	ldrex	r3, [r3]
 800dab8:	60bb      	str	r3, [r7, #8]
   return(result);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dac0:	61fb      	str	r3, [r7, #28]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	61bb      	str	r3, [r7, #24]
 800dacc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dace:	6979      	ldr	r1, [r7, #20]
 800dad0:	69ba      	ldr	r2, [r7, #24]
 800dad2:	e841 2300 	strex	r3, r2, [r1]
 800dad6:	613b      	str	r3, [r7, #16]
   return(result);
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1e6      	bne.n	800daac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2220      	movs	r2, #32
 800dae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff f821 	bl	800cb34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daf2:	bf00      	nop
 800daf4:	3720      	adds	r7, #32
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db02:	bf00      	nop
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db0e:	b480      	push	{r7}
 800db10:	b083      	sub	sp, #12
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db16:	bf00      	nop
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db22:	b480      	push	{r7}
 800db24:	b083      	sub	sp, #12
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db2a:	bf00      	nop
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db36:	b480      	push	{r7}
 800db38:	b085      	sub	sp, #20
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800db44:	2b01      	cmp	r3, #1
 800db46:	d101      	bne.n	800db4c <HAL_UARTEx_DisableFifoMode+0x16>
 800db48:	2302      	movs	r3, #2
 800db4a:	e027      	b.n	800db9c <HAL_UARTEx_DisableFifoMode+0x66>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2224      	movs	r2, #36	; 0x24
 800db58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f022 0201 	bic.w	r2, r2, #1
 800db72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2220      	movs	r2, #32
 800db8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3714      	adds	r7, #20
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d101      	bne.n	800dbc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	e02d      	b.n	800dc1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2224      	movs	r2, #36	; 0x24
 800dbcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f022 0201 	bic.w	r2, r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f84f 	bl	800dca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2220      	movs	r2, #32
 800dc0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e02d      	b.n	800dc98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2224      	movs	r2, #36	; 0x24
 800dc48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f022 0201 	bic.w	r2, r2, #1
 800dc62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f811 	bl	800dca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d108      	bne.n	800dcc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcc0:	e031      	b.n	800dd26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcc2:	2310      	movs	r3, #16
 800dcc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcc6:	2310      	movs	r3, #16
 800dcc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	0e5b      	lsrs	r3, r3, #25
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f003 0307 	and.w	r3, r3, #7
 800dcd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	0f5b      	lsrs	r3, r3, #29
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 0307 	and.w	r3, r3, #7
 800dce8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcea:	7bbb      	ldrb	r3, [r7, #14]
 800dcec:	7b3a      	ldrb	r2, [r7, #12]
 800dcee:	4911      	ldr	r1, [pc, #68]	; (800dd34 <UARTEx_SetNbDataToProcess+0x94>)
 800dcf0:	5c8a      	ldrb	r2, [r1, r2]
 800dcf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dcf6:	7b3a      	ldrb	r2, [r7, #12]
 800dcf8:	490f      	ldr	r1, [pc, #60]	; (800dd38 <UARTEx_SetNbDataToProcess+0x98>)
 800dcfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
 800dd0a:	7b7a      	ldrb	r2, [r7, #13]
 800dd0c:	4909      	ldr	r1, [pc, #36]	; (800dd34 <UARTEx_SetNbDataToProcess+0x94>)
 800dd0e:	5c8a      	ldrb	r2, [r1, r2]
 800dd10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd14:	7b7a      	ldrb	r2, [r7, #13]
 800dd16:	4908      	ldr	r1, [pc, #32]	; (800dd38 <UARTEx_SetNbDataToProcess+0x98>)
 800dd18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	080156e0 	.word	0x080156e0
 800dd38:	080156e8 	.word	0x080156e8

0800dd3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b084      	sub	sp, #16
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	f107 001c 	add.w	r0, r7, #28
 800dd4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d120      	bne.n	800dd96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	68da      	ldr	r2, [r3, #12]
 800dd64:	4b2a      	ldr	r3, [pc, #168]	; (800de10 <USB_CoreInit+0xd4>)
 800dd66:	4013      	ands	r3, r2
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d105      	bne.n	800dd8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 faac 	bl	800e2e8 <USB_CoreReset>
 800dd90:	4603      	mov	r3, r0
 800dd92:	73fb      	strb	r3, [r7, #15]
 800dd94:	e01a      	b.n	800ddcc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 faa0 	bl	800e2e8 <USB_CoreReset>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	639a      	str	r2, [r3, #56]	; 0x38
 800ddbe:	e005      	b.n	800ddcc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d116      	bne.n	800de00 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddd6:	b29a      	uxth	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dde0:	4b0c      	ldr	r3, [pc, #48]	; (800de14 <USB_CoreInit+0xd8>)
 800dde2:	4313      	orrs	r3, r2
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f043 0206 	orr.w	r2, r3, #6
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	f043 0220 	orr.w	r2, r3, #32
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de0c:	b004      	add	sp, #16
 800de0e:	4770      	bx	lr
 800de10:	ffbdffbf 	.word	0xffbdffbf
 800de14:	03ee0000 	.word	0x03ee0000

0800de18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	f023 0201 	bic.w	r2, r3, #1
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	460b      	mov	r3, r1
 800de44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800de56:	78fb      	ldrb	r3, [r7, #3]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d115      	bne.n	800de88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800de68:	2001      	movs	r0, #1
 800de6a:	f7f4 fec3 	bl	8002bf4 <HAL_Delay>
      ms++;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fa29 	bl	800e2cc <USB_GetMode>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d01e      	beq.n	800debe <USB_SetCurrentMode+0x84>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b31      	cmp	r3, #49	; 0x31
 800de84:	d9f0      	bls.n	800de68 <USB_SetCurrentMode+0x2e>
 800de86:	e01a      	b.n	800debe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800de88:	78fb      	ldrb	r3, [r7, #3]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d115      	bne.n	800deba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800de9a:	2001      	movs	r0, #1
 800de9c:	f7f4 feaa 	bl	8002bf4 <HAL_Delay>
      ms++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fa10 	bl	800e2cc <USB_GetMode>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d005      	beq.n	800debe <USB_SetCurrentMode+0x84>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b31      	cmp	r3, #49	; 0x31
 800deb6:	d9f0      	bls.n	800de9a <USB_SetCurrentMode+0x60>
 800deb8:	e001      	b.n	800debe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e005      	b.n	800deca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b32      	cmp	r3, #50	; 0x32
 800dec2:	d101      	bne.n	800dec8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e000      	b.n	800deca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ded4:	b084      	sub	sp, #16
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b086      	sub	sp, #24
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800deee:	2300      	movs	r3, #0
 800def0:	613b      	str	r3, [r7, #16]
 800def2:	e009      	b.n	800df08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	3340      	adds	r3, #64	; 0x40
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4413      	add	r3, r2
 800defe:	2200      	movs	r2, #0
 800df00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	3301      	adds	r3, #1
 800df06:	613b      	str	r3, [r7, #16]
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	2b0e      	cmp	r3, #14
 800df0c:	d9f2      	bls.n	800def4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800df0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d11c      	bne.n	800df4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df22:	f043 0302 	orr.w	r3, r3, #2
 800df26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	e005      	b.n	800df5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df60:	461a      	mov	r2, r3
 800df62:	2300      	movs	r3, #0
 800df64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df6c:	4619      	mov	r1, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df74:	461a      	mov	r2, r3
 800df76:	680b      	ldr	r3, [r1, #0]
 800df78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d10c      	bne.n	800df9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	2b00      	cmp	r3, #0
 800df84:	d104      	bne.n	800df90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800df86:	2100      	movs	r1, #0
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f965 	bl	800e258 <USB_SetDevSpeed>
 800df8e:	e008      	b.n	800dfa2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800df90:	2101      	movs	r1, #1
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 f960 	bl	800e258 <USB_SetDevSpeed>
 800df98:	e003      	b.n	800dfa2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800df9a:	2103      	movs	r1, #3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 f95b 	bl	800e258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dfa2:	2110      	movs	r1, #16
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 f8f3 	bl	800e190 <USB_FlushTxFifo>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f91f 	bl	800e1f8 <USB_FlushRxFifo>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfca:	461a      	mov	r2, r3
 800dfcc:	2300      	movs	r3, #0
 800dfce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	2300      	movs	r3, #0
 800dfda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	613b      	str	r3, [r7, #16]
 800dfec:	e043      	b.n	800e076 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e004:	d118      	bne.n	800e038 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10a      	bne.n	800e022 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e018:	461a      	mov	r2, r3
 800e01a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e01e:	6013      	str	r3, [r2, #0]
 800e020:	e013      	b.n	800e04a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	015a      	lsls	r2, r3, #5
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4413      	add	r3, r2
 800e02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e02e:	461a      	mov	r2, r3
 800e030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	e008      	b.n	800e04a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	015a      	lsls	r2, r3, #5
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	4413      	add	r3, r2
 800e040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e044:	461a      	mov	r2, r3
 800e046:	2300      	movs	r3, #0
 800e048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	015a      	lsls	r2, r3, #5
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	4413      	add	r3, r2
 800e052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e056:	461a      	mov	r2, r3
 800e058:	2300      	movs	r3, #0
 800e05a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	015a      	lsls	r2, r3, #5
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	4413      	add	r3, r2
 800e064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e068:	461a      	mov	r2, r3
 800e06a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e06e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	3301      	adds	r3, #1
 800e074:	613b      	str	r3, [r7, #16]
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d3b7      	bcc.n	800dfee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e07e:	2300      	movs	r3, #0
 800e080:	613b      	str	r3, [r7, #16]
 800e082:	e043      	b.n	800e10c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	015a      	lsls	r2, r3, #5
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	4413      	add	r3, r2
 800e08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e09a:	d118      	bne.n	800e0ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10a      	bne.n	800e0b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	015a      	lsls	r2, r3, #5
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0b4:	6013      	str	r3, [r2, #0]
 800e0b6:	e013      	b.n	800e0e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	e008      	b.n	800e0e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	015a      	lsls	r2, r3, #5
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0da:	461a      	mov	r2, r3
 800e0dc:	2300      	movs	r3, #0
 800e0de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	015a      	lsls	r2, r3, #5
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	015a      	lsls	r2, r3, #5
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0fe:	461a      	mov	r2, r3
 800e100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3301      	adds	r3, #1
 800e10a:	613b      	str	r3, [r7, #16]
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	429a      	cmp	r2, r3
 800e112:	d3b7      	bcc.n	800e084 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d105      	bne.n	800e148 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	f043 0210 	orr.w	r2, r3, #16
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	699a      	ldr	r2, [r3, #24]
 800e14c:	4b0e      	ldr	r3, [pc, #56]	; (800e188 <USB_DevInit+0x2b4>)
 800e14e:	4313      	orrs	r3, r2
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e156:	2b00      	cmp	r3, #0
 800e158:	d005      	beq.n	800e166 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	f043 0208 	orr.w	r2, r3, #8
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d105      	bne.n	800e178 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	699a      	ldr	r2, [r3, #24]
 800e170:	4b06      	ldr	r3, [pc, #24]	; (800e18c <USB_DevInit+0x2b8>)
 800e172:	4313      	orrs	r3, r2
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e178:	7dfb      	ldrb	r3, [r7, #23]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e184:	b004      	add	sp, #16
 800e186:	4770      	bx	lr
 800e188:	803c3800 	.word	0x803c3800
 800e18c:	40000004 	.word	0x40000004

0800e190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4a13      	ldr	r2, [pc, #76]	; (800e1f4 <USB_FlushTxFifo+0x64>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d901      	bls.n	800e1b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e01b      	b.n	800e1e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	daf2      	bge.n	800e19e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	019b      	lsls	r3, r3, #6
 800e1c0:	f043 0220 	orr.w	r2, r3, #32
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	4a08      	ldr	r2, [pc, #32]	; (800e1f4 <USB_FlushTxFifo+0x64>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d901      	bls.n	800e1da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	e006      	b.n	800e1e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	f003 0320 	and.w	r3, r3, #32
 800e1e2:	2b20      	cmp	r3, #32
 800e1e4:	d0f0      	beq.n	800e1c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	00030d40 	.word	0x00030d40

0800e1f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e200:	2300      	movs	r3, #0
 800e202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	3301      	adds	r3, #1
 800e208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4a11      	ldr	r2, [pc, #68]	; (800e254 <USB_FlushRxFifo+0x5c>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d901      	bls.n	800e216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e212:	2303      	movs	r3, #3
 800e214:	e018      	b.n	800e248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	691b      	ldr	r3, [r3, #16]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	daf2      	bge.n	800e204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e21e:	2300      	movs	r3, #0
 800e220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2210      	movs	r2, #16
 800e226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3301      	adds	r3, #1
 800e22c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	4a08      	ldr	r2, [pc, #32]	; (800e254 <USB_FlushRxFifo+0x5c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d901      	bls.n	800e23a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e236:	2303      	movs	r3, #3
 800e238:	e006      	b.n	800e248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	f003 0310 	and.w	r3, r3, #16
 800e242:	2b10      	cmp	r3, #16
 800e244:	d0f0      	beq.n	800e228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	00030d40 	.word	0x00030d40

0800e258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	68f9      	ldr	r1, [r7, #12]
 800e274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e278:	4313      	orrs	r3, r2
 800e27a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr

0800e28a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e28a:	b480      	push	{r7}
 800e28c:	b085      	sub	sp, #20
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2a4:	f023 0303 	bic.w	r3, r3, #3
 800e2a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2b8:	f043 0302 	orr.w	r3, r3, #2
 800e2bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	695b      	ldr	r3, [r3, #20]
 800e2d8:	f003 0301 	and.w	r3, r3, #1
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	4a13      	ldr	r2, [pc, #76]	; (800e34c <USB_CoreReset+0x64>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d901      	bls.n	800e306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e302:	2303      	movs	r3, #3
 800e304:	e01b      	b.n	800e33e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	daf2      	bge.n	800e2f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e30e:	2300      	movs	r3, #0
 800e310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	f043 0201 	orr.w	r2, r3, #1
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3301      	adds	r3, #1
 800e322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	4a09      	ldr	r2, [pc, #36]	; (800e34c <USB_CoreReset+0x64>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d901      	bls.n	800e330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e32c:	2303      	movs	r3, #3
 800e32e:	e006      	b.n	800e33e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d0f0      	beq.n	800e31e <USB_CoreReset+0x36>

  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	00030d40 	.word	0x00030d40

0800e350 <__NVIC_SetPriority>:
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	4603      	mov	r3, r0
 800e358:	6039      	str	r1, [r7, #0]
 800e35a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e35c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e360:	2b00      	cmp	r3, #0
 800e362:	db0a      	blt.n	800e37a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	b2da      	uxtb	r2, r3
 800e368:	490c      	ldr	r1, [pc, #48]	; (800e39c <__NVIC_SetPriority+0x4c>)
 800e36a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e36e:	0112      	lsls	r2, r2, #4
 800e370:	b2d2      	uxtb	r2, r2
 800e372:	440b      	add	r3, r1
 800e374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e378:	e00a      	b.n	800e390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	b2da      	uxtb	r2, r3
 800e37e:	4908      	ldr	r1, [pc, #32]	; (800e3a0 <__NVIC_SetPriority+0x50>)
 800e380:	88fb      	ldrh	r3, [r7, #6]
 800e382:	f003 030f 	and.w	r3, r3, #15
 800e386:	3b04      	subs	r3, #4
 800e388:	0112      	lsls	r2, r2, #4
 800e38a:	b2d2      	uxtb	r2, r2
 800e38c:	440b      	add	r3, r1
 800e38e:	761a      	strb	r2, [r3, #24]
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	e000e100 	.word	0xe000e100
 800e3a0:	e000ed00 	.word	0xe000ed00

0800e3a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e3a8:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <SysTick_Handler+0x1c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e3ac:	f002 f960 	bl	8010670 <xTaskGetSchedulerState>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d001      	beq.n	800e3ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e3b6:	f000 fd97 	bl	800eee8 <xPortSysTickHandler>
  }
}
 800e3ba:	bf00      	nop
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	e000e010 	.word	0xe000e010

0800e3c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	f06f 0004 	mvn.w	r0, #4
 800e3ce:	f7ff ffbf 	bl	800e350 <__NVIC_SetPriority>
#endif
}
 800e3d2:	bf00      	nop
 800e3d4:	bd80      	pop	{r7, pc}
	...

0800e3d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3de:	f3ef 8305 	mrs	r3, IPSR
 800e3e2:	603b      	str	r3, [r7, #0]
  return(result);
 800e3e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d003      	beq.n	800e3f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e3ea:	f06f 0305 	mvn.w	r3, #5
 800e3ee:	607b      	str	r3, [r7, #4]
 800e3f0:	e00c      	b.n	800e40c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e3f2:	4b0a      	ldr	r3, [pc, #40]	; (800e41c <osKernelInitialize+0x44>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d105      	bne.n	800e406 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e3fa:	4b08      	ldr	r3, [pc, #32]	; (800e41c <osKernelInitialize+0x44>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e400:	2300      	movs	r3, #0
 800e402:	607b      	str	r3, [r7, #4]
 800e404:	e002      	b.n	800e40c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295
 800e40a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e40c:	687b      	ldr	r3, [r7, #4]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	24000b6c 	.word	0x24000b6c

0800e420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e426:	f3ef 8305 	mrs	r3, IPSR
 800e42a:	603b      	str	r3, [r7, #0]
  return(result);
 800e42c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e432:	f06f 0305 	mvn.w	r3, #5
 800e436:	607b      	str	r3, [r7, #4]
 800e438:	e010      	b.n	800e45c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e43a:	4b0b      	ldr	r3, [pc, #44]	; (800e468 <osKernelStart+0x48>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d109      	bne.n	800e456 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e442:	f7ff ffbf 	bl	800e3c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e446:	4b08      	ldr	r3, [pc, #32]	; (800e468 <osKernelStart+0x48>)
 800e448:	2202      	movs	r2, #2
 800e44a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e44c:	f001 fcb4 	bl	800fdb8 <vTaskStartScheduler>
      stat = osOK;
 800e450:	2300      	movs	r3, #0
 800e452:	607b      	str	r3, [r7, #4]
 800e454:	e002      	b.n	800e45c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e45c:	687b      	ldr	r3, [r7, #4]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	24000b6c 	.word	0x24000b6c

0800e46c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08e      	sub	sp, #56	; 0x38
 800e470:	af04      	add	r7, sp, #16
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e47c:	f3ef 8305 	mrs	r3, IPSR
 800e480:	617b      	str	r3, [r7, #20]
  return(result);
 800e482:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e484:	2b00      	cmp	r3, #0
 800e486:	d17e      	bne.n	800e586 <osThreadNew+0x11a>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d07b      	beq.n	800e586 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e48e:	2380      	movs	r3, #128	; 0x80
 800e490:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e492:	2318      	movs	r3, #24
 800e494:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e496:	2300      	movs	r3, #0
 800e498:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e49a:	f04f 33ff 	mov.w	r3, #4294967295
 800e49e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d045      	beq.n	800e532 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d002      	beq.n	800e4b4 <osThreadNew+0x48>
        name = attr->name;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d002      	beq.n	800e4c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d008      	beq.n	800e4da <osThreadNew+0x6e>
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	2b38      	cmp	r3, #56	; 0x38
 800e4cc:	d805      	bhi.n	800e4da <osThreadNew+0x6e>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <osThreadNew+0x72>
        return (NULL);
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e054      	b.n	800e588 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	695b      	ldr	r3, [r3, #20]
 800e4ea:	089b      	lsrs	r3, r3, #2
 800e4ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00e      	beq.n	800e514 <osThreadNew+0xa8>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	2ba7      	cmp	r3, #167	; 0xa7
 800e4fc:	d90a      	bls.n	800e514 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e502:	2b00      	cmp	r3, #0
 800e504:	d006      	beq.n	800e514 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <osThreadNew+0xa8>
        mem = 1;
 800e50e:	2301      	movs	r3, #1
 800e510:	61bb      	str	r3, [r7, #24]
 800e512:	e010      	b.n	800e536 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10c      	bne.n	800e536 <osThreadNew+0xca>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d108      	bne.n	800e536 <osThreadNew+0xca>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <osThreadNew+0xca>
          mem = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	61bb      	str	r3, [r7, #24]
 800e530:	e001      	b.n	800e536 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d110      	bne.n	800e55e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e544:	9202      	str	r2, [sp, #8]
 800e546:	9301      	str	r3, [sp, #4]
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	6a3a      	ldr	r2, [r7, #32]
 800e550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f001 fa44 	bl	800f9e0 <xTaskCreateStatic>
 800e558:	4603      	mov	r3, r0
 800e55a:	613b      	str	r3, [r7, #16]
 800e55c:	e013      	b.n	800e586 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d110      	bne.n	800e586 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	b29a      	uxth	r2, r3
 800e568:	f107 0310 	add.w	r3, r7, #16
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f001 fa8f 	bl	800fa9a <xTaskCreate>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d001      	beq.n	800e586 <osThreadNew+0x11a>
            hTask = NULL;
 800e582:	2300      	movs	r3, #0
 800e584:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e586:	693b      	ldr	r3, [r7, #16]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3728      	adds	r7, #40	; 0x28
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e598:	f3ef 8305 	mrs	r3, IPSR
 800e59c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e59e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d003      	beq.n	800e5ac <osDelay+0x1c>
    stat = osErrorISR;
 800e5a4:	f06f 0305 	mvn.w	r3, #5
 800e5a8:	60fb      	str	r3, [r7, #12]
 800e5aa:	e007      	b.n	800e5bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d002      	beq.n	800e5bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f001 fbca 	bl	800fd50 <vTaskDelay>
    }
  }

  return (stat);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4a07      	ldr	r2, [pc, #28]	; (800e5f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800e5d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	4a06      	ldr	r2, [pc, #24]	; (800e5f8 <vApplicationGetIdleTaskMemory+0x30>)
 800e5de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2280      	movs	r2, #128	; 0x80
 800e5e4:	601a      	str	r2, [r3, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	24000b70 	.word	0x24000b70
 800e5f8:	24000c18 	.word	0x24000c18

0800e5fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	4a07      	ldr	r2, [pc, #28]	; (800e628 <vApplicationGetTimerTaskMemory+0x2c>)
 800e60c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	4a06      	ldr	r2, [pc, #24]	; (800e62c <vApplicationGetTimerTaskMemory+0x30>)
 800e612:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e61a:	601a      	str	r2, [r3, #0]
}
 800e61c:	bf00      	nop
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	24000e18 	.word	0x24000e18
 800e62c:	24000ec0 	.word	0x24000ec0

0800e630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b08a      	sub	sp, #40	; 0x28
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e63c:	f001 fc2c 	bl	800fe98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e640:	4b5b      	ldr	r3, [pc, #364]	; (800e7b0 <pvPortMalloc+0x180>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e648:	f000 f920 	bl	800e88c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e64c:	4b59      	ldr	r3, [pc, #356]	; (800e7b4 <pvPortMalloc+0x184>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4013      	ands	r3, r2
 800e654:	2b00      	cmp	r3, #0
 800e656:	f040 8093 	bne.w	800e780 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01d      	beq.n	800e69c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e660:	2208      	movs	r2, #8
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4413      	add	r3, r2
 800e666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f003 0307 	and.w	r3, r3, #7
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d014      	beq.n	800e69c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f023 0307 	bic.w	r3, r3, #7
 800e678:	3308      	adds	r3, #8
 800e67a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f003 0307 	and.w	r3, r3, #7
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00a      	beq.n	800e69c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e698:	bf00      	nop
 800e69a:	e7fe      	b.n	800e69a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d06e      	beq.n	800e780 <pvPortMalloc+0x150>
 800e6a2:	4b45      	ldr	r3, [pc, #276]	; (800e7b8 <pvPortMalloc+0x188>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d869      	bhi.n	800e780 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e6ac:	4b43      	ldr	r3, [pc, #268]	; (800e7bc <pvPortMalloc+0x18c>)
 800e6ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e6b0:	4b42      	ldr	r3, [pc, #264]	; (800e7bc <pvPortMalloc+0x18c>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6b6:	e004      	b.n	800e6c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d903      	bls.n	800e6d4 <pvPortMalloc+0xa4>
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1f1      	bne.n	800e6b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6d4:	4b36      	ldr	r3, [pc, #216]	; (800e7b0 <pvPortMalloc+0x180>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d050      	beq.n	800e780 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2208      	movs	r2, #8
 800e6e4:	4413      	add	r3, r2
 800e6e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	6a3b      	ldr	r3, [r7, #32]
 800e6ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	685a      	ldr	r2, [r3, #4]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	1ad2      	subs	r2, r2, r3
 800e6f8:	2308      	movs	r3, #8
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d91f      	bls.n	800e740 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4413      	add	r3, r2
 800e706:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	f003 0307 	and.w	r3, r3, #7
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00a      	beq.n	800e728 <pvPortMalloc+0xf8>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	613b      	str	r3, [r7, #16]
}
 800e724:	bf00      	nop
 800e726:	e7fe      	b.n	800e726 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	685a      	ldr	r2, [r3, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	1ad2      	subs	r2, r2, r3
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e73a:	69b8      	ldr	r0, [r7, #24]
 800e73c:	f000 f908 	bl	800e950 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e740:	4b1d      	ldr	r3, [pc, #116]	; (800e7b8 <pvPortMalloc+0x188>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	4a1b      	ldr	r2, [pc, #108]	; (800e7b8 <pvPortMalloc+0x188>)
 800e74c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e74e:	4b1a      	ldr	r3, [pc, #104]	; (800e7b8 <pvPortMalloc+0x188>)
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	4b1b      	ldr	r3, [pc, #108]	; (800e7c0 <pvPortMalloc+0x190>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	429a      	cmp	r2, r3
 800e758:	d203      	bcs.n	800e762 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e75a:	4b17      	ldr	r3, [pc, #92]	; (800e7b8 <pvPortMalloc+0x188>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4a18      	ldr	r2, [pc, #96]	; (800e7c0 <pvPortMalloc+0x190>)
 800e760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <pvPortMalloc+0x184>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	431a      	orrs	r2, r3
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	2200      	movs	r2, #0
 800e774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e776:	4b13      	ldr	r3, [pc, #76]	; (800e7c4 <pvPortMalloc+0x194>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	3301      	adds	r3, #1
 800e77c:	4a11      	ldr	r2, [pc, #68]	; (800e7c4 <pvPortMalloc+0x194>)
 800e77e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e780:	f001 fb98 	bl	800feb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	f003 0307 	and.w	r3, r3, #7
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00a      	beq.n	800e7a4 <pvPortMalloc+0x174>
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	60fb      	str	r3, [r7, #12]
}
 800e7a0:	bf00      	nop
 800e7a2:	e7fe      	b.n	800e7a2 <pvPortMalloc+0x172>
	return pvReturn;
 800e7a4:	69fb      	ldr	r3, [r7, #28]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3728      	adds	r7, #40	; 0x28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	24004ec8 	.word	0x24004ec8
 800e7b4:	24004edc 	.word	0x24004edc
 800e7b8:	24004ecc 	.word	0x24004ecc
 800e7bc:	24004ec0 	.word	0x24004ec0
 800e7c0:	24004ed0 	.word	0x24004ed0
 800e7c4:	24004ed4 	.word	0x24004ed4

0800e7c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d04d      	beq.n	800e876 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7da:	2308      	movs	r3, #8
 800e7dc:	425b      	negs	r3, r3
 800e7de:	697a      	ldr	r2, [r7, #20]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	4b24      	ldr	r3, [pc, #144]	; (800e880 <vPortFree+0xb8>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10a      	bne.n	800e80c <vPortFree+0x44>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	60fb      	str	r3, [r7, #12]
}
 800e808:	bf00      	nop
 800e80a:	e7fe      	b.n	800e80a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00a      	beq.n	800e82a <vPortFree+0x62>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	60bb      	str	r3, [r7, #8]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	685a      	ldr	r2, [r3, #4]
 800e82e:	4b14      	ldr	r3, [pc, #80]	; (800e880 <vPortFree+0xb8>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4013      	ands	r3, r2
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01e      	beq.n	800e876 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d11a      	bne.n	800e876 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <vPortFree+0xb8>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	43db      	mvns	r3, r3
 800e84a:	401a      	ands	r2, r3
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e850:	f001 fb22 	bl	800fe98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	685a      	ldr	r2, [r3, #4]
 800e858:	4b0a      	ldr	r3, [pc, #40]	; (800e884 <vPortFree+0xbc>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4413      	add	r3, r2
 800e85e:	4a09      	ldr	r2, [pc, #36]	; (800e884 <vPortFree+0xbc>)
 800e860:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e862:	6938      	ldr	r0, [r7, #16]
 800e864:	f000 f874 	bl	800e950 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e868:	4b07      	ldr	r3, [pc, #28]	; (800e888 <vPortFree+0xc0>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3301      	adds	r3, #1
 800e86e:	4a06      	ldr	r2, [pc, #24]	; (800e888 <vPortFree+0xc0>)
 800e870:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e872:	f001 fb1f 	bl	800feb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e876:	bf00      	nop
 800e878:	3718      	adds	r7, #24
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	24004edc 	.word	0x24004edc
 800e884:	24004ecc 	.word	0x24004ecc
 800e888:	24004ed8 	.word	0x24004ed8

0800e88c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e892:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e896:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e898:	4b27      	ldr	r3, [pc, #156]	; (800e938 <prvHeapInit+0xac>)
 800e89a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f003 0307 	and.w	r3, r3, #7
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00c      	beq.n	800e8c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3307      	adds	r3, #7
 800e8aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f023 0307 	bic.w	r3, r3, #7
 800e8b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	4a1f      	ldr	r2, [pc, #124]	; (800e938 <prvHeapInit+0xac>)
 800e8bc:	4413      	add	r3, r2
 800e8be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8c4:	4a1d      	ldr	r2, [pc, #116]	; (800e93c <prvHeapInit+0xb0>)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8ca:	4b1c      	ldr	r3, [pc, #112]	; (800e93c <prvHeapInit+0xb0>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8d8:	2208      	movs	r2, #8
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	1a9b      	subs	r3, r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f023 0307 	bic.w	r3, r3, #7
 800e8e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	4a15      	ldr	r2, [pc, #84]	; (800e940 <prvHeapInit+0xb4>)
 800e8ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8ee:	4b14      	ldr	r3, [pc, #80]	; (800e940 <prvHeapInit+0xb4>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8f6:	4b12      	ldr	r3, [pc, #72]	; (800e940 <prvHeapInit+0xb4>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	1ad2      	subs	r2, r2, r3
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e90c:	4b0c      	ldr	r3, [pc, #48]	; (800e940 <prvHeapInit+0xb4>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	4a0a      	ldr	r2, [pc, #40]	; (800e944 <prvHeapInit+0xb8>)
 800e91a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	4a09      	ldr	r2, [pc, #36]	; (800e948 <prvHeapInit+0xbc>)
 800e922:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e924:	4b09      	ldr	r3, [pc, #36]	; (800e94c <prvHeapInit+0xc0>)
 800e926:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e92a:	601a      	str	r2, [r3, #0]
}
 800e92c:	bf00      	nop
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	240012c0 	.word	0x240012c0
 800e93c:	24004ec0 	.word	0x24004ec0
 800e940:	24004ec8 	.word	0x24004ec8
 800e944:	24004ed0 	.word	0x24004ed0
 800e948:	24004ecc 	.word	0x24004ecc
 800e94c:	24004edc 	.word	0x24004edc

0800e950 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e958:	4b28      	ldr	r3, [pc, #160]	; (800e9fc <prvInsertBlockIntoFreeList+0xac>)
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	e002      	b.n	800e964 <prvInsertBlockIntoFreeList+0x14>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d8f7      	bhi.n	800e95e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	68ba      	ldr	r2, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d108      	bne.n	800e992 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	441a      	add	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	441a      	add	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d118      	bne.n	800e9d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	4b15      	ldr	r3, [pc, #84]	; (800ea00 <prvInsertBlockIntoFreeList+0xb0>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d00d      	beq.n	800e9ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	441a      	add	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	e008      	b.n	800e9e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <prvInsertBlockIntoFreeList+0xb0>)
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	e003      	b.n	800e9e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d002      	beq.n	800e9ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9ee:	bf00      	nop
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	24004ec0 	.word	0x24004ec0
 800ea00:	24004ec8 	.word	0x24004ec8

0800ea04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f103 0208 	add.w	r2, r3, #8
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f103 0208 	add.w	r2, r3, #8
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f103 0208 	add.w	r2, r3, #8
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea52:	bf00      	nop
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	689a      	ldr	r2, [r3, #8]
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	683a      	ldr	r2, [r7, #0]
 800ea88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	601a      	str	r2, [r3, #0]
}
 800ea9a:	bf00      	nop
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b085      	sub	sp, #20
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabc:	d103      	bne.n	800eac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	e00c      	b.n	800eae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3308      	adds	r3, #8
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	e002      	b.n	800ead4 <vListInsert+0x2e>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d2f6      	bcs.n	800eace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	601a      	str	r2, [r3, #0]
}
 800eb0c:	bf00      	nop
 800eb0e:	3714      	adds	r7, #20
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	6892      	ldr	r2, [r2, #8]
 800eb2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	6852      	ldr	r2, [r2, #4]
 800eb38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d103      	bne.n	800eb4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	689a      	ldr	r2, [r3, #8]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	1e5a      	subs	r2, r3, #1
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	3b04      	subs	r3, #4
 800eb7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	3b04      	subs	r3, #4
 800eb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	f023 0201 	bic.w	r2, r3, #1
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3b04      	subs	r3, #4
 800eb9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb9c:	4a0c      	ldr	r2, [pc, #48]	; (800ebd0 <pxPortInitialiseStack+0x64>)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3b14      	subs	r3, #20
 800eba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3b04      	subs	r3, #4
 800ebb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f06f 0202 	mvn.w	r2, #2
 800ebba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	3b20      	subs	r3, #32
 800ebc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	0800ebd5 	.word	0x0800ebd5

0800ebd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ebde:	4b12      	ldr	r3, [pc, #72]	; (800ec28 <prvTaskExitError+0x54>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d00a      	beq.n	800ebfe <prvTaskExitError+0x2a>
	__asm volatile
 800ebe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebec:	f383 8811 	msr	BASEPRI, r3
 800ebf0:	f3bf 8f6f 	isb	sy
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	60fb      	str	r3, [r7, #12]
}
 800ebfa:	bf00      	nop
 800ebfc:	e7fe      	b.n	800ebfc <prvTaskExitError+0x28>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	60bb      	str	r3, [r7, #8]
}
 800ec10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec12:	bf00      	nop
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0fc      	beq.n	800ec14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec1a:	bf00      	nop
 800ec1c:	bf00      	nop
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	24000010 	.word	0x24000010
 800ec2c:	00000000 	.word	0x00000000

0800ec30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <pxCurrentTCBConst2>)
 800ec32:	6819      	ldr	r1, [r3, #0]
 800ec34:	6808      	ldr	r0, [r1, #0]
 800ec36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3a:	f380 8809 	msr	PSP, r0
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f04f 0000 	mov.w	r0, #0
 800ec46:	f380 8811 	msr	BASEPRI, r0
 800ec4a:	4770      	bx	lr
 800ec4c:	f3af 8000 	nop.w

0800ec50 <pxCurrentTCBConst2>:
 800ec50:	24004f28 	.word	0x24004f28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop

0800ec58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec58:	4808      	ldr	r0, [pc, #32]	; (800ec7c <prvPortStartFirstTask+0x24>)
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	6800      	ldr	r0, [r0, #0]
 800ec5e:	f380 8808 	msr	MSP, r0
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	f380 8814 	msr	CONTROL, r0
 800ec6a:	b662      	cpsie	i
 800ec6c:	b661      	cpsie	f
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	df00      	svc	0
 800ec78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec7a:	bf00      	nop
 800ec7c:	e000ed08 	.word	0xe000ed08

0800ec80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec86:	4b46      	ldr	r3, [pc, #280]	; (800eda0 <xPortStartScheduler+0x120>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a46      	ldr	r2, [pc, #280]	; (800eda4 <xPortStartScheduler+0x124>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d10a      	bne.n	800eca6 <xPortStartScheduler+0x26>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	613b      	str	r3, [r7, #16]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eca6:	4b3e      	ldr	r3, [pc, #248]	; (800eda0 <xPortStartScheduler+0x120>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a3f      	ldr	r2, [pc, #252]	; (800eda8 <xPortStartScheduler+0x128>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d10a      	bne.n	800ecc6 <xPortStartScheduler+0x46>
	__asm volatile
 800ecb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	60fb      	str	r3, [r7, #12]
}
 800ecc2:	bf00      	nop
 800ecc4:	e7fe      	b.n	800ecc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ecc6:	4b39      	ldr	r3, [pc, #228]	; (800edac <xPortStartScheduler+0x12c>)
 800ecc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	22ff      	movs	r2, #255	; 0xff
 800ecd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ece0:	78fb      	ldrb	r3, [r7, #3]
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	4b31      	ldr	r3, [pc, #196]	; (800edb0 <xPortStartScheduler+0x130>)
 800ecec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecee:	4b31      	ldr	r3, [pc, #196]	; (800edb4 <xPortStartScheduler+0x134>)
 800ecf0:	2207      	movs	r2, #7
 800ecf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecf4:	e009      	b.n	800ed0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ecf6:	4b2f      	ldr	r3, [pc, #188]	; (800edb4 <xPortStartScheduler+0x134>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	4a2d      	ldr	r2, [pc, #180]	; (800edb4 <xPortStartScheduler+0x134>)
 800ecfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed00:	78fb      	ldrb	r3, [r7, #3]
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed0a:	78fb      	ldrb	r3, [r7, #3]
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed12:	2b80      	cmp	r3, #128	; 0x80
 800ed14:	d0ef      	beq.n	800ecf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed16:	4b27      	ldr	r3, [pc, #156]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f1c3 0307 	rsb	r3, r3, #7
 800ed1e:	2b04      	cmp	r3, #4
 800ed20:	d00a      	beq.n	800ed38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	60bb      	str	r3, [r7, #8]
}
 800ed34:	bf00      	nop
 800ed36:	e7fe      	b.n	800ed36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed38:	4b1e      	ldr	r3, [pc, #120]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	4a1d      	ldr	r2, [pc, #116]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed42:	4b1c      	ldr	r3, [pc, #112]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed4a:	4a1a      	ldr	r2, [pc, #104]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed56:	4b18      	ldr	r3, [pc, #96]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a17      	ldr	r2, [pc, #92]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed62:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a14      	ldr	r2, [pc, #80]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed6e:	f000 f8dd 	bl	800ef2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed72:	4b12      	ldr	r3, [pc, #72]	; (800edbc <xPortStartScheduler+0x13c>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed78:	f000 f8fc 	bl	800ef74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed7c:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <xPortStartScheduler+0x140>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a0f      	ldr	r2, [pc, #60]	; (800edc0 <xPortStartScheduler+0x140>)
 800ed82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed88:	f7ff ff66 	bl	800ec58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed8c:	f001 f9fa 	bl	8010184 <vTaskSwitchContext>
	prvTaskExitError();
 800ed90:	f7ff ff20 	bl	800ebd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	e000ed00 	.word	0xe000ed00
 800eda4:	410fc271 	.word	0x410fc271
 800eda8:	410fc270 	.word	0x410fc270
 800edac:	e000e400 	.word	0xe000e400
 800edb0:	24004ee0 	.word	0x24004ee0
 800edb4:	24004ee4 	.word	0x24004ee4
 800edb8:	e000ed20 	.word	0xe000ed20
 800edbc:	24000010 	.word	0x24000010
 800edc0:	e000ef34 	.word	0xe000ef34

0800edc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	607b      	str	r3, [r7, #4]
}
 800eddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800edde:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <vPortEnterCritical+0x58>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	4a0d      	ldr	r2, [pc, #52]	; (800ee1c <vPortEnterCritical+0x58>)
 800ede6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ede8:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <vPortEnterCritical+0x58>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d10f      	bne.n	800ee10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800edf0:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <vPortEnterCritical+0x5c>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00a      	beq.n	800ee10 <vPortEnterCritical+0x4c>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	603b      	str	r3, [r7, #0]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <vPortEnterCritical+0x4a>
	}
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	24000010 	.word	0x24000010
 800ee20:	e000ed04 	.word	0xe000ed04

0800ee24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee2a:	4b12      	ldr	r3, [pc, #72]	; (800ee74 <vPortExitCritical+0x50>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d10a      	bne.n	800ee48 <vPortExitCritical+0x24>
	__asm volatile
 800ee32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee36:	f383 8811 	msr	BASEPRI, r3
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	607b      	str	r3, [r7, #4]
}
 800ee44:	bf00      	nop
 800ee46:	e7fe      	b.n	800ee46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <vPortExitCritical+0x50>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	4a09      	ldr	r2, [pc, #36]	; (800ee74 <vPortExitCritical+0x50>)
 800ee50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee52:	4b08      	ldr	r3, [pc, #32]	; (800ee74 <vPortExitCritical+0x50>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d105      	bne.n	800ee66 <vPortExitCritical+0x42>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ee64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee66:	bf00      	nop
 800ee68:	370c      	adds	r7, #12
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	24000010 	.word	0x24000010
	...

0800ee80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee80:	f3ef 8009 	mrs	r0, PSP
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	4b15      	ldr	r3, [pc, #84]	; (800eee0 <pxCurrentTCBConst>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	f01e 0f10 	tst.w	lr, #16
 800ee90:	bf08      	it	eq
 800ee92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9a:	6010      	str	r0, [r2, #0]
 800ee9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eea4:	f380 8811 	msr	BASEPRI, r0
 800eea8:	f3bf 8f4f 	dsb	sy
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f001 f968 	bl	8010184 <vTaskSwitchContext>
 800eeb4:	f04f 0000 	mov.w	r0, #0
 800eeb8:	f380 8811 	msr	BASEPRI, r0
 800eebc:	bc09      	pop	{r0, r3}
 800eebe:	6819      	ldr	r1, [r3, #0]
 800eec0:	6808      	ldr	r0, [r1, #0]
 800eec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec6:	f01e 0f10 	tst.w	lr, #16
 800eeca:	bf08      	it	eq
 800eecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eed0:	f380 8809 	msr	PSP, r0
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	f3af 8000 	nop.w

0800eee0 <pxCurrentTCBConst>:
 800eee0:	24004f28 	.word	0x24004f28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eee4:	bf00      	nop
 800eee6:	bf00      	nop

0800eee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
	__asm volatile
 800eeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	607b      	str	r3, [r7, #4]
}
 800ef00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef02:	f001 f885 	bl	8010010 <xTaskIncrementTick>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <xPortSysTickHandler+0x40>)
 800ef0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	2300      	movs	r3, #0
 800ef16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	f383 8811 	msr	BASEPRI, r3
}
 800ef1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	e000ed04 	.word	0xe000ed04

0800ef2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef30:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <vPortSetupTimerInterrupt+0x34>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef36:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <vPortSetupTimerInterrupt+0x38>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef3c:	4b0a      	ldr	r3, [pc, #40]	; (800ef68 <vPortSetupTimerInterrupt+0x3c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <vPortSetupTimerInterrupt+0x40>)
 800ef42:	fba2 2303 	umull	r2, r3, r2, r3
 800ef46:	099b      	lsrs	r3, r3, #6
 800ef48:	4a09      	ldr	r2, [pc, #36]	; (800ef70 <vPortSetupTimerInterrupt+0x44>)
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef4e:	4b04      	ldr	r3, [pc, #16]	; (800ef60 <vPortSetupTimerInterrupt+0x34>)
 800ef50:	2207      	movs	r2, #7
 800ef52:	601a      	str	r2, [r3, #0]
}
 800ef54:	bf00      	nop
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	e000e010 	.word	0xe000e010
 800ef64:	e000e018 	.word	0xe000e018
 800ef68:	24000000 	.word	0x24000000
 800ef6c:	10624dd3 	.word	0x10624dd3
 800ef70:	e000e014 	.word	0xe000e014

0800ef74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef84 <vPortEnableVFP+0x10>
 800ef78:	6801      	ldr	r1, [r0, #0]
 800ef7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef7e:	6001      	str	r1, [r0, #0]
 800ef80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef82:	bf00      	nop
 800ef84:	e000ed88 	.word	0xe000ed88

0800ef88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef8e:	f3ef 8305 	mrs	r3, IPSR
 800ef92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2b0f      	cmp	r3, #15
 800ef98:	d914      	bls.n	800efc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef9a:	4a17      	ldr	r2, [pc, #92]	; (800eff8 <vPortValidateInterruptPriority+0x70>)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4413      	add	r3, r2
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efa4:	4b15      	ldr	r3, [pc, #84]	; (800effc <vPortValidateInterruptPriority+0x74>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	7afa      	ldrb	r2, [r7, #11]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d20a      	bcs.n	800efc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	607b      	str	r3, [r7, #4]
}
 800efc0:	bf00      	nop
 800efc2:	e7fe      	b.n	800efc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800efc4:	4b0e      	ldr	r3, [pc, #56]	; (800f000 <vPortValidateInterruptPriority+0x78>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800efcc:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <vPortValidateInterruptPriority+0x7c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d90a      	bls.n	800efea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	603b      	str	r3, [r7, #0]
}
 800efe6:	bf00      	nop
 800efe8:	e7fe      	b.n	800efe8 <vPortValidateInterruptPriority+0x60>
	}
 800efea:	bf00      	nop
 800efec:	3714      	adds	r7, #20
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	e000e3f0 	.word	0xe000e3f0
 800effc:	24004ee0 	.word	0x24004ee0
 800f000:	e000ed0c 	.word	0xe000ed0c
 800f004:	24004ee4 	.word	0x24004ee4

0800f008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10a      	bne.n	800f032 <xQueueGenericReset+0x2a>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	60bb      	str	r3, [r7, #8]
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f032:	f7ff fec7 	bl	800edc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f03e:	68f9      	ldr	r1, [r7, #12]
 800f040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f042:	fb01 f303 	mul.w	r3, r1, r3
 800f046:	441a      	add	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2200      	movs	r2, #0
 800f050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f062:	3b01      	subs	r3, #1
 800f064:	68f9      	ldr	r1, [r7, #12]
 800f066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f068:	fb01 f303 	mul.w	r3, r1, r3
 800f06c:	441a      	add	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	22ff      	movs	r2, #255	; 0xff
 800f076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	22ff      	movs	r2, #255	; 0xff
 800f07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d114      	bne.n	800f0b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d01a      	beq.n	800f0c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	3310      	adds	r3, #16
 800f094:	4618      	mov	r0, r3
 800f096:	f001 f929 	bl	80102ec <xTaskRemoveFromEventList>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d012      	beq.n	800f0c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f0a0:	4b0c      	ldr	r3, [pc, #48]	; (800f0d4 <xQueueGenericReset+0xcc>)
 800f0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0a6:	601a      	str	r2, [r3, #0]
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	e009      	b.n	800f0c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3310      	adds	r3, #16
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7ff fca4 	bl	800ea04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	3324      	adds	r3, #36	; 0x24
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7ff fc9f 	bl	800ea04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0c6:	f7ff fead 	bl	800ee24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0ca:	2301      	movs	r3, #1
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	e000ed04 	.word	0xe000ed04

0800f0d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08e      	sub	sp, #56	; 0x38
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10a      	bne.n	800f102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0fe:	bf00      	nop
 800f100:	e7fe      	b.n	800f100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10a      	bne.n	800f11e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f11a:	bf00      	nop
 800f11c:	e7fe      	b.n	800f11c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d002      	beq.n	800f12a <xQueueGenericCreateStatic+0x52>
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <xQueueGenericCreateStatic+0x56>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <xQueueGenericCreateStatic+0x58>
 800f12e:	2300      	movs	r3, #0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d10a      	bne.n	800f14a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	623b      	str	r3, [r7, #32]
}
 800f146:	bf00      	nop
 800f148:	e7fe      	b.n	800f148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d102      	bne.n	800f156 <xQueueGenericCreateStatic+0x7e>
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d101      	bne.n	800f15a <xQueueGenericCreateStatic+0x82>
 800f156:	2301      	movs	r3, #1
 800f158:	e000      	b.n	800f15c <xQueueGenericCreateStatic+0x84>
 800f15a:	2300      	movs	r3, #0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10a      	bne.n	800f176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	61fb      	str	r3, [r7, #28]
}
 800f172:	bf00      	nop
 800f174:	e7fe      	b.n	800f174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f176:	2350      	movs	r3, #80	; 0x50
 800f178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b50      	cmp	r3, #80	; 0x50
 800f17e:	d00a      	beq.n	800f196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	61bb      	str	r3, [r7, #24]
}
 800f192:	bf00      	nop
 800f194:	e7fe      	b.n	800f194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00d      	beq.n	800f1be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	68b9      	ldr	r1, [r7, #8]
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f000 f805 	bl	800f1c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3730      	adds	r7, #48	; 0x30
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
 800f1d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d103      	bne.n	800f1e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	601a      	str	r2, [r3, #0]
 800f1e2:	e002      	b.n	800f1ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	69b8      	ldr	r0, [r7, #24]
 800f1fa:	f7ff ff05 	bl	800f008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	78fa      	ldrb	r2, [r7, #3]
 800f202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f206:	bf00      	nop
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
	...

0800f210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b08e      	sub	sp, #56	; 0x38
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f21e:	2300      	movs	r3, #0
 800f220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d10a      	bne.n	800f242 <xQueueGenericSend+0x32>
	__asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f23e:	bf00      	nop
 800f240:	e7fe      	b.n	800f240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d103      	bne.n	800f250 <xQueueGenericSend+0x40>
 800f248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d101      	bne.n	800f254 <xQueueGenericSend+0x44>
 800f250:	2301      	movs	r3, #1
 800f252:	e000      	b.n	800f256 <xQueueGenericSend+0x46>
 800f254:	2300      	movs	r3, #0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d10a      	bne.n	800f270 <xQueueGenericSend+0x60>
	__asm volatile
 800f25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f26c:	bf00      	nop
 800f26e:	e7fe      	b.n	800f26e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	2b02      	cmp	r3, #2
 800f274:	d103      	bne.n	800f27e <xQueueGenericSend+0x6e>
 800f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d101      	bne.n	800f282 <xQueueGenericSend+0x72>
 800f27e:	2301      	movs	r3, #1
 800f280:	e000      	b.n	800f284 <xQueueGenericSend+0x74>
 800f282:	2300      	movs	r3, #0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10a      	bne.n	800f29e <xQueueGenericSend+0x8e>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	623b      	str	r3, [r7, #32]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f29e:	f001 f9e7 	bl	8010670 <xTaskGetSchedulerState>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d102      	bne.n	800f2ae <xQueueGenericSend+0x9e>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <xQueueGenericSend+0xa2>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e000      	b.n	800f2b4 <xQueueGenericSend+0xa4>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10a      	bne.n	800f2ce <xQueueGenericSend+0xbe>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	61fb      	str	r3, [r7, #28]
}
 800f2ca:	bf00      	nop
 800f2cc:	e7fe      	b.n	800f2cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2ce:	f7ff fd79 	bl	800edc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d302      	bcc.n	800f2e4 <xQueueGenericSend+0xd4>
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d129      	bne.n	800f338 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	68b9      	ldr	r1, [r7, #8]
 800f2e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2ea:	f000 fa0b 	bl	800f704 <prvCopyDataToQueue>
 800f2ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d010      	beq.n	800f31a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fa:	3324      	adds	r3, #36	; 0x24
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f000 fff5 	bl	80102ec <xTaskRemoveFromEventList>
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d013      	beq.n	800f330 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f308:	4b3f      	ldr	r3, [pc, #252]	; (800f408 <xQueueGenericSend+0x1f8>)
 800f30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f30e:	601a      	str	r2, [r3, #0]
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	e00a      	b.n	800f330 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f320:	4b39      	ldr	r3, [pc, #228]	; (800f408 <xQueueGenericSend+0x1f8>)
 800f322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f326:	601a      	str	r2, [r3, #0]
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f330:	f7ff fd78 	bl	800ee24 <vPortExitCritical>
				return pdPASS;
 800f334:	2301      	movs	r3, #1
 800f336:	e063      	b.n	800f400 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d103      	bne.n	800f346 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f33e:	f7ff fd71 	bl	800ee24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f342:	2300      	movs	r3, #0
 800f344:	e05c      	b.n	800f400 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d106      	bne.n	800f35a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f34c:	f107 0314 	add.w	r3, r7, #20
 800f350:	4618      	mov	r0, r3
 800f352:	f001 f82f 	bl	80103b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f356:	2301      	movs	r3, #1
 800f358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f35a:	f7ff fd63 	bl	800ee24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f35e:	f000 fd9b 	bl	800fe98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f362:	f7ff fd2f 	bl	800edc4 <vPortEnterCritical>
 800f366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f36c:	b25b      	sxtb	r3, r3
 800f36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f372:	d103      	bne.n	800f37c <xQueueGenericSend+0x16c>
 800f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f382:	b25b      	sxtb	r3, r3
 800f384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f388:	d103      	bne.n	800f392 <xQueueGenericSend+0x182>
 800f38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f392:	f7ff fd47 	bl	800ee24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f396:	1d3a      	adds	r2, r7, #4
 800f398:	f107 0314 	add.w	r3, r7, #20
 800f39c:	4611      	mov	r1, r2
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f001 f81e 	bl	80103e0 <xTaskCheckForTimeOut>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d124      	bne.n	800f3f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ac:	f000 faa2 	bl	800f8f4 <prvIsQueueFull>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d018      	beq.n	800f3e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b8:	3310      	adds	r3, #16
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 ff44 	bl	801024c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3c6:	f000 fa2d 	bl	800f824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3ca:	f000 fd73 	bl	800feb4 <xTaskResumeAll>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f47f af7c 	bne.w	800f2ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f3d6:	4b0c      	ldr	r3, [pc, #48]	; (800f408 <xQueueGenericSend+0x1f8>)
 800f3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	e772      	b.n	800f2ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f3e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ea:	f000 fa1b 	bl	800f824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3ee:	f000 fd61 	bl	800feb4 <xTaskResumeAll>
 800f3f2:	e76c      	b.n	800f2ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3f6:	f000 fa15 	bl	800f824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3fa:	f000 fd5b 	bl	800feb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f3fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f400:	4618      	mov	r0, r3
 800f402:	3738      	adds	r7, #56	; 0x38
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	e000ed04 	.word	0xe000ed04

0800f40c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b090      	sub	sp, #64	; 0x40
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
 800f418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10a      	bne.n	800f43a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f436:	bf00      	nop
 800f438:	e7fe      	b.n	800f438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d103      	bne.n	800f448 <xQueueGenericSendFromISR+0x3c>
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f444:	2b00      	cmp	r3, #0
 800f446:	d101      	bne.n	800f44c <xQueueGenericSendFromISR+0x40>
 800f448:	2301      	movs	r3, #1
 800f44a:	e000      	b.n	800f44e <xQueueGenericSendFromISR+0x42>
 800f44c:	2300      	movs	r3, #0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10a      	bne.n	800f468 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f464:	bf00      	nop
 800f466:	e7fe      	b.n	800f466 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d103      	bne.n	800f476 <xQueueGenericSendFromISR+0x6a>
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f472:	2b01      	cmp	r3, #1
 800f474:	d101      	bne.n	800f47a <xQueueGenericSendFromISR+0x6e>
 800f476:	2301      	movs	r3, #1
 800f478:	e000      	b.n	800f47c <xQueueGenericSendFromISR+0x70>
 800f47a:	2300      	movs	r3, #0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10a      	bne.n	800f496 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	623b      	str	r3, [r7, #32]
}
 800f492:	bf00      	nop
 800f494:	e7fe      	b.n	800f494 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f496:	f7ff fd77 	bl	800ef88 <vPortValidateInterruptPriority>
	__asm volatile
 800f49a:	f3ef 8211 	mrs	r2, BASEPRI
 800f49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	61fa      	str	r2, [r7, #28]
 800f4b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f4b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d302      	bcc.n	800f4c8 <xQueueGenericSendFromISR+0xbc>
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	2b02      	cmp	r3, #2
 800f4c6:	d12f      	bne.n	800f528 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	68b9      	ldr	r1, [r7, #8]
 800f4dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4de:	f000 f911 	bl	800f704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f4e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ea:	d112      	bne.n	800f512 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d016      	beq.n	800f522 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	3324      	adds	r3, #36	; 0x24
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f000 fef7 	bl	80102ec <xTaskRemoveFromEventList>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00e      	beq.n	800f522 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00b      	beq.n	800f522 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2201      	movs	r2, #1
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	e007      	b.n	800f522 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f516:	3301      	adds	r3, #1
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	b25a      	sxtb	r2, r3
 800f51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f522:	2301      	movs	r3, #1
 800f524:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f526:	e001      	b.n	800f52c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f528:	2300      	movs	r3, #0
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	f383 8811 	msr	BASEPRI, r3
}
 800f536:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3740      	adds	r7, #64	; 0x40
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
	...

0800f544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08c      	sub	sp, #48	; 0x30
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f550:	2300      	movs	r3, #0
 800f552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10a      	bne.n	800f574 <xQueueReceive+0x30>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	623b      	str	r3, [r7, #32]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d103      	bne.n	800f582 <xQueueReceive+0x3e>
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <xQueueReceive+0x42>
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <xQueueReceive+0x44>
 800f586:	2300      	movs	r3, #0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10a      	bne.n	800f5a2 <xQueueReceive+0x5e>
	__asm volatile
 800f58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	61fb      	str	r3, [r7, #28]
}
 800f59e:	bf00      	nop
 800f5a0:	e7fe      	b.n	800f5a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5a2:	f001 f865 	bl	8010670 <xTaskGetSchedulerState>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d102      	bne.n	800f5b2 <xQueueReceive+0x6e>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <xQueueReceive+0x72>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e000      	b.n	800f5b8 <xQueueReceive+0x74>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d10a      	bne.n	800f5d2 <xQueueReceive+0x8e>
	__asm volatile
 800f5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	61bb      	str	r3, [r7, #24]
}
 800f5ce:	bf00      	nop
 800f5d0:	e7fe      	b.n	800f5d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5d2:	f7ff fbf7 	bl	800edc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d01f      	beq.n	800f622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5e2:	68b9      	ldr	r1, [r7, #8]
 800f5e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5e6:	f000 f8f7 	bl	800f7d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	1e5a      	subs	r2, r3, #1
 800f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00f      	beq.n	800f61a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fc:	3310      	adds	r3, #16
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 fe74 	bl	80102ec <xTaskRemoveFromEventList>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d007      	beq.n	800f61a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f60a:	4b3d      	ldr	r3, [pc, #244]	; (800f700 <xQueueReceive+0x1bc>)
 800f60c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	f3bf 8f4f 	dsb	sy
 800f616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f61a:	f7ff fc03 	bl	800ee24 <vPortExitCritical>
				return pdPASS;
 800f61e:	2301      	movs	r3, #1
 800f620:	e069      	b.n	800f6f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d103      	bne.n	800f630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f628:	f7ff fbfc 	bl	800ee24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f62c:	2300      	movs	r3, #0
 800f62e:	e062      	b.n	800f6f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f636:	f107 0310 	add.w	r3, r7, #16
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 feba 	bl	80103b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f640:	2301      	movs	r3, #1
 800f642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f644:	f7ff fbee 	bl	800ee24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f648:	f000 fc26 	bl	800fe98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f64c:	f7ff fbba 	bl	800edc4 <vPortEnterCritical>
 800f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f656:	b25b      	sxtb	r3, r3
 800f658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f65c:	d103      	bne.n	800f666 <xQueueReceive+0x122>
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	2200      	movs	r2, #0
 800f662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f66c:	b25b      	sxtb	r3, r3
 800f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f672:	d103      	bne.n	800f67c <xQueueReceive+0x138>
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	2200      	movs	r2, #0
 800f678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f67c:	f7ff fbd2 	bl	800ee24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f680:	1d3a      	adds	r2, r7, #4
 800f682:	f107 0310 	add.w	r3, r7, #16
 800f686:	4611      	mov	r1, r2
 800f688:	4618      	mov	r0, r3
 800f68a:	f000 fea9 	bl	80103e0 <xTaskCheckForTimeOut>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d123      	bne.n	800f6dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f696:	f000 f917 	bl	800f8c8 <prvIsQueueEmpty>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d017      	beq.n	800f6d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a2:	3324      	adds	r3, #36	; 0x24
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 fdcf 	bl	801024c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6b0:	f000 f8b8 	bl	800f824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6b4:	f000 fbfe 	bl	800feb4 <xTaskResumeAll>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d189      	bne.n	800f5d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f6be:	4b10      	ldr	r3, [pc, #64]	; (800f700 <xQueueReceive+0x1bc>)
 800f6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	f3bf 8f4f 	dsb	sy
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	e780      	b.n	800f5d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6d2:	f000 f8a7 	bl	800f824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6d6:	f000 fbed 	bl	800feb4 <xTaskResumeAll>
 800f6da:	e77a      	b.n	800f5d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6de:	f000 f8a1 	bl	800f824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6e2:	f000 fbe7 	bl	800feb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6e8:	f000 f8ee 	bl	800f8c8 <prvIsQueueEmpty>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f43f af6f 	beq.w	800f5d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f6f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3730      	adds	r7, #48	; 0x30
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	e000ed04 	.word	0xe000ed04

0800f704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f710:	2300      	movs	r3, #0
 800f712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10d      	bne.n	800f73e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d14d      	bne.n	800f7c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 ffbc 	bl	80106ac <xTaskPriorityDisinherit>
 800f734:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	609a      	str	r2, [r3, #8]
 800f73c:	e043      	b.n	800f7c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d119      	bne.n	800f778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6858      	ldr	r0, [r3, #4]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74c:	461a      	mov	r2, r3
 800f74e:	68b9      	ldr	r1, [r7, #8]
 800f750:	f002 fcfb 	bl	801214a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	685a      	ldr	r2, [r3, #4]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75c:	441a      	add	r2, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	685a      	ldr	r2, [r3, #4]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d32b      	bcc.n	800f7c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	605a      	str	r2, [r3, #4]
 800f776:	e026      	b.n	800f7c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	68d8      	ldr	r0, [r3, #12]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f780:	461a      	mov	r2, r3
 800f782:	68b9      	ldr	r1, [r7, #8]
 800f784:	f002 fce1 	bl	801214a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	68da      	ldr	r2, [r3, #12]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f790:	425b      	negs	r3, r3
 800f792:	441a      	add	r2, r3
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68da      	ldr	r2, [r3, #12]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d207      	bcs.n	800f7b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	689a      	ldr	r2, [r3, #8]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ac:	425b      	negs	r3, r3
 800f7ae:	441a      	add	r2, r3
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b02      	cmp	r3, #2
 800f7b8:	d105      	bne.n	800f7c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d002      	beq.n	800f7c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f7ce:	697b      	ldr	r3, [r7, #20]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d018      	beq.n	800f81c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	68da      	ldr	r2, [r3, #12]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f2:	441a      	add	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	68da      	ldr	r2, [r3, #12]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	429a      	cmp	r2, r3
 800f802:	d303      	bcc.n	800f80c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	68d9      	ldr	r1, [r3, #12]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f814:	461a      	mov	r2, r3
 800f816:	6838      	ldr	r0, [r7, #0]
 800f818:	f002 fc97 	bl	801214a <memcpy>
	}
}
 800f81c:	bf00      	nop
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f82c:	f7ff faca 	bl	800edc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f838:	e011      	b.n	800f85e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d012      	beq.n	800f868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	3324      	adds	r3, #36	; 0x24
 800f846:	4618      	mov	r0, r3
 800f848:	f000 fd50 	bl	80102ec <xTaskRemoveFromEventList>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f852:	f000 fe27 	bl	80104a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f856:	7bfb      	ldrb	r3, [r7, #15]
 800f858:	3b01      	subs	r3, #1
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f862:	2b00      	cmp	r3, #0
 800f864:	dce9      	bgt.n	800f83a <prvUnlockQueue+0x16>
 800f866:	e000      	b.n	800f86a <prvUnlockQueue+0x46>
					break;
 800f868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	22ff      	movs	r2, #255	; 0xff
 800f86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f872:	f7ff fad7 	bl	800ee24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f876:	f7ff faa5 	bl	800edc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f882:	e011      	b.n	800f8a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d012      	beq.n	800f8b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3310      	adds	r3, #16
 800f890:	4618      	mov	r0, r3
 800f892:	f000 fd2b 	bl	80102ec <xTaskRemoveFromEventList>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d001      	beq.n	800f8a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f89c:	f000 fe02 	bl	80104a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	3b01      	subs	r3, #1
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	dce9      	bgt.n	800f884 <prvUnlockQueue+0x60>
 800f8b0:	e000      	b.n	800f8b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f8b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	22ff      	movs	r2, #255	; 0xff
 800f8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f8bc:	f7ff fab2 	bl	800ee24 <vPortExitCritical>
}
 800f8c0:	bf00      	nop
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8d0:	f7ff fa78 	bl	800edc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d102      	bne.n	800f8e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	60fb      	str	r3, [r7, #12]
 800f8e0:	e001      	b.n	800f8e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8e6:	f7ff fa9d 	bl	800ee24 <vPortExitCritical>

	return xReturn;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8fc:	f7ff fa62 	bl	800edc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f908:	429a      	cmp	r2, r3
 800f90a:	d102      	bne.n	800f912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f90c:	2301      	movs	r3, #1
 800f90e:	60fb      	str	r3, [r7, #12]
 800f910:	e001      	b.n	800f916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f912:	2300      	movs	r3, #0
 800f914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f916:	f7ff fa85 	bl	800ee24 <vPortExitCritical>

	return xReturn;
 800f91a:	68fb      	ldr	r3, [r7, #12]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f92e:	2300      	movs	r3, #0
 800f930:	60fb      	str	r3, [r7, #12]
 800f932:	e014      	b.n	800f95e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f934:	4a0f      	ldr	r2, [pc, #60]	; (800f974 <vQueueAddToRegistry+0x50>)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10b      	bne.n	800f958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f940:	490c      	ldr	r1, [pc, #48]	; (800f974 <vQueueAddToRegistry+0x50>)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f94a:	4a0a      	ldr	r2, [pc, #40]	; (800f974 <vQueueAddToRegistry+0x50>)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	4413      	add	r3, r2
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f956:	e006      	b.n	800f966 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	3301      	adds	r3, #1
 800f95c:	60fb      	str	r3, [r7, #12]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2b07      	cmp	r3, #7
 800f962:	d9e7      	bls.n	800f934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f964:	bf00      	nop
 800f966:	bf00      	nop
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	24004ee8 	.word	0x24004ee8

0800f978 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f988:	f7ff fa1c 	bl	800edc4 <vPortEnterCritical>
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f992:	b25b      	sxtb	r3, r3
 800f994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f998:	d103      	bne.n	800f9a2 <vQueueWaitForMessageRestricted+0x2a>
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9a8:	b25b      	sxtb	r3, r3
 800f9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ae:	d103      	bne.n	800f9b8 <vQueueWaitForMessageRestricted+0x40>
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9b8:	f7ff fa34 	bl	800ee24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	3324      	adds	r3, #36	; 0x24
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	68b9      	ldr	r1, [r7, #8]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f000 fc61 	bl	8010294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f9d2:	6978      	ldr	r0, [r7, #20]
 800f9d4:	f7ff ff26 	bl	800f824 <prvUnlockQueue>
	}
 800f9d8:	bf00      	nop
 800f9da:	3718      	adds	r7, #24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b08e      	sub	sp, #56	; 0x38
 800f9e4:	af04      	add	r7, sp, #16
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	607a      	str	r2, [r7, #4]
 800f9ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	623b      	str	r3, [r7, #32]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10a      	bne.n	800fa26 <xTaskCreateStatic+0x46>
	__asm volatile
 800fa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa14:	f383 8811 	msr	BASEPRI, r3
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	61fb      	str	r3, [r7, #28]
}
 800fa22:	bf00      	nop
 800fa24:	e7fe      	b.n	800fa24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa26:	23a8      	movs	r3, #168	; 0xa8
 800fa28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	2ba8      	cmp	r3, #168	; 0xa8
 800fa2e:	d00a      	beq.n	800fa46 <xTaskCreateStatic+0x66>
	__asm volatile
 800fa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa34:	f383 8811 	msr	BASEPRI, r3
 800fa38:	f3bf 8f6f 	isb	sy
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	61bb      	str	r3, [r7, #24]
}
 800fa42:	bf00      	nop
 800fa44:	e7fe      	b.n	800fa44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d01e      	beq.n	800fa8c <xTaskCreateStatic+0xac>
 800fa4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d01b      	beq.n	800fa8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa60:	2202      	movs	r2, #2
 800fa62:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa66:	2300      	movs	r3, #0
 800fa68:	9303      	str	r3, [sp, #12]
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	9302      	str	r3, [sp, #8]
 800fa6e:	f107 0314 	add.w	r3, r7, #20
 800fa72:	9301      	str	r3, [sp, #4]
 800fa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f000 f850 	bl	800fb24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa86:	f000 f8f3 	bl	800fc70 <prvAddNewTaskToReadyList>
 800fa8a:	e001      	b.n	800fa90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa90:	697b      	ldr	r3, [r7, #20]
	}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3728      	adds	r7, #40	; 0x28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b08c      	sub	sp, #48	; 0x30
 800fa9e:	af04      	add	r7, sp, #16
 800faa0:	60f8      	str	r0, [r7, #12]
 800faa2:	60b9      	str	r1, [r7, #8]
 800faa4:	603b      	str	r3, [r7, #0]
 800faa6:	4613      	mov	r3, r2
 800faa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800faaa:	88fb      	ldrh	r3, [r7, #6]
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe fdbe 	bl	800e630 <pvPortMalloc>
 800fab4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00e      	beq.n	800fada <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fabc:	20a8      	movs	r0, #168	; 0xa8
 800fabe:	f7fe fdb7 	bl	800e630 <pvPortMalloc>
 800fac2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d003      	beq.n	800fad2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	631a      	str	r2, [r3, #48]	; 0x30
 800fad0:	e005      	b.n	800fade <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fad2:	6978      	ldr	r0, [r7, #20]
 800fad4:	f7fe fe78 	bl	800e7c8 <vPortFree>
 800fad8:	e001      	b.n	800fade <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fada:	2300      	movs	r3, #0
 800fadc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d017      	beq.n	800fb14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800faec:	88fa      	ldrh	r2, [r7, #6]
 800faee:	2300      	movs	r3, #0
 800faf0:	9303      	str	r3, [sp, #12]
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	9302      	str	r3, [sp, #8]
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	9301      	str	r3, [sp, #4]
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	68b9      	ldr	r1, [r7, #8]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f000 f80e 	bl	800fb24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb08:	69f8      	ldr	r0, [r7, #28]
 800fb0a:	f000 f8b1 	bl	800fc70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	61bb      	str	r3, [r7, #24]
 800fb12:	e002      	b.n	800fb1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb14:	f04f 33ff 	mov.w	r3, #4294967295
 800fb18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb1a:	69bb      	ldr	r3, [r7, #24]
	}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3720      	adds	r7, #32
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
 800fb30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	21a5      	movs	r1, #165	; 0xa5
 800fb3e:	f002 fa1e 	bl	8011f7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb46:	6879      	ldr	r1, [r7, #4]
 800fb48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fb4c:	440b      	add	r3, r1
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	4413      	add	r3, r2
 800fb52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	f023 0307 	bic.w	r3, r3, #7
 800fb5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	f003 0307 	and.w	r3, r3, #7
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00a      	beq.n	800fb7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800fb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	617b      	str	r3, [r7, #20]
}
 800fb78:	bf00      	nop
 800fb7a:	e7fe      	b.n	800fb7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d01f      	beq.n	800fbc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb82:	2300      	movs	r3, #0
 800fb84:	61fb      	str	r3, [r7, #28]
 800fb86:	e012      	b.n	800fbae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	7819      	ldrb	r1, [r3, #0]
 800fb90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	3334      	adds	r3, #52	; 0x34
 800fb98:	460a      	mov	r2, r1
 800fb9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	4413      	add	r3, r2
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d006      	beq.n	800fbb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	61fb      	str	r3, [r7, #28]
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	2b0f      	cmp	r3, #15
 800fbb2:	d9e9      	bls.n	800fb88 <prvInitialiseNewTask+0x64>
 800fbb4:	e000      	b.n	800fbb8 <prvInitialiseNewTask+0x94>
			{
				break;
 800fbb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbc0:	e003      	b.n	800fbca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbcc:	2b37      	cmp	r3, #55	; 0x37
 800fbce:	d901      	bls.n	800fbd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fbd0:	2337      	movs	r3, #55	; 0x37
 800fbd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	3304      	adds	r3, #4
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fe ff2a 	bl	800ea44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf2:	3318      	adds	r3, #24
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe ff25 	bl	800ea44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	2200      	movs	r2, #0
 800fc14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc22:	3354      	adds	r3, #84	; 0x54
 800fc24:	224c      	movs	r2, #76	; 0x4c
 800fc26:	2100      	movs	r1, #0
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f002 f9a8 	bl	8011f7e <memset>
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc30:	4a0c      	ldr	r2, [pc, #48]	; (800fc64 <prvInitialiseNewTask+0x140>)
 800fc32:	659a      	str	r2, [r3, #88]	; 0x58
 800fc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc36:	4a0c      	ldr	r2, [pc, #48]	; (800fc68 <prvInitialiseNewTask+0x144>)
 800fc38:	65da      	str	r2, [r3, #92]	; 0x5c
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3c:	4a0b      	ldr	r2, [pc, #44]	; (800fc6c <prvInitialiseNewTask+0x148>)
 800fc3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	68f9      	ldr	r1, [r7, #12]
 800fc44:	69b8      	ldr	r0, [r7, #24]
 800fc46:	f7fe ff91 	bl	800eb6c <pxPortInitialiseStack>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d002      	beq.n	800fc5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc5c:	bf00      	nop
 800fc5e:	3720      	adds	r7, #32
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	2400555c 	.word	0x2400555c
 800fc68:	240055c4 	.word	0x240055c4
 800fc6c:	2400562c 	.word	0x2400562c

0800fc70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc78:	f7ff f8a4 	bl	800edc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc7c:	4b2d      	ldr	r3, [pc, #180]	; (800fd34 <prvAddNewTaskToReadyList+0xc4>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3301      	adds	r3, #1
 800fc82:	4a2c      	ldr	r2, [pc, #176]	; (800fd34 <prvAddNewTaskToReadyList+0xc4>)
 800fc84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc86:	4b2c      	ldr	r3, [pc, #176]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d109      	bne.n	800fca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc8e:	4a2a      	ldr	r2, [pc, #168]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc94:	4b27      	ldr	r3, [pc, #156]	; (800fd34 <prvAddNewTaskToReadyList+0xc4>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d110      	bne.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc9c:	f000 fc26 	bl	80104ec <prvInitialiseTaskLists>
 800fca0:	e00d      	b.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fca2:	4b26      	ldr	r3, [pc, #152]	; (800fd3c <prvAddNewTaskToReadyList+0xcc>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d109      	bne.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fcaa:	4b23      	ldr	r3, [pc, #140]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d802      	bhi.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fcb8:	4a1f      	ldr	r2, [pc, #124]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fcbe:	4b20      	ldr	r3, [pc, #128]	; (800fd40 <prvAddNewTaskToReadyList+0xd0>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	4a1e      	ldr	r2, [pc, #120]	; (800fd40 <prvAddNewTaskToReadyList+0xd0>)
 800fcc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fcc8:	4b1d      	ldr	r3, [pc, #116]	; (800fd40 <prvAddNewTaskToReadyList+0xd0>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcd4:	4b1b      	ldr	r3, [pc, #108]	; (800fd44 <prvAddNewTaskToReadyList+0xd4>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d903      	bls.n	800fce4 <prvAddNewTaskToReadyList+0x74>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce0:	4a18      	ldr	r2, [pc, #96]	; (800fd44 <prvAddNewTaskToReadyList+0xd4>)
 800fce2:	6013      	str	r3, [r2, #0]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce8:	4613      	mov	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4413      	add	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	4a15      	ldr	r2, [pc, #84]	; (800fd48 <prvAddNewTaskToReadyList+0xd8>)
 800fcf2:	441a      	add	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	3304      	adds	r3, #4
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	4610      	mov	r0, r2
 800fcfc:	f7fe feaf 	bl	800ea5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd00:	f7ff f890 	bl	800ee24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd04:	4b0d      	ldr	r3, [pc, #52]	; (800fd3c <prvAddNewTaskToReadyList+0xcc>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00e      	beq.n	800fd2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d207      	bcs.n	800fd2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd1a:	4b0c      	ldr	r3, [pc, #48]	; (800fd4c <prvAddNewTaskToReadyList+0xdc>)
 800fd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd2a:	bf00      	nop
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	240053fc 	.word	0x240053fc
 800fd38:	24004f28 	.word	0x24004f28
 800fd3c:	24005408 	.word	0x24005408
 800fd40:	24005418 	.word	0x24005418
 800fd44:	24005404 	.word	0x24005404
 800fd48:	24004f2c 	.word	0x24004f2c
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d017      	beq.n	800fd92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd62:	4b13      	ldr	r3, [pc, #76]	; (800fdb0 <vTaskDelay+0x60>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d00a      	beq.n	800fd80 <vTaskDelay+0x30>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	60bb      	str	r3, [r7, #8]
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fd80:	f000 f88a 	bl	800fe98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd84:	2100      	movs	r1, #0
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fcfe 	bl	8010788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd8c:	f000 f892 	bl	800feb4 <xTaskResumeAll>
 800fd90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d107      	bne.n	800fda8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fd98:	4b06      	ldr	r3, [pc, #24]	; (800fdb4 <vTaskDelay+0x64>)
 800fd9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd9e:	601a      	str	r2, [r3, #0]
 800fda0:	f3bf 8f4f 	dsb	sy
 800fda4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fda8:	bf00      	nop
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	24005424 	.word	0x24005424
 800fdb4:	e000ed04 	.word	0xe000ed04

0800fdb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b08a      	sub	sp, #40	; 0x28
 800fdbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fdc6:	463a      	mov	r2, r7
 800fdc8:	1d39      	adds	r1, r7, #4
 800fdca:	f107 0308 	add.w	r3, r7, #8
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fe fbfa 	bl	800e5c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fdd4:	6839      	ldr	r1, [r7, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	68ba      	ldr	r2, [r7, #8]
 800fdda:	9202      	str	r2, [sp, #8]
 800fddc:	9301      	str	r3, [sp, #4]
 800fdde:	2300      	movs	r3, #0
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	2300      	movs	r3, #0
 800fde4:	460a      	mov	r2, r1
 800fde6:	4924      	ldr	r1, [pc, #144]	; (800fe78 <vTaskStartScheduler+0xc0>)
 800fde8:	4824      	ldr	r0, [pc, #144]	; (800fe7c <vTaskStartScheduler+0xc4>)
 800fdea:	f7ff fdf9 	bl	800f9e0 <xTaskCreateStatic>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	4a23      	ldr	r2, [pc, #140]	; (800fe80 <vTaskStartScheduler+0xc8>)
 800fdf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fdf4:	4b22      	ldr	r3, [pc, #136]	; (800fe80 <vTaskStartScheduler+0xc8>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	617b      	str	r3, [r7, #20]
 800fe00:	e001      	b.n	800fe06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fe02:	2300      	movs	r3, #0
 800fe04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d102      	bne.n	800fe12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fe0c:	f000 fd10 	bl	8010830 <xTimerCreateTimerTask>
 800fe10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d11b      	bne.n	800fe50 <vTaskStartScheduler+0x98>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	613b      	str	r3, [r7, #16]
}
 800fe2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe2c:	4b15      	ldr	r3, [pc, #84]	; (800fe84 <vTaskStartScheduler+0xcc>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	3354      	adds	r3, #84	; 0x54
 800fe32:	4a15      	ldr	r2, [pc, #84]	; (800fe88 <vTaskStartScheduler+0xd0>)
 800fe34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fe36:	4b15      	ldr	r3, [pc, #84]	; (800fe8c <vTaskStartScheduler+0xd4>)
 800fe38:	f04f 32ff 	mov.w	r2, #4294967295
 800fe3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe3e:	4b14      	ldr	r3, [pc, #80]	; (800fe90 <vTaskStartScheduler+0xd8>)
 800fe40:	2201      	movs	r2, #1
 800fe42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe44:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <vTaskStartScheduler+0xdc>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe4a:	f7fe ff19 	bl	800ec80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe4e:	e00e      	b.n	800fe6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe56:	d10a      	bne.n	800fe6e <vTaskStartScheduler+0xb6>
	__asm volatile
 800fe58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5c:	f383 8811 	msr	BASEPRI, r3
 800fe60:	f3bf 8f6f 	isb	sy
 800fe64:	f3bf 8f4f 	dsb	sy
 800fe68:	60fb      	str	r3, [r7, #12]
}
 800fe6a:	bf00      	nop
 800fe6c:	e7fe      	b.n	800fe6c <vTaskStartScheduler+0xb4>
}
 800fe6e:	bf00      	nop
 800fe70:	3718      	adds	r7, #24
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	0801560c 	.word	0x0801560c
 800fe7c:	080104bd 	.word	0x080104bd
 800fe80:	24005420 	.word	0x24005420
 800fe84:	24004f28 	.word	0x24004f28
 800fe88:	2400006c 	.word	0x2400006c
 800fe8c:	2400541c 	.word	0x2400541c
 800fe90:	24005408 	.word	0x24005408
 800fe94:	24005400 	.word	0x24005400

0800fe98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fe9c:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <vTaskSuspendAll+0x18>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	3301      	adds	r3, #1
 800fea2:	4a03      	ldr	r2, [pc, #12]	; (800feb0 <vTaskSuspendAll+0x18>)
 800fea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fea6:	bf00      	nop
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr
 800feb0:	24005424 	.word	0x24005424

0800feb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800feba:	2300      	movs	r3, #0
 800febc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800febe:	2300      	movs	r3, #0
 800fec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fec2:	4b42      	ldr	r3, [pc, #264]	; (800ffcc <xTaskResumeAll+0x118>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d10a      	bne.n	800fee0 <xTaskResumeAll+0x2c>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	603b      	str	r3, [r7, #0]
}
 800fedc:	bf00      	nop
 800fede:	e7fe      	b.n	800fede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fee0:	f7fe ff70 	bl	800edc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fee4:	4b39      	ldr	r3, [pc, #228]	; (800ffcc <xTaskResumeAll+0x118>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	3b01      	subs	r3, #1
 800feea:	4a38      	ldr	r2, [pc, #224]	; (800ffcc <xTaskResumeAll+0x118>)
 800feec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800feee:	4b37      	ldr	r3, [pc, #220]	; (800ffcc <xTaskResumeAll+0x118>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d162      	bne.n	800ffbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fef6:	4b36      	ldr	r3, [pc, #216]	; (800ffd0 <xTaskResumeAll+0x11c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d05e      	beq.n	800ffbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fefe:	e02f      	b.n	800ff60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff00:	4b34      	ldr	r3, [pc, #208]	; (800ffd4 <xTaskResumeAll+0x120>)
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	3318      	adds	r3, #24
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fe fe03 	bl	800eb18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	3304      	adds	r3, #4
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fe fdfe 	bl	800eb18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff20:	4b2d      	ldr	r3, [pc, #180]	; (800ffd8 <xTaskResumeAll+0x124>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d903      	bls.n	800ff30 <xTaskResumeAll+0x7c>
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	4a2a      	ldr	r2, [pc, #168]	; (800ffd8 <xTaskResumeAll+0x124>)
 800ff2e:	6013      	str	r3, [r2, #0]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff34:	4613      	mov	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	4413      	add	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4a27      	ldr	r2, [pc, #156]	; (800ffdc <xTaskResumeAll+0x128>)
 800ff3e:	441a      	add	r2, r3
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	3304      	adds	r3, #4
 800ff44:	4619      	mov	r1, r3
 800ff46:	4610      	mov	r0, r2
 800ff48:	f7fe fd89 	bl	800ea5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff50:	4b23      	ldr	r3, [pc, #140]	; (800ffe0 <xTaskResumeAll+0x12c>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d302      	bcc.n	800ff60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ff5a:	4b22      	ldr	r3, [pc, #136]	; (800ffe4 <xTaskResumeAll+0x130>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff60:	4b1c      	ldr	r3, [pc, #112]	; (800ffd4 <xTaskResumeAll+0x120>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1cb      	bne.n	800ff00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff6e:	f000 fb5f 	bl	8010630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff72:	4b1d      	ldr	r3, [pc, #116]	; (800ffe8 <xTaskResumeAll+0x134>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d010      	beq.n	800ffa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff7e:	f000 f847 	bl	8010010 <xTaskIncrementTick>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ff88:	4b16      	ldr	r3, [pc, #88]	; (800ffe4 <xTaskResumeAll+0x130>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	3b01      	subs	r3, #1
 800ff92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1f1      	bne.n	800ff7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ff9a:	4b13      	ldr	r3, [pc, #76]	; (800ffe8 <xTaskResumeAll+0x134>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ffa0:	4b10      	ldr	r3, [pc, #64]	; (800ffe4 <xTaskResumeAll+0x130>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ffac:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <xTaskResumeAll+0x138>)
 800ffae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffb2:	601a      	str	r2, [r3, #0]
 800ffb4:	f3bf 8f4f 	dsb	sy
 800ffb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffbc:	f7fe ff32 	bl	800ee24 <vPortExitCritical>

	return xAlreadyYielded;
 800ffc0:	68bb      	ldr	r3, [r7, #8]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	24005424 	.word	0x24005424
 800ffd0:	240053fc 	.word	0x240053fc
 800ffd4:	240053bc 	.word	0x240053bc
 800ffd8:	24005404 	.word	0x24005404
 800ffdc:	24004f2c 	.word	0x24004f2c
 800ffe0:	24004f28 	.word	0x24004f28
 800ffe4:	24005410 	.word	0x24005410
 800ffe8:	2400540c 	.word	0x2400540c
 800ffec:	e000ed04 	.word	0xe000ed04

0800fff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fff6:	4b05      	ldr	r3, [pc, #20]	; (801000c <xTaskGetTickCount+0x1c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fffc:	687b      	ldr	r3, [r7, #4]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	24005400 	.word	0x24005400

08010010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010016:	2300      	movs	r3, #0
 8010018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801001a:	4b4f      	ldr	r3, [pc, #316]	; (8010158 <xTaskIncrementTick+0x148>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	f040 808f 	bne.w	8010142 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010024:	4b4d      	ldr	r3, [pc, #308]	; (801015c <xTaskIncrementTick+0x14c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3301      	adds	r3, #1
 801002a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801002c:	4a4b      	ldr	r2, [pc, #300]	; (801015c <xTaskIncrementTick+0x14c>)
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d120      	bne.n	801007a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010038:	4b49      	ldr	r3, [pc, #292]	; (8010160 <xTaskIncrementTick+0x150>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00a      	beq.n	8010058 <xTaskIncrementTick+0x48>
	__asm volatile
 8010042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010046:	f383 8811 	msr	BASEPRI, r3
 801004a:	f3bf 8f6f 	isb	sy
 801004e:	f3bf 8f4f 	dsb	sy
 8010052:	603b      	str	r3, [r7, #0]
}
 8010054:	bf00      	nop
 8010056:	e7fe      	b.n	8010056 <xTaskIncrementTick+0x46>
 8010058:	4b41      	ldr	r3, [pc, #260]	; (8010160 <xTaskIncrementTick+0x150>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	60fb      	str	r3, [r7, #12]
 801005e:	4b41      	ldr	r3, [pc, #260]	; (8010164 <xTaskIncrementTick+0x154>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a3f      	ldr	r2, [pc, #252]	; (8010160 <xTaskIncrementTick+0x150>)
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	4a3f      	ldr	r2, [pc, #252]	; (8010164 <xTaskIncrementTick+0x154>)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6013      	str	r3, [r2, #0]
 801006c:	4b3e      	ldr	r3, [pc, #248]	; (8010168 <xTaskIncrementTick+0x158>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	3301      	adds	r3, #1
 8010072:	4a3d      	ldr	r2, [pc, #244]	; (8010168 <xTaskIncrementTick+0x158>)
 8010074:	6013      	str	r3, [r2, #0]
 8010076:	f000 fadb 	bl	8010630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801007a:	4b3c      	ldr	r3, [pc, #240]	; (801016c <xTaskIncrementTick+0x15c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	693a      	ldr	r2, [r7, #16]
 8010080:	429a      	cmp	r2, r3
 8010082:	d349      	bcc.n	8010118 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010084:	4b36      	ldr	r3, [pc, #216]	; (8010160 <xTaskIncrementTick+0x150>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d104      	bne.n	8010098 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801008e:	4b37      	ldr	r3, [pc, #220]	; (801016c <xTaskIncrementTick+0x15c>)
 8010090:	f04f 32ff 	mov.w	r2, #4294967295
 8010094:	601a      	str	r2, [r3, #0]
					break;
 8010096:	e03f      	b.n	8010118 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010098:	4b31      	ldr	r3, [pc, #196]	; (8010160 <xTaskIncrementTick+0x150>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80100a8:	693a      	ldr	r2, [r7, #16]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d203      	bcs.n	80100b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80100b0:	4a2e      	ldr	r2, [pc, #184]	; (801016c <xTaskIncrementTick+0x15c>)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80100b6:	e02f      	b.n	8010118 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3304      	adds	r3, #4
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fe fd2b 	bl	800eb18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d004      	beq.n	80100d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	3318      	adds	r3, #24
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe fd22 	bl	800eb18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d8:	4b25      	ldr	r3, [pc, #148]	; (8010170 <xTaskIncrementTick+0x160>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d903      	bls.n	80100e8 <xTaskIncrementTick+0xd8>
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e4:	4a22      	ldr	r2, [pc, #136]	; (8010170 <xTaskIncrementTick+0x160>)
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4613      	mov	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4a1f      	ldr	r2, [pc, #124]	; (8010174 <xTaskIncrementTick+0x164>)
 80100f6:	441a      	add	r2, r3
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	3304      	adds	r3, #4
 80100fc:	4619      	mov	r1, r3
 80100fe:	4610      	mov	r0, r2
 8010100:	f7fe fcad 	bl	800ea5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010108:	4b1b      	ldr	r3, [pc, #108]	; (8010178 <xTaskIncrementTick+0x168>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010e:	429a      	cmp	r2, r3
 8010110:	d3b8      	bcc.n	8010084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010112:	2301      	movs	r3, #1
 8010114:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010116:	e7b5      	b.n	8010084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010118:	4b17      	ldr	r3, [pc, #92]	; (8010178 <xTaskIncrementTick+0x168>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801011e:	4915      	ldr	r1, [pc, #84]	; (8010174 <xTaskIncrementTick+0x164>)
 8010120:	4613      	mov	r3, r2
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	4413      	add	r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	440b      	add	r3, r1
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b01      	cmp	r3, #1
 801012e:	d901      	bls.n	8010134 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010130:	2301      	movs	r3, #1
 8010132:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010134:	4b11      	ldr	r3, [pc, #68]	; (801017c <xTaskIncrementTick+0x16c>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d007      	beq.n	801014c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801013c:	2301      	movs	r3, #1
 801013e:	617b      	str	r3, [r7, #20]
 8010140:	e004      	b.n	801014c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010142:	4b0f      	ldr	r3, [pc, #60]	; (8010180 <xTaskIncrementTick+0x170>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	3301      	adds	r3, #1
 8010148:	4a0d      	ldr	r2, [pc, #52]	; (8010180 <xTaskIncrementTick+0x170>)
 801014a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801014c:	697b      	ldr	r3, [r7, #20]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3718      	adds	r7, #24
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	24005424 	.word	0x24005424
 801015c:	24005400 	.word	0x24005400
 8010160:	240053b4 	.word	0x240053b4
 8010164:	240053b8 	.word	0x240053b8
 8010168:	24005414 	.word	0x24005414
 801016c:	2400541c 	.word	0x2400541c
 8010170:	24005404 	.word	0x24005404
 8010174:	24004f2c 	.word	0x24004f2c
 8010178:	24004f28 	.word	0x24004f28
 801017c:	24005410 	.word	0x24005410
 8010180:	2400540c 	.word	0x2400540c

08010184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801018a:	4b2a      	ldr	r3, [pc, #168]	; (8010234 <vTaskSwitchContext+0xb0>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d003      	beq.n	801019a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010192:	4b29      	ldr	r3, [pc, #164]	; (8010238 <vTaskSwitchContext+0xb4>)
 8010194:	2201      	movs	r2, #1
 8010196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010198:	e046      	b.n	8010228 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801019a:	4b27      	ldr	r3, [pc, #156]	; (8010238 <vTaskSwitchContext+0xb4>)
 801019c:	2200      	movs	r2, #0
 801019e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101a0:	4b26      	ldr	r3, [pc, #152]	; (801023c <vTaskSwitchContext+0xb8>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	60fb      	str	r3, [r7, #12]
 80101a6:	e010      	b.n	80101ca <vTaskSwitchContext+0x46>
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d10a      	bne.n	80101c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80101ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b2:	f383 8811 	msr	BASEPRI, r3
 80101b6:	f3bf 8f6f 	isb	sy
 80101ba:	f3bf 8f4f 	dsb	sy
 80101be:	607b      	str	r3, [r7, #4]
}
 80101c0:	bf00      	nop
 80101c2:	e7fe      	b.n	80101c2 <vTaskSwitchContext+0x3e>
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	60fb      	str	r3, [r7, #12]
 80101ca:	491d      	ldr	r1, [pc, #116]	; (8010240 <vTaskSwitchContext+0xbc>)
 80101cc:	68fa      	ldr	r2, [r7, #12]
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	440b      	add	r3, r1
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d0e4      	beq.n	80101a8 <vTaskSwitchContext+0x24>
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	4613      	mov	r3, r2
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4413      	add	r3, r2
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4a15      	ldr	r2, [pc, #84]	; (8010240 <vTaskSwitchContext+0xbc>)
 80101ea:	4413      	add	r3, r2
 80101ec:	60bb      	str	r3, [r7, #8]
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	685a      	ldr	r2, [r3, #4]
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	605a      	str	r2, [r3, #4]
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	3308      	adds	r3, #8
 8010200:	429a      	cmp	r2, r3
 8010202:	d104      	bne.n	801020e <vTaskSwitchContext+0x8a>
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	605a      	str	r2, [r3, #4]
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	4a0b      	ldr	r2, [pc, #44]	; (8010244 <vTaskSwitchContext+0xc0>)
 8010216:	6013      	str	r3, [r2, #0]
 8010218:	4a08      	ldr	r2, [pc, #32]	; (801023c <vTaskSwitchContext+0xb8>)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801021e:	4b09      	ldr	r3, [pc, #36]	; (8010244 <vTaskSwitchContext+0xc0>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	3354      	adds	r3, #84	; 0x54
 8010224:	4a08      	ldr	r2, [pc, #32]	; (8010248 <vTaskSwitchContext+0xc4>)
 8010226:	6013      	str	r3, [r2, #0]
}
 8010228:	bf00      	nop
 801022a:	3714      	adds	r7, #20
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr
 8010234:	24005424 	.word	0x24005424
 8010238:	24005410 	.word	0x24005410
 801023c:	24005404 	.word	0x24005404
 8010240:	24004f2c 	.word	0x24004f2c
 8010244:	24004f28 	.word	0x24004f28
 8010248:	2400006c 	.word	0x2400006c

0801024c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d10a      	bne.n	8010272 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801025c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010260:	f383 8811 	msr	BASEPRI, r3
 8010264:	f3bf 8f6f 	isb	sy
 8010268:	f3bf 8f4f 	dsb	sy
 801026c:	60fb      	str	r3, [r7, #12]
}
 801026e:	bf00      	nop
 8010270:	e7fe      	b.n	8010270 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010272:	4b07      	ldr	r3, [pc, #28]	; (8010290 <vTaskPlaceOnEventList+0x44>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	3318      	adds	r3, #24
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7fe fc13 	bl	800eaa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010280:	2101      	movs	r1, #1
 8010282:	6838      	ldr	r0, [r7, #0]
 8010284:	f000 fa80 	bl	8010788 <prvAddCurrentTaskToDelayedList>
}
 8010288:	bf00      	nop
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	24004f28 	.word	0x24004f28

08010294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10a      	bne.n	80102bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80102a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	617b      	str	r3, [r7, #20]
}
 80102b8:	bf00      	nop
 80102ba:	e7fe      	b.n	80102ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102bc:	4b0a      	ldr	r3, [pc, #40]	; (80102e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3318      	adds	r3, #24
 80102c2:	4619      	mov	r1, r3
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f7fe fbca 	bl	800ea5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d002      	beq.n	80102d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80102d0:	f04f 33ff 	mov.w	r3, #4294967295
 80102d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	68b8      	ldr	r0, [r7, #8]
 80102da:	f000 fa55 	bl	8010788 <prvAddCurrentTaskToDelayedList>
	}
 80102de:	bf00      	nop
 80102e0:	3718      	adds	r7, #24
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	24004f28 	.word	0x24004f28

080102ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d10a      	bne.n	8010318 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	60fb      	str	r3, [r7, #12]
}
 8010314:	bf00      	nop
 8010316:	e7fe      	b.n	8010316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	3318      	adds	r3, #24
 801031c:	4618      	mov	r0, r3
 801031e:	f7fe fbfb 	bl	800eb18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010322:	4b1e      	ldr	r3, [pc, #120]	; (801039c <xTaskRemoveFromEventList+0xb0>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d11d      	bne.n	8010366 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	3304      	adds	r3, #4
 801032e:	4618      	mov	r0, r3
 8010330:	f7fe fbf2 	bl	800eb18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010338:	4b19      	ldr	r3, [pc, #100]	; (80103a0 <xTaskRemoveFromEventList+0xb4>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d903      	bls.n	8010348 <xTaskRemoveFromEventList+0x5c>
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010344:	4a16      	ldr	r2, [pc, #88]	; (80103a0 <xTaskRemoveFromEventList+0xb4>)
 8010346:	6013      	str	r3, [r2, #0]
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034c:	4613      	mov	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	4413      	add	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4a13      	ldr	r2, [pc, #76]	; (80103a4 <xTaskRemoveFromEventList+0xb8>)
 8010356:	441a      	add	r2, r3
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	3304      	adds	r3, #4
 801035c:	4619      	mov	r1, r3
 801035e:	4610      	mov	r0, r2
 8010360:	f7fe fb7d 	bl	800ea5e <vListInsertEnd>
 8010364:	e005      	b.n	8010372 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	3318      	adds	r3, #24
 801036a:	4619      	mov	r1, r3
 801036c:	480e      	ldr	r0, [pc, #56]	; (80103a8 <xTaskRemoveFromEventList+0xbc>)
 801036e:	f7fe fb76 	bl	800ea5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010376:	4b0d      	ldr	r3, [pc, #52]	; (80103ac <xTaskRemoveFromEventList+0xc0>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037c:	429a      	cmp	r2, r3
 801037e:	d905      	bls.n	801038c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010380:	2301      	movs	r3, #1
 8010382:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010384:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <xTaskRemoveFromEventList+0xc4>)
 8010386:	2201      	movs	r2, #1
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	e001      	b.n	8010390 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010390:	697b      	ldr	r3, [r7, #20]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	24005424 	.word	0x24005424
 80103a0:	24005404 	.word	0x24005404
 80103a4:	24004f2c 	.word	0x24004f2c
 80103a8:	240053bc 	.word	0x240053bc
 80103ac:	24004f28 	.word	0x24004f28
 80103b0:	24005410 	.word	0x24005410

080103b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103bc:	4b06      	ldr	r3, [pc, #24]	; (80103d8 <vTaskInternalSetTimeOutState+0x24>)
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103c4:	4b05      	ldr	r3, [pc, #20]	; (80103dc <vTaskInternalSetTimeOutState+0x28>)
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	605a      	str	r2, [r3, #4]
}
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	24005414 	.word	0x24005414
 80103dc:	24005400 	.word	0x24005400

080103e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b088      	sub	sp, #32
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10a      	bne.n	8010406 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	613b      	str	r3, [r7, #16]
}
 8010402:	bf00      	nop
 8010404:	e7fe      	b.n	8010404 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10a      	bne.n	8010422 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801040c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010410:	f383 8811 	msr	BASEPRI, r3
 8010414:	f3bf 8f6f 	isb	sy
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	60fb      	str	r3, [r7, #12]
}
 801041e:	bf00      	nop
 8010420:	e7fe      	b.n	8010420 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010422:	f7fe fccf 	bl	800edc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010426:	4b1d      	ldr	r3, [pc, #116]	; (801049c <xTaskCheckForTimeOut+0xbc>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801043e:	d102      	bne.n	8010446 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010440:	2300      	movs	r3, #0
 8010442:	61fb      	str	r3, [r7, #28]
 8010444:	e023      	b.n	801048e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	4b15      	ldr	r3, [pc, #84]	; (80104a0 <xTaskCheckForTimeOut+0xc0>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	d007      	beq.n	8010462 <xTaskCheckForTimeOut+0x82>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	69ba      	ldr	r2, [r7, #24]
 8010458:	429a      	cmp	r2, r3
 801045a:	d302      	bcc.n	8010462 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801045c:	2301      	movs	r3, #1
 801045e:	61fb      	str	r3, [r7, #28]
 8010460:	e015      	b.n	801048e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	697a      	ldr	r2, [r7, #20]
 8010468:	429a      	cmp	r2, r3
 801046a:	d20b      	bcs.n	8010484 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	1ad2      	subs	r2, r2, r3
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7ff ff9b 	bl	80103b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801047e:	2300      	movs	r3, #0
 8010480:	61fb      	str	r3, [r7, #28]
 8010482:	e004      	b.n	801048e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	2200      	movs	r2, #0
 8010488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801048a:	2301      	movs	r3, #1
 801048c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801048e:	f7fe fcc9 	bl	800ee24 <vPortExitCritical>

	return xReturn;
 8010492:	69fb      	ldr	r3, [r7, #28]
}
 8010494:	4618      	mov	r0, r3
 8010496:	3720      	adds	r7, #32
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	24005400 	.word	0x24005400
 80104a0:	24005414 	.word	0x24005414

080104a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104a4:	b480      	push	{r7}
 80104a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104a8:	4b03      	ldr	r3, [pc, #12]	; (80104b8 <vTaskMissedYield+0x14>)
 80104aa:	2201      	movs	r2, #1
 80104ac:	601a      	str	r2, [r3, #0]
}
 80104ae:	bf00      	nop
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr
 80104b8:	24005410 	.word	0x24005410

080104bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104c4:	f000 f852 	bl	801056c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104c8:	4b06      	ldr	r3, [pc, #24]	; (80104e4 <prvIdleTask+0x28>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d9f9      	bls.n	80104c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80104d0:	4b05      	ldr	r3, [pc, #20]	; (80104e8 <prvIdleTask+0x2c>)
 80104d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d6:	601a      	str	r2, [r3, #0]
 80104d8:	f3bf 8f4f 	dsb	sy
 80104dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80104e0:	e7f0      	b.n	80104c4 <prvIdleTask+0x8>
 80104e2:	bf00      	nop
 80104e4:	24004f2c 	.word	0x24004f2c
 80104e8:	e000ed04 	.word	0xe000ed04

080104ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104f2:	2300      	movs	r3, #0
 80104f4:	607b      	str	r3, [r7, #4]
 80104f6:	e00c      	b.n	8010512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	4613      	mov	r3, r2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4a12      	ldr	r2, [pc, #72]	; (801054c <prvInitialiseTaskLists+0x60>)
 8010504:	4413      	add	r3, r2
 8010506:	4618      	mov	r0, r3
 8010508:	f7fe fa7c 	bl	800ea04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	3301      	adds	r3, #1
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b37      	cmp	r3, #55	; 0x37
 8010516:	d9ef      	bls.n	80104f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010518:	480d      	ldr	r0, [pc, #52]	; (8010550 <prvInitialiseTaskLists+0x64>)
 801051a:	f7fe fa73 	bl	800ea04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801051e:	480d      	ldr	r0, [pc, #52]	; (8010554 <prvInitialiseTaskLists+0x68>)
 8010520:	f7fe fa70 	bl	800ea04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010524:	480c      	ldr	r0, [pc, #48]	; (8010558 <prvInitialiseTaskLists+0x6c>)
 8010526:	f7fe fa6d 	bl	800ea04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801052a:	480c      	ldr	r0, [pc, #48]	; (801055c <prvInitialiseTaskLists+0x70>)
 801052c:	f7fe fa6a 	bl	800ea04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010530:	480b      	ldr	r0, [pc, #44]	; (8010560 <prvInitialiseTaskLists+0x74>)
 8010532:	f7fe fa67 	bl	800ea04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010536:	4b0b      	ldr	r3, [pc, #44]	; (8010564 <prvInitialiseTaskLists+0x78>)
 8010538:	4a05      	ldr	r2, [pc, #20]	; (8010550 <prvInitialiseTaskLists+0x64>)
 801053a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801053c:	4b0a      	ldr	r3, [pc, #40]	; (8010568 <prvInitialiseTaskLists+0x7c>)
 801053e:	4a05      	ldr	r2, [pc, #20]	; (8010554 <prvInitialiseTaskLists+0x68>)
 8010540:	601a      	str	r2, [r3, #0]
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	24004f2c 	.word	0x24004f2c
 8010550:	2400538c 	.word	0x2400538c
 8010554:	240053a0 	.word	0x240053a0
 8010558:	240053bc 	.word	0x240053bc
 801055c:	240053d0 	.word	0x240053d0
 8010560:	240053e8 	.word	0x240053e8
 8010564:	240053b4 	.word	0x240053b4
 8010568:	240053b8 	.word	0x240053b8

0801056c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010572:	e019      	b.n	80105a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010574:	f7fe fc26 	bl	800edc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010578:	4b10      	ldr	r3, [pc, #64]	; (80105bc <prvCheckTasksWaitingTermination+0x50>)
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	3304      	adds	r3, #4
 8010584:	4618      	mov	r0, r3
 8010586:	f7fe fac7 	bl	800eb18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801058a:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <prvCheckTasksWaitingTermination+0x54>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3b01      	subs	r3, #1
 8010590:	4a0b      	ldr	r2, [pc, #44]	; (80105c0 <prvCheckTasksWaitingTermination+0x54>)
 8010592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010594:	4b0b      	ldr	r3, [pc, #44]	; (80105c4 <prvCheckTasksWaitingTermination+0x58>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3b01      	subs	r3, #1
 801059a:	4a0a      	ldr	r2, [pc, #40]	; (80105c4 <prvCheckTasksWaitingTermination+0x58>)
 801059c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801059e:	f7fe fc41 	bl	800ee24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f810 	bl	80105c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105a8:	4b06      	ldr	r3, [pc, #24]	; (80105c4 <prvCheckTasksWaitingTermination+0x58>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e1      	bne.n	8010574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80105b0:	bf00      	nop
 80105b2:	bf00      	nop
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	240053d0 	.word	0x240053d0
 80105c0:	240053fc 	.word	0x240053fc
 80105c4:	240053e4 	.word	0x240053e4

080105c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3354      	adds	r3, #84	; 0x54
 80105d4:	4618      	mov	r0, r3
 80105d6:	f001 fcef 	bl	8011fb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d108      	bne.n	80105f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe f8ed 	bl	800e7c8 <vPortFree>
				vPortFree( pxTCB );
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7fe f8ea 	bl	800e7c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80105f4:	e018      	b.n	8010628 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d103      	bne.n	8010608 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f7fe f8e1 	bl	800e7c8 <vPortFree>
	}
 8010606:	e00f      	b.n	8010628 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801060e:	2b02      	cmp	r3, #2
 8010610:	d00a      	beq.n	8010628 <prvDeleteTCB+0x60>
	__asm volatile
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	60fb      	str	r3, [r7, #12]
}
 8010624:	bf00      	nop
 8010626:	e7fe      	b.n	8010626 <prvDeleteTCB+0x5e>
	}
 8010628:	bf00      	nop
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010636:	4b0c      	ldr	r3, [pc, #48]	; (8010668 <prvResetNextTaskUnblockTime+0x38>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d104      	bne.n	801064a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010640:	4b0a      	ldr	r3, [pc, #40]	; (801066c <prvResetNextTaskUnblockTime+0x3c>)
 8010642:	f04f 32ff 	mov.w	r2, #4294967295
 8010646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010648:	e008      	b.n	801065c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801064a:	4b07      	ldr	r3, [pc, #28]	; (8010668 <prvResetNextTaskUnblockTime+0x38>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	4a04      	ldr	r2, [pc, #16]	; (801066c <prvResetNextTaskUnblockTime+0x3c>)
 801065a:	6013      	str	r3, [r2, #0]
}
 801065c:	bf00      	nop
 801065e:	370c      	adds	r7, #12
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr
 8010668:	240053b4 	.word	0x240053b4
 801066c:	2400541c 	.word	0x2400541c

08010670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010676:	4b0b      	ldr	r3, [pc, #44]	; (80106a4 <xTaskGetSchedulerState+0x34>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d102      	bne.n	8010684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801067e:	2301      	movs	r3, #1
 8010680:	607b      	str	r3, [r7, #4]
 8010682:	e008      	b.n	8010696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010684:	4b08      	ldr	r3, [pc, #32]	; (80106a8 <xTaskGetSchedulerState+0x38>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d102      	bne.n	8010692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801068c:	2302      	movs	r3, #2
 801068e:	607b      	str	r3, [r7, #4]
 8010690:	e001      	b.n	8010696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010692:	2300      	movs	r3, #0
 8010694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010696:	687b      	ldr	r3, [r7, #4]
	}
 8010698:	4618      	mov	r0, r3
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr
 80106a4:	24005408 	.word	0x24005408
 80106a8:	24005424 	.word	0x24005424

080106ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106b8:	2300      	movs	r3, #0
 80106ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d056      	beq.n	8010770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106c2:	4b2e      	ldr	r3, [pc, #184]	; (801077c <xTaskPriorityDisinherit+0xd0>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	693a      	ldr	r2, [r7, #16]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d00a      	beq.n	80106e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80106cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d0:	f383 8811 	msr	BASEPRI, r3
 80106d4:	f3bf 8f6f 	isb	sy
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	60fb      	str	r3, [r7, #12]
}
 80106de:	bf00      	nop
 80106e0:	e7fe      	b.n	80106e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10a      	bne.n	8010700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80106ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	60bb      	str	r3, [r7, #8]
}
 80106fc:	bf00      	nop
 80106fe:	e7fe      	b.n	80106fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010704:	1e5a      	subs	r2, r3, #1
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010712:	429a      	cmp	r2, r3
 8010714:	d02c      	beq.n	8010770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801071a:	2b00      	cmp	r3, #0
 801071c:	d128      	bne.n	8010770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	3304      	adds	r3, #4
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe f9f8 	bl	800eb18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010740:	4b0f      	ldr	r3, [pc, #60]	; (8010780 <xTaskPriorityDisinherit+0xd4>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	429a      	cmp	r2, r3
 8010746:	d903      	bls.n	8010750 <xTaskPriorityDisinherit+0xa4>
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801074c:	4a0c      	ldr	r2, [pc, #48]	; (8010780 <xTaskPriorityDisinherit+0xd4>)
 801074e:	6013      	str	r3, [r2, #0]
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010754:	4613      	mov	r3, r2
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	4413      	add	r3, r2
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4a09      	ldr	r2, [pc, #36]	; (8010784 <xTaskPriorityDisinherit+0xd8>)
 801075e:	441a      	add	r2, r3
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	3304      	adds	r3, #4
 8010764:	4619      	mov	r1, r3
 8010766:	4610      	mov	r0, r2
 8010768:	f7fe f979 	bl	800ea5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801076c:	2301      	movs	r3, #1
 801076e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010770:	697b      	ldr	r3, [r7, #20]
	}
 8010772:	4618      	mov	r0, r3
 8010774:	3718      	adds	r7, #24
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	24004f28 	.word	0x24004f28
 8010780:	24005404 	.word	0x24005404
 8010784:	24004f2c 	.word	0x24004f2c

08010788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010792:	4b21      	ldr	r3, [pc, #132]	; (8010818 <prvAddCurrentTaskToDelayedList+0x90>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010798:	4b20      	ldr	r3, [pc, #128]	; (801081c <prvAddCurrentTaskToDelayedList+0x94>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3304      	adds	r3, #4
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fe f9ba 	bl	800eb18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107aa:	d10a      	bne.n	80107c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d007      	beq.n	80107c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107b2:	4b1a      	ldr	r3, [pc, #104]	; (801081c <prvAddCurrentTaskToDelayedList+0x94>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	3304      	adds	r3, #4
 80107b8:	4619      	mov	r1, r3
 80107ba:	4819      	ldr	r0, [pc, #100]	; (8010820 <prvAddCurrentTaskToDelayedList+0x98>)
 80107bc:	f7fe f94f 	bl	800ea5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107c0:	e026      	b.n	8010810 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4413      	add	r3, r2
 80107c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107ca:	4b14      	ldr	r3, [pc, #80]	; (801081c <prvAddCurrentTaskToDelayedList+0x94>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d209      	bcs.n	80107ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107da:	4b12      	ldr	r3, [pc, #72]	; (8010824 <prvAddCurrentTaskToDelayedList+0x9c>)
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	4b0f      	ldr	r3, [pc, #60]	; (801081c <prvAddCurrentTaskToDelayedList+0x94>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	3304      	adds	r3, #4
 80107e4:	4619      	mov	r1, r3
 80107e6:	4610      	mov	r0, r2
 80107e8:	f7fe f95d 	bl	800eaa6 <vListInsert>
}
 80107ec:	e010      	b.n	8010810 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107ee:	4b0e      	ldr	r3, [pc, #56]	; (8010828 <prvAddCurrentTaskToDelayedList+0xa0>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	4b0a      	ldr	r3, [pc, #40]	; (801081c <prvAddCurrentTaskToDelayedList+0x94>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3304      	adds	r3, #4
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f7fe f953 	bl	800eaa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010800:	4b0a      	ldr	r3, [pc, #40]	; (801082c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68ba      	ldr	r2, [r7, #8]
 8010806:	429a      	cmp	r2, r3
 8010808:	d202      	bcs.n	8010810 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801080a:	4a08      	ldr	r2, [pc, #32]	; (801082c <prvAddCurrentTaskToDelayedList+0xa4>)
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	6013      	str	r3, [r2, #0]
}
 8010810:	bf00      	nop
 8010812:	3710      	adds	r7, #16
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	24005400 	.word	0x24005400
 801081c:	24004f28 	.word	0x24004f28
 8010820:	240053e8 	.word	0x240053e8
 8010824:	240053b8 	.word	0x240053b8
 8010828:	240053b4 	.word	0x240053b4
 801082c:	2400541c 	.word	0x2400541c

08010830 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b08a      	sub	sp, #40	; 0x28
 8010834:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010836:	2300      	movs	r3, #0
 8010838:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801083a:	f000 fb07 	bl	8010e4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801083e:	4b1c      	ldr	r3, [pc, #112]	; (80108b0 <xTimerCreateTimerTask+0x80>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d021      	beq.n	801088a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010846:	2300      	movs	r3, #0
 8010848:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801084a:	2300      	movs	r3, #0
 801084c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801084e:	1d3a      	adds	r2, r7, #4
 8010850:	f107 0108 	add.w	r1, r7, #8
 8010854:	f107 030c 	add.w	r3, r7, #12
 8010858:	4618      	mov	r0, r3
 801085a:	f7fd fecf 	bl	800e5fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801085e:	6879      	ldr	r1, [r7, #4]
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	9202      	str	r2, [sp, #8]
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	2302      	movs	r3, #2
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	2300      	movs	r3, #0
 801086e:	460a      	mov	r2, r1
 8010870:	4910      	ldr	r1, [pc, #64]	; (80108b4 <xTimerCreateTimerTask+0x84>)
 8010872:	4811      	ldr	r0, [pc, #68]	; (80108b8 <xTimerCreateTimerTask+0x88>)
 8010874:	f7ff f8b4 	bl	800f9e0 <xTaskCreateStatic>
 8010878:	4603      	mov	r3, r0
 801087a:	4a10      	ldr	r2, [pc, #64]	; (80108bc <xTimerCreateTimerTask+0x8c>)
 801087c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801087e:	4b0f      	ldr	r3, [pc, #60]	; (80108bc <xTimerCreateTimerTask+0x8c>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d001      	beq.n	801088a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010886:	2301      	movs	r3, #1
 8010888:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10a      	bne.n	80108a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	613b      	str	r3, [r7, #16]
}
 80108a2:	bf00      	nop
 80108a4:	e7fe      	b.n	80108a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80108a6:	697b      	ldr	r3, [r7, #20]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3718      	adds	r7, #24
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	24005458 	.word	0x24005458
 80108b4:	08015614 	.word	0x08015614
 80108b8:	080109f5 	.word	0x080109f5
 80108bc:	2400545c 	.word	0x2400545c

080108c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08a      	sub	sp, #40	; 0x28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80108ce:	2300      	movs	r3, #0
 80108d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d10a      	bne.n	80108ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80108d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	623b      	str	r3, [r7, #32]
}
 80108ea:	bf00      	nop
 80108ec:	e7fe      	b.n	80108ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80108ee:	4b1a      	ldr	r3, [pc, #104]	; (8010958 <xTimerGenericCommand+0x98>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d02a      	beq.n	801094c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2b05      	cmp	r3, #5
 8010906:	dc18      	bgt.n	801093a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010908:	f7ff feb2 	bl	8010670 <xTaskGetSchedulerState>
 801090c:	4603      	mov	r3, r0
 801090e:	2b02      	cmp	r3, #2
 8010910:	d109      	bne.n	8010926 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010912:	4b11      	ldr	r3, [pc, #68]	; (8010958 <xTimerGenericCommand+0x98>)
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	f107 0110 	add.w	r1, r7, #16
 801091a:	2300      	movs	r3, #0
 801091c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091e:	f7fe fc77 	bl	800f210 <xQueueGenericSend>
 8010922:	6278      	str	r0, [r7, #36]	; 0x24
 8010924:	e012      	b.n	801094c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010926:	4b0c      	ldr	r3, [pc, #48]	; (8010958 <xTimerGenericCommand+0x98>)
 8010928:	6818      	ldr	r0, [r3, #0]
 801092a:	f107 0110 	add.w	r1, r7, #16
 801092e:	2300      	movs	r3, #0
 8010930:	2200      	movs	r2, #0
 8010932:	f7fe fc6d 	bl	800f210 <xQueueGenericSend>
 8010936:	6278      	str	r0, [r7, #36]	; 0x24
 8010938:	e008      	b.n	801094c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801093a:	4b07      	ldr	r3, [pc, #28]	; (8010958 <xTimerGenericCommand+0x98>)
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	f107 0110 	add.w	r1, r7, #16
 8010942:	2300      	movs	r3, #0
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	f7fe fd61 	bl	800f40c <xQueueGenericSendFromISR>
 801094a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801094e:	4618      	mov	r0, r3
 8010950:	3728      	adds	r7, #40	; 0x28
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	24005458 	.word	0x24005458

0801095c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b088      	sub	sp, #32
 8010960:	af02      	add	r7, sp, #8
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010966:	4b22      	ldr	r3, [pc, #136]	; (80109f0 <prvProcessExpiredTimer+0x94>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	68db      	ldr	r3, [r3, #12]
 801096e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	3304      	adds	r3, #4
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe f8cf 	bl	800eb18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010980:	f003 0304 	and.w	r3, r3, #4
 8010984:	2b00      	cmp	r3, #0
 8010986:	d022      	beq.n	80109ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	699a      	ldr	r2, [r3, #24]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	18d1      	adds	r1, r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	6978      	ldr	r0, [r7, #20]
 8010996:	f000 f8d1 	bl	8010b3c <prvInsertTimerInActiveList>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d01f      	beq.n	80109e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109a0:	2300      	movs	r3, #0
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	2300      	movs	r3, #0
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	2100      	movs	r1, #0
 80109aa:	6978      	ldr	r0, [r7, #20]
 80109ac:	f7ff ff88 	bl	80108c0 <xTimerGenericCommand>
 80109b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d113      	bne.n	80109e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	60fb      	str	r3, [r7, #12]
}
 80109ca:	bf00      	nop
 80109cc:	e7fe      	b.n	80109cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109d4:	f023 0301 	bic.w	r3, r3, #1
 80109d8:	b2da      	uxtb	r2, r3
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	6a1b      	ldr	r3, [r3, #32]
 80109e4:	6978      	ldr	r0, [r7, #20]
 80109e6:	4798      	blx	r3
}
 80109e8:	bf00      	nop
 80109ea:	3718      	adds	r7, #24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	24005450 	.word	0x24005450

080109f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109fc:	f107 0308 	add.w	r3, r7, #8
 8010a00:	4618      	mov	r0, r3
 8010a02:	f000 f857 	bl	8010ab4 <prvGetNextExpireTime>
 8010a06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f000 f803 	bl	8010a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a12:	f000 f8d5 	bl	8010bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a16:	e7f1      	b.n	80109fc <prvTimerTask+0x8>

08010a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b084      	sub	sp, #16
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a22:	f7ff fa39 	bl	800fe98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a26:	f107 0308 	add.w	r3, r7, #8
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f000 f866 	bl	8010afc <prvSampleTimeNow>
 8010a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d130      	bne.n	8010a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10a      	bne.n	8010a54 <prvProcessTimerOrBlockTask+0x3c>
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d806      	bhi.n	8010a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a46:	f7ff fa35 	bl	800feb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a4a:	68f9      	ldr	r1, [r7, #12]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff ff85 	bl	801095c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a52:	e024      	b.n	8010a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d008      	beq.n	8010a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a5a:	4b13      	ldr	r3, [pc, #76]	; (8010aa8 <prvProcessTimerOrBlockTask+0x90>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d101      	bne.n	8010a68 <prvProcessTimerOrBlockTask+0x50>
 8010a64:	2301      	movs	r3, #1
 8010a66:	e000      	b.n	8010a6a <prvProcessTimerOrBlockTask+0x52>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a6c:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <prvProcessTimerOrBlockTask+0x94>)
 8010a6e:	6818      	ldr	r0, [r3, #0]
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	4619      	mov	r1, r3
 8010a7a:	f7fe ff7d 	bl	800f978 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a7e:	f7ff fa19 	bl	800feb4 <xTaskResumeAll>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d10a      	bne.n	8010a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a88:	4b09      	ldr	r3, [pc, #36]	; (8010ab0 <prvProcessTimerOrBlockTask+0x98>)
 8010a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	f3bf 8f6f 	isb	sy
}
 8010a98:	e001      	b.n	8010a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010a9a:	f7ff fa0b 	bl	800feb4 <xTaskResumeAll>
}
 8010a9e:	bf00      	nop
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	24005454 	.word	0x24005454
 8010aac:	24005458 	.word	0x24005458
 8010ab0:	e000ed04 	.word	0xe000ed04

08010ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b085      	sub	sp, #20
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010abc:	4b0e      	ldr	r3, [pc, #56]	; (8010af8 <prvGetNextExpireTime+0x44>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d101      	bne.n	8010aca <prvGetNextExpireTime+0x16>
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	e000      	b.n	8010acc <prvGetNextExpireTime+0x18>
 8010aca:	2200      	movs	r2, #0
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d105      	bne.n	8010ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ad8:	4b07      	ldr	r3, [pc, #28]	; (8010af8 <prvGetNextExpireTime+0x44>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	e001      	b.n	8010ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3714      	adds	r7, #20
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	24005450 	.word	0x24005450

08010afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b04:	f7ff fa74 	bl	800fff0 <xTaskGetTickCount>
 8010b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b0a:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <prvSampleTimeNow+0x3c>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d205      	bcs.n	8010b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b14:	f000 f936 	bl	8010d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]
 8010b1e:	e002      	b.n	8010b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b26:	4a04      	ldr	r2, [pc, #16]	; (8010b38 <prvSampleTimeNow+0x3c>)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	24005460 	.word	0x24005460

08010b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
 8010b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	68ba      	ldr	r2, [r7, #8]
 8010b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d812      	bhi.n	8010b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	1ad2      	subs	r2, r2, r3
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	699b      	ldr	r3, [r3, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d302      	bcc.n	8010b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b70:	2301      	movs	r3, #1
 8010b72:	617b      	str	r3, [r7, #20]
 8010b74:	e01b      	b.n	8010bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b76:	4b10      	ldr	r3, [pc, #64]	; (8010bb8 <prvInsertTimerInActiveList+0x7c>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	4619      	mov	r1, r3
 8010b80:	4610      	mov	r0, r2
 8010b82:	f7fd ff90 	bl	800eaa6 <vListInsert>
 8010b86:	e012      	b.n	8010bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d206      	bcs.n	8010b9e <prvInsertTimerInActiveList+0x62>
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d302      	bcc.n	8010b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	e007      	b.n	8010bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b9e:	4b07      	ldr	r3, [pc, #28]	; (8010bbc <prvInsertTimerInActiveList+0x80>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4610      	mov	r0, r2
 8010baa:	f7fd ff7c 	bl	800eaa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010bae:	697b      	ldr	r3, [r7, #20]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3718      	adds	r7, #24
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	24005454 	.word	0x24005454
 8010bbc:	24005450 	.word	0x24005450

08010bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b08e      	sub	sp, #56	; 0x38
 8010bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bc6:	e0ca      	b.n	8010d5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	da18      	bge.n	8010c00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010bce:	1d3b      	adds	r3, r7, #4
 8010bd0:	3304      	adds	r3, #4
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d10a      	bne.n	8010bf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bde:	f383 8811 	msr	BASEPRI, r3
 8010be2:	f3bf 8f6f 	isb	sy
 8010be6:	f3bf 8f4f 	dsb	sy
 8010bea:	61fb      	str	r3, [r7, #28]
}
 8010bec:	bf00      	nop
 8010bee:	e7fe      	b.n	8010bee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bf6:	6850      	ldr	r0, [r2, #4]
 8010bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bfa:	6892      	ldr	r2, [r2, #8]
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f2c0 80ab 	blt.w	8010d5e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	695b      	ldr	r3, [r3, #20]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d004      	beq.n	8010c1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c16:	3304      	adds	r3, #4
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fd ff7d 	bl	800eb18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c1e:	463b      	mov	r3, r7
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7ff ff6b 	bl	8010afc <prvSampleTimeNow>
 8010c26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b09      	cmp	r3, #9
 8010c2c:	f200 8096 	bhi.w	8010d5c <prvProcessReceivedCommands+0x19c>
 8010c30:	a201      	add	r2, pc, #4	; (adr r2, 8010c38 <prvProcessReceivedCommands+0x78>)
 8010c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c36:	bf00      	nop
 8010c38:	08010c61 	.word	0x08010c61
 8010c3c:	08010c61 	.word	0x08010c61
 8010c40:	08010c61 	.word	0x08010c61
 8010c44:	08010cd5 	.word	0x08010cd5
 8010c48:	08010ce9 	.word	0x08010ce9
 8010c4c:	08010d33 	.word	0x08010d33
 8010c50:	08010c61 	.word	0x08010c61
 8010c54:	08010c61 	.word	0x08010c61
 8010c58:	08010cd5 	.word	0x08010cd5
 8010c5c:	08010ce9 	.word	0x08010ce9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c66:	f043 0301 	orr.w	r3, r3, #1
 8010c6a:	b2da      	uxtb	r2, r3
 8010c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c76:	699b      	ldr	r3, [r3, #24]
 8010c78:	18d1      	adds	r1, r2, r3
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c80:	f7ff ff5c 	bl	8010b3c <prvInsertTimerInActiveList>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d069      	beq.n	8010d5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8c:	6a1b      	ldr	r3, [r3, #32]
 8010c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c98:	f003 0304 	and.w	r3, r3, #4
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d05e      	beq.n	8010d5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca4:	699b      	ldr	r3, [r3, #24]
 8010ca6:	441a      	add	r2, r3
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	2300      	movs	r3, #0
 8010cae:	2100      	movs	r1, #0
 8010cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cb2:	f7ff fe05 	bl	80108c0 <xTimerGenericCommand>
 8010cb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010cb8:	6a3b      	ldr	r3, [r7, #32]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d14f      	bne.n	8010d5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	61bb      	str	r3, [r7, #24]
}
 8010cd0:	bf00      	nop
 8010cd2:	e7fe      	b.n	8010cd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cda:	f023 0301 	bic.w	r3, r3, #1
 8010cde:	b2da      	uxtb	r2, r3
 8010ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ce6:	e03a      	b.n	8010d5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cee:	f043 0301 	orr.w	r3, r3, #1
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	699b      	ldr	r3, [r3, #24]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10a      	bne.n	8010d1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	617b      	str	r3, [r7, #20]
}
 8010d1a:	bf00      	nop
 8010d1c:	e7fe      	b.n	8010d1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	699a      	ldr	r2, [r3, #24]
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	18d1      	adds	r1, r2, r3
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d2c:	f7ff ff06 	bl	8010b3c <prvInsertTimerInActiveList>
					break;
 8010d30:	e015      	b.n	8010d5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d38:	f003 0302 	and.w	r3, r3, #2
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d103      	bne.n	8010d48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d42:	f7fd fd41 	bl	800e7c8 <vPortFree>
 8010d46:	e00a      	b.n	8010d5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d4e:	f023 0301 	bic.w	r3, r3, #1
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d5a:	e000      	b.n	8010d5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d5e:	4b08      	ldr	r3, [pc, #32]	; (8010d80 <prvProcessReceivedCommands+0x1c0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	1d39      	adds	r1, r7, #4
 8010d64:	2200      	movs	r2, #0
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fe fbec 	bl	800f544 <xQueueReceive>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f47f af2a 	bne.w	8010bc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	3730      	adds	r7, #48	; 0x30
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	24005458 	.word	0x24005458

08010d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d8a:	e048      	b.n	8010e1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d8c:	4b2d      	ldr	r3, [pc, #180]	; (8010e44 <prvSwitchTimerLists+0xc0>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d96:	4b2b      	ldr	r3, [pc, #172]	; (8010e44 <prvSwitchTimerLists+0xc0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	3304      	adds	r3, #4
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fd feb7 	bl	800eb18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	6a1b      	ldr	r3, [r3, #32]
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d02e      	beq.n	8010e1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	699b      	ldr	r3, [r3, #24]
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d90e      	bls.n	8010df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dde:	4b19      	ldr	r3, [pc, #100]	; (8010e44 <prvSwitchTimerLists+0xc0>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3304      	adds	r3, #4
 8010de6:	4619      	mov	r1, r3
 8010de8:	4610      	mov	r0, r2
 8010dea:	f7fd fe5c 	bl	800eaa6 <vListInsert>
 8010dee:	e016      	b.n	8010e1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010df0:	2300      	movs	r3, #0
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	2300      	movs	r3, #0
 8010df6:	693a      	ldr	r2, [r7, #16]
 8010df8:	2100      	movs	r1, #0
 8010dfa:	68f8      	ldr	r0, [r7, #12]
 8010dfc:	f7ff fd60 	bl	80108c0 <xTimerGenericCommand>
 8010e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10a      	bne.n	8010e1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	603b      	str	r3, [r7, #0]
}
 8010e1a:	bf00      	nop
 8010e1c:	e7fe      	b.n	8010e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e1e:	4b09      	ldr	r3, [pc, #36]	; (8010e44 <prvSwitchTimerLists+0xc0>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1b1      	bne.n	8010d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e28:	4b06      	ldr	r3, [pc, #24]	; (8010e44 <prvSwitchTimerLists+0xc0>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e2e:	4b06      	ldr	r3, [pc, #24]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a04      	ldr	r2, [pc, #16]	; (8010e44 <prvSwitchTimerLists+0xc0>)
 8010e34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e36:	4a04      	ldr	r2, [pc, #16]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	6013      	str	r3, [r2, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	3718      	adds	r7, #24
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	24005450 	.word	0x24005450
 8010e48:	24005454 	.word	0x24005454

08010e4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e52:	f7fd ffb7 	bl	800edc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e56:	4b15      	ldr	r3, [pc, #84]	; (8010eac <prvCheckForValidListAndQueue+0x60>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d120      	bne.n	8010ea0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e5e:	4814      	ldr	r0, [pc, #80]	; (8010eb0 <prvCheckForValidListAndQueue+0x64>)
 8010e60:	f7fd fdd0 	bl	800ea04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e64:	4813      	ldr	r0, [pc, #76]	; (8010eb4 <prvCheckForValidListAndQueue+0x68>)
 8010e66:	f7fd fdcd 	bl	800ea04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e6a:	4b13      	ldr	r3, [pc, #76]	; (8010eb8 <prvCheckForValidListAndQueue+0x6c>)
 8010e6c:	4a10      	ldr	r2, [pc, #64]	; (8010eb0 <prvCheckForValidListAndQueue+0x64>)
 8010e6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e70:	4b12      	ldr	r3, [pc, #72]	; (8010ebc <prvCheckForValidListAndQueue+0x70>)
 8010e72:	4a10      	ldr	r2, [pc, #64]	; (8010eb4 <prvCheckForValidListAndQueue+0x68>)
 8010e74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e76:	2300      	movs	r3, #0
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	4b11      	ldr	r3, [pc, #68]	; (8010ec0 <prvCheckForValidListAndQueue+0x74>)
 8010e7c:	4a11      	ldr	r2, [pc, #68]	; (8010ec4 <prvCheckForValidListAndQueue+0x78>)
 8010e7e:	2110      	movs	r1, #16
 8010e80:	200a      	movs	r0, #10
 8010e82:	f7fe f929 	bl	800f0d8 <xQueueGenericCreateStatic>
 8010e86:	4603      	mov	r3, r0
 8010e88:	4a08      	ldr	r2, [pc, #32]	; (8010eac <prvCheckForValidListAndQueue+0x60>)
 8010e8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e8c:	4b07      	ldr	r3, [pc, #28]	; (8010eac <prvCheckForValidListAndQueue+0x60>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d005      	beq.n	8010ea0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e94:	4b05      	ldr	r3, [pc, #20]	; (8010eac <prvCheckForValidListAndQueue+0x60>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	490b      	ldr	r1, [pc, #44]	; (8010ec8 <prvCheckForValidListAndQueue+0x7c>)
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fe fd42 	bl	800f924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ea0:	f7fd ffc0 	bl	800ee24 <vPortExitCritical>
}
 8010ea4:	bf00      	nop
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	24005458 	.word	0x24005458
 8010eb0:	24005428 	.word	0x24005428
 8010eb4:	2400543c 	.word	0x2400543c
 8010eb8:	24005450 	.word	0x24005450
 8010ebc:	24005454 	.word	0x24005454
 8010ec0:	24005504 	.word	0x24005504
 8010ec4:	24005464 	.word	0x24005464
 8010ec8:	0801561c 	.word	0x0801561c

08010ecc <_ZdlPvj>:
 8010ecc:	f000 b800 	b.w	8010ed0 <_ZdlPv>

08010ed0 <_ZdlPv>:
 8010ed0:	f000 b808 	b.w	8010ee4 <free>

08010ed4 <malloc>:
 8010ed4:	4b02      	ldr	r3, [pc, #8]	; (8010ee0 <malloc+0xc>)
 8010ed6:	4601      	mov	r1, r0
 8010ed8:	6818      	ldr	r0, [r3, #0]
 8010eda:	f000 b82b 	b.w	8010f34 <_malloc_r>
 8010ede:	bf00      	nop
 8010ee0:	2400006c 	.word	0x2400006c

08010ee4 <free>:
 8010ee4:	4b02      	ldr	r3, [pc, #8]	; (8010ef0 <free+0xc>)
 8010ee6:	4601      	mov	r1, r0
 8010ee8:	6818      	ldr	r0, [r3, #0]
 8010eea:	f001 bf39 	b.w	8012d60 <_free_r>
 8010eee:	bf00      	nop
 8010ef0:	2400006c 	.word	0x2400006c

08010ef4 <sbrk_aligned>:
 8010ef4:	b570      	push	{r4, r5, r6, lr}
 8010ef6:	4e0e      	ldr	r6, [pc, #56]	; (8010f30 <sbrk_aligned+0x3c>)
 8010ef8:	460c      	mov	r4, r1
 8010efa:	6831      	ldr	r1, [r6, #0]
 8010efc:	4605      	mov	r5, r0
 8010efe:	b911      	cbnz	r1, 8010f06 <sbrk_aligned+0x12>
 8010f00:	f001 f8d4 	bl	80120ac <_sbrk_r>
 8010f04:	6030      	str	r0, [r6, #0]
 8010f06:	4621      	mov	r1, r4
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f001 f8cf 	bl	80120ac <_sbrk_r>
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	d00a      	beq.n	8010f28 <sbrk_aligned+0x34>
 8010f12:	1cc4      	adds	r4, r0, #3
 8010f14:	f024 0403 	bic.w	r4, r4, #3
 8010f18:	42a0      	cmp	r0, r4
 8010f1a:	d007      	beq.n	8010f2c <sbrk_aligned+0x38>
 8010f1c:	1a21      	subs	r1, r4, r0
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f001 f8c4 	bl	80120ac <_sbrk_r>
 8010f24:	3001      	adds	r0, #1
 8010f26:	d101      	bne.n	8010f2c <sbrk_aligned+0x38>
 8010f28:	f04f 34ff 	mov.w	r4, #4294967295
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	bd70      	pop	{r4, r5, r6, pc}
 8010f30:	24005558 	.word	0x24005558

08010f34 <_malloc_r>:
 8010f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f38:	1ccd      	adds	r5, r1, #3
 8010f3a:	f025 0503 	bic.w	r5, r5, #3
 8010f3e:	3508      	adds	r5, #8
 8010f40:	2d0c      	cmp	r5, #12
 8010f42:	bf38      	it	cc
 8010f44:	250c      	movcc	r5, #12
 8010f46:	2d00      	cmp	r5, #0
 8010f48:	4607      	mov	r7, r0
 8010f4a:	db01      	blt.n	8010f50 <_malloc_r+0x1c>
 8010f4c:	42a9      	cmp	r1, r5
 8010f4e:	d905      	bls.n	8010f5c <_malloc_r+0x28>
 8010f50:	230c      	movs	r3, #12
 8010f52:	603b      	str	r3, [r7, #0]
 8010f54:	2600      	movs	r6, #0
 8010f56:	4630      	mov	r0, r6
 8010f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011030 <_malloc_r+0xfc>
 8010f60:	f000 f868 	bl	8011034 <__malloc_lock>
 8010f64:	f8d8 3000 	ldr.w	r3, [r8]
 8010f68:	461c      	mov	r4, r3
 8010f6a:	bb5c      	cbnz	r4, 8010fc4 <_malloc_r+0x90>
 8010f6c:	4629      	mov	r1, r5
 8010f6e:	4638      	mov	r0, r7
 8010f70:	f7ff ffc0 	bl	8010ef4 <sbrk_aligned>
 8010f74:	1c43      	adds	r3, r0, #1
 8010f76:	4604      	mov	r4, r0
 8010f78:	d155      	bne.n	8011026 <_malloc_r+0xf2>
 8010f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8010f7e:	4626      	mov	r6, r4
 8010f80:	2e00      	cmp	r6, #0
 8010f82:	d145      	bne.n	8011010 <_malloc_r+0xdc>
 8010f84:	2c00      	cmp	r4, #0
 8010f86:	d048      	beq.n	801101a <_malloc_r+0xe6>
 8010f88:	6823      	ldr	r3, [r4, #0]
 8010f8a:	4631      	mov	r1, r6
 8010f8c:	4638      	mov	r0, r7
 8010f8e:	eb04 0903 	add.w	r9, r4, r3
 8010f92:	f001 f88b 	bl	80120ac <_sbrk_r>
 8010f96:	4581      	cmp	r9, r0
 8010f98:	d13f      	bne.n	801101a <_malloc_r+0xe6>
 8010f9a:	6821      	ldr	r1, [r4, #0]
 8010f9c:	1a6d      	subs	r5, r5, r1
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	4638      	mov	r0, r7
 8010fa2:	f7ff ffa7 	bl	8010ef4 <sbrk_aligned>
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	d037      	beq.n	801101a <_malloc_r+0xe6>
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	442b      	add	r3, r5
 8010fae:	6023      	str	r3, [r4, #0]
 8010fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d038      	beq.n	801102a <_malloc_r+0xf6>
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	42a2      	cmp	r2, r4
 8010fbc:	d12b      	bne.n	8011016 <_malloc_r+0xe2>
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	605a      	str	r2, [r3, #4]
 8010fc2:	e00f      	b.n	8010fe4 <_malloc_r+0xb0>
 8010fc4:	6822      	ldr	r2, [r4, #0]
 8010fc6:	1b52      	subs	r2, r2, r5
 8010fc8:	d41f      	bmi.n	801100a <_malloc_r+0xd6>
 8010fca:	2a0b      	cmp	r2, #11
 8010fcc:	d917      	bls.n	8010ffe <_malloc_r+0xca>
 8010fce:	1961      	adds	r1, r4, r5
 8010fd0:	42a3      	cmp	r3, r4
 8010fd2:	6025      	str	r5, [r4, #0]
 8010fd4:	bf18      	it	ne
 8010fd6:	6059      	strne	r1, [r3, #4]
 8010fd8:	6863      	ldr	r3, [r4, #4]
 8010fda:	bf08      	it	eq
 8010fdc:	f8c8 1000 	streq.w	r1, [r8]
 8010fe0:	5162      	str	r2, [r4, r5]
 8010fe2:	604b      	str	r3, [r1, #4]
 8010fe4:	4638      	mov	r0, r7
 8010fe6:	f104 060b 	add.w	r6, r4, #11
 8010fea:	f000 f829 	bl	8011040 <__malloc_unlock>
 8010fee:	f026 0607 	bic.w	r6, r6, #7
 8010ff2:	1d23      	adds	r3, r4, #4
 8010ff4:	1af2      	subs	r2, r6, r3
 8010ff6:	d0ae      	beq.n	8010f56 <_malloc_r+0x22>
 8010ff8:	1b9b      	subs	r3, r3, r6
 8010ffa:	50a3      	str	r3, [r4, r2]
 8010ffc:	e7ab      	b.n	8010f56 <_malloc_r+0x22>
 8010ffe:	42a3      	cmp	r3, r4
 8011000:	6862      	ldr	r2, [r4, #4]
 8011002:	d1dd      	bne.n	8010fc0 <_malloc_r+0x8c>
 8011004:	f8c8 2000 	str.w	r2, [r8]
 8011008:	e7ec      	b.n	8010fe4 <_malloc_r+0xb0>
 801100a:	4623      	mov	r3, r4
 801100c:	6864      	ldr	r4, [r4, #4]
 801100e:	e7ac      	b.n	8010f6a <_malloc_r+0x36>
 8011010:	4634      	mov	r4, r6
 8011012:	6876      	ldr	r6, [r6, #4]
 8011014:	e7b4      	b.n	8010f80 <_malloc_r+0x4c>
 8011016:	4613      	mov	r3, r2
 8011018:	e7cc      	b.n	8010fb4 <_malloc_r+0x80>
 801101a:	230c      	movs	r3, #12
 801101c:	603b      	str	r3, [r7, #0]
 801101e:	4638      	mov	r0, r7
 8011020:	f000 f80e 	bl	8011040 <__malloc_unlock>
 8011024:	e797      	b.n	8010f56 <_malloc_r+0x22>
 8011026:	6025      	str	r5, [r4, #0]
 8011028:	e7dc      	b.n	8010fe4 <_malloc_r+0xb0>
 801102a:	605b      	str	r3, [r3, #4]
 801102c:	deff      	udf	#255	; 0xff
 801102e:	bf00      	nop
 8011030:	24005554 	.word	0x24005554

08011034 <__malloc_lock>:
 8011034:	4801      	ldr	r0, [pc, #4]	; (801103c <__malloc_lock+0x8>)
 8011036:	f001 b886 	b.w	8012146 <__retarget_lock_acquire_recursive>
 801103a:	bf00      	nop
 801103c:	2400569c 	.word	0x2400569c

08011040 <__malloc_unlock>:
 8011040:	4801      	ldr	r0, [pc, #4]	; (8011048 <__malloc_unlock+0x8>)
 8011042:	f001 b881 	b.w	8012148 <__retarget_lock_release_recursive>
 8011046:	bf00      	nop
 8011048:	2400569c 	.word	0x2400569c

0801104c <__cvt>:
 801104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104e:	ed2d 8b02 	vpush	{d8}
 8011052:	eeb0 8b40 	vmov.f64	d8, d0
 8011056:	b085      	sub	sp, #20
 8011058:	4617      	mov	r7, r2
 801105a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801105c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801105e:	ee18 2a90 	vmov	r2, s17
 8011062:	f025 0520 	bic.w	r5, r5, #32
 8011066:	2a00      	cmp	r2, #0
 8011068:	bfb6      	itet	lt
 801106a:	222d      	movlt	r2, #45	; 0x2d
 801106c:	2200      	movge	r2, #0
 801106e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011072:	2d46      	cmp	r5, #70	; 0x46
 8011074:	460c      	mov	r4, r1
 8011076:	701a      	strb	r2, [r3, #0]
 8011078:	d004      	beq.n	8011084 <__cvt+0x38>
 801107a:	2d45      	cmp	r5, #69	; 0x45
 801107c:	d100      	bne.n	8011080 <__cvt+0x34>
 801107e:	3401      	adds	r4, #1
 8011080:	2102      	movs	r1, #2
 8011082:	e000      	b.n	8011086 <__cvt+0x3a>
 8011084:	2103      	movs	r1, #3
 8011086:	ab03      	add	r3, sp, #12
 8011088:	9301      	str	r3, [sp, #4]
 801108a:	ab02      	add	r3, sp, #8
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	4622      	mov	r2, r4
 8011090:	4633      	mov	r3, r6
 8011092:	eeb0 0b48 	vmov.f64	d0, d8
 8011096:	f001 f8f7 	bl	8012288 <_dtoa_r>
 801109a:	2d47      	cmp	r5, #71	; 0x47
 801109c:	d101      	bne.n	80110a2 <__cvt+0x56>
 801109e:	07fb      	lsls	r3, r7, #31
 80110a0:	d51a      	bpl.n	80110d8 <__cvt+0x8c>
 80110a2:	2d46      	cmp	r5, #70	; 0x46
 80110a4:	eb00 0204 	add.w	r2, r0, r4
 80110a8:	d10c      	bne.n	80110c4 <__cvt+0x78>
 80110aa:	7803      	ldrb	r3, [r0, #0]
 80110ac:	2b30      	cmp	r3, #48	; 0x30
 80110ae:	d107      	bne.n	80110c0 <__cvt+0x74>
 80110b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80110b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b8:	bf1c      	itt	ne
 80110ba:	f1c4 0401 	rsbne	r4, r4, #1
 80110be:	6034      	strne	r4, [r6, #0]
 80110c0:	6833      	ldr	r3, [r6, #0]
 80110c2:	441a      	add	r2, r3
 80110c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	bf08      	it	eq
 80110ce:	9203      	streq	r2, [sp, #12]
 80110d0:	2130      	movs	r1, #48	; 0x30
 80110d2:	9b03      	ldr	r3, [sp, #12]
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d307      	bcc.n	80110e8 <__cvt+0x9c>
 80110d8:	9b03      	ldr	r3, [sp, #12]
 80110da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110dc:	1a1b      	subs	r3, r3, r0
 80110de:	6013      	str	r3, [r2, #0]
 80110e0:	b005      	add	sp, #20
 80110e2:	ecbd 8b02 	vpop	{d8}
 80110e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e8:	1c5c      	adds	r4, r3, #1
 80110ea:	9403      	str	r4, [sp, #12]
 80110ec:	7019      	strb	r1, [r3, #0]
 80110ee:	e7f0      	b.n	80110d2 <__cvt+0x86>

080110f0 <__exponent>:
 80110f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110f2:	4603      	mov	r3, r0
 80110f4:	2900      	cmp	r1, #0
 80110f6:	bfb8      	it	lt
 80110f8:	4249      	neglt	r1, r1
 80110fa:	f803 2b02 	strb.w	r2, [r3], #2
 80110fe:	bfb4      	ite	lt
 8011100:	222d      	movlt	r2, #45	; 0x2d
 8011102:	222b      	movge	r2, #43	; 0x2b
 8011104:	2909      	cmp	r1, #9
 8011106:	7042      	strb	r2, [r0, #1]
 8011108:	dd2a      	ble.n	8011160 <__exponent+0x70>
 801110a:	f10d 0207 	add.w	r2, sp, #7
 801110e:	4617      	mov	r7, r2
 8011110:	260a      	movs	r6, #10
 8011112:	4694      	mov	ip, r2
 8011114:	fb91 f5f6 	sdiv	r5, r1, r6
 8011118:	fb06 1415 	mls	r4, r6, r5, r1
 801111c:	3430      	adds	r4, #48	; 0x30
 801111e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011122:	460c      	mov	r4, r1
 8011124:	2c63      	cmp	r4, #99	; 0x63
 8011126:	f102 32ff 	add.w	r2, r2, #4294967295
 801112a:	4629      	mov	r1, r5
 801112c:	dcf1      	bgt.n	8011112 <__exponent+0x22>
 801112e:	3130      	adds	r1, #48	; 0x30
 8011130:	f1ac 0402 	sub.w	r4, ip, #2
 8011134:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011138:	1c41      	adds	r1, r0, #1
 801113a:	4622      	mov	r2, r4
 801113c:	42ba      	cmp	r2, r7
 801113e:	d30a      	bcc.n	8011156 <__exponent+0x66>
 8011140:	f10d 0209 	add.w	r2, sp, #9
 8011144:	eba2 020c 	sub.w	r2, r2, ip
 8011148:	42bc      	cmp	r4, r7
 801114a:	bf88      	it	hi
 801114c:	2200      	movhi	r2, #0
 801114e:	4413      	add	r3, r2
 8011150:	1a18      	subs	r0, r3, r0
 8011152:	b003      	add	sp, #12
 8011154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011156:	f812 5b01 	ldrb.w	r5, [r2], #1
 801115a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801115e:	e7ed      	b.n	801113c <__exponent+0x4c>
 8011160:	2330      	movs	r3, #48	; 0x30
 8011162:	3130      	adds	r1, #48	; 0x30
 8011164:	7083      	strb	r3, [r0, #2]
 8011166:	70c1      	strb	r1, [r0, #3]
 8011168:	1d03      	adds	r3, r0, #4
 801116a:	e7f1      	b.n	8011150 <__exponent+0x60>
 801116c:	0000      	movs	r0, r0
	...

08011170 <_printf_float>:
 8011170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011174:	b08b      	sub	sp, #44	; 0x2c
 8011176:	460c      	mov	r4, r1
 8011178:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801117c:	4616      	mov	r6, r2
 801117e:	461f      	mov	r7, r3
 8011180:	4605      	mov	r5, r0
 8011182:	f000 ff05 	bl	8011f90 <_localeconv_r>
 8011186:	f8d0 b000 	ldr.w	fp, [r0]
 801118a:	4658      	mov	r0, fp
 801118c:	f7ef f8f8 	bl	8000380 <strlen>
 8011190:	2300      	movs	r3, #0
 8011192:	9308      	str	r3, [sp, #32]
 8011194:	f8d8 3000 	ldr.w	r3, [r8]
 8011198:	f894 9018 	ldrb.w	r9, [r4, #24]
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	3307      	adds	r3, #7
 80111a0:	f023 0307 	bic.w	r3, r3, #7
 80111a4:	f103 0108 	add.w	r1, r3, #8
 80111a8:	f8c8 1000 	str.w	r1, [r8]
 80111ac:	ed93 0b00 	vldr	d0, [r3]
 80111b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8011410 <_printf_float+0x2a0>
 80111b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80111b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80111bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80111c4:	4682      	mov	sl, r0
 80111c6:	dd24      	ble.n	8011212 <_printf_float+0xa2>
 80111c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d0:	d502      	bpl.n	80111d8 <_printf_float+0x68>
 80111d2:	232d      	movs	r3, #45	; 0x2d
 80111d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111d8:	498f      	ldr	r1, [pc, #572]	; (8011418 <_printf_float+0x2a8>)
 80111da:	4b90      	ldr	r3, [pc, #576]	; (801141c <_printf_float+0x2ac>)
 80111dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80111e0:	bf94      	ite	ls
 80111e2:	4688      	movls	r8, r1
 80111e4:	4698      	movhi	r8, r3
 80111e6:	2303      	movs	r3, #3
 80111e8:	6123      	str	r3, [r4, #16]
 80111ea:	f022 0204 	bic.w	r2, r2, #4
 80111ee:	2300      	movs	r3, #0
 80111f0:	6022      	str	r2, [r4, #0]
 80111f2:	9304      	str	r3, [sp, #16]
 80111f4:	9700      	str	r7, [sp, #0]
 80111f6:	4633      	mov	r3, r6
 80111f8:	aa09      	add	r2, sp, #36	; 0x24
 80111fa:	4621      	mov	r1, r4
 80111fc:	4628      	mov	r0, r5
 80111fe:	f000 f9d1 	bl	80115a4 <_printf_common>
 8011202:	3001      	adds	r0, #1
 8011204:	f040 808a 	bne.w	801131c <_printf_float+0x1ac>
 8011208:	f04f 30ff 	mov.w	r0, #4294967295
 801120c:	b00b      	add	sp, #44	; 0x2c
 801120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011212:	eeb4 0b40 	vcmp.f64	d0, d0
 8011216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121a:	d709      	bvc.n	8011230 <_printf_float+0xc0>
 801121c:	ee10 3a90 	vmov	r3, s1
 8011220:	2b00      	cmp	r3, #0
 8011222:	bfbc      	itt	lt
 8011224:	232d      	movlt	r3, #45	; 0x2d
 8011226:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801122a:	497d      	ldr	r1, [pc, #500]	; (8011420 <_printf_float+0x2b0>)
 801122c:	4b7d      	ldr	r3, [pc, #500]	; (8011424 <_printf_float+0x2b4>)
 801122e:	e7d5      	b.n	80111dc <_printf_float+0x6c>
 8011230:	6863      	ldr	r3, [r4, #4]
 8011232:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011236:	9104      	str	r1, [sp, #16]
 8011238:	1c59      	adds	r1, r3, #1
 801123a:	d13c      	bne.n	80112b6 <_printf_float+0x146>
 801123c:	2306      	movs	r3, #6
 801123e:	6063      	str	r3, [r4, #4]
 8011240:	2300      	movs	r3, #0
 8011242:	9303      	str	r3, [sp, #12]
 8011244:	ab08      	add	r3, sp, #32
 8011246:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801124a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801124e:	ab07      	add	r3, sp, #28
 8011250:	6861      	ldr	r1, [r4, #4]
 8011252:	9300      	str	r3, [sp, #0]
 8011254:	6022      	str	r2, [r4, #0]
 8011256:	f10d 031b 	add.w	r3, sp, #27
 801125a:	4628      	mov	r0, r5
 801125c:	f7ff fef6 	bl	801104c <__cvt>
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	9907      	ldr	r1, [sp, #28]
 8011264:	2b47      	cmp	r3, #71	; 0x47
 8011266:	4680      	mov	r8, r0
 8011268:	d108      	bne.n	801127c <_printf_float+0x10c>
 801126a:	1cc8      	adds	r0, r1, #3
 801126c:	db02      	blt.n	8011274 <_printf_float+0x104>
 801126e:	6863      	ldr	r3, [r4, #4]
 8011270:	4299      	cmp	r1, r3
 8011272:	dd41      	ble.n	80112f8 <_printf_float+0x188>
 8011274:	f1a9 0902 	sub.w	r9, r9, #2
 8011278:	fa5f f989 	uxtb.w	r9, r9
 801127c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011280:	d820      	bhi.n	80112c4 <_printf_float+0x154>
 8011282:	3901      	subs	r1, #1
 8011284:	464a      	mov	r2, r9
 8011286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801128a:	9107      	str	r1, [sp, #28]
 801128c:	f7ff ff30 	bl	80110f0 <__exponent>
 8011290:	9a08      	ldr	r2, [sp, #32]
 8011292:	9004      	str	r0, [sp, #16]
 8011294:	1813      	adds	r3, r2, r0
 8011296:	2a01      	cmp	r2, #1
 8011298:	6123      	str	r3, [r4, #16]
 801129a:	dc02      	bgt.n	80112a2 <_printf_float+0x132>
 801129c:	6822      	ldr	r2, [r4, #0]
 801129e:	07d2      	lsls	r2, r2, #31
 80112a0:	d501      	bpl.n	80112a6 <_printf_float+0x136>
 80112a2:	3301      	adds	r3, #1
 80112a4:	6123      	str	r3, [r4, #16]
 80112a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0a2      	beq.n	80111f4 <_printf_float+0x84>
 80112ae:	232d      	movs	r3, #45	; 0x2d
 80112b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112b4:	e79e      	b.n	80111f4 <_printf_float+0x84>
 80112b6:	9904      	ldr	r1, [sp, #16]
 80112b8:	2947      	cmp	r1, #71	; 0x47
 80112ba:	d1c1      	bne.n	8011240 <_printf_float+0xd0>
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1bf      	bne.n	8011240 <_printf_float+0xd0>
 80112c0:	2301      	movs	r3, #1
 80112c2:	e7bc      	b.n	801123e <_printf_float+0xce>
 80112c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80112c8:	d118      	bne.n	80112fc <_printf_float+0x18c>
 80112ca:	2900      	cmp	r1, #0
 80112cc:	6863      	ldr	r3, [r4, #4]
 80112ce:	dd0b      	ble.n	80112e8 <_printf_float+0x178>
 80112d0:	6121      	str	r1, [r4, #16]
 80112d2:	b913      	cbnz	r3, 80112da <_printf_float+0x16a>
 80112d4:	6822      	ldr	r2, [r4, #0]
 80112d6:	07d0      	lsls	r0, r2, #31
 80112d8:	d502      	bpl.n	80112e0 <_printf_float+0x170>
 80112da:	3301      	adds	r3, #1
 80112dc:	440b      	add	r3, r1
 80112de:	6123      	str	r3, [r4, #16]
 80112e0:	2300      	movs	r3, #0
 80112e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80112e4:	9304      	str	r3, [sp, #16]
 80112e6:	e7de      	b.n	80112a6 <_printf_float+0x136>
 80112e8:	b913      	cbnz	r3, 80112f0 <_printf_float+0x180>
 80112ea:	6822      	ldr	r2, [r4, #0]
 80112ec:	07d2      	lsls	r2, r2, #31
 80112ee:	d501      	bpl.n	80112f4 <_printf_float+0x184>
 80112f0:	3302      	adds	r3, #2
 80112f2:	e7f4      	b.n	80112de <_printf_float+0x16e>
 80112f4:	2301      	movs	r3, #1
 80112f6:	e7f2      	b.n	80112de <_printf_float+0x16e>
 80112f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80112fc:	9b08      	ldr	r3, [sp, #32]
 80112fe:	4299      	cmp	r1, r3
 8011300:	db05      	blt.n	801130e <_printf_float+0x19e>
 8011302:	6823      	ldr	r3, [r4, #0]
 8011304:	6121      	str	r1, [r4, #16]
 8011306:	07d8      	lsls	r0, r3, #31
 8011308:	d5ea      	bpl.n	80112e0 <_printf_float+0x170>
 801130a:	1c4b      	adds	r3, r1, #1
 801130c:	e7e7      	b.n	80112de <_printf_float+0x16e>
 801130e:	2900      	cmp	r1, #0
 8011310:	bfd4      	ite	le
 8011312:	f1c1 0202 	rsble	r2, r1, #2
 8011316:	2201      	movgt	r2, #1
 8011318:	4413      	add	r3, r2
 801131a:	e7e0      	b.n	80112de <_printf_float+0x16e>
 801131c:	6823      	ldr	r3, [r4, #0]
 801131e:	055a      	lsls	r2, r3, #21
 8011320:	d407      	bmi.n	8011332 <_printf_float+0x1c2>
 8011322:	6923      	ldr	r3, [r4, #16]
 8011324:	4642      	mov	r2, r8
 8011326:	4631      	mov	r1, r6
 8011328:	4628      	mov	r0, r5
 801132a:	47b8      	blx	r7
 801132c:	3001      	adds	r0, #1
 801132e:	d12a      	bne.n	8011386 <_printf_float+0x216>
 8011330:	e76a      	b.n	8011208 <_printf_float+0x98>
 8011332:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011336:	f240 80e0 	bls.w	80114fa <_printf_float+0x38a>
 801133a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801133e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011346:	d133      	bne.n	80113b0 <_printf_float+0x240>
 8011348:	4a37      	ldr	r2, [pc, #220]	; (8011428 <_printf_float+0x2b8>)
 801134a:	2301      	movs	r3, #1
 801134c:	4631      	mov	r1, r6
 801134e:	4628      	mov	r0, r5
 8011350:	47b8      	blx	r7
 8011352:	3001      	adds	r0, #1
 8011354:	f43f af58 	beq.w	8011208 <_printf_float+0x98>
 8011358:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801135c:	429a      	cmp	r2, r3
 801135e:	db02      	blt.n	8011366 <_printf_float+0x1f6>
 8011360:	6823      	ldr	r3, [r4, #0]
 8011362:	07d8      	lsls	r0, r3, #31
 8011364:	d50f      	bpl.n	8011386 <_printf_float+0x216>
 8011366:	4653      	mov	r3, sl
 8011368:	465a      	mov	r2, fp
 801136a:	4631      	mov	r1, r6
 801136c:	4628      	mov	r0, r5
 801136e:	47b8      	blx	r7
 8011370:	3001      	adds	r0, #1
 8011372:	f43f af49 	beq.w	8011208 <_printf_float+0x98>
 8011376:	f04f 0800 	mov.w	r8, #0
 801137a:	f104 091a 	add.w	r9, r4, #26
 801137e:	9b08      	ldr	r3, [sp, #32]
 8011380:	3b01      	subs	r3, #1
 8011382:	4543      	cmp	r3, r8
 8011384:	dc09      	bgt.n	801139a <_printf_float+0x22a>
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	079b      	lsls	r3, r3, #30
 801138a:	f100 8106 	bmi.w	801159a <_printf_float+0x42a>
 801138e:	68e0      	ldr	r0, [r4, #12]
 8011390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011392:	4298      	cmp	r0, r3
 8011394:	bfb8      	it	lt
 8011396:	4618      	movlt	r0, r3
 8011398:	e738      	b.n	801120c <_printf_float+0x9c>
 801139a:	2301      	movs	r3, #1
 801139c:	464a      	mov	r2, r9
 801139e:	4631      	mov	r1, r6
 80113a0:	4628      	mov	r0, r5
 80113a2:	47b8      	blx	r7
 80113a4:	3001      	adds	r0, #1
 80113a6:	f43f af2f 	beq.w	8011208 <_printf_float+0x98>
 80113aa:	f108 0801 	add.w	r8, r8, #1
 80113ae:	e7e6      	b.n	801137e <_printf_float+0x20e>
 80113b0:	9b07      	ldr	r3, [sp, #28]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	dc3a      	bgt.n	801142c <_printf_float+0x2bc>
 80113b6:	4a1c      	ldr	r2, [pc, #112]	; (8011428 <_printf_float+0x2b8>)
 80113b8:	2301      	movs	r3, #1
 80113ba:	4631      	mov	r1, r6
 80113bc:	4628      	mov	r0, r5
 80113be:	47b8      	blx	r7
 80113c0:	3001      	adds	r0, #1
 80113c2:	f43f af21 	beq.w	8011208 <_printf_float+0x98>
 80113c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	d102      	bne.n	80113d4 <_printf_float+0x264>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	07d9      	lsls	r1, r3, #31
 80113d2:	d5d8      	bpl.n	8011386 <_printf_float+0x216>
 80113d4:	4653      	mov	r3, sl
 80113d6:	465a      	mov	r2, fp
 80113d8:	4631      	mov	r1, r6
 80113da:	4628      	mov	r0, r5
 80113dc:	47b8      	blx	r7
 80113de:	3001      	adds	r0, #1
 80113e0:	f43f af12 	beq.w	8011208 <_printf_float+0x98>
 80113e4:	f04f 0900 	mov.w	r9, #0
 80113e8:	f104 0a1a 	add.w	sl, r4, #26
 80113ec:	9b07      	ldr	r3, [sp, #28]
 80113ee:	425b      	negs	r3, r3
 80113f0:	454b      	cmp	r3, r9
 80113f2:	dc01      	bgt.n	80113f8 <_printf_float+0x288>
 80113f4:	9b08      	ldr	r3, [sp, #32]
 80113f6:	e795      	b.n	8011324 <_printf_float+0x1b4>
 80113f8:	2301      	movs	r3, #1
 80113fa:	4652      	mov	r2, sl
 80113fc:	4631      	mov	r1, r6
 80113fe:	4628      	mov	r0, r5
 8011400:	47b8      	blx	r7
 8011402:	3001      	adds	r0, #1
 8011404:	f43f af00 	beq.w	8011208 <_printf_float+0x98>
 8011408:	f109 0901 	add.w	r9, r9, #1
 801140c:	e7ee      	b.n	80113ec <_printf_float+0x27c>
 801140e:	bf00      	nop
 8011410:	ffffffff 	.word	0xffffffff
 8011414:	7fefffff 	.word	0x7fefffff
 8011418:	080156f0 	.word	0x080156f0
 801141c:	080156f4 	.word	0x080156f4
 8011420:	080156f8 	.word	0x080156f8
 8011424:	080156fc 	.word	0x080156fc
 8011428:	08015700 	.word	0x08015700
 801142c:	9a08      	ldr	r2, [sp, #32]
 801142e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011430:	429a      	cmp	r2, r3
 8011432:	bfa8      	it	ge
 8011434:	461a      	movge	r2, r3
 8011436:	2a00      	cmp	r2, #0
 8011438:	4691      	mov	r9, r2
 801143a:	dc38      	bgt.n	80114ae <_printf_float+0x33e>
 801143c:	2300      	movs	r3, #0
 801143e:	9305      	str	r3, [sp, #20]
 8011440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011444:	f104 021a 	add.w	r2, r4, #26
 8011448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801144a:	9905      	ldr	r1, [sp, #20]
 801144c:	9304      	str	r3, [sp, #16]
 801144e:	eba3 0309 	sub.w	r3, r3, r9
 8011452:	428b      	cmp	r3, r1
 8011454:	dc33      	bgt.n	80114be <_printf_float+0x34e>
 8011456:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801145a:	429a      	cmp	r2, r3
 801145c:	db3c      	blt.n	80114d8 <_printf_float+0x368>
 801145e:	6823      	ldr	r3, [r4, #0]
 8011460:	07da      	lsls	r2, r3, #31
 8011462:	d439      	bmi.n	80114d8 <_printf_float+0x368>
 8011464:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011468:	eba2 0903 	sub.w	r9, r2, r3
 801146c:	9b04      	ldr	r3, [sp, #16]
 801146e:	1ad2      	subs	r2, r2, r3
 8011470:	4591      	cmp	r9, r2
 8011472:	bfa8      	it	ge
 8011474:	4691      	movge	r9, r2
 8011476:	f1b9 0f00 	cmp.w	r9, #0
 801147a:	dc35      	bgt.n	80114e8 <_printf_float+0x378>
 801147c:	f04f 0800 	mov.w	r8, #0
 8011480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011484:	f104 0a1a 	add.w	sl, r4, #26
 8011488:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801148c:	1a9b      	subs	r3, r3, r2
 801148e:	eba3 0309 	sub.w	r3, r3, r9
 8011492:	4543      	cmp	r3, r8
 8011494:	f77f af77 	ble.w	8011386 <_printf_float+0x216>
 8011498:	2301      	movs	r3, #1
 801149a:	4652      	mov	r2, sl
 801149c:	4631      	mov	r1, r6
 801149e:	4628      	mov	r0, r5
 80114a0:	47b8      	blx	r7
 80114a2:	3001      	adds	r0, #1
 80114a4:	f43f aeb0 	beq.w	8011208 <_printf_float+0x98>
 80114a8:	f108 0801 	add.w	r8, r8, #1
 80114ac:	e7ec      	b.n	8011488 <_printf_float+0x318>
 80114ae:	4613      	mov	r3, r2
 80114b0:	4631      	mov	r1, r6
 80114b2:	4642      	mov	r2, r8
 80114b4:	4628      	mov	r0, r5
 80114b6:	47b8      	blx	r7
 80114b8:	3001      	adds	r0, #1
 80114ba:	d1bf      	bne.n	801143c <_printf_float+0x2cc>
 80114bc:	e6a4      	b.n	8011208 <_printf_float+0x98>
 80114be:	2301      	movs	r3, #1
 80114c0:	4631      	mov	r1, r6
 80114c2:	4628      	mov	r0, r5
 80114c4:	9204      	str	r2, [sp, #16]
 80114c6:	47b8      	blx	r7
 80114c8:	3001      	adds	r0, #1
 80114ca:	f43f ae9d 	beq.w	8011208 <_printf_float+0x98>
 80114ce:	9b05      	ldr	r3, [sp, #20]
 80114d0:	9a04      	ldr	r2, [sp, #16]
 80114d2:	3301      	adds	r3, #1
 80114d4:	9305      	str	r3, [sp, #20]
 80114d6:	e7b7      	b.n	8011448 <_printf_float+0x2d8>
 80114d8:	4653      	mov	r3, sl
 80114da:	465a      	mov	r2, fp
 80114dc:	4631      	mov	r1, r6
 80114de:	4628      	mov	r0, r5
 80114e0:	47b8      	blx	r7
 80114e2:	3001      	adds	r0, #1
 80114e4:	d1be      	bne.n	8011464 <_printf_float+0x2f4>
 80114e6:	e68f      	b.n	8011208 <_printf_float+0x98>
 80114e8:	9a04      	ldr	r2, [sp, #16]
 80114ea:	464b      	mov	r3, r9
 80114ec:	4442      	add	r2, r8
 80114ee:	4631      	mov	r1, r6
 80114f0:	4628      	mov	r0, r5
 80114f2:	47b8      	blx	r7
 80114f4:	3001      	adds	r0, #1
 80114f6:	d1c1      	bne.n	801147c <_printf_float+0x30c>
 80114f8:	e686      	b.n	8011208 <_printf_float+0x98>
 80114fa:	9a08      	ldr	r2, [sp, #32]
 80114fc:	2a01      	cmp	r2, #1
 80114fe:	dc01      	bgt.n	8011504 <_printf_float+0x394>
 8011500:	07db      	lsls	r3, r3, #31
 8011502:	d537      	bpl.n	8011574 <_printf_float+0x404>
 8011504:	2301      	movs	r3, #1
 8011506:	4642      	mov	r2, r8
 8011508:	4631      	mov	r1, r6
 801150a:	4628      	mov	r0, r5
 801150c:	47b8      	blx	r7
 801150e:	3001      	adds	r0, #1
 8011510:	f43f ae7a 	beq.w	8011208 <_printf_float+0x98>
 8011514:	4653      	mov	r3, sl
 8011516:	465a      	mov	r2, fp
 8011518:	4631      	mov	r1, r6
 801151a:	4628      	mov	r0, r5
 801151c:	47b8      	blx	r7
 801151e:	3001      	adds	r0, #1
 8011520:	f43f ae72 	beq.w	8011208 <_printf_float+0x98>
 8011524:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011528:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011530:	9b08      	ldr	r3, [sp, #32]
 8011532:	d01a      	beq.n	801156a <_printf_float+0x3fa>
 8011534:	3b01      	subs	r3, #1
 8011536:	f108 0201 	add.w	r2, r8, #1
 801153a:	4631      	mov	r1, r6
 801153c:	4628      	mov	r0, r5
 801153e:	47b8      	blx	r7
 8011540:	3001      	adds	r0, #1
 8011542:	d10e      	bne.n	8011562 <_printf_float+0x3f2>
 8011544:	e660      	b.n	8011208 <_printf_float+0x98>
 8011546:	2301      	movs	r3, #1
 8011548:	464a      	mov	r2, r9
 801154a:	4631      	mov	r1, r6
 801154c:	4628      	mov	r0, r5
 801154e:	47b8      	blx	r7
 8011550:	3001      	adds	r0, #1
 8011552:	f43f ae59 	beq.w	8011208 <_printf_float+0x98>
 8011556:	f108 0801 	add.w	r8, r8, #1
 801155a:	9b08      	ldr	r3, [sp, #32]
 801155c:	3b01      	subs	r3, #1
 801155e:	4543      	cmp	r3, r8
 8011560:	dcf1      	bgt.n	8011546 <_printf_float+0x3d6>
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011568:	e6dd      	b.n	8011326 <_printf_float+0x1b6>
 801156a:	f04f 0800 	mov.w	r8, #0
 801156e:	f104 091a 	add.w	r9, r4, #26
 8011572:	e7f2      	b.n	801155a <_printf_float+0x3ea>
 8011574:	2301      	movs	r3, #1
 8011576:	4642      	mov	r2, r8
 8011578:	e7df      	b.n	801153a <_printf_float+0x3ca>
 801157a:	2301      	movs	r3, #1
 801157c:	464a      	mov	r2, r9
 801157e:	4631      	mov	r1, r6
 8011580:	4628      	mov	r0, r5
 8011582:	47b8      	blx	r7
 8011584:	3001      	adds	r0, #1
 8011586:	f43f ae3f 	beq.w	8011208 <_printf_float+0x98>
 801158a:	f108 0801 	add.w	r8, r8, #1
 801158e:	68e3      	ldr	r3, [r4, #12]
 8011590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011592:	1a5b      	subs	r3, r3, r1
 8011594:	4543      	cmp	r3, r8
 8011596:	dcf0      	bgt.n	801157a <_printf_float+0x40a>
 8011598:	e6f9      	b.n	801138e <_printf_float+0x21e>
 801159a:	f04f 0800 	mov.w	r8, #0
 801159e:	f104 0919 	add.w	r9, r4, #25
 80115a2:	e7f4      	b.n	801158e <_printf_float+0x41e>

080115a4 <_printf_common>:
 80115a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a8:	4616      	mov	r6, r2
 80115aa:	4699      	mov	r9, r3
 80115ac:	688a      	ldr	r2, [r1, #8]
 80115ae:	690b      	ldr	r3, [r1, #16]
 80115b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80115b4:	4293      	cmp	r3, r2
 80115b6:	bfb8      	it	lt
 80115b8:	4613      	movlt	r3, r2
 80115ba:	6033      	str	r3, [r6, #0]
 80115bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80115c0:	4607      	mov	r7, r0
 80115c2:	460c      	mov	r4, r1
 80115c4:	b10a      	cbz	r2, 80115ca <_printf_common+0x26>
 80115c6:	3301      	adds	r3, #1
 80115c8:	6033      	str	r3, [r6, #0]
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	0699      	lsls	r1, r3, #26
 80115ce:	bf42      	ittt	mi
 80115d0:	6833      	ldrmi	r3, [r6, #0]
 80115d2:	3302      	addmi	r3, #2
 80115d4:	6033      	strmi	r3, [r6, #0]
 80115d6:	6825      	ldr	r5, [r4, #0]
 80115d8:	f015 0506 	ands.w	r5, r5, #6
 80115dc:	d106      	bne.n	80115ec <_printf_common+0x48>
 80115de:	f104 0a19 	add.w	sl, r4, #25
 80115e2:	68e3      	ldr	r3, [r4, #12]
 80115e4:	6832      	ldr	r2, [r6, #0]
 80115e6:	1a9b      	subs	r3, r3, r2
 80115e8:	42ab      	cmp	r3, r5
 80115ea:	dc26      	bgt.n	801163a <_printf_common+0x96>
 80115ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80115f0:	1e13      	subs	r3, r2, #0
 80115f2:	6822      	ldr	r2, [r4, #0]
 80115f4:	bf18      	it	ne
 80115f6:	2301      	movne	r3, #1
 80115f8:	0692      	lsls	r2, r2, #26
 80115fa:	d42b      	bmi.n	8011654 <_printf_common+0xb0>
 80115fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011600:	4649      	mov	r1, r9
 8011602:	4638      	mov	r0, r7
 8011604:	47c0      	blx	r8
 8011606:	3001      	adds	r0, #1
 8011608:	d01e      	beq.n	8011648 <_printf_common+0xa4>
 801160a:	6823      	ldr	r3, [r4, #0]
 801160c:	6922      	ldr	r2, [r4, #16]
 801160e:	f003 0306 	and.w	r3, r3, #6
 8011612:	2b04      	cmp	r3, #4
 8011614:	bf02      	ittt	eq
 8011616:	68e5      	ldreq	r5, [r4, #12]
 8011618:	6833      	ldreq	r3, [r6, #0]
 801161a:	1aed      	subeq	r5, r5, r3
 801161c:	68a3      	ldr	r3, [r4, #8]
 801161e:	bf0c      	ite	eq
 8011620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011624:	2500      	movne	r5, #0
 8011626:	4293      	cmp	r3, r2
 8011628:	bfc4      	itt	gt
 801162a:	1a9b      	subgt	r3, r3, r2
 801162c:	18ed      	addgt	r5, r5, r3
 801162e:	2600      	movs	r6, #0
 8011630:	341a      	adds	r4, #26
 8011632:	42b5      	cmp	r5, r6
 8011634:	d11a      	bne.n	801166c <_printf_common+0xc8>
 8011636:	2000      	movs	r0, #0
 8011638:	e008      	b.n	801164c <_printf_common+0xa8>
 801163a:	2301      	movs	r3, #1
 801163c:	4652      	mov	r2, sl
 801163e:	4649      	mov	r1, r9
 8011640:	4638      	mov	r0, r7
 8011642:	47c0      	blx	r8
 8011644:	3001      	adds	r0, #1
 8011646:	d103      	bne.n	8011650 <_printf_common+0xac>
 8011648:	f04f 30ff 	mov.w	r0, #4294967295
 801164c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011650:	3501      	adds	r5, #1
 8011652:	e7c6      	b.n	80115e2 <_printf_common+0x3e>
 8011654:	18e1      	adds	r1, r4, r3
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	2030      	movs	r0, #48	; 0x30
 801165a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801165e:	4422      	add	r2, r4
 8011660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011668:	3302      	adds	r3, #2
 801166a:	e7c7      	b.n	80115fc <_printf_common+0x58>
 801166c:	2301      	movs	r3, #1
 801166e:	4622      	mov	r2, r4
 8011670:	4649      	mov	r1, r9
 8011672:	4638      	mov	r0, r7
 8011674:	47c0      	blx	r8
 8011676:	3001      	adds	r0, #1
 8011678:	d0e6      	beq.n	8011648 <_printf_common+0xa4>
 801167a:	3601      	adds	r6, #1
 801167c:	e7d9      	b.n	8011632 <_printf_common+0x8e>
	...

08011680 <_printf_i>:
 8011680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011684:	7e0f      	ldrb	r7, [r1, #24]
 8011686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011688:	2f78      	cmp	r7, #120	; 0x78
 801168a:	4691      	mov	r9, r2
 801168c:	4680      	mov	r8, r0
 801168e:	460c      	mov	r4, r1
 8011690:	469a      	mov	sl, r3
 8011692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011696:	d807      	bhi.n	80116a8 <_printf_i+0x28>
 8011698:	2f62      	cmp	r7, #98	; 0x62
 801169a:	d80a      	bhi.n	80116b2 <_printf_i+0x32>
 801169c:	2f00      	cmp	r7, #0
 801169e:	f000 80d4 	beq.w	801184a <_printf_i+0x1ca>
 80116a2:	2f58      	cmp	r7, #88	; 0x58
 80116a4:	f000 80c0 	beq.w	8011828 <_printf_i+0x1a8>
 80116a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80116ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80116b0:	e03a      	b.n	8011728 <_printf_i+0xa8>
 80116b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80116b6:	2b15      	cmp	r3, #21
 80116b8:	d8f6      	bhi.n	80116a8 <_printf_i+0x28>
 80116ba:	a101      	add	r1, pc, #4	; (adr r1, 80116c0 <_printf_i+0x40>)
 80116bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116c0:	08011719 	.word	0x08011719
 80116c4:	0801172d 	.word	0x0801172d
 80116c8:	080116a9 	.word	0x080116a9
 80116cc:	080116a9 	.word	0x080116a9
 80116d0:	080116a9 	.word	0x080116a9
 80116d4:	080116a9 	.word	0x080116a9
 80116d8:	0801172d 	.word	0x0801172d
 80116dc:	080116a9 	.word	0x080116a9
 80116e0:	080116a9 	.word	0x080116a9
 80116e4:	080116a9 	.word	0x080116a9
 80116e8:	080116a9 	.word	0x080116a9
 80116ec:	08011831 	.word	0x08011831
 80116f0:	08011759 	.word	0x08011759
 80116f4:	080117eb 	.word	0x080117eb
 80116f8:	080116a9 	.word	0x080116a9
 80116fc:	080116a9 	.word	0x080116a9
 8011700:	08011853 	.word	0x08011853
 8011704:	080116a9 	.word	0x080116a9
 8011708:	08011759 	.word	0x08011759
 801170c:	080116a9 	.word	0x080116a9
 8011710:	080116a9 	.word	0x080116a9
 8011714:	080117f3 	.word	0x080117f3
 8011718:	682b      	ldr	r3, [r5, #0]
 801171a:	1d1a      	adds	r2, r3, #4
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	602a      	str	r2, [r5, #0]
 8011720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011728:	2301      	movs	r3, #1
 801172a:	e09f      	b.n	801186c <_printf_i+0x1ec>
 801172c:	6820      	ldr	r0, [r4, #0]
 801172e:	682b      	ldr	r3, [r5, #0]
 8011730:	0607      	lsls	r7, r0, #24
 8011732:	f103 0104 	add.w	r1, r3, #4
 8011736:	6029      	str	r1, [r5, #0]
 8011738:	d501      	bpl.n	801173e <_printf_i+0xbe>
 801173a:	681e      	ldr	r6, [r3, #0]
 801173c:	e003      	b.n	8011746 <_printf_i+0xc6>
 801173e:	0646      	lsls	r6, r0, #25
 8011740:	d5fb      	bpl.n	801173a <_printf_i+0xba>
 8011742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011746:	2e00      	cmp	r6, #0
 8011748:	da03      	bge.n	8011752 <_printf_i+0xd2>
 801174a:	232d      	movs	r3, #45	; 0x2d
 801174c:	4276      	negs	r6, r6
 801174e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011752:	485a      	ldr	r0, [pc, #360]	; (80118bc <_printf_i+0x23c>)
 8011754:	230a      	movs	r3, #10
 8011756:	e012      	b.n	801177e <_printf_i+0xfe>
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	6820      	ldr	r0, [r4, #0]
 801175c:	1d19      	adds	r1, r3, #4
 801175e:	6029      	str	r1, [r5, #0]
 8011760:	0605      	lsls	r5, r0, #24
 8011762:	d501      	bpl.n	8011768 <_printf_i+0xe8>
 8011764:	681e      	ldr	r6, [r3, #0]
 8011766:	e002      	b.n	801176e <_printf_i+0xee>
 8011768:	0641      	lsls	r1, r0, #25
 801176a:	d5fb      	bpl.n	8011764 <_printf_i+0xe4>
 801176c:	881e      	ldrh	r6, [r3, #0]
 801176e:	4853      	ldr	r0, [pc, #332]	; (80118bc <_printf_i+0x23c>)
 8011770:	2f6f      	cmp	r7, #111	; 0x6f
 8011772:	bf0c      	ite	eq
 8011774:	2308      	moveq	r3, #8
 8011776:	230a      	movne	r3, #10
 8011778:	2100      	movs	r1, #0
 801177a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801177e:	6865      	ldr	r5, [r4, #4]
 8011780:	60a5      	str	r5, [r4, #8]
 8011782:	2d00      	cmp	r5, #0
 8011784:	bfa2      	ittt	ge
 8011786:	6821      	ldrge	r1, [r4, #0]
 8011788:	f021 0104 	bicge.w	r1, r1, #4
 801178c:	6021      	strge	r1, [r4, #0]
 801178e:	b90e      	cbnz	r6, 8011794 <_printf_i+0x114>
 8011790:	2d00      	cmp	r5, #0
 8011792:	d04b      	beq.n	801182c <_printf_i+0x1ac>
 8011794:	4615      	mov	r5, r2
 8011796:	fbb6 f1f3 	udiv	r1, r6, r3
 801179a:	fb03 6711 	mls	r7, r3, r1, r6
 801179e:	5dc7      	ldrb	r7, [r0, r7]
 80117a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80117a4:	4637      	mov	r7, r6
 80117a6:	42bb      	cmp	r3, r7
 80117a8:	460e      	mov	r6, r1
 80117aa:	d9f4      	bls.n	8011796 <_printf_i+0x116>
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d10b      	bne.n	80117c8 <_printf_i+0x148>
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	07de      	lsls	r6, r3, #31
 80117b4:	d508      	bpl.n	80117c8 <_printf_i+0x148>
 80117b6:	6923      	ldr	r3, [r4, #16]
 80117b8:	6861      	ldr	r1, [r4, #4]
 80117ba:	4299      	cmp	r1, r3
 80117bc:	bfde      	ittt	le
 80117be:	2330      	movle	r3, #48	; 0x30
 80117c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80117c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80117c8:	1b52      	subs	r2, r2, r5
 80117ca:	6122      	str	r2, [r4, #16]
 80117cc:	f8cd a000 	str.w	sl, [sp]
 80117d0:	464b      	mov	r3, r9
 80117d2:	aa03      	add	r2, sp, #12
 80117d4:	4621      	mov	r1, r4
 80117d6:	4640      	mov	r0, r8
 80117d8:	f7ff fee4 	bl	80115a4 <_printf_common>
 80117dc:	3001      	adds	r0, #1
 80117de:	d14a      	bne.n	8011876 <_printf_i+0x1f6>
 80117e0:	f04f 30ff 	mov.w	r0, #4294967295
 80117e4:	b004      	add	sp, #16
 80117e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ea:	6823      	ldr	r3, [r4, #0]
 80117ec:	f043 0320 	orr.w	r3, r3, #32
 80117f0:	6023      	str	r3, [r4, #0]
 80117f2:	4833      	ldr	r0, [pc, #204]	; (80118c0 <_printf_i+0x240>)
 80117f4:	2778      	movs	r7, #120	; 0x78
 80117f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	6829      	ldr	r1, [r5, #0]
 80117fe:	061f      	lsls	r7, r3, #24
 8011800:	f851 6b04 	ldr.w	r6, [r1], #4
 8011804:	d402      	bmi.n	801180c <_printf_i+0x18c>
 8011806:	065f      	lsls	r7, r3, #25
 8011808:	bf48      	it	mi
 801180a:	b2b6      	uxthmi	r6, r6
 801180c:	07df      	lsls	r7, r3, #31
 801180e:	bf48      	it	mi
 8011810:	f043 0320 	orrmi.w	r3, r3, #32
 8011814:	6029      	str	r1, [r5, #0]
 8011816:	bf48      	it	mi
 8011818:	6023      	strmi	r3, [r4, #0]
 801181a:	b91e      	cbnz	r6, 8011824 <_printf_i+0x1a4>
 801181c:	6823      	ldr	r3, [r4, #0]
 801181e:	f023 0320 	bic.w	r3, r3, #32
 8011822:	6023      	str	r3, [r4, #0]
 8011824:	2310      	movs	r3, #16
 8011826:	e7a7      	b.n	8011778 <_printf_i+0xf8>
 8011828:	4824      	ldr	r0, [pc, #144]	; (80118bc <_printf_i+0x23c>)
 801182a:	e7e4      	b.n	80117f6 <_printf_i+0x176>
 801182c:	4615      	mov	r5, r2
 801182e:	e7bd      	b.n	80117ac <_printf_i+0x12c>
 8011830:	682b      	ldr	r3, [r5, #0]
 8011832:	6826      	ldr	r6, [r4, #0]
 8011834:	6961      	ldr	r1, [r4, #20]
 8011836:	1d18      	adds	r0, r3, #4
 8011838:	6028      	str	r0, [r5, #0]
 801183a:	0635      	lsls	r5, r6, #24
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	d501      	bpl.n	8011844 <_printf_i+0x1c4>
 8011840:	6019      	str	r1, [r3, #0]
 8011842:	e002      	b.n	801184a <_printf_i+0x1ca>
 8011844:	0670      	lsls	r0, r6, #25
 8011846:	d5fb      	bpl.n	8011840 <_printf_i+0x1c0>
 8011848:	8019      	strh	r1, [r3, #0]
 801184a:	2300      	movs	r3, #0
 801184c:	6123      	str	r3, [r4, #16]
 801184e:	4615      	mov	r5, r2
 8011850:	e7bc      	b.n	80117cc <_printf_i+0x14c>
 8011852:	682b      	ldr	r3, [r5, #0]
 8011854:	1d1a      	adds	r2, r3, #4
 8011856:	602a      	str	r2, [r5, #0]
 8011858:	681d      	ldr	r5, [r3, #0]
 801185a:	6862      	ldr	r2, [r4, #4]
 801185c:	2100      	movs	r1, #0
 801185e:	4628      	mov	r0, r5
 8011860:	f7ee fd3e 	bl	80002e0 <memchr>
 8011864:	b108      	cbz	r0, 801186a <_printf_i+0x1ea>
 8011866:	1b40      	subs	r0, r0, r5
 8011868:	6060      	str	r0, [r4, #4]
 801186a:	6863      	ldr	r3, [r4, #4]
 801186c:	6123      	str	r3, [r4, #16]
 801186e:	2300      	movs	r3, #0
 8011870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011874:	e7aa      	b.n	80117cc <_printf_i+0x14c>
 8011876:	6923      	ldr	r3, [r4, #16]
 8011878:	462a      	mov	r2, r5
 801187a:	4649      	mov	r1, r9
 801187c:	4640      	mov	r0, r8
 801187e:	47d0      	blx	sl
 8011880:	3001      	adds	r0, #1
 8011882:	d0ad      	beq.n	80117e0 <_printf_i+0x160>
 8011884:	6823      	ldr	r3, [r4, #0]
 8011886:	079b      	lsls	r3, r3, #30
 8011888:	d413      	bmi.n	80118b2 <_printf_i+0x232>
 801188a:	68e0      	ldr	r0, [r4, #12]
 801188c:	9b03      	ldr	r3, [sp, #12]
 801188e:	4298      	cmp	r0, r3
 8011890:	bfb8      	it	lt
 8011892:	4618      	movlt	r0, r3
 8011894:	e7a6      	b.n	80117e4 <_printf_i+0x164>
 8011896:	2301      	movs	r3, #1
 8011898:	4632      	mov	r2, r6
 801189a:	4649      	mov	r1, r9
 801189c:	4640      	mov	r0, r8
 801189e:	47d0      	blx	sl
 80118a0:	3001      	adds	r0, #1
 80118a2:	d09d      	beq.n	80117e0 <_printf_i+0x160>
 80118a4:	3501      	adds	r5, #1
 80118a6:	68e3      	ldr	r3, [r4, #12]
 80118a8:	9903      	ldr	r1, [sp, #12]
 80118aa:	1a5b      	subs	r3, r3, r1
 80118ac:	42ab      	cmp	r3, r5
 80118ae:	dcf2      	bgt.n	8011896 <_printf_i+0x216>
 80118b0:	e7eb      	b.n	801188a <_printf_i+0x20a>
 80118b2:	2500      	movs	r5, #0
 80118b4:	f104 0619 	add.w	r6, r4, #25
 80118b8:	e7f5      	b.n	80118a6 <_printf_i+0x226>
 80118ba:	bf00      	nop
 80118bc:	08015702 	.word	0x08015702
 80118c0:	08015713 	.word	0x08015713

080118c4 <_scanf_float>:
 80118c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c8:	b087      	sub	sp, #28
 80118ca:	4617      	mov	r7, r2
 80118cc:	9303      	str	r3, [sp, #12]
 80118ce:	688b      	ldr	r3, [r1, #8]
 80118d0:	1e5a      	subs	r2, r3, #1
 80118d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80118d6:	bf83      	ittte	hi
 80118d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80118dc:	195b      	addhi	r3, r3, r5
 80118de:	9302      	strhi	r3, [sp, #8]
 80118e0:	2300      	movls	r3, #0
 80118e2:	bf86      	itte	hi
 80118e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80118e8:	608b      	strhi	r3, [r1, #8]
 80118ea:	9302      	strls	r3, [sp, #8]
 80118ec:	680b      	ldr	r3, [r1, #0]
 80118ee:	468b      	mov	fp, r1
 80118f0:	2500      	movs	r5, #0
 80118f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80118f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80118fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80118fe:	4680      	mov	r8, r0
 8011900:	460c      	mov	r4, r1
 8011902:	465e      	mov	r6, fp
 8011904:	46aa      	mov	sl, r5
 8011906:	46a9      	mov	r9, r5
 8011908:	9501      	str	r5, [sp, #4]
 801190a:	68a2      	ldr	r2, [r4, #8]
 801190c:	b152      	cbz	r2, 8011924 <_scanf_float+0x60>
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	2b4e      	cmp	r3, #78	; 0x4e
 8011914:	d864      	bhi.n	80119e0 <_scanf_float+0x11c>
 8011916:	2b40      	cmp	r3, #64	; 0x40
 8011918:	d83c      	bhi.n	8011994 <_scanf_float+0xd0>
 801191a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801191e:	b2c8      	uxtb	r0, r1
 8011920:	280e      	cmp	r0, #14
 8011922:	d93a      	bls.n	801199a <_scanf_float+0xd6>
 8011924:	f1b9 0f00 	cmp.w	r9, #0
 8011928:	d003      	beq.n	8011932 <_scanf_float+0x6e>
 801192a:	6823      	ldr	r3, [r4, #0]
 801192c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011930:	6023      	str	r3, [r4, #0]
 8011932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011936:	f1ba 0f01 	cmp.w	sl, #1
 801193a:	f200 8113 	bhi.w	8011b64 <_scanf_float+0x2a0>
 801193e:	455e      	cmp	r6, fp
 8011940:	f200 8105 	bhi.w	8011b4e <_scanf_float+0x28a>
 8011944:	2501      	movs	r5, #1
 8011946:	4628      	mov	r0, r5
 8011948:	b007      	add	sp, #28
 801194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011952:	2a0d      	cmp	r2, #13
 8011954:	d8e6      	bhi.n	8011924 <_scanf_float+0x60>
 8011956:	a101      	add	r1, pc, #4	; (adr r1, 801195c <_scanf_float+0x98>)
 8011958:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801195c:	08011a9b 	.word	0x08011a9b
 8011960:	08011925 	.word	0x08011925
 8011964:	08011925 	.word	0x08011925
 8011968:	08011925 	.word	0x08011925
 801196c:	08011afb 	.word	0x08011afb
 8011970:	08011ad3 	.word	0x08011ad3
 8011974:	08011925 	.word	0x08011925
 8011978:	08011925 	.word	0x08011925
 801197c:	08011aa9 	.word	0x08011aa9
 8011980:	08011925 	.word	0x08011925
 8011984:	08011925 	.word	0x08011925
 8011988:	08011925 	.word	0x08011925
 801198c:	08011925 	.word	0x08011925
 8011990:	08011a61 	.word	0x08011a61
 8011994:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011998:	e7db      	b.n	8011952 <_scanf_float+0x8e>
 801199a:	290e      	cmp	r1, #14
 801199c:	d8c2      	bhi.n	8011924 <_scanf_float+0x60>
 801199e:	a001      	add	r0, pc, #4	; (adr r0, 80119a4 <_scanf_float+0xe0>)
 80119a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80119a4:	08011a53 	.word	0x08011a53
 80119a8:	08011925 	.word	0x08011925
 80119ac:	08011a53 	.word	0x08011a53
 80119b0:	08011ae7 	.word	0x08011ae7
 80119b4:	08011925 	.word	0x08011925
 80119b8:	08011a01 	.word	0x08011a01
 80119bc:	08011a3d 	.word	0x08011a3d
 80119c0:	08011a3d 	.word	0x08011a3d
 80119c4:	08011a3d 	.word	0x08011a3d
 80119c8:	08011a3d 	.word	0x08011a3d
 80119cc:	08011a3d 	.word	0x08011a3d
 80119d0:	08011a3d 	.word	0x08011a3d
 80119d4:	08011a3d 	.word	0x08011a3d
 80119d8:	08011a3d 	.word	0x08011a3d
 80119dc:	08011a3d 	.word	0x08011a3d
 80119e0:	2b6e      	cmp	r3, #110	; 0x6e
 80119e2:	d809      	bhi.n	80119f8 <_scanf_float+0x134>
 80119e4:	2b60      	cmp	r3, #96	; 0x60
 80119e6:	d8b2      	bhi.n	801194e <_scanf_float+0x8a>
 80119e8:	2b54      	cmp	r3, #84	; 0x54
 80119ea:	d077      	beq.n	8011adc <_scanf_float+0x218>
 80119ec:	2b59      	cmp	r3, #89	; 0x59
 80119ee:	d199      	bne.n	8011924 <_scanf_float+0x60>
 80119f0:	2d07      	cmp	r5, #7
 80119f2:	d197      	bne.n	8011924 <_scanf_float+0x60>
 80119f4:	2508      	movs	r5, #8
 80119f6:	e029      	b.n	8011a4c <_scanf_float+0x188>
 80119f8:	2b74      	cmp	r3, #116	; 0x74
 80119fa:	d06f      	beq.n	8011adc <_scanf_float+0x218>
 80119fc:	2b79      	cmp	r3, #121	; 0x79
 80119fe:	e7f6      	b.n	80119ee <_scanf_float+0x12a>
 8011a00:	6821      	ldr	r1, [r4, #0]
 8011a02:	05c8      	lsls	r0, r1, #23
 8011a04:	d51a      	bpl.n	8011a3c <_scanf_float+0x178>
 8011a06:	9b02      	ldr	r3, [sp, #8]
 8011a08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011a0c:	6021      	str	r1, [r4, #0]
 8011a0e:	f109 0901 	add.w	r9, r9, #1
 8011a12:	b11b      	cbz	r3, 8011a1c <_scanf_float+0x158>
 8011a14:	3b01      	subs	r3, #1
 8011a16:	3201      	adds	r2, #1
 8011a18:	9302      	str	r3, [sp, #8]
 8011a1a:	60a2      	str	r2, [r4, #8]
 8011a1c:	68a3      	ldr	r3, [r4, #8]
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	60a3      	str	r3, [r4, #8]
 8011a22:	6923      	ldr	r3, [r4, #16]
 8011a24:	3301      	adds	r3, #1
 8011a26:	6123      	str	r3, [r4, #16]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	607b      	str	r3, [r7, #4]
 8011a30:	f340 8084 	ble.w	8011b3c <_scanf_float+0x278>
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	3301      	adds	r3, #1
 8011a38:	603b      	str	r3, [r7, #0]
 8011a3a:	e766      	b.n	801190a <_scanf_float+0x46>
 8011a3c:	eb1a 0f05 	cmn.w	sl, r5
 8011a40:	f47f af70 	bne.w	8011924 <_scanf_float+0x60>
 8011a44:	6822      	ldr	r2, [r4, #0]
 8011a46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011a4a:	6022      	str	r2, [r4, #0]
 8011a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8011a50:	e7e4      	b.n	8011a1c <_scanf_float+0x158>
 8011a52:	6822      	ldr	r2, [r4, #0]
 8011a54:	0610      	lsls	r0, r2, #24
 8011a56:	f57f af65 	bpl.w	8011924 <_scanf_float+0x60>
 8011a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011a5e:	e7f4      	b.n	8011a4a <_scanf_float+0x186>
 8011a60:	f1ba 0f00 	cmp.w	sl, #0
 8011a64:	d10e      	bne.n	8011a84 <_scanf_float+0x1c0>
 8011a66:	f1b9 0f00 	cmp.w	r9, #0
 8011a6a:	d10e      	bne.n	8011a8a <_scanf_float+0x1c6>
 8011a6c:	6822      	ldr	r2, [r4, #0]
 8011a6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011a72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011a76:	d108      	bne.n	8011a8a <_scanf_float+0x1c6>
 8011a78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011a7c:	6022      	str	r2, [r4, #0]
 8011a7e:	f04f 0a01 	mov.w	sl, #1
 8011a82:	e7e3      	b.n	8011a4c <_scanf_float+0x188>
 8011a84:	f1ba 0f02 	cmp.w	sl, #2
 8011a88:	d055      	beq.n	8011b36 <_scanf_float+0x272>
 8011a8a:	2d01      	cmp	r5, #1
 8011a8c:	d002      	beq.n	8011a94 <_scanf_float+0x1d0>
 8011a8e:	2d04      	cmp	r5, #4
 8011a90:	f47f af48 	bne.w	8011924 <_scanf_float+0x60>
 8011a94:	3501      	adds	r5, #1
 8011a96:	b2ed      	uxtb	r5, r5
 8011a98:	e7d8      	b.n	8011a4c <_scanf_float+0x188>
 8011a9a:	f1ba 0f01 	cmp.w	sl, #1
 8011a9e:	f47f af41 	bne.w	8011924 <_scanf_float+0x60>
 8011aa2:	f04f 0a02 	mov.w	sl, #2
 8011aa6:	e7d1      	b.n	8011a4c <_scanf_float+0x188>
 8011aa8:	b97d      	cbnz	r5, 8011aca <_scanf_float+0x206>
 8011aaa:	f1b9 0f00 	cmp.w	r9, #0
 8011aae:	f47f af3c 	bne.w	801192a <_scanf_float+0x66>
 8011ab2:	6822      	ldr	r2, [r4, #0]
 8011ab4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011ab8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011abc:	f47f af39 	bne.w	8011932 <_scanf_float+0x6e>
 8011ac0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011ac4:	6022      	str	r2, [r4, #0]
 8011ac6:	2501      	movs	r5, #1
 8011ac8:	e7c0      	b.n	8011a4c <_scanf_float+0x188>
 8011aca:	2d03      	cmp	r5, #3
 8011acc:	d0e2      	beq.n	8011a94 <_scanf_float+0x1d0>
 8011ace:	2d05      	cmp	r5, #5
 8011ad0:	e7de      	b.n	8011a90 <_scanf_float+0x1cc>
 8011ad2:	2d02      	cmp	r5, #2
 8011ad4:	f47f af26 	bne.w	8011924 <_scanf_float+0x60>
 8011ad8:	2503      	movs	r5, #3
 8011ada:	e7b7      	b.n	8011a4c <_scanf_float+0x188>
 8011adc:	2d06      	cmp	r5, #6
 8011ade:	f47f af21 	bne.w	8011924 <_scanf_float+0x60>
 8011ae2:	2507      	movs	r5, #7
 8011ae4:	e7b2      	b.n	8011a4c <_scanf_float+0x188>
 8011ae6:	6822      	ldr	r2, [r4, #0]
 8011ae8:	0591      	lsls	r1, r2, #22
 8011aea:	f57f af1b 	bpl.w	8011924 <_scanf_float+0x60>
 8011aee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011af2:	6022      	str	r2, [r4, #0]
 8011af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011af8:	e7a8      	b.n	8011a4c <_scanf_float+0x188>
 8011afa:	6822      	ldr	r2, [r4, #0]
 8011afc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011b00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011b04:	d006      	beq.n	8011b14 <_scanf_float+0x250>
 8011b06:	0550      	lsls	r0, r2, #21
 8011b08:	f57f af0c 	bpl.w	8011924 <_scanf_float+0x60>
 8011b0c:	f1b9 0f00 	cmp.w	r9, #0
 8011b10:	f43f af0f 	beq.w	8011932 <_scanf_float+0x6e>
 8011b14:	0591      	lsls	r1, r2, #22
 8011b16:	bf58      	it	pl
 8011b18:	9901      	ldrpl	r1, [sp, #4]
 8011b1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011b1e:	bf58      	it	pl
 8011b20:	eba9 0101 	subpl.w	r1, r9, r1
 8011b24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011b28:	bf58      	it	pl
 8011b2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011b2e:	6022      	str	r2, [r4, #0]
 8011b30:	f04f 0900 	mov.w	r9, #0
 8011b34:	e78a      	b.n	8011a4c <_scanf_float+0x188>
 8011b36:	f04f 0a03 	mov.w	sl, #3
 8011b3a:	e787      	b.n	8011a4c <_scanf_float+0x188>
 8011b3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011b40:	4639      	mov	r1, r7
 8011b42:	4640      	mov	r0, r8
 8011b44:	4798      	blx	r3
 8011b46:	2800      	cmp	r0, #0
 8011b48:	f43f aedf 	beq.w	801190a <_scanf_float+0x46>
 8011b4c:	e6ea      	b.n	8011924 <_scanf_float+0x60>
 8011b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b56:	463a      	mov	r2, r7
 8011b58:	4640      	mov	r0, r8
 8011b5a:	4798      	blx	r3
 8011b5c:	6923      	ldr	r3, [r4, #16]
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	6123      	str	r3, [r4, #16]
 8011b62:	e6ec      	b.n	801193e <_scanf_float+0x7a>
 8011b64:	1e6b      	subs	r3, r5, #1
 8011b66:	2b06      	cmp	r3, #6
 8011b68:	d825      	bhi.n	8011bb6 <_scanf_float+0x2f2>
 8011b6a:	2d02      	cmp	r5, #2
 8011b6c:	d836      	bhi.n	8011bdc <_scanf_float+0x318>
 8011b6e:	455e      	cmp	r6, fp
 8011b70:	f67f aee8 	bls.w	8011944 <_scanf_float+0x80>
 8011b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b7c:	463a      	mov	r2, r7
 8011b7e:	4640      	mov	r0, r8
 8011b80:	4798      	blx	r3
 8011b82:	6923      	ldr	r3, [r4, #16]
 8011b84:	3b01      	subs	r3, #1
 8011b86:	6123      	str	r3, [r4, #16]
 8011b88:	e7f1      	b.n	8011b6e <_scanf_float+0x2aa>
 8011b8a:	9802      	ldr	r0, [sp, #8]
 8011b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011b94:	9002      	str	r0, [sp, #8]
 8011b96:	463a      	mov	r2, r7
 8011b98:	4640      	mov	r0, r8
 8011b9a:	4798      	blx	r3
 8011b9c:	6923      	ldr	r3, [r4, #16]
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	6123      	str	r3, [r4, #16]
 8011ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ba6:	fa5f fa8a 	uxtb.w	sl, sl
 8011baa:	f1ba 0f02 	cmp.w	sl, #2
 8011bae:	d1ec      	bne.n	8011b8a <_scanf_float+0x2c6>
 8011bb0:	3d03      	subs	r5, #3
 8011bb2:	b2ed      	uxtb	r5, r5
 8011bb4:	1b76      	subs	r6, r6, r5
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	05da      	lsls	r2, r3, #23
 8011bba:	d52f      	bpl.n	8011c1c <_scanf_float+0x358>
 8011bbc:	055b      	lsls	r3, r3, #21
 8011bbe:	d510      	bpl.n	8011be2 <_scanf_float+0x31e>
 8011bc0:	455e      	cmp	r6, fp
 8011bc2:	f67f aebf 	bls.w	8011944 <_scanf_float+0x80>
 8011bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011bce:	463a      	mov	r2, r7
 8011bd0:	4640      	mov	r0, r8
 8011bd2:	4798      	blx	r3
 8011bd4:	6923      	ldr	r3, [r4, #16]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	6123      	str	r3, [r4, #16]
 8011bda:	e7f1      	b.n	8011bc0 <_scanf_float+0x2fc>
 8011bdc:	46aa      	mov	sl, r5
 8011bde:	9602      	str	r6, [sp, #8]
 8011be0:	e7df      	b.n	8011ba2 <_scanf_float+0x2de>
 8011be2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011be6:	6923      	ldr	r3, [r4, #16]
 8011be8:	2965      	cmp	r1, #101	; 0x65
 8011bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8011bee:	f106 35ff 	add.w	r5, r6, #4294967295
 8011bf2:	6123      	str	r3, [r4, #16]
 8011bf4:	d00c      	beq.n	8011c10 <_scanf_float+0x34c>
 8011bf6:	2945      	cmp	r1, #69	; 0x45
 8011bf8:	d00a      	beq.n	8011c10 <_scanf_float+0x34c>
 8011bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011bfe:	463a      	mov	r2, r7
 8011c00:	4640      	mov	r0, r8
 8011c02:	4798      	blx	r3
 8011c04:	6923      	ldr	r3, [r4, #16]
 8011c06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	1eb5      	subs	r5, r6, #2
 8011c0e:	6123      	str	r3, [r4, #16]
 8011c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011c14:	463a      	mov	r2, r7
 8011c16:	4640      	mov	r0, r8
 8011c18:	4798      	blx	r3
 8011c1a:	462e      	mov	r6, r5
 8011c1c:	6825      	ldr	r5, [r4, #0]
 8011c1e:	f015 0510 	ands.w	r5, r5, #16
 8011c22:	d14d      	bne.n	8011cc0 <_scanf_float+0x3fc>
 8011c24:	7035      	strb	r5, [r6, #0]
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c30:	d11a      	bne.n	8011c68 <_scanf_float+0x3a4>
 8011c32:	9b01      	ldr	r3, [sp, #4]
 8011c34:	454b      	cmp	r3, r9
 8011c36:	eba3 0209 	sub.w	r2, r3, r9
 8011c3a:	d122      	bne.n	8011c82 <_scanf_float+0x3be>
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	4659      	mov	r1, fp
 8011c40:	4640      	mov	r0, r8
 8011c42:	f002 fb4f 	bl	80142e4 <_strtod_r>
 8011c46:	9b03      	ldr	r3, [sp, #12]
 8011c48:	6821      	ldr	r1, [r4, #0]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f011 0f02 	tst.w	r1, #2
 8011c50:	f103 0204 	add.w	r2, r3, #4
 8011c54:	d020      	beq.n	8011c98 <_scanf_float+0x3d4>
 8011c56:	9903      	ldr	r1, [sp, #12]
 8011c58:	600a      	str	r2, [r1, #0]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	ed83 0b00 	vstr	d0, [r3]
 8011c60:	68e3      	ldr	r3, [r4, #12]
 8011c62:	3301      	adds	r3, #1
 8011c64:	60e3      	str	r3, [r4, #12]
 8011c66:	e66e      	b.n	8011946 <_scanf_float+0x82>
 8011c68:	9b04      	ldr	r3, [sp, #16]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d0e6      	beq.n	8011c3c <_scanf_float+0x378>
 8011c6e:	9905      	ldr	r1, [sp, #20]
 8011c70:	230a      	movs	r3, #10
 8011c72:	462a      	mov	r2, r5
 8011c74:	3101      	adds	r1, #1
 8011c76:	4640      	mov	r0, r8
 8011c78:	f002 fbbc 	bl	80143f4 <_strtol_r>
 8011c7c:	9b04      	ldr	r3, [sp, #16]
 8011c7e:	9e05      	ldr	r6, [sp, #20]
 8011c80:	1ac2      	subs	r2, r0, r3
 8011c82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011c86:	429e      	cmp	r6, r3
 8011c88:	bf28      	it	cs
 8011c8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011c8e:	490d      	ldr	r1, [pc, #52]	; (8011cc4 <_scanf_float+0x400>)
 8011c90:	4630      	mov	r0, r6
 8011c92:	f000 f911 	bl	8011eb8 <siprintf>
 8011c96:	e7d1      	b.n	8011c3c <_scanf_float+0x378>
 8011c98:	f011 0f04 	tst.w	r1, #4
 8011c9c:	9903      	ldr	r1, [sp, #12]
 8011c9e:	600a      	str	r2, [r1, #0]
 8011ca0:	d1db      	bne.n	8011c5a <_scanf_float+0x396>
 8011ca2:	eeb4 0b40 	vcmp.f64	d0, d0
 8011ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011caa:	681e      	ldr	r6, [r3, #0]
 8011cac:	d705      	bvc.n	8011cba <_scanf_float+0x3f6>
 8011cae:	4806      	ldr	r0, [pc, #24]	; (8011cc8 <_scanf_float+0x404>)
 8011cb0:	f000 fa5a 	bl	8012168 <nanf>
 8011cb4:	ed86 0a00 	vstr	s0, [r6]
 8011cb8:	e7d2      	b.n	8011c60 <_scanf_float+0x39c>
 8011cba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011cbe:	e7f9      	b.n	8011cb4 <_scanf_float+0x3f0>
 8011cc0:	2500      	movs	r5, #0
 8011cc2:	e640      	b.n	8011946 <_scanf_float+0x82>
 8011cc4:	08015724 	.word	0x08015724
 8011cc8:	08015ab5 	.word	0x08015ab5

08011ccc <std>:
 8011ccc:	2300      	movs	r3, #0
 8011cce:	b510      	push	{r4, lr}
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8011cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cda:	6083      	str	r3, [r0, #8]
 8011cdc:	8181      	strh	r1, [r0, #12]
 8011cde:	6643      	str	r3, [r0, #100]	; 0x64
 8011ce0:	81c2      	strh	r2, [r0, #14]
 8011ce2:	6183      	str	r3, [r0, #24]
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	2208      	movs	r2, #8
 8011ce8:	305c      	adds	r0, #92	; 0x5c
 8011cea:	f000 f948 	bl	8011f7e <memset>
 8011cee:	4b0d      	ldr	r3, [pc, #52]	; (8011d24 <std+0x58>)
 8011cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8011cf2:	4b0d      	ldr	r3, [pc, #52]	; (8011d28 <std+0x5c>)
 8011cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011cf6:	4b0d      	ldr	r3, [pc, #52]	; (8011d2c <std+0x60>)
 8011cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cfa:	4b0d      	ldr	r3, [pc, #52]	; (8011d30 <std+0x64>)
 8011cfc:	6323      	str	r3, [r4, #48]	; 0x30
 8011cfe:	4b0d      	ldr	r3, [pc, #52]	; (8011d34 <std+0x68>)
 8011d00:	6224      	str	r4, [r4, #32]
 8011d02:	429c      	cmp	r4, r3
 8011d04:	d006      	beq.n	8011d14 <std+0x48>
 8011d06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011d0a:	4294      	cmp	r4, r2
 8011d0c:	d002      	beq.n	8011d14 <std+0x48>
 8011d0e:	33d0      	adds	r3, #208	; 0xd0
 8011d10:	429c      	cmp	r4, r3
 8011d12:	d105      	bne.n	8011d20 <std+0x54>
 8011d14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d1c:	f000 ba12 	b.w	8012144 <__retarget_lock_init_recursive>
 8011d20:	bd10      	pop	{r4, pc}
 8011d22:	bf00      	nop
 8011d24:	08011ef9 	.word	0x08011ef9
 8011d28:	08011f1b 	.word	0x08011f1b
 8011d2c:	08011f53 	.word	0x08011f53
 8011d30:	08011f77 	.word	0x08011f77
 8011d34:	2400555c 	.word	0x2400555c

08011d38 <stdio_exit_handler>:
 8011d38:	4a02      	ldr	r2, [pc, #8]	; (8011d44 <stdio_exit_handler+0xc>)
 8011d3a:	4903      	ldr	r1, [pc, #12]	; (8011d48 <stdio_exit_handler+0x10>)
 8011d3c:	4803      	ldr	r0, [pc, #12]	; (8011d4c <stdio_exit_handler+0x14>)
 8011d3e:	f000 b869 	b.w	8011e14 <_fwalk_sglue>
 8011d42:	bf00      	nop
 8011d44:	24000014 	.word	0x24000014
 8011d48:	080147b5 	.word	0x080147b5
 8011d4c:	24000020 	.word	0x24000020

08011d50 <cleanup_stdio>:
 8011d50:	6841      	ldr	r1, [r0, #4]
 8011d52:	4b0c      	ldr	r3, [pc, #48]	; (8011d84 <cleanup_stdio+0x34>)
 8011d54:	4299      	cmp	r1, r3
 8011d56:	b510      	push	{r4, lr}
 8011d58:	4604      	mov	r4, r0
 8011d5a:	d001      	beq.n	8011d60 <cleanup_stdio+0x10>
 8011d5c:	f002 fd2a 	bl	80147b4 <_fflush_r>
 8011d60:	68a1      	ldr	r1, [r4, #8]
 8011d62:	4b09      	ldr	r3, [pc, #36]	; (8011d88 <cleanup_stdio+0x38>)
 8011d64:	4299      	cmp	r1, r3
 8011d66:	d002      	beq.n	8011d6e <cleanup_stdio+0x1e>
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f002 fd23 	bl	80147b4 <_fflush_r>
 8011d6e:	68e1      	ldr	r1, [r4, #12]
 8011d70:	4b06      	ldr	r3, [pc, #24]	; (8011d8c <cleanup_stdio+0x3c>)
 8011d72:	4299      	cmp	r1, r3
 8011d74:	d004      	beq.n	8011d80 <cleanup_stdio+0x30>
 8011d76:	4620      	mov	r0, r4
 8011d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d7c:	f002 bd1a 	b.w	80147b4 <_fflush_r>
 8011d80:	bd10      	pop	{r4, pc}
 8011d82:	bf00      	nop
 8011d84:	2400555c 	.word	0x2400555c
 8011d88:	240055c4 	.word	0x240055c4
 8011d8c:	2400562c 	.word	0x2400562c

08011d90 <global_stdio_init.part.0>:
 8011d90:	b510      	push	{r4, lr}
 8011d92:	4b0b      	ldr	r3, [pc, #44]	; (8011dc0 <global_stdio_init.part.0+0x30>)
 8011d94:	4c0b      	ldr	r4, [pc, #44]	; (8011dc4 <global_stdio_init.part.0+0x34>)
 8011d96:	4a0c      	ldr	r2, [pc, #48]	; (8011dc8 <global_stdio_init.part.0+0x38>)
 8011d98:	601a      	str	r2, [r3, #0]
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	2104      	movs	r1, #4
 8011da0:	f7ff ff94 	bl	8011ccc <std>
 8011da4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011da8:	2201      	movs	r2, #1
 8011daa:	2109      	movs	r1, #9
 8011dac:	f7ff ff8e 	bl	8011ccc <std>
 8011db0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011db4:	2202      	movs	r2, #2
 8011db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dba:	2112      	movs	r1, #18
 8011dbc:	f7ff bf86 	b.w	8011ccc <std>
 8011dc0:	24005694 	.word	0x24005694
 8011dc4:	2400555c 	.word	0x2400555c
 8011dc8:	08011d39 	.word	0x08011d39

08011dcc <__sfp_lock_acquire>:
 8011dcc:	4801      	ldr	r0, [pc, #4]	; (8011dd4 <__sfp_lock_acquire+0x8>)
 8011dce:	f000 b9ba 	b.w	8012146 <__retarget_lock_acquire_recursive>
 8011dd2:	bf00      	nop
 8011dd4:	2400569d 	.word	0x2400569d

08011dd8 <__sfp_lock_release>:
 8011dd8:	4801      	ldr	r0, [pc, #4]	; (8011de0 <__sfp_lock_release+0x8>)
 8011dda:	f000 b9b5 	b.w	8012148 <__retarget_lock_release_recursive>
 8011dde:	bf00      	nop
 8011de0:	2400569d 	.word	0x2400569d

08011de4 <__sinit>:
 8011de4:	b510      	push	{r4, lr}
 8011de6:	4604      	mov	r4, r0
 8011de8:	f7ff fff0 	bl	8011dcc <__sfp_lock_acquire>
 8011dec:	6a23      	ldr	r3, [r4, #32]
 8011dee:	b11b      	cbz	r3, 8011df8 <__sinit+0x14>
 8011df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011df4:	f7ff bff0 	b.w	8011dd8 <__sfp_lock_release>
 8011df8:	4b04      	ldr	r3, [pc, #16]	; (8011e0c <__sinit+0x28>)
 8011dfa:	6223      	str	r3, [r4, #32]
 8011dfc:	4b04      	ldr	r3, [pc, #16]	; (8011e10 <__sinit+0x2c>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d1f5      	bne.n	8011df0 <__sinit+0xc>
 8011e04:	f7ff ffc4 	bl	8011d90 <global_stdio_init.part.0>
 8011e08:	e7f2      	b.n	8011df0 <__sinit+0xc>
 8011e0a:	bf00      	nop
 8011e0c:	08011d51 	.word	0x08011d51
 8011e10:	24005694 	.word	0x24005694

08011e14 <_fwalk_sglue>:
 8011e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e18:	4607      	mov	r7, r0
 8011e1a:	4688      	mov	r8, r1
 8011e1c:	4614      	mov	r4, r2
 8011e1e:	2600      	movs	r6, #0
 8011e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e24:	f1b9 0901 	subs.w	r9, r9, #1
 8011e28:	d505      	bpl.n	8011e36 <_fwalk_sglue+0x22>
 8011e2a:	6824      	ldr	r4, [r4, #0]
 8011e2c:	2c00      	cmp	r4, #0
 8011e2e:	d1f7      	bne.n	8011e20 <_fwalk_sglue+0xc>
 8011e30:	4630      	mov	r0, r6
 8011e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e36:	89ab      	ldrh	r3, [r5, #12]
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d907      	bls.n	8011e4c <_fwalk_sglue+0x38>
 8011e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e40:	3301      	adds	r3, #1
 8011e42:	d003      	beq.n	8011e4c <_fwalk_sglue+0x38>
 8011e44:	4629      	mov	r1, r5
 8011e46:	4638      	mov	r0, r7
 8011e48:	47c0      	blx	r8
 8011e4a:	4306      	orrs	r6, r0
 8011e4c:	3568      	adds	r5, #104	; 0x68
 8011e4e:	e7e9      	b.n	8011e24 <_fwalk_sglue+0x10>

08011e50 <sniprintf>:
 8011e50:	b40c      	push	{r2, r3}
 8011e52:	b530      	push	{r4, r5, lr}
 8011e54:	4b17      	ldr	r3, [pc, #92]	; (8011eb4 <sniprintf+0x64>)
 8011e56:	1e0c      	subs	r4, r1, #0
 8011e58:	681d      	ldr	r5, [r3, #0]
 8011e5a:	b09d      	sub	sp, #116	; 0x74
 8011e5c:	da08      	bge.n	8011e70 <sniprintf+0x20>
 8011e5e:	238b      	movs	r3, #139	; 0x8b
 8011e60:	602b      	str	r3, [r5, #0]
 8011e62:	f04f 30ff 	mov.w	r0, #4294967295
 8011e66:	b01d      	add	sp, #116	; 0x74
 8011e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e6c:	b002      	add	sp, #8
 8011e6e:	4770      	bx	lr
 8011e70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e78:	bf14      	ite	ne
 8011e7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011e7e:	4623      	moveq	r3, r4
 8011e80:	9304      	str	r3, [sp, #16]
 8011e82:	9307      	str	r3, [sp, #28]
 8011e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e88:	9002      	str	r0, [sp, #8]
 8011e8a:	9006      	str	r0, [sp, #24]
 8011e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e92:	ab21      	add	r3, sp, #132	; 0x84
 8011e94:	a902      	add	r1, sp, #8
 8011e96:	4628      	mov	r0, r5
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	f002 fb07 	bl	80144ac <_svfiprintf_r>
 8011e9e:	1c43      	adds	r3, r0, #1
 8011ea0:	bfbc      	itt	lt
 8011ea2:	238b      	movlt	r3, #139	; 0x8b
 8011ea4:	602b      	strlt	r3, [r5, #0]
 8011ea6:	2c00      	cmp	r4, #0
 8011ea8:	d0dd      	beq.n	8011e66 <sniprintf+0x16>
 8011eaa:	9b02      	ldr	r3, [sp, #8]
 8011eac:	2200      	movs	r2, #0
 8011eae:	701a      	strb	r2, [r3, #0]
 8011eb0:	e7d9      	b.n	8011e66 <sniprintf+0x16>
 8011eb2:	bf00      	nop
 8011eb4:	2400006c 	.word	0x2400006c

08011eb8 <siprintf>:
 8011eb8:	b40e      	push	{r1, r2, r3}
 8011eba:	b500      	push	{lr}
 8011ebc:	b09c      	sub	sp, #112	; 0x70
 8011ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8011ec0:	9002      	str	r0, [sp, #8]
 8011ec2:	9006      	str	r0, [sp, #24]
 8011ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ec8:	4809      	ldr	r0, [pc, #36]	; (8011ef0 <siprintf+0x38>)
 8011eca:	9107      	str	r1, [sp, #28]
 8011ecc:	9104      	str	r1, [sp, #16]
 8011ece:	4909      	ldr	r1, [pc, #36]	; (8011ef4 <siprintf+0x3c>)
 8011ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ed4:	9105      	str	r1, [sp, #20]
 8011ed6:	6800      	ldr	r0, [r0, #0]
 8011ed8:	9301      	str	r3, [sp, #4]
 8011eda:	a902      	add	r1, sp, #8
 8011edc:	f002 fae6 	bl	80144ac <_svfiprintf_r>
 8011ee0:	9b02      	ldr	r3, [sp, #8]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	701a      	strb	r2, [r3, #0]
 8011ee6:	b01c      	add	sp, #112	; 0x70
 8011ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011eec:	b003      	add	sp, #12
 8011eee:	4770      	bx	lr
 8011ef0:	2400006c 	.word	0x2400006c
 8011ef4:	ffff0208 	.word	0xffff0208

08011ef8 <__sread>:
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	460c      	mov	r4, r1
 8011efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f00:	f000 f8c2 	bl	8012088 <_read_r>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	bfab      	itete	ge
 8011f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8011f0c:	181b      	addge	r3, r3, r0
 8011f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f12:	bfac      	ite	ge
 8011f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f16:	81a3      	strhlt	r3, [r4, #12]
 8011f18:	bd10      	pop	{r4, pc}

08011f1a <__swrite>:
 8011f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1e:	461f      	mov	r7, r3
 8011f20:	898b      	ldrh	r3, [r1, #12]
 8011f22:	05db      	lsls	r3, r3, #23
 8011f24:	4605      	mov	r5, r0
 8011f26:	460c      	mov	r4, r1
 8011f28:	4616      	mov	r6, r2
 8011f2a:	d505      	bpl.n	8011f38 <__swrite+0x1e>
 8011f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f30:	2302      	movs	r3, #2
 8011f32:	2200      	movs	r2, #0
 8011f34:	f000 f896 	bl	8012064 <_lseek_r>
 8011f38:	89a3      	ldrh	r3, [r4, #12]
 8011f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	4632      	mov	r2, r6
 8011f46:	463b      	mov	r3, r7
 8011f48:	4628      	mov	r0, r5
 8011f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4e:	f000 b8bd 	b.w	80120cc <_write_r>

08011f52 <__sseek>:
 8011f52:	b510      	push	{r4, lr}
 8011f54:	460c      	mov	r4, r1
 8011f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f5a:	f000 f883 	bl	8012064 <_lseek_r>
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	bf15      	itete	ne
 8011f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f6e:	81a3      	strheq	r3, [r4, #12]
 8011f70:	bf18      	it	ne
 8011f72:	81a3      	strhne	r3, [r4, #12]
 8011f74:	bd10      	pop	{r4, pc}

08011f76 <__sclose>:
 8011f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f7a:	f000 b80d 	b.w	8011f98 <_close_r>

08011f7e <memset>:
 8011f7e:	4402      	add	r2, r0
 8011f80:	4603      	mov	r3, r0
 8011f82:	4293      	cmp	r3, r2
 8011f84:	d100      	bne.n	8011f88 <memset+0xa>
 8011f86:	4770      	bx	lr
 8011f88:	f803 1b01 	strb.w	r1, [r3], #1
 8011f8c:	e7f9      	b.n	8011f82 <memset+0x4>
	...

08011f90 <_localeconv_r>:
 8011f90:	4800      	ldr	r0, [pc, #0]	; (8011f94 <_localeconv_r+0x4>)
 8011f92:	4770      	bx	lr
 8011f94:	24000160 	.word	0x24000160

08011f98 <_close_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4d06      	ldr	r5, [pc, #24]	; (8011fb4 <_close_r+0x1c>)
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	4608      	mov	r0, r1
 8011fa2:	602b      	str	r3, [r5, #0]
 8011fa4:	f7f0 fd35 	bl	8002a12 <_close>
 8011fa8:	1c43      	adds	r3, r0, #1
 8011faa:	d102      	bne.n	8011fb2 <_close_r+0x1a>
 8011fac:	682b      	ldr	r3, [r5, #0]
 8011fae:	b103      	cbz	r3, 8011fb2 <_close_r+0x1a>
 8011fb0:	6023      	str	r3, [r4, #0]
 8011fb2:	bd38      	pop	{r3, r4, r5, pc}
 8011fb4:	24005698 	.word	0x24005698

08011fb8 <_reclaim_reent>:
 8011fb8:	4b29      	ldr	r3, [pc, #164]	; (8012060 <_reclaim_reent+0xa8>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4283      	cmp	r3, r0
 8011fbe:	b570      	push	{r4, r5, r6, lr}
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	d04b      	beq.n	801205c <_reclaim_reent+0xa4>
 8011fc4:	69c3      	ldr	r3, [r0, #28]
 8011fc6:	b143      	cbz	r3, 8011fda <_reclaim_reent+0x22>
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d144      	bne.n	8012058 <_reclaim_reent+0xa0>
 8011fce:	69e3      	ldr	r3, [r4, #28]
 8011fd0:	6819      	ldr	r1, [r3, #0]
 8011fd2:	b111      	cbz	r1, 8011fda <_reclaim_reent+0x22>
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	f000 fec3 	bl	8012d60 <_free_r>
 8011fda:	6961      	ldr	r1, [r4, #20]
 8011fdc:	b111      	cbz	r1, 8011fe4 <_reclaim_reent+0x2c>
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f000 febe 	bl	8012d60 <_free_r>
 8011fe4:	69e1      	ldr	r1, [r4, #28]
 8011fe6:	b111      	cbz	r1, 8011fee <_reclaim_reent+0x36>
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f000 feb9 	bl	8012d60 <_free_r>
 8011fee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011ff0:	b111      	cbz	r1, 8011ff8 <_reclaim_reent+0x40>
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f000 feb4 	bl	8012d60 <_free_r>
 8011ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ffa:	b111      	cbz	r1, 8012002 <_reclaim_reent+0x4a>
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f000 feaf 	bl	8012d60 <_free_r>
 8012002:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012004:	b111      	cbz	r1, 801200c <_reclaim_reent+0x54>
 8012006:	4620      	mov	r0, r4
 8012008:	f000 feaa 	bl	8012d60 <_free_r>
 801200c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801200e:	b111      	cbz	r1, 8012016 <_reclaim_reent+0x5e>
 8012010:	4620      	mov	r0, r4
 8012012:	f000 fea5 	bl	8012d60 <_free_r>
 8012016:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012018:	b111      	cbz	r1, 8012020 <_reclaim_reent+0x68>
 801201a:	4620      	mov	r0, r4
 801201c:	f000 fea0 	bl	8012d60 <_free_r>
 8012020:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012022:	b111      	cbz	r1, 801202a <_reclaim_reent+0x72>
 8012024:	4620      	mov	r0, r4
 8012026:	f000 fe9b 	bl	8012d60 <_free_r>
 801202a:	6a23      	ldr	r3, [r4, #32]
 801202c:	b1b3      	cbz	r3, 801205c <_reclaim_reent+0xa4>
 801202e:	4620      	mov	r0, r4
 8012030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012034:	4718      	bx	r3
 8012036:	5949      	ldr	r1, [r1, r5]
 8012038:	b941      	cbnz	r1, 801204c <_reclaim_reent+0x94>
 801203a:	3504      	adds	r5, #4
 801203c:	69e3      	ldr	r3, [r4, #28]
 801203e:	2d80      	cmp	r5, #128	; 0x80
 8012040:	68d9      	ldr	r1, [r3, #12]
 8012042:	d1f8      	bne.n	8012036 <_reclaim_reent+0x7e>
 8012044:	4620      	mov	r0, r4
 8012046:	f000 fe8b 	bl	8012d60 <_free_r>
 801204a:	e7c0      	b.n	8011fce <_reclaim_reent+0x16>
 801204c:	680e      	ldr	r6, [r1, #0]
 801204e:	4620      	mov	r0, r4
 8012050:	f000 fe86 	bl	8012d60 <_free_r>
 8012054:	4631      	mov	r1, r6
 8012056:	e7ef      	b.n	8012038 <_reclaim_reent+0x80>
 8012058:	2500      	movs	r5, #0
 801205a:	e7ef      	b.n	801203c <_reclaim_reent+0x84>
 801205c:	bd70      	pop	{r4, r5, r6, pc}
 801205e:	bf00      	nop
 8012060:	2400006c 	.word	0x2400006c

08012064 <_lseek_r>:
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	4d07      	ldr	r5, [pc, #28]	; (8012084 <_lseek_r+0x20>)
 8012068:	4604      	mov	r4, r0
 801206a:	4608      	mov	r0, r1
 801206c:	4611      	mov	r1, r2
 801206e:	2200      	movs	r2, #0
 8012070:	602a      	str	r2, [r5, #0]
 8012072:	461a      	mov	r2, r3
 8012074:	f7f0 fcf4 	bl	8002a60 <_lseek>
 8012078:	1c43      	adds	r3, r0, #1
 801207a:	d102      	bne.n	8012082 <_lseek_r+0x1e>
 801207c:	682b      	ldr	r3, [r5, #0]
 801207e:	b103      	cbz	r3, 8012082 <_lseek_r+0x1e>
 8012080:	6023      	str	r3, [r4, #0]
 8012082:	bd38      	pop	{r3, r4, r5, pc}
 8012084:	24005698 	.word	0x24005698

08012088 <_read_r>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4d07      	ldr	r5, [pc, #28]	; (80120a8 <_read_r+0x20>)
 801208c:	4604      	mov	r4, r0
 801208e:	4608      	mov	r0, r1
 8012090:	4611      	mov	r1, r2
 8012092:	2200      	movs	r2, #0
 8012094:	602a      	str	r2, [r5, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	f7f0 fc82 	bl	80029a0 <_read>
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	d102      	bne.n	80120a6 <_read_r+0x1e>
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	b103      	cbz	r3, 80120a6 <_read_r+0x1e>
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	bd38      	pop	{r3, r4, r5, pc}
 80120a8:	24005698 	.word	0x24005698

080120ac <_sbrk_r>:
 80120ac:	b538      	push	{r3, r4, r5, lr}
 80120ae:	4d06      	ldr	r5, [pc, #24]	; (80120c8 <_sbrk_r+0x1c>)
 80120b0:	2300      	movs	r3, #0
 80120b2:	4604      	mov	r4, r0
 80120b4:	4608      	mov	r0, r1
 80120b6:	602b      	str	r3, [r5, #0]
 80120b8:	f7f0 fce0 	bl	8002a7c <_sbrk>
 80120bc:	1c43      	adds	r3, r0, #1
 80120be:	d102      	bne.n	80120c6 <_sbrk_r+0x1a>
 80120c0:	682b      	ldr	r3, [r5, #0]
 80120c2:	b103      	cbz	r3, 80120c6 <_sbrk_r+0x1a>
 80120c4:	6023      	str	r3, [r4, #0]
 80120c6:	bd38      	pop	{r3, r4, r5, pc}
 80120c8:	24005698 	.word	0x24005698

080120cc <_write_r>:
 80120cc:	b538      	push	{r3, r4, r5, lr}
 80120ce:	4d07      	ldr	r5, [pc, #28]	; (80120ec <_write_r+0x20>)
 80120d0:	4604      	mov	r4, r0
 80120d2:	4608      	mov	r0, r1
 80120d4:	4611      	mov	r1, r2
 80120d6:	2200      	movs	r2, #0
 80120d8:	602a      	str	r2, [r5, #0]
 80120da:	461a      	mov	r2, r3
 80120dc:	f7f0 fc7d 	bl	80029da <_write>
 80120e0:	1c43      	adds	r3, r0, #1
 80120e2:	d102      	bne.n	80120ea <_write_r+0x1e>
 80120e4:	682b      	ldr	r3, [r5, #0]
 80120e6:	b103      	cbz	r3, 80120ea <_write_r+0x1e>
 80120e8:	6023      	str	r3, [r4, #0]
 80120ea:	bd38      	pop	{r3, r4, r5, pc}
 80120ec:	24005698 	.word	0x24005698

080120f0 <__errno>:
 80120f0:	4b01      	ldr	r3, [pc, #4]	; (80120f8 <__errno+0x8>)
 80120f2:	6818      	ldr	r0, [r3, #0]
 80120f4:	4770      	bx	lr
 80120f6:	bf00      	nop
 80120f8:	2400006c 	.word	0x2400006c

080120fc <__libc_init_array>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	4d0d      	ldr	r5, [pc, #52]	; (8012134 <__libc_init_array+0x38>)
 8012100:	4c0d      	ldr	r4, [pc, #52]	; (8012138 <__libc_init_array+0x3c>)
 8012102:	1b64      	subs	r4, r4, r5
 8012104:	10a4      	asrs	r4, r4, #2
 8012106:	2600      	movs	r6, #0
 8012108:	42a6      	cmp	r6, r4
 801210a:	d109      	bne.n	8012120 <__libc_init_array+0x24>
 801210c:	4d0b      	ldr	r5, [pc, #44]	; (801213c <__libc_init_array+0x40>)
 801210e:	4c0c      	ldr	r4, [pc, #48]	; (8012140 <__libc_init_array+0x44>)
 8012110:	f003 fa4a 	bl	80155a8 <_init>
 8012114:	1b64      	subs	r4, r4, r5
 8012116:	10a4      	asrs	r4, r4, #2
 8012118:	2600      	movs	r6, #0
 801211a:	42a6      	cmp	r6, r4
 801211c:	d105      	bne.n	801212a <__libc_init_array+0x2e>
 801211e:	bd70      	pop	{r4, r5, r6, pc}
 8012120:	f855 3b04 	ldr.w	r3, [r5], #4
 8012124:	4798      	blx	r3
 8012126:	3601      	adds	r6, #1
 8012128:	e7ee      	b.n	8012108 <__libc_init_array+0xc>
 801212a:	f855 3b04 	ldr.w	r3, [r5], #4
 801212e:	4798      	blx	r3
 8012130:	3601      	adds	r6, #1
 8012132:	e7f2      	b.n	801211a <__libc_init_array+0x1e>
 8012134:	08015b20 	.word	0x08015b20
 8012138:	08015b20 	.word	0x08015b20
 801213c:	08015b20 	.word	0x08015b20
 8012140:	08015b24 	.word	0x08015b24

08012144 <__retarget_lock_init_recursive>:
 8012144:	4770      	bx	lr

08012146 <__retarget_lock_acquire_recursive>:
 8012146:	4770      	bx	lr

08012148 <__retarget_lock_release_recursive>:
 8012148:	4770      	bx	lr

0801214a <memcpy>:
 801214a:	440a      	add	r2, r1
 801214c:	4291      	cmp	r1, r2
 801214e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012152:	d100      	bne.n	8012156 <memcpy+0xc>
 8012154:	4770      	bx	lr
 8012156:	b510      	push	{r4, lr}
 8012158:	f811 4b01 	ldrb.w	r4, [r1], #1
 801215c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012160:	4291      	cmp	r1, r2
 8012162:	d1f9      	bne.n	8012158 <memcpy+0xe>
 8012164:	bd10      	pop	{r4, pc}
	...

08012168 <nanf>:
 8012168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012170 <nanf+0x8>
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop
 8012170:	7fc00000 	.word	0x7fc00000

08012174 <quorem>:
 8012174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012178:	6903      	ldr	r3, [r0, #16]
 801217a:	690c      	ldr	r4, [r1, #16]
 801217c:	42a3      	cmp	r3, r4
 801217e:	4607      	mov	r7, r0
 8012180:	db7e      	blt.n	8012280 <quorem+0x10c>
 8012182:	3c01      	subs	r4, #1
 8012184:	f101 0814 	add.w	r8, r1, #20
 8012188:	f100 0514 	add.w	r5, r0, #20
 801218c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012190:	9301      	str	r3, [sp, #4]
 8012192:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801219a:	3301      	adds	r3, #1
 801219c:	429a      	cmp	r2, r3
 801219e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80121a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80121a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80121aa:	d331      	bcc.n	8012210 <quorem+0x9c>
 80121ac:	f04f 0e00 	mov.w	lr, #0
 80121b0:	4640      	mov	r0, r8
 80121b2:	46ac      	mov	ip, r5
 80121b4:	46f2      	mov	sl, lr
 80121b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80121ba:	b293      	uxth	r3, r2
 80121bc:	fb06 e303 	mla	r3, r6, r3, lr
 80121c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80121c4:	0c1a      	lsrs	r2, r3, #16
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	ebaa 0303 	sub.w	r3, sl, r3
 80121cc:	f8dc a000 	ldr.w	sl, [ip]
 80121d0:	fa13 f38a 	uxtah	r3, r3, sl
 80121d4:	fb06 220e 	mla	r2, r6, lr, r2
 80121d8:	9300      	str	r3, [sp, #0]
 80121da:	9b00      	ldr	r3, [sp, #0]
 80121dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80121e0:	b292      	uxth	r2, r2
 80121e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80121e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80121ee:	4581      	cmp	r9, r0
 80121f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121f4:	f84c 3b04 	str.w	r3, [ip], #4
 80121f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80121fc:	d2db      	bcs.n	80121b6 <quorem+0x42>
 80121fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8012202:	b92b      	cbnz	r3, 8012210 <quorem+0x9c>
 8012204:	9b01      	ldr	r3, [sp, #4]
 8012206:	3b04      	subs	r3, #4
 8012208:	429d      	cmp	r5, r3
 801220a:	461a      	mov	r2, r3
 801220c:	d32c      	bcc.n	8012268 <quorem+0xf4>
 801220e:	613c      	str	r4, [r7, #16]
 8012210:	4638      	mov	r0, r7
 8012212:	f001 f8b7 	bl	8013384 <__mcmp>
 8012216:	2800      	cmp	r0, #0
 8012218:	db22      	blt.n	8012260 <quorem+0xec>
 801221a:	3601      	adds	r6, #1
 801221c:	4629      	mov	r1, r5
 801221e:	2000      	movs	r0, #0
 8012220:	f858 2b04 	ldr.w	r2, [r8], #4
 8012224:	f8d1 c000 	ldr.w	ip, [r1]
 8012228:	b293      	uxth	r3, r2
 801222a:	1ac3      	subs	r3, r0, r3
 801222c:	0c12      	lsrs	r2, r2, #16
 801222e:	fa13 f38c 	uxtah	r3, r3, ip
 8012232:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012236:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801223a:	b29b      	uxth	r3, r3
 801223c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012240:	45c1      	cmp	r9, r8
 8012242:	f841 3b04 	str.w	r3, [r1], #4
 8012246:	ea4f 4022 	mov.w	r0, r2, asr #16
 801224a:	d2e9      	bcs.n	8012220 <quorem+0xac>
 801224c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012254:	b922      	cbnz	r2, 8012260 <quorem+0xec>
 8012256:	3b04      	subs	r3, #4
 8012258:	429d      	cmp	r5, r3
 801225a:	461a      	mov	r2, r3
 801225c:	d30a      	bcc.n	8012274 <quorem+0x100>
 801225e:	613c      	str	r4, [r7, #16]
 8012260:	4630      	mov	r0, r6
 8012262:	b003      	add	sp, #12
 8012264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012268:	6812      	ldr	r2, [r2, #0]
 801226a:	3b04      	subs	r3, #4
 801226c:	2a00      	cmp	r2, #0
 801226e:	d1ce      	bne.n	801220e <quorem+0x9a>
 8012270:	3c01      	subs	r4, #1
 8012272:	e7c9      	b.n	8012208 <quorem+0x94>
 8012274:	6812      	ldr	r2, [r2, #0]
 8012276:	3b04      	subs	r3, #4
 8012278:	2a00      	cmp	r2, #0
 801227a:	d1f0      	bne.n	801225e <quorem+0xea>
 801227c:	3c01      	subs	r4, #1
 801227e:	e7eb      	b.n	8012258 <quorem+0xe4>
 8012280:	2000      	movs	r0, #0
 8012282:	e7ee      	b.n	8012262 <quorem+0xee>
 8012284:	0000      	movs	r0, r0
	...

08012288 <_dtoa_r>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	ed2d 8b02 	vpush	{d8}
 8012290:	69c5      	ldr	r5, [r0, #28]
 8012292:	b091      	sub	sp, #68	; 0x44
 8012294:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012298:	ec59 8b10 	vmov	r8, r9, d0
 801229c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801229e:	9106      	str	r1, [sp, #24]
 80122a0:	4606      	mov	r6, r0
 80122a2:	9208      	str	r2, [sp, #32]
 80122a4:	930c      	str	r3, [sp, #48]	; 0x30
 80122a6:	b975      	cbnz	r5, 80122c6 <_dtoa_r+0x3e>
 80122a8:	2010      	movs	r0, #16
 80122aa:	f7fe fe13 	bl	8010ed4 <malloc>
 80122ae:	4602      	mov	r2, r0
 80122b0:	61f0      	str	r0, [r6, #28]
 80122b2:	b920      	cbnz	r0, 80122be <_dtoa_r+0x36>
 80122b4:	4ba6      	ldr	r3, [pc, #664]	; (8012550 <_dtoa_r+0x2c8>)
 80122b6:	21ef      	movs	r1, #239	; 0xef
 80122b8:	48a6      	ldr	r0, [pc, #664]	; (8012554 <_dtoa_r+0x2cc>)
 80122ba:	f002 fad9 	bl	8014870 <__assert_func>
 80122be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80122c2:	6005      	str	r5, [r0, #0]
 80122c4:	60c5      	str	r5, [r0, #12]
 80122c6:	69f3      	ldr	r3, [r6, #28]
 80122c8:	6819      	ldr	r1, [r3, #0]
 80122ca:	b151      	cbz	r1, 80122e2 <_dtoa_r+0x5a>
 80122cc:	685a      	ldr	r2, [r3, #4]
 80122ce:	604a      	str	r2, [r1, #4]
 80122d0:	2301      	movs	r3, #1
 80122d2:	4093      	lsls	r3, r2
 80122d4:	608b      	str	r3, [r1, #8]
 80122d6:	4630      	mov	r0, r6
 80122d8:	f000 fdce 	bl	8012e78 <_Bfree>
 80122dc:	69f3      	ldr	r3, [r6, #28]
 80122de:	2200      	movs	r2, #0
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	f1b9 0300 	subs.w	r3, r9, #0
 80122e6:	bfbb      	ittet	lt
 80122e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80122ec:	9303      	strlt	r3, [sp, #12]
 80122ee:	2300      	movge	r3, #0
 80122f0:	2201      	movlt	r2, #1
 80122f2:	bfac      	ite	ge
 80122f4:	6023      	strge	r3, [r4, #0]
 80122f6:	6022      	strlt	r2, [r4, #0]
 80122f8:	4b97      	ldr	r3, [pc, #604]	; (8012558 <_dtoa_r+0x2d0>)
 80122fa:	9c03      	ldr	r4, [sp, #12]
 80122fc:	43a3      	bics	r3, r4
 80122fe:	d11c      	bne.n	801233a <_dtoa_r+0xb2>
 8012300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012302:	f242 730f 	movw	r3, #9999	; 0x270f
 8012306:	6013      	str	r3, [r2, #0]
 8012308:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801230c:	ea53 0308 	orrs.w	r3, r3, r8
 8012310:	f000 84fb 	beq.w	8012d0a <_dtoa_r+0xa82>
 8012314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012316:	b963      	cbnz	r3, 8012332 <_dtoa_r+0xaa>
 8012318:	4b90      	ldr	r3, [pc, #576]	; (801255c <_dtoa_r+0x2d4>)
 801231a:	e020      	b.n	801235e <_dtoa_r+0xd6>
 801231c:	4b90      	ldr	r3, [pc, #576]	; (8012560 <_dtoa_r+0x2d8>)
 801231e:	9301      	str	r3, [sp, #4]
 8012320:	3308      	adds	r3, #8
 8012322:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012324:	6013      	str	r3, [r2, #0]
 8012326:	9801      	ldr	r0, [sp, #4]
 8012328:	b011      	add	sp, #68	; 0x44
 801232a:	ecbd 8b02 	vpop	{d8}
 801232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012332:	4b8a      	ldr	r3, [pc, #552]	; (801255c <_dtoa_r+0x2d4>)
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	3303      	adds	r3, #3
 8012338:	e7f3      	b.n	8012322 <_dtoa_r+0x9a>
 801233a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801233e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012346:	d10c      	bne.n	8012362 <_dtoa_r+0xda>
 8012348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801234a:	2301      	movs	r3, #1
 801234c:	6013      	str	r3, [r2, #0]
 801234e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012350:	2b00      	cmp	r3, #0
 8012352:	f000 84d7 	beq.w	8012d04 <_dtoa_r+0xa7c>
 8012356:	4b83      	ldr	r3, [pc, #524]	; (8012564 <_dtoa_r+0x2dc>)
 8012358:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801235a:	6013      	str	r3, [r2, #0]
 801235c:	3b01      	subs	r3, #1
 801235e:	9301      	str	r3, [sp, #4]
 8012360:	e7e1      	b.n	8012326 <_dtoa_r+0x9e>
 8012362:	aa0e      	add	r2, sp, #56	; 0x38
 8012364:	a90f      	add	r1, sp, #60	; 0x3c
 8012366:	4630      	mov	r0, r6
 8012368:	eeb0 0b48 	vmov.f64	d0, d8
 801236c:	f001 f920 	bl	80135b0 <__d2b>
 8012370:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8012374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012376:	4605      	mov	r5, r0
 8012378:	2b00      	cmp	r3, #0
 801237a:	d046      	beq.n	801240a <_dtoa_r+0x182>
 801237c:	eeb0 7b48 	vmov.f64	d7, d8
 8012380:	ee18 1a90 	vmov	r1, s17
 8012384:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012388:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801238c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012390:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012394:	2000      	movs	r0, #0
 8012396:	ee07 1a90 	vmov	s15, r1
 801239a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801239e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012538 <_dtoa_r+0x2b0>
 80123a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80123a6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8012540 <_dtoa_r+0x2b8>
 80123aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80123ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012548 <_dtoa_r+0x2c0>
 80123b2:	ee07 3a90 	vmov	s15, r3
 80123b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80123ba:	eeb0 7b46 	vmov.f64	d7, d6
 80123be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80123c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80123c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80123ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ce:	ee16 ba90 	vmov	fp, s13
 80123d2:	9009      	str	r0, [sp, #36]	; 0x24
 80123d4:	d508      	bpl.n	80123e8 <_dtoa_r+0x160>
 80123d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80123da:	eeb4 6b47 	vcmp.f64	d6, d7
 80123de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e2:	bf18      	it	ne
 80123e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80123e8:	f1bb 0f16 	cmp.w	fp, #22
 80123ec:	d82b      	bhi.n	8012446 <_dtoa_r+0x1be>
 80123ee:	495e      	ldr	r1, [pc, #376]	; (8012568 <_dtoa_r+0x2e0>)
 80123f0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80123f4:	ed91 7b00 	vldr	d7, [r1]
 80123f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80123fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012400:	d501      	bpl.n	8012406 <_dtoa_r+0x17e>
 8012402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012406:	2100      	movs	r1, #0
 8012408:	e01e      	b.n	8012448 <_dtoa_r+0x1c0>
 801240a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801240c:	4413      	add	r3, r2
 801240e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8012412:	2920      	cmp	r1, #32
 8012414:	bfc1      	itttt	gt
 8012416:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801241a:	408c      	lslgt	r4, r1
 801241c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8012420:	fa28 f101 	lsrgt.w	r1, r8, r1
 8012424:	bfd6      	itet	le
 8012426:	f1c1 0120 	rsble	r1, r1, #32
 801242a:	4321      	orrgt	r1, r4
 801242c:	fa08 f101 	lslle.w	r1, r8, r1
 8012430:	ee07 1a90 	vmov	s15, r1
 8012434:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012438:	3b01      	subs	r3, #1
 801243a:	ee17 1a90 	vmov	r1, s15
 801243e:	2001      	movs	r0, #1
 8012440:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012444:	e7a7      	b.n	8012396 <_dtoa_r+0x10e>
 8012446:	2101      	movs	r1, #1
 8012448:	1ad2      	subs	r2, r2, r3
 801244a:	1e53      	subs	r3, r2, #1
 801244c:	9305      	str	r3, [sp, #20]
 801244e:	bf45      	ittet	mi
 8012450:	f1c2 0301 	rsbmi	r3, r2, #1
 8012454:	9304      	strmi	r3, [sp, #16]
 8012456:	2300      	movpl	r3, #0
 8012458:	2300      	movmi	r3, #0
 801245a:	bf4c      	ite	mi
 801245c:	9305      	strmi	r3, [sp, #20]
 801245e:	9304      	strpl	r3, [sp, #16]
 8012460:	f1bb 0f00 	cmp.w	fp, #0
 8012464:	910b      	str	r1, [sp, #44]	; 0x2c
 8012466:	db18      	blt.n	801249a <_dtoa_r+0x212>
 8012468:	9b05      	ldr	r3, [sp, #20]
 801246a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801246e:	445b      	add	r3, fp
 8012470:	9305      	str	r3, [sp, #20]
 8012472:	2300      	movs	r3, #0
 8012474:	9a06      	ldr	r2, [sp, #24]
 8012476:	2a09      	cmp	r2, #9
 8012478:	d848      	bhi.n	801250c <_dtoa_r+0x284>
 801247a:	2a05      	cmp	r2, #5
 801247c:	bfc4      	itt	gt
 801247e:	3a04      	subgt	r2, #4
 8012480:	9206      	strgt	r2, [sp, #24]
 8012482:	9a06      	ldr	r2, [sp, #24]
 8012484:	f1a2 0202 	sub.w	r2, r2, #2
 8012488:	bfcc      	ite	gt
 801248a:	2400      	movgt	r4, #0
 801248c:	2401      	movle	r4, #1
 801248e:	2a03      	cmp	r2, #3
 8012490:	d847      	bhi.n	8012522 <_dtoa_r+0x29a>
 8012492:	e8df f002 	tbb	[pc, r2]
 8012496:	2d0b      	.short	0x2d0b
 8012498:	392b      	.short	0x392b
 801249a:	9b04      	ldr	r3, [sp, #16]
 801249c:	2200      	movs	r2, #0
 801249e:	eba3 030b 	sub.w	r3, r3, fp
 80124a2:	9304      	str	r3, [sp, #16]
 80124a4:	920a      	str	r2, [sp, #40]	; 0x28
 80124a6:	f1cb 0300 	rsb	r3, fp, #0
 80124aa:	e7e3      	b.n	8012474 <_dtoa_r+0x1ec>
 80124ac:	2200      	movs	r2, #0
 80124ae:	9207      	str	r2, [sp, #28]
 80124b0:	9a08      	ldr	r2, [sp, #32]
 80124b2:	2a00      	cmp	r2, #0
 80124b4:	dc38      	bgt.n	8012528 <_dtoa_r+0x2a0>
 80124b6:	f04f 0a01 	mov.w	sl, #1
 80124ba:	46d1      	mov	r9, sl
 80124bc:	4652      	mov	r2, sl
 80124be:	f8cd a020 	str.w	sl, [sp, #32]
 80124c2:	69f7      	ldr	r7, [r6, #28]
 80124c4:	2100      	movs	r1, #0
 80124c6:	2004      	movs	r0, #4
 80124c8:	f100 0c14 	add.w	ip, r0, #20
 80124cc:	4594      	cmp	ip, r2
 80124ce:	d930      	bls.n	8012532 <_dtoa_r+0x2aa>
 80124d0:	6079      	str	r1, [r7, #4]
 80124d2:	4630      	mov	r0, r6
 80124d4:	930d      	str	r3, [sp, #52]	; 0x34
 80124d6:	f000 fc8f 	bl	8012df8 <_Balloc>
 80124da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124dc:	9001      	str	r0, [sp, #4]
 80124de:	4602      	mov	r2, r0
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d145      	bne.n	8012570 <_dtoa_r+0x2e8>
 80124e4:	4b21      	ldr	r3, [pc, #132]	; (801256c <_dtoa_r+0x2e4>)
 80124e6:	f240 11af 	movw	r1, #431	; 0x1af
 80124ea:	e6e5      	b.n	80122b8 <_dtoa_r+0x30>
 80124ec:	2201      	movs	r2, #1
 80124ee:	e7de      	b.n	80124ae <_dtoa_r+0x226>
 80124f0:	2200      	movs	r2, #0
 80124f2:	9207      	str	r2, [sp, #28]
 80124f4:	9a08      	ldr	r2, [sp, #32]
 80124f6:	eb0b 0a02 	add.w	sl, fp, r2
 80124fa:	f10a 0901 	add.w	r9, sl, #1
 80124fe:	464a      	mov	r2, r9
 8012500:	2a01      	cmp	r2, #1
 8012502:	bfb8      	it	lt
 8012504:	2201      	movlt	r2, #1
 8012506:	e7dc      	b.n	80124c2 <_dtoa_r+0x23a>
 8012508:	2201      	movs	r2, #1
 801250a:	e7f2      	b.n	80124f2 <_dtoa_r+0x26a>
 801250c:	2401      	movs	r4, #1
 801250e:	2200      	movs	r2, #0
 8012510:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012514:	f04f 3aff 	mov.w	sl, #4294967295
 8012518:	2100      	movs	r1, #0
 801251a:	46d1      	mov	r9, sl
 801251c:	2212      	movs	r2, #18
 801251e:	9108      	str	r1, [sp, #32]
 8012520:	e7cf      	b.n	80124c2 <_dtoa_r+0x23a>
 8012522:	2201      	movs	r2, #1
 8012524:	9207      	str	r2, [sp, #28]
 8012526:	e7f5      	b.n	8012514 <_dtoa_r+0x28c>
 8012528:	f8dd a020 	ldr.w	sl, [sp, #32]
 801252c:	46d1      	mov	r9, sl
 801252e:	4652      	mov	r2, sl
 8012530:	e7c7      	b.n	80124c2 <_dtoa_r+0x23a>
 8012532:	3101      	adds	r1, #1
 8012534:	0040      	lsls	r0, r0, #1
 8012536:	e7c7      	b.n	80124c8 <_dtoa_r+0x240>
 8012538:	636f4361 	.word	0x636f4361
 801253c:	3fd287a7 	.word	0x3fd287a7
 8012540:	8b60c8b3 	.word	0x8b60c8b3
 8012544:	3fc68a28 	.word	0x3fc68a28
 8012548:	509f79fb 	.word	0x509f79fb
 801254c:	3fd34413 	.word	0x3fd34413
 8012550:	08015736 	.word	0x08015736
 8012554:	0801574d 	.word	0x0801574d
 8012558:	7ff00000 	.word	0x7ff00000
 801255c:	08015732 	.word	0x08015732
 8012560:	08015729 	.word	0x08015729
 8012564:	08015701 	.word	0x08015701
 8012568:	08015838 	.word	0x08015838
 801256c:	080157a5 	.word	0x080157a5
 8012570:	69f2      	ldr	r2, [r6, #28]
 8012572:	9901      	ldr	r1, [sp, #4]
 8012574:	6011      	str	r1, [r2, #0]
 8012576:	f1b9 0f0e 	cmp.w	r9, #14
 801257a:	d86c      	bhi.n	8012656 <_dtoa_r+0x3ce>
 801257c:	2c00      	cmp	r4, #0
 801257e:	d06a      	beq.n	8012656 <_dtoa_r+0x3ce>
 8012580:	f1bb 0f00 	cmp.w	fp, #0
 8012584:	f340 80a0 	ble.w	80126c8 <_dtoa_r+0x440>
 8012588:	4ac1      	ldr	r2, [pc, #772]	; (8012890 <_dtoa_r+0x608>)
 801258a:	f00b 010f 	and.w	r1, fp, #15
 801258e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012592:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012596:	ed92 7b00 	vldr	d7, [r2]
 801259a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801259e:	f000 8087 	beq.w	80126b0 <_dtoa_r+0x428>
 80125a2:	49bc      	ldr	r1, [pc, #752]	; (8012894 <_dtoa_r+0x60c>)
 80125a4:	ed91 6b08 	vldr	d6, [r1, #32]
 80125a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80125ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80125b0:	f002 020f 	and.w	r2, r2, #15
 80125b4:	2103      	movs	r1, #3
 80125b6:	48b7      	ldr	r0, [pc, #732]	; (8012894 <_dtoa_r+0x60c>)
 80125b8:	2a00      	cmp	r2, #0
 80125ba:	d17b      	bne.n	80126b4 <_dtoa_r+0x42c>
 80125bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80125c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80125c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80125c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125ce:	2a00      	cmp	r2, #0
 80125d0:	f000 80a0 	beq.w	8012714 <_dtoa_r+0x48c>
 80125d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80125d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e0:	f140 8098 	bpl.w	8012714 <_dtoa_r+0x48c>
 80125e4:	f1b9 0f00 	cmp.w	r9, #0
 80125e8:	f000 8094 	beq.w	8012714 <_dtoa_r+0x48c>
 80125ec:	f1ba 0f00 	cmp.w	sl, #0
 80125f0:	dd2f      	ble.n	8012652 <_dtoa_r+0x3ca>
 80125f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80125f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80125fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80125fe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012602:	3101      	adds	r1, #1
 8012604:	4654      	mov	r4, sl
 8012606:	ed9d 6b02 	vldr	d6, [sp, #8]
 801260a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801260e:	ee07 1a90 	vmov	s15, r1
 8012612:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012616:	eea7 5b06 	vfma.f64	d5, d7, d6
 801261a:	ee15 7a90 	vmov	r7, s11
 801261e:	ec51 0b15 	vmov	r0, r1, d5
 8012622:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8012626:	2c00      	cmp	r4, #0
 8012628:	d177      	bne.n	801271a <_dtoa_r+0x492>
 801262a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801262e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012632:	ec41 0b17 	vmov	d7, r0, r1
 8012636:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263e:	f300 826a 	bgt.w	8012b16 <_dtoa_r+0x88e>
 8012642:	eeb1 7b47 	vneg.f64	d7, d7
 8012646:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264e:	f100 8260 	bmi.w	8012b12 <_dtoa_r+0x88a>
 8012652:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012658:	2a00      	cmp	r2, #0
 801265a:	f2c0 811d 	blt.w	8012898 <_dtoa_r+0x610>
 801265e:	f1bb 0f0e 	cmp.w	fp, #14
 8012662:	f300 8119 	bgt.w	8012898 <_dtoa_r+0x610>
 8012666:	4b8a      	ldr	r3, [pc, #552]	; (8012890 <_dtoa_r+0x608>)
 8012668:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801266c:	ed93 6b00 	vldr	d6, [r3]
 8012670:	9b08      	ldr	r3, [sp, #32]
 8012672:	2b00      	cmp	r3, #0
 8012674:	f280 80b7 	bge.w	80127e6 <_dtoa_r+0x55e>
 8012678:	f1b9 0f00 	cmp.w	r9, #0
 801267c:	f300 80b3 	bgt.w	80127e6 <_dtoa_r+0x55e>
 8012680:	f040 8246 	bne.w	8012b10 <_dtoa_r+0x888>
 8012684:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012688:	ee26 6b07 	vmul.f64	d6, d6, d7
 801268c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012690:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012698:	464c      	mov	r4, r9
 801269a:	464f      	mov	r7, r9
 801269c:	f280 821c 	bge.w	8012ad8 <_dtoa_r+0x850>
 80126a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80126a4:	2331      	movs	r3, #49	; 0x31
 80126a6:	f808 3b01 	strb.w	r3, [r8], #1
 80126aa:	f10b 0b01 	add.w	fp, fp, #1
 80126ae:	e218      	b.n	8012ae2 <_dtoa_r+0x85a>
 80126b0:	2102      	movs	r1, #2
 80126b2:	e780      	b.n	80125b6 <_dtoa_r+0x32e>
 80126b4:	07d4      	lsls	r4, r2, #31
 80126b6:	d504      	bpl.n	80126c2 <_dtoa_r+0x43a>
 80126b8:	ed90 6b00 	vldr	d6, [r0]
 80126bc:	3101      	adds	r1, #1
 80126be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80126c2:	1052      	asrs	r2, r2, #1
 80126c4:	3008      	adds	r0, #8
 80126c6:	e777      	b.n	80125b8 <_dtoa_r+0x330>
 80126c8:	d022      	beq.n	8012710 <_dtoa_r+0x488>
 80126ca:	f1cb 0200 	rsb	r2, fp, #0
 80126ce:	4970      	ldr	r1, [pc, #448]	; (8012890 <_dtoa_r+0x608>)
 80126d0:	f002 000f 	and.w	r0, r2, #15
 80126d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80126d8:	ed91 7b00 	vldr	d7, [r1]
 80126dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80126e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126e4:	486b      	ldr	r0, [pc, #428]	; (8012894 <_dtoa_r+0x60c>)
 80126e6:	1112      	asrs	r2, r2, #4
 80126e8:	2400      	movs	r4, #0
 80126ea:	2102      	movs	r1, #2
 80126ec:	b92a      	cbnz	r2, 80126fa <_dtoa_r+0x472>
 80126ee:	2c00      	cmp	r4, #0
 80126f0:	f43f af6a 	beq.w	80125c8 <_dtoa_r+0x340>
 80126f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126f8:	e766      	b.n	80125c8 <_dtoa_r+0x340>
 80126fa:	07d7      	lsls	r7, r2, #31
 80126fc:	d505      	bpl.n	801270a <_dtoa_r+0x482>
 80126fe:	ed90 6b00 	vldr	d6, [r0]
 8012702:	3101      	adds	r1, #1
 8012704:	2401      	movs	r4, #1
 8012706:	ee27 7b06 	vmul.f64	d7, d7, d6
 801270a:	1052      	asrs	r2, r2, #1
 801270c:	3008      	adds	r0, #8
 801270e:	e7ed      	b.n	80126ec <_dtoa_r+0x464>
 8012710:	2102      	movs	r1, #2
 8012712:	e759      	b.n	80125c8 <_dtoa_r+0x340>
 8012714:	465a      	mov	r2, fp
 8012716:	464c      	mov	r4, r9
 8012718:	e775      	b.n	8012606 <_dtoa_r+0x37e>
 801271a:	ec41 0b17 	vmov	d7, r0, r1
 801271e:	495c      	ldr	r1, [pc, #368]	; (8012890 <_dtoa_r+0x608>)
 8012720:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8012724:	ed11 4b02 	vldr	d4, [r1, #-8]
 8012728:	9901      	ldr	r1, [sp, #4]
 801272a:	440c      	add	r4, r1
 801272c:	9907      	ldr	r1, [sp, #28]
 801272e:	b351      	cbz	r1, 8012786 <_dtoa_r+0x4fe>
 8012730:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012734:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012738:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801273c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012740:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012744:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012748:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801274c:	ee14 1a90 	vmov	r1, s9
 8012750:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012754:	3130      	adds	r1, #48	; 0x30
 8012756:	ee36 6b45 	vsub.f64	d6, d6, d5
 801275a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012762:	f808 1b01 	strb.w	r1, [r8], #1
 8012766:	d439      	bmi.n	80127dc <_dtoa_r+0x554>
 8012768:	ee32 5b46 	vsub.f64	d5, d2, d6
 801276c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012774:	d472      	bmi.n	801285c <_dtoa_r+0x5d4>
 8012776:	45a0      	cmp	r8, r4
 8012778:	f43f af6b 	beq.w	8012652 <_dtoa_r+0x3ca>
 801277c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012780:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012784:	e7e0      	b.n	8012748 <_dtoa_r+0x4c0>
 8012786:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801278a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801278e:	4620      	mov	r0, r4
 8012790:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012794:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012798:	ee14 1a90 	vmov	r1, s9
 801279c:	3130      	adds	r1, #48	; 0x30
 801279e:	f808 1b01 	strb.w	r1, [r8], #1
 80127a2:	45a0      	cmp	r8, r4
 80127a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80127a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80127ac:	d118      	bne.n	80127e0 <_dtoa_r+0x558>
 80127ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80127b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80127b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80127ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127be:	dc4d      	bgt.n	801285c <_dtoa_r+0x5d4>
 80127c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80127c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80127c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127cc:	f57f af41 	bpl.w	8012652 <_dtoa_r+0x3ca>
 80127d0:	4680      	mov	r8, r0
 80127d2:	3801      	subs	r0, #1
 80127d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80127d8:	2b30      	cmp	r3, #48	; 0x30
 80127da:	d0f9      	beq.n	80127d0 <_dtoa_r+0x548>
 80127dc:	4693      	mov	fp, r2
 80127de:	e02a      	b.n	8012836 <_dtoa_r+0x5ae>
 80127e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80127e4:	e7d6      	b.n	8012794 <_dtoa_r+0x50c>
 80127e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80127ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80127f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80127f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80127fa:	ee15 3a10 	vmov	r3, s10
 80127fe:	3330      	adds	r3, #48	; 0x30
 8012800:	f808 3b01 	strb.w	r3, [r8], #1
 8012804:	9b01      	ldr	r3, [sp, #4]
 8012806:	eba8 0303 	sub.w	r3, r8, r3
 801280a:	4599      	cmp	r9, r3
 801280c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012810:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012814:	d133      	bne.n	801287e <_dtoa_r+0x5f6>
 8012816:	ee37 7b07 	vadd.f64	d7, d7, d7
 801281a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012822:	dc1a      	bgt.n	801285a <_dtoa_r+0x5d2>
 8012824:	eeb4 7b46 	vcmp.f64	d7, d6
 8012828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282c:	d103      	bne.n	8012836 <_dtoa_r+0x5ae>
 801282e:	ee15 3a10 	vmov	r3, s10
 8012832:	07d9      	lsls	r1, r3, #31
 8012834:	d411      	bmi.n	801285a <_dtoa_r+0x5d2>
 8012836:	4629      	mov	r1, r5
 8012838:	4630      	mov	r0, r6
 801283a:	f000 fb1d 	bl	8012e78 <_Bfree>
 801283e:	2300      	movs	r3, #0
 8012840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012842:	f888 3000 	strb.w	r3, [r8]
 8012846:	f10b 0301 	add.w	r3, fp, #1
 801284a:	6013      	str	r3, [r2, #0]
 801284c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801284e:	2b00      	cmp	r3, #0
 8012850:	f43f ad69 	beq.w	8012326 <_dtoa_r+0x9e>
 8012854:	f8c3 8000 	str.w	r8, [r3]
 8012858:	e565      	b.n	8012326 <_dtoa_r+0x9e>
 801285a:	465a      	mov	r2, fp
 801285c:	4643      	mov	r3, r8
 801285e:	4698      	mov	r8, r3
 8012860:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8012864:	2939      	cmp	r1, #57	; 0x39
 8012866:	d106      	bne.n	8012876 <_dtoa_r+0x5ee>
 8012868:	9901      	ldr	r1, [sp, #4]
 801286a:	4299      	cmp	r1, r3
 801286c:	d1f7      	bne.n	801285e <_dtoa_r+0x5d6>
 801286e:	9801      	ldr	r0, [sp, #4]
 8012870:	2130      	movs	r1, #48	; 0x30
 8012872:	3201      	adds	r2, #1
 8012874:	7001      	strb	r1, [r0, #0]
 8012876:	7819      	ldrb	r1, [r3, #0]
 8012878:	3101      	adds	r1, #1
 801287a:	7019      	strb	r1, [r3, #0]
 801287c:	e7ae      	b.n	80127dc <_dtoa_r+0x554>
 801287e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012882:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288a:	d1b2      	bne.n	80127f2 <_dtoa_r+0x56a>
 801288c:	e7d3      	b.n	8012836 <_dtoa_r+0x5ae>
 801288e:	bf00      	nop
 8012890:	08015838 	.word	0x08015838
 8012894:	08015810 	.word	0x08015810
 8012898:	9907      	ldr	r1, [sp, #28]
 801289a:	2900      	cmp	r1, #0
 801289c:	f000 80d0 	beq.w	8012a40 <_dtoa_r+0x7b8>
 80128a0:	9906      	ldr	r1, [sp, #24]
 80128a2:	2901      	cmp	r1, #1
 80128a4:	f300 80b4 	bgt.w	8012a10 <_dtoa_r+0x788>
 80128a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128aa:	2900      	cmp	r1, #0
 80128ac:	f000 80ac 	beq.w	8012a08 <_dtoa_r+0x780>
 80128b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80128b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80128b8:	461c      	mov	r4, r3
 80128ba:	9309      	str	r3, [sp, #36]	; 0x24
 80128bc:	9b04      	ldr	r3, [sp, #16]
 80128be:	4413      	add	r3, r2
 80128c0:	9304      	str	r3, [sp, #16]
 80128c2:	9b05      	ldr	r3, [sp, #20]
 80128c4:	2101      	movs	r1, #1
 80128c6:	4413      	add	r3, r2
 80128c8:	4630      	mov	r0, r6
 80128ca:	9305      	str	r3, [sp, #20]
 80128cc:	f000 fbd4 	bl	8013078 <__i2b>
 80128d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128d2:	4607      	mov	r7, r0
 80128d4:	f1b8 0f00 	cmp.w	r8, #0
 80128d8:	d00d      	beq.n	80128f6 <_dtoa_r+0x66e>
 80128da:	9a05      	ldr	r2, [sp, #20]
 80128dc:	2a00      	cmp	r2, #0
 80128de:	dd0a      	ble.n	80128f6 <_dtoa_r+0x66e>
 80128e0:	4542      	cmp	r2, r8
 80128e2:	9904      	ldr	r1, [sp, #16]
 80128e4:	bfa8      	it	ge
 80128e6:	4642      	movge	r2, r8
 80128e8:	1a89      	subs	r1, r1, r2
 80128ea:	9104      	str	r1, [sp, #16]
 80128ec:	9905      	ldr	r1, [sp, #20]
 80128ee:	eba8 0802 	sub.w	r8, r8, r2
 80128f2:	1a8a      	subs	r2, r1, r2
 80128f4:	9205      	str	r2, [sp, #20]
 80128f6:	b303      	cbz	r3, 801293a <_dtoa_r+0x6b2>
 80128f8:	9a07      	ldr	r2, [sp, #28]
 80128fa:	2a00      	cmp	r2, #0
 80128fc:	f000 80a5 	beq.w	8012a4a <_dtoa_r+0x7c2>
 8012900:	2c00      	cmp	r4, #0
 8012902:	dd13      	ble.n	801292c <_dtoa_r+0x6a4>
 8012904:	4639      	mov	r1, r7
 8012906:	4622      	mov	r2, r4
 8012908:	4630      	mov	r0, r6
 801290a:	930d      	str	r3, [sp, #52]	; 0x34
 801290c:	f000 fc74 	bl	80131f8 <__pow5mult>
 8012910:	462a      	mov	r2, r5
 8012912:	4601      	mov	r1, r0
 8012914:	4607      	mov	r7, r0
 8012916:	4630      	mov	r0, r6
 8012918:	f000 fbc4 	bl	80130a4 <__multiply>
 801291c:	4629      	mov	r1, r5
 801291e:	9009      	str	r0, [sp, #36]	; 0x24
 8012920:	4630      	mov	r0, r6
 8012922:	f000 faa9 	bl	8012e78 <_Bfree>
 8012926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801292a:	4615      	mov	r5, r2
 801292c:	1b1a      	subs	r2, r3, r4
 801292e:	d004      	beq.n	801293a <_dtoa_r+0x6b2>
 8012930:	4629      	mov	r1, r5
 8012932:	4630      	mov	r0, r6
 8012934:	f000 fc60 	bl	80131f8 <__pow5mult>
 8012938:	4605      	mov	r5, r0
 801293a:	2101      	movs	r1, #1
 801293c:	4630      	mov	r0, r6
 801293e:	f000 fb9b 	bl	8013078 <__i2b>
 8012942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012944:	2b00      	cmp	r3, #0
 8012946:	4604      	mov	r4, r0
 8012948:	f340 8081 	ble.w	8012a4e <_dtoa_r+0x7c6>
 801294c:	461a      	mov	r2, r3
 801294e:	4601      	mov	r1, r0
 8012950:	4630      	mov	r0, r6
 8012952:	f000 fc51 	bl	80131f8 <__pow5mult>
 8012956:	9b06      	ldr	r3, [sp, #24]
 8012958:	2b01      	cmp	r3, #1
 801295a:	4604      	mov	r4, r0
 801295c:	dd7a      	ble.n	8012a54 <_dtoa_r+0x7cc>
 801295e:	2300      	movs	r3, #0
 8012960:	9309      	str	r3, [sp, #36]	; 0x24
 8012962:	6922      	ldr	r2, [r4, #16]
 8012964:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012968:	6910      	ldr	r0, [r2, #16]
 801296a:	f000 fb37 	bl	8012fdc <__hi0bits>
 801296e:	f1c0 0020 	rsb	r0, r0, #32
 8012972:	9b05      	ldr	r3, [sp, #20]
 8012974:	4418      	add	r0, r3
 8012976:	f010 001f 	ands.w	r0, r0, #31
 801297a:	f000 8093 	beq.w	8012aa4 <_dtoa_r+0x81c>
 801297e:	f1c0 0220 	rsb	r2, r0, #32
 8012982:	2a04      	cmp	r2, #4
 8012984:	f340 8085 	ble.w	8012a92 <_dtoa_r+0x80a>
 8012988:	9b04      	ldr	r3, [sp, #16]
 801298a:	f1c0 001c 	rsb	r0, r0, #28
 801298e:	4403      	add	r3, r0
 8012990:	9304      	str	r3, [sp, #16]
 8012992:	9b05      	ldr	r3, [sp, #20]
 8012994:	4480      	add	r8, r0
 8012996:	4403      	add	r3, r0
 8012998:	9305      	str	r3, [sp, #20]
 801299a:	9b04      	ldr	r3, [sp, #16]
 801299c:	2b00      	cmp	r3, #0
 801299e:	dd05      	ble.n	80129ac <_dtoa_r+0x724>
 80129a0:	4629      	mov	r1, r5
 80129a2:	461a      	mov	r2, r3
 80129a4:	4630      	mov	r0, r6
 80129a6:	f000 fc81 	bl	80132ac <__lshift>
 80129aa:	4605      	mov	r5, r0
 80129ac:	9b05      	ldr	r3, [sp, #20]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	dd05      	ble.n	80129be <_dtoa_r+0x736>
 80129b2:	4621      	mov	r1, r4
 80129b4:	461a      	mov	r2, r3
 80129b6:	4630      	mov	r0, r6
 80129b8:	f000 fc78 	bl	80132ac <__lshift>
 80129bc:	4604      	mov	r4, r0
 80129be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d071      	beq.n	8012aa8 <_dtoa_r+0x820>
 80129c4:	4621      	mov	r1, r4
 80129c6:	4628      	mov	r0, r5
 80129c8:	f000 fcdc 	bl	8013384 <__mcmp>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	da6b      	bge.n	8012aa8 <_dtoa_r+0x820>
 80129d0:	2300      	movs	r3, #0
 80129d2:	4629      	mov	r1, r5
 80129d4:	220a      	movs	r2, #10
 80129d6:	4630      	mov	r0, r6
 80129d8:	f000 fa70 	bl	8012ebc <__multadd>
 80129dc:	9b07      	ldr	r3, [sp, #28]
 80129de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129e2:	4605      	mov	r5, r0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f000 8197 	beq.w	8012d18 <_dtoa_r+0xa90>
 80129ea:	4639      	mov	r1, r7
 80129ec:	2300      	movs	r3, #0
 80129ee:	220a      	movs	r2, #10
 80129f0:	4630      	mov	r0, r6
 80129f2:	f000 fa63 	bl	8012ebc <__multadd>
 80129f6:	f1ba 0f00 	cmp.w	sl, #0
 80129fa:	4607      	mov	r7, r0
 80129fc:	f300 8093 	bgt.w	8012b26 <_dtoa_r+0x89e>
 8012a00:	9b06      	ldr	r3, [sp, #24]
 8012a02:	2b02      	cmp	r3, #2
 8012a04:	dc57      	bgt.n	8012ab6 <_dtoa_r+0x82e>
 8012a06:	e08e      	b.n	8012b26 <_dtoa_r+0x89e>
 8012a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012a0e:	e751      	b.n	80128b4 <_dtoa_r+0x62c>
 8012a10:	f109 34ff 	add.w	r4, r9, #4294967295
 8012a14:	42a3      	cmp	r3, r4
 8012a16:	bfbf      	itttt	lt
 8012a18:	1ae2      	sublt	r2, r4, r3
 8012a1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012a1c:	189b      	addlt	r3, r3, r2
 8012a1e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012a20:	bfae      	itee	ge
 8012a22:	1b1c      	subge	r4, r3, r4
 8012a24:	4623      	movlt	r3, r4
 8012a26:	2400      	movlt	r4, #0
 8012a28:	f1b9 0f00 	cmp.w	r9, #0
 8012a2c:	bfb5      	itete	lt
 8012a2e:	9a04      	ldrlt	r2, [sp, #16]
 8012a30:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012a34:	eba2 0809 	sublt.w	r8, r2, r9
 8012a38:	464a      	movge	r2, r9
 8012a3a:	bfb8      	it	lt
 8012a3c:	2200      	movlt	r2, #0
 8012a3e:	e73c      	b.n	80128ba <_dtoa_r+0x632>
 8012a40:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012a44:	9f07      	ldr	r7, [sp, #28]
 8012a46:	461c      	mov	r4, r3
 8012a48:	e744      	b.n	80128d4 <_dtoa_r+0x64c>
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	e770      	b.n	8012930 <_dtoa_r+0x6a8>
 8012a4e:	9b06      	ldr	r3, [sp, #24]
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	dc18      	bgt.n	8012a86 <_dtoa_r+0x7fe>
 8012a54:	9b02      	ldr	r3, [sp, #8]
 8012a56:	b9b3      	cbnz	r3, 8012a86 <_dtoa_r+0x7fe>
 8012a58:	9b03      	ldr	r3, [sp, #12]
 8012a5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012a5e:	b9a2      	cbnz	r2, 8012a8a <_dtoa_r+0x802>
 8012a60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012a64:	0d12      	lsrs	r2, r2, #20
 8012a66:	0512      	lsls	r2, r2, #20
 8012a68:	b18a      	cbz	r2, 8012a8e <_dtoa_r+0x806>
 8012a6a:	9b04      	ldr	r3, [sp, #16]
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	9304      	str	r3, [sp, #16]
 8012a70:	9b05      	ldr	r3, [sp, #20]
 8012a72:	3301      	adds	r3, #1
 8012a74:	9305      	str	r3, [sp, #20]
 8012a76:	2301      	movs	r3, #1
 8012a78:	9309      	str	r3, [sp, #36]	; 0x24
 8012a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f47f af70 	bne.w	8012962 <_dtoa_r+0x6da>
 8012a82:	2001      	movs	r0, #1
 8012a84:	e775      	b.n	8012972 <_dtoa_r+0x6ea>
 8012a86:	2300      	movs	r3, #0
 8012a88:	e7f6      	b.n	8012a78 <_dtoa_r+0x7f0>
 8012a8a:	9b02      	ldr	r3, [sp, #8]
 8012a8c:	e7f4      	b.n	8012a78 <_dtoa_r+0x7f0>
 8012a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8012a90:	e7f3      	b.n	8012a7a <_dtoa_r+0x7f2>
 8012a92:	d082      	beq.n	801299a <_dtoa_r+0x712>
 8012a94:	9b04      	ldr	r3, [sp, #16]
 8012a96:	321c      	adds	r2, #28
 8012a98:	4413      	add	r3, r2
 8012a9a:	9304      	str	r3, [sp, #16]
 8012a9c:	9b05      	ldr	r3, [sp, #20]
 8012a9e:	4490      	add	r8, r2
 8012aa0:	4413      	add	r3, r2
 8012aa2:	e779      	b.n	8012998 <_dtoa_r+0x710>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	e7f5      	b.n	8012a94 <_dtoa_r+0x80c>
 8012aa8:	f1b9 0f00 	cmp.w	r9, #0
 8012aac:	dc36      	bgt.n	8012b1c <_dtoa_r+0x894>
 8012aae:	9b06      	ldr	r3, [sp, #24]
 8012ab0:	2b02      	cmp	r3, #2
 8012ab2:	dd33      	ble.n	8012b1c <_dtoa_r+0x894>
 8012ab4:	46ca      	mov	sl, r9
 8012ab6:	f1ba 0f00 	cmp.w	sl, #0
 8012aba:	d10d      	bne.n	8012ad8 <_dtoa_r+0x850>
 8012abc:	4621      	mov	r1, r4
 8012abe:	4653      	mov	r3, sl
 8012ac0:	2205      	movs	r2, #5
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f000 f9fa 	bl	8012ebc <__multadd>
 8012ac8:	4601      	mov	r1, r0
 8012aca:	4604      	mov	r4, r0
 8012acc:	4628      	mov	r0, r5
 8012ace:	f000 fc59 	bl	8013384 <__mcmp>
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	f73f ade4 	bgt.w	80126a0 <_dtoa_r+0x418>
 8012ad8:	9b08      	ldr	r3, [sp, #32]
 8012ada:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012ade:	ea6f 0b03 	mvn.w	fp, r3
 8012ae2:	f04f 0900 	mov.w	r9, #0
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f000 f9c5 	bl	8012e78 <_Bfree>
 8012aee:	2f00      	cmp	r7, #0
 8012af0:	f43f aea1 	beq.w	8012836 <_dtoa_r+0x5ae>
 8012af4:	f1b9 0f00 	cmp.w	r9, #0
 8012af8:	d005      	beq.n	8012b06 <_dtoa_r+0x87e>
 8012afa:	45b9      	cmp	r9, r7
 8012afc:	d003      	beq.n	8012b06 <_dtoa_r+0x87e>
 8012afe:	4649      	mov	r1, r9
 8012b00:	4630      	mov	r0, r6
 8012b02:	f000 f9b9 	bl	8012e78 <_Bfree>
 8012b06:	4639      	mov	r1, r7
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f000 f9b5 	bl	8012e78 <_Bfree>
 8012b0e:	e692      	b.n	8012836 <_dtoa_r+0x5ae>
 8012b10:	2400      	movs	r4, #0
 8012b12:	4627      	mov	r7, r4
 8012b14:	e7e0      	b.n	8012ad8 <_dtoa_r+0x850>
 8012b16:	4693      	mov	fp, r2
 8012b18:	4627      	mov	r7, r4
 8012b1a:	e5c1      	b.n	80126a0 <_dtoa_r+0x418>
 8012b1c:	9b07      	ldr	r3, [sp, #28]
 8012b1e:	46ca      	mov	sl, r9
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	f000 8100 	beq.w	8012d26 <_dtoa_r+0xa9e>
 8012b26:	f1b8 0f00 	cmp.w	r8, #0
 8012b2a:	dd05      	ble.n	8012b38 <_dtoa_r+0x8b0>
 8012b2c:	4639      	mov	r1, r7
 8012b2e:	4642      	mov	r2, r8
 8012b30:	4630      	mov	r0, r6
 8012b32:	f000 fbbb 	bl	80132ac <__lshift>
 8012b36:	4607      	mov	r7, r0
 8012b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d05d      	beq.n	8012bfa <_dtoa_r+0x972>
 8012b3e:	6879      	ldr	r1, [r7, #4]
 8012b40:	4630      	mov	r0, r6
 8012b42:	f000 f959 	bl	8012df8 <_Balloc>
 8012b46:	4680      	mov	r8, r0
 8012b48:	b928      	cbnz	r0, 8012b56 <_dtoa_r+0x8ce>
 8012b4a:	4b82      	ldr	r3, [pc, #520]	; (8012d54 <_dtoa_r+0xacc>)
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012b52:	f7ff bbb1 	b.w	80122b8 <_dtoa_r+0x30>
 8012b56:	693a      	ldr	r2, [r7, #16]
 8012b58:	3202      	adds	r2, #2
 8012b5a:	0092      	lsls	r2, r2, #2
 8012b5c:	f107 010c 	add.w	r1, r7, #12
 8012b60:	300c      	adds	r0, #12
 8012b62:	f7ff faf2 	bl	801214a <memcpy>
 8012b66:	2201      	movs	r2, #1
 8012b68:	4641      	mov	r1, r8
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f000 fb9e 	bl	80132ac <__lshift>
 8012b70:	9b01      	ldr	r3, [sp, #4]
 8012b72:	3301      	adds	r3, #1
 8012b74:	9304      	str	r3, [sp, #16]
 8012b76:	9b01      	ldr	r3, [sp, #4]
 8012b78:	4453      	add	r3, sl
 8012b7a:	9308      	str	r3, [sp, #32]
 8012b7c:	9b02      	ldr	r3, [sp, #8]
 8012b7e:	f003 0301 	and.w	r3, r3, #1
 8012b82:	46b9      	mov	r9, r7
 8012b84:	9307      	str	r3, [sp, #28]
 8012b86:	4607      	mov	r7, r0
 8012b88:	9b04      	ldr	r3, [sp, #16]
 8012b8a:	4621      	mov	r1, r4
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	4628      	mov	r0, r5
 8012b90:	9302      	str	r3, [sp, #8]
 8012b92:	f7ff faef 	bl	8012174 <quorem>
 8012b96:	4603      	mov	r3, r0
 8012b98:	3330      	adds	r3, #48	; 0x30
 8012b9a:	9005      	str	r0, [sp, #20]
 8012b9c:	4649      	mov	r1, r9
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ba2:	f000 fbef 	bl	8013384 <__mcmp>
 8012ba6:	463a      	mov	r2, r7
 8012ba8:	4682      	mov	sl, r0
 8012baa:	4621      	mov	r1, r4
 8012bac:	4630      	mov	r0, r6
 8012bae:	f000 fc05 	bl	80133bc <__mdiff>
 8012bb2:	68c2      	ldr	r2, [r0, #12]
 8012bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bb6:	4680      	mov	r8, r0
 8012bb8:	bb0a      	cbnz	r2, 8012bfe <_dtoa_r+0x976>
 8012bba:	4601      	mov	r1, r0
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	f000 fbe1 	bl	8013384 <__mcmp>
 8012bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bc4:	4602      	mov	r2, r0
 8012bc6:	4641      	mov	r1, r8
 8012bc8:	4630      	mov	r0, r6
 8012bca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012bce:	f000 f953 	bl	8012e78 <_Bfree>
 8012bd2:	9b06      	ldr	r3, [sp, #24]
 8012bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012bda:	ea43 0102 	orr.w	r1, r3, r2
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	4319      	orrs	r1, r3
 8012be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be4:	d10d      	bne.n	8012c02 <_dtoa_r+0x97a>
 8012be6:	2b39      	cmp	r3, #57	; 0x39
 8012be8:	d029      	beq.n	8012c3e <_dtoa_r+0x9b6>
 8012bea:	f1ba 0f00 	cmp.w	sl, #0
 8012bee:	dd01      	ble.n	8012bf4 <_dtoa_r+0x96c>
 8012bf0:	9b05      	ldr	r3, [sp, #20]
 8012bf2:	3331      	adds	r3, #49	; 0x31
 8012bf4:	9a02      	ldr	r2, [sp, #8]
 8012bf6:	7013      	strb	r3, [r2, #0]
 8012bf8:	e775      	b.n	8012ae6 <_dtoa_r+0x85e>
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	e7b8      	b.n	8012b70 <_dtoa_r+0x8e8>
 8012bfe:	2201      	movs	r2, #1
 8012c00:	e7e1      	b.n	8012bc6 <_dtoa_r+0x93e>
 8012c02:	f1ba 0f00 	cmp.w	sl, #0
 8012c06:	db06      	blt.n	8012c16 <_dtoa_r+0x98e>
 8012c08:	9906      	ldr	r1, [sp, #24]
 8012c0a:	ea41 0a0a 	orr.w	sl, r1, sl
 8012c0e:	9907      	ldr	r1, [sp, #28]
 8012c10:	ea5a 0a01 	orrs.w	sl, sl, r1
 8012c14:	d120      	bne.n	8012c58 <_dtoa_r+0x9d0>
 8012c16:	2a00      	cmp	r2, #0
 8012c18:	ddec      	ble.n	8012bf4 <_dtoa_r+0x96c>
 8012c1a:	4629      	mov	r1, r5
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	4630      	mov	r0, r6
 8012c20:	9304      	str	r3, [sp, #16]
 8012c22:	f000 fb43 	bl	80132ac <__lshift>
 8012c26:	4621      	mov	r1, r4
 8012c28:	4605      	mov	r5, r0
 8012c2a:	f000 fbab 	bl	8013384 <__mcmp>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	9b04      	ldr	r3, [sp, #16]
 8012c32:	dc02      	bgt.n	8012c3a <_dtoa_r+0x9b2>
 8012c34:	d1de      	bne.n	8012bf4 <_dtoa_r+0x96c>
 8012c36:	07da      	lsls	r2, r3, #31
 8012c38:	d5dc      	bpl.n	8012bf4 <_dtoa_r+0x96c>
 8012c3a:	2b39      	cmp	r3, #57	; 0x39
 8012c3c:	d1d8      	bne.n	8012bf0 <_dtoa_r+0x968>
 8012c3e:	9a02      	ldr	r2, [sp, #8]
 8012c40:	2339      	movs	r3, #57	; 0x39
 8012c42:	7013      	strb	r3, [r2, #0]
 8012c44:	4643      	mov	r3, r8
 8012c46:	4698      	mov	r8, r3
 8012c48:	3b01      	subs	r3, #1
 8012c4a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012c4e:	2a39      	cmp	r2, #57	; 0x39
 8012c50:	d051      	beq.n	8012cf6 <_dtoa_r+0xa6e>
 8012c52:	3201      	adds	r2, #1
 8012c54:	701a      	strb	r2, [r3, #0]
 8012c56:	e746      	b.n	8012ae6 <_dtoa_r+0x85e>
 8012c58:	2a00      	cmp	r2, #0
 8012c5a:	dd03      	ble.n	8012c64 <_dtoa_r+0x9dc>
 8012c5c:	2b39      	cmp	r3, #57	; 0x39
 8012c5e:	d0ee      	beq.n	8012c3e <_dtoa_r+0x9b6>
 8012c60:	3301      	adds	r3, #1
 8012c62:	e7c7      	b.n	8012bf4 <_dtoa_r+0x96c>
 8012c64:	9a04      	ldr	r2, [sp, #16]
 8012c66:	9908      	ldr	r1, [sp, #32]
 8012c68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012c6c:	428a      	cmp	r2, r1
 8012c6e:	d02b      	beq.n	8012cc8 <_dtoa_r+0xa40>
 8012c70:	4629      	mov	r1, r5
 8012c72:	2300      	movs	r3, #0
 8012c74:	220a      	movs	r2, #10
 8012c76:	4630      	mov	r0, r6
 8012c78:	f000 f920 	bl	8012ebc <__multadd>
 8012c7c:	45b9      	cmp	r9, r7
 8012c7e:	4605      	mov	r5, r0
 8012c80:	f04f 0300 	mov.w	r3, #0
 8012c84:	f04f 020a 	mov.w	r2, #10
 8012c88:	4649      	mov	r1, r9
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	d107      	bne.n	8012c9e <_dtoa_r+0xa16>
 8012c8e:	f000 f915 	bl	8012ebc <__multadd>
 8012c92:	4681      	mov	r9, r0
 8012c94:	4607      	mov	r7, r0
 8012c96:	9b04      	ldr	r3, [sp, #16]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	e774      	b.n	8012b88 <_dtoa_r+0x900>
 8012c9e:	f000 f90d 	bl	8012ebc <__multadd>
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	4681      	mov	r9, r0
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	220a      	movs	r2, #10
 8012caa:	4630      	mov	r0, r6
 8012cac:	f000 f906 	bl	8012ebc <__multadd>
 8012cb0:	4607      	mov	r7, r0
 8012cb2:	e7f0      	b.n	8012c96 <_dtoa_r+0xa0e>
 8012cb4:	f1ba 0f00 	cmp.w	sl, #0
 8012cb8:	9a01      	ldr	r2, [sp, #4]
 8012cba:	bfcc      	ite	gt
 8012cbc:	46d0      	movgt	r8, sl
 8012cbe:	f04f 0801 	movle.w	r8, #1
 8012cc2:	4490      	add	r8, r2
 8012cc4:	f04f 0900 	mov.w	r9, #0
 8012cc8:	4629      	mov	r1, r5
 8012cca:	2201      	movs	r2, #1
 8012ccc:	4630      	mov	r0, r6
 8012cce:	9302      	str	r3, [sp, #8]
 8012cd0:	f000 faec 	bl	80132ac <__lshift>
 8012cd4:	4621      	mov	r1, r4
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	f000 fb54 	bl	8013384 <__mcmp>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	dcb1      	bgt.n	8012c44 <_dtoa_r+0x9bc>
 8012ce0:	d102      	bne.n	8012ce8 <_dtoa_r+0xa60>
 8012ce2:	9b02      	ldr	r3, [sp, #8]
 8012ce4:	07db      	lsls	r3, r3, #31
 8012ce6:	d4ad      	bmi.n	8012c44 <_dtoa_r+0x9bc>
 8012ce8:	4643      	mov	r3, r8
 8012cea:	4698      	mov	r8, r3
 8012cec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cf0:	2a30      	cmp	r2, #48	; 0x30
 8012cf2:	d0fa      	beq.n	8012cea <_dtoa_r+0xa62>
 8012cf4:	e6f7      	b.n	8012ae6 <_dtoa_r+0x85e>
 8012cf6:	9a01      	ldr	r2, [sp, #4]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d1a4      	bne.n	8012c46 <_dtoa_r+0x9be>
 8012cfc:	f10b 0b01 	add.w	fp, fp, #1
 8012d00:	2331      	movs	r3, #49	; 0x31
 8012d02:	e778      	b.n	8012bf6 <_dtoa_r+0x96e>
 8012d04:	4b14      	ldr	r3, [pc, #80]	; (8012d58 <_dtoa_r+0xad0>)
 8012d06:	f7ff bb2a 	b.w	801235e <_dtoa_r+0xd6>
 8012d0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f47f ab05 	bne.w	801231c <_dtoa_r+0x94>
 8012d12:	4b12      	ldr	r3, [pc, #72]	; (8012d5c <_dtoa_r+0xad4>)
 8012d14:	f7ff bb23 	b.w	801235e <_dtoa_r+0xd6>
 8012d18:	f1ba 0f00 	cmp.w	sl, #0
 8012d1c:	dc03      	bgt.n	8012d26 <_dtoa_r+0xa9e>
 8012d1e:	9b06      	ldr	r3, [sp, #24]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	f73f aec8 	bgt.w	8012ab6 <_dtoa_r+0x82e>
 8012d26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012d2a:	4621      	mov	r1, r4
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f7ff fa21 	bl	8012174 <quorem>
 8012d32:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012d36:	f808 3b01 	strb.w	r3, [r8], #1
 8012d3a:	9a01      	ldr	r2, [sp, #4]
 8012d3c:	eba8 0202 	sub.w	r2, r8, r2
 8012d40:	4592      	cmp	sl, r2
 8012d42:	ddb7      	ble.n	8012cb4 <_dtoa_r+0xa2c>
 8012d44:	4629      	mov	r1, r5
 8012d46:	2300      	movs	r3, #0
 8012d48:	220a      	movs	r2, #10
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	f000 f8b6 	bl	8012ebc <__multadd>
 8012d50:	4605      	mov	r5, r0
 8012d52:	e7ea      	b.n	8012d2a <_dtoa_r+0xaa2>
 8012d54:	080157a5 	.word	0x080157a5
 8012d58:	08015700 	.word	0x08015700
 8012d5c:	08015729 	.word	0x08015729

08012d60 <_free_r>:
 8012d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d62:	2900      	cmp	r1, #0
 8012d64:	d044      	beq.n	8012df0 <_free_r+0x90>
 8012d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d6a:	9001      	str	r0, [sp, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8012d72:	bfb8      	it	lt
 8012d74:	18e4      	addlt	r4, r4, r3
 8012d76:	f7fe f95d 	bl	8011034 <__malloc_lock>
 8012d7a:	4a1e      	ldr	r2, [pc, #120]	; (8012df4 <_free_r+0x94>)
 8012d7c:	9801      	ldr	r0, [sp, #4]
 8012d7e:	6813      	ldr	r3, [r2, #0]
 8012d80:	b933      	cbnz	r3, 8012d90 <_free_r+0x30>
 8012d82:	6063      	str	r3, [r4, #4]
 8012d84:	6014      	str	r4, [r2, #0]
 8012d86:	b003      	add	sp, #12
 8012d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d8c:	f7fe b958 	b.w	8011040 <__malloc_unlock>
 8012d90:	42a3      	cmp	r3, r4
 8012d92:	d908      	bls.n	8012da6 <_free_r+0x46>
 8012d94:	6825      	ldr	r5, [r4, #0]
 8012d96:	1961      	adds	r1, r4, r5
 8012d98:	428b      	cmp	r3, r1
 8012d9a:	bf01      	itttt	eq
 8012d9c:	6819      	ldreq	r1, [r3, #0]
 8012d9e:	685b      	ldreq	r3, [r3, #4]
 8012da0:	1949      	addeq	r1, r1, r5
 8012da2:	6021      	streq	r1, [r4, #0]
 8012da4:	e7ed      	b.n	8012d82 <_free_r+0x22>
 8012da6:	461a      	mov	r2, r3
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	b10b      	cbz	r3, 8012db0 <_free_r+0x50>
 8012dac:	42a3      	cmp	r3, r4
 8012dae:	d9fa      	bls.n	8012da6 <_free_r+0x46>
 8012db0:	6811      	ldr	r1, [r2, #0]
 8012db2:	1855      	adds	r5, r2, r1
 8012db4:	42a5      	cmp	r5, r4
 8012db6:	d10b      	bne.n	8012dd0 <_free_r+0x70>
 8012db8:	6824      	ldr	r4, [r4, #0]
 8012dba:	4421      	add	r1, r4
 8012dbc:	1854      	adds	r4, r2, r1
 8012dbe:	42a3      	cmp	r3, r4
 8012dc0:	6011      	str	r1, [r2, #0]
 8012dc2:	d1e0      	bne.n	8012d86 <_free_r+0x26>
 8012dc4:	681c      	ldr	r4, [r3, #0]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	6053      	str	r3, [r2, #4]
 8012dca:	440c      	add	r4, r1
 8012dcc:	6014      	str	r4, [r2, #0]
 8012dce:	e7da      	b.n	8012d86 <_free_r+0x26>
 8012dd0:	d902      	bls.n	8012dd8 <_free_r+0x78>
 8012dd2:	230c      	movs	r3, #12
 8012dd4:	6003      	str	r3, [r0, #0]
 8012dd6:	e7d6      	b.n	8012d86 <_free_r+0x26>
 8012dd8:	6825      	ldr	r5, [r4, #0]
 8012dda:	1961      	adds	r1, r4, r5
 8012ddc:	428b      	cmp	r3, r1
 8012dde:	bf04      	itt	eq
 8012de0:	6819      	ldreq	r1, [r3, #0]
 8012de2:	685b      	ldreq	r3, [r3, #4]
 8012de4:	6063      	str	r3, [r4, #4]
 8012de6:	bf04      	itt	eq
 8012de8:	1949      	addeq	r1, r1, r5
 8012dea:	6021      	streq	r1, [r4, #0]
 8012dec:	6054      	str	r4, [r2, #4]
 8012dee:	e7ca      	b.n	8012d86 <_free_r+0x26>
 8012df0:	b003      	add	sp, #12
 8012df2:	bd30      	pop	{r4, r5, pc}
 8012df4:	24005554 	.word	0x24005554

08012df8 <_Balloc>:
 8012df8:	b570      	push	{r4, r5, r6, lr}
 8012dfa:	69c6      	ldr	r6, [r0, #28]
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	460d      	mov	r5, r1
 8012e00:	b976      	cbnz	r6, 8012e20 <_Balloc+0x28>
 8012e02:	2010      	movs	r0, #16
 8012e04:	f7fe f866 	bl	8010ed4 <malloc>
 8012e08:	4602      	mov	r2, r0
 8012e0a:	61e0      	str	r0, [r4, #28]
 8012e0c:	b920      	cbnz	r0, 8012e18 <_Balloc+0x20>
 8012e0e:	4b18      	ldr	r3, [pc, #96]	; (8012e70 <_Balloc+0x78>)
 8012e10:	4818      	ldr	r0, [pc, #96]	; (8012e74 <_Balloc+0x7c>)
 8012e12:	216b      	movs	r1, #107	; 0x6b
 8012e14:	f001 fd2c 	bl	8014870 <__assert_func>
 8012e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e1c:	6006      	str	r6, [r0, #0]
 8012e1e:	60c6      	str	r6, [r0, #12]
 8012e20:	69e6      	ldr	r6, [r4, #28]
 8012e22:	68f3      	ldr	r3, [r6, #12]
 8012e24:	b183      	cbz	r3, 8012e48 <_Balloc+0x50>
 8012e26:	69e3      	ldr	r3, [r4, #28]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e2e:	b9b8      	cbnz	r0, 8012e60 <_Balloc+0x68>
 8012e30:	2101      	movs	r1, #1
 8012e32:	fa01 f605 	lsl.w	r6, r1, r5
 8012e36:	1d72      	adds	r2, r6, #5
 8012e38:	0092      	lsls	r2, r2, #2
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f001 fd36 	bl	80148ac <_calloc_r>
 8012e40:	b160      	cbz	r0, 8012e5c <_Balloc+0x64>
 8012e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e46:	e00e      	b.n	8012e66 <_Balloc+0x6e>
 8012e48:	2221      	movs	r2, #33	; 0x21
 8012e4a:	2104      	movs	r1, #4
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f001 fd2d 	bl	80148ac <_calloc_r>
 8012e52:	69e3      	ldr	r3, [r4, #28]
 8012e54:	60f0      	str	r0, [r6, #12]
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d1e4      	bne.n	8012e26 <_Balloc+0x2e>
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	bd70      	pop	{r4, r5, r6, pc}
 8012e60:	6802      	ldr	r2, [r0, #0]
 8012e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e66:	2300      	movs	r3, #0
 8012e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e6c:	e7f7      	b.n	8012e5e <_Balloc+0x66>
 8012e6e:	bf00      	nop
 8012e70:	08015736 	.word	0x08015736
 8012e74:	080157b6 	.word	0x080157b6

08012e78 <_Bfree>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	69c6      	ldr	r6, [r0, #28]
 8012e7c:	4605      	mov	r5, r0
 8012e7e:	460c      	mov	r4, r1
 8012e80:	b976      	cbnz	r6, 8012ea0 <_Bfree+0x28>
 8012e82:	2010      	movs	r0, #16
 8012e84:	f7fe f826 	bl	8010ed4 <malloc>
 8012e88:	4602      	mov	r2, r0
 8012e8a:	61e8      	str	r0, [r5, #28]
 8012e8c:	b920      	cbnz	r0, 8012e98 <_Bfree+0x20>
 8012e8e:	4b09      	ldr	r3, [pc, #36]	; (8012eb4 <_Bfree+0x3c>)
 8012e90:	4809      	ldr	r0, [pc, #36]	; (8012eb8 <_Bfree+0x40>)
 8012e92:	218f      	movs	r1, #143	; 0x8f
 8012e94:	f001 fcec 	bl	8014870 <__assert_func>
 8012e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e9c:	6006      	str	r6, [r0, #0]
 8012e9e:	60c6      	str	r6, [r0, #12]
 8012ea0:	b13c      	cbz	r4, 8012eb2 <_Bfree+0x3a>
 8012ea2:	69eb      	ldr	r3, [r5, #28]
 8012ea4:	6862      	ldr	r2, [r4, #4]
 8012ea6:	68db      	ldr	r3, [r3, #12]
 8012ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012eac:	6021      	str	r1, [r4, #0]
 8012eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}
 8012eb4:	08015736 	.word	0x08015736
 8012eb8:	080157b6 	.word	0x080157b6

08012ebc <__multadd>:
 8012ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec0:	690d      	ldr	r5, [r1, #16]
 8012ec2:	4607      	mov	r7, r0
 8012ec4:	460c      	mov	r4, r1
 8012ec6:	461e      	mov	r6, r3
 8012ec8:	f101 0c14 	add.w	ip, r1, #20
 8012ecc:	2000      	movs	r0, #0
 8012ece:	f8dc 3000 	ldr.w	r3, [ip]
 8012ed2:	b299      	uxth	r1, r3
 8012ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8012ed8:	0c1e      	lsrs	r6, r3, #16
 8012eda:	0c0b      	lsrs	r3, r1, #16
 8012edc:	fb02 3306 	mla	r3, r2, r6, r3
 8012ee0:	b289      	uxth	r1, r1
 8012ee2:	3001      	adds	r0, #1
 8012ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ee8:	4285      	cmp	r5, r0
 8012eea:	f84c 1b04 	str.w	r1, [ip], #4
 8012eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012ef2:	dcec      	bgt.n	8012ece <__multadd+0x12>
 8012ef4:	b30e      	cbz	r6, 8012f3a <__multadd+0x7e>
 8012ef6:	68a3      	ldr	r3, [r4, #8]
 8012ef8:	42ab      	cmp	r3, r5
 8012efa:	dc19      	bgt.n	8012f30 <__multadd+0x74>
 8012efc:	6861      	ldr	r1, [r4, #4]
 8012efe:	4638      	mov	r0, r7
 8012f00:	3101      	adds	r1, #1
 8012f02:	f7ff ff79 	bl	8012df8 <_Balloc>
 8012f06:	4680      	mov	r8, r0
 8012f08:	b928      	cbnz	r0, 8012f16 <__multadd+0x5a>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	4b0c      	ldr	r3, [pc, #48]	; (8012f40 <__multadd+0x84>)
 8012f0e:	480d      	ldr	r0, [pc, #52]	; (8012f44 <__multadd+0x88>)
 8012f10:	21ba      	movs	r1, #186	; 0xba
 8012f12:	f001 fcad 	bl	8014870 <__assert_func>
 8012f16:	6922      	ldr	r2, [r4, #16]
 8012f18:	3202      	adds	r2, #2
 8012f1a:	f104 010c 	add.w	r1, r4, #12
 8012f1e:	0092      	lsls	r2, r2, #2
 8012f20:	300c      	adds	r0, #12
 8012f22:	f7ff f912 	bl	801214a <memcpy>
 8012f26:	4621      	mov	r1, r4
 8012f28:	4638      	mov	r0, r7
 8012f2a:	f7ff ffa5 	bl	8012e78 <_Bfree>
 8012f2e:	4644      	mov	r4, r8
 8012f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012f34:	3501      	adds	r5, #1
 8012f36:	615e      	str	r6, [r3, #20]
 8012f38:	6125      	str	r5, [r4, #16]
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f40:	080157a5 	.word	0x080157a5
 8012f44:	080157b6 	.word	0x080157b6

08012f48 <__s2b>:
 8012f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f4c:	460c      	mov	r4, r1
 8012f4e:	4615      	mov	r5, r2
 8012f50:	461f      	mov	r7, r3
 8012f52:	2209      	movs	r2, #9
 8012f54:	3308      	adds	r3, #8
 8012f56:	4606      	mov	r6, r0
 8012f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	2201      	movs	r2, #1
 8012f60:	429a      	cmp	r2, r3
 8012f62:	db09      	blt.n	8012f78 <__s2b+0x30>
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff ff47 	bl	8012df8 <_Balloc>
 8012f6a:	b940      	cbnz	r0, 8012f7e <__s2b+0x36>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	4b19      	ldr	r3, [pc, #100]	; (8012fd4 <__s2b+0x8c>)
 8012f70:	4819      	ldr	r0, [pc, #100]	; (8012fd8 <__s2b+0x90>)
 8012f72:	21d3      	movs	r1, #211	; 0xd3
 8012f74:	f001 fc7c 	bl	8014870 <__assert_func>
 8012f78:	0052      	lsls	r2, r2, #1
 8012f7a:	3101      	adds	r1, #1
 8012f7c:	e7f0      	b.n	8012f60 <__s2b+0x18>
 8012f7e:	9b08      	ldr	r3, [sp, #32]
 8012f80:	6143      	str	r3, [r0, #20]
 8012f82:	2d09      	cmp	r5, #9
 8012f84:	f04f 0301 	mov.w	r3, #1
 8012f88:	6103      	str	r3, [r0, #16]
 8012f8a:	dd16      	ble.n	8012fba <__s2b+0x72>
 8012f8c:	f104 0909 	add.w	r9, r4, #9
 8012f90:	46c8      	mov	r8, r9
 8012f92:	442c      	add	r4, r5
 8012f94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012f98:	4601      	mov	r1, r0
 8012f9a:	3b30      	subs	r3, #48	; 0x30
 8012f9c:	220a      	movs	r2, #10
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	f7ff ff8c 	bl	8012ebc <__multadd>
 8012fa4:	45a0      	cmp	r8, r4
 8012fa6:	d1f5      	bne.n	8012f94 <__s2b+0x4c>
 8012fa8:	f1a5 0408 	sub.w	r4, r5, #8
 8012fac:	444c      	add	r4, r9
 8012fae:	1b2d      	subs	r5, r5, r4
 8012fb0:	1963      	adds	r3, r4, r5
 8012fb2:	42bb      	cmp	r3, r7
 8012fb4:	db04      	blt.n	8012fc0 <__s2b+0x78>
 8012fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fba:	340a      	adds	r4, #10
 8012fbc:	2509      	movs	r5, #9
 8012fbe:	e7f6      	b.n	8012fae <__s2b+0x66>
 8012fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012fc4:	4601      	mov	r1, r0
 8012fc6:	3b30      	subs	r3, #48	; 0x30
 8012fc8:	220a      	movs	r2, #10
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f7ff ff76 	bl	8012ebc <__multadd>
 8012fd0:	e7ee      	b.n	8012fb0 <__s2b+0x68>
 8012fd2:	bf00      	nop
 8012fd4:	080157a5 	.word	0x080157a5
 8012fd8:	080157b6 	.word	0x080157b6

08012fdc <__hi0bits>:
 8012fdc:	0c03      	lsrs	r3, r0, #16
 8012fde:	041b      	lsls	r3, r3, #16
 8012fe0:	b9d3      	cbnz	r3, 8013018 <__hi0bits+0x3c>
 8012fe2:	0400      	lsls	r0, r0, #16
 8012fe4:	2310      	movs	r3, #16
 8012fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012fea:	bf04      	itt	eq
 8012fec:	0200      	lsleq	r0, r0, #8
 8012fee:	3308      	addeq	r3, #8
 8012ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ff4:	bf04      	itt	eq
 8012ff6:	0100      	lsleq	r0, r0, #4
 8012ff8:	3304      	addeq	r3, #4
 8012ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ffe:	bf04      	itt	eq
 8013000:	0080      	lsleq	r0, r0, #2
 8013002:	3302      	addeq	r3, #2
 8013004:	2800      	cmp	r0, #0
 8013006:	db05      	blt.n	8013014 <__hi0bits+0x38>
 8013008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801300c:	f103 0301 	add.w	r3, r3, #1
 8013010:	bf08      	it	eq
 8013012:	2320      	moveq	r3, #32
 8013014:	4618      	mov	r0, r3
 8013016:	4770      	bx	lr
 8013018:	2300      	movs	r3, #0
 801301a:	e7e4      	b.n	8012fe6 <__hi0bits+0xa>

0801301c <__lo0bits>:
 801301c:	6803      	ldr	r3, [r0, #0]
 801301e:	f013 0207 	ands.w	r2, r3, #7
 8013022:	d00c      	beq.n	801303e <__lo0bits+0x22>
 8013024:	07d9      	lsls	r1, r3, #31
 8013026:	d422      	bmi.n	801306e <__lo0bits+0x52>
 8013028:	079a      	lsls	r2, r3, #30
 801302a:	bf49      	itett	mi
 801302c:	085b      	lsrmi	r3, r3, #1
 801302e:	089b      	lsrpl	r3, r3, #2
 8013030:	6003      	strmi	r3, [r0, #0]
 8013032:	2201      	movmi	r2, #1
 8013034:	bf5c      	itt	pl
 8013036:	6003      	strpl	r3, [r0, #0]
 8013038:	2202      	movpl	r2, #2
 801303a:	4610      	mov	r0, r2
 801303c:	4770      	bx	lr
 801303e:	b299      	uxth	r1, r3
 8013040:	b909      	cbnz	r1, 8013046 <__lo0bits+0x2a>
 8013042:	0c1b      	lsrs	r3, r3, #16
 8013044:	2210      	movs	r2, #16
 8013046:	b2d9      	uxtb	r1, r3
 8013048:	b909      	cbnz	r1, 801304e <__lo0bits+0x32>
 801304a:	3208      	adds	r2, #8
 801304c:	0a1b      	lsrs	r3, r3, #8
 801304e:	0719      	lsls	r1, r3, #28
 8013050:	bf04      	itt	eq
 8013052:	091b      	lsreq	r3, r3, #4
 8013054:	3204      	addeq	r2, #4
 8013056:	0799      	lsls	r1, r3, #30
 8013058:	bf04      	itt	eq
 801305a:	089b      	lsreq	r3, r3, #2
 801305c:	3202      	addeq	r2, #2
 801305e:	07d9      	lsls	r1, r3, #31
 8013060:	d403      	bmi.n	801306a <__lo0bits+0x4e>
 8013062:	085b      	lsrs	r3, r3, #1
 8013064:	f102 0201 	add.w	r2, r2, #1
 8013068:	d003      	beq.n	8013072 <__lo0bits+0x56>
 801306a:	6003      	str	r3, [r0, #0]
 801306c:	e7e5      	b.n	801303a <__lo0bits+0x1e>
 801306e:	2200      	movs	r2, #0
 8013070:	e7e3      	b.n	801303a <__lo0bits+0x1e>
 8013072:	2220      	movs	r2, #32
 8013074:	e7e1      	b.n	801303a <__lo0bits+0x1e>
	...

08013078 <__i2b>:
 8013078:	b510      	push	{r4, lr}
 801307a:	460c      	mov	r4, r1
 801307c:	2101      	movs	r1, #1
 801307e:	f7ff febb 	bl	8012df8 <_Balloc>
 8013082:	4602      	mov	r2, r0
 8013084:	b928      	cbnz	r0, 8013092 <__i2b+0x1a>
 8013086:	4b05      	ldr	r3, [pc, #20]	; (801309c <__i2b+0x24>)
 8013088:	4805      	ldr	r0, [pc, #20]	; (80130a0 <__i2b+0x28>)
 801308a:	f240 1145 	movw	r1, #325	; 0x145
 801308e:	f001 fbef 	bl	8014870 <__assert_func>
 8013092:	2301      	movs	r3, #1
 8013094:	6144      	str	r4, [r0, #20]
 8013096:	6103      	str	r3, [r0, #16]
 8013098:	bd10      	pop	{r4, pc}
 801309a:	bf00      	nop
 801309c:	080157a5 	.word	0x080157a5
 80130a0:	080157b6 	.word	0x080157b6

080130a4 <__multiply>:
 80130a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a8:	4691      	mov	r9, r2
 80130aa:	690a      	ldr	r2, [r1, #16]
 80130ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	bfb8      	it	lt
 80130b4:	460b      	movlt	r3, r1
 80130b6:	460c      	mov	r4, r1
 80130b8:	bfbc      	itt	lt
 80130ba:	464c      	movlt	r4, r9
 80130bc:	4699      	movlt	r9, r3
 80130be:	6927      	ldr	r7, [r4, #16]
 80130c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80130c4:	68a3      	ldr	r3, [r4, #8]
 80130c6:	6861      	ldr	r1, [r4, #4]
 80130c8:	eb07 060a 	add.w	r6, r7, sl
 80130cc:	42b3      	cmp	r3, r6
 80130ce:	b085      	sub	sp, #20
 80130d0:	bfb8      	it	lt
 80130d2:	3101      	addlt	r1, #1
 80130d4:	f7ff fe90 	bl	8012df8 <_Balloc>
 80130d8:	b930      	cbnz	r0, 80130e8 <__multiply+0x44>
 80130da:	4602      	mov	r2, r0
 80130dc:	4b44      	ldr	r3, [pc, #272]	; (80131f0 <__multiply+0x14c>)
 80130de:	4845      	ldr	r0, [pc, #276]	; (80131f4 <__multiply+0x150>)
 80130e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80130e4:	f001 fbc4 	bl	8014870 <__assert_func>
 80130e8:	f100 0514 	add.w	r5, r0, #20
 80130ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80130f0:	462b      	mov	r3, r5
 80130f2:	2200      	movs	r2, #0
 80130f4:	4543      	cmp	r3, r8
 80130f6:	d321      	bcc.n	801313c <__multiply+0x98>
 80130f8:	f104 0314 	add.w	r3, r4, #20
 80130fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013100:	f109 0314 	add.w	r3, r9, #20
 8013104:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013108:	9202      	str	r2, [sp, #8]
 801310a:	1b3a      	subs	r2, r7, r4
 801310c:	3a15      	subs	r2, #21
 801310e:	f022 0203 	bic.w	r2, r2, #3
 8013112:	3204      	adds	r2, #4
 8013114:	f104 0115 	add.w	r1, r4, #21
 8013118:	428f      	cmp	r7, r1
 801311a:	bf38      	it	cc
 801311c:	2204      	movcc	r2, #4
 801311e:	9201      	str	r2, [sp, #4]
 8013120:	9a02      	ldr	r2, [sp, #8]
 8013122:	9303      	str	r3, [sp, #12]
 8013124:	429a      	cmp	r2, r3
 8013126:	d80c      	bhi.n	8013142 <__multiply+0x9e>
 8013128:	2e00      	cmp	r6, #0
 801312a:	dd03      	ble.n	8013134 <__multiply+0x90>
 801312c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013130:	2b00      	cmp	r3, #0
 8013132:	d05b      	beq.n	80131ec <__multiply+0x148>
 8013134:	6106      	str	r6, [r0, #16]
 8013136:	b005      	add	sp, #20
 8013138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801313c:	f843 2b04 	str.w	r2, [r3], #4
 8013140:	e7d8      	b.n	80130f4 <__multiply+0x50>
 8013142:	f8b3 a000 	ldrh.w	sl, [r3]
 8013146:	f1ba 0f00 	cmp.w	sl, #0
 801314a:	d024      	beq.n	8013196 <__multiply+0xf2>
 801314c:	f104 0e14 	add.w	lr, r4, #20
 8013150:	46a9      	mov	r9, r5
 8013152:	f04f 0c00 	mov.w	ip, #0
 8013156:	f85e 2b04 	ldr.w	r2, [lr], #4
 801315a:	f8d9 1000 	ldr.w	r1, [r9]
 801315e:	fa1f fb82 	uxth.w	fp, r2
 8013162:	b289      	uxth	r1, r1
 8013164:	fb0a 110b 	mla	r1, sl, fp, r1
 8013168:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801316c:	f8d9 2000 	ldr.w	r2, [r9]
 8013170:	4461      	add	r1, ip
 8013172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013176:	fb0a c20b 	mla	r2, sl, fp, ip
 801317a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801317e:	b289      	uxth	r1, r1
 8013180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013184:	4577      	cmp	r7, lr
 8013186:	f849 1b04 	str.w	r1, [r9], #4
 801318a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801318e:	d8e2      	bhi.n	8013156 <__multiply+0xb2>
 8013190:	9a01      	ldr	r2, [sp, #4]
 8013192:	f845 c002 	str.w	ip, [r5, r2]
 8013196:	9a03      	ldr	r2, [sp, #12]
 8013198:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801319c:	3304      	adds	r3, #4
 801319e:	f1b9 0f00 	cmp.w	r9, #0
 80131a2:	d021      	beq.n	80131e8 <__multiply+0x144>
 80131a4:	6829      	ldr	r1, [r5, #0]
 80131a6:	f104 0c14 	add.w	ip, r4, #20
 80131aa:	46ae      	mov	lr, r5
 80131ac:	f04f 0a00 	mov.w	sl, #0
 80131b0:	f8bc b000 	ldrh.w	fp, [ip]
 80131b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80131b8:	fb09 220b 	mla	r2, r9, fp, r2
 80131bc:	4452      	add	r2, sl
 80131be:	b289      	uxth	r1, r1
 80131c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80131c4:	f84e 1b04 	str.w	r1, [lr], #4
 80131c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80131cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80131d0:	f8be 1000 	ldrh.w	r1, [lr]
 80131d4:	fb09 110a 	mla	r1, r9, sl, r1
 80131d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80131dc:	4567      	cmp	r7, ip
 80131de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80131e2:	d8e5      	bhi.n	80131b0 <__multiply+0x10c>
 80131e4:	9a01      	ldr	r2, [sp, #4]
 80131e6:	50a9      	str	r1, [r5, r2]
 80131e8:	3504      	adds	r5, #4
 80131ea:	e799      	b.n	8013120 <__multiply+0x7c>
 80131ec:	3e01      	subs	r6, #1
 80131ee:	e79b      	b.n	8013128 <__multiply+0x84>
 80131f0:	080157a5 	.word	0x080157a5
 80131f4:	080157b6 	.word	0x080157b6

080131f8 <__pow5mult>:
 80131f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131fc:	4615      	mov	r5, r2
 80131fe:	f012 0203 	ands.w	r2, r2, #3
 8013202:	4606      	mov	r6, r0
 8013204:	460f      	mov	r7, r1
 8013206:	d007      	beq.n	8013218 <__pow5mult+0x20>
 8013208:	4c25      	ldr	r4, [pc, #148]	; (80132a0 <__pow5mult+0xa8>)
 801320a:	3a01      	subs	r2, #1
 801320c:	2300      	movs	r3, #0
 801320e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013212:	f7ff fe53 	bl	8012ebc <__multadd>
 8013216:	4607      	mov	r7, r0
 8013218:	10ad      	asrs	r5, r5, #2
 801321a:	d03d      	beq.n	8013298 <__pow5mult+0xa0>
 801321c:	69f4      	ldr	r4, [r6, #28]
 801321e:	b97c      	cbnz	r4, 8013240 <__pow5mult+0x48>
 8013220:	2010      	movs	r0, #16
 8013222:	f7fd fe57 	bl	8010ed4 <malloc>
 8013226:	4602      	mov	r2, r0
 8013228:	61f0      	str	r0, [r6, #28]
 801322a:	b928      	cbnz	r0, 8013238 <__pow5mult+0x40>
 801322c:	4b1d      	ldr	r3, [pc, #116]	; (80132a4 <__pow5mult+0xac>)
 801322e:	481e      	ldr	r0, [pc, #120]	; (80132a8 <__pow5mult+0xb0>)
 8013230:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013234:	f001 fb1c 	bl	8014870 <__assert_func>
 8013238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801323c:	6004      	str	r4, [r0, #0]
 801323e:	60c4      	str	r4, [r0, #12]
 8013240:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013248:	b94c      	cbnz	r4, 801325e <__pow5mult+0x66>
 801324a:	f240 2171 	movw	r1, #625	; 0x271
 801324e:	4630      	mov	r0, r6
 8013250:	f7ff ff12 	bl	8013078 <__i2b>
 8013254:	2300      	movs	r3, #0
 8013256:	f8c8 0008 	str.w	r0, [r8, #8]
 801325a:	4604      	mov	r4, r0
 801325c:	6003      	str	r3, [r0, #0]
 801325e:	f04f 0900 	mov.w	r9, #0
 8013262:	07eb      	lsls	r3, r5, #31
 8013264:	d50a      	bpl.n	801327c <__pow5mult+0x84>
 8013266:	4639      	mov	r1, r7
 8013268:	4622      	mov	r2, r4
 801326a:	4630      	mov	r0, r6
 801326c:	f7ff ff1a 	bl	80130a4 <__multiply>
 8013270:	4639      	mov	r1, r7
 8013272:	4680      	mov	r8, r0
 8013274:	4630      	mov	r0, r6
 8013276:	f7ff fdff 	bl	8012e78 <_Bfree>
 801327a:	4647      	mov	r7, r8
 801327c:	106d      	asrs	r5, r5, #1
 801327e:	d00b      	beq.n	8013298 <__pow5mult+0xa0>
 8013280:	6820      	ldr	r0, [r4, #0]
 8013282:	b938      	cbnz	r0, 8013294 <__pow5mult+0x9c>
 8013284:	4622      	mov	r2, r4
 8013286:	4621      	mov	r1, r4
 8013288:	4630      	mov	r0, r6
 801328a:	f7ff ff0b 	bl	80130a4 <__multiply>
 801328e:	6020      	str	r0, [r4, #0]
 8013290:	f8c0 9000 	str.w	r9, [r0]
 8013294:	4604      	mov	r4, r0
 8013296:	e7e4      	b.n	8013262 <__pow5mult+0x6a>
 8013298:	4638      	mov	r0, r7
 801329a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801329e:	bf00      	nop
 80132a0:	08015900 	.word	0x08015900
 80132a4:	08015736 	.word	0x08015736
 80132a8:	080157b6 	.word	0x080157b6

080132ac <__lshift>:
 80132ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132b0:	460c      	mov	r4, r1
 80132b2:	6849      	ldr	r1, [r1, #4]
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132ba:	68a3      	ldr	r3, [r4, #8]
 80132bc:	4607      	mov	r7, r0
 80132be:	4691      	mov	r9, r2
 80132c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132c4:	f108 0601 	add.w	r6, r8, #1
 80132c8:	42b3      	cmp	r3, r6
 80132ca:	db0b      	blt.n	80132e4 <__lshift+0x38>
 80132cc:	4638      	mov	r0, r7
 80132ce:	f7ff fd93 	bl	8012df8 <_Balloc>
 80132d2:	4605      	mov	r5, r0
 80132d4:	b948      	cbnz	r0, 80132ea <__lshift+0x3e>
 80132d6:	4602      	mov	r2, r0
 80132d8:	4b28      	ldr	r3, [pc, #160]	; (801337c <__lshift+0xd0>)
 80132da:	4829      	ldr	r0, [pc, #164]	; (8013380 <__lshift+0xd4>)
 80132dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80132e0:	f001 fac6 	bl	8014870 <__assert_func>
 80132e4:	3101      	adds	r1, #1
 80132e6:	005b      	lsls	r3, r3, #1
 80132e8:	e7ee      	b.n	80132c8 <__lshift+0x1c>
 80132ea:	2300      	movs	r3, #0
 80132ec:	f100 0114 	add.w	r1, r0, #20
 80132f0:	f100 0210 	add.w	r2, r0, #16
 80132f4:	4618      	mov	r0, r3
 80132f6:	4553      	cmp	r3, sl
 80132f8:	db33      	blt.n	8013362 <__lshift+0xb6>
 80132fa:	6920      	ldr	r0, [r4, #16]
 80132fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013300:	f104 0314 	add.w	r3, r4, #20
 8013304:	f019 091f 	ands.w	r9, r9, #31
 8013308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801330c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013310:	d02b      	beq.n	801336a <__lshift+0xbe>
 8013312:	f1c9 0e20 	rsb	lr, r9, #32
 8013316:	468a      	mov	sl, r1
 8013318:	2200      	movs	r2, #0
 801331a:	6818      	ldr	r0, [r3, #0]
 801331c:	fa00 f009 	lsl.w	r0, r0, r9
 8013320:	4310      	orrs	r0, r2
 8013322:	f84a 0b04 	str.w	r0, [sl], #4
 8013326:	f853 2b04 	ldr.w	r2, [r3], #4
 801332a:	459c      	cmp	ip, r3
 801332c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013330:	d8f3      	bhi.n	801331a <__lshift+0x6e>
 8013332:	ebac 0304 	sub.w	r3, ip, r4
 8013336:	3b15      	subs	r3, #21
 8013338:	f023 0303 	bic.w	r3, r3, #3
 801333c:	3304      	adds	r3, #4
 801333e:	f104 0015 	add.w	r0, r4, #21
 8013342:	4584      	cmp	ip, r0
 8013344:	bf38      	it	cc
 8013346:	2304      	movcc	r3, #4
 8013348:	50ca      	str	r2, [r1, r3]
 801334a:	b10a      	cbz	r2, 8013350 <__lshift+0xa4>
 801334c:	f108 0602 	add.w	r6, r8, #2
 8013350:	3e01      	subs	r6, #1
 8013352:	4638      	mov	r0, r7
 8013354:	612e      	str	r6, [r5, #16]
 8013356:	4621      	mov	r1, r4
 8013358:	f7ff fd8e 	bl	8012e78 <_Bfree>
 801335c:	4628      	mov	r0, r5
 801335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013362:	f842 0f04 	str.w	r0, [r2, #4]!
 8013366:	3301      	adds	r3, #1
 8013368:	e7c5      	b.n	80132f6 <__lshift+0x4a>
 801336a:	3904      	subs	r1, #4
 801336c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013370:	f841 2f04 	str.w	r2, [r1, #4]!
 8013374:	459c      	cmp	ip, r3
 8013376:	d8f9      	bhi.n	801336c <__lshift+0xc0>
 8013378:	e7ea      	b.n	8013350 <__lshift+0xa4>
 801337a:	bf00      	nop
 801337c:	080157a5 	.word	0x080157a5
 8013380:	080157b6 	.word	0x080157b6

08013384 <__mcmp>:
 8013384:	b530      	push	{r4, r5, lr}
 8013386:	6902      	ldr	r2, [r0, #16]
 8013388:	690c      	ldr	r4, [r1, #16]
 801338a:	1b12      	subs	r2, r2, r4
 801338c:	d10e      	bne.n	80133ac <__mcmp+0x28>
 801338e:	f100 0314 	add.w	r3, r0, #20
 8013392:	3114      	adds	r1, #20
 8013394:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013398:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801339c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80133a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80133a4:	42a5      	cmp	r5, r4
 80133a6:	d003      	beq.n	80133b0 <__mcmp+0x2c>
 80133a8:	d305      	bcc.n	80133b6 <__mcmp+0x32>
 80133aa:	2201      	movs	r2, #1
 80133ac:	4610      	mov	r0, r2
 80133ae:	bd30      	pop	{r4, r5, pc}
 80133b0:	4283      	cmp	r3, r0
 80133b2:	d3f3      	bcc.n	801339c <__mcmp+0x18>
 80133b4:	e7fa      	b.n	80133ac <__mcmp+0x28>
 80133b6:	f04f 32ff 	mov.w	r2, #4294967295
 80133ba:	e7f7      	b.n	80133ac <__mcmp+0x28>

080133bc <__mdiff>:
 80133bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c0:	460c      	mov	r4, r1
 80133c2:	4606      	mov	r6, r0
 80133c4:	4611      	mov	r1, r2
 80133c6:	4620      	mov	r0, r4
 80133c8:	4690      	mov	r8, r2
 80133ca:	f7ff ffdb 	bl	8013384 <__mcmp>
 80133ce:	1e05      	subs	r5, r0, #0
 80133d0:	d110      	bne.n	80133f4 <__mdiff+0x38>
 80133d2:	4629      	mov	r1, r5
 80133d4:	4630      	mov	r0, r6
 80133d6:	f7ff fd0f 	bl	8012df8 <_Balloc>
 80133da:	b930      	cbnz	r0, 80133ea <__mdiff+0x2e>
 80133dc:	4b3a      	ldr	r3, [pc, #232]	; (80134c8 <__mdiff+0x10c>)
 80133de:	4602      	mov	r2, r0
 80133e0:	f240 2137 	movw	r1, #567	; 0x237
 80133e4:	4839      	ldr	r0, [pc, #228]	; (80134cc <__mdiff+0x110>)
 80133e6:	f001 fa43 	bl	8014870 <__assert_func>
 80133ea:	2301      	movs	r3, #1
 80133ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80133f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f4:	bfa4      	itt	ge
 80133f6:	4643      	movge	r3, r8
 80133f8:	46a0      	movge	r8, r4
 80133fa:	4630      	mov	r0, r6
 80133fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013400:	bfa6      	itte	ge
 8013402:	461c      	movge	r4, r3
 8013404:	2500      	movge	r5, #0
 8013406:	2501      	movlt	r5, #1
 8013408:	f7ff fcf6 	bl	8012df8 <_Balloc>
 801340c:	b920      	cbnz	r0, 8013418 <__mdiff+0x5c>
 801340e:	4b2e      	ldr	r3, [pc, #184]	; (80134c8 <__mdiff+0x10c>)
 8013410:	4602      	mov	r2, r0
 8013412:	f240 2145 	movw	r1, #581	; 0x245
 8013416:	e7e5      	b.n	80133e4 <__mdiff+0x28>
 8013418:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801341c:	6926      	ldr	r6, [r4, #16]
 801341e:	60c5      	str	r5, [r0, #12]
 8013420:	f104 0914 	add.w	r9, r4, #20
 8013424:	f108 0514 	add.w	r5, r8, #20
 8013428:	f100 0e14 	add.w	lr, r0, #20
 801342c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013430:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013434:	f108 0210 	add.w	r2, r8, #16
 8013438:	46f2      	mov	sl, lr
 801343a:	2100      	movs	r1, #0
 801343c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013440:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013444:	fa11 f88b 	uxtah	r8, r1, fp
 8013448:	b299      	uxth	r1, r3
 801344a:	0c1b      	lsrs	r3, r3, #16
 801344c:	eba8 0801 	sub.w	r8, r8, r1
 8013450:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013454:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013458:	fa1f f888 	uxth.w	r8, r8
 801345c:	1419      	asrs	r1, r3, #16
 801345e:	454e      	cmp	r6, r9
 8013460:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013464:	f84a 3b04 	str.w	r3, [sl], #4
 8013468:	d8e8      	bhi.n	801343c <__mdiff+0x80>
 801346a:	1b33      	subs	r3, r6, r4
 801346c:	3b15      	subs	r3, #21
 801346e:	f023 0303 	bic.w	r3, r3, #3
 8013472:	3304      	adds	r3, #4
 8013474:	3415      	adds	r4, #21
 8013476:	42a6      	cmp	r6, r4
 8013478:	bf38      	it	cc
 801347a:	2304      	movcc	r3, #4
 801347c:	441d      	add	r5, r3
 801347e:	4473      	add	r3, lr
 8013480:	469e      	mov	lr, r3
 8013482:	462e      	mov	r6, r5
 8013484:	4566      	cmp	r6, ip
 8013486:	d30e      	bcc.n	80134a6 <__mdiff+0xea>
 8013488:	f10c 0203 	add.w	r2, ip, #3
 801348c:	1b52      	subs	r2, r2, r5
 801348e:	f022 0203 	bic.w	r2, r2, #3
 8013492:	3d03      	subs	r5, #3
 8013494:	45ac      	cmp	ip, r5
 8013496:	bf38      	it	cc
 8013498:	2200      	movcc	r2, #0
 801349a:	4413      	add	r3, r2
 801349c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80134a0:	b17a      	cbz	r2, 80134c2 <__mdiff+0x106>
 80134a2:	6107      	str	r7, [r0, #16]
 80134a4:	e7a4      	b.n	80133f0 <__mdiff+0x34>
 80134a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80134aa:	fa11 f288 	uxtah	r2, r1, r8
 80134ae:	1414      	asrs	r4, r2, #16
 80134b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80134b4:	b292      	uxth	r2, r2
 80134b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80134ba:	f84e 2b04 	str.w	r2, [lr], #4
 80134be:	1421      	asrs	r1, r4, #16
 80134c0:	e7e0      	b.n	8013484 <__mdiff+0xc8>
 80134c2:	3f01      	subs	r7, #1
 80134c4:	e7ea      	b.n	801349c <__mdiff+0xe0>
 80134c6:	bf00      	nop
 80134c8:	080157a5 	.word	0x080157a5
 80134cc:	080157b6 	.word	0x080157b6

080134d0 <__ulp>:
 80134d0:	b082      	sub	sp, #8
 80134d2:	ed8d 0b00 	vstr	d0, [sp]
 80134d6:	9a01      	ldr	r2, [sp, #4]
 80134d8:	4b0f      	ldr	r3, [pc, #60]	; (8013518 <__ulp+0x48>)
 80134da:	4013      	ands	r3, r2
 80134dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	dc08      	bgt.n	80134f6 <__ulp+0x26>
 80134e4:	425b      	negs	r3, r3
 80134e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80134ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80134ee:	da04      	bge.n	80134fa <__ulp+0x2a>
 80134f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80134f4:	4113      	asrs	r3, r2
 80134f6:	2200      	movs	r2, #0
 80134f8:	e008      	b.n	801350c <__ulp+0x3c>
 80134fa:	f1a2 0314 	sub.w	r3, r2, #20
 80134fe:	2b1e      	cmp	r3, #30
 8013500:	bfda      	itte	le
 8013502:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013506:	40da      	lsrle	r2, r3
 8013508:	2201      	movgt	r2, #1
 801350a:	2300      	movs	r3, #0
 801350c:	4619      	mov	r1, r3
 801350e:	4610      	mov	r0, r2
 8013510:	ec41 0b10 	vmov	d0, r0, r1
 8013514:	b002      	add	sp, #8
 8013516:	4770      	bx	lr
 8013518:	7ff00000 	.word	0x7ff00000

0801351c <__b2d>:
 801351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013520:	6906      	ldr	r6, [r0, #16]
 8013522:	f100 0814 	add.w	r8, r0, #20
 8013526:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801352a:	1f37      	subs	r7, r6, #4
 801352c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013530:	4610      	mov	r0, r2
 8013532:	f7ff fd53 	bl	8012fdc <__hi0bits>
 8013536:	f1c0 0320 	rsb	r3, r0, #32
 801353a:	280a      	cmp	r0, #10
 801353c:	600b      	str	r3, [r1, #0]
 801353e:	491b      	ldr	r1, [pc, #108]	; (80135ac <__b2d+0x90>)
 8013540:	dc15      	bgt.n	801356e <__b2d+0x52>
 8013542:	f1c0 0c0b 	rsb	ip, r0, #11
 8013546:	fa22 f30c 	lsr.w	r3, r2, ip
 801354a:	45b8      	cmp	r8, r7
 801354c:	ea43 0501 	orr.w	r5, r3, r1
 8013550:	bf34      	ite	cc
 8013552:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013556:	2300      	movcs	r3, #0
 8013558:	3015      	adds	r0, #21
 801355a:	fa02 f000 	lsl.w	r0, r2, r0
 801355e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013562:	4303      	orrs	r3, r0
 8013564:	461c      	mov	r4, r3
 8013566:	ec45 4b10 	vmov	d0, r4, r5
 801356a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801356e:	45b8      	cmp	r8, r7
 8013570:	bf3a      	itte	cc
 8013572:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013576:	f1a6 0708 	subcc.w	r7, r6, #8
 801357a:	2300      	movcs	r3, #0
 801357c:	380b      	subs	r0, #11
 801357e:	d012      	beq.n	80135a6 <__b2d+0x8a>
 8013580:	f1c0 0120 	rsb	r1, r0, #32
 8013584:	fa23 f401 	lsr.w	r4, r3, r1
 8013588:	4082      	lsls	r2, r0
 801358a:	4322      	orrs	r2, r4
 801358c:	4547      	cmp	r7, r8
 801358e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013592:	bf8c      	ite	hi
 8013594:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013598:	2200      	movls	r2, #0
 801359a:	4083      	lsls	r3, r0
 801359c:	40ca      	lsrs	r2, r1
 801359e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80135a2:	4313      	orrs	r3, r2
 80135a4:	e7de      	b.n	8013564 <__b2d+0x48>
 80135a6:	ea42 0501 	orr.w	r5, r2, r1
 80135aa:	e7db      	b.n	8013564 <__b2d+0x48>
 80135ac:	3ff00000 	.word	0x3ff00000

080135b0 <__d2b>:
 80135b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135b4:	460f      	mov	r7, r1
 80135b6:	2101      	movs	r1, #1
 80135b8:	ec59 8b10 	vmov	r8, r9, d0
 80135bc:	4616      	mov	r6, r2
 80135be:	f7ff fc1b 	bl	8012df8 <_Balloc>
 80135c2:	4604      	mov	r4, r0
 80135c4:	b930      	cbnz	r0, 80135d4 <__d2b+0x24>
 80135c6:	4602      	mov	r2, r0
 80135c8:	4b24      	ldr	r3, [pc, #144]	; (801365c <__d2b+0xac>)
 80135ca:	4825      	ldr	r0, [pc, #148]	; (8013660 <__d2b+0xb0>)
 80135cc:	f240 310f 	movw	r1, #783	; 0x30f
 80135d0:	f001 f94e 	bl	8014870 <__assert_func>
 80135d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80135d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80135dc:	bb2d      	cbnz	r5, 801362a <__d2b+0x7a>
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	f1b8 0300 	subs.w	r3, r8, #0
 80135e4:	d026      	beq.n	8013634 <__d2b+0x84>
 80135e6:	4668      	mov	r0, sp
 80135e8:	9300      	str	r3, [sp, #0]
 80135ea:	f7ff fd17 	bl	801301c <__lo0bits>
 80135ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80135f2:	b1e8      	cbz	r0, 8013630 <__d2b+0x80>
 80135f4:	f1c0 0320 	rsb	r3, r0, #32
 80135f8:	fa02 f303 	lsl.w	r3, r2, r3
 80135fc:	430b      	orrs	r3, r1
 80135fe:	40c2      	lsrs	r2, r0
 8013600:	6163      	str	r3, [r4, #20]
 8013602:	9201      	str	r2, [sp, #4]
 8013604:	9b01      	ldr	r3, [sp, #4]
 8013606:	61a3      	str	r3, [r4, #24]
 8013608:	2b00      	cmp	r3, #0
 801360a:	bf14      	ite	ne
 801360c:	2202      	movne	r2, #2
 801360e:	2201      	moveq	r2, #1
 8013610:	6122      	str	r2, [r4, #16]
 8013612:	b1bd      	cbz	r5, 8013644 <__d2b+0x94>
 8013614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013618:	4405      	add	r5, r0
 801361a:	603d      	str	r5, [r7, #0]
 801361c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013620:	6030      	str	r0, [r6, #0]
 8013622:	4620      	mov	r0, r4
 8013624:	b003      	add	sp, #12
 8013626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801362a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801362e:	e7d6      	b.n	80135de <__d2b+0x2e>
 8013630:	6161      	str	r1, [r4, #20]
 8013632:	e7e7      	b.n	8013604 <__d2b+0x54>
 8013634:	a801      	add	r0, sp, #4
 8013636:	f7ff fcf1 	bl	801301c <__lo0bits>
 801363a:	9b01      	ldr	r3, [sp, #4]
 801363c:	6163      	str	r3, [r4, #20]
 801363e:	3020      	adds	r0, #32
 8013640:	2201      	movs	r2, #1
 8013642:	e7e5      	b.n	8013610 <__d2b+0x60>
 8013644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801364c:	6038      	str	r0, [r7, #0]
 801364e:	6918      	ldr	r0, [r3, #16]
 8013650:	f7ff fcc4 	bl	8012fdc <__hi0bits>
 8013654:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013658:	e7e2      	b.n	8013620 <__d2b+0x70>
 801365a:	bf00      	nop
 801365c:	080157a5 	.word	0x080157a5
 8013660:	080157b6 	.word	0x080157b6

08013664 <__ratio>:
 8013664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013668:	4688      	mov	r8, r1
 801366a:	4669      	mov	r1, sp
 801366c:	4681      	mov	r9, r0
 801366e:	f7ff ff55 	bl	801351c <__b2d>
 8013672:	a901      	add	r1, sp, #4
 8013674:	4640      	mov	r0, r8
 8013676:	ec55 4b10 	vmov	r4, r5, d0
 801367a:	ee10 aa10 	vmov	sl, s0
 801367e:	f7ff ff4d 	bl	801351c <__b2d>
 8013682:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013686:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801368a:	1ad2      	subs	r2, r2, r3
 801368c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013690:	1a5b      	subs	r3, r3, r1
 8013692:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013696:	ec57 6b10 	vmov	r6, r7, d0
 801369a:	2b00      	cmp	r3, #0
 801369c:	bfd6      	itet	le
 801369e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80136a2:	462a      	movgt	r2, r5
 80136a4:	463a      	movle	r2, r7
 80136a6:	46ab      	mov	fp, r5
 80136a8:	bfd6      	itet	le
 80136aa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80136ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80136b2:	ee00 3a90 	vmovle	s1, r3
 80136b6:	ec4b ab17 	vmov	d7, sl, fp
 80136ba:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80136be:	b003      	add	sp, #12
 80136c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080136c4 <__copybits>:
 80136c4:	3901      	subs	r1, #1
 80136c6:	b570      	push	{r4, r5, r6, lr}
 80136c8:	1149      	asrs	r1, r1, #5
 80136ca:	6914      	ldr	r4, [r2, #16]
 80136cc:	3101      	adds	r1, #1
 80136ce:	f102 0314 	add.w	r3, r2, #20
 80136d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80136d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80136da:	1f05      	subs	r5, r0, #4
 80136dc:	42a3      	cmp	r3, r4
 80136de:	d30c      	bcc.n	80136fa <__copybits+0x36>
 80136e0:	1aa3      	subs	r3, r4, r2
 80136e2:	3b11      	subs	r3, #17
 80136e4:	f023 0303 	bic.w	r3, r3, #3
 80136e8:	3211      	adds	r2, #17
 80136ea:	42a2      	cmp	r2, r4
 80136ec:	bf88      	it	hi
 80136ee:	2300      	movhi	r3, #0
 80136f0:	4418      	add	r0, r3
 80136f2:	2300      	movs	r3, #0
 80136f4:	4288      	cmp	r0, r1
 80136f6:	d305      	bcc.n	8013704 <__copybits+0x40>
 80136f8:	bd70      	pop	{r4, r5, r6, pc}
 80136fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80136fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8013702:	e7eb      	b.n	80136dc <__copybits+0x18>
 8013704:	f840 3b04 	str.w	r3, [r0], #4
 8013708:	e7f4      	b.n	80136f4 <__copybits+0x30>

0801370a <__any_on>:
 801370a:	f100 0214 	add.w	r2, r0, #20
 801370e:	6900      	ldr	r0, [r0, #16]
 8013710:	114b      	asrs	r3, r1, #5
 8013712:	4298      	cmp	r0, r3
 8013714:	b510      	push	{r4, lr}
 8013716:	db11      	blt.n	801373c <__any_on+0x32>
 8013718:	dd0a      	ble.n	8013730 <__any_on+0x26>
 801371a:	f011 011f 	ands.w	r1, r1, #31
 801371e:	d007      	beq.n	8013730 <__any_on+0x26>
 8013720:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013724:	fa24 f001 	lsr.w	r0, r4, r1
 8013728:	fa00 f101 	lsl.w	r1, r0, r1
 801372c:	428c      	cmp	r4, r1
 801372e:	d10b      	bne.n	8013748 <__any_on+0x3e>
 8013730:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013734:	4293      	cmp	r3, r2
 8013736:	d803      	bhi.n	8013740 <__any_on+0x36>
 8013738:	2000      	movs	r0, #0
 801373a:	bd10      	pop	{r4, pc}
 801373c:	4603      	mov	r3, r0
 801373e:	e7f7      	b.n	8013730 <__any_on+0x26>
 8013740:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013744:	2900      	cmp	r1, #0
 8013746:	d0f5      	beq.n	8013734 <__any_on+0x2a>
 8013748:	2001      	movs	r0, #1
 801374a:	e7f6      	b.n	801373a <__any_on+0x30>

0801374c <sulp>:
 801374c:	b570      	push	{r4, r5, r6, lr}
 801374e:	4604      	mov	r4, r0
 8013750:	460d      	mov	r5, r1
 8013752:	4616      	mov	r6, r2
 8013754:	ec45 4b10 	vmov	d0, r4, r5
 8013758:	f7ff feba 	bl	80134d0 <__ulp>
 801375c:	b17e      	cbz	r6, 801377e <sulp+0x32>
 801375e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013766:	2b00      	cmp	r3, #0
 8013768:	dd09      	ble.n	801377e <sulp+0x32>
 801376a:	051b      	lsls	r3, r3, #20
 801376c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013770:	2000      	movs	r0, #0
 8013772:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013776:	ec41 0b17 	vmov	d7, r0, r1
 801377a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801377e:	bd70      	pop	{r4, r5, r6, pc}

08013780 <_strtod_l>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	ed2d 8b0e 	vpush	{d8-d14}
 8013788:	b097      	sub	sp, #92	; 0x5c
 801378a:	4604      	mov	r4, r0
 801378c:	920d      	str	r2, [sp, #52]	; 0x34
 801378e:	2200      	movs	r2, #0
 8013790:	9212      	str	r2, [sp, #72]	; 0x48
 8013792:	468a      	mov	sl, r1
 8013794:	f04f 0800 	mov.w	r8, #0
 8013798:	f04f 0900 	mov.w	r9, #0
 801379c:	460a      	mov	r2, r1
 801379e:	9211      	str	r2, [sp, #68]	; 0x44
 80137a0:	7811      	ldrb	r1, [r2, #0]
 80137a2:	292b      	cmp	r1, #43	; 0x2b
 80137a4:	d04c      	beq.n	8013840 <_strtod_l+0xc0>
 80137a6:	d839      	bhi.n	801381c <_strtod_l+0x9c>
 80137a8:	290d      	cmp	r1, #13
 80137aa:	d833      	bhi.n	8013814 <_strtod_l+0x94>
 80137ac:	2908      	cmp	r1, #8
 80137ae:	d833      	bhi.n	8013818 <_strtod_l+0x98>
 80137b0:	2900      	cmp	r1, #0
 80137b2:	d03c      	beq.n	801382e <_strtod_l+0xae>
 80137b4:	2200      	movs	r2, #0
 80137b6:	9208      	str	r2, [sp, #32]
 80137b8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80137ba:	7832      	ldrb	r2, [r6, #0]
 80137bc:	2a30      	cmp	r2, #48	; 0x30
 80137be:	f040 80b8 	bne.w	8013932 <_strtod_l+0x1b2>
 80137c2:	7872      	ldrb	r2, [r6, #1]
 80137c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80137c8:	2a58      	cmp	r2, #88	; 0x58
 80137ca:	d170      	bne.n	80138ae <_strtod_l+0x12e>
 80137cc:	9302      	str	r3, [sp, #8]
 80137ce:	9b08      	ldr	r3, [sp, #32]
 80137d0:	9301      	str	r3, [sp, #4]
 80137d2:	ab12      	add	r3, sp, #72	; 0x48
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	4a91      	ldr	r2, [pc, #580]	; (8013a1c <_strtod_l+0x29c>)
 80137d8:	ab13      	add	r3, sp, #76	; 0x4c
 80137da:	a911      	add	r1, sp, #68	; 0x44
 80137dc:	4620      	mov	r0, r4
 80137de:	f001 f8e3 	bl	80149a8 <__gethex>
 80137e2:	f010 070f 	ands.w	r7, r0, #15
 80137e6:	4605      	mov	r5, r0
 80137e8:	d005      	beq.n	80137f6 <_strtod_l+0x76>
 80137ea:	2f06      	cmp	r7, #6
 80137ec:	d12a      	bne.n	8013844 <_strtod_l+0xc4>
 80137ee:	3601      	adds	r6, #1
 80137f0:	2300      	movs	r3, #0
 80137f2:	9611      	str	r6, [sp, #68]	; 0x44
 80137f4:	9308      	str	r3, [sp, #32]
 80137f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f040 8555 	bne.w	80142a8 <_strtod_l+0xb28>
 80137fe:	9b08      	ldr	r3, [sp, #32]
 8013800:	ec49 8b10 	vmov	d0, r8, r9
 8013804:	b1cb      	cbz	r3, 801383a <_strtod_l+0xba>
 8013806:	eeb1 0b40 	vneg.f64	d0, d0
 801380a:	b017      	add	sp, #92	; 0x5c
 801380c:	ecbd 8b0e 	vpop	{d8-d14}
 8013810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013814:	2920      	cmp	r1, #32
 8013816:	d1cd      	bne.n	80137b4 <_strtod_l+0x34>
 8013818:	3201      	adds	r2, #1
 801381a:	e7c0      	b.n	801379e <_strtod_l+0x1e>
 801381c:	292d      	cmp	r1, #45	; 0x2d
 801381e:	d1c9      	bne.n	80137b4 <_strtod_l+0x34>
 8013820:	2101      	movs	r1, #1
 8013822:	9108      	str	r1, [sp, #32]
 8013824:	1c51      	adds	r1, r2, #1
 8013826:	9111      	str	r1, [sp, #68]	; 0x44
 8013828:	7852      	ldrb	r2, [r2, #1]
 801382a:	2a00      	cmp	r2, #0
 801382c:	d1c4      	bne.n	80137b8 <_strtod_l+0x38>
 801382e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013830:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8013834:	2b00      	cmp	r3, #0
 8013836:	f040 8535 	bne.w	80142a4 <_strtod_l+0xb24>
 801383a:	ec49 8b10 	vmov	d0, r8, r9
 801383e:	e7e4      	b.n	801380a <_strtod_l+0x8a>
 8013840:	2100      	movs	r1, #0
 8013842:	e7ee      	b.n	8013822 <_strtod_l+0xa2>
 8013844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013846:	b13a      	cbz	r2, 8013858 <_strtod_l+0xd8>
 8013848:	2135      	movs	r1, #53	; 0x35
 801384a:	a814      	add	r0, sp, #80	; 0x50
 801384c:	f7ff ff3a 	bl	80136c4 <__copybits>
 8013850:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013852:	4620      	mov	r0, r4
 8013854:	f7ff fb10 	bl	8012e78 <_Bfree>
 8013858:	1e7b      	subs	r3, r7, #1
 801385a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801385c:	2b04      	cmp	r3, #4
 801385e:	d806      	bhi.n	801386e <_strtod_l+0xee>
 8013860:	e8df f003 	tbb	[pc, r3]
 8013864:	201d0314 	.word	0x201d0314
 8013868:	14          	.byte	0x14
 8013869:	00          	.byte	0x00
 801386a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801386e:	05eb      	lsls	r3, r5, #23
 8013870:	bf48      	it	mi
 8013872:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013876:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801387a:	0d1b      	lsrs	r3, r3, #20
 801387c:	051b      	lsls	r3, r3, #20
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1b9      	bne.n	80137f6 <_strtod_l+0x76>
 8013882:	f7fe fc35 	bl	80120f0 <__errno>
 8013886:	2322      	movs	r3, #34	; 0x22
 8013888:	6003      	str	r3, [r0, #0]
 801388a:	e7b4      	b.n	80137f6 <_strtod_l+0x76>
 801388c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8013890:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013894:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013898:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801389c:	e7e7      	b.n	801386e <_strtod_l+0xee>
 801389e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8013a24 <_strtod_l+0x2a4>
 80138a2:	e7e4      	b.n	801386e <_strtod_l+0xee>
 80138a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80138a8:	f04f 38ff 	mov.w	r8, #4294967295
 80138ac:	e7df      	b.n	801386e <_strtod_l+0xee>
 80138ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138b0:	1c5a      	adds	r2, r3, #1
 80138b2:	9211      	str	r2, [sp, #68]	; 0x44
 80138b4:	785b      	ldrb	r3, [r3, #1]
 80138b6:	2b30      	cmp	r3, #48	; 0x30
 80138b8:	d0f9      	beq.n	80138ae <_strtod_l+0x12e>
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d09b      	beq.n	80137f6 <_strtod_l+0x76>
 80138be:	2301      	movs	r3, #1
 80138c0:	9306      	str	r3, [sp, #24]
 80138c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138c4:	9309      	str	r3, [sp, #36]	; 0x24
 80138c6:	2300      	movs	r3, #0
 80138c8:	9305      	str	r3, [sp, #20]
 80138ca:	9307      	str	r3, [sp, #28]
 80138cc:	461e      	mov	r6, r3
 80138ce:	220a      	movs	r2, #10
 80138d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80138d2:	7805      	ldrb	r5, [r0, #0]
 80138d4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80138d8:	b2d9      	uxtb	r1, r3
 80138da:	2909      	cmp	r1, #9
 80138dc:	d92b      	bls.n	8013936 <_strtod_l+0x1b6>
 80138de:	4950      	ldr	r1, [pc, #320]	; (8013a20 <_strtod_l+0x2a0>)
 80138e0:	2201      	movs	r2, #1
 80138e2:	f000 ffa9 	bl	8014838 <strncmp>
 80138e6:	2800      	cmp	r0, #0
 80138e8:	d035      	beq.n	8013956 <_strtod_l+0x1d6>
 80138ea:	2000      	movs	r0, #0
 80138ec:	462a      	mov	r2, r5
 80138ee:	4633      	mov	r3, r6
 80138f0:	4683      	mov	fp, r0
 80138f2:	4601      	mov	r1, r0
 80138f4:	2a65      	cmp	r2, #101	; 0x65
 80138f6:	d001      	beq.n	80138fc <_strtod_l+0x17c>
 80138f8:	2a45      	cmp	r2, #69	; 0x45
 80138fa:	d118      	bne.n	801392e <_strtod_l+0x1ae>
 80138fc:	b91b      	cbnz	r3, 8013906 <_strtod_l+0x186>
 80138fe:	9b06      	ldr	r3, [sp, #24]
 8013900:	4303      	orrs	r3, r0
 8013902:	d094      	beq.n	801382e <_strtod_l+0xae>
 8013904:	2300      	movs	r3, #0
 8013906:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801390a:	f10a 0201 	add.w	r2, sl, #1
 801390e:	9211      	str	r2, [sp, #68]	; 0x44
 8013910:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013914:	2a2b      	cmp	r2, #43	; 0x2b
 8013916:	d075      	beq.n	8013a04 <_strtod_l+0x284>
 8013918:	2a2d      	cmp	r2, #45	; 0x2d
 801391a:	d07b      	beq.n	8013a14 <_strtod_l+0x294>
 801391c:	f04f 0e00 	mov.w	lr, #0
 8013920:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8013924:	2d09      	cmp	r5, #9
 8013926:	f240 8083 	bls.w	8013a30 <_strtod_l+0x2b0>
 801392a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801392e:	2500      	movs	r5, #0
 8013930:	e09e      	b.n	8013a70 <_strtod_l+0x2f0>
 8013932:	2300      	movs	r3, #0
 8013934:	e7c4      	b.n	80138c0 <_strtod_l+0x140>
 8013936:	2e08      	cmp	r6, #8
 8013938:	bfd5      	itete	le
 801393a:	9907      	ldrle	r1, [sp, #28]
 801393c:	9905      	ldrgt	r1, [sp, #20]
 801393e:	fb02 3301 	mlale	r3, r2, r1, r3
 8013942:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013946:	f100 0001 	add.w	r0, r0, #1
 801394a:	bfd4      	ite	le
 801394c:	9307      	strle	r3, [sp, #28]
 801394e:	9305      	strgt	r3, [sp, #20]
 8013950:	3601      	adds	r6, #1
 8013952:	9011      	str	r0, [sp, #68]	; 0x44
 8013954:	e7bc      	b.n	80138d0 <_strtod_l+0x150>
 8013956:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013958:	1c5a      	adds	r2, r3, #1
 801395a:	9211      	str	r2, [sp, #68]	; 0x44
 801395c:	785a      	ldrb	r2, [r3, #1]
 801395e:	b3ae      	cbz	r6, 80139cc <_strtod_l+0x24c>
 8013960:	4683      	mov	fp, r0
 8013962:	4633      	mov	r3, r6
 8013964:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013968:	2909      	cmp	r1, #9
 801396a:	d912      	bls.n	8013992 <_strtod_l+0x212>
 801396c:	2101      	movs	r1, #1
 801396e:	e7c1      	b.n	80138f4 <_strtod_l+0x174>
 8013970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	9211      	str	r2, [sp, #68]	; 0x44
 8013976:	785a      	ldrb	r2, [r3, #1]
 8013978:	3001      	adds	r0, #1
 801397a:	2a30      	cmp	r2, #48	; 0x30
 801397c:	d0f8      	beq.n	8013970 <_strtod_l+0x1f0>
 801397e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013982:	2b08      	cmp	r3, #8
 8013984:	f200 8495 	bhi.w	80142b2 <_strtod_l+0xb32>
 8013988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801398a:	9309      	str	r3, [sp, #36]	; 0x24
 801398c:	4683      	mov	fp, r0
 801398e:	2000      	movs	r0, #0
 8013990:	4603      	mov	r3, r0
 8013992:	3a30      	subs	r2, #48	; 0x30
 8013994:	f100 0101 	add.w	r1, r0, #1
 8013998:	d012      	beq.n	80139c0 <_strtod_l+0x240>
 801399a:	448b      	add	fp, r1
 801399c:	eb00 0c03 	add.w	ip, r0, r3
 80139a0:	4619      	mov	r1, r3
 80139a2:	250a      	movs	r5, #10
 80139a4:	4561      	cmp	r1, ip
 80139a6:	d113      	bne.n	80139d0 <_strtod_l+0x250>
 80139a8:	1819      	adds	r1, r3, r0
 80139aa:	2908      	cmp	r1, #8
 80139ac:	f103 0301 	add.w	r3, r3, #1
 80139b0:	4403      	add	r3, r0
 80139b2:	dc1b      	bgt.n	80139ec <_strtod_l+0x26c>
 80139b4:	9807      	ldr	r0, [sp, #28]
 80139b6:	210a      	movs	r1, #10
 80139b8:	fb01 2200 	mla	r2, r1, r0, r2
 80139bc:	9207      	str	r2, [sp, #28]
 80139be:	2100      	movs	r1, #0
 80139c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80139c2:	1c50      	adds	r0, r2, #1
 80139c4:	9011      	str	r0, [sp, #68]	; 0x44
 80139c6:	7852      	ldrb	r2, [r2, #1]
 80139c8:	4608      	mov	r0, r1
 80139ca:	e7cb      	b.n	8013964 <_strtod_l+0x1e4>
 80139cc:	4630      	mov	r0, r6
 80139ce:	e7d4      	b.n	801397a <_strtod_l+0x1fa>
 80139d0:	2908      	cmp	r1, #8
 80139d2:	f101 0101 	add.w	r1, r1, #1
 80139d6:	dc03      	bgt.n	80139e0 <_strtod_l+0x260>
 80139d8:	9f07      	ldr	r7, [sp, #28]
 80139da:	436f      	muls	r7, r5
 80139dc:	9707      	str	r7, [sp, #28]
 80139de:	e7e1      	b.n	80139a4 <_strtod_l+0x224>
 80139e0:	2910      	cmp	r1, #16
 80139e2:	bfde      	ittt	le
 80139e4:	9f05      	ldrle	r7, [sp, #20]
 80139e6:	436f      	mulle	r7, r5
 80139e8:	9705      	strle	r7, [sp, #20]
 80139ea:	e7db      	b.n	80139a4 <_strtod_l+0x224>
 80139ec:	2b10      	cmp	r3, #16
 80139ee:	bfdf      	itttt	le
 80139f0:	9805      	ldrle	r0, [sp, #20]
 80139f2:	210a      	movle	r1, #10
 80139f4:	fb01 2200 	mlale	r2, r1, r0, r2
 80139f8:	9205      	strle	r2, [sp, #20]
 80139fa:	e7e0      	b.n	80139be <_strtod_l+0x23e>
 80139fc:	f04f 0b00 	mov.w	fp, #0
 8013a00:	2101      	movs	r1, #1
 8013a02:	e77c      	b.n	80138fe <_strtod_l+0x17e>
 8013a04:	f04f 0e00 	mov.w	lr, #0
 8013a08:	f10a 0202 	add.w	r2, sl, #2
 8013a0c:	9211      	str	r2, [sp, #68]	; 0x44
 8013a0e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8013a12:	e785      	b.n	8013920 <_strtod_l+0x1a0>
 8013a14:	f04f 0e01 	mov.w	lr, #1
 8013a18:	e7f6      	b.n	8013a08 <_strtod_l+0x288>
 8013a1a:	bf00      	nop
 8013a1c:	08015910 	.word	0x08015910
 8013a20:	0801590c 	.word	0x0801590c
 8013a24:	7ff00000 	.word	0x7ff00000
 8013a28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a2a:	1c55      	adds	r5, r2, #1
 8013a2c:	9511      	str	r5, [sp, #68]	; 0x44
 8013a2e:	7852      	ldrb	r2, [r2, #1]
 8013a30:	2a30      	cmp	r2, #48	; 0x30
 8013a32:	d0f9      	beq.n	8013a28 <_strtod_l+0x2a8>
 8013a34:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8013a38:	2d08      	cmp	r5, #8
 8013a3a:	f63f af78 	bhi.w	801392e <_strtod_l+0x1ae>
 8013a3e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8013a42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a44:	920a      	str	r2, [sp, #40]	; 0x28
 8013a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a48:	1c55      	adds	r5, r2, #1
 8013a4a:	9511      	str	r5, [sp, #68]	; 0x44
 8013a4c:	7852      	ldrb	r2, [r2, #1]
 8013a4e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8013a52:	2f09      	cmp	r7, #9
 8013a54:	d937      	bls.n	8013ac6 <_strtod_l+0x346>
 8013a56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013a58:	1bed      	subs	r5, r5, r7
 8013a5a:	2d08      	cmp	r5, #8
 8013a5c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8013a60:	dc02      	bgt.n	8013a68 <_strtod_l+0x2e8>
 8013a62:	4565      	cmp	r5, ip
 8013a64:	bfa8      	it	ge
 8013a66:	4665      	movge	r5, ip
 8013a68:	f1be 0f00 	cmp.w	lr, #0
 8013a6c:	d000      	beq.n	8013a70 <_strtod_l+0x2f0>
 8013a6e:	426d      	negs	r5, r5
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d14d      	bne.n	8013b10 <_strtod_l+0x390>
 8013a74:	9b06      	ldr	r3, [sp, #24]
 8013a76:	4303      	orrs	r3, r0
 8013a78:	f47f aebd 	bne.w	80137f6 <_strtod_l+0x76>
 8013a7c:	2900      	cmp	r1, #0
 8013a7e:	f47f aed6 	bne.w	801382e <_strtod_l+0xae>
 8013a82:	2a69      	cmp	r2, #105	; 0x69
 8013a84:	d027      	beq.n	8013ad6 <_strtod_l+0x356>
 8013a86:	dc24      	bgt.n	8013ad2 <_strtod_l+0x352>
 8013a88:	2a49      	cmp	r2, #73	; 0x49
 8013a8a:	d024      	beq.n	8013ad6 <_strtod_l+0x356>
 8013a8c:	2a4e      	cmp	r2, #78	; 0x4e
 8013a8e:	f47f aece 	bne.w	801382e <_strtod_l+0xae>
 8013a92:	4995      	ldr	r1, [pc, #596]	; (8013ce8 <_strtod_l+0x568>)
 8013a94:	a811      	add	r0, sp, #68	; 0x44
 8013a96:	f001 f9c7 	bl	8014e28 <__match>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	f43f aec7 	beq.w	801382e <_strtod_l+0xae>
 8013aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b28      	cmp	r3, #40	; 0x28
 8013aa6:	d12d      	bne.n	8013b04 <_strtod_l+0x384>
 8013aa8:	4990      	ldr	r1, [pc, #576]	; (8013cec <_strtod_l+0x56c>)
 8013aaa:	aa14      	add	r2, sp, #80	; 0x50
 8013aac:	a811      	add	r0, sp, #68	; 0x44
 8013aae:	f001 f9cf 	bl	8014e50 <__hexnan>
 8013ab2:	2805      	cmp	r0, #5
 8013ab4:	d126      	bne.n	8013b04 <_strtod_l+0x384>
 8013ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ab8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013abc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013ac0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013ac4:	e697      	b.n	80137f6 <_strtod_l+0x76>
 8013ac6:	250a      	movs	r5, #10
 8013ac8:	fb05 2c0c 	mla	ip, r5, ip, r2
 8013acc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013ad0:	e7b9      	b.n	8013a46 <_strtod_l+0x2c6>
 8013ad2:	2a6e      	cmp	r2, #110	; 0x6e
 8013ad4:	e7db      	b.n	8013a8e <_strtod_l+0x30e>
 8013ad6:	4986      	ldr	r1, [pc, #536]	; (8013cf0 <_strtod_l+0x570>)
 8013ad8:	a811      	add	r0, sp, #68	; 0x44
 8013ada:	f001 f9a5 	bl	8014e28 <__match>
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	f43f aea5 	beq.w	801382e <_strtod_l+0xae>
 8013ae4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ae6:	4983      	ldr	r1, [pc, #524]	; (8013cf4 <_strtod_l+0x574>)
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	a811      	add	r0, sp, #68	; 0x44
 8013aec:	9311      	str	r3, [sp, #68]	; 0x44
 8013aee:	f001 f99b 	bl	8014e28 <__match>
 8013af2:	b910      	cbnz	r0, 8013afa <_strtod_l+0x37a>
 8013af4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013af6:	3301      	adds	r3, #1
 8013af8:	9311      	str	r3, [sp, #68]	; 0x44
 8013afa:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8013d08 <_strtod_l+0x588>
 8013afe:	f04f 0800 	mov.w	r8, #0
 8013b02:	e678      	b.n	80137f6 <_strtod_l+0x76>
 8013b04:	487c      	ldr	r0, [pc, #496]	; (8013cf8 <_strtod_l+0x578>)
 8013b06:	f000 feab 	bl	8014860 <nan>
 8013b0a:	ec59 8b10 	vmov	r8, r9, d0
 8013b0e:	e672      	b.n	80137f6 <_strtod_l+0x76>
 8013b10:	eddd 7a07 	vldr	s15, [sp, #28]
 8013b14:	eba5 020b 	sub.w	r2, r5, fp
 8013b18:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013b1c:	2e00      	cmp	r6, #0
 8013b1e:	bf08      	it	eq
 8013b20:	461e      	moveq	r6, r3
 8013b22:	2b10      	cmp	r3, #16
 8013b24:	9206      	str	r2, [sp, #24]
 8013b26:	461a      	mov	r2, r3
 8013b28:	bfa8      	it	ge
 8013b2a:	2210      	movge	r2, #16
 8013b2c:	2b09      	cmp	r3, #9
 8013b2e:	ec59 8b17 	vmov	r8, r9, d7
 8013b32:	dd0c      	ble.n	8013b4e <_strtod_l+0x3ce>
 8013b34:	4971      	ldr	r1, [pc, #452]	; (8013cfc <_strtod_l+0x57c>)
 8013b36:	eddd 6a05 	vldr	s13, [sp, #20]
 8013b3a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013b3e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8013b42:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013b46:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013b4a:	ec59 8b16 	vmov	r8, r9, d6
 8013b4e:	2b0f      	cmp	r3, #15
 8013b50:	dc37      	bgt.n	8013bc2 <_strtod_l+0x442>
 8013b52:	9906      	ldr	r1, [sp, #24]
 8013b54:	2900      	cmp	r1, #0
 8013b56:	f43f ae4e 	beq.w	80137f6 <_strtod_l+0x76>
 8013b5a:	dd23      	ble.n	8013ba4 <_strtod_l+0x424>
 8013b5c:	2916      	cmp	r1, #22
 8013b5e:	dc0b      	bgt.n	8013b78 <_strtod_l+0x3f8>
 8013b60:	4b66      	ldr	r3, [pc, #408]	; (8013cfc <_strtod_l+0x57c>)
 8013b62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013b66:	ed93 7b00 	vldr	d7, [r3]
 8013b6a:	ec49 8b16 	vmov	d6, r8, r9
 8013b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b72:	ec59 8b17 	vmov	r8, r9, d7
 8013b76:	e63e      	b.n	80137f6 <_strtod_l+0x76>
 8013b78:	9806      	ldr	r0, [sp, #24]
 8013b7a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8013b7e:	4281      	cmp	r1, r0
 8013b80:	db1f      	blt.n	8013bc2 <_strtod_l+0x442>
 8013b82:	4a5e      	ldr	r2, [pc, #376]	; (8013cfc <_strtod_l+0x57c>)
 8013b84:	f1c3 030f 	rsb	r3, r3, #15
 8013b88:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013b8c:	ed91 7b00 	vldr	d7, [r1]
 8013b90:	ec49 8b16 	vmov	d6, r8, r9
 8013b94:	1ac3      	subs	r3, r0, r3
 8013b96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b9e:	ed92 6b00 	vldr	d6, [r2]
 8013ba2:	e7e4      	b.n	8013b6e <_strtod_l+0x3ee>
 8013ba4:	9906      	ldr	r1, [sp, #24]
 8013ba6:	3116      	adds	r1, #22
 8013ba8:	db0b      	blt.n	8013bc2 <_strtod_l+0x442>
 8013baa:	4b54      	ldr	r3, [pc, #336]	; (8013cfc <_strtod_l+0x57c>)
 8013bac:	ebab 0505 	sub.w	r5, fp, r5
 8013bb0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013bb4:	ed95 7b00 	vldr	d7, [r5]
 8013bb8:	ec49 8b16 	vmov	d6, r8, r9
 8013bbc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013bc0:	e7d7      	b.n	8013b72 <_strtod_l+0x3f2>
 8013bc2:	9906      	ldr	r1, [sp, #24]
 8013bc4:	1a9a      	subs	r2, r3, r2
 8013bc6:	440a      	add	r2, r1
 8013bc8:	2a00      	cmp	r2, #0
 8013bca:	dd6e      	ble.n	8013caa <_strtod_l+0x52a>
 8013bcc:	f012 000f 	ands.w	r0, r2, #15
 8013bd0:	d00a      	beq.n	8013be8 <_strtod_l+0x468>
 8013bd2:	494a      	ldr	r1, [pc, #296]	; (8013cfc <_strtod_l+0x57c>)
 8013bd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013bd8:	ed91 7b00 	vldr	d7, [r1]
 8013bdc:	ec49 8b16 	vmov	d6, r8, r9
 8013be0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013be4:	ec59 8b17 	vmov	r8, r9, d7
 8013be8:	f032 020f 	bics.w	r2, r2, #15
 8013bec:	d04e      	beq.n	8013c8c <_strtod_l+0x50c>
 8013bee:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8013bf2:	dd22      	ble.n	8013c3a <_strtod_l+0x4ba>
 8013bf4:	2500      	movs	r5, #0
 8013bf6:	462e      	mov	r6, r5
 8013bf8:	9507      	str	r5, [sp, #28]
 8013bfa:	462f      	mov	r7, r5
 8013bfc:	2322      	movs	r3, #34	; 0x22
 8013bfe:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013d08 <_strtod_l+0x588>
 8013c02:	6023      	str	r3, [r4, #0]
 8013c04:	f04f 0800 	mov.w	r8, #0
 8013c08:	9b07      	ldr	r3, [sp, #28]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f43f adf3 	beq.w	80137f6 <_strtod_l+0x76>
 8013c10:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013c12:	4620      	mov	r0, r4
 8013c14:	f7ff f930 	bl	8012e78 <_Bfree>
 8013c18:	4639      	mov	r1, r7
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f7ff f92c 	bl	8012e78 <_Bfree>
 8013c20:	4631      	mov	r1, r6
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff f928 	bl	8012e78 <_Bfree>
 8013c28:	9907      	ldr	r1, [sp, #28]
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	f7ff f924 	bl	8012e78 <_Bfree>
 8013c30:	4629      	mov	r1, r5
 8013c32:	4620      	mov	r0, r4
 8013c34:	f7ff f920 	bl	8012e78 <_Bfree>
 8013c38:	e5dd      	b.n	80137f6 <_strtod_l+0x76>
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	ec49 8b17 	vmov	d7, r8, r9
 8013c40:	4f2f      	ldr	r7, [pc, #188]	; (8013d00 <_strtod_l+0x580>)
 8013c42:	1112      	asrs	r2, r2, #4
 8013c44:	4601      	mov	r1, r0
 8013c46:	2a01      	cmp	r2, #1
 8013c48:	dc23      	bgt.n	8013c92 <_strtod_l+0x512>
 8013c4a:	b108      	cbz	r0, 8013c50 <_strtod_l+0x4d0>
 8013c4c:	ec59 8b17 	vmov	r8, r9, d7
 8013c50:	4a2b      	ldr	r2, [pc, #172]	; (8013d00 <_strtod_l+0x580>)
 8013c52:	482c      	ldr	r0, [pc, #176]	; (8013d04 <_strtod_l+0x584>)
 8013c54:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013c58:	ed92 7b00 	vldr	d7, [r2]
 8013c5c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013c60:	ec49 8b16 	vmov	d6, r8, r9
 8013c64:	4a28      	ldr	r2, [pc, #160]	; (8013d08 <_strtod_l+0x588>)
 8013c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013c6a:	ee17 1a90 	vmov	r1, s15
 8013c6e:	400a      	ands	r2, r1
 8013c70:	4282      	cmp	r2, r0
 8013c72:	ec59 8b17 	vmov	r8, r9, d7
 8013c76:	d8bd      	bhi.n	8013bf4 <_strtod_l+0x474>
 8013c78:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8013c7c:	4282      	cmp	r2, r0
 8013c7e:	bf86      	itte	hi
 8013c80:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8013d0c <_strtod_l+0x58c>
 8013c84:	f04f 38ff 	movhi.w	r8, #4294967295
 8013c88:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	9205      	str	r2, [sp, #20]
 8013c90:	e076      	b.n	8013d80 <_strtod_l+0x600>
 8013c92:	f012 0f01 	tst.w	r2, #1
 8013c96:	d004      	beq.n	8013ca2 <_strtod_l+0x522>
 8013c98:	ed97 6b00 	vldr	d6, [r7]
 8013c9c:	2001      	movs	r0, #1
 8013c9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ca2:	3101      	adds	r1, #1
 8013ca4:	1052      	asrs	r2, r2, #1
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	e7cd      	b.n	8013c46 <_strtod_l+0x4c6>
 8013caa:	d0ef      	beq.n	8013c8c <_strtod_l+0x50c>
 8013cac:	4252      	negs	r2, r2
 8013cae:	f012 000f 	ands.w	r0, r2, #15
 8013cb2:	d00a      	beq.n	8013cca <_strtod_l+0x54a>
 8013cb4:	4911      	ldr	r1, [pc, #68]	; (8013cfc <_strtod_l+0x57c>)
 8013cb6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013cba:	ed91 7b00 	vldr	d7, [r1]
 8013cbe:	ec49 8b16 	vmov	d6, r8, r9
 8013cc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013cc6:	ec59 8b17 	vmov	r8, r9, d7
 8013cca:	1112      	asrs	r2, r2, #4
 8013ccc:	d0de      	beq.n	8013c8c <_strtod_l+0x50c>
 8013cce:	2a1f      	cmp	r2, #31
 8013cd0:	dd1e      	ble.n	8013d10 <_strtod_l+0x590>
 8013cd2:	2500      	movs	r5, #0
 8013cd4:	462e      	mov	r6, r5
 8013cd6:	9507      	str	r5, [sp, #28]
 8013cd8:	462f      	mov	r7, r5
 8013cda:	2322      	movs	r3, #34	; 0x22
 8013cdc:	f04f 0800 	mov.w	r8, #0
 8013ce0:	f04f 0900 	mov.w	r9, #0
 8013ce4:	6023      	str	r3, [r4, #0]
 8013ce6:	e78f      	b.n	8013c08 <_strtod_l+0x488>
 8013ce8:	080156fd 	.word	0x080156fd
 8013cec:	08015924 	.word	0x08015924
 8013cf0:	080156f5 	.word	0x080156f5
 8013cf4:	0801572c 	.word	0x0801572c
 8013cf8:	08015ab5 	.word	0x08015ab5
 8013cfc:	08015838 	.word	0x08015838
 8013d00:	08015810 	.word	0x08015810
 8013d04:	7ca00000 	.word	0x7ca00000
 8013d08:	7ff00000 	.word	0x7ff00000
 8013d0c:	7fefffff 	.word	0x7fefffff
 8013d10:	f012 0110 	ands.w	r1, r2, #16
 8013d14:	bf18      	it	ne
 8013d16:	216a      	movne	r1, #106	; 0x6a
 8013d18:	9105      	str	r1, [sp, #20]
 8013d1a:	ec49 8b17 	vmov	d7, r8, r9
 8013d1e:	49be      	ldr	r1, [pc, #760]	; (8014018 <_strtod_l+0x898>)
 8013d20:	2000      	movs	r0, #0
 8013d22:	07d7      	lsls	r7, r2, #31
 8013d24:	d504      	bpl.n	8013d30 <_strtod_l+0x5b0>
 8013d26:	ed91 6b00 	vldr	d6, [r1]
 8013d2a:	2001      	movs	r0, #1
 8013d2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013d30:	1052      	asrs	r2, r2, #1
 8013d32:	f101 0108 	add.w	r1, r1, #8
 8013d36:	d1f4      	bne.n	8013d22 <_strtod_l+0x5a2>
 8013d38:	b108      	cbz	r0, 8013d3e <_strtod_l+0x5be>
 8013d3a:	ec59 8b17 	vmov	r8, r9, d7
 8013d3e:	9a05      	ldr	r2, [sp, #20]
 8013d40:	b1ba      	cbz	r2, 8013d72 <_strtod_l+0x5f2>
 8013d42:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8013d46:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8013d4a:	2a00      	cmp	r2, #0
 8013d4c:	4648      	mov	r0, r9
 8013d4e:	dd10      	ble.n	8013d72 <_strtod_l+0x5f2>
 8013d50:	2a1f      	cmp	r2, #31
 8013d52:	f340 812c 	ble.w	8013fae <_strtod_l+0x82e>
 8013d56:	2a34      	cmp	r2, #52	; 0x34
 8013d58:	bfde      	ittt	le
 8013d5a:	f04f 32ff 	movle.w	r2, #4294967295
 8013d5e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8013d62:	408a      	lslle	r2, r1
 8013d64:	f04f 0800 	mov.w	r8, #0
 8013d68:	bfcc      	ite	gt
 8013d6a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013d6e:	ea02 0900 	andle.w	r9, r2, r0
 8013d72:	ec49 8b17 	vmov	d7, r8, r9
 8013d76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7e:	d0a8      	beq.n	8013cd2 <_strtod_l+0x552>
 8013d80:	9a07      	ldr	r2, [sp, #28]
 8013d82:	9200      	str	r2, [sp, #0]
 8013d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d86:	4632      	mov	r2, r6
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f7ff f8dd 	bl	8012f48 <__s2b>
 8013d8e:	9007      	str	r0, [sp, #28]
 8013d90:	2800      	cmp	r0, #0
 8013d92:	f43f af2f 	beq.w	8013bf4 <_strtod_l+0x474>
 8013d96:	9a06      	ldr	r2, [sp, #24]
 8013d98:	2a00      	cmp	r2, #0
 8013d9a:	ebab 0305 	sub.w	r3, fp, r5
 8013d9e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013ff8 <_strtod_l+0x878>
 8013da2:	bfa8      	it	ge
 8013da4:	2300      	movge	r3, #0
 8013da6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8014000 <_strtod_l+0x880>
 8013daa:	ed9f bb97 	vldr	d11, [pc, #604]	; 8014008 <_strtod_l+0x888>
 8013dae:	9309      	str	r3, [sp, #36]	; 0x24
 8013db0:	2500      	movs	r5, #0
 8013db2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013db6:	930c      	str	r3, [sp, #48]	; 0x30
 8013db8:	462e      	mov	r6, r5
 8013dba:	9b07      	ldr	r3, [sp, #28]
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	6859      	ldr	r1, [r3, #4]
 8013dc0:	f7ff f81a 	bl	8012df8 <_Balloc>
 8013dc4:	4607      	mov	r7, r0
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	f43f af18 	beq.w	8013bfc <_strtod_l+0x47c>
 8013dcc:	9b07      	ldr	r3, [sp, #28]
 8013dce:	691a      	ldr	r2, [r3, #16]
 8013dd0:	3202      	adds	r2, #2
 8013dd2:	f103 010c 	add.w	r1, r3, #12
 8013dd6:	0092      	lsls	r2, r2, #2
 8013dd8:	300c      	adds	r0, #12
 8013dda:	f7fe f9b6 	bl	801214a <memcpy>
 8013dde:	ec49 8b10 	vmov	d0, r8, r9
 8013de2:	aa14      	add	r2, sp, #80	; 0x50
 8013de4:	a913      	add	r1, sp, #76	; 0x4c
 8013de6:	4620      	mov	r0, r4
 8013de8:	f7ff fbe2 	bl	80135b0 <__d2b>
 8013dec:	ec49 8b18 	vmov	d8, r8, r9
 8013df0:	9012      	str	r0, [sp, #72]	; 0x48
 8013df2:	2800      	cmp	r0, #0
 8013df4:	f43f af02 	beq.w	8013bfc <_strtod_l+0x47c>
 8013df8:	2101      	movs	r1, #1
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f7ff f93c 	bl	8013078 <__i2b>
 8013e00:	4606      	mov	r6, r0
 8013e02:	2800      	cmp	r0, #0
 8013e04:	f43f aefa 	beq.w	8013bfc <_strtod_l+0x47c>
 8013e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e0a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	bfab      	itete	ge
 8013e10:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8013e12:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8013e14:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8013e18:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8013e1c:	bfac      	ite	ge
 8013e1e:	eb03 0b02 	addge.w	fp, r3, r2
 8013e22:	eba2 0a03 	sublt.w	sl, r2, r3
 8013e26:	9a05      	ldr	r2, [sp, #20]
 8013e28:	1a9b      	subs	r3, r3, r2
 8013e2a:	440b      	add	r3, r1
 8013e2c:	4a7b      	ldr	r2, [pc, #492]	; (801401c <_strtod_l+0x89c>)
 8013e2e:	3b01      	subs	r3, #1
 8013e30:	4293      	cmp	r3, r2
 8013e32:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8013e36:	f280 80cd 	bge.w	8013fd4 <_strtod_l+0x854>
 8013e3a:	1ad2      	subs	r2, r2, r3
 8013e3c:	2a1f      	cmp	r2, #31
 8013e3e:	eba1 0102 	sub.w	r1, r1, r2
 8013e42:	f04f 0001 	mov.w	r0, #1
 8013e46:	f300 80b9 	bgt.w	8013fbc <_strtod_l+0x83c>
 8013e4a:	fa00 f302 	lsl.w	r3, r0, r2
 8013e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e50:	2300      	movs	r3, #0
 8013e52:	930a      	str	r3, [sp, #40]	; 0x28
 8013e54:	eb0b 0301 	add.w	r3, fp, r1
 8013e58:	9a05      	ldr	r2, [sp, #20]
 8013e5a:	459b      	cmp	fp, r3
 8013e5c:	448a      	add	sl, r1
 8013e5e:	4492      	add	sl, r2
 8013e60:	465a      	mov	r2, fp
 8013e62:	bfa8      	it	ge
 8013e64:	461a      	movge	r2, r3
 8013e66:	4552      	cmp	r2, sl
 8013e68:	bfa8      	it	ge
 8013e6a:	4652      	movge	r2, sl
 8013e6c:	2a00      	cmp	r2, #0
 8013e6e:	bfc2      	ittt	gt
 8013e70:	1a9b      	subgt	r3, r3, r2
 8013e72:	ebaa 0a02 	subgt.w	sl, sl, r2
 8013e76:	ebab 0b02 	subgt.w	fp, fp, r2
 8013e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e7c:	2a00      	cmp	r2, #0
 8013e7e:	dd18      	ble.n	8013eb2 <_strtod_l+0x732>
 8013e80:	4631      	mov	r1, r6
 8013e82:	4620      	mov	r0, r4
 8013e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e86:	f7ff f9b7 	bl	80131f8 <__pow5mult>
 8013e8a:	4606      	mov	r6, r0
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	f43f aeb5 	beq.w	8013bfc <_strtod_l+0x47c>
 8013e92:	4601      	mov	r1, r0
 8013e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e96:	4620      	mov	r0, r4
 8013e98:	f7ff f904 	bl	80130a4 <__multiply>
 8013e9c:	900e      	str	r0, [sp, #56]	; 0x38
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	f43f aeac 	beq.w	8013bfc <_strtod_l+0x47c>
 8013ea4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	f7fe ffe6 	bl	8012e78 <_Bfree>
 8013eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eb0:	9212      	str	r2, [sp, #72]	; 0x48
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	f300 8093 	bgt.w	8013fde <_strtod_l+0x85e>
 8013eb8:	9b06      	ldr	r3, [sp, #24]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	dd08      	ble.n	8013ed0 <_strtod_l+0x750>
 8013ebe:	4639      	mov	r1, r7
 8013ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	f7ff f998 	bl	80131f8 <__pow5mult>
 8013ec8:	4607      	mov	r7, r0
 8013eca:	2800      	cmp	r0, #0
 8013ecc:	f43f ae96 	beq.w	8013bfc <_strtod_l+0x47c>
 8013ed0:	f1ba 0f00 	cmp.w	sl, #0
 8013ed4:	dd08      	ble.n	8013ee8 <_strtod_l+0x768>
 8013ed6:	4639      	mov	r1, r7
 8013ed8:	4652      	mov	r2, sl
 8013eda:	4620      	mov	r0, r4
 8013edc:	f7ff f9e6 	bl	80132ac <__lshift>
 8013ee0:	4607      	mov	r7, r0
 8013ee2:	2800      	cmp	r0, #0
 8013ee4:	f43f ae8a 	beq.w	8013bfc <_strtod_l+0x47c>
 8013ee8:	f1bb 0f00 	cmp.w	fp, #0
 8013eec:	dd08      	ble.n	8013f00 <_strtod_l+0x780>
 8013eee:	4631      	mov	r1, r6
 8013ef0:	465a      	mov	r2, fp
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f7ff f9da 	bl	80132ac <__lshift>
 8013ef8:	4606      	mov	r6, r0
 8013efa:	2800      	cmp	r0, #0
 8013efc:	f43f ae7e 	beq.w	8013bfc <_strtod_l+0x47c>
 8013f00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013f02:	463a      	mov	r2, r7
 8013f04:	4620      	mov	r0, r4
 8013f06:	f7ff fa59 	bl	80133bc <__mdiff>
 8013f0a:	4605      	mov	r5, r0
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	f43f ae75 	beq.w	8013bfc <_strtod_l+0x47c>
 8013f12:	2300      	movs	r3, #0
 8013f14:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8013f18:	60c3      	str	r3, [r0, #12]
 8013f1a:	4631      	mov	r1, r6
 8013f1c:	f7ff fa32 	bl	8013384 <__mcmp>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	da7f      	bge.n	8014024 <_strtod_l+0x8a4>
 8013f24:	ea5a 0a08 	orrs.w	sl, sl, r8
 8013f28:	f040 80a5 	bne.w	8014076 <_strtod_l+0x8f6>
 8013f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	f040 80a0 	bne.w	8014076 <_strtod_l+0x8f6>
 8013f36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f3a:	0d1b      	lsrs	r3, r3, #20
 8013f3c:	051b      	lsls	r3, r3, #20
 8013f3e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f42:	f240 8098 	bls.w	8014076 <_strtod_l+0x8f6>
 8013f46:	696b      	ldr	r3, [r5, #20]
 8013f48:	b91b      	cbnz	r3, 8013f52 <_strtod_l+0x7d2>
 8013f4a:	692b      	ldr	r3, [r5, #16]
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	f340 8092 	ble.w	8014076 <_strtod_l+0x8f6>
 8013f52:	4629      	mov	r1, r5
 8013f54:	2201      	movs	r2, #1
 8013f56:	4620      	mov	r0, r4
 8013f58:	f7ff f9a8 	bl	80132ac <__lshift>
 8013f5c:	4631      	mov	r1, r6
 8013f5e:	4605      	mov	r5, r0
 8013f60:	f7ff fa10 	bl	8013384 <__mcmp>
 8013f64:	2800      	cmp	r0, #0
 8013f66:	f340 8086 	ble.w	8014076 <_strtod_l+0x8f6>
 8013f6a:	9905      	ldr	r1, [sp, #20]
 8013f6c:	4a2c      	ldr	r2, [pc, #176]	; (8014020 <_strtod_l+0x8a0>)
 8013f6e:	464b      	mov	r3, r9
 8013f70:	2900      	cmp	r1, #0
 8013f72:	f000 809f 	beq.w	80140b4 <_strtod_l+0x934>
 8013f76:	ea02 0109 	and.w	r1, r2, r9
 8013f7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013f7e:	f300 8099 	bgt.w	80140b4 <_strtod_l+0x934>
 8013f82:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013f86:	f77f aea8 	ble.w	8013cda <_strtod_l+0x55a>
 8013f8a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014010 <_strtod_l+0x890>
 8013f8e:	ec49 8b16 	vmov	d6, r8, r9
 8013f92:	4b23      	ldr	r3, [pc, #140]	; (8014020 <_strtod_l+0x8a0>)
 8013f94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013f98:	ee17 2a90 	vmov	r2, s15
 8013f9c:	4013      	ands	r3, r2
 8013f9e:	ec59 8b17 	vmov	r8, r9, d7
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	f47f ae34 	bne.w	8013c10 <_strtod_l+0x490>
 8013fa8:	2322      	movs	r3, #34	; 0x22
 8013faa:	6023      	str	r3, [r4, #0]
 8013fac:	e630      	b.n	8013c10 <_strtod_l+0x490>
 8013fae:	f04f 31ff 	mov.w	r1, #4294967295
 8013fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8013fb6:	ea02 0808 	and.w	r8, r2, r8
 8013fba:	e6da      	b.n	8013d72 <_strtod_l+0x5f2>
 8013fbc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013fc0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013fc4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013fc8:	33e2      	adds	r3, #226	; 0xe2
 8013fca:	fa00 f303 	lsl.w	r3, r0, r3
 8013fce:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8013fd2:	e73f      	b.n	8013e54 <_strtod_l+0x6d4>
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013fdc:	e73a      	b.n	8013e54 <_strtod_l+0x6d4>
 8013fde:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	f7ff f962 	bl	80132ac <__lshift>
 8013fe8:	9012      	str	r0, [sp, #72]	; 0x48
 8013fea:	2800      	cmp	r0, #0
 8013fec:	f47f af64 	bne.w	8013eb8 <_strtod_l+0x738>
 8013ff0:	e604      	b.n	8013bfc <_strtod_l+0x47c>
 8013ff2:	bf00      	nop
 8013ff4:	f3af 8000 	nop.w
 8013ff8:	94a03595 	.word	0x94a03595
 8013ffc:	3fcfffff 	.word	0x3fcfffff
 8014000:	94a03595 	.word	0x94a03595
 8014004:	3fdfffff 	.word	0x3fdfffff
 8014008:	35afe535 	.word	0x35afe535
 801400c:	3fe00000 	.word	0x3fe00000
 8014010:	00000000 	.word	0x00000000
 8014014:	39500000 	.word	0x39500000
 8014018:	08015938 	.word	0x08015938
 801401c:	fffffc02 	.word	0xfffffc02
 8014020:	7ff00000 	.word	0x7ff00000
 8014024:	46cb      	mov	fp, r9
 8014026:	d15f      	bne.n	80140e8 <_strtod_l+0x968>
 8014028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801402c:	f1ba 0f00 	cmp.w	sl, #0
 8014030:	d02a      	beq.n	8014088 <_strtod_l+0x908>
 8014032:	4aa7      	ldr	r2, [pc, #668]	; (80142d0 <_strtod_l+0xb50>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d12b      	bne.n	8014090 <_strtod_l+0x910>
 8014038:	9b05      	ldr	r3, [sp, #20]
 801403a:	4642      	mov	r2, r8
 801403c:	b1fb      	cbz	r3, 801407e <_strtod_l+0x8fe>
 801403e:	4ba5      	ldr	r3, [pc, #660]	; (80142d4 <_strtod_l+0xb54>)
 8014040:	ea09 0303 	and.w	r3, r9, r3
 8014044:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014048:	f04f 31ff 	mov.w	r1, #4294967295
 801404c:	d81a      	bhi.n	8014084 <_strtod_l+0x904>
 801404e:	0d1b      	lsrs	r3, r3, #20
 8014050:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014054:	fa01 f303 	lsl.w	r3, r1, r3
 8014058:	429a      	cmp	r2, r3
 801405a:	d119      	bne.n	8014090 <_strtod_l+0x910>
 801405c:	4b9e      	ldr	r3, [pc, #632]	; (80142d8 <_strtod_l+0xb58>)
 801405e:	459b      	cmp	fp, r3
 8014060:	d102      	bne.n	8014068 <_strtod_l+0x8e8>
 8014062:	3201      	adds	r2, #1
 8014064:	f43f adca 	beq.w	8013bfc <_strtod_l+0x47c>
 8014068:	4b9a      	ldr	r3, [pc, #616]	; (80142d4 <_strtod_l+0xb54>)
 801406a:	ea0b 0303 	and.w	r3, fp, r3
 801406e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014072:	f04f 0800 	mov.w	r8, #0
 8014076:	9b05      	ldr	r3, [sp, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d186      	bne.n	8013f8a <_strtod_l+0x80a>
 801407c:	e5c8      	b.n	8013c10 <_strtod_l+0x490>
 801407e:	f04f 33ff 	mov.w	r3, #4294967295
 8014082:	e7e9      	b.n	8014058 <_strtod_l+0x8d8>
 8014084:	460b      	mov	r3, r1
 8014086:	e7e7      	b.n	8014058 <_strtod_l+0x8d8>
 8014088:	ea53 0308 	orrs.w	r3, r3, r8
 801408c:	f43f af6d 	beq.w	8013f6a <_strtod_l+0x7ea>
 8014090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014092:	b1cb      	cbz	r3, 80140c8 <_strtod_l+0x948>
 8014094:	ea13 0f0b 	tst.w	r3, fp
 8014098:	d0ed      	beq.n	8014076 <_strtod_l+0x8f6>
 801409a:	9a05      	ldr	r2, [sp, #20]
 801409c:	4640      	mov	r0, r8
 801409e:	4649      	mov	r1, r9
 80140a0:	f1ba 0f00 	cmp.w	sl, #0
 80140a4:	d014      	beq.n	80140d0 <_strtod_l+0x950>
 80140a6:	f7ff fb51 	bl	801374c <sulp>
 80140aa:	ee38 7b00 	vadd.f64	d7, d8, d0
 80140ae:	ec59 8b17 	vmov	r8, r9, d7
 80140b2:	e7e0      	b.n	8014076 <_strtod_l+0x8f6>
 80140b4:	4013      	ands	r3, r2
 80140b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80140ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80140be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80140c2:	f04f 38ff 	mov.w	r8, #4294967295
 80140c6:	e7d6      	b.n	8014076 <_strtod_l+0x8f6>
 80140c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140ca:	ea13 0f08 	tst.w	r3, r8
 80140ce:	e7e3      	b.n	8014098 <_strtod_l+0x918>
 80140d0:	f7ff fb3c 	bl	801374c <sulp>
 80140d4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80140d8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80140dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e0:	ec59 8b10 	vmov	r8, r9, d0
 80140e4:	d1c7      	bne.n	8014076 <_strtod_l+0x8f6>
 80140e6:	e5f8      	b.n	8013cda <_strtod_l+0x55a>
 80140e8:	4631      	mov	r1, r6
 80140ea:	4628      	mov	r0, r5
 80140ec:	f7ff faba 	bl	8013664 <__ratio>
 80140f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80140f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80140f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fc:	d85f      	bhi.n	80141be <_strtod_l+0xa3e>
 80140fe:	f1ba 0f00 	cmp.w	sl, #0
 8014102:	d166      	bne.n	80141d2 <_strtod_l+0xa52>
 8014104:	f1b8 0f00 	cmp.w	r8, #0
 8014108:	d14d      	bne.n	80141a6 <_strtod_l+0xa26>
 801410a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801410e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8014112:	2b00      	cmp	r3, #0
 8014114:	d162      	bne.n	80141dc <_strtod_l+0xa5c>
 8014116:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801411a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014122:	d401      	bmi.n	8014128 <_strtod_l+0x9a8>
 8014124:	ee20 db0d 	vmul.f64	d13, d0, d13
 8014128:	eeb1 cb4d 	vneg.f64	d12, d13
 801412c:	4869      	ldr	r0, [pc, #420]	; (80142d4 <_strtod_l+0xb54>)
 801412e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80142e0 <_strtod_l+0xb60>
 8014132:	ea0b 0100 	and.w	r1, fp, r0
 8014136:	4561      	cmp	r1, ip
 8014138:	ec53 2b1c 	vmov	r2, r3, d12
 801413c:	d17a      	bne.n	8014234 <_strtod_l+0xab4>
 801413e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8014142:	ec49 8b10 	vmov	d0, r8, r9
 8014146:	910a      	str	r1, [sp, #40]	; 0x28
 8014148:	f7ff f9c2 	bl	80134d0 <__ulp>
 801414c:	ec49 8b1e 	vmov	d14, r8, r9
 8014150:	4860      	ldr	r0, [pc, #384]	; (80142d4 <_strtod_l+0xb54>)
 8014152:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8014156:	ee1e 3a90 	vmov	r3, s29
 801415a:	4a60      	ldr	r2, [pc, #384]	; (80142dc <_strtod_l+0xb5c>)
 801415c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801415e:	4018      	ands	r0, r3
 8014160:	4290      	cmp	r0, r2
 8014162:	ec59 8b1e 	vmov	r8, r9, d14
 8014166:	d93c      	bls.n	80141e2 <_strtod_l+0xa62>
 8014168:	ee18 2a90 	vmov	r2, s17
 801416c:	4b5a      	ldr	r3, [pc, #360]	; (80142d8 <_strtod_l+0xb58>)
 801416e:	429a      	cmp	r2, r3
 8014170:	d104      	bne.n	801417c <_strtod_l+0x9fc>
 8014172:	ee18 3a10 	vmov	r3, s16
 8014176:	3301      	adds	r3, #1
 8014178:	f43f ad40 	beq.w	8013bfc <_strtod_l+0x47c>
 801417c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80142d8 <_strtod_l+0xb58>
 8014180:	f04f 38ff 	mov.w	r8, #4294967295
 8014184:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014186:	4620      	mov	r0, r4
 8014188:	f7fe fe76 	bl	8012e78 <_Bfree>
 801418c:	4639      	mov	r1, r7
 801418e:	4620      	mov	r0, r4
 8014190:	f7fe fe72 	bl	8012e78 <_Bfree>
 8014194:	4631      	mov	r1, r6
 8014196:	4620      	mov	r0, r4
 8014198:	f7fe fe6e 	bl	8012e78 <_Bfree>
 801419c:	4629      	mov	r1, r5
 801419e:	4620      	mov	r0, r4
 80141a0:	f7fe fe6a 	bl	8012e78 <_Bfree>
 80141a4:	e609      	b.n	8013dba <_strtod_l+0x63a>
 80141a6:	f1b8 0f01 	cmp.w	r8, #1
 80141aa:	d103      	bne.n	80141b4 <_strtod_l+0xa34>
 80141ac:	f1b9 0f00 	cmp.w	r9, #0
 80141b0:	f43f ad93 	beq.w	8013cda <_strtod_l+0x55a>
 80141b4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80141b8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80141bc:	e7b6      	b.n	801412c <_strtod_l+0x9ac>
 80141be:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80141c2:	ee20 db0d 	vmul.f64	d13, d0, d13
 80141c6:	f1ba 0f00 	cmp.w	sl, #0
 80141ca:	d0ad      	beq.n	8014128 <_strtod_l+0x9a8>
 80141cc:	eeb0 cb4d 	vmov.f64	d12, d13
 80141d0:	e7ac      	b.n	801412c <_strtod_l+0x9ac>
 80141d2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80141d6:	eeb0 db4c 	vmov.f64	d13, d12
 80141da:	e7a7      	b.n	801412c <_strtod_l+0x9ac>
 80141dc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80141e0:	e7a4      	b.n	801412c <_strtod_l+0x9ac>
 80141e2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80141e6:	9b05      	ldr	r3, [sp, #20]
 80141e8:	46cb      	mov	fp, r9
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d1ca      	bne.n	8014184 <_strtod_l+0xa04>
 80141ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80141f2:	0d1b      	lsrs	r3, r3, #20
 80141f4:	051b      	lsls	r3, r3, #20
 80141f6:	4299      	cmp	r1, r3
 80141f8:	d1c4      	bne.n	8014184 <_strtod_l+0xa04>
 80141fa:	ec51 0b1d 	vmov	r0, r1, d13
 80141fe:	f7ec fa9b 	bl	8000738 <__aeabi_d2lz>
 8014202:	f7ec fa53 	bl	80006ac <__aeabi_l2d>
 8014206:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801420a:	ec41 0b17 	vmov	d7, r0, r1
 801420e:	ea4b 0b08 	orr.w	fp, fp, r8
 8014212:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8014216:	ee3d db47 	vsub.f64	d13, d13, d7
 801421a:	d03c      	beq.n	8014296 <_strtod_l+0xb16>
 801421c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8014220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014224:	f53f acf4 	bmi.w	8013c10 <_strtod_l+0x490>
 8014228:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014230:	dda8      	ble.n	8014184 <_strtod_l+0xa04>
 8014232:	e4ed      	b.n	8013c10 <_strtod_l+0x490>
 8014234:	9805      	ldr	r0, [sp, #20]
 8014236:	b1f0      	cbz	r0, 8014276 <_strtod_l+0xaf6>
 8014238:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801423c:	d81b      	bhi.n	8014276 <_strtod_l+0xaf6>
 801423e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80142c8 <_strtod_l+0xb48>
 8014242:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8014246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801424a:	d811      	bhi.n	8014270 <_strtod_l+0xaf0>
 801424c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8014250:	ee1d 3a10 	vmov	r3, s26
 8014254:	2b01      	cmp	r3, #1
 8014256:	bf38      	it	cc
 8014258:	2301      	movcc	r3, #1
 801425a:	ee0d 3a10 	vmov	s26, r3
 801425e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8014262:	f1ba 0f00 	cmp.w	sl, #0
 8014266:	d113      	bne.n	8014290 <_strtod_l+0xb10>
 8014268:	eeb1 7b4d 	vneg.f64	d7, d13
 801426c:	ec53 2b17 	vmov	r2, r3, d7
 8014270:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8014274:	1a43      	subs	r3, r0, r1
 8014276:	eeb0 0b48 	vmov.f64	d0, d8
 801427a:	ec43 2b1c 	vmov	d12, r2, r3
 801427e:	910a      	str	r1, [sp, #40]	; 0x28
 8014280:	f7ff f926 	bl	80134d0 <__ulp>
 8014284:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014286:	eeac 8b00 	vfma.f64	d8, d12, d0
 801428a:	ec59 8b18 	vmov	r8, r9, d8
 801428e:	e7aa      	b.n	80141e6 <_strtod_l+0xa66>
 8014290:	eeb0 7b4d 	vmov.f64	d7, d13
 8014294:	e7ea      	b.n	801426c <_strtod_l+0xaec>
 8014296:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801429e:	f57f af71 	bpl.w	8014184 <_strtod_l+0xa04>
 80142a2:	e4b5      	b.n	8013c10 <_strtod_l+0x490>
 80142a4:	2300      	movs	r3, #0
 80142a6:	9308      	str	r3, [sp, #32]
 80142a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142ac:	6013      	str	r3, [r2, #0]
 80142ae:	f7ff baa6 	b.w	80137fe <_strtod_l+0x7e>
 80142b2:	2a65      	cmp	r2, #101	; 0x65
 80142b4:	f43f aba2 	beq.w	80139fc <_strtod_l+0x27c>
 80142b8:	2a45      	cmp	r2, #69	; 0x45
 80142ba:	f43f ab9f 	beq.w	80139fc <_strtod_l+0x27c>
 80142be:	2101      	movs	r1, #1
 80142c0:	f7ff bbd8 	b.w	8013a74 <_strtod_l+0x2f4>
 80142c4:	f3af 8000 	nop.w
 80142c8:	ffc00000 	.word	0xffc00000
 80142cc:	41dfffff 	.word	0x41dfffff
 80142d0:	000fffff 	.word	0x000fffff
 80142d4:	7ff00000 	.word	0x7ff00000
 80142d8:	7fefffff 	.word	0x7fefffff
 80142dc:	7c9fffff 	.word	0x7c9fffff
 80142e0:	7fe00000 	.word	0x7fe00000

080142e4 <_strtod_r>:
 80142e4:	4b01      	ldr	r3, [pc, #4]	; (80142ec <_strtod_r+0x8>)
 80142e6:	f7ff ba4b 	b.w	8013780 <_strtod_l>
 80142ea:	bf00      	nop
 80142ec:	24000070 	.word	0x24000070

080142f0 <_strtol_l.constprop.0>:
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142f6:	d001      	beq.n	80142fc <_strtol_l.constprop.0+0xc>
 80142f8:	2b24      	cmp	r3, #36	; 0x24
 80142fa:	d906      	bls.n	801430a <_strtol_l.constprop.0+0x1a>
 80142fc:	f7fd fef8 	bl	80120f0 <__errno>
 8014300:	2316      	movs	r3, #22
 8014302:	6003      	str	r3, [r0, #0]
 8014304:	2000      	movs	r0, #0
 8014306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801430a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80143f0 <_strtol_l.constprop.0+0x100>
 801430e:	460d      	mov	r5, r1
 8014310:	462e      	mov	r6, r5
 8014312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014316:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801431a:	f017 0708 	ands.w	r7, r7, #8
 801431e:	d1f7      	bne.n	8014310 <_strtol_l.constprop.0+0x20>
 8014320:	2c2d      	cmp	r4, #45	; 0x2d
 8014322:	d132      	bne.n	801438a <_strtol_l.constprop.0+0x9a>
 8014324:	782c      	ldrb	r4, [r5, #0]
 8014326:	2701      	movs	r7, #1
 8014328:	1cb5      	adds	r5, r6, #2
 801432a:	2b00      	cmp	r3, #0
 801432c:	d05b      	beq.n	80143e6 <_strtol_l.constprop.0+0xf6>
 801432e:	2b10      	cmp	r3, #16
 8014330:	d109      	bne.n	8014346 <_strtol_l.constprop.0+0x56>
 8014332:	2c30      	cmp	r4, #48	; 0x30
 8014334:	d107      	bne.n	8014346 <_strtol_l.constprop.0+0x56>
 8014336:	782c      	ldrb	r4, [r5, #0]
 8014338:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801433c:	2c58      	cmp	r4, #88	; 0x58
 801433e:	d14d      	bne.n	80143dc <_strtol_l.constprop.0+0xec>
 8014340:	786c      	ldrb	r4, [r5, #1]
 8014342:	2310      	movs	r3, #16
 8014344:	3502      	adds	r5, #2
 8014346:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801434a:	f108 38ff 	add.w	r8, r8, #4294967295
 801434e:	f04f 0e00 	mov.w	lr, #0
 8014352:	fbb8 f9f3 	udiv	r9, r8, r3
 8014356:	4676      	mov	r6, lr
 8014358:	fb03 8a19 	mls	sl, r3, r9, r8
 801435c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014360:	f1bc 0f09 	cmp.w	ip, #9
 8014364:	d816      	bhi.n	8014394 <_strtol_l.constprop.0+0xa4>
 8014366:	4664      	mov	r4, ip
 8014368:	42a3      	cmp	r3, r4
 801436a:	dd24      	ble.n	80143b6 <_strtol_l.constprop.0+0xc6>
 801436c:	f1be 3fff 	cmp.w	lr, #4294967295
 8014370:	d008      	beq.n	8014384 <_strtol_l.constprop.0+0x94>
 8014372:	45b1      	cmp	r9, r6
 8014374:	d31c      	bcc.n	80143b0 <_strtol_l.constprop.0+0xc0>
 8014376:	d101      	bne.n	801437c <_strtol_l.constprop.0+0x8c>
 8014378:	45a2      	cmp	sl, r4
 801437a:	db19      	blt.n	80143b0 <_strtol_l.constprop.0+0xc0>
 801437c:	fb06 4603 	mla	r6, r6, r3, r4
 8014380:	f04f 0e01 	mov.w	lr, #1
 8014384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014388:	e7e8      	b.n	801435c <_strtol_l.constprop.0+0x6c>
 801438a:	2c2b      	cmp	r4, #43	; 0x2b
 801438c:	bf04      	itt	eq
 801438e:	782c      	ldrbeq	r4, [r5, #0]
 8014390:	1cb5      	addeq	r5, r6, #2
 8014392:	e7ca      	b.n	801432a <_strtol_l.constprop.0+0x3a>
 8014394:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014398:	f1bc 0f19 	cmp.w	ip, #25
 801439c:	d801      	bhi.n	80143a2 <_strtol_l.constprop.0+0xb2>
 801439e:	3c37      	subs	r4, #55	; 0x37
 80143a0:	e7e2      	b.n	8014368 <_strtol_l.constprop.0+0x78>
 80143a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80143a6:	f1bc 0f19 	cmp.w	ip, #25
 80143aa:	d804      	bhi.n	80143b6 <_strtol_l.constprop.0+0xc6>
 80143ac:	3c57      	subs	r4, #87	; 0x57
 80143ae:	e7db      	b.n	8014368 <_strtol_l.constprop.0+0x78>
 80143b0:	f04f 3eff 	mov.w	lr, #4294967295
 80143b4:	e7e6      	b.n	8014384 <_strtol_l.constprop.0+0x94>
 80143b6:	f1be 3fff 	cmp.w	lr, #4294967295
 80143ba:	d105      	bne.n	80143c8 <_strtol_l.constprop.0+0xd8>
 80143bc:	2322      	movs	r3, #34	; 0x22
 80143be:	6003      	str	r3, [r0, #0]
 80143c0:	4646      	mov	r6, r8
 80143c2:	b942      	cbnz	r2, 80143d6 <_strtol_l.constprop.0+0xe6>
 80143c4:	4630      	mov	r0, r6
 80143c6:	e79e      	b.n	8014306 <_strtol_l.constprop.0+0x16>
 80143c8:	b107      	cbz	r7, 80143cc <_strtol_l.constprop.0+0xdc>
 80143ca:	4276      	negs	r6, r6
 80143cc:	2a00      	cmp	r2, #0
 80143ce:	d0f9      	beq.n	80143c4 <_strtol_l.constprop.0+0xd4>
 80143d0:	f1be 0f00 	cmp.w	lr, #0
 80143d4:	d000      	beq.n	80143d8 <_strtol_l.constprop.0+0xe8>
 80143d6:	1e69      	subs	r1, r5, #1
 80143d8:	6011      	str	r1, [r2, #0]
 80143da:	e7f3      	b.n	80143c4 <_strtol_l.constprop.0+0xd4>
 80143dc:	2430      	movs	r4, #48	; 0x30
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d1b1      	bne.n	8014346 <_strtol_l.constprop.0+0x56>
 80143e2:	2308      	movs	r3, #8
 80143e4:	e7af      	b.n	8014346 <_strtol_l.constprop.0+0x56>
 80143e6:	2c30      	cmp	r4, #48	; 0x30
 80143e8:	d0a5      	beq.n	8014336 <_strtol_l.constprop.0+0x46>
 80143ea:	230a      	movs	r3, #10
 80143ec:	e7ab      	b.n	8014346 <_strtol_l.constprop.0+0x56>
 80143ee:	bf00      	nop
 80143f0:	08015961 	.word	0x08015961

080143f4 <_strtol_r>:
 80143f4:	f7ff bf7c 	b.w	80142f0 <_strtol_l.constprop.0>

080143f8 <__ssputs_r>:
 80143f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143fc:	688e      	ldr	r6, [r1, #8]
 80143fe:	461f      	mov	r7, r3
 8014400:	42be      	cmp	r6, r7
 8014402:	680b      	ldr	r3, [r1, #0]
 8014404:	4682      	mov	sl, r0
 8014406:	460c      	mov	r4, r1
 8014408:	4690      	mov	r8, r2
 801440a:	d82c      	bhi.n	8014466 <__ssputs_r+0x6e>
 801440c:	898a      	ldrh	r2, [r1, #12]
 801440e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014412:	d026      	beq.n	8014462 <__ssputs_r+0x6a>
 8014414:	6965      	ldr	r5, [r4, #20]
 8014416:	6909      	ldr	r1, [r1, #16]
 8014418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801441c:	eba3 0901 	sub.w	r9, r3, r1
 8014420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014424:	1c7b      	adds	r3, r7, #1
 8014426:	444b      	add	r3, r9
 8014428:	106d      	asrs	r5, r5, #1
 801442a:	429d      	cmp	r5, r3
 801442c:	bf38      	it	cc
 801442e:	461d      	movcc	r5, r3
 8014430:	0553      	lsls	r3, r2, #21
 8014432:	d527      	bpl.n	8014484 <__ssputs_r+0x8c>
 8014434:	4629      	mov	r1, r5
 8014436:	f7fc fd7d 	bl	8010f34 <_malloc_r>
 801443a:	4606      	mov	r6, r0
 801443c:	b360      	cbz	r0, 8014498 <__ssputs_r+0xa0>
 801443e:	6921      	ldr	r1, [r4, #16]
 8014440:	464a      	mov	r2, r9
 8014442:	f7fd fe82 	bl	801214a <memcpy>
 8014446:	89a3      	ldrh	r3, [r4, #12]
 8014448:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014450:	81a3      	strh	r3, [r4, #12]
 8014452:	6126      	str	r6, [r4, #16]
 8014454:	6165      	str	r5, [r4, #20]
 8014456:	444e      	add	r6, r9
 8014458:	eba5 0509 	sub.w	r5, r5, r9
 801445c:	6026      	str	r6, [r4, #0]
 801445e:	60a5      	str	r5, [r4, #8]
 8014460:	463e      	mov	r6, r7
 8014462:	42be      	cmp	r6, r7
 8014464:	d900      	bls.n	8014468 <__ssputs_r+0x70>
 8014466:	463e      	mov	r6, r7
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	4632      	mov	r2, r6
 801446c:	4641      	mov	r1, r8
 801446e:	f000 f9c9 	bl	8014804 <memmove>
 8014472:	68a3      	ldr	r3, [r4, #8]
 8014474:	1b9b      	subs	r3, r3, r6
 8014476:	60a3      	str	r3, [r4, #8]
 8014478:	6823      	ldr	r3, [r4, #0]
 801447a:	4433      	add	r3, r6
 801447c:	6023      	str	r3, [r4, #0]
 801447e:	2000      	movs	r0, #0
 8014480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014484:	462a      	mov	r2, r5
 8014486:	f000 fd90 	bl	8014faa <_realloc_r>
 801448a:	4606      	mov	r6, r0
 801448c:	2800      	cmp	r0, #0
 801448e:	d1e0      	bne.n	8014452 <__ssputs_r+0x5a>
 8014490:	6921      	ldr	r1, [r4, #16]
 8014492:	4650      	mov	r0, sl
 8014494:	f7fe fc64 	bl	8012d60 <_free_r>
 8014498:	230c      	movs	r3, #12
 801449a:	f8ca 3000 	str.w	r3, [sl]
 801449e:	89a3      	ldrh	r3, [r4, #12]
 80144a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144a4:	81a3      	strh	r3, [r4, #12]
 80144a6:	f04f 30ff 	mov.w	r0, #4294967295
 80144aa:	e7e9      	b.n	8014480 <__ssputs_r+0x88>

080144ac <_svfiprintf_r>:
 80144ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b0:	4698      	mov	r8, r3
 80144b2:	898b      	ldrh	r3, [r1, #12]
 80144b4:	061b      	lsls	r3, r3, #24
 80144b6:	b09d      	sub	sp, #116	; 0x74
 80144b8:	4607      	mov	r7, r0
 80144ba:	460d      	mov	r5, r1
 80144bc:	4614      	mov	r4, r2
 80144be:	d50e      	bpl.n	80144de <_svfiprintf_r+0x32>
 80144c0:	690b      	ldr	r3, [r1, #16]
 80144c2:	b963      	cbnz	r3, 80144de <_svfiprintf_r+0x32>
 80144c4:	2140      	movs	r1, #64	; 0x40
 80144c6:	f7fc fd35 	bl	8010f34 <_malloc_r>
 80144ca:	6028      	str	r0, [r5, #0]
 80144cc:	6128      	str	r0, [r5, #16]
 80144ce:	b920      	cbnz	r0, 80144da <_svfiprintf_r+0x2e>
 80144d0:	230c      	movs	r3, #12
 80144d2:	603b      	str	r3, [r7, #0]
 80144d4:	f04f 30ff 	mov.w	r0, #4294967295
 80144d8:	e0d0      	b.n	801467c <_svfiprintf_r+0x1d0>
 80144da:	2340      	movs	r3, #64	; 0x40
 80144dc:	616b      	str	r3, [r5, #20]
 80144de:	2300      	movs	r3, #0
 80144e0:	9309      	str	r3, [sp, #36]	; 0x24
 80144e2:	2320      	movs	r3, #32
 80144e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80144ec:	2330      	movs	r3, #48	; 0x30
 80144ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014694 <_svfiprintf_r+0x1e8>
 80144f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144f6:	f04f 0901 	mov.w	r9, #1
 80144fa:	4623      	mov	r3, r4
 80144fc:	469a      	mov	sl, r3
 80144fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014502:	b10a      	cbz	r2, 8014508 <_svfiprintf_r+0x5c>
 8014504:	2a25      	cmp	r2, #37	; 0x25
 8014506:	d1f9      	bne.n	80144fc <_svfiprintf_r+0x50>
 8014508:	ebba 0b04 	subs.w	fp, sl, r4
 801450c:	d00b      	beq.n	8014526 <_svfiprintf_r+0x7a>
 801450e:	465b      	mov	r3, fp
 8014510:	4622      	mov	r2, r4
 8014512:	4629      	mov	r1, r5
 8014514:	4638      	mov	r0, r7
 8014516:	f7ff ff6f 	bl	80143f8 <__ssputs_r>
 801451a:	3001      	adds	r0, #1
 801451c:	f000 80a9 	beq.w	8014672 <_svfiprintf_r+0x1c6>
 8014520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014522:	445a      	add	r2, fp
 8014524:	9209      	str	r2, [sp, #36]	; 0x24
 8014526:	f89a 3000 	ldrb.w	r3, [sl]
 801452a:	2b00      	cmp	r3, #0
 801452c:	f000 80a1 	beq.w	8014672 <_svfiprintf_r+0x1c6>
 8014530:	2300      	movs	r3, #0
 8014532:	f04f 32ff 	mov.w	r2, #4294967295
 8014536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801453a:	f10a 0a01 	add.w	sl, sl, #1
 801453e:	9304      	str	r3, [sp, #16]
 8014540:	9307      	str	r3, [sp, #28]
 8014542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014546:	931a      	str	r3, [sp, #104]	; 0x68
 8014548:	4654      	mov	r4, sl
 801454a:	2205      	movs	r2, #5
 801454c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014550:	4850      	ldr	r0, [pc, #320]	; (8014694 <_svfiprintf_r+0x1e8>)
 8014552:	f7eb fec5 	bl	80002e0 <memchr>
 8014556:	9a04      	ldr	r2, [sp, #16]
 8014558:	b9d8      	cbnz	r0, 8014592 <_svfiprintf_r+0xe6>
 801455a:	06d0      	lsls	r0, r2, #27
 801455c:	bf44      	itt	mi
 801455e:	2320      	movmi	r3, #32
 8014560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014564:	0711      	lsls	r1, r2, #28
 8014566:	bf44      	itt	mi
 8014568:	232b      	movmi	r3, #43	; 0x2b
 801456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801456e:	f89a 3000 	ldrb.w	r3, [sl]
 8014572:	2b2a      	cmp	r3, #42	; 0x2a
 8014574:	d015      	beq.n	80145a2 <_svfiprintf_r+0xf6>
 8014576:	9a07      	ldr	r2, [sp, #28]
 8014578:	4654      	mov	r4, sl
 801457a:	2000      	movs	r0, #0
 801457c:	f04f 0c0a 	mov.w	ip, #10
 8014580:	4621      	mov	r1, r4
 8014582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014586:	3b30      	subs	r3, #48	; 0x30
 8014588:	2b09      	cmp	r3, #9
 801458a:	d94d      	bls.n	8014628 <_svfiprintf_r+0x17c>
 801458c:	b1b0      	cbz	r0, 80145bc <_svfiprintf_r+0x110>
 801458e:	9207      	str	r2, [sp, #28]
 8014590:	e014      	b.n	80145bc <_svfiprintf_r+0x110>
 8014592:	eba0 0308 	sub.w	r3, r0, r8
 8014596:	fa09 f303 	lsl.w	r3, r9, r3
 801459a:	4313      	orrs	r3, r2
 801459c:	9304      	str	r3, [sp, #16]
 801459e:	46a2      	mov	sl, r4
 80145a0:	e7d2      	b.n	8014548 <_svfiprintf_r+0x9c>
 80145a2:	9b03      	ldr	r3, [sp, #12]
 80145a4:	1d19      	adds	r1, r3, #4
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	9103      	str	r1, [sp, #12]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	bfbb      	ittet	lt
 80145ae:	425b      	neglt	r3, r3
 80145b0:	f042 0202 	orrlt.w	r2, r2, #2
 80145b4:	9307      	strge	r3, [sp, #28]
 80145b6:	9307      	strlt	r3, [sp, #28]
 80145b8:	bfb8      	it	lt
 80145ba:	9204      	strlt	r2, [sp, #16]
 80145bc:	7823      	ldrb	r3, [r4, #0]
 80145be:	2b2e      	cmp	r3, #46	; 0x2e
 80145c0:	d10c      	bne.n	80145dc <_svfiprintf_r+0x130>
 80145c2:	7863      	ldrb	r3, [r4, #1]
 80145c4:	2b2a      	cmp	r3, #42	; 0x2a
 80145c6:	d134      	bne.n	8014632 <_svfiprintf_r+0x186>
 80145c8:	9b03      	ldr	r3, [sp, #12]
 80145ca:	1d1a      	adds	r2, r3, #4
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	9203      	str	r2, [sp, #12]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	bfb8      	it	lt
 80145d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80145d8:	3402      	adds	r4, #2
 80145da:	9305      	str	r3, [sp, #20]
 80145dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80146a4 <_svfiprintf_r+0x1f8>
 80145e0:	7821      	ldrb	r1, [r4, #0]
 80145e2:	2203      	movs	r2, #3
 80145e4:	4650      	mov	r0, sl
 80145e6:	f7eb fe7b 	bl	80002e0 <memchr>
 80145ea:	b138      	cbz	r0, 80145fc <_svfiprintf_r+0x150>
 80145ec:	9b04      	ldr	r3, [sp, #16]
 80145ee:	eba0 000a 	sub.w	r0, r0, sl
 80145f2:	2240      	movs	r2, #64	; 0x40
 80145f4:	4082      	lsls	r2, r0
 80145f6:	4313      	orrs	r3, r2
 80145f8:	3401      	adds	r4, #1
 80145fa:	9304      	str	r3, [sp, #16]
 80145fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014600:	4825      	ldr	r0, [pc, #148]	; (8014698 <_svfiprintf_r+0x1ec>)
 8014602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014606:	2206      	movs	r2, #6
 8014608:	f7eb fe6a 	bl	80002e0 <memchr>
 801460c:	2800      	cmp	r0, #0
 801460e:	d038      	beq.n	8014682 <_svfiprintf_r+0x1d6>
 8014610:	4b22      	ldr	r3, [pc, #136]	; (801469c <_svfiprintf_r+0x1f0>)
 8014612:	bb1b      	cbnz	r3, 801465c <_svfiprintf_r+0x1b0>
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	3307      	adds	r3, #7
 8014618:	f023 0307 	bic.w	r3, r3, #7
 801461c:	3308      	adds	r3, #8
 801461e:	9303      	str	r3, [sp, #12]
 8014620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014622:	4433      	add	r3, r6
 8014624:	9309      	str	r3, [sp, #36]	; 0x24
 8014626:	e768      	b.n	80144fa <_svfiprintf_r+0x4e>
 8014628:	fb0c 3202 	mla	r2, ip, r2, r3
 801462c:	460c      	mov	r4, r1
 801462e:	2001      	movs	r0, #1
 8014630:	e7a6      	b.n	8014580 <_svfiprintf_r+0xd4>
 8014632:	2300      	movs	r3, #0
 8014634:	3401      	adds	r4, #1
 8014636:	9305      	str	r3, [sp, #20]
 8014638:	4619      	mov	r1, r3
 801463a:	f04f 0c0a 	mov.w	ip, #10
 801463e:	4620      	mov	r0, r4
 8014640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014644:	3a30      	subs	r2, #48	; 0x30
 8014646:	2a09      	cmp	r2, #9
 8014648:	d903      	bls.n	8014652 <_svfiprintf_r+0x1a6>
 801464a:	2b00      	cmp	r3, #0
 801464c:	d0c6      	beq.n	80145dc <_svfiprintf_r+0x130>
 801464e:	9105      	str	r1, [sp, #20]
 8014650:	e7c4      	b.n	80145dc <_svfiprintf_r+0x130>
 8014652:	fb0c 2101 	mla	r1, ip, r1, r2
 8014656:	4604      	mov	r4, r0
 8014658:	2301      	movs	r3, #1
 801465a:	e7f0      	b.n	801463e <_svfiprintf_r+0x192>
 801465c:	ab03      	add	r3, sp, #12
 801465e:	9300      	str	r3, [sp, #0]
 8014660:	462a      	mov	r2, r5
 8014662:	4b0f      	ldr	r3, [pc, #60]	; (80146a0 <_svfiprintf_r+0x1f4>)
 8014664:	a904      	add	r1, sp, #16
 8014666:	4638      	mov	r0, r7
 8014668:	f7fc fd82 	bl	8011170 <_printf_float>
 801466c:	1c42      	adds	r2, r0, #1
 801466e:	4606      	mov	r6, r0
 8014670:	d1d6      	bne.n	8014620 <_svfiprintf_r+0x174>
 8014672:	89ab      	ldrh	r3, [r5, #12]
 8014674:	065b      	lsls	r3, r3, #25
 8014676:	f53f af2d 	bmi.w	80144d4 <_svfiprintf_r+0x28>
 801467a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801467c:	b01d      	add	sp, #116	; 0x74
 801467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014682:	ab03      	add	r3, sp, #12
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	462a      	mov	r2, r5
 8014688:	4b05      	ldr	r3, [pc, #20]	; (80146a0 <_svfiprintf_r+0x1f4>)
 801468a:	a904      	add	r1, sp, #16
 801468c:	4638      	mov	r0, r7
 801468e:	f7fc fff7 	bl	8011680 <_printf_i>
 8014692:	e7eb      	b.n	801466c <_svfiprintf_r+0x1c0>
 8014694:	08015a61 	.word	0x08015a61
 8014698:	08015a6b 	.word	0x08015a6b
 801469c:	08011171 	.word	0x08011171
 80146a0:	080143f9 	.word	0x080143f9
 80146a4:	08015a67 	.word	0x08015a67

080146a8 <__sflush_r>:
 80146a8:	898a      	ldrh	r2, [r1, #12]
 80146aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ae:	4605      	mov	r5, r0
 80146b0:	0710      	lsls	r0, r2, #28
 80146b2:	460c      	mov	r4, r1
 80146b4:	d458      	bmi.n	8014768 <__sflush_r+0xc0>
 80146b6:	684b      	ldr	r3, [r1, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	dc05      	bgt.n	80146c8 <__sflush_r+0x20>
 80146bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146be:	2b00      	cmp	r3, #0
 80146c0:	dc02      	bgt.n	80146c8 <__sflush_r+0x20>
 80146c2:	2000      	movs	r0, #0
 80146c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146ca:	2e00      	cmp	r6, #0
 80146cc:	d0f9      	beq.n	80146c2 <__sflush_r+0x1a>
 80146ce:	2300      	movs	r3, #0
 80146d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80146d4:	682f      	ldr	r7, [r5, #0]
 80146d6:	6a21      	ldr	r1, [r4, #32]
 80146d8:	602b      	str	r3, [r5, #0]
 80146da:	d032      	beq.n	8014742 <__sflush_r+0x9a>
 80146dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80146de:	89a3      	ldrh	r3, [r4, #12]
 80146e0:	075a      	lsls	r2, r3, #29
 80146e2:	d505      	bpl.n	80146f0 <__sflush_r+0x48>
 80146e4:	6863      	ldr	r3, [r4, #4]
 80146e6:	1ac0      	subs	r0, r0, r3
 80146e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80146ea:	b10b      	cbz	r3, 80146f0 <__sflush_r+0x48>
 80146ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146ee:	1ac0      	subs	r0, r0, r3
 80146f0:	2300      	movs	r3, #0
 80146f2:	4602      	mov	r2, r0
 80146f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146f6:	6a21      	ldr	r1, [r4, #32]
 80146f8:	4628      	mov	r0, r5
 80146fa:	47b0      	blx	r6
 80146fc:	1c43      	adds	r3, r0, #1
 80146fe:	89a3      	ldrh	r3, [r4, #12]
 8014700:	d106      	bne.n	8014710 <__sflush_r+0x68>
 8014702:	6829      	ldr	r1, [r5, #0]
 8014704:	291d      	cmp	r1, #29
 8014706:	d82b      	bhi.n	8014760 <__sflush_r+0xb8>
 8014708:	4a29      	ldr	r2, [pc, #164]	; (80147b0 <__sflush_r+0x108>)
 801470a:	410a      	asrs	r2, r1
 801470c:	07d6      	lsls	r6, r2, #31
 801470e:	d427      	bmi.n	8014760 <__sflush_r+0xb8>
 8014710:	2200      	movs	r2, #0
 8014712:	6062      	str	r2, [r4, #4]
 8014714:	04d9      	lsls	r1, r3, #19
 8014716:	6922      	ldr	r2, [r4, #16]
 8014718:	6022      	str	r2, [r4, #0]
 801471a:	d504      	bpl.n	8014726 <__sflush_r+0x7e>
 801471c:	1c42      	adds	r2, r0, #1
 801471e:	d101      	bne.n	8014724 <__sflush_r+0x7c>
 8014720:	682b      	ldr	r3, [r5, #0]
 8014722:	b903      	cbnz	r3, 8014726 <__sflush_r+0x7e>
 8014724:	6560      	str	r0, [r4, #84]	; 0x54
 8014726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014728:	602f      	str	r7, [r5, #0]
 801472a:	2900      	cmp	r1, #0
 801472c:	d0c9      	beq.n	80146c2 <__sflush_r+0x1a>
 801472e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014732:	4299      	cmp	r1, r3
 8014734:	d002      	beq.n	801473c <__sflush_r+0x94>
 8014736:	4628      	mov	r0, r5
 8014738:	f7fe fb12 	bl	8012d60 <_free_r>
 801473c:	2000      	movs	r0, #0
 801473e:	6360      	str	r0, [r4, #52]	; 0x34
 8014740:	e7c0      	b.n	80146c4 <__sflush_r+0x1c>
 8014742:	2301      	movs	r3, #1
 8014744:	4628      	mov	r0, r5
 8014746:	47b0      	blx	r6
 8014748:	1c41      	adds	r1, r0, #1
 801474a:	d1c8      	bne.n	80146de <__sflush_r+0x36>
 801474c:	682b      	ldr	r3, [r5, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d0c5      	beq.n	80146de <__sflush_r+0x36>
 8014752:	2b1d      	cmp	r3, #29
 8014754:	d001      	beq.n	801475a <__sflush_r+0xb2>
 8014756:	2b16      	cmp	r3, #22
 8014758:	d101      	bne.n	801475e <__sflush_r+0xb6>
 801475a:	602f      	str	r7, [r5, #0]
 801475c:	e7b1      	b.n	80146c2 <__sflush_r+0x1a>
 801475e:	89a3      	ldrh	r3, [r4, #12]
 8014760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014764:	81a3      	strh	r3, [r4, #12]
 8014766:	e7ad      	b.n	80146c4 <__sflush_r+0x1c>
 8014768:	690f      	ldr	r7, [r1, #16]
 801476a:	2f00      	cmp	r7, #0
 801476c:	d0a9      	beq.n	80146c2 <__sflush_r+0x1a>
 801476e:	0793      	lsls	r3, r2, #30
 8014770:	680e      	ldr	r6, [r1, #0]
 8014772:	bf08      	it	eq
 8014774:	694b      	ldreq	r3, [r1, #20]
 8014776:	600f      	str	r7, [r1, #0]
 8014778:	bf18      	it	ne
 801477a:	2300      	movne	r3, #0
 801477c:	eba6 0807 	sub.w	r8, r6, r7
 8014780:	608b      	str	r3, [r1, #8]
 8014782:	f1b8 0f00 	cmp.w	r8, #0
 8014786:	dd9c      	ble.n	80146c2 <__sflush_r+0x1a>
 8014788:	6a21      	ldr	r1, [r4, #32]
 801478a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801478c:	4643      	mov	r3, r8
 801478e:	463a      	mov	r2, r7
 8014790:	4628      	mov	r0, r5
 8014792:	47b0      	blx	r6
 8014794:	2800      	cmp	r0, #0
 8014796:	dc06      	bgt.n	80147a6 <__sflush_r+0xfe>
 8014798:	89a3      	ldrh	r3, [r4, #12]
 801479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801479e:	81a3      	strh	r3, [r4, #12]
 80147a0:	f04f 30ff 	mov.w	r0, #4294967295
 80147a4:	e78e      	b.n	80146c4 <__sflush_r+0x1c>
 80147a6:	4407      	add	r7, r0
 80147a8:	eba8 0800 	sub.w	r8, r8, r0
 80147ac:	e7e9      	b.n	8014782 <__sflush_r+0xda>
 80147ae:	bf00      	nop
 80147b0:	dfbffffe 	.word	0xdfbffffe

080147b4 <_fflush_r>:
 80147b4:	b538      	push	{r3, r4, r5, lr}
 80147b6:	690b      	ldr	r3, [r1, #16]
 80147b8:	4605      	mov	r5, r0
 80147ba:	460c      	mov	r4, r1
 80147bc:	b913      	cbnz	r3, 80147c4 <_fflush_r+0x10>
 80147be:	2500      	movs	r5, #0
 80147c0:	4628      	mov	r0, r5
 80147c2:	bd38      	pop	{r3, r4, r5, pc}
 80147c4:	b118      	cbz	r0, 80147ce <_fflush_r+0x1a>
 80147c6:	6a03      	ldr	r3, [r0, #32]
 80147c8:	b90b      	cbnz	r3, 80147ce <_fflush_r+0x1a>
 80147ca:	f7fd fb0b 	bl	8011de4 <__sinit>
 80147ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d0f3      	beq.n	80147be <_fflush_r+0xa>
 80147d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80147d8:	07d0      	lsls	r0, r2, #31
 80147da:	d404      	bmi.n	80147e6 <_fflush_r+0x32>
 80147dc:	0599      	lsls	r1, r3, #22
 80147de:	d402      	bmi.n	80147e6 <_fflush_r+0x32>
 80147e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147e2:	f7fd fcb0 	bl	8012146 <__retarget_lock_acquire_recursive>
 80147e6:	4628      	mov	r0, r5
 80147e8:	4621      	mov	r1, r4
 80147ea:	f7ff ff5d 	bl	80146a8 <__sflush_r>
 80147ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147f0:	07da      	lsls	r2, r3, #31
 80147f2:	4605      	mov	r5, r0
 80147f4:	d4e4      	bmi.n	80147c0 <_fflush_r+0xc>
 80147f6:	89a3      	ldrh	r3, [r4, #12]
 80147f8:	059b      	lsls	r3, r3, #22
 80147fa:	d4e1      	bmi.n	80147c0 <_fflush_r+0xc>
 80147fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147fe:	f7fd fca3 	bl	8012148 <__retarget_lock_release_recursive>
 8014802:	e7dd      	b.n	80147c0 <_fflush_r+0xc>

08014804 <memmove>:
 8014804:	4288      	cmp	r0, r1
 8014806:	b510      	push	{r4, lr}
 8014808:	eb01 0402 	add.w	r4, r1, r2
 801480c:	d902      	bls.n	8014814 <memmove+0x10>
 801480e:	4284      	cmp	r4, r0
 8014810:	4623      	mov	r3, r4
 8014812:	d807      	bhi.n	8014824 <memmove+0x20>
 8014814:	1e43      	subs	r3, r0, #1
 8014816:	42a1      	cmp	r1, r4
 8014818:	d008      	beq.n	801482c <memmove+0x28>
 801481a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801481e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014822:	e7f8      	b.n	8014816 <memmove+0x12>
 8014824:	4402      	add	r2, r0
 8014826:	4601      	mov	r1, r0
 8014828:	428a      	cmp	r2, r1
 801482a:	d100      	bne.n	801482e <memmove+0x2a>
 801482c:	bd10      	pop	{r4, pc}
 801482e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014836:	e7f7      	b.n	8014828 <memmove+0x24>

08014838 <strncmp>:
 8014838:	b510      	push	{r4, lr}
 801483a:	b16a      	cbz	r2, 8014858 <strncmp+0x20>
 801483c:	3901      	subs	r1, #1
 801483e:	1884      	adds	r4, r0, r2
 8014840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014844:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014848:	429a      	cmp	r2, r3
 801484a:	d103      	bne.n	8014854 <strncmp+0x1c>
 801484c:	42a0      	cmp	r0, r4
 801484e:	d001      	beq.n	8014854 <strncmp+0x1c>
 8014850:	2a00      	cmp	r2, #0
 8014852:	d1f5      	bne.n	8014840 <strncmp+0x8>
 8014854:	1ad0      	subs	r0, r2, r3
 8014856:	bd10      	pop	{r4, pc}
 8014858:	4610      	mov	r0, r2
 801485a:	e7fc      	b.n	8014856 <strncmp+0x1e>
 801485c:	0000      	movs	r0, r0
	...

08014860 <nan>:
 8014860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014868 <nan+0x8>
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop
 8014868:	00000000 	.word	0x00000000
 801486c:	7ff80000 	.word	0x7ff80000

08014870 <__assert_func>:
 8014870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014872:	4614      	mov	r4, r2
 8014874:	461a      	mov	r2, r3
 8014876:	4b09      	ldr	r3, [pc, #36]	; (801489c <__assert_func+0x2c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4605      	mov	r5, r0
 801487c:	68d8      	ldr	r0, [r3, #12]
 801487e:	b14c      	cbz	r4, 8014894 <__assert_func+0x24>
 8014880:	4b07      	ldr	r3, [pc, #28]	; (80148a0 <__assert_func+0x30>)
 8014882:	9100      	str	r1, [sp, #0]
 8014884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014888:	4906      	ldr	r1, [pc, #24]	; (80148a4 <__assert_func+0x34>)
 801488a:	462b      	mov	r3, r5
 801488c:	f000 fbca 	bl	8015024 <fiprintf>
 8014890:	f000 fbda 	bl	8015048 <abort>
 8014894:	4b04      	ldr	r3, [pc, #16]	; (80148a8 <__assert_func+0x38>)
 8014896:	461c      	mov	r4, r3
 8014898:	e7f3      	b.n	8014882 <__assert_func+0x12>
 801489a:	bf00      	nop
 801489c:	2400006c 	.word	0x2400006c
 80148a0:	08015a7a 	.word	0x08015a7a
 80148a4:	08015a87 	.word	0x08015a87
 80148a8:	08015ab5 	.word	0x08015ab5

080148ac <_calloc_r>:
 80148ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148ae:	fba1 2402 	umull	r2, r4, r1, r2
 80148b2:	b94c      	cbnz	r4, 80148c8 <_calloc_r+0x1c>
 80148b4:	4611      	mov	r1, r2
 80148b6:	9201      	str	r2, [sp, #4]
 80148b8:	f7fc fb3c 	bl	8010f34 <_malloc_r>
 80148bc:	9a01      	ldr	r2, [sp, #4]
 80148be:	4605      	mov	r5, r0
 80148c0:	b930      	cbnz	r0, 80148d0 <_calloc_r+0x24>
 80148c2:	4628      	mov	r0, r5
 80148c4:	b003      	add	sp, #12
 80148c6:	bd30      	pop	{r4, r5, pc}
 80148c8:	220c      	movs	r2, #12
 80148ca:	6002      	str	r2, [r0, #0]
 80148cc:	2500      	movs	r5, #0
 80148ce:	e7f8      	b.n	80148c2 <_calloc_r+0x16>
 80148d0:	4621      	mov	r1, r4
 80148d2:	f7fd fb54 	bl	8011f7e <memset>
 80148d6:	e7f4      	b.n	80148c2 <_calloc_r+0x16>

080148d8 <rshift>:
 80148d8:	6903      	ldr	r3, [r0, #16]
 80148da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80148de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80148e6:	f100 0414 	add.w	r4, r0, #20
 80148ea:	dd45      	ble.n	8014978 <rshift+0xa0>
 80148ec:	f011 011f 	ands.w	r1, r1, #31
 80148f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80148f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80148f8:	d10c      	bne.n	8014914 <rshift+0x3c>
 80148fa:	f100 0710 	add.w	r7, r0, #16
 80148fe:	4629      	mov	r1, r5
 8014900:	42b1      	cmp	r1, r6
 8014902:	d334      	bcc.n	801496e <rshift+0x96>
 8014904:	1a9b      	subs	r3, r3, r2
 8014906:	009b      	lsls	r3, r3, #2
 8014908:	1eea      	subs	r2, r5, #3
 801490a:	4296      	cmp	r6, r2
 801490c:	bf38      	it	cc
 801490e:	2300      	movcc	r3, #0
 8014910:	4423      	add	r3, r4
 8014912:	e015      	b.n	8014940 <rshift+0x68>
 8014914:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014918:	f1c1 0820 	rsb	r8, r1, #32
 801491c:	40cf      	lsrs	r7, r1
 801491e:	f105 0e04 	add.w	lr, r5, #4
 8014922:	46a1      	mov	r9, r4
 8014924:	4576      	cmp	r6, lr
 8014926:	46f4      	mov	ip, lr
 8014928:	d815      	bhi.n	8014956 <rshift+0x7e>
 801492a:	1a9a      	subs	r2, r3, r2
 801492c:	0092      	lsls	r2, r2, #2
 801492e:	3a04      	subs	r2, #4
 8014930:	3501      	adds	r5, #1
 8014932:	42ae      	cmp	r6, r5
 8014934:	bf38      	it	cc
 8014936:	2200      	movcc	r2, #0
 8014938:	18a3      	adds	r3, r4, r2
 801493a:	50a7      	str	r7, [r4, r2]
 801493c:	b107      	cbz	r7, 8014940 <rshift+0x68>
 801493e:	3304      	adds	r3, #4
 8014940:	1b1a      	subs	r2, r3, r4
 8014942:	42a3      	cmp	r3, r4
 8014944:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014948:	bf08      	it	eq
 801494a:	2300      	moveq	r3, #0
 801494c:	6102      	str	r2, [r0, #16]
 801494e:	bf08      	it	eq
 8014950:	6143      	streq	r3, [r0, #20]
 8014952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014956:	f8dc c000 	ldr.w	ip, [ip]
 801495a:	fa0c fc08 	lsl.w	ip, ip, r8
 801495e:	ea4c 0707 	orr.w	r7, ip, r7
 8014962:	f849 7b04 	str.w	r7, [r9], #4
 8014966:	f85e 7b04 	ldr.w	r7, [lr], #4
 801496a:	40cf      	lsrs	r7, r1
 801496c:	e7da      	b.n	8014924 <rshift+0x4c>
 801496e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014972:	f847 cf04 	str.w	ip, [r7, #4]!
 8014976:	e7c3      	b.n	8014900 <rshift+0x28>
 8014978:	4623      	mov	r3, r4
 801497a:	e7e1      	b.n	8014940 <rshift+0x68>

0801497c <__hexdig_fun>:
 801497c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014980:	2b09      	cmp	r3, #9
 8014982:	d802      	bhi.n	801498a <__hexdig_fun+0xe>
 8014984:	3820      	subs	r0, #32
 8014986:	b2c0      	uxtb	r0, r0
 8014988:	4770      	bx	lr
 801498a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801498e:	2b05      	cmp	r3, #5
 8014990:	d801      	bhi.n	8014996 <__hexdig_fun+0x1a>
 8014992:	3847      	subs	r0, #71	; 0x47
 8014994:	e7f7      	b.n	8014986 <__hexdig_fun+0xa>
 8014996:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801499a:	2b05      	cmp	r3, #5
 801499c:	d801      	bhi.n	80149a2 <__hexdig_fun+0x26>
 801499e:	3827      	subs	r0, #39	; 0x27
 80149a0:	e7f1      	b.n	8014986 <__hexdig_fun+0xa>
 80149a2:	2000      	movs	r0, #0
 80149a4:	4770      	bx	lr
	...

080149a8 <__gethex>:
 80149a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ac:	4617      	mov	r7, r2
 80149ae:	680a      	ldr	r2, [r1, #0]
 80149b0:	b085      	sub	sp, #20
 80149b2:	f102 0b02 	add.w	fp, r2, #2
 80149b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80149ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80149be:	4681      	mov	r9, r0
 80149c0:	468a      	mov	sl, r1
 80149c2:	9302      	str	r3, [sp, #8]
 80149c4:	32fe      	adds	r2, #254	; 0xfe
 80149c6:	eb02 030b 	add.w	r3, r2, fp
 80149ca:	46d8      	mov	r8, fp
 80149cc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80149d0:	9301      	str	r3, [sp, #4]
 80149d2:	2830      	cmp	r0, #48	; 0x30
 80149d4:	d0f7      	beq.n	80149c6 <__gethex+0x1e>
 80149d6:	f7ff ffd1 	bl	801497c <__hexdig_fun>
 80149da:	4604      	mov	r4, r0
 80149dc:	2800      	cmp	r0, #0
 80149de:	d138      	bne.n	8014a52 <__gethex+0xaa>
 80149e0:	49a7      	ldr	r1, [pc, #668]	; (8014c80 <__gethex+0x2d8>)
 80149e2:	2201      	movs	r2, #1
 80149e4:	4640      	mov	r0, r8
 80149e6:	f7ff ff27 	bl	8014838 <strncmp>
 80149ea:	4606      	mov	r6, r0
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d169      	bne.n	8014ac4 <__gethex+0x11c>
 80149f0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80149f4:	465d      	mov	r5, fp
 80149f6:	f7ff ffc1 	bl	801497c <__hexdig_fun>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	d064      	beq.n	8014ac8 <__gethex+0x120>
 80149fe:	465a      	mov	r2, fp
 8014a00:	7810      	ldrb	r0, [r2, #0]
 8014a02:	2830      	cmp	r0, #48	; 0x30
 8014a04:	4690      	mov	r8, r2
 8014a06:	f102 0201 	add.w	r2, r2, #1
 8014a0a:	d0f9      	beq.n	8014a00 <__gethex+0x58>
 8014a0c:	f7ff ffb6 	bl	801497c <__hexdig_fun>
 8014a10:	2301      	movs	r3, #1
 8014a12:	fab0 f480 	clz	r4, r0
 8014a16:	0964      	lsrs	r4, r4, #5
 8014a18:	465e      	mov	r6, fp
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	4642      	mov	r2, r8
 8014a1e:	4615      	mov	r5, r2
 8014a20:	3201      	adds	r2, #1
 8014a22:	7828      	ldrb	r0, [r5, #0]
 8014a24:	f7ff ffaa 	bl	801497c <__hexdig_fun>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d1f8      	bne.n	8014a1e <__gethex+0x76>
 8014a2c:	4994      	ldr	r1, [pc, #592]	; (8014c80 <__gethex+0x2d8>)
 8014a2e:	2201      	movs	r2, #1
 8014a30:	4628      	mov	r0, r5
 8014a32:	f7ff ff01 	bl	8014838 <strncmp>
 8014a36:	b978      	cbnz	r0, 8014a58 <__gethex+0xb0>
 8014a38:	b946      	cbnz	r6, 8014a4c <__gethex+0xa4>
 8014a3a:	1c6e      	adds	r6, r5, #1
 8014a3c:	4632      	mov	r2, r6
 8014a3e:	4615      	mov	r5, r2
 8014a40:	3201      	adds	r2, #1
 8014a42:	7828      	ldrb	r0, [r5, #0]
 8014a44:	f7ff ff9a 	bl	801497c <__hexdig_fun>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d1f8      	bne.n	8014a3e <__gethex+0x96>
 8014a4c:	1b73      	subs	r3, r6, r5
 8014a4e:	009e      	lsls	r6, r3, #2
 8014a50:	e004      	b.n	8014a5c <__gethex+0xb4>
 8014a52:	2400      	movs	r4, #0
 8014a54:	4626      	mov	r6, r4
 8014a56:	e7e1      	b.n	8014a1c <__gethex+0x74>
 8014a58:	2e00      	cmp	r6, #0
 8014a5a:	d1f7      	bne.n	8014a4c <__gethex+0xa4>
 8014a5c:	782b      	ldrb	r3, [r5, #0]
 8014a5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a62:	2b50      	cmp	r3, #80	; 0x50
 8014a64:	d13d      	bne.n	8014ae2 <__gethex+0x13a>
 8014a66:	786b      	ldrb	r3, [r5, #1]
 8014a68:	2b2b      	cmp	r3, #43	; 0x2b
 8014a6a:	d02f      	beq.n	8014acc <__gethex+0x124>
 8014a6c:	2b2d      	cmp	r3, #45	; 0x2d
 8014a6e:	d031      	beq.n	8014ad4 <__gethex+0x12c>
 8014a70:	1c69      	adds	r1, r5, #1
 8014a72:	f04f 0b00 	mov.w	fp, #0
 8014a76:	7808      	ldrb	r0, [r1, #0]
 8014a78:	f7ff ff80 	bl	801497c <__hexdig_fun>
 8014a7c:	1e42      	subs	r2, r0, #1
 8014a7e:	b2d2      	uxtb	r2, r2
 8014a80:	2a18      	cmp	r2, #24
 8014a82:	d82e      	bhi.n	8014ae2 <__gethex+0x13a>
 8014a84:	f1a0 0210 	sub.w	r2, r0, #16
 8014a88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a8c:	f7ff ff76 	bl	801497c <__hexdig_fun>
 8014a90:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a94:	fa5f fc8c 	uxtb.w	ip, ip
 8014a98:	f1bc 0f18 	cmp.w	ip, #24
 8014a9c:	d91d      	bls.n	8014ada <__gethex+0x132>
 8014a9e:	f1bb 0f00 	cmp.w	fp, #0
 8014aa2:	d000      	beq.n	8014aa6 <__gethex+0xfe>
 8014aa4:	4252      	negs	r2, r2
 8014aa6:	4416      	add	r6, r2
 8014aa8:	f8ca 1000 	str.w	r1, [sl]
 8014aac:	b1dc      	cbz	r4, 8014ae6 <__gethex+0x13e>
 8014aae:	9b01      	ldr	r3, [sp, #4]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	bf14      	ite	ne
 8014ab4:	f04f 0800 	movne.w	r8, #0
 8014ab8:	f04f 0806 	moveq.w	r8, #6
 8014abc:	4640      	mov	r0, r8
 8014abe:	b005      	add	sp, #20
 8014ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac4:	4645      	mov	r5, r8
 8014ac6:	4626      	mov	r6, r4
 8014ac8:	2401      	movs	r4, #1
 8014aca:	e7c7      	b.n	8014a5c <__gethex+0xb4>
 8014acc:	f04f 0b00 	mov.w	fp, #0
 8014ad0:	1ca9      	adds	r1, r5, #2
 8014ad2:	e7d0      	b.n	8014a76 <__gethex+0xce>
 8014ad4:	f04f 0b01 	mov.w	fp, #1
 8014ad8:	e7fa      	b.n	8014ad0 <__gethex+0x128>
 8014ada:	230a      	movs	r3, #10
 8014adc:	fb03 0002 	mla	r0, r3, r2, r0
 8014ae0:	e7d0      	b.n	8014a84 <__gethex+0xdc>
 8014ae2:	4629      	mov	r1, r5
 8014ae4:	e7e0      	b.n	8014aa8 <__gethex+0x100>
 8014ae6:	eba5 0308 	sub.w	r3, r5, r8
 8014aea:	3b01      	subs	r3, #1
 8014aec:	4621      	mov	r1, r4
 8014aee:	2b07      	cmp	r3, #7
 8014af0:	dc0a      	bgt.n	8014b08 <__gethex+0x160>
 8014af2:	4648      	mov	r0, r9
 8014af4:	f7fe f980 	bl	8012df8 <_Balloc>
 8014af8:	4604      	mov	r4, r0
 8014afa:	b940      	cbnz	r0, 8014b0e <__gethex+0x166>
 8014afc:	4b61      	ldr	r3, [pc, #388]	; (8014c84 <__gethex+0x2dc>)
 8014afe:	4602      	mov	r2, r0
 8014b00:	21e4      	movs	r1, #228	; 0xe4
 8014b02:	4861      	ldr	r0, [pc, #388]	; (8014c88 <__gethex+0x2e0>)
 8014b04:	f7ff feb4 	bl	8014870 <__assert_func>
 8014b08:	3101      	adds	r1, #1
 8014b0a:	105b      	asrs	r3, r3, #1
 8014b0c:	e7ef      	b.n	8014aee <__gethex+0x146>
 8014b0e:	f100 0a14 	add.w	sl, r0, #20
 8014b12:	2300      	movs	r3, #0
 8014b14:	495a      	ldr	r1, [pc, #360]	; (8014c80 <__gethex+0x2d8>)
 8014b16:	f8cd a004 	str.w	sl, [sp, #4]
 8014b1a:	469b      	mov	fp, r3
 8014b1c:	45a8      	cmp	r8, r5
 8014b1e:	d342      	bcc.n	8014ba6 <__gethex+0x1fe>
 8014b20:	9801      	ldr	r0, [sp, #4]
 8014b22:	f840 bb04 	str.w	fp, [r0], #4
 8014b26:	eba0 000a 	sub.w	r0, r0, sl
 8014b2a:	1080      	asrs	r0, r0, #2
 8014b2c:	6120      	str	r0, [r4, #16]
 8014b2e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014b32:	4658      	mov	r0, fp
 8014b34:	f7fe fa52 	bl	8012fdc <__hi0bits>
 8014b38:	683d      	ldr	r5, [r7, #0]
 8014b3a:	eba8 0000 	sub.w	r0, r8, r0
 8014b3e:	42a8      	cmp	r0, r5
 8014b40:	dd59      	ble.n	8014bf6 <__gethex+0x24e>
 8014b42:	eba0 0805 	sub.w	r8, r0, r5
 8014b46:	4641      	mov	r1, r8
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f7fe fdde 	bl	801370a <__any_on>
 8014b4e:	4683      	mov	fp, r0
 8014b50:	b1b8      	cbz	r0, 8014b82 <__gethex+0x1da>
 8014b52:	f108 33ff 	add.w	r3, r8, #4294967295
 8014b56:	1159      	asrs	r1, r3, #5
 8014b58:	f003 021f 	and.w	r2, r3, #31
 8014b5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014b60:	f04f 0b01 	mov.w	fp, #1
 8014b64:	fa0b f202 	lsl.w	r2, fp, r2
 8014b68:	420a      	tst	r2, r1
 8014b6a:	d00a      	beq.n	8014b82 <__gethex+0x1da>
 8014b6c:	455b      	cmp	r3, fp
 8014b6e:	dd06      	ble.n	8014b7e <__gethex+0x1d6>
 8014b70:	f1a8 0102 	sub.w	r1, r8, #2
 8014b74:	4620      	mov	r0, r4
 8014b76:	f7fe fdc8 	bl	801370a <__any_on>
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d138      	bne.n	8014bf0 <__gethex+0x248>
 8014b7e:	f04f 0b02 	mov.w	fp, #2
 8014b82:	4641      	mov	r1, r8
 8014b84:	4620      	mov	r0, r4
 8014b86:	f7ff fea7 	bl	80148d8 <rshift>
 8014b8a:	4446      	add	r6, r8
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	42b3      	cmp	r3, r6
 8014b90:	da41      	bge.n	8014c16 <__gethex+0x26e>
 8014b92:	4621      	mov	r1, r4
 8014b94:	4648      	mov	r0, r9
 8014b96:	f7fe f96f 	bl	8012e78 <_Bfree>
 8014b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	6013      	str	r3, [r2, #0]
 8014ba0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014ba4:	e78a      	b.n	8014abc <__gethex+0x114>
 8014ba6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014baa:	2a2e      	cmp	r2, #46	; 0x2e
 8014bac:	d014      	beq.n	8014bd8 <__gethex+0x230>
 8014bae:	2b20      	cmp	r3, #32
 8014bb0:	d106      	bne.n	8014bc0 <__gethex+0x218>
 8014bb2:	9b01      	ldr	r3, [sp, #4]
 8014bb4:	f843 bb04 	str.w	fp, [r3], #4
 8014bb8:	f04f 0b00 	mov.w	fp, #0
 8014bbc:	9301      	str	r3, [sp, #4]
 8014bbe:	465b      	mov	r3, fp
 8014bc0:	7828      	ldrb	r0, [r5, #0]
 8014bc2:	9303      	str	r3, [sp, #12]
 8014bc4:	f7ff feda 	bl	801497c <__hexdig_fun>
 8014bc8:	9b03      	ldr	r3, [sp, #12]
 8014bca:	f000 000f 	and.w	r0, r0, #15
 8014bce:	4098      	lsls	r0, r3
 8014bd0:	ea4b 0b00 	orr.w	fp, fp, r0
 8014bd4:	3304      	adds	r3, #4
 8014bd6:	e7a1      	b.n	8014b1c <__gethex+0x174>
 8014bd8:	45a8      	cmp	r8, r5
 8014bda:	d8e8      	bhi.n	8014bae <__gethex+0x206>
 8014bdc:	2201      	movs	r2, #1
 8014bde:	4628      	mov	r0, r5
 8014be0:	9303      	str	r3, [sp, #12]
 8014be2:	f7ff fe29 	bl	8014838 <strncmp>
 8014be6:	4926      	ldr	r1, [pc, #152]	; (8014c80 <__gethex+0x2d8>)
 8014be8:	9b03      	ldr	r3, [sp, #12]
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d1df      	bne.n	8014bae <__gethex+0x206>
 8014bee:	e795      	b.n	8014b1c <__gethex+0x174>
 8014bf0:	f04f 0b03 	mov.w	fp, #3
 8014bf4:	e7c5      	b.n	8014b82 <__gethex+0x1da>
 8014bf6:	da0b      	bge.n	8014c10 <__gethex+0x268>
 8014bf8:	eba5 0800 	sub.w	r8, r5, r0
 8014bfc:	4621      	mov	r1, r4
 8014bfe:	4642      	mov	r2, r8
 8014c00:	4648      	mov	r0, r9
 8014c02:	f7fe fb53 	bl	80132ac <__lshift>
 8014c06:	eba6 0608 	sub.w	r6, r6, r8
 8014c0a:	4604      	mov	r4, r0
 8014c0c:	f100 0a14 	add.w	sl, r0, #20
 8014c10:	f04f 0b00 	mov.w	fp, #0
 8014c14:	e7ba      	b.n	8014b8c <__gethex+0x1e4>
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	42b3      	cmp	r3, r6
 8014c1a:	dd73      	ble.n	8014d04 <__gethex+0x35c>
 8014c1c:	1b9e      	subs	r6, r3, r6
 8014c1e:	42b5      	cmp	r5, r6
 8014c20:	dc34      	bgt.n	8014c8c <__gethex+0x2e4>
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	2b02      	cmp	r3, #2
 8014c26:	d023      	beq.n	8014c70 <__gethex+0x2c8>
 8014c28:	2b03      	cmp	r3, #3
 8014c2a:	d025      	beq.n	8014c78 <__gethex+0x2d0>
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d115      	bne.n	8014c5c <__gethex+0x2b4>
 8014c30:	42b5      	cmp	r5, r6
 8014c32:	d113      	bne.n	8014c5c <__gethex+0x2b4>
 8014c34:	2d01      	cmp	r5, #1
 8014c36:	d10b      	bne.n	8014c50 <__gethex+0x2a8>
 8014c38:	9a02      	ldr	r2, [sp, #8]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	2301      	movs	r3, #1
 8014c40:	6123      	str	r3, [r4, #16]
 8014c42:	f8ca 3000 	str.w	r3, [sl]
 8014c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c48:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014c4c:	601c      	str	r4, [r3, #0]
 8014c4e:	e735      	b.n	8014abc <__gethex+0x114>
 8014c50:	1e69      	subs	r1, r5, #1
 8014c52:	4620      	mov	r0, r4
 8014c54:	f7fe fd59 	bl	801370a <__any_on>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d1ed      	bne.n	8014c38 <__gethex+0x290>
 8014c5c:	4621      	mov	r1, r4
 8014c5e:	4648      	mov	r0, r9
 8014c60:	f7fe f90a 	bl	8012e78 <_Bfree>
 8014c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c66:	2300      	movs	r3, #0
 8014c68:	6013      	str	r3, [r2, #0]
 8014c6a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014c6e:	e725      	b.n	8014abc <__gethex+0x114>
 8014c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d1f2      	bne.n	8014c5c <__gethex+0x2b4>
 8014c76:	e7df      	b.n	8014c38 <__gethex+0x290>
 8014c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d1dc      	bne.n	8014c38 <__gethex+0x290>
 8014c7e:	e7ed      	b.n	8014c5c <__gethex+0x2b4>
 8014c80:	0801590c 	.word	0x0801590c
 8014c84:	080157a5 	.word	0x080157a5
 8014c88:	08015ab6 	.word	0x08015ab6
 8014c8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014c90:	f1bb 0f00 	cmp.w	fp, #0
 8014c94:	d133      	bne.n	8014cfe <__gethex+0x356>
 8014c96:	f1b8 0f00 	cmp.w	r8, #0
 8014c9a:	d004      	beq.n	8014ca6 <__gethex+0x2fe>
 8014c9c:	4641      	mov	r1, r8
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f7fe fd33 	bl	801370a <__any_on>
 8014ca4:	4683      	mov	fp, r0
 8014ca6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014caa:	2301      	movs	r3, #1
 8014cac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014cb0:	f008 081f 	and.w	r8, r8, #31
 8014cb4:	fa03 f308 	lsl.w	r3, r3, r8
 8014cb8:	4213      	tst	r3, r2
 8014cba:	4631      	mov	r1, r6
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	bf18      	it	ne
 8014cc0:	f04b 0b02 	orrne.w	fp, fp, #2
 8014cc4:	1bad      	subs	r5, r5, r6
 8014cc6:	f7ff fe07 	bl	80148d8 <rshift>
 8014cca:	687e      	ldr	r6, [r7, #4]
 8014ccc:	f04f 0802 	mov.w	r8, #2
 8014cd0:	f1bb 0f00 	cmp.w	fp, #0
 8014cd4:	d04a      	beq.n	8014d6c <__gethex+0x3c4>
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d016      	beq.n	8014d0a <__gethex+0x362>
 8014cdc:	2b03      	cmp	r3, #3
 8014cde:	d018      	beq.n	8014d12 <__gethex+0x36a>
 8014ce0:	2b01      	cmp	r3, #1
 8014ce2:	d109      	bne.n	8014cf8 <__gethex+0x350>
 8014ce4:	f01b 0f02 	tst.w	fp, #2
 8014ce8:	d006      	beq.n	8014cf8 <__gethex+0x350>
 8014cea:	f8da 3000 	ldr.w	r3, [sl]
 8014cee:	ea4b 0b03 	orr.w	fp, fp, r3
 8014cf2:	f01b 0f01 	tst.w	fp, #1
 8014cf6:	d10f      	bne.n	8014d18 <__gethex+0x370>
 8014cf8:	f048 0810 	orr.w	r8, r8, #16
 8014cfc:	e036      	b.n	8014d6c <__gethex+0x3c4>
 8014cfe:	f04f 0b01 	mov.w	fp, #1
 8014d02:	e7d0      	b.n	8014ca6 <__gethex+0x2fe>
 8014d04:	f04f 0801 	mov.w	r8, #1
 8014d08:	e7e2      	b.n	8014cd0 <__gethex+0x328>
 8014d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d0c:	f1c3 0301 	rsb	r3, r3, #1
 8014d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d0ef      	beq.n	8014cf8 <__gethex+0x350>
 8014d18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014d1c:	f104 0214 	add.w	r2, r4, #20
 8014d20:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014d24:	9301      	str	r3, [sp, #4]
 8014d26:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	4694      	mov	ip, r2
 8014d2e:	f852 1b04 	ldr.w	r1, [r2], #4
 8014d32:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014d36:	d01e      	beq.n	8014d76 <__gethex+0x3ce>
 8014d38:	3101      	adds	r1, #1
 8014d3a:	f8cc 1000 	str.w	r1, [ip]
 8014d3e:	f1b8 0f02 	cmp.w	r8, #2
 8014d42:	f104 0214 	add.w	r2, r4, #20
 8014d46:	d13d      	bne.n	8014dc4 <__gethex+0x41c>
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	42ab      	cmp	r3, r5
 8014d4e:	d10b      	bne.n	8014d68 <__gethex+0x3c0>
 8014d50:	1169      	asrs	r1, r5, #5
 8014d52:	2301      	movs	r3, #1
 8014d54:	f005 051f 	and.w	r5, r5, #31
 8014d58:	fa03 f505 	lsl.w	r5, r3, r5
 8014d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d60:	421d      	tst	r5, r3
 8014d62:	bf18      	it	ne
 8014d64:	f04f 0801 	movne.w	r8, #1
 8014d68:	f048 0820 	orr.w	r8, r8, #32
 8014d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d6e:	601c      	str	r4, [r3, #0]
 8014d70:	9b02      	ldr	r3, [sp, #8]
 8014d72:	601e      	str	r6, [r3, #0]
 8014d74:	e6a2      	b.n	8014abc <__gethex+0x114>
 8014d76:	4290      	cmp	r0, r2
 8014d78:	f842 3c04 	str.w	r3, [r2, #-4]
 8014d7c:	d8d6      	bhi.n	8014d2c <__gethex+0x384>
 8014d7e:	68a2      	ldr	r2, [r4, #8]
 8014d80:	4593      	cmp	fp, r2
 8014d82:	db17      	blt.n	8014db4 <__gethex+0x40c>
 8014d84:	6861      	ldr	r1, [r4, #4]
 8014d86:	4648      	mov	r0, r9
 8014d88:	3101      	adds	r1, #1
 8014d8a:	f7fe f835 	bl	8012df8 <_Balloc>
 8014d8e:	4682      	mov	sl, r0
 8014d90:	b918      	cbnz	r0, 8014d9a <__gethex+0x3f2>
 8014d92:	4b1b      	ldr	r3, [pc, #108]	; (8014e00 <__gethex+0x458>)
 8014d94:	4602      	mov	r2, r0
 8014d96:	2184      	movs	r1, #132	; 0x84
 8014d98:	e6b3      	b.n	8014b02 <__gethex+0x15a>
 8014d9a:	6922      	ldr	r2, [r4, #16]
 8014d9c:	3202      	adds	r2, #2
 8014d9e:	f104 010c 	add.w	r1, r4, #12
 8014da2:	0092      	lsls	r2, r2, #2
 8014da4:	300c      	adds	r0, #12
 8014da6:	f7fd f9d0 	bl	801214a <memcpy>
 8014daa:	4621      	mov	r1, r4
 8014dac:	4648      	mov	r0, r9
 8014dae:	f7fe f863 	bl	8012e78 <_Bfree>
 8014db2:	4654      	mov	r4, sl
 8014db4:	6922      	ldr	r2, [r4, #16]
 8014db6:	1c51      	adds	r1, r2, #1
 8014db8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014dbc:	6121      	str	r1, [r4, #16]
 8014dbe:	2101      	movs	r1, #1
 8014dc0:	6151      	str	r1, [r2, #20]
 8014dc2:	e7bc      	b.n	8014d3e <__gethex+0x396>
 8014dc4:	6921      	ldr	r1, [r4, #16]
 8014dc6:	4559      	cmp	r1, fp
 8014dc8:	dd0b      	ble.n	8014de2 <__gethex+0x43a>
 8014dca:	2101      	movs	r1, #1
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f7ff fd83 	bl	80148d8 <rshift>
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	3601      	adds	r6, #1
 8014dd6:	42b3      	cmp	r3, r6
 8014dd8:	f6ff aedb 	blt.w	8014b92 <__gethex+0x1ea>
 8014ddc:	f04f 0801 	mov.w	r8, #1
 8014de0:	e7c2      	b.n	8014d68 <__gethex+0x3c0>
 8014de2:	f015 051f 	ands.w	r5, r5, #31
 8014de6:	d0f9      	beq.n	8014ddc <__gethex+0x434>
 8014de8:	9b01      	ldr	r3, [sp, #4]
 8014dea:	441a      	add	r2, r3
 8014dec:	f1c5 0520 	rsb	r5, r5, #32
 8014df0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014df4:	f7fe f8f2 	bl	8012fdc <__hi0bits>
 8014df8:	42a8      	cmp	r0, r5
 8014dfa:	dbe6      	blt.n	8014dca <__gethex+0x422>
 8014dfc:	e7ee      	b.n	8014ddc <__gethex+0x434>
 8014dfe:	bf00      	nop
 8014e00:	080157a5 	.word	0x080157a5

08014e04 <L_shift>:
 8014e04:	f1c2 0208 	rsb	r2, r2, #8
 8014e08:	0092      	lsls	r2, r2, #2
 8014e0a:	b570      	push	{r4, r5, r6, lr}
 8014e0c:	f1c2 0620 	rsb	r6, r2, #32
 8014e10:	6843      	ldr	r3, [r0, #4]
 8014e12:	6804      	ldr	r4, [r0, #0]
 8014e14:	fa03 f506 	lsl.w	r5, r3, r6
 8014e18:	432c      	orrs	r4, r5
 8014e1a:	40d3      	lsrs	r3, r2
 8014e1c:	6004      	str	r4, [r0, #0]
 8014e1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014e22:	4288      	cmp	r0, r1
 8014e24:	d3f4      	bcc.n	8014e10 <L_shift+0xc>
 8014e26:	bd70      	pop	{r4, r5, r6, pc}

08014e28 <__match>:
 8014e28:	b530      	push	{r4, r5, lr}
 8014e2a:	6803      	ldr	r3, [r0, #0]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e32:	b914      	cbnz	r4, 8014e3a <__match+0x12>
 8014e34:	6003      	str	r3, [r0, #0]
 8014e36:	2001      	movs	r0, #1
 8014e38:	bd30      	pop	{r4, r5, pc}
 8014e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014e42:	2d19      	cmp	r5, #25
 8014e44:	bf98      	it	ls
 8014e46:	3220      	addls	r2, #32
 8014e48:	42a2      	cmp	r2, r4
 8014e4a:	d0f0      	beq.n	8014e2e <__match+0x6>
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	e7f3      	b.n	8014e38 <__match+0x10>

08014e50 <__hexnan>:
 8014e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e54:	680b      	ldr	r3, [r1, #0]
 8014e56:	6801      	ldr	r1, [r0, #0]
 8014e58:	115e      	asrs	r6, r3, #5
 8014e5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014e5e:	f013 031f 	ands.w	r3, r3, #31
 8014e62:	b087      	sub	sp, #28
 8014e64:	bf18      	it	ne
 8014e66:	3604      	addne	r6, #4
 8014e68:	2500      	movs	r5, #0
 8014e6a:	1f37      	subs	r7, r6, #4
 8014e6c:	4682      	mov	sl, r0
 8014e6e:	4690      	mov	r8, r2
 8014e70:	9301      	str	r3, [sp, #4]
 8014e72:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e76:	46b9      	mov	r9, r7
 8014e78:	463c      	mov	r4, r7
 8014e7a:	9502      	str	r5, [sp, #8]
 8014e7c:	46ab      	mov	fp, r5
 8014e7e:	784a      	ldrb	r2, [r1, #1]
 8014e80:	1c4b      	adds	r3, r1, #1
 8014e82:	9303      	str	r3, [sp, #12]
 8014e84:	b342      	cbz	r2, 8014ed8 <__hexnan+0x88>
 8014e86:	4610      	mov	r0, r2
 8014e88:	9105      	str	r1, [sp, #20]
 8014e8a:	9204      	str	r2, [sp, #16]
 8014e8c:	f7ff fd76 	bl	801497c <__hexdig_fun>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d14f      	bne.n	8014f34 <__hexnan+0xe4>
 8014e94:	9a04      	ldr	r2, [sp, #16]
 8014e96:	9905      	ldr	r1, [sp, #20]
 8014e98:	2a20      	cmp	r2, #32
 8014e9a:	d818      	bhi.n	8014ece <__hexnan+0x7e>
 8014e9c:	9b02      	ldr	r3, [sp, #8]
 8014e9e:	459b      	cmp	fp, r3
 8014ea0:	dd13      	ble.n	8014eca <__hexnan+0x7a>
 8014ea2:	454c      	cmp	r4, r9
 8014ea4:	d206      	bcs.n	8014eb4 <__hexnan+0x64>
 8014ea6:	2d07      	cmp	r5, #7
 8014ea8:	dc04      	bgt.n	8014eb4 <__hexnan+0x64>
 8014eaa:	462a      	mov	r2, r5
 8014eac:	4649      	mov	r1, r9
 8014eae:	4620      	mov	r0, r4
 8014eb0:	f7ff ffa8 	bl	8014e04 <L_shift>
 8014eb4:	4544      	cmp	r4, r8
 8014eb6:	d950      	bls.n	8014f5a <__hexnan+0x10a>
 8014eb8:	2300      	movs	r3, #0
 8014eba:	f1a4 0904 	sub.w	r9, r4, #4
 8014ebe:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ec2:	f8cd b008 	str.w	fp, [sp, #8]
 8014ec6:	464c      	mov	r4, r9
 8014ec8:	461d      	mov	r5, r3
 8014eca:	9903      	ldr	r1, [sp, #12]
 8014ecc:	e7d7      	b.n	8014e7e <__hexnan+0x2e>
 8014ece:	2a29      	cmp	r2, #41	; 0x29
 8014ed0:	d155      	bne.n	8014f7e <__hexnan+0x12e>
 8014ed2:	3102      	adds	r1, #2
 8014ed4:	f8ca 1000 	str.w	r1, [sl]
 8014ed8:	f1bb 0f00 	cmp.w	fp, #0
 8014edc:	d04f      	beq.n	8014f7e <__hexnan+0x12e>
 8014ede:	454c      	cmp	r4, r9
 8014ee0:	d206      	bcs.n	8014ef0 <__hexnan+0xa0>
 8014ee2:	2d07      	cmp	r5, #7
 8014ee4:	dc04      	bgt.n	8014ef0 <__hexnan+0xa0>
 8014ee6:	462a      	mov	r2, r5
 8014ee8:	4649      	mov	r1, r9
 8014eea:	4620      	mov	r0, r4
 8014eec:	f7ff ff8a 	bl	8014e04 <L_shift>
 8014ef0:	4544      	cmp	r4, r8
 8014ef2:	d934      	bls.n	8014f5e <__hexnan+0x10e>
 8014ef4:	f1a8 0204 	sub.w	r2, r8, #4
 8014ef8:	4623      	mov	r3, r4
 8014efa:	f853 1b04 	ldr.w	r1, [r3], #4
 8014efe:	f842 1f04 	str.w	r1, [r2, #4]!
 8014f02:	429f      	cmp	r7, r3
 8014f04:	d2f9      	bcs.n	8014efa <__hexnan+0xaa>
 8014f06:	1b3b      	subs	r3, r7, r4
 8014f08:	f023 0303 	bic.w	r3, r3, #3
 8014f0c:	3304      	adds	r3, #4
 8014f0e:	3e03      	subs	r6, #3
 8014f10:	3401      	adds	r4, #1
 8014f12:	42a6      	cmp	r6, r4
 8014f14:	bf38      	it	cc
 8014f16:	2304      	movcc	r3, #4
 8014f18:	4443      	add	r3, r8
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f843 2b04 	str.w	r2, [r3], #4
 8014f20:	429f      	cmp	r7, r3
 8014f22:	d2fb      	bcs.n	8014f1c <__hexnan+0xcc>
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	b91b      	cbnz	r3, 8014f30 <__hexnan+0xe0>
 8014f28:	4547      	cmp	r7, r8
 8014f2a:	d126      	bne.n	8014f7a <__hexnan+0x12a>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	603b      	str	r3, [r7, #0]
 8014f30:	2005      	movs	r0, #5
 8014f32:	e025      	b.n	8014f80 <__hexnan+0x130>
 8014f34:	3501      	adds	r5, #1
 8014f36:	2d08      	cmp	r5, #8
 8014f38:	f10b 0b01 	add.w	fp, fp, #1
 8014f3c:	dd06      	ble.n	8014f4c <__hexnan+0xfc>
 8014f3e:	4544      	cmp	r4, r8
 8014f40:	d9c3      	bls.n	8014eca <__hexnan+0x7a>
 8014f42:	2300      	movs	r3, #0
 8014f44:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f48:	2501      	movs	r5, #1
 8014f4a:	3c04      	subs	r4, #4
 8014f4c:	6822      	ldr	r2, [r4, #0]
 8014f4e:	f000 000f 	and.w	r0, r0, #15
 8014f52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014f56:	6020      	str	r0, [r4, #0]
 8014f58:	e7b7      	b.n	8014eca <__hexnan+0x7a>
 8014f5a:	2508      	movs	r5, #8
 8014f5c:	e7b5      	b.n	8014eca <__hexnan+0x7a>
 8014f5e:	9b01      	ldr	r3, [sp, #4]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d0df      	beq.n	8014f24 <__hexnan+0xd4>
 8014f64:	f1c3 0320 	rsb	r3, r3, #32
 8014f68:	f04f 32ff 	mov.w	r2, #4294967295
 8014f6c:	40da      	lsrs	r2, r3
 8014f6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014f72:	4013      	ands	r3, r2
 8014f74:	f846 3c04 	str.w	r3, [r6, #-4]
 8014f78:	e7d4      	b.n	8014f24 <__hexnan+0xd4>
 8014f7a:	3f04      	subs	r7, #4
 8014f7c:	e7d2      	b.n	8014f24 <__hexnan+0xd4>
 8014f7e:	2004      	movs	r0, #4
 8014f80:	b007      	add	sp, #28
 8014f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f86 <__ascii_mbtowc>:
 8014f86:	b082      	sub	sp, #8
 8014f88:	b901      	cbnz	r1, 8014f8c <__ascii_mbtowc+0x6>
 8014f8a:	a901      	add	r1, sp, #4
 8014f8c:	b142      	cbz	r2, 8014fa0 <__ascii_mbtowc+0x1a>
 8014f8e:	b14b      	cbz	r3, 8014fa4 <__ascii_mbtowc+0x1e>
 8014f90:	7813      	ldrb	r3, [r2, #0]
 8014f92:	600b      	str	r3, [r1, #0]
 8014f94:	7812      	ldrb	r2, [r2, #0]
 8014f96:	1e10      	subs	r0, r2, #0
 8014f98:	bf18      	it	ne
 8014f9a:	2001      	movne	r0, #1
 8014f9c:	b002      	add	sp, #8
 8014f9e:	4770      	bx	lr
 8014fa0:	4610      	mov	r0, r2
 8014fa2:	e7fb      	b.n	8014f9c <__ascii_mbtowc+0x16>
 8014fa4:	f06f 0001 	mvn.w	r0, #1
 8014fa8:	e7f8      	b.n	8014f9c <__ascii_mbtowc+0x16>

08014faa <_realloc_r>:
 8014faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fae:	4680      	mov	r8, r0
 8014fb0:	4614      	mov	r4, r2
 8014fb2:	460e      	mov	r6, r1
 8014fb4:	b921      	cbnz	r1, 8014fc0 <_realloc_r+0x16>
 8014fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fba:	4611      	mov	r1, r2
 8014fbc:	f7fb bfba 	b.w	8010f34 <_malloc_r>
 8014fc0:	b92a      	cbnz	r2, 8014fce <_realloc_r+0x24>
 8014fc2:	f7fd fecd 	bl	8012d60 <_free_r>
 8014fc6:	4625      	mov	r5, r4
 8014fc8:	4628      	mov	r0, r5
 8014fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fce:	f000 f842 	bl	8015056 <_malloc_usable_size_r>
 8014fd2:	4284      	cmp	r4, r0
 8014fd4:	4607      	mov	r7, r0
 8014fd6:	d802      	bhi.n	8014fde <_realloc_r+0x34>
 8014fd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014fdc:	d812      	bhi.n	8015004 <_realloc_r+0x5a>
 8014fde:	4621      	mov	r1, r4
 8014fe0:	4640      	mov	r0, r8
 8014fe2:	f7fb ffa7 	bl	8010f34 <_malloc_r>
 8014fe6:	4605      	mov	r5, r0
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	d0ed      	beq.n	8014fc8 <_realloc_r+0x1e>
 8014fec:	42bc      	cmp	r4, r7
 8014fee:	4622      	mov	r2, r4
 8014ff0:	4631      	mov	r1, r6
 8014ff2:	bf28      	it	cs
 8014ff4:	463a      	movcs	r2, r7
 8014ff6:	f7fd f8a8 	bl	801214a <memcpy>
 8014ffa:	4631      	mov	r1, r6
 8014ffc:	4640      	mov	r0, r8
 8014ffe:	f7fd feaf 	bl	8012d60 <_free_r>
 8015002:	e7e1      	b.n	8014fc8 <_realloc_r+0x1e>
 8015004:	4635      	mov	r5, r6
 8015006:	e7df      	b.n	8014fc8 <_realloc_r+0x1e>

08015008 <__ascii_wctomb>:
 8015008:	b149      	cbz	r1, 801501e <__ascii_wctomb+0x16>
 801500a:	2aff      	cmp	r2, #255	; 0xff
 801500c:	bf85      	ittet	hi
 801500e:	238a      	movhi	r3, #138	; 0x8a
 8015010:	6003      	strhi	r3, [r0, #0]
 8015012:	700a      	strbls	r2, [r1, #0]
 8015014:	f04f 30ff 	movhi.w	r0, #4294967295
 8015018:	bf98      	it	ls
 801501a:	2001      	movls	r0, #1
 801501c:	4770      	bx	lr
 801501e:	4608      	mov	r0, r1
 8015020:	4770      	bx	lr
	...

08015024 <fiprintf>:
 8015024:	b40e      	push	{r1, r2, r3}
 8015026:	b503      	push	{r0, r1, lr}
 8015028:	4601      	mov	r1, r0
 801502a:	ab03      	add	r3, sp, #12
 801502c:	4805      	ldr	r0, [pc, #20]	; (8015044 <fiprintf+0x20>)
 801502e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015032:	6800      	ldr	r0, [r0, #0]
 8015034:	9301      	str	r3, [sp, #4]
 8015036:	f000 f83f 	bl	80150b8 <_vfiprintf_r>
 801503a:	b002      	add	sp, #8
 801503c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015040:	b003      	add	sp, #12
 8015042:	4770      	bx	lr
 8015044:	2400006c 	.word	0x2400006c

08015048 <abort>:
 8015048:	b508      	push	{r3, lr}
 801504a:	2006      	movs	r0, #6
 801504c:	f000 fa0c 	bl	8015468 <raise>
 8015050:	2001      	movs	r0, #1
 8015052:	f7ed fc9b 	bl	800298c <_exit>

08015056 <_malloc_usable_size_r>:
 8015056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801505a:	1f18      	subs	r0, r3, #4
 801505c:	2b00      	cmp	r3, #0
 801505e:	bfbc      	itt	lt
 8015060:	580b      	ldrlt	r3, [r1, r0]
 8015062:	18c0      	addlt	r0, r0, r3
 8015064:	4770      	bx	lr

08015066 <__sfputc_r>:
 8015066:	6893      	ldr	r3, [r2, #8]
 8015068:	3b01      	subs	r3, #1
 801506a:	2b00      	cmp	r3, #0
 801506c:	b410      	push	{r4}
 801506e:	6093      	str	r3, [r2, #8]
 8015070:	da08      	bge.n	8015084 <__sfputc_r+0x1e>
 8015072:	6994      	ldr	r4, [r2, #24]
 8015074:	42a3      	cmp	r3, r4
 8015076:	db01      	blt.n	801507c <__sfputc_r+0x16>
 8015078:	290a      	cmp	r1, #10
 801507a:	d103      	bne.n	8015084 <__sfputc_r+0x1e>
 801507c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015080:	f000 b934 	b.w	80152ec <__swbuf_r>
 8015084:	6813      	ldr	r3, [r2, #0]
 8015086:	1c58      	adds	r0, r3, #1
 8015088:	6010      	str	r0, [r2, #0]
 801508a:	7019      	strb	r1, [r3, #0]
 801508c:	4608      	mov	r0, r1
 801508e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015092:	4770      	bx	lr

08015094 <__sfputs_r>:
 8015094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015096:	4606      	mov	r6, r0
 8015098:	460f      	mov	r7, r1
 801509a:	4614      	mov	r4, r2
 801509c:	18d5      	adds	r5, r2, r3
 801509e:	42ac      	cmp	r4, r5
 80150a0:	d101      	bne.n	80150a6 <__sfputs_r+0x12>
 80150a2:	2000      	movs	r0, #0
 80150a4:	e007      	b.n	80150b6 <__sfputs_r+0x22>
 80150a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150aa:	463a      	mov	r2, r7
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff ffda 	bl	8015066 <__sfputc_r>
 80150b2:	1c43      	adds	r3, r0, #1
 80150b4:	d1f3      	bne.n	801509e <__sfputs_r+0xa>
 80150b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080150b8 <_vfiprintf_r>:
 80150b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150bc:	460d      	mov	r5, r1
 80150be:	b09d      	sub	sp, #116	; 0x74
 80150c0:	4614      	mov	r4, r2
 80150c2:	4698      	mov	r8, r3
 80150c4:	4606      	mov	r6, r0
 80150c6:	b118      	cbz	r0, 80150d0 <_vfiprintf_r+0x18>
 80150c8:	6a03      	ldr	r3, [r0, #32]
 80150ca:	b90b      	cbnz	r3, 80150d0 <_vfiprintf_r+0x18>
 80150cc:	f7fc fe8a 	bl	8011de4 <__sinit>
 80150d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150d2:	07d9      	lsls	r1, r3, #31
 80150d4:	d405      	bmi.n	80150e2 <_vfiprintf_r+0x2a>
 80150d6:	89ab      	ldrh	r3, [r5, #12]
 80150d8:	059a      	lsls	r2, r3, #22
 80150da:	d402      	bmi.n	80150e2 <_vfiprintf_r+0x2a>
 80150dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150de:	f7fd f832 	bl	8012146 <__retarget_lock_acquire_recursive>
 80150e2:	89ab      	ldrh	r3, [r5, #12]
 80150e4:	071b      	lsls	r3, r3, #28
 80150e6:	d501      	bpl.n	80150ec <_vfiprintf_r+0x34>
 80150e8:	692b      	ldr	r3, [r5, #16]
 80150ea:	b99b      	cbnz	r3, 8015114 <_vfiprintf_r+0x5c>
 80150ec:	4629      	mov	r1, r5
 80150ee:	4630      	mov	r0, r6
 80150f0:	f000 f93a 	bl	8015368 <__swsetup_r>
 80150f4:	b170      	cbz	r0, 8015114 <_vfiprintf_r+0x5c>
 80150f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150f8:	07dc      	lsls	r4, r3, #31
 80150fa:	d504      	bpl.n	8015106 <_vfiprintf_r+0x4e>
 80150fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015100:	b01d      	add	sp, #116	; 0x74
 8015102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015106:	89ab      	ldrh	r3, [r5, #12]
 8015108:	0598      	lsls	r0, r3, #22
 801510a:	d4f7      	bmi.n	80150fc <_vfiprintf_r+0x44>
 801510c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801510e:	f7fd f81b 	bl	8012148 <__retarget_lock_release_recursive>
 8015112:	e7f3      	b.n	80150fc <_vfiprintf_r+0x44>
 8015114:	2300      	movs	r3, #0
 8015116:	9309      	str	r3, [sp, #36]	; 0x24
 8015118:	2320      	movs	r3, #32
 801511a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801511e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015122:	2330      	movs	r3, #48	; 0x30
 8015124:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80152d8 <_vfiprintf_r+0x220>
 8015128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801512c:	f04f 0901 	mov.w	r9, #1
 8015130:	4623      	mov	r3, r4
 8015132:	469a      	mov	sl, r3
 8015134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015138:	b10a      	cbz	r2, 801513e <_vfiprintf_r+0x86>
 801513a:	2a25      	cmp	r2, #37	; 0x25
 801513c:	d1f9      	bne.n	8015132 <_vfiprintf_r+0x7a>
 801513e:	ebba 0b04 	subs.w	fp, sl, r4
 8015142:	d00b      	beq.n	801515c <_vfiprintf_r+0xa4>
 8015144:	465b      	mov	r3, fp
 8015146:	4622      	mov	r2, r4
 8015148:	4629      	mov	r1, r5
 801514a:	4630      	mov	r0, r6
 801514c:	f7ff ffa2 	bl	8015094 <__sfputs_r>
 8015150:	3001      	adds	r0, #1
 8015152:	f000 80a9 	beq.w	80152a8 <_vfiprintf_r+0x1f0>
 8015156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015158:	445a      	add	r2, fp
 801515a:	9209      	str	r2, [sp, #36]	; 0x24
 801515c:	f89a 3000 	ldrb.w	r3, [sl]
 8015160:	2b00      	cmp	r3, #0
 8015162:	f000 80a1 	beq.w	80152a8 <_vfiprintf_r+0x1f0>
 8015166:	2300      	movs	r3, #0
 8015168:	f04f 32ff 	mov.w	r2, #4294967295
 801516c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015170:	f10a 0a01 	add.w	sl, sl, #1
 8015174:	9304      	str	r3, [sp, #16]
 8015176:	9307      	str	r3, [sp, #28]
 8015178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801517c:	931a      	str	r3, [sp, #104]	; 0x68
 801517e:	4654      	mov	r4, sl
 8015180:	2205      	movs	r2, #5
 8015182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015186:	4854      	ldr	r0, [pc, #336]	; (80152d8 <_vfiprintf_r+0x220>)
 8015188:	f7eb f8aa 	bl	80002e0 <memchr>
 801518c:	9a04      	ldr	r2, [sp, #16]
 801518e:	b9d8      	cbnz	r0, 80151c8 <_vfiprintf_r+0x110>
 8015190:	06d1      	lsls	r1, r2, #27
 8015192:	bf44      	itt	mi
 8015194:	2320      	movmi	r3, #32
 8015196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801519a:	0713      	lsls	r3, r2, #28
 801519c:	bf44      	itt	mi
 801519e:	232b      	movmi	r3, #43	; 0x2b
 80151a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151a4:	f89a 3000 	ldrb.w	r3, [sl]
 80151a8:	2b2a      	cmp	r3, #42	; 0x2a
 80151aa:	d015      	beq.n	80151d8 <_vfiprintf_r+0x120>
 80151ac:	9a07      	ldr	r2, [sp, #28]
 80151ae:	4654      	mov	r4, sl
 80151b0:	2000      	movs	r0, #0
 80151b2:	f04f 0c0a 	mov.w	ip, #10
 80151b6:	4621      	mov	r1, r4
 80151b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151bc:	3b30      	subs	r3, #48	; 0x30
 80151be:	2b09      	cmp	r3, #9
 80151c0:	d94d      	bls.n	801525e <_vfiprintf_r+0x1a6>
 80151c2:	b1b0      	cbz	r0, 80151f2 <_vfiprintf_r+0x13a>
 80151c4:	9207      	str	r2, [sp, #28]
 80151c6:	e014      	b.n	80151f2 <_vfiprintf_r+0x13a>
 80151c8:	eba0 0308 	sub.w	r3, r0, r8
 80151cc:	fa09 f303 	lsl.w	r3, r9, r3
 80151d0:	4313      	orrs	r3, r2
 80151d2:	9304      	str	r3, [sp, #16]
 80151d4:	46a2      	mov	sl, r4
 80151d6:	e7d2      	b.n	801517e <_vfiprintf_r+0xc6>
 80151d8:	9b03      	ldr	r3, [sp, #12]
 80151da:	1d19      	adds	r1, r3, #4
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	9103      	str	r1, [sp, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	bfbb      	ittet	lt
 80151e4:	425b      	neglt	r3, r3
 80151e6:	f042 0202 	orrlt.w	r2, r2, #2
 80151ea:	9307      	strge	r3, [sp, #28]
 80151ec:	9307      	strlt	r3, [sp, #28]
 80151ee:	bfb8      	it	lt
 80151f0:	9204      	strlt	r2, [sp, #16]
 80151f2:	7823      	ldrb	r3, [r4, #0]
 80151f4:	2b2e      	cmp	r3, #46	; 0x2e
 80151f6:	d10c      	bne.n	8015212 <_vfiprintf_r+0x15a>
 80151f8:	7863      	ldrb	r3, [r4, #1]
 80151fa:	2b2a      	cmp	r3, #42	; 0x2a
 80151fc:	d134      	bne.n	8015268 <_vfiprintf_r+0x1b0>
 80151fe:	9b03      	ldr	r3, [sp, #12]
 8015200:	1d1a      	adds	r2, r3, #4
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	9203      	str	r2, [sp, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	bfb8      	it	lt
 801520a:	f04f 33ff 	movlt.w	r3, #4294967295
 801520e:	3402      	adds	r4, #2
 8015210:	9305      	str	r3, [sp, #20]
 8015212:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80152e8 <_vfiprintf_r+0x230>
 8015216:	7821      	ldrb	r1, [r4, #0]
 8015218:	2203      	movs	r2, #3
 801521a:	4650      	mov	r0, sl
 801521c:	f7eb f860 	bl	80002e0 <memchr>
 8015220:	b138      	cbz	r0, 8015232 <_vfiprintf_r+0x17a>
 8015222:	9b04      	ldr	r3, [sp, #16]
 8015224:	eba0 000a 	sub.w	r0, r0, sl
 8015228:	2240      	movs	r2, #64	; 0x40
 801522a:	4082      	lsls	r2, r0
 801522c:	4313      	orrs	r3, r2
 801522e:	3401      	adds	r4, #1
 8015230:	9304      	str	r3, [sp, #16]
 8015232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015236:	4829      	ldr	r0, [pc, #164]	; (80152dc <_vfiprintf_r+0x224>)
 8015238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801523c:	2206      	movs	r2, #6
 801523e:	f7eb f84f 	bl	80002e0 <memchr>
 8015242:	2800      	cmp	r0, #0
 8015244:	d03f      	beq.n	80152c6 <_vfiprintf_r+0x20e>
 8015246:	4b26      	ldr	r3, [pc, #152]	; (80152e0 <_vfiprintf_r+0x228>)
 8015248:	bb1b      	cbnz	r3, 8015292 <_vfiprintf_r+0x1da>
 801524a:	9b03      	ldr	r3, [sp, #12]
 801524c:	3307      	adds	r3, #7
 801524e:	f023 0307 	bic.w	r3, r3, #7
 8015252:	3308      	adds	r3, #8
 8015254:	9303      	str	r3, [sp, #12]
 8015256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015258:	443b      	add	r3, r7
 801525a:	9309      	str	r3, [sp, #36]	; 0x24
 801525c:	e768      	b.n	8015130 <_vfiprintf_r+0x78>
 801525e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015262:	460c      	mov	r4, r1
 8015264:	2001      	movs	r0, #1
 8015266:	e7a6      	b.n	80151b6 <_vfiprintf_r+0xfe>
 8015268:	2300      	movs	r3, #0
 801526a:	3401      	adds	r4, #1
 801526c:	9305      	str	r3, [sp, #20]
 801526e:	4619      	mov	r1, r3
 8015270:	f04f 0c0a 	mov.w	ip, #10
 8015274:	4620      	mov	r0, r4
 8015276:	f810 2b01 	ldrb.w	r2, [r0], #1
 801527a:	3a30      	subs	r2, #48	; 0x30
 801527c:	2a09      	cmp	r2, #9
 801527e:	d903      	bls.n	8015288 <_vfiprintf_r+0x1d0>
 8015280:	2b00      	cmp	r3, #0
 8015282:	d0c6      	beq.n	8015212 <_vfiprintf_r+0x15a>
 8015284:	9105      	str	r1, [sp, #20]
 8015286:	e7c4      	b.n	8015212 <_vfiprintf_r+0x15a>
 8015288:	fb0c 2101 	mla	r1, ip, r1, r2
 801528c:	4604      	mov	r4, r0
 801528e:	2301      	movs	r3, #1
 8015290:	e7f0      	b.n	8015274 <_vfiprintf_r+0x1bc>
 8015292:	ab03      	add	r3, sp, #12
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	462a      	mov	r2, r5
 8015298:	4b12      	ldr	r3, [pc, #72]	; (80152e4 <_vfiprintf_r+0x22c>)
 801529a:	a904      	add	r1, sp, #16
 801529c:	4630      	mov	r0, r6
 801529e:	f7fb ff67 	bl	8011170 <_printf_float>
 80152a2:	4607      	mov	r7, r0
 80152a4:	1c78      	adds	r0, r7, #1
 80152a6:	d1d6      	bne.n	8015256 <_vfiprintf_r+0x19e>
 80152a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152aa:	07d9      	lsls	r1, r3, #31
 80152ac:	d405      	bmi.n	80152ba <_vfiprintf_r+0x202>
 80152ae:	89ab      	ldrh	r3, [r5, #12]
 80152b0:	059a      	lsls	r2, r3, #22
 80152b2:	d402      	bmi.n	80152ba <_vfiprintf_r+0x202>
 80152b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152b6:	f7fc ff47 	bl	8012148 <__retarget_lock_release_recursive>
 80152ba:	89ab      	ldrh	r3, [r5, #12]
 80152bc:	065b      	lsls	r3, r3, #25
 80152be:	f53f af1d 	bmi.w	80150fc <_vfiprintf_r+0x44>
 80152c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152c4:	e71c      	b.n	8015100 <_vfiprintf_r+0x48>
 80152c6:	ab03      	add	r3, sp, #12
 80152c8:	9300      	str	r3, [sp, #0]
 80152ca:	462a      	mov	r2, r5
 80152cc:	4b05      	ldr	r3, [pc, #20]	; (80152e4 <_vfiprintf_r+0x22c>)
 80152ce:	a904      	add	r1, sp, #16
 80152d0:	4630      	mov	r0, r6
 80152d2:	f7fc f9d5 	bl	8011680 <_printf_i>
 80152d6:	e7e4      	b.n	80152a2 <_vfiprintf_r+0x1ea>
 80152d8:	08015a61 	.word	0x08015a61
 80152dc:	08015a6b 	.word	0x08015a6b
 80152e0:	08011171 	.word	0x08011171
 80152e4:	08015095 	.word	0x08015095
 80152e8:	08015a67 	.word	0x08015a67

080152ec <__swbuf_r>:
 80152ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ee:	460e      	mov	r6, r1
 80152f0:	4614      	mov	r4, r2
 80152f2:	4605      	mov	r5, r0
 80152f4:	b118      	cbz	r0, 80152fe <__swbuf_r+0x12>
 80152f6:	6a03      	ldr	r3, [r0, #32]
 80152f8:	b90b      	cbnz	r3, 80152fe <__swbuf_r+0x12>
 80152fa:	f7fc fd73 	bl	8011de4 <__sinit>
 80152fe:	69a3      	ldr	r3, [r4, #24]
 8015300:	60a3      	str	r3, [r4, #8]
 8015302:	89a3      	ldrh	r3, [r4, #12]
 8015304:	071a      	lsls	r2, r3, #28
 8015306:	d525      	bpl.n	8015354 <__swbuf_r+0x68>
 8015308:	6923      	ldr	r3, [r4, #16]
 801530a:	b31b      	cbz	r3, 8015354 <__swbuf_r+0x68>
 801530c:	6823      	ldr	r3, [r4, #0]
 801530e:	6922      	ldr	r2, [r4, #16]
 8015310:	1a98      	subs	r0, r3, r2
 8015312:	6963      	ldr	r3, [r4, #20]
 8015314:	b2f6      	uxtb	r6, r6
 8015316:	4283      	cmp	r3, r0
 8015318:	4637      	mov	r7, r6
 801531a:	dc04      	bgt.n	8015326 <__swbuf_r+0x3a>
 801531c:	4621      	mov	r1, r4
 801531e:	4628      	mov	r0, r5
 8015320:	f7ff fa48 	bl	80147b4 <_fflush_r>
 8015324:	b9e0      	cbnz	r0, 8015360 <__swbuf_r+0x74>
 8015326:	68a3      	ldr	r3, [r4, #8]
 8015328:	3b01      	subs	r3, #1
 801532a:	60a3      	str	r3, [r4, #8]
 801532c:	6823      	ldr	r3, [r4, #0]
 801532e:	1c5a      	adds	r2, r3, #1
 8015330:	6022      	str	r2, [r4, #0]
 8015332:	701e      	strb	r6, [r3, #0]
 8015334:	6962      	ldr	r2, [r4, #20]
 8015336:	1c43      	adds	r3, r0, #1
 8015338:	429a      	cmp	r2, r3
 801533a:	d004      	beq.n	8015346 <__swbuf_r+0x5a>
 801533c:	89a3      	ldrh	r3, [r4, #12]
 801533e:	07db      	lsls	r3, r3, #31
 8015340:	d506      	bpl.n	8015350 <__swbuf_r+0x64>
 8015342:	2e0a      	cmp	r6, #10
 8015344:	d104      	bne.n	8015350 <__swbuf_r+0x64>
 8015346:	4621      	mov	r1, r4
 8015348:	4628      	mov	r0, r5
 801534a:	f7ff fa33 	bl	80147b4 <_fflush_r>
 801534e:	b938      	cbnz	r0, 8015360 <__swbuf_r+0x74>
 8015350:	4638      	mov	r0, r7
 8015352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015354:	4621      	mov	r1, r4
 8015356:	4628      	mov	r0, r5
 8015358:	f000 f806 	bl	8015368 <__swsetup_r>
 801535c:	2800      	cmp	r0, #0
 801535e:	d0d5      	beq.n	801530c <__swbuf_r+0x20>
 8015360:	f04f 37ff 	mov.w	r7, #4294967295
 8015364:	e7f4      	b.n	8015350 <__swbuf_r+0x64>
	...

08015368 <__swsetup_r>:
 8015368:	b538      	push	{r3, r4, r5, lr}
 801536a:	4b2a      	ldr	r3, [pc, #168]	; (8015414 <__swsetup_r+0xac>)
 801536c:	4605      	mov	r5, r0
 801536e:	6818      	ldr	r0, [r3, #0]
 8015370:	460c      	mov	r4, r1
 8015372:	b118      	cbz	r0, 801537c <__swsetup_r+0x14>
 8015374:	6a03      	ldr	r3, [r0, #32]
 8015376:	b90b      	cbnz	r3, 801537c <__swsetup_r+0x14>
 8015378:	f7fc fd34 	bl	8011de4 <__sinit>
 801537c:	89a3      	ldrh	r3, [r4, #12]
 801537e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015382:	0718      	lsls	r0, r3, #28
 8015384:	d422      	bmi.n	80153cc <__swsetup_r+0x64>
 8015386:	06d9      	lsls	r1, r3, #27
 8015388:	d407      	bmi.n	801539a <__swsetup_r+0x32>
 801538a:	2309      	movs	r3, #9
 801538c:	602b      	str	r3, [r5, #0]
 801538e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015392:	81a3      	strh	r3, [r4, #12]
 8015394:	f04f 30ff 	mov.w	r0, #4294967295
 8015398:	e034      	b.n	8015404 <__swsetup_r+0x9c>
 801539a:	0758      	lsls	r0, r3, #29
 801539c:	d512      	bpl.n	80153c4 <__swsetup_r+0x5c>
 801539e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153a0:	b141      	cbz	r1, 80153b4 <__swsetup_r+0x4c>
 80153a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153a6:	4299      	cmp	r1, r3
 80153a8:	d002      	beq.n	80153b0 <__swsetup_r+0x48>
 80153aa:	4628      	mov	r0, r5
 80153ac:	f7fd fcd8 	bl	8012d60 <_free_r>
 80153b0:	2300      	movs	r3, #0
 80153b2:	6363      	str	r3, [r4, #52]	; 0x34
 80153b4:	89a3      	ldrh	r3, [r4, #12]
 80153b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80153ba:	81a3      	strh	r3, [r4, #12]
 80153bc:	2300      	movs	r3, #0
 80153be:	6063      	str	r3, [r4, #4]
 80153c0:	6923      	ldr	r3, [r4, #16]
 80153c2:	6023      	str	r3, [r4, #0]
 80153c4:	89a3      	ldrh	r3, [r4, #12]
 80153c6:	f043 0308 	orr.w	r3, r3, #8
 80153ca:	81a3      	strh	r3, [r4, #12]
 80153cc:	6923      	ldr	r3, [r4, #16]
 80153ce:	b94b      	cbnz	r3, 80153e4 <__swsetup_r+0x7c>
 80153d0:	89a3      	ldrh	r3, [r4, #12]
 80153d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80153d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153da:	d003      	beq.n	80153e4 <__swsetup_r+0x7c>
 80153dc:	4621      	mov	r1, r4
 80153de:	4628      	mov	r0, r5
 80153e0:	f000 f884 	bl	80154ec <__smakebuf_r>
 80153e4:	89a0      	ldrh	r0, [r4, #12]
 80153e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153ea:	f010 0301 	ands.w	r3, r0, #1
 80153ee:	d00a      	beq.n	8015406 <__swsetup_r+0x9e>
 80153f0:	2300      	movs	r3, #0
 80153f2:	60a3      	str	r3, [r4, #8]
 80153f4:	6963      	ldr	r3, [r4, #20]
 80153f6:	425b      	negs	r3, r3
 80153f8:	61a3      	str	r3, [r4, #24]
 80153fa:	6923      	ldr	r3, [r4, #16]
 80153fc:	b943      	cbnz	r3, 8015410 <__swsetup_r+0xa8>
 80153fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015402:	d1c4      	bne.n	801538e <__swsetup_r+0x26>
 8015404:	bd38      	pop	{r3, r4, r5, pc}
 8015406:	0781      	lsls	r1, r0, #30
 8015408:	bf58      	it	pl
 801540a:	6963      	ldrpl	r3, [r4, #20]
 801540c:	60a3      	str	r3, [r4, #8]
 801540e:	e7f4      	b.n	80153fa <__swsetup_r+0x92>
 8015410:	2000      	movs	r0, #0
 8015412:	e7f7      	b.n	8015404 <__swsetup_r+0x9c>
 8015414:	2400006c 	.word	0x2400006c

08015418 <_raise_r>:
 8015418:	291f      	cmp	r1, #31
 801541a:	b538      	push	{r3, r4, r5, lr}
 801541c:	4604      	mov	r4, r0
 801541e:	460d      	mov	r5, r1
 8015420:	d904      	bls.n	801542c <_raise_r+0x14>
 8015422:	2316      	movs	r3, #22
 8015424:	6003      	str	r3, [r0, #0]
 8015426:	f04f 30ff 	mov.w	r0, #4294967295
 801542a:	bd38      	pop	{r3, r4, r5, pc}
 801542c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801542e:	b112      	cbz	r2, 8015436 <_raise_r+0x1e>
 8015430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015434:	b94b      	cbnz	r3, 801544a <_raise_r+0x32>
 8015436:	4620      	mov	r0, r4
 8015438:	f000 f830 	bl	801549c <_getpid_r>
 801543c:	462a      	mov	r2, r5
 801543e:	4601      	mov	r1, r0
 8015440:	4620      	mov	r0, r4
 8015442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015446:	f000 b817 	b.w	8015478 <_kill_r>
 801544a:	2b01      	cmp	r3, #1
 801544c:	d00a      	beq.n	8015464 <_raise_r+0x4c>
 801544e:	1c59      	adds	r1, r3, #1
 8015450:	d103      	bne.n	801545a <_raise_r+0x42>
 8015452:	2316      	movs	r3, #22
 8015454:	6003      	str	r3, [r0, #0]
 8015456:	2001      	movs	r0, #1
 8015458:	e7e7      	b.n	801542a <_raise_r+0x12>
 801545a:	2400      	movs	r4, #0
 801545c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015460:	4628      	mov	r0, r5
 8015462:	4798      	blx	r3
 8015464:	2000      	movs	r0, #0
 8015466:	e7e0      	b.n	801542a <_raise_r+0x12>

08015468 <raise>:
 8015468:	4b02      	ldr	r3, [pc, #8]	; (8015474 <raise+0xc>)
 801546a:	4601      	mov	r1, r0
 801546c:	6818      	ldr	r0, [r3, #0]
 801546e:	f7ff bfd3 	b.w	8015418 <_raise_r>
 8015472:	bf00      	nop
 8015474:	2400006c 	.word	0x2400006c

08015478 <_kill_r>:
 8015478:	b538      	push	{r3, r4, r5, lr}
 801547a:	4d07      	ldr	r5, [pc, #28]	; (8015498 <_kill_r+0x20>)
 801547c:	2300      	movs	r3, #0
 801547e:	4604      	mov	r4, r0
 8015480:	4608      	mov	r0, r1
 8015482:	4611      	mov	r1, r2
 8015484:	602b      	str	r3, [r5, #0]
 8015486:	f7ed fa71 	bl	800296c <_kill>
 801548a:	1c43      	adds	r3, r0, #1
 801548c:	d102      	bne.n	8015494 <_kill_r+0x1c>
 801548e:	682b      	ldr	r3, [r5, #0]
 8015490:	b103      	cbz	r3, 8015494 <_kill_r+0x1c>
 8015492:	6023      	str	r3, [r4, #0]
 8015494:	bd38      	pop	{r3, r4, r5, pc}
 8015496:	bf00      	nop
 8015498:	24005698 	.word	0x24005698

0801549c <_getpid_r>:
 801549c:	f7ed ba5e 	b.w	800295c <_getpid>

080154a0 <__swhatbuf_r>:
 80154a0:	b570      	push	{r4, r5, r6, lr}
 80154a2:	460c      	mov	r4, r1
 80154a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154a8:	2900      	cmp	r1, #0
 80154aa:	b096      	sub	sp, #88	; 0x58
 80154ac:	4615      	mov	r5, r2
 80154ae:	461e      	mov	r6, r3
 80154b0:	da0d      	bge.n	80154ce <__swhatbuf_r+0x2e>
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80154b8:	f04f 0100 	mov.w	r1, #0
 80154bc:	bf0c      	ite	eq
 80154be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80154c2:	2340      	movne	r3, #64	; 0x40
 80154c4:	2000      	movs	r0, #0
 80154c6:	6031      	str	r1, [r6, #0]
 80154c8:	602b      	str	r3, [r5, #0]
 80154ca:	b016      	add	sp, #88	; 0x58
 80154cc:	bd70      	pop	{r4, r5, r6, pc}
 80154ce:	466a      	mov	r2, sp
 80154d0:	f000 f848 	bl	8015564 <_fstat_r>
 80154d4:	2800      	cmp	r0, #0
 80154d6:	dbec      	blt.n	80154b2 <__swhatbuf_r+0x12>
 80154d8:	9901      	ldr	r1, [sp, #4]
 80154da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80154de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80154e2:	4259      	negs	r1, r3
 80154e4:	4159      	adcs	r1, r3
 80154e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80154ea:	e7eb      	b.n	80154c4 <__swhatbuf_r+0x24>

080154ec <__smakebuf_r>:
 80154ec:	898b      	ldrh	r3, [r1, #12]
 80154ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154f0:	079d      	lsls	r5, r3, #30
 80154f2:	4606      	mov	r6, r0
 80154f4:	460c      	mov	r4, r1
 80154f6:	d507      	bpl.n	8015508 <__smakebuf_r+0x1c>
 80154f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80154fc:	6023      	str	r3, [r4, #0]
 80154fe:	6123      	str	r3, [r4, #16]
 8015500:	2301      	movs	r3, #1
 8015502:	6163      	str	r3, [r4, #20]
 8015504:	b002      	add	sp, #8
 8015506:	bd70      	pop	{r4, r5, r6, pc}
 8015508:	ab01      	add	r3, sp, #4
 801550a:	466a      	mov	r2, sp
 801550c:	f7ff ffc8 	bl	80154a0 <__swhatbuf_r>
 8015510:	9900      	ldr	r1, [sp, #0]
 8015512:	4605      	mov	r5, r0
 8015514:	4630      	mov	r0, r6
 8015516:	f7fb fd0d 	bl	8010f34 <_malloc_r>
 801551a:	b948      	cbnz	r0, 8015530 <__smakebuf_r+0x44>
 801551c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015520:	059a      	lsls	r2, r3, #22
 8015522:	d4ef      	bmi.n	8015504 <__smakebuf_r+0x18>
 8015524:	f023 0303 	bic.w	r3, r3, #3
 8015528:	f043 0302 	orr.w	r3, r3, #2
 801552c:	81a3      	strh	r3, [r4, #12]
 801552e:	e7e3      	b.n	80154f8 <__smakebuf_r+0xc>
 8015530:	89a3      	ldrh	r3, [r4, #12]
 8015532:	6020      	str	r0, [r4, #0]
 8015534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015538:	81a3      	strh	r3, [r4, #12]
 801553a:	9b00      	ldr	r3, [sp, #0]
 801553c:	6163      	str	r3, [r4, #20]
 801553e:	9b01      	ldr	r3, [sp, #4]
 8015540:	6120      	str	r0, [r4, #16]
 8015542:	b15b      	cbz	r3, 801555c <__smakebuf_r+0x70>
 8015544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015548:	4630      	mov	r0, r6
 801554a:	f000 f81d 	bl	8015588 <_isatty_r>
 801554e:	b128      	cbz	r0, 801555c <__smakebuf_r+0x70>
 8015550:	89a3      	ldrh	r3, [r4, #12]
 8015552:	f023 0303 	bic.w	r3, r3, #3
 8015556:	f043 0301 	orr.w	r3, r3, #1
 801555a:	81a3      	strh	r3, [r4, #12]
 801555c:	89a3      	ldrh	r3, [r4, #12]
 801555e:	431d      	orrs	r5, r3
 8015560:	81a5      	strh	r5, [r4, #12]
 8015562:	e7cf      	b.n	8015504 <__smakebuf_r+0x18>

08015564 <_fstat_r>:
 8015564:	b538      	push	{r3, r4, r5, lr}
 8015566:	4d07      	ldr	r5, [pc, #28]	; (8015584 <_fstat_r+0x20>)
 8015568:	2300      	movs	r3, #0
 801556a:	4604      	mov	r4, r0
 801556c:	4608      	mov	r0, r1
 801556e:	4611      	mov	r1, r2
 8015570:	602b      	str	r3, [r5, #0]
 8015572:	f7ed fa5a 	bl	8002a2a <_fstat>
 8015576:	1c43      	adds	r3, r0, #1
 8015578:	d102      	bne.n	8015580 <_fstat_r+0x1c>
 801557a:	682b      	ldr	r3, [r5, #0]
 801557c:	b103      	cbz	r3, 8015580 <_fstat_r+0x1c>
 801557e:	6023      	str	r3, [r4, #0]
 8015580:	bd38      	pop	{r3, r4, r5, pc}
 8015582:	bf00      	nop
 8015584:	24005698 	.word	0x24005698

08015588 <_isatty_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4d06      	ldr	r5, [pc, #24]	; (80155a4 <_isatty_r+0x1c>)
 801558c:	2300      	movs	r3, #0
 801558e:	4604      	mov	r4, r0
 8015590:	4608      	mov	r0, r1
 8015592:	602b      	str	r3, [r5, #0]
 8015594:	f7ed fa59 	bl	8002a4a <_isatty>
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	d102      	bne.n	80155a2 <_isatty_r+0x1a>
 801559c:	682b      	ldr	r3, [r5, #0]
 801559e:	b103      	cbz	r3, 80155a2 <_isatty_r+0x1a>
 80155a0:	6023      	str	r3, [r4, #0]
 80155a2:	bd38      	pop	{r3, r4, r5, pc}
 80155a4:	24005698 	.word	0x24005698

080155a8 <_init>:
 80155a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155aa:	bf00      	nop
 80155ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ae:	bc08      	pop	{r3}
 80155b0:	469e      	mov	lr, r3
 80155b2:	4770      	bx	lr

080155b4 <_fini>:
 80155b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155b6:	bf00      	nop
 80155b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ba:	bc08      	pop	{r3}
 80155bc:	469e      	mov	lr, r3
 80155be:	4770      	bx	lr
