
chassis_movement_joystick_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011908  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08011ba8  08011ba8  00021ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012030  08012030  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08012030  08012030  00022030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012038  08012038  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012038  08012038  00022038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801203c  0801203c  0002203c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  08012040  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  240001d8  08012218  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ca8  08012218  00030ca8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY
 13 .debug_info   000218e9  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a2  00000000  00000000  00051b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  000553d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140a  00000000  00000000  00056d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e206  00000000  00000000  0005819a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002224b  00000000  00000000  000963a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019fc71  00000000  00000000  000b85eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083b4  00000000  00000000  0025825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00260610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b90 	.word	0x08011b90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08011b90 	.word	0x08011b90

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000baa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bac:	bf00      	nop
 8000bae:	4b91      	ldr	r3, [pc, #580]	; (8000df4 <main+0x254>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <main+0x28>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1e5a      	subs	r2, r3, #1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dd01      	ble.n	8000bc8 <main+0x28>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <main+0x2a>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1ef      	bne.n	8000bae <main+0xe>
  if ( timeout < 0 )
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	da01      	bge.n	8000bd8 <main+0x38>
  {
  Error_Handler();
 8000bd4:	f000 fe86 	bl	80018e4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f001 fb0a 	bl	80021f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f92c 	bl	8000e38 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000be0:	f000 f9b6 	bl	8000f50 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000be4:	4b83      	ldr	r3, [pc, #524]	; (8000df4 <main+0x254>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	4a82      	ldr	r2, [pc, #520]	; (8000df4 <main+0x254>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf4:	4b7f      	ldr	r3, [pc, #508]	; (8000df4 <main+0x254>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f005 fbf0 	bl	80063e8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f005 fc06 	bl	800641c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c16:	bf00      	nop
 8000c18:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <main+0x254>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d106      	bne.n	8000c32 <main+0x92>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dd01      	ble.n	8000c32 <main+0x92>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <main+0x94>
 8000c32:	2300      	movs	r3, #0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1ef      	bne.n	8000c18 <main+0x78>
if ( timeout < 0 )
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	da01      	bge.n	8000c42 <main+0xa2>
{
Error_Handler();
 8000c3e:	f000 fe51 	bl	80018e4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f000 fdb7 	bl	80017b4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000c46:	f000 fd8d 	bl	8001764 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000c4a:	f000 fcf5 	bl	8001638 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000c4e:	f000 fd53 	bl	80016f8 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8000c52:	f000 fc8d 	bl	8001570 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8000c56:	f000 fc2b 	bl	80014b0 <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8000c5a:	f000 fb09 	bl	8001270 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000c5e:	f000 fb97 	bl	8001390 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8000c62:	f000 faa3 	bl	80011ac <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8000c66:	f000 f9a9 	bl	8000fbc <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000c6a:	f000 fa2f 	bl	80010cc <_ZL12MX_ADC2_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_ADC_Start(&hadc1);
 8000c6e:	4862      	ldr	r0, [pc, #392]	; (8000df8 <main+0x258>)
 8000c70:	f001 ff04 	bl	8002a7c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	485f      	ldr	r0, [pc, #380]	; (8000df8 <main+0x258>)
 8000c7a:	f001 ffc9 	bl	8002c10 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(&hadc1);
 8000c7e:	485e      	ldr	r0, [pc, #376]	; (8000df8 <main+0x258>)
 8000c80:	f002 f8ba 	bl	8002df8 <HAL_ADC_GetValue>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <main+0x25c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
    HAL_Delay(1);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f001 fb41 	bl	8002314 <HAL_Delay>

    HAL_ADC_Start(&hadc2);
 8000c92:	485b      	ldr	r0, [pc, #364]	; (8000e00 <main+0x260>)
 8000c94:	f001 fef2 	bl	8002a7c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	4858      	ldr	r0, [pc, #352]	; (8000e00 <main+0x260>)
 8000c9e:	f001 ffb7 	bl	8002c10 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(&hadc2);
 8000ca2:	4857      	ldr	r0, [pc, #348]	; (8000e00 <main+0x260>)
 8000ca4:	f002 f8a8 	bl	8002df8 <HAL_ADC_GetValue>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b55      	ldr	r3, [pc, #340]	; (8000e04 <main+0x264>)
 8000cae:	801a      	strh	r2, [r3, #0]
    HAL_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f001 fb2f 	bl	8002314 <HAL_Delay>

    x_axis = x_adc / 1000;
 8000cb6:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <main+0x25c>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	4a53      	ldr	r2, [pc, #332]	; (8000e08 <main+0x268>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	099b      	lsrs	r3, r3, #6
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	ee07 3a90 	vmov	s15, r3
 8000cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ccc:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <main+0x26c>)
 8000cce:	edc3 7a00 	vstr	s15, [r3]
    y_axis = y_adc / 1000;
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <main+0x264>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <main+0x268>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	099b      	lsrs	r3, r3, #6
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce8:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <main+0x270>)
 8000cea:	edc3 7a00 	vstr	s15, [r3]
    in_min = 1;
 8000cee:	4b49      	ldr	r3, [pc, #292]	; (8000e14 <main+0x274>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
    in_max = 65;
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <main+0x278>)
 8000cf6:	2241      	movs	r2, #65	; 0x41
 8000cf8:	601a      	str	r2, [r3, #0]
    out_min = -1;
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <main+0x27c>)
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	601a      	str	r2, [r3, #0]
    out_max = 1;
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <main+0x280>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

    x_map = (x_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <main+0x26c>)
 8000d0a:	ed93 7a00 	vldr	s14, [r3]
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <main+0x274>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <main+0x280>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <main+0x27c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <main+0x278>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <main+0x274>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <main+0x27c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <main+0x284>)
 8000d5c:	edc3 7a00 	vstr	s15, [r3]
    y_map = (y_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <main+0x270>)
 8000d62:	ed93 7a00 	vldr	s14, [r3]
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <main+0x274>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <main+0x280>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <main+0x27c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d88:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <main+0x278>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <main+0x274>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x27c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <main+0x288>)
 8000db4:	edc3 7a00 	vstr	s15, [r3]

    snprintf(msg, 100, "CH_1: %.2f, CH_2: %.2f \r\n", x_map, y_map);
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <main+0x284>)
 8000dba:	edd3 7a00 	vldr	s15, [r3]
 8000dbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <main+0x288>)
 8000dc4:	edd3 6a00 	vldr	s13, [r3]
 8000dc8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000dcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000dd0:	ed8d 7b00 	vstr	d7, [sp]
 8000dd4:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <main+0x28c>)
 8000dd6:	2164      	movs	r1, #100	; 0x64
 8000dd8:	4815      	ldr	r0, [pc, #84]	; (8000e30 <main+0x290>)
 8000dda:	f00d fb87 	bl	800e4ec <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);// Sending in normal mode
 8000dde:	230a      	movs	r3, #10
 8000de0:	2264      	movs	r2, #100	; 0x64
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <main+0x290>)
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <main+0x294>)
 8000de6:	f00a fb89 	bl	800b4fc <HAL_UART_Transmit>
    HAL_Delay(10);
 8000dea:	200a      	movs	r0, #10
 8000dec:	f001 fa92 	bl	8002314 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000df0:	e73d      	b.n	8000c6e <main+0xce>
 8000df2:	bf00      	nop
 8000df4:	58024400 	.word	0x58024400
 8000df8:	240001f4 	.word	0x240001f4
 8000dfc:	24000ac8 	.word	0x24000ac8
 8000e00:	24000258 	.word	0x24000258
 8000e04:	24000aca 	.word	0x24000aca
 8000e08:	10624dd3 	.word	0x10624dd3
 8000e0c:	24000acc 	.word	0x24000acc
 8000e10:	24000ad0 	.word	0x24000ad0
 8000e14:	24000b38 	.word	0x24000b38
 8000e18:	24000b3c 	.word	0x24000b3c
 8000e1c:	24000b40 	.word	0x24000b40
 8000e20:	24000b44 	.word	0x24000b44
 8000e24:	24000b48 	.word	0x24000b48
 8000e28:	24000b4c 	.word	0x24000b4c
 8000e2c:	08011ba8 	.word	0x08011ba8
 8000e30:	24000ad4 	.word	0x24000ad4
 8000e34:	24000438 	.word	0x24000438

08000e38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09c      	sub	sp, #112	; 0x70
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00d fbe7 	bl	800e61a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2220      	movs	r2, #32
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00d fbe1 	bl	800e61a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e58:	2004      	movs	r0, #4
 8000e5a:	f005 fc3b 	bl	80066d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <_Z18SystemClock_Configv+0x110>)
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	4a38      	ldr	r2, [pc, #224]	; (8000f48 <_Z18SystemClock_Configv+0x110>)
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e6e:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <_Z18SystemClock_Configv+0x110>)
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <_Z18SystemClock_Configv+0x114>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e80:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <_Z18SystemClock_Configv+0x114>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <_Z18SystemClock_Configv+0x114>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e94:	bf00      	nop
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <_Z18SystemClock_Configv+0x114>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f3      	bne.n	8000e96 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000ec4:	2312      	movs	r3, #18
 8000ec6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000edc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fc5e 	bl	80067a8 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000efc:	f000 fcf2 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	233f      	movs	r3, #63	; 0x3f
 8000f02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2303      	movs	r3, #3
 8000f06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f14:	2340      	movs	r3, #64	; 0x40
 8000f16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2101      	movs	r1, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f006 f898 	bl	800705c <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000f3c:	f000 fcd2 	bl	80018e4 <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3770      	adds	r7, #112	; 0x70
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58000400 	.word	0x58000400
 8000f4c:	58024800 	.word	0x58024800

08000f50 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0b0      	sub	sp, #192	; 0xc0
 8000f54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	22c0      	movs	r2, #192	; 0xc0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00d fb5c 	bl	800e61a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000f72:	2312      	movs	r3, #18
 8000f74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f76:	2304      	movs	r3, #4
 8000f78:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f82:	23c0      	movs	r3, #192	; 0xc0
 8000f84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f86:	2320      	movs	r3, #32
 8000f88:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000f8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 fbeb 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000fae:	f000 fc99 	bl	80018e4 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	37c0      	adds	r7, #192	; 0xc0
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8000fe2:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <_ZL12MX_ADC1_Initv+0x108>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001000:	2200      	movs	r2, #0
 8001002:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001006:	2200      	movs	r2, #0
 8001008:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 800100c:	2201      	movs	r2, #1
 800100e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001012:	2200      	movs	r2, #0
 8001014:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 800102a:	2200      	movs	r2, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001030:	2200      	movs	r2, #0
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 800103e:	f001 fb7b 	bl	8002738 <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 8001052:	f000 fc47 	bl	80018e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4817      	ldr	r0, [pc, #92]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 8001062:	f002 fbe3 	bl	800382c <HAL_ADCEx_MultiModeConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 8001076:	f000 fc35 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_ZL12MX_ADC1_Initv+0x10c>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800108a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108c:	2304      	movs	r3, #4
 800108e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <_ZL12MX_ADC1_Initv+0x104>)
 800109e:	f001 feb9 	bl	8002e14 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 80010b2:	f000 fc17 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	240001f4 	.word	0x240001f4
 80010c4:	40022000 	.word	0x40022000
 80010c8:	4b840000 	.word	0x4b840000

080010cc <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <_ZL12MX_ADC2_Initv+0xd8>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 80010fe:	2204      	movs	r2, #4
 8001100:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001104:	2200      	movs	r2, #0
 8001106:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 800110a:	2200      	movs	r2, #0
 800110c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001110:	2201      	movs	r2, #1
 8001112:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001116:	2200      	movs	r2, #0
 8001118:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001128:	2200      	movs	r2, #0
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001134:	2200      	movs	r2, #0
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001140:	4817      	ldr	r0, [pc, #92]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 8001142:	f001 faf9 	bl	8002738 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 8001156:	f000 fbc5 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_ZL12MX_ADC2_Initv+0xdc>)
 800115c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115e:	2306      	movs	r3, #6
 8001160:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001166:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800116a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116c:	2304      	movs	r3, #4
 800116e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <_ZL12MX_ADC2_Initv+0xd4>)
 800117e:	f001 fe49 	bl	8002e14 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8001192:	f000 fba7 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000258 	.word	0x24000258
 80011a4:	40022100 	.word	0x40022100
 80011a8:	4fb80000 	.word	0x4fb80000

080011ac <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <_ZL12MX_TIM1_Initv+0xc0>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011d2:	224a      	movs	r2, #74	; 0x4a
 80011d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011de:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f6:	481c      	ldr	r0, [pc, #112]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 80011f8:	f008 ffba 	bl	800a170 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf14      	ite	ne
 8001202:	2301      	movne	r3, #1
 8001204:	2300      	moveq	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800120c:	f000 fb6a 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 800121e:	f009 fb39 	bl	800a894 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8001232:	f000 fb57 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <_ZL12MX_TIM1_Initv+0xbc>)
 8001248:	f00a f85c 	bl	800b304 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 800125c:	f000 fb42 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240002bc 	.word	0x240002bc
 800126c:	40010000 	.word	0x40010000

08001270 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012ac:	224b      	movs	r2, #75	; 0x4b
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 80012b6:	4b35      	ldr	r3, [pc, #212]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012b8:	f240 729e 	movw	r2, #1950	; 0x79e
 80012bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b33      	ldr	r3, [pc, #204]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ca:	4830      	ldr	r0, [pc, #192]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012cc:	f008 ff50 	bl	800a170 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80012e0:	f000 fb00 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4826      	ldr	r0, [pc, #152]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 80012f2:	f009 facf 	bl	800a894 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001306:	f000 faed 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800130a:	4820      	ldr	r0, [pc, #128]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 800130c:	f008 ff87 	bl	800a21e <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001320:	f000 fae0 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 8001334:	f009 ffe6 	bl	800b304 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001348:	f000 facc 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134c:	2360      	movs	r3, #96	; 0x60
 800134e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 8001364:	f009 f982 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001378:	f000 fab4 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <_ZL12MX_TIM2_Initv+0x11c>)
 800137e:	f000 fc33 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	; 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	24000308 	.word	0x24000308

08001390 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013c4:	4a39      	ldr	r2, [pc, #228]	; (80014ac <_ZL12MX_TIM3_Initv+0x11c>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 80013c8:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013ca:	224b      	movs	r2, #75	; 0x4b
 80013cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 80013d4:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013d6:	f240 729e 	movw	r2, #1950	; 0x79e
 80013da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e8:	482f      	ldr	r0, [pc, #188]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 80013ea:	f008 fec1 	bl	800a170 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80013fe:	f000 fa71 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4619      	mov	r1, r3
 800140e:	4826      	ldr	r0, [pc, #152]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 8001410:	f009 fa40 	bl	800a894 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2301      	movne	r3, #1
 800141c:	2300      	moveq	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001424:	f000 fa5e 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001428:	481f      	ldr	r0, [pc, #124]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 800142a:	f008 fef8 	bl	800a21e <HAL_TIM_PWM_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800143e:	f000 fa51 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4815      	ldr	r0, [pc, #84]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 8001452:	f009 ff57 	bl	800b304 <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf14      	ite	ne
 800145c:	2301      	movne	r3, #1
 800145e:	2300      	moveq	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001466:	f000 fa3d 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	; 0x60
 800146c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 8001482:	f009 f8f3 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf14      	ite	ne
 800148c:	2301      	movne	r3, #1
 800148e:	2300      	moveq	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8001496:	f000 fa25 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <_ZL12MX_TIM3_Initv+0x118>)
 800149c:	f000 fba4 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	24000354 	.word	0x24000354
 80014ac:	40000400 	.word	0x40000400

080014b0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	; 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00d f8ab 	bl	800e61a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <_ZL12MX_TIM4_Initv+0xbc>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 80014e2:	f240 221a 	movw	r2, #538	; 0x21a
 80014e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f4:	2303      	movs	r3, #3
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001504:	2301      	movs	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	4812      	ldr	r0, [pc, #72]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 8001520:	f008 fede 	bl	800a2e0 <HAL_TIM_Encoder_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8001534:	f000 f9d6 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <_ZL12MX_TIM4_Initv+0xb8>)
 8001546:	f009 fedd 	bl	800b304 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 800155a:	f000 f9c3 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3730      	adds	r7, #48	; 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	240003a0 	.word	0x240003a0
 800156c:	40000800 	.word	0x40000800

08001570 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f00d f84b 	bl	800e61a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 8001590:	4a28      	ldr	r2, [pc, #160]	; (8001634 <_ZL12MX_TIM8_Initv+0xc4>)
 8001592:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 80015a2:	f240 221a 	movw	r2, #538	; 0x21a
 80015a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 80015e6:	f008 fe7b 	bl	800a2e0 <HAL_TIM_Encoder_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 80015fa:	f000 f973 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <_ZL12MX_TIM8_Initv+0xc0>)
 8001610:	f009 fe78 	bl	800b304 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8001624:	f000 f95e 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	; 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	240003ec 	.word	0x240003ec
 8001634:	40010400 	.word	0x40010400

08001638 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800163c:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001680:	481b      	ldr	r0, [pc, #108]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001682:	f009 feeb 	bl	800b45c <HAL_UART_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001696:	f000 f925 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800169e:	f00b fbaf 	bl	800ce00 <HAL_UARTEx_SetTxFifoThreshold>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80016b2:	f000 f917 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016ba:	f00b fbdf 	bl	800ce7c <HAL_UARTEx_SetRxFifoThreshold>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80016ce:	f000 f909 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016d4:	f00b fb5b 	bl	800cd8e <HAL_UARTEx_DisableFifoMode>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 80016e8:	f000 f8fc 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	24000438 	.word	0x24000438
 80016f4:	40004800 	.word	0x40004800

080016f8 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001704:	2209      	movs	r2, #9
 8001706:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800170a:	2202      	movs	r2, #2
 800170c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001716:	2202      	movs	r2, #2
 8001718:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800172e:	2201      	movs	r2, #1
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001734:	2201      	movs	r2, #1
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001740:	f004 fe80 	bl	8006444 <HAL_PCD_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001754:	f000 f8c6 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	240005bc 	.word	0x240005bc
 8001760:	40080000 	.word	0x40080000

08001764 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_ZL11MX_DMA_Initv+0x4c>)
 800176c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <_ZL11MX_DMA_Initv+0x4c>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <_ZL11MX_DMA_Initv+0x4c>)
 800177c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	200b      	movs	r0, #11
 800178e:	f002 fa06 	bl	8003b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001792:	200b      	movs	r0, #11
 8001794:	f002 fa1d 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	200c      	movs	r0, #12
 800179e:	f002 f9fe 	bl	8003b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017a2:	200c      	movs	r0, #12
 80017a4:	f002 fa15 	bl	8003bd2 <HAL_NVIC_EnableIRQ>

}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	58024400 	.word	0x58024400

080017b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f8:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182a:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f244 0101 	movw	r1, #16385	; 0x4001
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <_ZL12MX_GPIO_Initv+0x128>)
 8001886:	f004 fd95 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2102      	movs	r1, #2
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <_ZL12MX_GPIO_Initv+0x12c>)
 8001890:	f004 fd90 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001894:	f244 0301 	movw	r3, #16385	; 0x4001
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <_ZL12MX_GPIO_Initv+0x128>)
 80018ae:	f004 fbd1 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018be:	2302      	movs	r3, #2
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <_ZL12MX_GPIO_Initv+0x12c>)
 80018ca:	f004 fbc3 	bl	8006054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ce:	bf00      	nop
 80018d0:	3730      	adds	r7, #48	; 0x30
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	58024400 	.word	0x58024400
 80018dc:	58020400 	.word	0x58020400
 80018e0:	58021000 	.word	0x58021000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_MspInit+0x30>)
 80018f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x30>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x30>)
 8001908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	58024400 	.word	0x58024400

08001924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <HAL_ADC_MspInit+0x104>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d133      	bne.n	80019ae <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_ADC_MspInit+0x108>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3301      	adds	r3, #1
 800194c:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <HAL_ADC_MspInit+0x108>)
 800194e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_ADC_MspInit+0x108>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d10e      	bne.n	8001976 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 800195a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800195e:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001968:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 800196a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001994:	2310      	movs	r3, #16
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4823      	ldr	r0, [pc, #140]	; (8001a34 <HAL_ADC_MspInit+0x110>)
 80019a8:	f004 fb54 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80019ac:	e037      	b.n	8001a1e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_ADC_MspInit+0x114>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d132      	bne.n	8001a1e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_ADC_MspInit+0x108>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_ADC_MspInit+0x108>)
 80019c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_ADC_MspInit+0x108>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10e      	bne.n	80019e8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 80019cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 80019dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_ADC_MspInit+0x10c>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a06:	2320      	movs	r3, #32
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <HAL_ADC_MspInit+0x110>)
 8001a1a:	f004 fb1b 	bl	8006054 <HAL_GPIO_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	3730      	adds	r7, #48	; 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	24000b50 	.word	0x24000b50
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020000 	.word	0x58020000
 8001a38:	40022100 	.word	0x40022100

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d117      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2019      	movs	r0, #25
 8001a72:	f002 f894 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a76:	2019      	movs	r0, #25
 8001a78:	f002 f8ab 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a7c:	e028      	b.n	8001ad0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a86:	d10f      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
}
 8001aa6:	e013      	b.n	8001ad0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_TIM_Base_MspInit+0xa0>)
 8001ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	40000400 	.word	0x40000400

08001ae4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12f      	bne.n	8001b66 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 8001b42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b50:	2302      	movs	r3, #2
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b54:	2302      	movs	r3, #2
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481f      	ldr	r0, [pc, #124]	; (8001bdc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001b60:	f004 fa78 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b64:	e032      	b.n	8001bcc <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d12d      	bne.n	8001bcc <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b76:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8001bac:	23c0      	movs	r3, #192	; 0xc0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001bc8:	f004 fa44 	bl	8006054 <HAL_GPIO_Init>
}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40000800 	.word	0x40000800
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020c00 	.word	0x58020c00
 8001be0:	40010400 	.word	0x40010400
 8001be4:	58020800 	.word	0x58020800

08001be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c08:	d11f      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c44:	f004 fa06 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c48:	e023      	b.n	8001c92 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <HAL_TIM_MspPostInit+0xbc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11e      	bne.n	8001c92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8001c72:	2340      	movs	r3, #64	; 0x40
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c8e:	f004 f9e1 	bl	8006054 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020000 	.word	0x58020000
 8001ca4:	40000400 	.word	0x40000400

08001ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0ba      	sub	sp, #232	; 0xe8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	22c0      	movs	r2, #192	; 0xc0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00c fca6 	bl	800e61a <memset>
  if(huart->Instance==USART3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a59      	ldr	r2, [pc, #356]	; (8001e38 <HAL_UART_MspInit+0x190>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f040 80aa 	bne.w	8001e2e <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cda:	f04f 0202 	mov.w	r2, #2
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 fd3f 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001cfc:	f7ff fdf2 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_UART_MspInit+0x194>)
 8001d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d06:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <HAL_UART_MspInit+0x194>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_UART_MspInit+0x194>)
 8001d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_UART_MspInit+0x194>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <HAL_UART_MspInit+0x194>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_UART_MspInit+0x194>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d56:	2307      	movs	r3, #7
 8001d58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4837      	ldr	r0, [pc, #220]	; (8001e40 <HAL_UART_MspInit+0x198>)
 8001d64:	f004 f976 	bl	8006054 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d6a:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_UART_MspInit+0x1a0>)
 8001d6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d70:	222d      	movs	r2, #45	; 0x2d
 8001d72:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d86:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001da6:	4827      	ldr	r0, [pc, #156]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001da8:	f001 ff2e 	bl	8003c08 <HAL_DMA_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001db2:	f7ff fd97 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dc6:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_UART_MspInit+0x1a8>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dcc:	222e      	movs	r2, #46	; 0x2e
 8001dce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001e04:	f001 ff00 	bl	8003c08 <HAL_DMA_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001e0e:	f7ff fd69 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001e16:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2027      	movs	r0, #39	; 0x27
 8001e24:	f001 febb 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e28:	2027      	movs	r0, #39	; 0x27
 8001e2a:	f001 fed2 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	37e8      	adds	r7, #232	; 0xe8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40004800 	.word	0x40004800
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58020c00 	.word	0x58020c00
 8001e44:	240004cc 	.word	0x240004cc
 8001e48:	40020010 	.word	0x40020010
 8001e4c:	24000544 	.word	0x24000544
 8001e50:	40020028 	.word	0x40020028

08001e54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0ba      	sub	sp, #232	; 0xe8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	22c0      	movs	r2, #192	; 0xc0
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f00c fbd0 	bl	800e61a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <HAL_PCD_MspInit+0x10c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d169      	bne.n	8001f58 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001e94:	2312      	movs	r3, #18
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ea4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 8001eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eae:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001eb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f005 fc59 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001ec8:	f7ff fd0c 	bl	80018e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001ecc:	f004 fc5c 	bl	8006788 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_PCD_MspInit+0x110>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_PCD_MspInit+0x110>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_PCD_MspInit+0x110>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001eee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f08:	230a      	movs	r3, #10
 8001f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4814      	ldr	r0, [pc, #80]	; (8001f68 <HAL_PCD_MspInit+0x114>)
 8001f16:	f004 f89d 	bl	8006054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f32:	4619      	mov	r1, r3
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <HAL_PCD_MspInit+0x114>)
 8001f36:	f004 f88d 	bl	8006054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_PCD_MspInit+0x110>)
 8001f3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_PCD_MspInit+0x110>)
 8001f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_PCD_MspInit+0x110>)
 8001f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	37e8      	adds	r7, #232	; 0xe8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40080000 	.word	0x40080000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020000 	.word	0x58020000

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb8:	f000 f98c 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA1_Stream0_IRQHandler+0x10>)
 8001fc6:	f002 fedf 	bl	8004d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240004cc 	.word	0x240004cc

08001fd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA1_Stream1_IRQHandler+0x10>)
 8001fda:	f002 fed5 	bl	8004d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	24000544 	.word	0x24000544

08001fe8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM1_UP_IRQHandler+0x10>)
 8001fee:	f008 fa1d 	bl	800a42c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	240002bc 	.word	0x240002bc

08001ffc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <USART3_IRQHandler+0x10>)
 8002002:	f009 fb09 	bl	800b618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24000438 	.word	0x24000438

08002010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_kill>:

int _kill(int pid, int sig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202a:	f00c fb59 	bl	800e6e0 <__errno>
 800202e:	4603      	mov	r3, r0
 8002030:	2216      	movs	r2, #22
 8002032:	601a      	str	r2, [r3, #0]
  return -1;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_exit>:

void _exit (int status)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffe7 	bl	8002020 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002052:	e7fe      	b.n	8002052 <_exit+0x12>

08002054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00a      	b.n	800207c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002066:	f3af 8000 	nop.w
 800206a:	4601      	mov	r1, r0
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf0      	blt.n	8002066 <_read+0x12>
  }

  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e009      	b.n	80020b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbf1      	blt.n	80020a0 <_write+0x12>
  }
  return len;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_close>:

int _close(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ee:	605a      	str	r2, [r3, #4]
  return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_isatty>:

int _isatty(int file)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f00c fabe 	bl	800e6e0 <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	24080000 	.word	0x24080000
 8002190:	00000400 	.word	0x00000400
 8002194:	24000b54 	.word	0x24000b54
 8002198:	24000ca8 	.word	0x24000ca8

0800219c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021a0:	f7fe fc68 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	; (80021e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ca:	f00c fa8f 	bl	800e6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ce:	f7fe fce7 	bl	8000ba0 <main>
  bx  lr
 80021d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021dc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80021e0:	08012040 	.word	0x08012040
  ldr r2, =_sbss
 80021e4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80021e8:	24000ca8 	.word	0x24000ca8

080021ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC3_IRQHandler>
	...

080021f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f6:	2003      	movs	r0, #3
 80021f8:	f001 fcc6 	bl	8003b88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021fc:	f005 f8e4 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_Init+0x68>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	4913      	ldr	r1, [pc, #76]	; (800225c <HAL_Init+0x6c>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_Init+0x68>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_Init+0x6c>)
 8002224:	5cd3      	ldrb	r3, [r2, r3]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_Init+0x70>)
 8002232:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_Init+0x74>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f814 	bl	8002268 <HAL_InitTick>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e002      	b.n	8002250 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800224a:	f7ff fb51 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	58024400 	.word	0x58024400
 800225c:	08011bc4 	.word	0x08011bc4
 8002260:	24000004 	.word	0x24000004
 8002264:	24000000 	.word	0x24000000

08002268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_InitTick+0x60>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e021      	b.n	80022c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_InitTick+0x64>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_InitTick+0x60>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fcab 	bl	8003bee <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f001 fc75 	bl	8003b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_InitTick+0x68>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2400000c 	.word	0x2400000c
 80022cc:	24000000 	.word	0x24000000
 80022d0:	24000008 	.word	0x24000008

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2400000c 	.word	0x2400000c
 80022f8:	24000b58 	.word	0x24000b58

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	24000b58 	.word	0x24000b58

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2400000c 	.word	0x2400000c

0800235c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_GetREVID+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0c1b      	lsrs	r3, r3, #16
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	5c001000 	.word	0x5c001000

08002374 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3360      	adds	r3, #96	; 0x60
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	431a      	orrs	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	611a      	str	r2, [r3, #16]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800244e:	b480      	push	{r7}
 8002450:	b087      	sub	sp, #28
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3360      	adds	r3, #96	; 0x60
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	431a      	orrs	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]
  }
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3330      	adds	r3, #48	; 0x30
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	211f      	movs	r1, #31
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 011f 	and.w	r1, r3, #31
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3314      	adds	r3, #20
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	0e5b      	lsrs	r3, r3, #25
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	4413      	add	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	0d1b      	lsrs	r3, r3, #20
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2107      	movs	r1, #7
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	401a      	ands	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0d1b      	lsrs	r3, r3, #20
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0318 	and.w	r3, r3, #24
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <LL_ADC_SetChannelSingleDiff+0x44>)
 800257c:	40d9      	lsrs	r1, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	400b      	ands	r3, r1
 8002582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	000fffff 	.word	0x000fffff

080025a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 031f 	and.w	r3, r3, #31
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6093      	str	r3, [r2, #8]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	5fffffc0 	.word	0x5fffffc0

080025fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <LL_ADC_EnableInternalRegulator+0x24>)
 8002632:	4013      	ands	r3, r2
 8002634:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	6fffffc0 	.word	0x6fffffc0

0800264c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002660:	d101      	bne.n	8002666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <LL_ADC_Enable+0x24>)
 8002682:	4013      	ands	r3, r2
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	7fffffc0 	.word	0x7fffffc0

0800269c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <LL_ADC_IsEnabled+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_ADC_IsEnabled+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <LL_ADC_REG_StartConversion+0x24>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	f043 0204 	orr.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	7fffffc0 	.word	0x7fffffc0

080026ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d101      	bne.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d101      	bne.n	800272a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e18f      	b.n	8002a72 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff f8df 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff3f 	bl	80025fc <LL_ADC_IsDeepPowerDownEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff25 	bl	80025d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff5a 	bl	800264c <LL_ADC_IsInternalRegulatorEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff3e 	bl	8002624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b87      	ldr	r3, [pc, #540]	; (80029c8 <HAL_ADC_Init+0x290>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a87      	ldr	r2, [pc, #540]	; (80029cc <HAL_ADC_Init+0x294>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	3301      	adds	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ba:	e002      	b.n	80027c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff3d 	bl	800264c <LL_ADC_IsInternalRegulatorEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff77 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 80027fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 8129 	bne.w	8002a60 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 8125 	bne.w	8002a60 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800281e:	f043 0202 	orr.w	r2, r3, #2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff36 	bl	800269c <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d136      	bne.n	80028a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_ADC_Init+0x298>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x112>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <HAL_ADC_Init+0x29c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10e      	bne.n	8002868 <HAL_ADC_Init+0x130>
 800284a:	4861      	ldr	r0, [pc, #388]	; (80029d0 <HAL_ADC_Init+0x298>)
 800284c:	f7ff ff26 	bl	800269c <LL_ADC_IsEnabled>
 8002850:	4604      	mov	r4, r0
 8002852:	4860      	ldr	r0, [pc, #384]	; (80029d4 <HAL_ADC_Init+0x29c>)
 8002854:	f7ff ff22 	bl	800269c <LL_ADC_IsEnabled>
 8002858:	4603      	mov	r3, r0
 800285a:	4323      	orrs	r3, r4
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e008      	b.n	800287a <HAL_ADC_Init+0x142>
 8002868:	485b      	ldr	r0, [pc, #364]	; (80029d8 <HAL_ADC_Init+0x2a0>)
 800286a:	f7ff ff17 	bl	800269c <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a53      	ldr	r2, [pc, #332]	; (80029d0 <HAL_ADC_Init+0x298>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_ADC_Init+0x15a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_ADC_Init+0x29c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Init+0x15e>
 8002892:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_ADC_Init+0x2a4>)
 8002894:	e000      	b.n	8002898 <HAL_ADC_Init+0x160>
 8002896:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_ADC_Init+0x2a8>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f7ff fd68 	bl	8002374 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028a4:	f7ff fd5a 	bl	800235c <HAL_GetREVID>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d914      	bls.n	80028dc <HAL_ADC_Init+0x1a4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d110      	bne.n	80028dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7d5b      	ldrb	r3, [r3, #21]
 80028be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7f1b      	ldrb	r3, [r3, #28]
 80028d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028d4:	f043 030c 	orr.w	r3, r3, #12
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e00d      	b.n	80028f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7d5b      	ldrb	r3, [r3, #21]
 80028e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7f1b      	ldrb	r3, [r3, #28]
 80028f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7f1b      	ldrb	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d106      	bne.n	800290e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	3b01      	subs	r3, #1
 8002906:	045b      	lsls	r3, r3, #17
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_ADC_Init+0x2ac>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	69b9      	ldr	r1, [r7, #24]
 800293a:	430b      	orrs	r3, r1
 800293c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fed2 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002948:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fedf 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8002954:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d15f      	bne.n	8002a1c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d15c      	bne.n	8002a1c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7d1b      	ldrb	r3, [r3, #20]
 8002966:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_ADC_Init+0x2b0>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	430b      	orrs	r3, r1
 8002982:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800298a:	2b01      	cmp	r3, #1
 800298c:	d130      	bne.n	80029f0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <HAL_ADC_Init+0x2b4>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0411      	lsls	r1, r2, #16
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029aa:	4311      	orrs	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029b0:	4311      	orrs	r1, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029b6:	430a      	orrs	r2, r1
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	e01c      	b.n	8002a00 <HAL_ADC_Init+0x2c8>
 80029c6:	bf00      	nop
 80029c8:	24000000 	.word	0x24000000
 80029cc:	053e2d63 	.word	0x053e2d63
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40022100 	.word	0x40022100
 80029d8:	58026000 	.word	0x58026000
 80029dc:	40022300 	.word	0x40022300
 80029e0:	58026300 	.word	0x58026300
 80029e4:	fff0c003 	.word	0xfff0c003
 80029e8:	ffffbffc 	.word	0xffffbffc
 80029ec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fdd6 	bl	80035c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10c      	bne.n	8002a3e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f023 010f 	bic.w	r1, r3, #15
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3c:	e007      	b.n	8002a4e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 020f 	bic.w	r2, r2, #15
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
 8002a5e:	e007      	b.n	8002a70 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0210 	orr.w	r2, r3, #16
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop

08002a7c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5c      	ldr	r2, [pc, #368]	; (8002bfc <HAL_ADC_Start+0x180>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_Start+0x1c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5b      	ldr	r2, [pc, #364]	; (8002c00 <HAL_ADC_Start+0x184>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_Start+0x20>
 8002a98:	4b5a      	ldr	r3, [pc, #360]	; (8002c04 <HAL_ADC_Start+0x188>)
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_Start+0x22>
 8002a9c:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <HAL_ADC_Start+0x18c>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fd7e 	bl	80025a0 <LL_ADC_GetMultimode>
 8002aa4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fe1e 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 809a 	bne.w	8002bec <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Start+0x4a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e095      	b.n	8002bf2 <HAL_ADC_Start+0x176>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fcf0 	bl	80034b4 <ADC_Enable>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8081 	bne.w	8002be2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_ADC_Start+0x190>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a42      	ldr	r2, [pc, #264]	; (8002c00 <HAL_ADC_Start+0x184>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d002      	beq.n	8002b00 <HAL_ADC_Start+0x84>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_Start+0x86>
 8002b00:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <HAL_ADC_Start+0x180>)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d002      	beq.n	8002b10 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f023 0206 	bic.w	r2, r3, #6
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
 8002b36:	e002      	b.n	8002b3e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	221c      	movs	r2, #28
 8002b44:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <HAL_ADC_Start+0x184>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d002      	beq.n	8002b5e <HAL_ADC_Start+0xe2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_Start+0xe4>
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_ADC_Start+0x180>)
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d008      	beq.n	8002b7a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d002      	beq.n	8002b7a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b09      	cmp	r3, #9
 8002b78:	d114      	bne.n	8002ba4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fd91 	bl	80026c4 <LL_ADC_REG_StartConversion>
 8002ba2:	e025      	b.n	8002bf0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_ADC_Start+0x184>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d002      	beq.n	8002bc0 <HAL_ADC_Start+0x144>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_Start+0x146>
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_ADC_Start+0x180>)
 8002bc2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00f      	beq.n	8002bf0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
 8002be0:	e006      	b.n	8002bf0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bea:	e001      	b.n	8002bf0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
 8002bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40022000 	.word	0x40022000
 8002c00:	40022100 	.word	0x40022100
 8002c04:	40022300 	.word	0x40022300
 8002c08:	58026300 	.word	0x58026300
 8002c0c:	fffff0fe 	.word	0xfffff0fe

08002c10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a72      	ldr	r2, [pc, #456]	; (8002de8 <HAL_ADC_PollForConversion+0x1d8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_ADC_PollForConversion+0x1e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a70      	ldr	r2, [pc, #448]	; (8002dec <HAL_ADC_PollForConversion+0x1dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_PollForConversion+0x22>
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_ADC_PollForConversion+0x1e0>)
 8002c30:	e000      	b.n	8002c34 <HAL_ADC_PollForConversion+0x24>
 8002c32:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <HAL_ADC_PollForConversion+0x1e4>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fcb3 	bl	80025a0 <LL_ADC_GetMultimode>
 8002c3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d102      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c44:	2308      	movs	r3, #8
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e037      	b.n	8002cba <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d002      	beq.n	8002c5c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b09      	cmp	r3, #9
 8002c5a:	d111      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0b1      	b.n	8002dde <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002c7e:	e01c      	b.n	8002cba <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_ADC_PollForConversion+0x1d8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_PollForConversion+0x84>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_ADC_PollForConversion+0x1dc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_PollForConversion+0x88>
 8002c94:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_ADC_PollForConversion+0x1e0>)
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_PollForConversion+0x8a>
 8002c98:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <HAL_ADC_PollForConversion+0x1e4>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fc8e 	bl	80025bc <LL_ADC_GetMultiDMATransfer>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e093      	b.n	8002dde <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cba:	f7ff fb1f 	bl	80022fc <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cc0:	e021      	b.n	8002d06 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d01d      	beq.n	8002d06 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cca:	f7ff fb17 	bl	80022fc <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <HAL_ADC_PollForConversion+0xd0>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d112      	bne.n	8002d06 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0204 	orr.w	r2, r3, #4
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e06b      	b.n	8002dde <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0d6      	beq.n	8002cc2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fbad 	bl	8002484 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01c      	beq.n	8002d6a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7d5b      	ldrb	r3, [r3, #21]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d118      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d111      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_ADC_PollForConversion+0x1dc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d002      	beq.n	8002d7a <HAL_ADC_PollForConversion+0x16a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e000      	b.n	8002d7c <HAL_ADC_PollForConversion+0x16c>
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_ADC_PollForConversion+0x1d8>)
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d008      	beq.n	8002d96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d002      	beq.n	8002d96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b09      	cmp	r3, #9
 8002d94:	d104      	bne.n	8002da0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e00c      	b.n	8002dba <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_ADC_PollForConversion+0x1dc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d002      	beq.n	8002db0 <HAL_ADC_PollForConversion+0x1a0>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e000      	b.n	8002db2 <HAL_ADC_PollForConversion+0x1a2>
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_ADC_PollForConversion+0x1d8>)
 8002db2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d104      	bne.n	8002dca <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e008      	b.n	8002ddc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	220c      	movs	r2, #12
 8002dda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40022100 	.word	0x40022100
 8002df0:	40022300 	.word	0x40022300
 8002df4:	58026300 	.word	0x58026300

08002df8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b0a1      	sub	sp, #132	; 0x84
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a9d      	ldr	r2, [pc, #628]	; (80030a4 <HAL_ADC_ConfigChannel+0x290>)
 8002e2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e321      	b.n	8003482 <HAL_ADC_ConfigChannel+0x66e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fc4e 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8306 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x62>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	e016      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x90>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e86:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	69d1      	ldr	r1, [r2, #28]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f7ff faf3 	bl	80024aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fc0f 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002ece:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fc1c 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8002eda:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80b3 	bne.w	800304a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 80af 	bne.w	800304a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f7ff fb02 	bl	8002502 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <HAL_ADC_ConfigChannel+0x294>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x110>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	e01d      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x14c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x136>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	e00a      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x14c>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d027      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f78:	f7ff fa30 	bl	80023dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6919      	ldr	r1, [r3, #16]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	7e5b      	ldrb	r3, [r3, #25]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x17e>
 8002f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x180>
 8002f92:	2300      	movs	r3, #0
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7ff fa5a 	bl	800244e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x19c>
 8002faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x19e>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7ff fa32 	bl	800241c <LL_ADC_SetDataRightShift>
 8002fb8:	e047      	b.n	800304a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	069b      	lsls	r3, r3, #26
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d107      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fdc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d107      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003000:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	429a      	cmp	r2, r3
 8003014:	d107      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003024:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	069b      	lsls	r3, r3, #26
 8003036:	429a      	cmp	r2, r3
 8003038:	d107      	bne.n	800304a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003048:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fb24 	bl	800269c <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 820d 	bne.w	8003476 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	461a      	mov	r2, r3
 800306a:	f7ff fa75 	bl	8002558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_ADC_ConfigChannel+0x290>)
 8003074:	4293      	cmp	r3, r2
 8003076:	f040 8133 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003086:	2b00      	cmp	r3, #0
 8003088:	d110      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x298>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0e9b      	lsrs	r3, r3, #26
 8003090:	3301      	adds	r3, #1
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2b09      	cmp	r3, #9
 8003098:	bf94      	ite	ls
 800309a:	2301      	movls	r3, #1
 800309c:	2300      	movhi	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	e01e      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x2cc>
 80030a2:	bf00      	nop
 80030a4:	47ff0000 	.word	0x47ff0000
 80030a8:	5c001000 	.word	0x5c001000
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80030be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80030c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2b09      	cmp	r3, #9
 80030d8:	bf94      	ite	ls
 80030da:	2301      	movls	r3, #1
 80030dc:	2300      	movhi	r3, #0
 80030de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d079      	beq.n	80031d8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d107      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x2ec>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	3301      	adds	r3, #1
 80030f8:	069b      	lsls	r3, r3, #26
 80030fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fe:	e015      	b.n	800312c <HAL_ADC_ConfigChannel+0x318>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800311c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	069b      	lsls	r3, r3, #26
 8003128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_ADC_ConfigChannel+0x338>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	3301      	adds	r3, #1
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	e017      	b.n	800317c <HAL_ADC_ConfigChannel+0x368>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800315e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003164:	2320      	movs	r3, #32
 8003166:	e003      	b.n	8003170 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	ea42 0103 	orr.w	r1, r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x38e>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	0e9b      	lsrs	r3, r3, #26
 8003192:	3301      	adds	r3, #1
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	051b      	lsls	r3, r3, #20
 80031a0:	e018      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x3c0>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d4:	430b      	orrs	r3, r1
 80031d6:	e07e      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x3e0>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	e015      	b.n	8003220 <HAL_ADC_ConfigChannel+0x40c>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x42c>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	3301      	adds	r3, #1
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	e017      	b.n	8003270 <HAL_ADC_ConfigChannel+0x45c>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	61bb      	str	r3, [r7, #24]
  return result;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003258:	2320      	movs	r3, #32
 800325a:	e003      	b.n	8003264 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3301      	adds	r3, #1
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	ea42 0103 	orr.w	r1, r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_ADC_ConfigChannel+0x488>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0e9b      	lsrs	r3, r3, #26
 8003286:	3301      	adds	r3, #1
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	3b1e      	subs	r3, #30
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800329a:	e01b      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x4c0>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	60fb      	str	r3, [r7, #12]
  return result;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f003 021f 	and.w	r2, r3, #31
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	3b1e      	subs	r3, #30
 80032ce:	051b      	lsls	r3, r3, #20
 80032d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d4:	430b      	orrs	r3, r1
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	6892      	ldr	r2, [r2, #8]
 80032da:	4619      	mov	r1, r3
 80032dc:	f7ff f911 	bl	8002502 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f280 80c6 	bge.w	8003476 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a67      	ldr	r2, [pc, #412]	; (800348c <HAL_ADC_ConfigChannel+0x678>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x4ea>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a65      	ldr	r2, [pc, #404]	; (8003490 <HAL_ADC_ConfigChannel+0x67c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x4ee>
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_ADC_ConfigChannel+0x680>)
 8003300:	e000      	b.n	8003304 <HAL_ADC_ConfigChannel+0x4f0>
 8003302:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_ADC_ConfigChannel+0x684>)
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f85b 	bl	80023c0 <LL_ADC_GetCommonPathInternalCh>
 800330a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5e      	ldr	r2, [pc, #376]	; (800348c <HAL_ADC_ConfigChannel+0x678>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_ADC_ConfigChannel+0x50c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5d      	ldr	r2, [pc, #372]	; (8003490 <HAL_ADC_ConfigChannel+0x67c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10e      	bne.n	800333e <HAL_ADC_ConfigChannel+0x52a>
 8003320:	485a      	ldr	r0, [pc, #360]	; (800348c <HAL_ADC_ConfigChannel+0x678>)
 8003322:	f7ff f9bb 	bl	800269c <LL_ADC_IsEnabled>
 8003326:	4604      	mov	r4, r0
 8003328:	4859      	ldr	r0, [pc, #356]	; (8003490 <HAL_ADC_ConfigChannel+0x67c>)
 800332a:	f7ff f9b7 	bl	800269c <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	4323      	orrs	r3, r4
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e008      	b.n	8003350 <HAL_ADC_ConfigChannel+0x53c>
 800333e:	4857      	ldr	r0, [pc, #348]	; (800349c <HAL_ADC_ConfigChannel+0x688>)
 8003340:	f7ff f9ac 	bl	800269c <LL_ADC_IsEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d07d      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a51      	ldr	r2, [pc, #324]	; (80034a0 <HAL_ADC_ConfigChannel+0x68c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d130      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x5ac>
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d12b      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a4b      	ldr	r2, [pc, #300]	; (800349c <HAL_ADC_ConfigChannel+0x688>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f040 8081 	bne.w	8003476 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a44      	ldr	r2, [pc, #272]	; (800348c <HAL_ADC_ConfigChannel+0x678>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x574>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a43      	ldr	r2, [pc, #268]	; (8003490 <HAL_ADC_ConfigChannel+0x67c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x578>
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_ADC_ConfigChannel+0x680>)
 800338a:	e000      	b.n	800338e <HAL_ADC_ConfigChannel+0x57a>
 800338c:	4a42      	ldr	r2, [pc, #264]	; (8003498 <HAL_ADC_ConfigChannel+0x684>)
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe ffff 	bl	800239a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800339c:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <HAL_ADC_ConfigChannel+0x690>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	4a41      	ldr	r2, [pc, #260]	; (80034a8 <HAL_ADC_ConfigChannel+0x694>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033b0:	e002      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f9      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033be:	e05a      	b.n	8003476 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_ADC_ConfigChannel+0x698>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d11e      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x5f4>
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d119      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a30      	ldr	r2, [pc, #192]	; (800349c <HAL_ADC_ConfigChannel+0x688>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d14b      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2a      	ldr	r2, [pc, #168]	; (800348c <HAL_ADC_ConfigChannel+0x678>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_ADC_ConfigChannel+0x5de>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a28      	ldr	r2, [pc, #160]	; (8003490 <HAL_ADC_ConfigChannel+0x67c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x5e2>
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <HAL_ADC_ConfigChannel+0x680>)
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x5e4>
 80033f6:	4a28      	ldr	r2, [pc, #160]	; (8003498 <HAL_ADC_ConfigChannel+0x684>)
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe ffca 	bl	800239a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003406:	e036      	b.n	8003476 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <HAL_ADC_ConfigChannel+0x69c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d131      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x662>
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d12c      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_ADC_ConfigChannel+0x688>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d127      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <HAL_ADC_ConfigChannel+0x678>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_ADC_ConfigChannel+0x626>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_ADC_ConfigChannel+0x67c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x62a>
 800343a:	4a16      	ldr	r2, [pc, #88]	; (8003494 <HAL_ADC_ConfigChannel+0x680>)
 800343c:	e000      	b.n	8003440 <HAL_ADC_ConfigChannel+0x62c>
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_ADC_ConfigChannel+0x684>)
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fe ffa6 	bl	800239a <LL_ADC_SetCommonPathInternalCh>
 800344e:	e012      	b.n	8003476 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003462:	e008      	b.n	8003476 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800347e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003482:	4618      	mov	r0, r3
 8003484:	3784      	adds	r7, #132	; 0x84
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000
 8003490:	40022100 	.word	0x40022100
 8003494:	40022300 	.word	0x40022300
 8003498:	58026300 	.word	0x58026300
 800349c:	58026000 	.word	0x58026000
 80034a0:	cb840000 	.word	0xcb840000
 80034a4:	24000000 	.word	0x24000000
 80034a8:	053e2d63 	.word	0x053e2d63
 80034ac:	c7520000 	.word	0xc7520000
 80034b0:	cfb80000 	.word	0xcfb80000

080034b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f8eb 	bl	800269c <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d16e      	bne.n	80035aa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	4b38      	ldr	r3, [pc, #224]	; (80035b4 <ADC_Enable+0x100>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e05a      	b.n	80035ac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff f8ba 	bl	8002674 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003500:	f7fe fefc 	bl	80022fc <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <ADC_Enable+0x104>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <ADC_Enable+0x66>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a29      	ldr	r2, [pc, #164]	; (80035bc <ADC_Enable+0x108>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <ADC_Enable+0x6a>
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <ADC_Enable+0x10c>)
 800351c:	e000      	b.n	8003520 <ADC_Enable+0x6c>
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <ADC_Enable+0x110>)
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff f83d 	bl	80025a0 <LL_ADC_GetMultimode>
 8003526:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a23      	ldr	r2, [pc, #140]	; (80035bc <ADC_Enable+0x108>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d002      	beq.n	8003538 <ADC_Enable+0x84>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e000      	b.n	800353a <ADC_Enable+0x86>
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <ADC_Enable+0x104>)
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4293      	cmp	r3, r2
 8003540:	d02c      	beq.n	800359c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d130      	bne.n	80035aa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003548:	e028      	b.n	800359c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f8a4 	bl	800269c <LL_ADC_IsEnabled>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d104      	bne.n	8003564 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f888 	bl	8002674 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003564:	f7fe feca 	bl	80022fc <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d914      	bls.n	800359c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d00d      	beq.n	800359c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f043 0210 	orr.w	r2, r3, #16
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e007      	b.n	80035ac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d1cf      	bne.n	800354a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	8000003f 	.word	0x8000003f
 80035b8:	40022000 	.word	0x40022000
 80035bc:	40022100 	.word	0x40022100
 80035c0:	40022300 	.word	0x40022300
 80035c4:	58026300 	.word	0x58026300

080035c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7a      	ldr	r2, [pc, #488]	; (80037c0 <ADC_ConfigureBoostMode+0x1f8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <ADC_ConfigureBoostMode+0x1c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a79      	ldr	r2, [pc, #484]	; (80037c4 <ADC_ConfigureBoostMode+0x1fc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d109      	bne.n	80035f8 <ADC_ConfigureBoostMode+0x30>
 80035e4:	4b78      	ldr	r3, [pc, #480]	; (80037c8 <ADC_ConfigureBoostMode+0x200>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e008      	b.n	800360a <ADC_ConfigureBoostMode+0x42>
 80035f8:	4b74      	ldr	r3, [pc, #464]	; (80037cc <ADC_ConfigureBoostMode+0x204>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01c      	beq.n	8003648 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800360e:	f004 f855 	bl	80076bc <HAL_RCC_GetHCLKFreq>
 8003612:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800361c:	d010      	beq.n	8003640 <ADC_ConfigureBoostMode+0x78>
 800361e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003622:	d873      	bhi.n	800370c <ADC_ConfigureBoostMode+0x144>
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d002      	beq.n	8003630 <ADC_ConfigureBoostMode+0x68>
 800362a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362e:	d16d      	bne.n	800370c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	60fb      	str	r3, [r7, #12]
        break;
 800363e:	e068      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	60fb      	str	r3, [r7, #12]
        break;
 8003646:	e064      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003648:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	f005 fa9a 	bl	8008b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8003654:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800365e:	d051      	beq.n	8003704 <ADC_ConfigureBoostMode+0x13c>
 8003660:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003664:	d854      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 8003666:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800366a:	d047      	beq.n	80036fc <ADC_ConfigureBoostMode+0x134>
 800366c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003670:	d84e      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 8003672:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003676:	d03d      	beq.n	80036f4 <ADC_ConfigureBoostMode+0x12c>
 8003678:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800367c:	d848      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 800367e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003682:	d033      	beq.n	80036ec <ADC_ConfigureBoostMode+0x124>
 8003684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003688:	d842      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 800368a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800368e:	d029      	beq.n	80036e4 <ADC_ConfigureBoostMode+0x11c>
 8003690:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003694:	d83c      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 8003696:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800369a:	d01a      	beq.n	80036d2 <ADC_ConfigureBoostMode+0x10a>
 800369c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036a0:	d836      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 80036a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036a6:	d014      	beq.n	80036d2 <ADC_ConfigureBoostMode+0x10a>
 80036a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036ac:	d830      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d00e      	beq.n	80036d2 <ADC_ConfigureBoostMode+0x10a>
 80036b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b8:	d82a      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 80036ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036be:	d008      	beq.n	80036d2 <ADC_ConfigureBoostMode+0x10a>
 80036c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036c4:	d824      	bhi.n	8003710 <ADC_ConfigureBoostMode+0x148>
 80036c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ca:	d002      	beq.n	80036d2 <ADC_ConfigureBoostMode+0x10a>
 80036cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036d0:	d11e      	bne.n	8003710 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e016      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
        break;
 80036ea:	e012      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	60fb      	str	r3, [r7, #12]
        break;
 80036f2:	e00e      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	60fb      	str	r3, [r7, #12]
        break;
 80036fa:	e00a      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	09db      	lsrs	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
        break;
 8003702:	e006      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	60fb      	str	r3, [r7, #12]
        break;
 800370a:	e002      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
        break;
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003710:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003712:	f7fe fe23 	bl	800235c <HAL_GetREVID>
 8003716:	4603      	mov	r3, r0
 8003718:	f241 0203 	movw	r2, #4099	; 0x1003
 800371c:	4293      	cmp	r3, r2
 800371e:	d815      	bhi.n	800374c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <ADC_ConfigureBoostMode+0x208>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d908      	bls.n	800373a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003736:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003738:	e03e      	b.n	80037b8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	e035      	b.n	80037b8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <ADC_ConfigureBoostMode+0x20c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d808      	bhi.n	800376c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	e025      	b.n	80037b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <ADC_ConfigureBoostMode+0x210>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d80a      	bhi.n	800378a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	e016      	b.n	80037b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <ADC_ConfigureBoostMode+0x214>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d80a      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	e007      	b.n	80037b8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40022100 	.word	0x40022100
 80037c8:	40022300 	.word	0x40022300
 80037cc:	58026300 	.word	0x58026300
 80037d0:	01312d00 	.word	0x01312d00
 80037d4:	005f5e10 	.word	0x005f5e10
 80037d8:	00bebc20 	.word	0x00bebc20
 80037dc:	017d7840 	.word	0x017d7840

080037e0 <LL_ADC_IsEnabled>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <LL_ADC_IsEnabled+0x18>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <LL_ADC_IsEnabled+0x1a>
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_REG_IsConversionOngoing>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d101      	bne.n	800381e <LL_ADC_REG_IsConversionOngoing+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b09f      	sub	sp, #124	; 0x7c
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003846:	2302      	movs	r3, #2
 8003848:	e0be      	b.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003856:	2300      	movs	r3, #0
 8003858:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003864:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	e001      	b.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10b      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e09d      	b.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ffb9 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003894:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ffb3 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d17f      	bne.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d17c      	bne.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80038c0:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038c2:	e000      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80038c4:	4b45      	ldr	r3, [pc, #276]	; (80039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d039      	beq.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	431a      	orrs	r2, r3
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10e      	bne.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80038f6:	4836      	ldr	r0, [pc, #216]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038f8:	f7ff ff72 	bl	80037e0 <LL_ADC_IsEnabled>
 80038fc:	4604      	mov	r4, r0
 80038fe:	4835      	ldr	r0, [pc, #212]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003900:	f7ff ff6e 	bl	80037e0 <LL_ADC_IsEnabled>
 8003904:	4603      	mov	r3, r0
 8003906:	4323      	orrs	r3, r4
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e008      	b.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003914:	4832      	ldr	r0, [pc, #200]	; (80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003916:	f7ff ff63 	bl	80037e0 <LL_ADC_IsEnabled>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d047      	beq.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800392a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003930:	4013      	ands	r3, r2
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	6811      	ldr	r1, [r2, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	6892      	ldr	r2, [r2, #8]
 800393a:	430a      	orrs	r2, r1
 800393c:	431a      	orrs	r2, r3
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003942:	e03a      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800394c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10e      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003964:	481a      	ldr	r0, [pc, #104]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003966:	f7ff ff3b 	bl	80037e0 <LL_ADC_IsEnabled>
 800396a:	4604      	mov	r4, r0
 800396c:	4819      	ldr	r0, [pc, #100]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800396e:	f7ff ff37 	bl	80037e0 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	4323      	orrs	r3, r4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e008      	b.n	8003994 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003982:	4817      	ldr	r0, [pc, #92]	; (80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003984:	f7ff ff2c 	bl	80037e0 <LL_ADC_IsEnabled>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800399e:	4013      	ands	r3, r2
 80039a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a4:	e009      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80039b8:	e000      	b.n	80039bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	377c      	adds	r7, #124	; 0x7c
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40022100 	.word	0x40022100
 80039d8:	40022300 	.word	0x40022300
 80039dc:	58026300 	.word	0x58026300
 80039e0:	58026000 	.word	0x58026000
 80039e4:	fffff0e0 	.word	0xfffff0e0

080039e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <__NVIC_SetPriorityGrouping+0x40>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <__NVIC_SetPriorityGrouping+0x40>)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	60d3      	str	r3, [r2, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00
 8003a2c:	05fa0000 	.word	0x05fa0000

08003a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <__NVIC_GetPriorityGrouping+0x18>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 0307 	and.w	r3, r3, #7
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	db0b      	blt.n	8003a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4907      	ldr	r1, [pc, #28]	; (8003a84 <__NVIC_EnableIRQ+0x38>)
 8003a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000e100 	.word	0xe000e100

08003a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db0a      	blt.n	8003ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	490c      	ldr	r1, [pc, #48]	; (8003ad4 <__NVIC_SetPriority+0x4c>)
 8003aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab0:	e00a      	b.n	8003ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <__NVIC_SetPriority+0x50>)
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	0112      	lsls	r2, r2, #4
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	761a      	strb	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e100 	.word	0xe000e100
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f1c3 0307 	rsb	r3, r3, #7
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	bf28      	it	cs
 8003afa:	2304      	movcs	r3, #4
 8003afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d902      	bls.n	8003b0c <NVIC_EncodePriority+0x30>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b03      	subs	r3, #3
 8003b0a:	e000      	b.n	8003b0e <NVIC_EncodePriority+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	401a      	ands	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	4313      	orrs	r3, r2
         );
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b54:	d301      	bcc.n	8003b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b56:	2301      	movs	r3, #1
 8003b58:	e00f      	b.n	8003b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <SysTick_Config+0x40>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b62:	210f      	movs	r1, #15
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	f7ff ff8e 	bl	8003a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <SysTick_Config+0x40>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <SysTick_Config+0x40>)
 8003b74:	2207      	movs	r2, #7
 8003b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	e000e010 	.word	0xe000e010

08003b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff29 	bl	80039e8 <__NVIC_SetPriorityGrouping>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bac:	f7ff ff40 	bl	8003a30 <__NVIC_GetPriorityGrouping>
 8003bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff90 	bl	8003adc <NVIC_EncodePriority>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff5f 	bl	8003a88 <__NVIC_SetPriority>
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4603      	mov	r3, r0
 8003bda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff33 	bl	8003a4c <__NVIC_EnableIRQ>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ffa4 	bl	8003b44 <SysTick_Config>
 8003bfc:	4603      	mov	r3, r0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7fe fb74 	bl	80022fc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e316      	b.n	800424e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a66      	ldr	r2, [pc, #408]	; (8003dc0 <HAL_DMA_Init+0x1b8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d04a      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a65      	ldr	r2, [pc, #404]	; (8003dc4 <HAL_DMA_Init+0x1bc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d045      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a63      	ldr	r2, [pc, #396]	; (8003dc8 <HAL_DMA_Init+0x1c0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d040      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a62      	ldr	r2, [pc, #392]	; (8003dcc <HAL_DMA_Init+0x1c4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d03b      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a60      	ldr	r2, [pc, #384]	; (8003dd0 <HAL_DMA_Init+0x1c8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d036      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5f      	ldr	r2, [pc, #380]	; (8003dd4 <HAL_DMA_Init+0x1cc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d031      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <HAL_DMA_Init+0x1d0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02c      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <HAL_DMA_Init+0x1d4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d027      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5a      	ldr	r2, [pc, #360]	; (8003de0 <HAL_DMA_Init+0x1d8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d022      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a59      	ldr	r2, [pc, #356]	; (8003de4 <HAL_DMA_Init+0x1dc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01d      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a57      	ldr	r2, [pc, #348]	; (8003de8 <HAL_DMA_Init+0x1e0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a56      	ldr	r2, [pc, #344]	; (8003dec <HAL_DMA_Init+0x1e4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a54      	ldr	r2, [pc, #336]	; (8003df0 <HAL_DMA_Init+0x1e8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a53      	ldr	r2, [pc, #332]	; (8003df4 <HAL_DMA_Init+0x1ec>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a51      	ldr	r2, [pc, #324]	; (8003df8 <HAL_DMA_Init+0x1f0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_DMA_Init+0xb8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a50      	ldr	r2, [pc, #320]	; (8003dfc <HAL_DMA_Init+0x1f4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA_Init+0xbc>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_DMA_Init+0xbe>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 813b 	beq.w	8003f42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a37      	ldr	r2, [pc, #220]	; (8003dc0 <HAL_DMA_Init+0x1b8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04a      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <HAL_DMA_Init+0x1bc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <HAL_DMA_Init+0x1c0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d040      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_DMA_Init+0x1c4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a31      	ldr	r2, [pc, #196]	; (8003dd0 <HAL_DMA_Init+0x1c8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d036      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <HAL_DMA_Init+0x1cc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2e      	ldr	r2, [pc, #184]	; (8003dd8 <HAL_DMA_Init+0x1d0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02c      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <HAL_DMA_Init+0x1d4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d027      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2b      	ldr	r2, [pc, #172]	; (8003de0 <HAL_DMA_Init+0x1d8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <HAL_DMA_Init+0x1dc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <HAL_DMA_Init+0x1e0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_DMA_Init+0x1e4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <HAL_DMA_Init+0x1e8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <HAL_DMA_Init+0x1ec>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_DMA_Init+0x1f0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Init+0x174>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_DMA_Init+0x1f4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <HAL_DMA_Init+0x186>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e007      	b.n	8003d9e <HAL_DMA_Init+0x196>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d9e:	e02f      	b.n	8003e00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da0:	f7fe faac 	bl	80022fc <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d928      	bls.n	8003e00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2203      	movs	r2, #3
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e246      	b.n	800424e <HAL_DMA_Init+0x646>
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1c8      	bne.n	8003da0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4b83      	ldr	r3, [pc, #524]	; (8004028 <HAL_DMA_Init+0x420>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003e64:	4b71      	ldr	r3, [pc, #452]	; (800402c <HAL_DMA_Init+0x424>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b71      	ldr	r3, [pc, #452]	; (8004030 <HAL_DMA_Init+0x428>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e70:	d328      	bcc.n	8003ec4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b28      	cmp	r3, #40	; 0x28
 8003e78:	d903      	bls.n	8003e82 <HAL_DMA_Init+0x27a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e80:	d917      	bls.n	8003eb2 <HAL_DMA_Init+0x2aa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b3e      	cmp	r3, #62	; 0x3e
 8003e88:	d903      	bls.n	8003e92 <HAL_DMA_Init+0x28a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b42      	cmp	r3, #66	; 0x42
 8003e90:	d90f      	bls.n	8003eb2 <HAL_DMA_Init+0x2aa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b46      	cmp	r3, #70	; 0x46
 8003e98:	d903      	bls.n	8003ea2 <HAL_DMA_Init+0x29a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b48      	cmp	r3, #72	; 0x48
 8003ea0:	d907      	bls.n	8003eb2 <HAL_DMA_Init+0x2aa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ea8:	d905      	bls.n	8003eb6 <HAL_DMA_Init+0x2ae>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b52      	cmp	r3, #82	; 0x52
 8003eb0:	d801      	bhi.n	8003eb6 <HAL_DMA_Init+0x2ae>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMA_Init+0x2b0>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d117      	bne.n	8003f1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f001 ff1d 	bl	8005d40 <DMA_CheckFifoParam>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e197      	b.n	800424e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 fe58 	bl	8005bdc <DMA_CalcBaseAndBitshift>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	223f      	movs	r2, #63	; 0x3f
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e0cd      	b.n	80040de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a3b      	ldr	r2, [pc, #236]	; (8004034 <HAL_DMA_Init+0x42c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a39      	ldr	r2, [pc, #228]	; (8004038 <HAL_DMA_Init+0x430>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a38      	ldr	r2, [pc, #224]	; (800403c <HAL_DMA_Init+0x434>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a36      	ldr	r2, [pc, #216]	; (8004040 <HAL_DMA_Init+0x438>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a35      	ldr	r2, [pc, #212]	; (8004044 <HAL_DMA_Init+0x43c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a33      	ldr	r2, [pc, #204]	; (8004048 <HAL_DMA_Init+0x440>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a32      	ldr	r2, [pc, #200]	; (800404c <HAL_DMA_Init+0x444>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_DMA_Init+0x38a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a30      	ldr	r2, [pc, #192]	; (8004050 <HAL_DMA_Init+0x448>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_DMA_Init+0x38e>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_DMA_Init+0x390>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8097 	beq.w	80040cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a24      	ldr	r2, [pc, #144]	; (8004034 <HAL_DMA_Init+0x42c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d021      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_DMA_Init+0x430>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01c      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a21      	ldr	r2, [pc, #132]	; (800403c <HAL_DMA_Init+0x434>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d017      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_DMA_Init+0x438>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d012      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <HAL_DMA_Init+0x43c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00d      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_DMA_Init+0x440>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d008      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_DMA_Init+0x444>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_Init+0x3e4>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_DMA_Init+0x448>)
 8003fea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_DMA_Init+0x44c>)
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d021      	beq.n	8004058 <HAL_DMA_Init+0x450>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d102      	bne.n	8004022 <HAL_DMA_Init+0x41a>
 800401c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004020:	e01b      	b.n	800405a <HAL_DMA_Init+0x452>
 8004022:	2300      	movs	r3, #0
 8004024:	e019      	b.n	800405a <HAL_DMA_Init+0x452>
 8004026:	bf00      	nop
 8004028:	fe10803f 	.word	0xfe10803f
 800402c:	5c001000 	.word	0x5c001000
 8004030:	ffff0000 	.word	0xffff0000
 8004034:	58025408 	.word	0x58025408
 8004038:	5802541c 	.word	0x5802541c
 800403c:	58025430 	.word	0x58025430
 8004040:	58025444 	.word	0x58025444
 8004044:	58025458 	.word	0x58025458
 8004048:	5802546c 	.word	0x5802546c
 800404c:	58025480 	.word	0x58025480
 8004050:	58025494 	.word	0x58025494
 8004054:	fffe000f 	.word	0xfffe000f
 8004058:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004060:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004068:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004088:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	4b6e      	ldr	r3, [pc, #440]	; (8004258 <HAL_DMA_Init+0x650>)
 80040a0:	4413      	add	r3, r2
 80040a2:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_DMA_Init+0x654>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f001 fd93 	bl	8005bdc <DMA_CalcBaseAndBitshift>
 80040b6:	4603      	mov	r3, r0
 80040b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2201      	movs	r2, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	e008      	b.n	80040de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2203      	movs	r2, #3
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0b7      	b.n	800424e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5f      	ldr	r2, [pc, #380]	; (8004260 <HAL_DMA_Init+0x658>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d072      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_DMA_Init+0x65c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d06d      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5c      	ldr	r2, [pc, #368]	; (8004268 <HAL_DMA_Init+0x660>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d068      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_DMA_Init+0x664>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d063      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a59      	ldr	r2, [pc, #356]	; (8004270 <HAL_DMA_Init+0x668>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d05e      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_DMA_Init+0x66c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d059      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a56      	ldr	r2, [pc, #344]	; (8004278 <HAL_DMA_Init+0x670>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d054      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a54      	ldr	r2, [pc, #336]	; (800427c <HAL_DMA_Init+0x674>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d04f      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a53      	ldr	r2, [pc, #332]	; (8004280 <HAL_DMA_Init+0x678>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04a      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a51      	ldr	r2, [pc, #324]	; (8004284 <HAL_DMA_Init+0x67c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d045      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a50      	ldr	r2, [pc, #320]	; (8004288 <HAL_DMA_Init+0x680>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d040      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4e      	ldr	r2, [pc, #312]	; (800428c <HAL_DMA_Init+0x684>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d03b      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4d      	ldr	r2, [pc, #308]	; (8004290 <HAL_DMA_Init+0x688>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d036      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a4b      	ldr	r2, [pc, #300]	; (8004294 <HAL_DMA_Init+0x68c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d031      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a4a      	ldr	r2, [pc, #296]	; (8004298 <HAL_DMA_Init+0x690>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d02c      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a48      	ldr	r2, [pc, #288]	; (800429c <HAL_DMA_Init+0x694>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d027      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a47      	ldr	r2, [pc, #284]	; (80042a0 <HAL_DMA_Init+0x698>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a45      	ldr	r2, [pc, #276]	; (80042a4 <HAL_DMA_Init+0x69c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01d      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a44      	ldr	r2, [pc, #272]	; (80042a8 <HAL_DMA_Init+0x6a0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a42      	ldr	r2, [pc, #264]	; (80042ac <HAL_DMA_Init+0x6a4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a41      	ldr	r2, [pc, #260]	; (80042b0 <HAL_DMA_Init+0x6a8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3f      	ldr	r2, [pc, #252]	; (80042b4 <HAL_DMA_Init+0x6ac>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a3e      	ldr	r2, [pc, #248]	; (80042b8 <HAL_DMA_Init+0x6b0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_Init+0x5c6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a3c      	ldr	r2, [pc, #240]	; (80042bc <HAL_DMA_Init+0x6b4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_DMA_Init+0x5ca>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <HAL_DMA_Init+0x5cc>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d032      	beq.n	800423e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 fe2d 	bl	8005e38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d102      	bne.n	80041ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004200:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <HAL_DMA_Init+0x624>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d80c      	bhi.n	800422c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 feaa 	bl	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	e008      	b.n	800423e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	a7fdabf8 	.word	0xa7fdabf8
 800425c:	cccccccd 	.word	0xcccccccd
 8004260:	40020010 	.word	0x40020010
 8004264:	40020028 	.word	0x40020028
 8004268:	40020040 	.word	0x40020040
 800426c:	40020058 	.word	0x40020058
 8004270:	40020070 	.word	0x40020070
 8004274:	40020088 	.word	0x40020088
 8004278:	400200a0 	.word	0x400200a0
 800427c:	400200b8 	.word	0x400200b8
 8004280:	40020410 	.word	0x40020410
 8004284:	40020428 	.word	0x40020428
 8004288:	40020440 	.word	0x40020440
 800428c:	40020458 	.word	0x40020458
 8004290:	40020470 	.word	0x40020470
 8004294:	40020488 	.word	0x40020488
 8004298:	400204a0 	.word	0x400204a0
 800429c:	400204b8 	.word	0x400204b8
 80042a0:	58025408 	.word	0x58025408
 80042a4:	5802541c 	.word	0x5802541c
 80042a8:	58025430 	.word	0x58025430
 80042ac:	58025444 	.word	0x58025444
 80042b0:	58025458 	.word	0x58025458
 80042b4:	5802546c 	.word	0x5802546c
 80042b8:	58025480 	.word	0x58025480
 80042bc:	58025494 	.word	0x58025494

080042c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80042c8:	f7fe f818 	bl	80022fc <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e2dc      	b.n	8004892 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e2cd      	b.n	8004892 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a76      	ldr	r2, [pc, #472]	; (80044d4 <HAL_DMA_Abort+0x214>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d04a      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a74      	ldr	r2, [pc, #464]	; (80044d8 <HAL_DMA_Abort+0x218>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d045      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a73      	ldr	r2, [pc, #460]	; (80044dc <HAL_DMA_Abort+0x21c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d040      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a71      	ldr	r2, [pc, #452]	; (80044e0 <HAL_DMA_Abort+0x220>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d03b      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a70      	ldr	r2, [pc, #448]	; (80044e4 <HAL_DMA_Abort+0x224>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d036      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_DMA_Abort+0x228>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d031      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6d      	ldr	r2, [pc, #436]	; (80044ec <HAL_DMA_Abort+0x22c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d02c      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6b      	ldr	r2, [pc, #428]	; (80044f0 <HAL_DMA_Abort+0x230>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d027      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6a      	ldr	r2, [pc, #424]	; (80044f4 <HAL_DMA_Abort+0x234>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a68      	ldr	r2, [pc, #416]	; (80044f8 <HAL_DMA_Abort+0x238>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a67      	ldr	r2, [pc, #412]	; (80044fc <HAL_DMA_Abort+0x23c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_DMA_Abort+0x240>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a64      	ldr	r2, [pc, #400]	; (8004504 <HAL_DMA_Abort+0x244>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a62      	ldr	r2, [pc, #392]	; (8004508 <HAL_DMA_Abort+0x248>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a61      	ldr	r2, [pc, #388]	; (800450c <HAL_DMA_Abort+0x24c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_DMA_Abort+0xd6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a5f      	ldr	r2, [pc, #380]	; (8004510 <HAL_DMA_Abort+0x250>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_DMA_Abort+0xda>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_DMA_Abort+0xdc>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 021e 	bic.w	r2, r2, #30
 80043ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e00a      	b.n	80043de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020e 	bic.w	r2, r2, #14
 80043d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3c      	ldr	r2, [pc, #240]	; (80044d4 <HAL_DMA_Abort+0x214>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d072      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3a      	ldr	r2, [pc, #232]	; (80044d8 <HAL_DMA_Abort+0x218>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d06d      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a39      	ldr	r2, [pc, #228]	; (80044dc <HAL_DMA_Abort+0x21c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d068      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <HAL_DMA_Abort+0x220>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d063      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a36      	ldr	r2, [pc, #216]	; (80044e4 <HAL_DMA_Abort+0x224>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d05e      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a34      	ldr	r2, [pc, #208]	; (80044e8 <HAL_DMA_Abort+0x228>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d059      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a33      	ldr	r2, [pc, #204]	; (80044ec <HAL_DMA_Abort+0x22c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d054      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a31      	ldr	r2, [pc, #196]	; (80044f0 <HAL_DMA_Abort+0x230>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04f      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <HAL_DMA_Abort+0x234>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d04a      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_DMA_Abort+0x238>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d045      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_DMA_Abort+0x23c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d040      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <HAL_DMA_Abort+0x240>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d03b      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <HAL_DMA_Abort+0x244>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d036      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_DMA_Abort+0x248>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d031      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <HAL_DMA_Abort+0x24c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d02c      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_DMA_Abort+0x250>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d027      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a24      	ldr	r2, [pc, #144]	; (8004514 <HAL_DMA_Abort+0x254>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_DMA_Abort+0x258>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01d      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_DMA_Abort+0x25c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_DMA_Abort+0x260>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_DMA_Abort+0x264>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_DMA_Abort+0x268>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_DMA_Abort+0x26c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_DMA_Abort+0x20e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_DMA_Abort+0x270>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d132      	bne.n	8004534 <HAL_DMA_Abort+0x274>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e031      	b.n	8004536 <HAL_DMA_Abort+0x276>
 80044d2:	bf00      	nop
 80044d4:	40020010 	.word	0x40020010
 80044d8:	40020028 	.word	0x40020028
 80044dc:	40020040 	.word	0x40020040
 80044e0:	40020058 	.word	0x40020058
 80044e4:	40020070 	.word	0x40020070
 80044e8:	40020088 	.word	0x40020088
 80044ec:	400200a0 	.word	0x400200a0
 80044f0:	400200b8 	.word	0x400200b8
 80044f4:	40020410 	.word	0x40020410
 80044f8:	40020428 	.word	0x40020428
 80044fc:	40020440 	.word	0x40020440
 8004500:	40020458 	.word	0x40020458
 8004504:	40020470 	.word	0x40020470
 8004508:	40020488 	.word	0x40020488
 800450c:	400204a0 	.word	0x400204a0
 8004510:	400204b8 	.word	0x400204b8
 8004514:	58025408 	.word	0x58025408
 8004518:	5802541c 	.word	0x5802541c
 800451c:	58025430 	.word	0x58025430
 8004520:	58025444 	.word	0x58025444
 8004524:	58025458 	.word	0x58025458
 8004528:	5802546c 	.word	0x5802546c
 800452c:	58025480 	.word	0x58025480
 8004530:	58025494 	.word	0x58025494
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004548:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6d      	ldr	r2, [pc, #436]	; (8004704 <HAL_DMA_Abort+0x444>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <HAL_DMA_Abort+0x448>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6a      	ldr	r2, [pc, #424]	; (800470c <HAL_DMA_Abort+0x44c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a68      	ldr	r2, [pc, #416]	; (8004710 <HAL_DMA_Abort+0x450>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a67      	ldr	r2, [pc, #412]	; (8004714 <HAL_DMA_Abort+0x454>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_DMA_Abort+0x458>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a64      	ldr	r2, [pc, #400]	; (800471c <HAL_DMA_Abort+0x45c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a62      	ldr	r2, [pc, #392]	; (8004720 <HAL_DMA_Abort+0x460>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a61      	ldr	r2, [pc, #388]	; (8004724 <HAL_DMA_Abort+0x464>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5f      	ldr	r2, [pc, #380]	; (8004728 <HAL_DMA_Abort+0x468>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_DMA_Abort+0x46c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5c      	ldr	r2, [pc, #368]	; (8004730 <HAL_DMA_Abort+0x470>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5b      	ldr	r2, [pc, #364]	; (8004734 <HAL_DMA_Abort+0x474>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a59      	ldr	r2, [pc, #356]	; (8004738 <HAL_DMA_Abort+0x478>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a58      	ldr	r2, [pc, #352]	; (800473c <HAL_DMA_Abort+0x47c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_Abort+0x32a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a56      	ldr	r2, [pc, #344]	; (8004740 <HAL_DMA_Abort+0x480>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <HAL_DMA_Abort+0x33c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e007      	b.n	800460c <HAL_DMA_Abort+0x34c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800460c:	e013      	b.n	8004636 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800460e:	f7fd fe75 	bl	80022fc <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b05      	cmp	r3, #5
 800461a:	d90c      	bls.n	8004636 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2203      	movs	r2, #3
 8004626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e12d      	b.n	8004892 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <HAL_DMA_Abort+0x444>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04a      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2d      	ldr	r2, [pc, #180]	; (8004708 <HAL_DMA_Abort+0x448>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d045      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2c      	ldr	r2, [pc, #176]	; (800470c <HAL_DMA_Abort+0x44c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d040      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2a      	ldr	r2, [pc, #168]	; (8004710 <HAL_DMA_Abort+0x450>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03b      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a29      	ldr	r2, [pc, #164]	; (8004714 <HAL_DMA_Abort+0x454>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a27      	ldr	r2, [pc, #156]	; (8004718 <HAL_DMA_Abort+0x458>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a26      	ldr	r2, [pc, #152]	; (800471c <HAL_DMA_Abort+0x45c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a24      	ldr	r2, [pc, #144]	; (8004720 <HAL_DMA_Abort+0x460>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d027      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a23      	ldr	r2, [pc, #140]	; (8004724 <HAL_DMA_Abort+0x464>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a21      	ldr	r2, [pc, #132]	; (8004728 <HAL_DMA_Abort+0x468>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a20      	ldr	r2, [pc, #128]	; (800472c <HAL_DMA_Abort+0x46c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_DMA_Abort+0x470>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_DMA_Abort+0x474>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_DMA_Abort+0x478>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_DMA_Abort+0x47c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_Abort+0x422>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_DMA_Abort+0x480>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Abort+0x426>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_DMA_Abort+0x428>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02b      	beq.n	8004744 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	223f      	movs	r2, #63	; 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	e02a      	b.n	800475a <HAL_DMA_Abort+0x49a>
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a4f      	ldr	r2, [pc, #316]	; (800489c <HAL_DMA_Abort+0x5dc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d072      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a4d      	ldr	r2, [pc, #308]	; (80048a0 <HAL_DMA_Abort+0x5e0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d06d      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a4c      	ldr	r2, [pc, #304]	; (80048a4 <HAL_DMA_Abort+0x5e4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d068      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a4a      	ldr	r2, [pc, #296]	; (80048a8 <HAL_DMA_Abort+0x5e8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d063      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a49      	ldr	r2, [pc, #292]	; (80048ac <HAL_DMA_Abort+0x5ec>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d05e      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a47      	ldr	r2, [pc, #284]	; (80048b0 <HAL_DMA_Abort+0x5f0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d059      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a46      	ldr	r2, [pc, #280]	; (80048b4 <HAL_DMA_Abort+0x5f4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d054      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a44      	ldr	r2, [pc, #272]	; (80048b8 <HAL_DMA_Abort+0x5f8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d04f      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a43      	ldr	r2, [pc, #268]	; (80048bc <HAL_DMA_Abort+0x5fc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a41      	ldr	r2, [pc, #260]	; (80048c0 <HAL_DMA_Abort+0x600>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a40      	ldr	r2, [pc, #256]	; (80048c4 <HAL_DMA_Abort+0x604>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3e      	ldr	r2, [pc, #248]	; (80048c8 <HAL_DMA_Abort+0x608>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <HAL_DMA_Abort+0x60c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <HAL_DMA_Abort+0x610>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_DMA_Abort+0x614>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a38      	ldr	r2, [pc, #224]	; (80048d8 <HAL_DMA_Abort+0x618>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a37      	ldr	r2, [pc, #220]	; (80048dc <HAL_DMA_Abort+0x61c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a35      	ldr	r2, [pc, #212]	; (80048e0 <HAL_DMA_Abort+0x620>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a34      	ldr	r2, [pc, #208]	; (80048e4 <HAL_DMA_Abort+0x624>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_DMA_Abort+0x628>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a31      	ldr	r2, [pc, #196]	; (80048ec <HAL_DMA_Abort+0x62c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <HAL_DMA_Abort+0x630>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2e      	ldr	r2, [pc, #184]	; (80048f4 <HAL_DMA_Abort+0x634>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_Abort+0x58a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_DMA_Abort+0x638>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_DMA_Abort+0x58e>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_DMA_Abort+0x590>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800485c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004874:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800487e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
 80048dc:	58025408 	.word	0x58025408
 80048e0:	5802541c 	.word	0x5802541c
 80048e4:	58025430 	.word	0x58025430
 80048e8:	58025444 	.word	0x58025444
 80048ec:	58025458 	.word	0x58025458
 80048f0:	5802546c 	.word	0x5802546c
 80048f4:	58025480 	.word	0x58025480
 80048f8:	58025494 	.word	0x58025494

080048fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e237      	b.n	8004d7e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d004      	beq.n	8004924 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e22c      	b.n	8004d7e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5c      	ldr	r2, [pc, #368]	; (8004a9c <HAL_DMA_Abort_IT+0x1a0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d04a      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5b      	ldr	r2, [pc, #364]	; (8004aa0 <HAL_DMA_Abort_IT+0x1a4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d045      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a59      	ldr	r2, [pc, #356]	; (8004aa4 <HAL_DMA_Abort_IT+0x1a8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d040      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <HAL_DMA_Abort_IT+0x1ac>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d03b      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a56      	ldr	r2, [pc, #344]	; (8004aac <HAL_DMA_Abort_IT+0x1b0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d036      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a55      	ldr	r2, [pc, #340]	; (8004ab0 <HAL_DMA_Abort_IT+0x1b4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d031      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a53      	ldr	r2, [pc, #332]	; (8004ab4 <HAL_DMA_Abort_IT+0x1b8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02c      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a52      	ldr	r2, [pc, #328]	; (8004ab8 <HAL_DMA_Abort_IT+0x1bc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d027      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a50      	ldr	r2, [pc, #320]	; (8004abc <HAL_DMA_Abort_IT+0x1c0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d022      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4f      	ldr	r2, [pc, #316]	; (8004ac0 <HAL_DMA_Abort_IT+0x1c4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01d      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a4d      	ldr	r2, [pc, #308]	; (8004ac4 <HAL_DMA_Abort_IT+0x1c8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d018      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4c      	ldr	r2, [pc, #304]	; (8004ac8 <HAL_DMA_Abort_IT+0x1cc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4a      	ldr	r2, [pc, #296]	; (8004acc <HAL_DMA_Abort_IT+0x1d0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00e      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a49      	ldr	r2, [pc, #292]	; (8004ad0 <HAL_DMA_Abort_IT+0x1d4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d009      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a47      	ldr	r2, [pc, #284]	; (8004ad4 <HAL_DMA_Abort_IT+0x1d8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xc8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a46      	ldr	r2, [pc, #280]	; (8004ad8 <HAL_DMA_Abort_IT+0x1dc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <HAL_DMA_Abort_IT+0xcc>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_DMA_Abort_IT+0xce>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 8086 	beq.w	8004adc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <HAL_DMA_Abort_IT+0x1a0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d04a      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2e      	ldr	r2, [pc, #184]	; (8004aa0 <HAL_DMA_Abort_IT+0x1a4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d045      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2c      	ldr	r2, [pc, #176]	; (8004aa4 <HAL_DMA_Abort_IT+0x1a8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d040      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_DMA_Abort_IT+0x1ac>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d03b      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <HAL_DMA_Abort_IT+0x1b0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d036      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <HAL_DMA_Abort_IT+0x1b4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d031      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <HAL_DMA_Abort_IT+0x1b8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02c      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <HAL_DMA_Abort_IT+0x1bc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d027      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a23      	ldr	r2, [pc, #140]	; (8004abc <HAL_DMA_Abort_IT+0x1c0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d022      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_DMA_Abort_IT+0x1c4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d01d      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <HAL_DMA_Abort_IT+0x1c8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_DMA_Abort_IT+0x1cc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_DMA_Abort_IT+0x1d0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00e      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_DMA_Abort_IT+0x1d4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_DMA_Abort_IT+0x1d8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x17c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <HAL_DMA_Abort_IT+0x1dc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d108      	bne.n	8004a8a <HAL_DMA_Abort_IT+0x18e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e178      	b.n	8004d7c <HAL_DMA_Abort_IT+0x480>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e16f      	b.n	8004d7c <HAL_DMA_Abort_IT+0x480>
 8004a9c:	40020010 	.word	0x40020010
 8004aa0:	40020028 	.word	0x40020028
 8004aa4:	40020040 	.word	0x40020040
 8004aa8:	40020058 	.word	0x40020058
 8004aac:	40020070 	.word	0x40020070
 8004ab0:	40020088 	.word	0x40020088
 8004ab4:	400200a0 	.word	0x400200a0
 8004ab8:	400200b8 	.word	0x400200b8
 8004abc:	40020410 	.word	0x40020410
 8004ac0:	40020428 	.word	0x40020428
 8004ac4:	40020440 	.word	0x40020440
 8004ac8:	40020458 	.word	0x40020458
 8004acc:	40020470 	.word	0x40020470
 8004ad0:	40020488 	.word	0x40020488
 8004ad4:	400204a0 	.word	0x400204a0
 8004ad8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 020e 	bic.w	r2, r2, #14
 8004aea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6c      	ldr	r2, [pc, #432]	; (8004ca4 <HAL_DMA_Abort_IT+0x3a8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d04a      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6b      	ldr	r2, [pc, #428]	; (8004ca8 <HAL_DMA_Abort_IT+0x3ac>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d045      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a69      	ldr	r2, [pc, #420]	; (8004cac <HAL_DMA_Abort_IT+0x3b0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d040      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a68      	ldr	r2, [pc, #416]	; (8004cb0 <HAL_DMA_Abort_IT+0x3b4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d03b      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a66      	ldr	r2, [pc, #408]	; (8004cb4 <HAL_DMA_Abort_IT+0x3b8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d036      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a65      	ldr	r2, [pc, #404]	; (8004cb8 <HAL_DMA_Abort_IT+0x3bc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d031      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a63      	ldr	r2, [pc, #396]	; (8004cbc <HAL_DMA_Abort_IT+0x3c0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02c      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a62      	ldr	r2, [pc, #392]	; (8004cc0 <HAL_DMA_Abort_IT+0x3c4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d027      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a60      	ldr	r2, [pc, #384]	; (8004cc4 <HAL_DMA_Abort_IT+0x3c8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5f      	ldr	r2, [pc, #380]	; (8004cc8 <HAL_DMA_Abort_IT+0x3cc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d01d      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5d      	ldr	r2, [pc, #372]	; (8004ccc <HAL_DMA_Abort_IT+0x3d0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d018      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5c      	ldr	r2, [pc, #368]	; (8004cd0 <HAL_DMA_Abort_IT+0x3d4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5a      	ldr	r2, [pc, #360]	; (8004cd4 <HAL_DMA_Abort_IT+0x3d8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a59      	ldr	r2, [pc, #356]	; (8004cd8 <HAL_DMA_Abort_IT+0x3dc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a57      	ldr	r2, [pc, #348]	; (8004cdc <HAL_DMA_Abort_IT+0x3e0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x290>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a56      	ldr	r2, [pc, #344]	; (8004ce0 <HAL_DMA_Abort_IT+0x3e4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <HAL_DMA_Abort_IT+0x2a2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e007      	b.n	8004bae <HAL_DMA_Abort_IT+0x2b2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3c      	ldr	r2, [pc, #240]	; (8004ca4 <HAL_DMA_Abort_IT+0x3a8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d072      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a3a      	ldr	r2, [pc, #232]	; (8004ca8 <HAL_DMA_Abort_IT+0x3ac>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d06d      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a39      	ldr	r2, [pc, #228]	; (8004cac <HAL_DMA_Abort_IT+0x3b0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d068      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a37      	ldr	r2, [pc, #220]	; (8004cb0 <HAL_DMA_Abort_IT+0x3b4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d063      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a36      	ldr	r2, [pc, #216]	; (8004cb4 <HAL_DMA_Abort_IT+0x3b8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d05e      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a34      	ldr	r2, [pc, #208]	; (8004cb8 <HAL_DMA_Abort_IT+0x3bc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d059      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a33      	ldr	r2, [pc, #204]	; (8004cbc <HAL_DMA_Abort_IT+0x3c0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d054      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a31      	ldr	r2, [pc, #196]	; (8004cc0 <HAL_DMA_Abort_IT+0x3c4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d04f      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a30      	ldr	r2, [pc, #192]	; (8004cc4 <HAL_DMA_Abort_IT+0x3c8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d04a      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2e      	ldr	r2, [pc, #184]	; (8004cc8 <HAL_DMA_Abort_IT+0x3cc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d045      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <HAL_DMA_Abort_IT+0x3d0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d040      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <HAL_DMA_Abort_IT+0x3d4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d03b      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <HAL_DMA_Abort_IT+0x3d8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d036      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_DMA_Abort_IT+0x3dc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d031      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <HAL_DMA_Abort_IT+0x3e0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d02c      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <HAL_DMA_Abort_IT+0x3e4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d027      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a24      	ldr	r2, [pc, #144]	; (8004ce4 <HAL_DMA_Abort_IT+0x3e8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a22      	ldr	r2, [pc, #136]	; (8004ce8 <HAL_DMA_Abort_IT+0x3ec>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01d      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a21      	ldr	r2, [pc, #132]	; (8004cec <HAL_DMA_Abort_IT+0x3f0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_DMA_Abort_IT+0x3f4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_DMA_Abort_IT+0x3f8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_DMA_Abort_IT+0x3fc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_DMA_Abort_IT+0x400>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x3a2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_DMA_Abort_IT+0x404>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d132      	bne.n	8004d04 <HAL_DMA_Abort_IT+0x408>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e031      	b.n	8004d06 <HAL_DMA_Abort_IT+0x40a>
 8004ca2:	bf00      	nop
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
 8004ce4:	58025408 	.word	0x58025408
 8004ce8:	5802541c 	.word	0x5802541c
 8004cec:	58025430 	.word	0x58025430
 8004cf0:	58025444 	.word	0x58025444
 8004cf4:	58025458 	.word	0x58025458
 8004cf8:	5802546c 	.word	0x5802546c
 8004cfc:	58025480 	.word	0x58025480
 8004d00:	58025494 	.word	0x58025494
 8004d04:	2300      	movs	r3, #0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d028      	beq.n	8004d5c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	2201      	movs	r2, #1
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d38:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d50:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d5a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d94:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <HAL_DMA_IRQHandler+0x1ac>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a67      	ldr	r2, [pc, #412]	; (8004f38 <HAL_DMA_IRQHandler+0x1b0>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5f      	ldr	r2, [pc, #380]	; (8004f3c <HAL_DMA_IRQHandler+0x1b4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d04a      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a5d      	ldr	r2, [pc, #372]	; (8004f40 <HAL_DMA_IRQHandler+0x1b8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d045      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a5c      	ldr	r2, [pc, #368]	; (8004f44 <HAL_DMA_IRQHandler+0x1bc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d040      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_DMA_IRQHandler+0x1c0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d03b      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a59      	ldr	r2, [pc, #356]	; (8004f4c <HAL_DMA_IRQHandler+0x1c4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d036      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_DMA_IRQHandler+0x1c8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d031      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a56      	ldr	r2, [pc, #344]	; (8004f54 <HAL_DMA_IRQHandler+0x1cc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d02c      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_DMA_IRQHandler+0x1d0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d027      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a53      	ldr	r2, [pc, #332]	; (8004f5c <HAL_DMA_IRQHandler+0x1d4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a51      	ldr	r2, [pc, #324]	; (8004f60 <HAL_DMA_IRQHandler+0x1d8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01d      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a50      	ldr	r2, [pc, #320]	; (8004f64 <HAL_DMA_IRQHandler+0x1dc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a4e      	ldr	r2, [pc, #312]	; (8004f68 <HAL_DMA_IRQHandler+0x1e0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a4d      	ldr	r2, [pc, #308]	; (8004f6c <HAL_DMA_IRQHandler+0x1e4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a4b      	ldr	r2, [pc, #300]	; (8004f70 <HAL_DMA_IRQHandler+0x1e8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	; (8004f74 <HAL_DMA_IRQHandler+0x1ec>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xd2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a48      	ldr	r2, [pc, #288]	; (8004f78 <HAL_DMA_IRQHandler+0x1f0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <HAL_DMA_IRQHandler+0xd6>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_DMA_IRQHandler+0xd8>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 842b 	beq.w	80056bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2208      	movs	r2, #8
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80a2 	beq.w	8004fc0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2e      	ldr	r2, [pc, #184]	; (8004f3c <HAL_DMA_IRQHandler+0x1b4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d04a      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_DMA_IRQHandler+0x1b8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d045      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <HAL_DMA_IRQHandler+0x1bc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d040      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <HAL_DMA_IRQHandler+0x1c0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d03b      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <HAL_DMA_IRQHandler+0x1c4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d036      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <HAL_DMA_IRQHandler+0x1c8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d031      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <HAL_DMA_IRQHandler+0x1cc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02c      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <HAL_DMA_IRQHandler+0x1d0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d027      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <HAL_DMA_IRQHandler+0x1d4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d022      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_DMA_IRQHandler+0x1d8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d01d      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <HAL_DMA_IRQHandler+0x1dc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1e      	ldr	r2, [pc, #120]	; (8004f68 <HAL_DMA_IRQHandler+0x1e0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <HAL_DMA_IRQHandler+0x1e4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_DMA_IRQHandler+0x1e8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_DMA_IRQHandler+0x1ec>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x194>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_DMA_IRQHandler+0x1f0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d12f      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x1f4>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	e02e      	b.n	8004f90 <HAL_DMA_IRQHandler+0x208>
 8004f32:	bf00      	nop
 8004f34:	24000000 	.word	0x24000000
 8004f38:	1b4e81b5 	.word	0x1b4e81b5
 8004f3c:	40020010 	.word	0x40020010
 8004f40:	40020028 	.word	0x40020028
 8004f44:	40020040 	.word	0x40020040
 8004f48:	40020058 	.word	0x40020058
 8004f4c:	40020070 	.word	0x40020070
 8004f50:	40020088 	.word	0x40020088
 8004f54:	400200a0 	.word	0x400200a0
 8004f58:	400200b8 	.word	0x400200b8
 8004f5c:	40020410 	.word	0x40020410
 8004f60:	40020428 	.word	0x40020428
 8004f64:	40020440 	.word	0x40020440
 8004f68:	40020458 	.word	0x40020458
 8004f6c:	40020470 	.word	0x40020470
 8004f70:	40020488 	.word	0x40020488
 8004f74:	400204a0 	.word	0x400204a0
 8004f78:	400204b8 	.word	0x400204b8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0204 	bic.w	r2, r2, #4
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2208      	movs	r2, #8
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	f043 0201 	orr.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d06e      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a69      	ldr	r2, [pc, #420]	; (8005180 <HAL_DMA_IRQHandler+0x3f8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d04a      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a67      	ldr	r2, [pc, #412]	; (8005184 <HAL_DMA_IRQHandler+0x3fc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d045      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a66      	ldr	r2, [pc, #408]	; (8005188 <HAL_DMA_IRQHandler+0x400>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d040      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a64      	ldr	r2, [pc, #400]	; (800518c <HAL_DMA_IRQHandler+0x404>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d03b      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a63      	ldr	r2, [pc, #396]	; (8005190 <HAL_DMA_IRQHandler+0x408>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d036      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a61      	ldr	r2, [pc, #388]	; (8005194 <HAL_DMA_IRQHandler+0x40c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d031      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a60      	ldr	r2, [pc, #384]	; (8005198 <HAL_DMA_IRQHandler+0x410>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d02c      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a5e      	ldr	r2, [pc, #376]	; (800519c <HAL_DMA_IRQHandler+0x414>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d027      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a5d      	ldr	r2, [pc, #372]	; (80051a0 <HAL_DMA_IRQHandler+0x418>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d022      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a5b      	ldr	r2, [pc, #364]	; (80051a4 <HAL_DMA_IRQHandler+0x41c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01d      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a5a      	ldr	r2, [pc, #360]	; (80051a8 <HAL_DMA_IRQHandler+0x420>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a58      	ldr	r2, [pc, #352]	; (80051ac <HAL_DMA_IRQHandler+0x424>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a57      	ldr	r2, [pc, #348]	; (80051b0 <HAL_DMA_IRQHandler+0x428>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a55      	ldr	r2, [pc, #340]	; (80051b4 <HAL_DMA_IRQHandler+0x42c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a54      	ldr	r2, [pc, #336]	; (80051b8 <HAL_DMA_IRQHandler+0x430>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2ee>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a52      	ldr	r2, [pc, #328]	; (80051bc <HAL_DMA_IRQHandler+0x434>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10a      	bne.n	800508c <HAL_DMA_IRQHandler+0x304>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e003      	b.n	8005094 <HAL_DMA_IRQHandler+0x30c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2201      	movs	r2, #1
 80050a2:	409a      	lsls	r2, r3
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	f043 0202 	orr.w	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2204      	movs	r2, #4
 80050be:	409a      	lsls	r2, r3
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 808f 	beq.w	80051e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <HAL_DMA_IRQHandler+0x3f8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d04a      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <HAL_DMA_IRQHandler+0x3fc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d045      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a29      	ldr	r2, [pc, #164]	; (8005188 <HAL_DMA_IRQHandler+0x400>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d040      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a27      	ldr	r2, [pc, #156]	; (800518c <HAL_DMA_IRQHandler+0x404>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d03b      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <HAL_DMA_IRQHandler+0x408>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d036      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a24      	ldr	r2, [pc, #144]	; (8005194 <HAL_DMA_IRQHandler+0x40c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d031      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a23      	ldr	r2, [pc, #140]	; (8005198 <HAL_DMA_IRQHandler+0x410>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d02c      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a21      	ldr	r2, [pc, #132]	; (800519c <HAL_DMA_IRQHandler+0x414>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d027      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <HAL_DMA_IRQHandler+0x418>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d022      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_DMA_IRQHandler+0x41c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01d      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_DMA_IRQHandler+0x420>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d018      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_DMA_IRQHandler+0x424>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_DMA_IRQHandler+0x428>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <HAL_DMA_IRQHandler+0x42c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <HAL_DMA_IRQHandler+0x430>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_DMA_IRQHandler+0x3e2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <HAL_DMA_IRQHandler+0x434>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d12a      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x438>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e023      	b.n	80051c8 <HAL_DMA_IRQHandler+0x440>
 8005180:	40020010 	.word	0x40020010
 8005184:	40020028 	.word	0x40020028
 8005188:	40020040 	.word	0x40020040
 800518c:	40020058 	.word	0x40020058
 8005190:	40020070 	.word	0x40020070
 8005194:	40020088 	.word	0x40020088
 8005198:	400200a0 	.word	0x400200a0
 800519c:	400200b8 	.word	0x400200b8
 80051a0:	40020410 	.word	0x40020410
 80051a4:	40020428 	.word	0x40020428
 80051a8:	40020440 	.word	0x40020440
 80051ac:	40020458 	.word	0x40020458
 80051b0:	40020470 	.word	0x40020470
 80051b4:	40020488 	.word	0x40020488
 80051b8:	400204a0 	.word	0x400204a0
 80051bc:	400204b8 	.word	0x400204b8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2204      	movs	r2, #4
 80051d6:	409a      	lsls	r2, r3
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	f043 0204 	orr.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2210      	movs	r2, #16
 80051f2:	409a      	lsls	r2, r3
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a6 	beq.w	800534a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a85      	ldr	r2, [pc, #532]	; (8005418 <HAL_DMA_IRQHandler+0x690>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d04a      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a83      	ldr	r2, [pc, #524]	; (800541c <HAL_DMA_IRQHandler+0x694>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d045      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a82      	ldr	r2, [pc, #520]	; (8005420 <HAL_DMA_IRQHandler+0x698>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d040      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a80      	ldr	r2, [pc, #512]	; (8005424 <HAL_DMA_IRQHandler+0x69c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d03b      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7f      	ldr	r2, [pc, #508]	; (8005428 <HAL_DMA_IRQHandler+0x6a0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d036      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7d      	ldr	r2, [pc, #500]	; (800542c <HAL_DMA_IRQHandler+0x6a4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d031      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <HAL_DMA_IRQHandler+0x6a8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d02c      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a7a      	ldr	r2, [pc, #488]	; (8005434 <HAL_DMA_IRQHandler+0x6ac>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d027      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a79      	ldr	r2, [pc, #484]	; (8005438 <HAL_DMA_IRQHandler+0x6b0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a77      	ldr	r2, [pc, #476]	; (800543c <HAL_DMA_IRQHandler+0x6b4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01d      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a76      	ldr	r2, [pc, #472]	; (8005440 <HAL_DMA_IRQHandler+0x6b8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a74      	ldr	r2, [pc, #464]	; (8005444 <HAL_DMA_IRQHandler+0x6bc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a73      	ldr	r2, [pc, #460]	; (8005448 <HAL_DMA_IRQHandler+0x6c0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a71      	ldr	r2, [pc, #452]	; (800544c <HAL_DMA_IRQHandler+0x6c4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a70      	ldr	r2, [pc, #448]	; (8005450 <HAL_DMA_IRQHandler+0x6c8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_DMA_IRQHandler+0x516>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6e      	ldr	r2, [pc, #440]	; (8005454 <HAL_DMA_IRQHandler+0x6cc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10a      	bne.n	80052b4 <HAL_DMA_IRQHandler+0x52c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e009      	b.n	80052c8 <HAL_DMA_IRQHandler+0x540>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d03e      	beq.n	800534a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	2210      	movs	r2, #16
 80052d6:	409a      	lsls	r2, r3
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d018      	beq.n	800531c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d024      	beq.n	800534a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
 8005308:	e01f      	b.n	800534a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01b      	beq.n	800534a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
 800531a:	e016      	b.n	800534a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0208 	bic.w	r2, r2, #8
 8005338:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2220      	movs	r2, #32
 8005354:	409a      	lsls	r2, r3
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8110 	beq.w	8005580 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <HAL_DMA_IRQHandler+0x690>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04a      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2b      	ldr	r2, [pc, #172]	; (800541c <HAL_DMA_IRQHandler+0x694>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d045      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a29      	ldr	r2, [pc, #164]	; (8005420 <HAL_DMA_IRQHandler+0x698>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d040      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a28      	ldr	r2, [pc, #160]	; (8005424 <HAL_DMA_IRQHandler+0x69c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d03b      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <HAL_DMA_IRQHandler+0x6a0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d036      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a25      	ldr	r2, [pc, #148]	; (800542c <HAL_DMA_IRQHandler+0x6a4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d031      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a23      	ldr	r2, [pc, #140]	; (8005430 <HAL_DMA_IRQHandler+0x6a8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02c      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_DMA_IRQHandler+0x6ac>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d027      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a20      	ldr	r2, [pc, #128]	; (8005438 <HAL_DMA_IRQHandler+0x6b0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_DMA_IRQHandler+0x6b4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01d      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <HAL_DMA_IRQHandler+0x6b8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_DMA_IRQHandler+0x6bc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_DMA_IRQHandler+0x6c0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a19      	ldr	r2, [pc, #100]	; (800544c <HAL_DMA_IRQHandler+0x6c4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <HAL_DMA_IRQHandler+0x6c8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_DMA_IRQHandler+0x678>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_DMA_IRQHandler+0x6cc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d12b      	bne.n	8005458 <HAL_DMA_IRQHandler+0x6d0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e02a      	b.n	800546c <HAL_DMA_IRQHandler+0x6e4>
 8005416:	bf00      	nop
 8005418:	40020010 	.word	0x40020010
 800541c:	40020028 	.word	0x40020028
 8005420:	40020040 	.word	0x40020040
 8005424:	40020058 	.word	0x40020058
 8005428:	40020070 	.word	0x40020070
 800542c:	40020088 	.word	0x40020088
 8005430:	400200a0 	.word	0x400200a0
 8005434:	400200b8 	.word	0x400200b8
 8005438:	40020410 	.word	0x40020410
 800543c:	40020428 	.word	0x40020428
 8005440:	40020440 	.word	0x40020440
 8005444:	40020458 	.word	0x40020458
 8005448:	40020470 	.word	0x40020470
 800544c:	40020488 	.word	0x40020488
 8005450:	400204a0 	.word	0x400204a0
 8005454:	400204b8 	.word	0x400204b8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8087 	beq.w	8005580 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2220      	movs	r2, #32
 800547c:	409a      	lsls	r2, r3
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b04      	cmp	r3, #4
 800548c:	d139      	bne.n	8005502 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0216 	bic.w	r2, r2, #22
 800549c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <HAL_DMA_IRQHandler+0x736>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0208 	bic.w	r2, r2, #8
 80054cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	223f      	movs	r2, #63	; 0x3f
 80054d8:	409a      	lsls	r2, r3
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 834a 	beq.w	8005b8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
          }
          return;
 8005500:	e344      	b.n	8005b8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d018      	beq.n	8005542 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	2b00      	cmp	r3, #0
 8005524:	d02c      	beq.n	8005580 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
 800552e:	e027      	b.n	8005580 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d023      	beq.n	8005580 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
 8005540:	e01e      	b.n	8005580 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0210 	bic.w	r2, r2, #16
 800555e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8306 	beq.w	8005b96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8088 	beq.w	80056a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a7a      	ldr	r2, [pc, #488]	; (8005790 <HAL_DMA_IRQHandler+0xa08>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04a      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a79      	ldr	r2, [pc, #484]	; (8005794 <HAL_DMA_IRQHandler+0xa0c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d045      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a77      	ldr	r2, [pc, #476]	; (8005798 <HAL_DMA_IRQHandler+0xa10>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d040      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a76      	ldr	r2, [pc, #472]	; (800579c <HAL_DMA_IRQHandler+0xa14>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03b      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a74      	ldr	r2, [pc, #464]	; (80057a0 <HAL_DMA_IRQHandler+0xa18>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <HAL_DMA_IRQHandler+0xa1c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d031      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <HAL_DMA_IRQHandler+0xa20>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02c      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a70      	ldr	r2, [pc, #448]	; (80057ac <HAL_DMA_IRQHandler+0xa24>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d027      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6e      	ldr	r2, [pc, #440]	; (80057b0 <HAL_DMA_IRQHandler+0xa28>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a6d      	ldr	r2, [pc, #436]	; (80057b4 <HAL_DMA_IRQHandler+0xa2c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6b      	ldr	r2, [pc, #428]	; (80057b8 <HAL_DMA_IRQHandler+0xa30>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6a      	ldr	r2, [pc, #424]	; (80057bc <HAL_DMA_IRQHandler+0xa34>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_DMA_IRQHandler+0xa38>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a67      	ldr	r2, [pc, #412]	; (80057c4 <HAL_DMA_IRQHandler+0xa3c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a65      	ldr	r2, [pc, #404]	; (80057c8 <HAL_DMA_IRQHandler+0xa40>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_IRQHandler+0x8b8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a64      	ldr	r2, [pc, #400]	; (80057cc <HAL_DMA_IRQHandler+0xa44>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <HAL_DMA_IRQHandler+0x8ca>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e007      	b.n	8005662 <HAL_DMA_IRQHandler+0x8da>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566a:	429a      	cmp	r2, r3
 800566c:	d307      	bcc.n	800567e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f2      	bne.n	8005662 <HAL_DMA_IRQHandler+0x8da>
 800567c:	e000      	b.n	8005680 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800567e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2203      	movs	r2, #3
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005696:	e003      	b.n	80056a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8272 	beq.w	8005b96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
 80056ba:	e26c      	b.n	8005b96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a43      	ldr	r2, [pc, #268]	; (80057d0 <HAL_DMA_IRQHandler+0xa48>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d022      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a42      	ldr	r2, [pc, #264]	; (80057d4 <HAL_DMA_IRQHandler+0xa4c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d01d      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a40      	ldr	r2, [pc, #256]	; (80057d8 <HAL_DMA_IRQHandler+0xa50>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a3f      	ldr	r2, [pc, #252]	; (80057dc <HAL_DMA_IRQHandler+0xa54>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3d      	ldr	r2, [pc, #244]	; (80057e0 <HAL_DMA_IRQHandler+0xa58>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a3c      	ldr	r2, [pc, #240]	; (80057e4 <HAL_DMA_IRQHandler+0xa5c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a3a      	ldr	r2, [pc, #232]	; (80057e8 <HAL_DMA_IRQHandler+0xa60>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_DMA_IRQHandler+0x984>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a39      	ldr	r2, [pc, #228]	; (80057ec <HAL_DMA_IRQHandler+0xa64>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <HAL_DMA_IRQHandler+0x988>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_DMA_IRQHandler+0x98a>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 823f 	beq.w	8005b96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2204      	movs	r2, #4
 800572a:	409a      	lsls	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80cd 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xb48>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80c7 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2204      	movs	r2, #4
 800574c:	409a      	lsls	r2, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d049      	beq.n	80057f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8210 	beq.w	8005b90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005778:	e20a      	b.n	8005b90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8206 	beq.w	8005b90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800578c:	e200      	b.n	8005b90 <HAL_DMA_IRQHandler+0xe08>
 800578e:	bf00      	nop
 8005790:	40020010 	.word	0x40020010
 8005794:	40020028 	.word	0x40020028
 8005798:	40020040 	.word	0x40020040
 800579c:	40020058 	.word	0x40020058
 80057a0:	40020070 	.word	0x40020070
 80057a4:	40020088 	.word	0x40020088
 80057a8:	400200a0 	.word	0x400200a0
 80057ac:	400200b8 	.word	0x400200b8
 80057b0:	40020410 	.word	0x40020410
 80057b4:	40020428 	.word	0x40020428
 80057b8:	40020440 	.word	0x40020440
 80057bc:	40020458 	.word	0x40020458
 80057c0:	40020470 	.word	0x40020470
 80057c4:	40020488 	.word	0x40020488
 80057c8:	400204a0 	.word	0x400204a0
 80057cc:	400204b8 	.word	0x400204b8
 80057d0:	58025408 	.word	0x58025408
 80057d4:	5802541c 	.word	0x5802541c
 80057d8:	58025430 	.word	0x58025430
 80057dc:	58025444 	.word	0x58025444
 80057e0:	58025458 	.word	0x58025458
 80057e4:	5802546c 	.word	0x5802546c
 80057e8:	58025480 	.word	0x58025480
 80057ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d160      	bne.n	80058bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a7f      	ldr	r2, [pc, #508]	; (80059fc <HAL_DMA_IRQHandler+0xc74>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d04a      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a7d      	ldr	r2, [pc, #500]	; (8005a00 <HAL_DMA_IRQHandler+0xc78>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d045      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a7c      	ldr	r2, [pc, #496]	; (8005a04 <HAL_DMA_IRQHandler+0xc7c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d040      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a7a      	ldr	r2, [pc, #488]	; (8005a08 <HAL_DMA_IRQHandler+0xc80>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d03b      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a79      	ldr	r2, [pc, #484]	; (8005a0c <HAL_DMA_IRQHandler+0xc84>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d036      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a77      	ldr	r2, [pc, #476]	; (8005a10 <HAL_DMA_IRQHandler+0xc88>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d031      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a76      	ldr	r2, [pc, #472]	; (8005a14 <HAL_DMA_IRQHandler+0xc8c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d02c      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a74      	ldr	r2, [pc, #464]	; (8005a18 <HAL_DMA_IRQHandler+0xc90>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d027      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a73      	ldr	r2, [pc, #460]	; (8005a1c <HAL_DMA_IRQHandler+0xc94>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a71      	ldr	r2, [pc, #452]	; (8005a20 <HAL_DMA_IRQHandler+0xc98>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01d      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a70      	ldr	r2, [pc, #448]	; (8005a24 <HAL_DMA_IRQHandler+0xc9c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a6e      	ldr	r2, [pc, #440]	; (8005a28 <HAL_DMA_IRQHandler+0xca0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6d      	ldr	r2, [pc, #436]	; (8005a2c <HAL_DMA_IRQHandler+0xca4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a6b      	ldr	r2, [pc, #428]	; (8005a30 <HAL_DMA_IRQHandler+0xca8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6a      	ldr	r2, [pc, #424]	; (8005a34 <HAL_DMA_IRQHandler+0xcac>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_DMA_IRQHandler+0xb12>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a68      	ldr	r2, [pc, #416]	; (8005a38 <HAL_DMA_IRQHandler+0xcb0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d108      	bne.n	80058ac <HAL_DMA_IRQHandler+0xb24>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0208 	bic.w	r2, r2, #8
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e007      	b.n	80058bc <HAL_DMA_IRQHandler+0xb34>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0204 	bic.w	r2, r2, #4
 80058ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8165 	beq.w	8005b90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ce:	e15f      	b.n	8005b90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	2202      	movs	r2, #2
 80058da:	409a      	lsls	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80c5 	beq.w	8005a70 <HAL_DMA_IRQHandler+0xce8>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80bf 	beq.w	8005a70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2202      	movs	r2, #2
 80058fc:	409a      	lsls	r2, r3
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d018      	beq.n	800593e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 813a 	beq.w	8005b94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005928:	e134      	b.n	8005b94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8130 	beq.w	8005b94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593c:	e12a      	b.n	8005b94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	f040 8089 	bne.w	8005a5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <HAL_DMA_IRQHandler+0xc74>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d04a      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <HAL_DMA_IRQHandler+0xc78>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d045      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <HAL_DMA_IRQHandler+0xc7c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d040      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <HAL_DMA_IRQHandler+0xc80>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d03b      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <HAL_DMA_IRQHandler+0xc84>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d036      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <HAL_DMA_IRQHandler+0xc88>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d031      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <HAL_DMA_IRQHandler+0xc8c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d02c      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <HAL_DMA_IRQHandler+0xc90>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d027      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <HAL_DMA_IRQHandler+0xc94>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <HAL_DMA_IRQHandler+0xc98>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <HAL_DMA_IRQHandler+0xc9c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1a      	ldr	r2, [pc, #104]	; (8005a28 <HAL_DMA_IRQHandler+0xca0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <HAL_DMA_IRQHandler+0xca4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <HAL_DMA_IRQHandler+0xca8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <HAL_DMA_IRQHandler+0xcac>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_IRQHandler+0xc62>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <HAL_DMA_IRQHandler+0xcb0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d128      	bne.n	8005a3c <HAL_DMA_IRQHandler+0xcb4>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0214 	bic.w	r2, r2, #20
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e027      	b.n	8005a4c <HAL_DMA_IRQHandler+0xcc4>
 80059fc:	40020010 	.word	0x40020010
 8005a00:	40020028 	.word	0x40020028
 8005a04:	40020040 	.word	0x40020040
 8005a08:	40020058 	.word	0x40020058
 8005a0c:	40020070 	.word	0x40020070
 8005a10:	40020088 	.word	0x40020088
 8005a14:	400200a0 	.word	0x400200a0
 8005a18:	400200b8 	.word	0x400200b8
 8005a1c:	40020410 	.word	0x40020410
 8005a20:	40020428 	.word	0x40020428
 8005a24:	40020440 	.word	0x40020440
 8005a28:	40020458 	.word	0x40020458
 8005a2c:	40020470 	.word	0x40020470
 8005a30:	40020488 	.word	0x40020488
 8005a34:	400204a0 	.word	0x400204a0
 8005a38:	400204b8 	.word	0x400204b8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 020a 	bic.w	r2, r2, #10
 8005a4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8097 	beq.w	8005b94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a6e:	e091      	b.n	8005b94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2208      	movs	r2, #8
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8088 	beq.w	8005b96 <HAL_DMA_IRQHandler+0xe0e>
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8082 	beq.w	8005b96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a41      	ldr	r2, [pc, #260]	; (8005b9c <HAL_DMA_IRQHandler+0xe14>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d04a      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a3f      	ldr	r2, [pc, #252]	; (8005ba0 <HAL_DMA_IRQHandler+0xe18>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d045      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3e      	ldr	r2, [pc, #248]	; (8005ba4 <HAL_DMA_IRQHandler+0xe1c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d040      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <HAL_DMA_IRQHandler+0xe20>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d03b      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3b      	ldr	r2, [pc, #236]	; (8005bac <HAL_DMA_IRQHandler+0xe24>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d036      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a39      	ldr	r2, [pc, #228]	; (8005bb0 <HAL_DMA_IRQHandler+0xe28>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d031      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a38      	ldr	r2, [pc, #224]	; (8005bb4 <HAL_DMA_IRQHandler+0xe2c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d02c      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a36      	ldr	r2, [pc, #216]	; (8005bb8 <HAL_DMA_IRQHandler+0xe30>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d027      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a35      	ldr	r2, [pc, #212]	; (8005bbc <HAL_DMA_IRQHandler+0xe34>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d022      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <HAL_DMA_IRQHandler+0xe38>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01d      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <HAL_DMA_IRQHandler+0xe3c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d018      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a30      	ldr	r2, [pc, #192]	; (8005bc8 <HAL_DMA_IRQHandler+0xe40>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <HAL_DMA_IRQHandler+0xe44>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <HAL_DMA_IRQHandler+0xe48>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <HAL_DMA_IRQHandler+0xe4c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xdaa>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <HAL_DMA_IRQHandler+0xe50>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <HAL_DMA_IRQHandler+0xdbc>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 021c 	bic.w	r2, r2, #28
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e007      	b.n	8005b54 <HAL_DMA_IRQHandler+0xdcc>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 020e 	bic.w	r2, r2, #14
 8005b52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
 8005b8a:	e004      	b.n	8005b96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005b8c:	bf00      	nop
 8005b8e:	e002      	b.n	8005b96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b96:	3728      	adds	r7, #40	; 0x28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40020010 	.word	0x40020010
 8005ba0:	40020028 	.word	0x40020028
 8005ba4:	40020040 	.word	0x40020040
 8005ba8:	40020058 	.word	0x40020058
 8005bac:	40020070 	.word	0x40020070
 8005bb0:	40020088 	.word	0x40020088
 8005bb4:	400200a0 	.word	0x400200a0
 8005bb8:	400200b8 	.word	0x400200b8
 8005bbc:	40020410 	.word	0x40020410
 8005bc0:	40020428 	.word	0x40020428
 8005bc4:	40020440 	.word	0x40020440
 8005bc8:	40020458 	.word	0x40020458
 8005bcc:	40020470 	.word	0x40020470
 8005bd0:	40020488 	.word	0x40020488
 8005bd4:	400204a0 	.word	0x400204a0
 8005bd8:	400204b8 	.word	0x400204b8

08005bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a42      	ldr	r2, [pc, #264]	; (8005cf4 <DMA_CalcBaseAndBitshift+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d04a      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a41      	ldr	r2, [pc, #260]	; (8005cf8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d045      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <DMA_CalcBaseAndBitshift+0x120>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d040      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a3e      	ldr	r2, [pc, #248]	; (8005d00 <DMA_CalcBaseAndBitshift+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d03b      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <DMA_CalcBaseAndBitshift+0x128>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d036      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d031      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <DMA_CalcBaseAndBitshift+0x130>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02c      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a38      	ldr	r2, [pc, #224]	; (8005d10 <DMA_CalcBaseAndBitshift+0x134>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d027      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <DMA_CalcBaseAndBitshift+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d022      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d01d      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <DMA_CalcBaseAndBitshift+0x140>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a32      	ldr	r2, [pc, #200]	; (8005d20 <DMA_CalcBaseAndBitshift+0x144>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <DMA_CalcBaseAndBitshift+0x148>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <DMA_CalcBaseAndBitshift+0x150>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <DMA_CalcBaseAndBitshift+0x154>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <DMA_CalcBaseAndBitshift+0xac>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <DMA_CalcBaseAndBitshift+0xae>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d024      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	3b10      	subs	r3, #16
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <DMA_CalcBaseAndBitshift+0x158>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d908      	bls.n	8005cc8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <DMA_CalcBaseAndBitshift+0x160>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8005cc6:	e00d      	b.n	8005ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <DMA_CalcBaseAndBitshift+0x160>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd6:	e005      	b.n	8005ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40020010 	.word	0x40020010
 8005cf8:	40020028 	.word	0x40020028
 8005cfc:	40020040 	.word	0x40020040
 8005d00:	40020058 	.word	0x40020058
 8005d04:	40020070 	.word	0x40020070
 8005d08:	40020088 	.word	0x40020088
 8005d0c:	400200a0 	.word	0x400200a0
 8005d10:	400200b8 	.word	0x400200b8
 8005d14:	40020410 	.word	0x40020410
 8005d18:	40020428 	.word	0x40020428
 8005d1c:	40020440 	.word	0x40020440
 8005d20:	40020458 	.word	0x40020458
 8005d24:	40020470 	.word	0x40020470
 8005d28:	40020488 	.word	0x40020488
 8005d2c:	400204a0 	.word	0x400204a0
 8005d30:	400204b8 	.word	0x400204b8
 8005d34:	aaaaaaab 	.word	0xaaaaaaab
 8005d38:	08011bd4 	.word	0x08011bd4
 8005d3c:	fffffc00 	.word	0xfffffc00

08005d40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d120      	bne.n	8005d96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d858      	bhi.n	8005e0e <DMA_CheckFifoParam+0xce>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <DMA_CheckFifoParam+0x24>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d75 	.word	0x08005d75
 8005d68:	08005d87 	.word	0x08005d87
 8005d6c:	08005d75 	.word	0x08005d75
 8005d70:	08005e0f 	.word	0x08005e0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d048      	beq.n	8005e12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d84:	e045      	b.n	8005e12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d8e:	d142      	bne.n	8005e16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d94:	e03f      	b.n	8005e16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9e:	d123      	bne.n	8005de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d838      	bhi.n	8005e1a <DMA_CheckFifoParam+0xda>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <DMA_CheckFifoParam+0x70>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dc7 	.word	0x08005dc7
 8005db8:	08005dc1 	.word	0x08005dc1
 8005dbc:	08005dd9 	.word	0x08005dd9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
        break;
 8005dc4:	e030      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d025      	beq.n	8005e1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dd6:	e022      	b.n	8005e1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005de0:	d11f      	bne.n	8005e22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005de6:	e01c      	b.n	8005e22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d902      	bls.n	8005df6 <DMA_CheckFifoParam+0xb6>
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d003      	beq.n	8005dfc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005df4:	e018      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
        break;
 8005dfa:	e015      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e0c:	e00b      	b.n	8005e26 <DMA_CheckFifoParam+0xe6>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e00a      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e12:	bf00      	nop
 8005e14:	e008      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e16:	bf00      	nop
 8005e18:	e006      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e004      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
    break;
 8005e26:	bf00      	nop
    }
  }

  return status;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop

08005e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a36      	ldr	r2, [pc, #216]	; (8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3b08      	subs	r3, #8
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ec4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2201      	movs	r2, #1
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ed4:	e024      	b.n	8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	3b10      	subs	r3, #16
 8005ede:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d806      	bhi.n	8005efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d902      	bls.n	8005efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3308      	adds	r3, #8
 8005efc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	58025408 	.word	0x58025408
 8005f30:	5802541c 	.word	0x5802541c
 8005f34:	58025430 	.word	0x58025430
 8005f38:	58025444 	.word	0x58025444
 8005f3c:	58025458 	.word	0x58025458
 8005f40:	5802546c 	.word	0x5802546c
 8005f44:	58025480 	.word	0x58025480
 8005f48:	58025494 	.word	0x58025494
 8005f4c:	cccccccd 	.word	0xcccccccd
 8005f50:	16009600 	.word	0x16009600
 8005f54:	58025880 	.word	0x58025880
 8005f58:	aaaaaaab 	.word	0xaaaaaaab
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	4002040f 	.word	0x4002040f
 8005f64:	10008200 	.word	0x10008200
 8005f68:	40020880 	.word	0x40020880

08005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d04a      	beq.n	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d847      	bhi.n	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	; (8006024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d022      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a24      	ldr	r2, [pc, #144]	; (8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d01d      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a22      	ldr	r2, [pc, #136]	; (800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d018      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d009      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d101      	bne.n	8005fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4b17      	ldr	r3, [pc, #92]	; (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ff4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ff6:	e009      	b.n	800600c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	461a      	mov	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a11      	ldr	r2, [pc, #68]	; (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800600a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	2201      	movs	r2, #1
 8006012:	409a      	lsls	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	58025408 	.word	0x58025408
 8006028:	5802541c 	.word	0x5802541c
 800602c:	58025430 	.word	0x58025430
 8006030:	58025444 	.word	0x58025444
 8006034:	58025458 	.word	0x58025458
 8006038:	5802546c 	.word	0x5802546c
 800603c:	58025480 	.word	0x58025480
 8006040:	58025494 	.word	0x58025494
 8006044:	1600963f 	.word	0x1600963f
 8006048:	58025940 	.word	0x58025940
 800604c:	1000823f 	.word	0x1000823f
 8006050:	40020940 	.word	0x40020940

08006054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006054:	b480      	push	{r7}
 8006056:	b089      	sub	sp, #36	; 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006062:	4b89      	ldr	r3, [pc, #548]	; (8006288 <HAL_GPIO_Init+0x234>)
 8006064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006066:	e194      	b.n	8006392 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8186 	beq.w	800638c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d005      	beq.n	8006098 <HAL_GPIO_Init+0x44>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d130      	bne.n	80060fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	2203      	movs	r2, #3
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ce:	2201      	movs	r2, #1
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	f003 0201 	and.w	r2, r3, #1
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b03      	cmp	r3, #3
 8006104:	d017      	beq.n	8006136 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	2203      	movs	r2, #3
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4313      	orrs	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d123      	bne.n	800618a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	08da      	lsrs	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3208      	adds	r2, #8
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	220f      	movs	r2, #15
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4013      	ands	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	08da      	lsrs	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3208      	adds	r2, #8
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4013      	ands	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0203 	and.w	r2, r3, #3
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80e0 	beq.w	800638c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061cc:	4b2f      	ldr	r3, [pc, #188]	; (800628c <HAL_GPIO_Init+0x238>)
 80061ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061d2:	4a2e      	ldr	r2, [pc, #184]	; (800628c <HAL_GPIO_Init+0x238>)
 80061d4:	f043 0302 	orr.w	r3, r3, #2
 80061d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_GPIO_Init+0x238>)
 80061de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ea:	4a29      	ldr	r2, [pc, #164]	; (8006290 <HAL_GPIO_Init+0x23c>)
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	3302      	adds	r3, #2
 80061f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	220f      	movs	r2, #15
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	4013      	ands	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a20      	ldr	r2, [pc, #128]	; (8006294 <HAL_GPIO_Init+0x240>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d052      	beq.n	80062bc <HAL_GPIO_Init+0x268>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <HAL_GPIO_Init+0x244>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d031      	beq.n	8006282 <HAL_GPIO_Init+0x22e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <HAL_GPIO_Init+0x248>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d02b      	beq.n	800627e <HAL_GPIO_Init+0x22a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_GPIO_Init+0x24c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d025      	beq.n	800627a <HAL_GPIO_Init+0x226>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_GPIO_Init+0x250>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d01f      	beq.n	8006276 <HAL_GPIO_Init+0x222>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_GPIO_Init+0x254>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d019      	beq.n	8006272 <HAL_GPIO_Init+0x21e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <HAL_GPIO_Init+0x258>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_GPIO_Init+0x21a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_GPIO_Init+0x25c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00d      	beq.n	800626a <HAL_GPIO_Init+0x216>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <HAL_GPIO_Init+0x260>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <HAL_GPIO_Init+0x212>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <HAL_GPIO_Init+0x264>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <HAL_GPIO_Init+0x20e>
 800625e:	2309      	movs	r3, #9
 8006260:	e02d      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006262:	230a      	movs	r3, #10
 8006264:	e02b      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006266:	2308      	movs	r3, #8
 8006268:	e029      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800626a:	2307      	movs	r3, #7
 800626c:	e027      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800626e:	2306      	movs	r3, #6
 8006270:	e025      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006272:	2305      	movs	r3, #5
 8006274:	e023      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006276:	2304      	movs	r3, #4
 8006278:	e021      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800627a:	2303      	movs	r3, #3
 800627c:	e01f      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800627e:	2302      	movs	r3, #2
 8006280:	e01d      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006282:	2301      	movs	r3, #1
 8006284:	e01b      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006286:	bf00      	nop
 8006288:	58000080 	.word	0x58000080
 800628c:	58024400 	.word	0x58024400
 8006290:	58000400 	.word	0x58000400
 8006294:	58020000 	.word	0x58020000
 8006298:	58020400 	.word	0x58020400
 800629c:	58020800 	.word	0x58020800
 80062a0:	58020c00 	.word	0x58020c00
 80062a4:	58021000 	.word	0x58021000
 80062a8:	58021400 	.word	0x58021400
 80062ac:	58021800 	.word	0x58021800
 80062b0:	58021c00 	.word	0x58021c00
 80062b4:	58022000 	.word	0x58022000
 80062b8:	58022400 	.word	0x58022400
 80062bc:	2300      	movs	r3, #0
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f002 0203 	and.w	r2, r2, #3
 80062c4:	0092      	lsls	r2, r2, #2
 80062c6:	4093      	lsls	r3, r2
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062ce:	4938      	ldr	r1, [pc, #224]	; (80063b0 <HAL_GPIO_Init+0x35c>)
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	089b      	lsrs	r3, r3, #2
 80062d4:	3302      	adds	r3, #2
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	43db      	mvns	r3, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4013      	ands	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	43db      	mvns	r3, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4013      	ands	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f ae63 	bne.w	8006068 <HAL_GPIO_Init+0x14>
  }
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	58000400 	.word	0x58000400

080063b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
 80063c0:	4613      	mov	r3, r2
 80063c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063c4:	787b      	ldrb	r3, [r7, #1]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ca:	887a      	ldrh	r2, [r7, #2]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063d0:	e003      	b.n	80063da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	041a      	lsls	r2, r3, #16
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	619a      	str	r2, [r3, #24]
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80063f0:	4a08      	ldr	r2, [pc, #32]	; (8006414 <HAL_HSEM_FastTake+0x2c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3320      	adds	r3, #32
 80063f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fa:	4a07      	ldr	r2, [pc, #28]	; (8006418 <HAL_HSEM_FastTake+0x30>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d101      	bne.n	8006404 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e000      	b.n	8006406 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	58026400 	.word	0x58026400
 8006418:	80000300 	.word	0x80000300

0800641c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006426:	4906      	ldr	r1, [pc, #24]	; (8006440 <HAL_HSEM_Release+0x24>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	58026400 	.word	0x58026400

08006444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	b08f      	sub	sp, #60	; 0x3c
 8006448:	af0a      	add	r7, sp, #40	; 0x28
 800644a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e116      	b.n	8006684 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fb fcef 	bl	8001e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2203      	movs	r2, #3
 800647a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f006 fdeb 	bl	800d070 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	687e      	ldr	r6, [r7, #4]
 80064a2:	466d      	mov	r5, sp
 80064a4:	f106 0410 	add.w	r4, r6, #16
 80064a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80064b8:	1d33      	adds	r3, r6, #4
 80064ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064bc:	6838      	ldr	r0, [r7, #0]
 80064be:	f006 fd69 	bl	800cf94 <USB_CoreInit>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0d7      	b.n	8006684 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f006 fdd9 	bl	800d092 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e04a      	b.n	800657c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064e6:	7bfa      	ldrb	r2, [r7, #15]
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	333d      	adds	r3, #61	; 0x3d
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064fa:	7bfa      	ldrb	r2, [r7, #15]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	333c      	adds	r3, #60	; 0x3c
 800650a:	7bfa      	ldrb	r2, [r7, #15]
 800650c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800650e:	7bfa      	ldrb	r2, [r7, #15]
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	b298      	uxth	r0, r3
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	3356      	adds	r3, #86	; 0x56
 8006522:	4602      	mov	r2, r0
 8006524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006526:	7bfa      	ldrb	r2, [r7, #15]
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3340      	adds	r3, #64	; 0x40
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800653a:	7bfa      	ldrb	r2, [r7, #15]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3344      	adds	r3, #68	; 0x44
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800654e:	7bfa      	ldrb	r2, [r7, #15]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3348      	adds	r3, #72	; 0x48
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	334c      	adds	r3, #76	; 0x4c
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	3301      	adds	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	7bfa      	ldrb	r2, [r7, #15]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d3af      	bcc.n	80064e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
 800658a:	e044      	b.n	8006616 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800658c:	7bfa      	ldrb	r2, [r7, #15]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800659e:	2200      	movs	r2, #0
 80065a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065a2:	7bfa      	ldrb	r2, [r7, #15]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80065b4:	7bfa      	ldrb	r2, [r7, #15]
 80065b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065b8:	7bfa      	ldrb	r2, [r7, #15]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065ce:	7bfa      	ldrb	r2, [r7, #15]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065fa:	7bfa      	ldrb	r2, [r7, #15]
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	3301      	adds	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
 8006616:	7bfa      	ldrb	r2, [r7, #15]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d3b5      	bcc.n	800658c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	687e      	ldr	r6, [r7, #4]
 8006628:	466d      	mov	r5, sp
 800662a:	f106 0410 	add.w	r4, r6, #16
 800662e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800663a:	e885 0003 	stmia.w	r5, {r0, r1}
 800663e:	1d33      	adds	r3, r6, #4
 8006640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006642:	6838      	ldr	r0, [r7, #0]
 8006644:	f006 fd72 	bl	800d12c <USB_DevInit>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e014      	b.n	8006684 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2b01      	cmp	r3, #1
 8006670:	d102      	bne.n	8006678 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f80a 	bl	800668c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f006 ff30 	bl	800d4e2 <USB_DevDisconnect>

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800668c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	10000003 	.word	0x10000003

080066d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80066dc:	4b29      	ldr	r3, [pc, #164]	; (8006784 <HAL_PWREx_ConfigSupply+0xb0>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	2b06      	cmp	r3, #6
 80066e6:	d00a      	beq.n	80066fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066e8:	4b26      	ldr	r3, [pc, #152]	; (8006784 <HAL_PWREx_ConfigSupply+0xb0>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d001      	beq.n	80066fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e040      	b.n	800677c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e03e      	b.n	800677c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066fe:	4b21      	ldr	r3, [pc, #132]	; (8006784 <HAL_PWREx_ConfigSupply+0xb0>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006706:	491f      	ldr	r1, [pc, #124]	; (8006784 <HAL_PWREx_ConfigSupply+0xb0>)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4313      	orrs	r3, r2
 800670c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800670e:	f7fb fdf5 	bl	80022fc <HAL_GetTick>
 8006712:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006714:	e009      	b.n	800672a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006716:	f7fb fdf1 	bl	80022fc <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006724:	d901      	bls.n	800672a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e028      	b.n	800677c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800672a:	4b16      	ldr	r3, [pc, #88]	; (8006784 <HAL_PWREx_ConfigSupply+0xb0>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	d1ee      	bne.n	8006716 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b1e      	cmp	r3, #30
 800673c:	d008      	beq.n	8006750 <HAL_PWREx_ConfigSupply+0x7c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b2e      	cmp	r3, #46	; 0x2e
 8006742:	d005      	beq.n	8006750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b1d      	cmp	r3, #29
 8006748:	d002      	beq.n	8006750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b2d      	cmp	r3, #45	; 0x2d
 800674e:	d114      	bne.n	800677a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006750:	f7fb fdd4 	bl	80022fc <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006756:	e009      	b.n	800676c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006758:	f7fb fdd0 	bl	80022fc <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006766:	d901      	bls.n	800676c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e007      	b.n	800677c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_PWREx_ConfigSupply+0xb0>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d1ee      	bne.n	8006758 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	58024800 	.word	0x58024800

08006788 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006796:	60d3      	str	r3, [r2, #12]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	58024800 	.word	0x58024800

080067a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f000 bc48 	b.w	800704c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8088 	beq.w	80068da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ca:	4b99      	ldr	r3, [pc, #612]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067d4:	4b96      	ldr	r3, [pc, #600]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d007      	beq.n	80067f0 <HAL_RCC_OscConfig+0x48>
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	2b18      	cmp	r3, #24
 80067e4:	d111      	bne.n	800680a <HAL_RCC_OscConfig+0x62>
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d10c      	bne.n	800680a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f0:	4b8f      	ldr	r3, [pc, #572]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d06d      	beq.n	80068d8 <HAL_RCC_OscConfig+0x130>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d169      	bne.n	80068d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f000 bc21 	b.w	800704c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	d106      	bne.n	8006822 <HAL_RCC_OscConfig+0x7a>
 8006814:	4b86      	ldr	r3, [pc, #536]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a85      	ldr	r2, [pc, #532]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800681a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	e02e      	b.n	8006880 <HAL_RCC_OscConfig+0xd8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10c      	bne.n	8006844 <HAL_RCC_OscConfig+0x9c>
 800682a:	4b81      	ldr	r3, [pc, #516]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a80      	ldr	r2, [pc, #512]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b7e      	ldr	r3, [pc, #504]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a7d      	ldr	r2, [pc, #500]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800683c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e01d      	b.n	8006880 <HAL_RCC_OscConfig+0xd8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800684c:	d10c      	bne.n	8006868 <HAL_RCC_OscConfig+0xc0>
 800684e:	4b78      	ldr	r3, [pc, #480]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a77      	ldr	r2, [pc, #476]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b75      	ldr	r3, [pc, #468]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a74      	ldr	r2, [pc, #464]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e00b      	b.n	8006880 <HAL_RCC_OscConfig+0xd8>
 8006868:	4b71      	ldr	r3, [pc, #452]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a70      	ldr	r2, [pc, #448]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800686e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4b6e      	ldr	r3, [pc, #440]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a6d      	ldr	r2, [pc, #436]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800687a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fb fd38 	bl	80022fc <HAL_GetTick>
 800688c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006890:	f7fb fd34 	bl	80022fc <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e3d4      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a2:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0xe8>
 80068ae:	e014      	b.n	80068da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fb fd24 	bl	80022fc <HAL_GetTick>
 80068b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fb fd20 	bl	80022fc <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e3c0      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068ca:	4b59      	ldr	r3, [pc, #356]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f0      	bne.n	80068b8 <HAL_RCC_OscConfig+0x110>
 80068d6:	e000      	b.n	80068da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80ca 	beq.w	8006a7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e8:	4b51      	ldr	r3, [pc, #324]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068f2:	4b4f      	ldr	r3, [pc, #316]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_RCC_OscConfig+0x166>
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2b18      	cmp	r3, #24
 8006902:	d156      	bne.n	80069b2 <HAL_RCC_OscConfig+0x20a>
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d151      	bne.n	80069b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800690e:	4b48      	ldr	r3, [pc, #288]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_RCC_OscConfig+0x17e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e392      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006926:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 0219 	bic.w	r2, r3, #25
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	493f      	ldr	r1, [pc, #252]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006934:	4313      	orrs	r3, r2
 8006936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fb fce0 	bl	80022fc <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006940:	f7fb fcdc 	bl	80022fc <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e37c      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006952:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695e:	f7fb fcfd 	bl	800235c <HAL_GetREVID>
 8006962:	4603      	mov	r3, r0
 8006964:	f241 0203 	movw	r2, #4099	; 0x1003
 8006968:	4293      	cmp	r3, r2
 800696a:	d817      	bhi.n	800699c <HAL_RCC_OscConfig+0x1f4>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d108      	bne.n	8006986 <HAL_RCC_OscConfig+0x1de>
 8006974:	4b2e      	ldr	r3, [pc, #184]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800697c:	4a2c      	ldr	r2, [pc, #176]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006982:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006984:	e07a      	b.n	8006a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006986:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	031b      	lsls	r3, r3, #12
 8006994:	4926      	ldr	r1, [pc, #152]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006996:	4313      	orrs	r3, r2
 8006998:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800699a:	e06f      	b.n	8006a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699c:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	061b      	lsls	r3, r3, #24
 80069aa:	4921      	ldr	r1, [pc, #132]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069b0:	e064      	b.n	8006a7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d047      	beq.n	8006a4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069ba:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 0219 	bic.w	r2, r3, #25
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	491a      	ldr	r1, [pc, #104]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fb fc96 	bl	80022fc <HAL_GetTick>
 80069d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d4:	f7fb fc92 	bl	80022fc <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e332      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f2:	f7fb fcb3 	bl	800235c <HAL_GetREVID>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d819      	bhi.n	8006a34 <HAL_RCC_OscConfig+0x28c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d108      	bne.n	8006a1a <HAL_RCC_OscConfig+0x272>
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a10:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a16:	6053      	str	r3, [r2, #4]
 8006a18:	e030      	b.n	8006a7c <HAL_RCC_OscConfig+0x2d4>
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	031b      	lsls	r3, r3, #12
 8006a28:	4901      	ldr	r1, [pc, #4]	; (8006a30 <HAL_RCC_OscConfig+0x288>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	604b      	str	r3, [r1, #4]
 8006a2e:	e025      	b.n	8006a7c <HAL_RCC_OscConfig+0x2d4>
 8006a30:	58024400 	.word	0x58024400
 8006a34:	4b9a      	ldr	r3, [pc, #616]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	4997      	ldr	r1, [pc, #604]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
 8006a48:	e018      	b.n	8006a7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a4a:	4b95      	ldr	r3, [pc, #596]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a94      	ldr	r2, [pc, #592]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fb fc51 	bl	80022fc <HAL_GetTick>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a5e:	f7fb fc4d 	bl	80022fc <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e2ed      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a70:	4b8b      	ldr	r3, [pc, #556]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f0      	bne.n	8006a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80a9 	beq.w	8006bdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8a:	4b85      	ldr	r3, [pc, #532]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a94:	4b82      	ldr	r3, [pc, #520]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d007      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x308>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b18      	cmp	r3, #24
 8006aa4:	d13a      	bne.n	8006b1c <HAL_RCC_OscConfig+0x374>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d135      	bne.n	8006b1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ab0:	4b7b      	ldr	r3, [pc, #492]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x320>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d001      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e2c1      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ac8:	f7fb fc48 	bl	800235c <HAL_GetREVID>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d817      	bhi.n	8006b06 <HAL_RCC_OscConfig+0x35e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d108      	bne.n	8006af0 <HAL_RCC_OscConfig+0x348>
 8006ade:	4b70      	ldr	r3, [pc, #448]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ae6:	4a6e      	ldr	r2, [pc, #440]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aee:	e075      	b.n	8006bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006af0:	4b6b      	ldr	r3, [pc, #428]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	069b      	lsls	r3, r3, #26
 8006afe:	4968      	ldr	r1, [pc, #416]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b04:	e06a      	b.n	8006bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b06:	4b66      	ldr	r3, [pc, #408]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	4962      	ldr	r1, [pc, #392]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b1a:	e05f      	b.n	8006bdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d042      	beq.n	8006baa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b24:	4b5e      	ldr	r3, [pc, #376]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a5d      	ldr	r2, [pc, #372]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fb fbe4 	bl	80022fc <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b38:	f7fb fbe0 	bl	80022fc <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e280      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b4a:	4b55      	ldr	r3, [pc, #340]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b56:	f7fb fc01 	bl	800235c <HAL_GetREVID>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d817      	bhi.n	8006b94 <HAL_RCC_OscConfig+0x3ec>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d108      	bne.n	8006b7e <HAL_RCC_OscConfig+0x3d6>
 8006b6c:	4b4c      	ldr	r3, [pc, #304]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b74:	4a4a      	ldr	r2, [pc, #296]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b7a:	6053      	str	r3, [r2, #4]
 8006b7c:	e02e      	b.n	8006bdc <HAL_RCC_OscConfig+0x434>
 8006b7e:	4b48      	ldr	r3, [pc, #288]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	069b      	lsls	r3, r3, #26
 8006b8c:	4944      	ldr	r1, [pc, #272]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	604b      	str	r3, [r1, #4]
 8006b92:	e023      	b.n	8006bdc <HAL_RCC_OscConfig+0x434>
 8006b94:	4b42      	ldr	r3, [pc, #264]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	493f      	ldr	r1, [pc, #252]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60cb      	str	r3, [r1, #12]
 8006ba8:	e018      	b.n	8006bdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006baa:	4b3d      	ldr	r3, [pc, #244]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a3c      	ldr	r2, [pc, #240]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb6:	f7fb fba1 	bl	80022fc <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bbe:	f7fb fb9d 	bl	80022fc <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e23d      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bd0:	4b33      	ldr	r3, [pc, #204]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f0      	bne.n	8006bbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d036      	beq.n	8006c56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d019      	beq.n	8006c24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bf0:	4b2b      	ldr	r3, [pc, #172]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf4:	4a2a      	ldr	r2, [pc, #168]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfc:	f7fb fb7e 	bl	80022fc <HAL_GetTick>
 8006c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c04:	f7fb fb7a 	bl	80022fc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e21a      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c16:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0x45c>
 8006c22:	e018      	b.n	8006c56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c24:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c28:	4a1d      	ldr	r2, [pc, #116]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c2a:	f023 0301 	bic.w	r3, r3, #1
 8006c2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c30:	f7fb fb64 	bl	80022fc <HAL_GetTick>
 8006c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c38:	f7fb fb60 	bl	80022fc <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e200      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d039      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01c      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c76:	f7fb fb41 	bl	80022fc <HAL_GetTick>
 8006c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c7e:	f7fb fb3d 	bl	80022fc <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e1dd      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c90:	4b03      	ldr	r3, [pc, #12]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x4d6>
 8006c9c:	e01b      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
 8006c9e:	bf00      	nop
 8006ca0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ca4:	4b9b      	ldr	r3, [pc, #620]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a9a      	ldr	r2, [pc, #616]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cb0:	f7fb fb24 	bl	80022fc <HAL_GetTick>
 8006cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cb8:	f7fb fb20 	bl	80022fc <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e1c0      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cca:	4b92      	ldr	r3, [pc, #584]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8081 	beq.w	8006de6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ce4:	4b8c      	ldr	r3, [pc, #560]	; (8006f18 <HAL_RCC_OscConfig+0x770>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a8b      	ldr	r2, [pc, #556]	; (8006f18 <HAL_RCC_OscConfig+0x770>)
 8006cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cf0:	f7fb fb04 	bl	80022fc <HAL_GetTick>
 8006cf4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf8:	f7fb fb00 	bl	80022fc <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b64      	cmp	r3, #100	; 0x64
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e1a0      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d0a:	4b83      	ldr	r3, [pc, #524]	; (8006f18 <HAL_RCC_OscConfig+0x770>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d106      	bne.n	8006d2c <HAL_RCC_OscConfig+0x584>
 8006d1e:	4b7d      	ldr	r3, [pc, #500]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	4a7c      	ldr	r2, [pc, #496]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2a:	e02d      	b.n	8006d88 <HAL_RCC_OscConfig+0x5e0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <HAL_RCC_OscConfig+0x5a6>
 8006d34:	4b77      	ldr	r3, [pc, #476]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4a76      	ldr	r2, [pc, #472]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d40:	4b74      	ldr	r3, [pc, #464]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	4a73      	ldr	r2, [pc, #460]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d46:	f023 0304 	bic.w	r3, r3, #4
 8006d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4c:	e01c      	b.n	8006d88 <HAL_RCC_OscConfig+0x5e0>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCC_OscConfig+0x5c8>
 8006d56:	4b6f      	ldr	r3, [pc, #444]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4a6e      	ldr	r2, [pc, #440]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	f043 0304 	orr.w	r3, r3, #4
 8006d60:	6713      	str	r3, [r2, #112]	; 0x70
 8006d62:	4b6c      	ldr	r3, [pc, #432]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a6b      	ldr	r2, [pc, #428]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6e:	e00b      	b.n	8006d88 <HAL_RCC_OscConfig+0x5e0>
 8006d70:	4b68      	ldr	r3, [pc, #416]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	4a67      	ldr	r2, [pc, #412]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7c:	4b65      	ldr	r3, [pc, #404]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	4a64      	ldr	r2, [pc, #400]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006d82:	f023 0304 	bic.w	r3, r3, #4
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d90:	f7fb fab4 	bl	80022fc <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d98:	f7fb fab0 	bl	80022fc <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e14e      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dae:	4b59      	ldr	r3, [pc, #356]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0ee      	beq.n	8006d98 <HAL_RCC_OscConfig+0x5f0>
 8006dba:	e014      	b.n	8006de6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbc:	f7fb fa9e 	bl	80022fc <HAL_GetTick>
 8006dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc4:	f7fb fa9a 	bl	80022fc <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e138      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dda:	4b4e      	ldr	r3, [pc, #312]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1ee      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 812d 	beq.w	800704a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006df0:	4b48      	ldr	r3, [pc, #288]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df8:	2b18      	cmp	r3, #24
 8006dfa:	f000 80bd 	beq.w	8006f78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	f040 809e 	bne.w	8006f44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e08:	4b42      	ldr	r3, [pc, #264]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a41      	ldr	r2, [pc, #260]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fb fa72 	bl	80022fc <HAL_GetTick>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fb fa6e 	bl	80022fc <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e10e      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e2e:	4b39      	ldr	r3, [pc, #228]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3e:	4b37      	ldr	r3, [pc, #220]	; (8006f1c <HAL_RCC_OscConfig+0x774>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e4a:	0112      	lsls	r2, r2, #4
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	4931      	ldr	r1, [pc, #196]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	628b      	str	r3, [r1, #40]	; 0x28
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e62:	3b01      	subs	r3, #1
 8006e64:	025b      	lsls	r3, r3, #9
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e84:	4923      	ldr	r1, [pc, #140]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006e8a:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e90:	f023 0301 	bic.w	r3, r3, #1
 8006e94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e96:	4b1f      	ldr	r3, [pc, #124]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9a:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <HAL_RCC_OscConfig+0x778>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ea2:	00d2      	lsls	r2, r2, #3
 8006ea4:	491b      	ldr	r1, [pc, #108]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	f023 020c 	bic.w	r2, r3, #12
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	4917      	ldr	r1, [pc, #92]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ebc:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	f023 0202 	bic.w	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	4912      	ldr	r1, [pc, #72]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eda:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	4a0d      	ldr	r2, [pc, #52]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	4a07      	ldr	r2, [pc, #28]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <HAL_RCC_OscConfig+0x76c>)
 8006f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0a:	f7fb f9f7 	bl	80022fc <HAL_GetTick>
 8006f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f10:	e011      	b.n	8006f36 <HAL_RCC_OscConfig+0x78e>
 8006f12:	bf00      	nop
 8006f14:	58024400 	.word	0x58024400
 8006f18:	58024800 	.word	0x58024800
 8006f1c:	fffffc0c 	.word	0xfffffc0c
 8006f20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f24:	f7fb f9ea 	bl	80022fc <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e08a      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f36:	4b47      	ldr	r3, [pc, #284]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0x77c>
 8006f42:	e082      	b.n	800704a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f44:	4b43      	ldr	r3, [pc, #268]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a42      	ldr	r2, [pc, #264]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f50:	f7fb f9d4 	bl	80022fc <HAL_GetTick>
 8006f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fb f9d0 	bl	80022fc <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e070      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f6a:	4b3a      	ldr	r3, [pc, #232]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f0      	bne.n	8006f58 <HAL_RCC_OscConfig+0x7b0>
 8006f76:	e068      	b.n	800704a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f78:	4b36      	ldr	r3, [pc, #216]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f7e:	4b35      	ldr	r3, [pc, #212]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d031      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f003 0203 	and.w	r2, r3, #3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d12a      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	091b      	lsrs	r3, r3, #4
 8006f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d122      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d11a      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	0a5b      	lsrs	r3, r3, #9
 8006fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d111      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d108      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	0e1b      	lsrs	r3, r3, #24
 8006fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e02b      	b.n	800704c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	08db      	lsrs	r3, r3, #3
 8006ffa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ffe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	429a      	cmp	r2, r3
 8007008:	d01f      	beq.n	800704a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800700a:	4b12      	ldr	r3, [pc, #72]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	4a11      	ldr	r2, [pc, #68]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007016:	f7fb f971 	bl	80022fc <HAL_GetTick>
 800701a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800701c:	bf00      	nop
 800701e:	f7fb f96d 	bl	80022fc <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	4293      	cmp	r3, r2
 8007028:	d0f9      	beq.n	800701e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 800702c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <HAL_RCC_OscConfig+0x8b0>)
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007036:	00d2      	lsls	r2, r2, #3
 8007038:	4906      	ldr	r1, [pc, #24]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 800703a:	4313      	orrs	r3, r2
 800703c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	4a04      	ldr	r2, [pc, #16]	; (8007054 <HAL_RCC_OscConfig+0x8ac>)
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3730      	adds	r7, #48	; 0x30
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	58024400 	.word	0x58024400
 8007058:	ffff0007 	.word	0xffff0007

0800705c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e19c      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007070:	4b8a      	ldr	r3, [pc, #552]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d910      	bls.n	80070a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707e:	4b87      	ldr	r3, [pc, #540]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 020f 	bic.w	r2, r3, #15
 8007086:	4985      	ldr	r1, [pc, #532]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b83      	ldr	r3, [pc, #524]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e184      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	4b7b      	ldr	r3, [pc, #492]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d908      	bls.n	80070ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070bc:	4b78      	ldr	r3, [pc, #480]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	4975      	ldr	r1, [pc, #468]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d010      	beq.n	80070fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695a      	ldr	r2, [r3, #20]
 80070de:	4b70      	ldr	r3, [pc, #448]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d908      	bls.n	80070fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070ea:	4b6d      	ldr	r3, [pc, #436]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	496a      	ldr	r1, [pc, #424]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d010      	beq.n	800712a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	4b64      	ldr	r3, [pc, #400]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007114:	429a      	cmp	r2, r3
 8007116:	d908      	bls.n	800712a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007118:	4b61      	ldr	r3, [pc, #388]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	495e      	ldr	r1, [pc, #376]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007126:	4313      	orrs	r3, r2
 8007128:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d010      	beq.n	8007158 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69da      	ldr	r2, [r3, #28]
 800713a:	4b59      	ldr	r3, [pc, #356]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007142:	429a      	cmp	r2, r3
 8007144:	d908      	bls.n	8007158 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007146:	4b56      	ldr	r3, [pc, #344]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4953      	ldr	r1, [pc, #332]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007154:	4313      	orrs	r3, r2
 8007156:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d010      	beq.n	8007186 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	4b4d      	ldr	r3, [pc, #308]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	429a      	cmp	r2, r3
 8007172:	d908      	bls.n	8007186 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007174:	4b4a      	ldr	r3, [pc, #296]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f023 020f 	bic.w	r2, r3, #15
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4947      	ldr	r1, [pc, #284]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007182:	4313      	orrs	r3, r2
 8007184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d055      	beq.n	800723e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007192:	4b43      	ldr	r3, [pc, #268]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	4940      	ldr	r1, [pc, #256]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d107      	bne.n	80071bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071ac:	4b3c      	ldr	r3, [pc, #240]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d121      	bne.n	80071fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0f6      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d107      	bne.n	80071d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071c4:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d115      	bne.n	80071fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0ea      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d107      	bne.n	80071ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071dc:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0de      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071ec:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0d6      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071fc:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f023 0207 	bic.w	r2, r3, #7
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4925      	ldr	r1, [pc, #148]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800720a:	4313      	orrs	r3, r2
 800720c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720e:	f7fb f875 	bl	80022fc <HAL_GetTick>
 8007212:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007214:	e00a      	b.n	800722c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007216:	f7fb f871 	bl	80022fc <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f241 3288 	movw	r2, #5000	; 0x1388
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e0be      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722c:	4b1c      	ldr	r3, [pc, #112]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	429a      	cmp	r2, r3
 800723c:	d1eb      	bne.n	8007216 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	429a      	cmp	r2, r3
 8007258:	d208      	bcs.n	800726c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f023 020f 	bic.w	r2, r3, #15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	490e      	ldr	r1, [pc, #56]	; (80072a0 <HAL_RCC_ClockConfig+0x244>)
 8007268:	4313      	orrs	r3, r2
 800726a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d214      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 020f 	bic.w	r2, r3, #15
 8007282:	4906      	ldr	r1, [pc, #24]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b04      	ldr	r3, [pc, #16]	; (800729c <HAL_RCC_ClockConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d005      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e086      	b.n	80073aa <HAL_RCC_ClockConfig+0x34e>
 800729c:	52002000 	.word	0x52002000
 80072a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d010      	beq.n	80072d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	4b3f      	ldr	r3, [pc, #252]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072bc:	429a      	cmp	r2, r3
 80072be:	d208      	bcs.n	80072d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072c0:	4b3c      	ldr	r3, [pc, #240]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	4939      	ldr	r1, [pc, #228]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d010      	beq.n	8007300 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d208      	bcs.n	8007300 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	492e      	ldr	r1, [pc, #184]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	d010      	beq.n	800732e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007318:	429a      	cmp	r2, r3
 800731a:	d208      	bcs.n	800732e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	4922      	ldr	r1, [pc, #136]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 800732a:	4313      	orrs	r3, r2
 800732c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007346:	429a      	cmp	r2, r3
 8007348:	d208      	bcs.n	800735c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	4917      	ldr	r1, [pc, #92]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 8007358:	4313      	orrs	r3, r2
 800735a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800735c:	f000 f834 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 8007360:	4602      	mov	r2, r0
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	4912      	ldr	r1, [pc, #72]	; (80073b8 <HAL_RCC_ClockConfig+0x35c>)
 800736e:	5ccb      	ldrb	r3, [r1, r3]
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
 8007378:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800737a:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <HAL_RCC_ClockConfig+0x358>)
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <HAL_RCC_ClockConfig+0x35c>)
 8007384:	5cd3      	ldrb	r3, [r2, r3]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <HAL_RCC_ClockConfig+0x360>)
 8007392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007394:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <HAL_RCC_ClockConfig+0x364>)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800739a:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <HAL_RCC_ClockConfig+0x368>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fa ff62 	bl	8002268 <HAL_InitTick>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
 80073b8:	08011bc4 	.word	0x08011bc4
 80073bc:	24000004 	.word	0x24000004
 80073c0:	24000000 	.word	0x24000000
 80073c4:	24000008 	.word	0x24000008

080073c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b089      	sub	sp, #36	; 0x24
 80073cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073ce:	4bb3      	ldr	r3, [pc, #716]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073d6:	2b18      	cmp	r3, #24
 80073d8:	f200 8155 	bhi.w	8007686 <HAL_RCC_GetSysClockFreq+0x2be>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007449 	.word	0x08007449
 80073e8:	08007687 	.word	0x08007687
 80073ec:	08007687 	.word	0x08007687
 80073f0:	08007687 	.word	0x08007687
 80073f4:	08007687 	.word	0x08007687
 80073f8:	08007687 	.word	0x08007687
 80073fc:	08007687 	.word	0x08007687
 8007400:	08007687 	.word	0x08007687
 8007404:	0800746f 	.word	0x0800746f
 8007408:	08007687 	.word	0x08007687
 800740c:	08007687 	.word	0x08007687
 8007410:	08007687 	.word	0x08007687
 8007414:	08007687 	.word	0x08007687
 8007418:	08007687 	.word	0x08007687
 800741c:	08007687 	.word	0x08007687
 8007420:	08007687 	.word	0x08007687
 8007424:	08007475 	.word	0x08007475
 8007428:	08007687 	.word	0x08007687
 800742c:	08007687 	.word	0x08007687
 8007430:	08007687 	.word	0x08007687
 8007434:	08007687 	.word	0x08007687
 8007438:	08007687 	.word	0x08007687
 800743c:	08007687 	.word	0x08007687
 8007440:	08007687 	.word	0x08007687
 8007444:	0800747b 	.word	0x0800747b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007448:	4b94      	ldr	r3, [pc, #592]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007454:	4b91      	ldr	r3, [pc, #580]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	4a90      	ldr	r2, [pc, #576]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
 8007464:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007466:	e111      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007468:	4b8d      	ldr	r3, [pc, #564]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800746a:	61bb      	str	r3, [r7, #24]
      break;
 800746c:	e10e      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800746e:	4b8d      	ldr	r3, [pc, #564]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007470:	61bb      	str	r3, [r7, #24]
      break;
 8007472:	e10b      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007474:	4b8c      	ldr	r3, [pc, #560]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007476:	61bb      	str	r3, [r7, #24]
      break;
 8007478:	e108      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800747a:	4b88      	ldr	r3, [pc, #544]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007484:	4b85      	ldr	r3, [pc, #532]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800748e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007490:	4b82      	ldr	r3, [pc, #520]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800749a:	4b80      	ldr	r3, [pc, #512]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80e1 	beq.w	8007680 <HAL_RCC_GetSysClockFreq+0x2b8>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	f000 8083 	beq.w	80075cc <HAL_RCC_GetSysClockFreq+0x204>
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	f200 80a1 	bhi.w	8007610 <HAL_RCC_GetSysClockFreq+0x248>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_RCC_GetSysClockFreq+0x114>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d056      	beq.n	8007588 <HAL_RCC_GetSysClockFreq+0x1c0>
 80074da:	e099      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074dc:	4b6f      	ldr	r3, [pc, #444]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02d      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e8:	4b6c      	ldr	r3, [pc, #432]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	4a6b      	ldr	r2, [pc, #428]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b62      	ldr	r3, [pc, #392]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a02 	vldr	s12, [r7, #8]
 8007526:	eddf 5a61 	vldr	s11, [pc, #388]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007542:	e087      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80076b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b51      	ldr	r3, [pc, #324]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a02 	vldr	s12, [r7, #8]
 800756a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007586:	e065      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a48 	vldr	s13, [pc, #288]	; 80076b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b40      	ldr	r3, [pc, #256]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075ca:	e043      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80076b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b2f      	ldr	r3, [pc, #188]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800760e:	e021      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80076b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b1e      	ldr	r3, [pc, #120]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a02 	vldr	s12, [r7, #8]
 8007636:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007652:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007654:	4b11      	ldr	r3, [pc, #68]	; (800769c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	0a5b      	lsrs	r3, r3, #9
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	3301      	adds	r3, #1
 8007660:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800766c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007678:	ee17 3a90 	vmov	r3, s15
 800767c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800767e:	e005      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
      break;
 8007684:	e002      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007686:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007688:	61bb      	str	r3, [r7, #24]
      break;
 800768a:	bf00      	nop
  }

  return sysclockfreq;
 800768c:	69bb      	ldr	r3, [r7, #24]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3724      	adds	r7, #36	; 0x24
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
 80076a0:	03d09000 	.word	0x03d09000
 80076a4:	003d0900 	.word	0x003d0900
 80076a8:	007a1200 	.word	0x007a1200
 80076ac:	46000000 	.word	0x46000000
 80076b0:	4c742400 	.word	0x4c742400
 80076b4:	4a742400 	.word	0x4a742400
 80076b8:	4af42400 	.word	0x4af42400

080076bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076c2:	f7ff fe81 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 80076c6:	4602      	mov	r2, r0
 80076c8:	4b10      	ldr	r3, [pc, #64]	; (800770c <HAL_RCC_GetHCLKFreq+0x50>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	490f      	ldr	r1, [pc, #60]	; (8007710 <HAL_RCC_GetHCLKFreq+0x54>)
 80076d4:	5ccb      	ldrb	r3, [r1, r3]
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	fa22 f303 	lsr.w	r3, r2, r3
 80076de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <HAL_RCC_GetHCLKFreq+0x50>)
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <HAL_RCC_GetHCLKFreq+0x54>)
 80076ea:	5cd3      	ldrb	r3, [r2, r3]
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	4a07      	ldr	r2, [pc, #28]	; (8007714 <HAL_RCC_GetHCLKFreq+0x58>)
 80076f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076fa:	4a07      	ldr	r2, [pc, #28]	; (8007718 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <HAL_RCC_GetHCLKFreq+0x58>)
 8007702:	681b      	ldr	r3, [r3, #0]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	58024400 	.word	0x58024400
 8007710:	08011bc4 	.word	0x08011bc4
 8007714:	24000004 	.word	0x24000004
 8007718:	24000000 	.word	0x24000000

0800771c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007720:	f7ff ffcc 	bl	80076bc <HAL_RCC_GetHCLKFreq>
 8007724:	4602      	mov	r2, r0
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007732:	5ccb      	ldrb	r3, [r1, r3]
 8007734:	f003 031f 	and.w	r3, r3, #31
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800773c:	4618      	mov	r0, r3
 800773e:	bd80      	pop	{r7, pc}
 8007740:	58024400 	.word	0x58024400
 8007744:	08011bc4 	.word	0x08011bc4

08007748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800774c:	f7ff ffb6 	bl	80076bc <HAL_RCC_GetHCLKFreq>
 8007750:	4602      	mov	r2, r0
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	4904      	ldr	r1, [pc, #16]	; (8007770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800775e:	5ccb      	ldrb	r3, [r1, r3]
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007768:	4618      	mov	r0, r3
 800776a:	bd80      	pop	{r7, pc}
 800776c:	58024400 	.word	0x58024400
 8007770:	08011bc4 	.word	0x08011bc4

08007774 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007778:	b0ca      	sub	sp, #296	; 0x128
 800777a:	af00      	add	r7, sp, #0
 800777c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007780:	2300      	movs	r3, #0
 8007782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007786:	2300      	movs	r3, #0
 8007788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007798:	2500      	movs	r5, #0
 800779a:	ea54 0305 	orrs.w	r3, r4, r5
 800779e:	d049      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077aa:	d02f      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80077ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077b0:	d828      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80077b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077b6:	d01a      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80077b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077bc:	d822      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80077c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077c6:	d007      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077c8:	e01c      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ca:	4bb8      	ldr	r3, [pc, #736]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	4ab7      	ldr	r2, [pc, #732]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077d6:	e01a      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077dc:	3308      	adds	r3, #8
 80077de:	2102      	movs	r1, #2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f002 fb61 	bl	8009ea8 <RCCEx_PLL2_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077ec:	e00f      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f2:	3328      	adds	r3, #40	; 0x28
 80077f4:	2102      	movs	r1, #2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 fc08 	bl	800a00c <RCCEx_PLL3_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007802:	e004      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800780a:	e000      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800780c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007816:	4ba5      	ldr	r3, [pc, #660]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007824:	4aa1      	ldr	r2, [pc, #644]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007826:	430b      	orrs	r3, r1
 8007828:	6513      	str	r3, [r2, #80]	; 0x50
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007840:	f04f 0900 	mov.w	r9, #0
 8007844:	ea58 0309 	orrs.w	r3, r8, r9
 8007848:	d047      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	2b04      	cmp	r3, #4
 8007852:	d82a      	bhi.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007871 	.word	0x08007871
 8007860:	0800787f 	.word	0x0800787f
 8007864:	08007895 	.word	0x08007895
 8007868:	080078b3 	.word	0x080078b3
 800786c:	080078b3 	.word	0x080078b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007870:	4b8e      	ldr	r3, [pc, #568]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a8d      	ldr	r2, [pc, #564]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800787c:	e01a      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007882:	3308      	adds	r3, #8
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f002 fb0e 	bl	8009ea8 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007892:	e00f      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007898:	3328      	adds	r3, #40	; 0x28
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f002 fbb5 	bl	800a00c <RCCEx_PLL3_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078a8:	e004      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078b0:	e000      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80078b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078bc:	4b7b      	ldr	r3, [pc, #492]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c0:	f023 0107 	bic.w	r1, r3, #7
 80078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	4a78      	ldr	r2, [pc, #480]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078cc:	430b      	orrs	r3, r1
 80078ce:	6513      	str	r3, [r2, #80]	; 0x50
 80078d0:	e003      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80078e6:	f04f 0b00 	mov.w	fp, #0
 80078ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80078ee:	d04c      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d030      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80078fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007900:	d829      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007902:	2bc0      	cmp	r3, #192	; 0xc0
 8007904:	d02d      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007906:	2bc0      	cmp	r3, #192	; 0xc0
 8007908:	d825      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d018      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800790e:	2b80      	cmp	r3, #128	; 0x80
 8007910:	d821      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d007      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800791a:	e01c      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791c:	4b63      	ldr	r3, [pc, #396]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	4a62      	ldr	r2, [pc, #392]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007928:	e01c      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792e:	3308      	adds	r3, #8
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f002 fab8 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800793e:	e011      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007944:	3328      	adds	r3, #40	; 0x28
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f002 fb5f 	bl	800a00c <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007954:	e006      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800796c:	4b4f      	ldr	r3, [pc, #316]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797a:	4a4c      	ldr	r2, [pc, #304]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800797c:	430b      	orrs	r3, r1
 800797e:	6513      	str	r3, [r2, #80]	; 0x50
 8007980:	e003      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007996:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800799a:	2300      	movs	r3, #0
 800799c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80079a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80079a4:	460b      	mov	r3, r1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	d053      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079b6:	d035      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80079b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079bc:	d82e      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80079be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079c2:	d031      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80079c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079c8:	d828      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80079ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ce:	d01a      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80079d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079d4:	d822      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80079da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079de:	d007      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80079e0:	e01c      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e2:	4b32      	ldr	r3, [pc, #200]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	4a31      	ldr	r2, [pc, #196]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079ee:	e01c      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f4:	3308      	adds	r3, #8
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f002 fa55 	bl	8009ea8 <RCCEx_PLL2_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a04:	e011      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0a:	3328      	adds	r3, #40	; 0x28
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f002 fafc 	bl	800a00c <RCCEx_PLL3_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a1a:	e006      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a22:	e002      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a42:	4a1a      	ldr	r2, [pc, #104]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6593      	str	r3, [r2, #88]	; 0x58
 8007a48:	e003      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007a5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	d056      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a7e:	d038      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a84:	d831      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a8a:	d034      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007a8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a90:	d82b      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a96:	d01d      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a9c:	d825      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d006      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007aa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007aa6:	d00a      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007aa8:	e01f      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007aaa:	bf00      	nop
 8007aac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab0:	4ba2      	ldr	r3, [pc, #648]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	4aa1      	ldr	r2, [pc, #644]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007abc:	e01c      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 f9ee 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ad2:	e011      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad8:	3328      	adds	r3, #40	; 0x28
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f002 fa95 	bl	800a00c <RCCEx_PLL3_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ae8:	e006      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007af0:	e002      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b00:	4b8e      	ldr	r3, [pc, #568]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b04:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b10:	4a8a      	ldr	r2, [pc, #552]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6593      	str	r3, [r2, #88]	; 0x58
 8007b16:	e003      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b30:	2300      	movs	r3, #0
 8007b32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	d03a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b46:	2b30      	cmp	r3, #48	; 0x30
 8007b48:	d01f      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007b4a:	2b30      	cmp	r3, #48	; 0x30
 8007b4c:	d819      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d00c      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d815      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d019      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d111      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5e:	4b77      	ldr	r3, [pc, #476]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	4a76      	ldr	r2, [pc, #472]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b6a:	e011      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b70:	3308      	adds	r3, #8
 8007b72:	2102      	movs	r1, #2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f002 f997 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b80:	e006      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b88:	e002      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b8a:	bf00      	nop
 8007b8c:	e000      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b98:	4b68      	ldr	r3, [pc, #416]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	4a65      	ldr	r2, [pc, #404]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bac:	e003      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	d051      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be0:	d035      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be6:	d82e      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bec:	d031      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bf2:	d828      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf8:	d01a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfe:	d822      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c08:	d007      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007c0a:	e01c      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0c:	4b4b      	ldr	r3, [pc, #300]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	4a4a      	ldr	r2, [pc, #296]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c18:	e01c      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1e:	3308      	adds	r3, #8
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 f940 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c2e:	e011      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c34:	3328      	adds	r3, #40	; 0x28
 8007c36:	2100      	movs	r1, #0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f002 f9e7 	bl	800a00c <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c44:	e006      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c4c:	e002      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c5c:	4b37      	ldr	r3, [pc, #220]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	4a34      	ldr	r2, [pc, #208]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6513      	str	r3, [r2, #80]	; 0x50
 8007c70:	e003      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007c86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007c94:	460b      	mov	r3, r1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d056      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ca4:	d033      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007caa:	d82c      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cb0:	d02f      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cb6:	d826      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cbc:	d02b      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cc2:	d820      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cc8:	d012      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cce:	d81a      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d022      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	d115      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cde:	3308      	adds	r3, #8
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f002 f8e0 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cee:	e015      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf4:	3328      	adds	r3, #40	; 0x28
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 f987 	bl	800a00c <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d04:	e00a      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e004      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d28:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d32:	4a02      	ldr	r2, [pc, #8]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6513      	str	r3, [r2, #80]	; 0x50
 8007d38:	e006      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d055      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d74:	d033      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d7a:	d82c      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d80:	d02f      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d86:	d826      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d8c:	d02b      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007d8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d92:	d820      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d98:	d012      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9e:	d81a      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d022      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007da8:	d115      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	3308      	adds	r3, #8
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f002 f878 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007dbe:	e015      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc4:	3328      	adds	r3, #40	; 0x28
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f002 f91f 	bl	800a00c <RCCEx_PLL3_Config>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007dd4:	e00a      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ddc:	e006      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007dde:	bf00      	nop
 8007de0:	e004      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007de2:	bf00      	nop
 8007de4:	e002      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10b      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007df4:	4ba3      	ldr	r3, [pc, #652]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e04:	4a9f      	ldr	r2, [pc, #636]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	6593      	str	r3, [r2, #88]	; 0x58
 8007e0a:	e003      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e24:	2300      	movs	r3, #0
 8007e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4313      	orrs	r3, r2
 8007e32:	d037      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3e:	d00e      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e44:	d816      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e4e:	d111      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e50:	4b8c      	ldr	r3, [pc, #560]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	4a8b      	ldr	r2, [pc, #556]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e5c:	e00f      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e62:	3308      	adds	r3, #8
 8007e64:	2101      	movs	r1, #1
 8007e66:	4618      	mov	r0, r3
 8007e68:	f002 f81e 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e72:	e004      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e7a:	e000      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10a      	bne.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e86:	4b7f      	ldr	r3, [pc, #508]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e94:	4a7b      	ldr	r2, [pc, #492]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e96:	430b      	orrs	r3, r1
 8007e98:	6513      	str	r3, [r2, #80]	; 0x50
 8007e9a:	e003      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007eba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	d039      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d81c      	bhi.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007f11 	.word	0x08007f11
 8007ed8:	08007ee5 	.word	0x08007ee5
 8007edc:	08007ef3 	.word	0x08007ef3
 8007ee0:	08007f11 	.word	0x08007f11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee4:	4b67      	ldr	r3, [pc, #412]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	4a66      	ldr	r2, [pc, #408]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ef0:	e00f      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 ffd4 	bl	8009ea8 <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f06:	e004      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f1a:	4b5a      	ldr	r3, [pc, #360]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1e:	f023 0103 	bic.w	r1, r3, #3
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f28:	4a56      	ldr	r2, [pc, #344]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f000 809f 	beq.w	8008098 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f5a:	4b4b      	ldr	r3, [pc, #300]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a4a      	ldr	r2, [pc, #296]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f66:	f7fa f9c9 	bl	80022fc <HAL_GetTick>
 8007f6a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f6e:	e00b      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f70:	f7fa f9c4 	bl	80022fc <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b64      	cmp	r3, #100	; 0x64
 8007f7e:	d903      	bls.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f86:	e005      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f88:	4b3f      	ldr	r3, [pc, #252]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0ed      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d179      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f9c:	4b39      	ldr	r3, [pc, #228]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fa8:	4053      	eors	r3, r2
 8007faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d015      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fb2:	4b34      	ldr	r3, [pc, #208]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fbe:	4b31      	ldr	r3, [pc, #196]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a30      	ldr	r2, [pc, #192]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fca:	4b2e      	ldr	r3, [pc, #184]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	4a2d      	ldr	r2, [pc, #180]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007fd6:	4a2b      	ldr	r2, [pc, #172]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007fdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fea:	d118      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fec:	f7fa f986 	bl	80022fc <HAL_GetTick>
 8007ff0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ff4:	e00d      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff6:	f7fa f981 	bl	80022fc <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008000:	1ad2      	subs	r2, r2, r3
 8008002:	f241 3388 	movw	r3, #5000	; 0x1388
 8008006:	429a      	cmp	r2, r3
 8008008:	d903      	bls.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008010:	e005      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0eb      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	2b00      	cmp	r3, #0
 8008024:	d129      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800802e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008036:	d10e      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008038:	4b12      	ldr	r3, [pc, #72]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008048:	091a      	lsrs	r2, r3, #4
 800804a:	4b10      	ldr	r3, [pc, #64]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800804c:	4013      	ands	r3, r2
 800804e:	4a0d      	ldr	r2, [pc, #52]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6113      	str	r3, [r2, #16]
 8008054:	e005      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800805c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008060:	6113      	str	r3, [r2, #16]
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008064:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800806e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008072:	4a04      	ldr	r2, [pc, #16]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6713      	str	r3, [r2, #112]	; 0x70
 8008078:	e00e      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800807e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008082:	e009      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008084:	58024400 	.word	0x58024400
 8008088:	58024800 	.word	0x58024800
 800808c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f002 0301 	and.w	r3, r2, #1
 80080a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080a8:	2300      	movs	r3, #0
 80080aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4313      	orrs	r3, r2
 80080b6:	f000 8089 	beq.w	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c0:	2b28      	cmp	r3, #40	; 0x28
 80080c2:	d86b      	bhi.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80080c4:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080081a5 	.word	0x080081a5
 80080d0:	0800819d 	.word	0x0800819d
 80080d4:	0800819d 	.word	0x0800819d
 80080d8:	0800819d 	.word	0x0800819d
 80080dc:	0800819d 	.word	0x0800819d
 80080e0:	0800819d 	.word	0x0800819d
 80080e4:	0800819d 	.word	0x0800819d
 80080e8:	0800819d 	.word	0x0800819d
 80080ec:	08008171 	.word	0x08008171
 80080f0:	0800819d 	.word	0x0800819d
 80080f4:	0800819d 	.word	0x0800819d
 80080f8:	0800819d 	.word	0x0800819d
 80080fc:	0800819d 	.word	0x0800819d
 8008100:	0800819d 	.word	0x0800819d
 8008104:	0800819d 	.word	0x0800819d
 8008108:	0800819d 	.word	0x0800819d
 800810c:	08008187 	.word	0x08008187
 8008110:	0800819d 	.word	0x0800819d
 8008114:	0800819d 	.word	0x0800819d
 8008118:	0800819d 	.word	0x0800819d
 800811c:	0800819d 	.word	0x0800819d
 8008120:	0800819d 	.word	0x0800819d
 8008124:	0800819d 	.word	0x0800819d
 8008128:	0800819d 	.word	0x0800819d
 800812c:	080081a5 	.word	0x080081a5
 8008130:	0800819d 	.word	0x0800819d
 8008134:	0800819d 	.word	0x0800819d
 8008138:	0800819d 	.word	0x0800819d
 800813c:	0800819d 	.word	0x0800819d
 8008140:	0800819d 	.word	0x0800819d
 8008144:	0800819d 	.word	0x0800819d
 8008148:	0800819d 	.word	0x0800819d
 800814c:	080081a5 	.word	0x080081a5
 8008150:	0800819d 	.word	0x0800819d
 8008154:	0800819d 	.word	0x0800819d
 8008158:	0800819d 	.word	0x0800819d
 800815c:	0800819d 	.word	0x0800819d
 8008160:	0800819d 	.word	0x0800819d
 8008164:	0800819d 	.word	0x0800819d
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081a5 	.word	0x080081a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	3308      	adds	r3, #8
 8008176:	2101      	movs	r1, #1
 8008178:	4618      	mov	r0, r3
 800817a:	f001 fe95 	bl	8009ea8 <RCCEx_PLL2_Config>
 800817e:	4603      	mov	r3, r0
 8008180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008184:	e00f      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818a:	3328      	adds	r3, #40	; 0x28
 800818c:	2101      	movs	r1, #1
 800818e:	4618      	mov	r0, r3
 8008190:	f001 ff3c 	bl	800a00c <RCCEx_PLL3_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800819a:	e004      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081a2:	e000      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80081a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081ae:	4bbf      	ldr	r3, [pc, #764]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081bc:	4abb      	ldr	r2, [pc, #748]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081be:	430b      	orrs	r3, r1
 80081c0:	6553      	str	r3, [r2, #84]	; 0x54
 80081c2:	e003      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f002 0302 	and.w	r3, r2, #2
 80081d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80081e6:	460b      	mov	r3, r1
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d041      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	d824      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008249 	.word	0x08008249
 8008200:	08008215 	.word	0x08008215
 8008204:	0800822b 	.word	0x0800822b
 8008208:	08008249 	.word	0x08008249
 800820c:	08008249 	.word	0x08008249
 8008210:	08008249 	.word	0x08008249
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008218:	3308      	adds	r3, #8
 800821a:	2101      	movs	r1, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f001 fe43 	bl	8009ea8 <RCCEx_PLL2_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008228:	e00f      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800822e:	3328      	adds	r3, #40	; 0x28
 8008230:	2101      	movs	r1, #1
 8008232:	4618      	mov	r0, r3
 8008234:	f001 feea 	bl	800a00c <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800823e:	e004      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008246:	e000      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800824a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008252:	4b96      	ldr	r3, [pc, #600]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	f023 0107 	bic.w	r1, r3, #7
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008260:	4a92      	ldr	r2, [pc, #584]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008262:	430b      	orrs	r3, r1
 8008264:	6553      	str	r3, [r2, #84]	; 0x54
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800826c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f002 0304 	and.w	r3, r2, #4
 800827c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008286:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d044      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008298:	2b05      	cmp	r3, #5
 800829a:	d825      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800829c:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082f1 	.word	0x080082f1
 80082a8:	080082bd 	.word	0x080082bd
 80082ac:	080082d3 	.word	0x080082d3
 80082b0:	080082f1 	.word	0x080082f1
 80082b4:	080082f1 	.word	0x080082f1
 80082b8:	080082f1 	.word	0x080082f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c0:	3308      	adds	r3, #8
 80082c2:	2101      	movs	r1, #1
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fdef 	bl	8009ea8 <RCCEx_PLL2_Config>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082d0:	e00f      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d6:	3328      	adds	r3, #40	; 0x28
 80082d8:	2101      	movs	r1, #1
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fe96 	bl	800a00c <RCCEx_PLL3_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082e6:	e004      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082ee:	e000      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80082f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10b      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082fa:	4b6c      	ldr	r3, [pc, #432]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fe:	f023 0107 	bic.w	r1, r3, #7
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800830a:	4a68      	ldr	r2, [pc, #416]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800830c:	430b      	orrs	r3, r1
 800830e:	6593      	str	r3, [r2, #88]	; 0x58
 8008310:	e003      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f002 0320 	and.w	r3, r2, #32
 8008326:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800832a:	2300      	movs	r3, #0
 800832c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008334:	460b      	mov	r3, r1
 8008336:	4313      	orrs	r3, r2
 8008338:	d055      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008346:	d033      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800834c:	d82c      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800834e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008352:	d02f      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008358:	d826      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800835a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800835e:	d02b      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008360:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008364:	d820      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800836a:	d012      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800836c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008370:	d81a      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d022      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800837a:	d115      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008380:	3308      	adds	r3, #8
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f001 fd8f 	bl	8009ea8 <RCCEx_PLL2_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008390:	e015      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008396:	3328      	adds	r3, #40	; 0x28
 8008398:	2102      	movs	r1, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fe36 	bl	800a00c <RCCEx_PLL3_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80083a6:	e00a      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083ae:	e006      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083b0:	bf00      	nop
 80083b2:	e004      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083b4:	bf00      	nop
 80083b6:	e002      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083b8:	bf00      	nop
 80083ba:	e000      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083c6:	4b39      	ldr	r3, [pc, #228]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d6:	4a35      	ldr	r2, [pc, #212]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083d8:	430b      	orrs	r3, r1
 80083da:	6553      	str	r3, [r2, #84]	; 0x54
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80083f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008400:	460b      	mov	r3, r1
 8008402:	4313      	orrs	r3, r2
 8008404:	d058      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800840e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008412:	d033      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008414:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008418:	d82c      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800841a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841e:	d02f      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008424:	d826      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800842a:	d02b      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800842c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008430:	d820      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008436:	d012      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843c:	d81a      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d022      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008446:	d115      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844c:	3308      	adds	r3, #8
 800844e:	2100      	movs	r1, #0
 8008450:	4618      	mov	r0, r3
 8008452:	f001 fd29 	bl	8009ea8 <RCCEx_PLL2_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800845c:	e015      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008462:	3328      	adds	r3, #40	; 0x28
 8008464:	2102      	movs	r1, #2
 8008466:	4618      	mov	r0, r3
 8008468:	f001 fdd0 	bl	800a00c <RCCEx_PLL3_Config>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008472:	e00a      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800847a:	e006      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800847c:	bf00      	nop
 800847e:	e004      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008480:	bf00      	nop
 8008482:	e002      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10e      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008492:	4b06      	ldr	r3, [pc, #24]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008496:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084a2:	4a02      	ldr	r2, [pc, #8]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084a4:	430b      	orrs	r3, r1
 80084a6:	6593      	str	r3, [r2, #88]	; 0x58
 80084a8:	e006      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80084aa:	bf00      	nop
 80084ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80084c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084c8:	2300      	movs	r3, #0
 80084ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80084d2:	460b      	mov	r3, r1
 80084d4:	4313      	orrs	r3, r2
 80084d6:	d055      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084e4:	d033      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80084e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084ea:	d82c      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f0:	d02f      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80084f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f6:	d826      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084fc:	d02b      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80084fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008502:	d820      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008508:	d012      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800850a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800850e:	d81a      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d022      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008518:	d115      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851e:	3308      	adds	r3, #8
 8008520:	2100      	movs	r1, #0
 8008522:	4618      	mov	r0, r3
 8008524:	f001 fcc0 	bl	8009ea8 <RCCEx_PLL2_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800852e:	e015      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008534:	3328      	adds	r3, #40	; 0x28
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fd67 	bl	800a00c <RCCEx_PLL3_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008544:	e00a      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800854c:	e006      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800854e:	bf00      	nop
 8008550:	e004      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008552:	bf00      	nop
 8008554:	e002      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008556:	bf00      	nop
 8008558:	e000      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800855a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008564:	4ba1      	ldr	r3, [pc, #644]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008568:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008574:	4a9d      	ldr	r2, [pc, #628]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008576:	430b      	orrs	r3, r1
 8008578:	6593      	str	r3, [r2, #88]	; 0x58
 800857a:	e003      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f002 0308 	and.w	r3, r2, #8
 8008590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008594:	2300      	movs	r3, #0
 8008596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800859a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d01e      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b0:	d10c      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b6:	3328      	adds	r3, #40	; 0x28
 80085b8:	2102      	movs	r1, #2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fd26 	bl	800a00c <RCCEx_PLL3_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80085cc:	4b87      	ldr	r3, [pc, #540]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085dc:	4a83      	ldr	r2, [pc, #524]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085de:	430b      	orrs	r3, r1
 80085e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f002 0310 	and.w	r3, r2, #16
 80085ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085f2:	2300      	movs	r3, #0
 80085f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80085fc:	460b      	mov	r3, r1
 80085fe:	4313      	orrs	r3, r2
 8008600:	d01e      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800860a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860e:	d10c      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008614:	3328      	adds	r3, #40	; 0x28
 8008616:	2102      	movs	r1, #2
 8008618:	4618      	mov	r0, r3
 800861a:	f001 fcf7 	bl	800a00c <RCCEx_PLL3_Config>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800862a:	4b70      	ldr	r3, [pc, #448]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800862c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800863a:	4a6c      	ldr	r2, [pc, #432]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800863c:	430b      	orrs	r3, r1
 800863e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800864c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008650:	2300      	movs	r3, #0
 8008652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008656:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d03e      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008664:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800866c:	d022      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800866e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008672:	d81b      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867c:	d00b      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800867e:	e015      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008684:	3308      	adds	r3, #8
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fc0d 	bl	8009ea8 <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008694:	e00f      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	3328      	adds	r3, #40	; 0x28
 800869c:	2102      	movs	r1, #2
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 fcb4 	bl	800a00c <RCCEx_PLL3_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80086aa:	e004      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086b2:	e000      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80086b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086be:	4b4b      	ldr	r3, [pc, #300]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086ce:	4a47      	ldr	r2, [pc, #284]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6593      	str	r3, [r2, #88]	; 0x58
 80086d4:	e003      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80086ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80086ec:	2300      	movs	r3, #0
 80086ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80086f4:	460b      	mov	r3, r1
 80086f6:	4313      	orrs	r3, r2
 80086f8:	d03b      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008702:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008706:	d01f      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008708:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800870c:	d818      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800870e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008712:	d003      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008718:	d007      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800871a:	e011      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800871c:	4b33      	ldr	r3, [pc, #204]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	4a32      	ldr	r2, [pc, #200]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008728:	e00f      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	3328      	adds	r3, #40	; 0x28
 8008730:	2101      	movs	r1, #1
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fc6a 	bl	800a00c <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800873e:	e004      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008746:	e000      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10b      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008752:	4b26      	ldr	r3, [pc, #152]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800875a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008762:	4a22      	ldr	r2, [pc, #136]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008764:	430b      	orrs	r3, r1
 8008766:	6553      	str	r3, [r2, #84]	; 0x54
 8008768:	e003      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800876e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800877e:	673b      	str	r3, [r7, #112]	; 0x70
 8008780:	2300      	movs	r3, #0
 8008782:	677b      	str	r3, [r7, #116]	; 0x74
 8008784:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008788:	460b      	mov	r3, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	d034      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879c:	d007      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800879e:	e011      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a0:	4b12      	ldr	r3, [pc, #72]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	4a11      	ldr	r2, [pc, #68]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80087ac:	e00e      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b2:	3308      	adds	r3, #8
 80087b4:	2102      	movs	r1, #2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 fb76 	bl	8009ea8 <RCCEx_PLL2_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80087c2:	e003      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10d      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087d4:	4b05      	ldr	r3, [pc, #20]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e2:	4a02      	ldr	r2, [pc, #8]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e4:	430b      	orrs	r3, r1
 80087e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087e8:	e006      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80087ea:	bf00      	nop
 80087ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008804:	66bb      	str	r3, [r7, #104]	; 0x68
 8008806:	2300      	movs	r3, #0
 8008808:	66fb      	str	r3, [r7, #108]	; 0x6c
 800880a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800880e:	460b      	mov	r3, r1
 8008810:	4313      	orrs	r3, r2
 8008812:	d00c      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008818:	3328      	adds	r3, #40	; 0x28
 800881a:	2102      	movs	r1, #2
 800881c:	4618      	mov	r0, r3
 800881e:	f001 fbf5 	bl	800a00c <RCCEx_PLL3_Config>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800883a:	663b      	str	r3, [r7, #96]	; 0x60
 800883c:	2300      	movs	r3, #0
 800883e:	667b      	str	r3, [r7, #100]	; 0x64
 8008840:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008844:	460b      	mov	r3, r1
 8008846:	4313      	orrs	r3, r2
 8008848:	d038      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008856:	d018      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885c:	d811      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800885e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008862:	d014      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008868:	d80b      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d011      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800886e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008872:	d106      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008874:	4bc3      	ldr	r3, [pc, #780]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	4ac2      	ldr	r2, [pc, #776]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800887e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008880:	e008      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008888:	e004      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800888a:	bf00      	nop
 800888c:	e002      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800889c:	4bb9      	ldr	r3, [pc, #740]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ac:	4ab5      	ldr	r2, [pc, #724]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ae:	430b      	orrs	r3, r1
 80088b0:	6553      	str	r3, [r2, #84]	; 0x54
 80088b2:	e003      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80088c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80088ca:	2300      	movs	r3, #0
 80088cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80088d2:	460b      	mov	r3, r1
 80088d4:	4313      	orrs	r3, r2
 80088d6:	d009      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088d8:	4baa      	ldr	r3, [pc, #680]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e6:	4aa7      	ldr	r2, [pc, #668]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80088f8:	653b      	str	r3, [r7, #80]	; 0x50
 80088fa:	2300      	movs	r3, #0
 80088fc:	657b      	str	r3, [r7, #84]	; 0x54
 80088fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008902:	460b      	mov	r3, r1
 8008904:	4313      	orrs	r3, r2
 8008906:	d00a      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008908:	4b9e      	ldr	r3, [pc, #632]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008914:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008918:	4a9a      	ldr	r2, [pc, #616]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891a:	430b      	orrs	r3, r1
 800891c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800892a:	64bb      	str	r3, [r7, #72]	; 0x48
 800892c:	2300      	movs	r3, #0
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008930:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008934:	460b      	mov	r3, r1
 8008936:	4313      	orrs	r3, r2
 8008938:	d009      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800893a:	4b92      	ldr	r3, [pc, #584]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800893c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008948:	4a8e      	ldr	r2, [pc, #568]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800894a:	430b      	orrs	r3, r1
 800894c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800894e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800895a:	643b      	str	r3, [r7, #64]	; 0x40
 800895c:	2300      	movs	r3, #0
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
 8008960:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008964:	460b      	mov	r3, r1
 8008966:	4313      	orrs	r3, r2
 8008968:	d00e      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800896a:	4b86      	ldr	r3, [pc, #536]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	4a85      	ldr	r2, [pc, #532]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008974:	6113      	str	r3, [r2, #16]
 8008976:	4b83      	ldr	r3, [pc, #524]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008978:	6919      	ldr	r1, [r3, #16]
 800897a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008982:	4a80      	ldr	r2, [pc, #512]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008984:	430b      	orrs	r3, r1
 8008986:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008994:	63bb      	str	r3, [r7, #56]	; 0x38
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800899a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800899e:	460b      	mov	r3, r1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	d009      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80089a4:	4b77      	ldr	r3, [pc, #476]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	4a74      	ldr	r2, [pc, #464]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089b4:	430b      	orrs	r3, r1
 80089b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80089c4:	633b      	str	r3, [r7, #48]	; 0x30
 80089c6:	2300      	movs	r3, #0
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80089ce:	460b      	mov	r3, r1
 80089d0:	4313      	orrs	r3, r2
 80089d2:	d00a      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089d4:	4b6b      	ldr	r3, [pc, #428]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089e4:	4a67      	ldr	r2, [pc, #412]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089e6:	430b      	orrs	r3, r1
 80089e8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	2100      	movs	r1, #0
 80089f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008a00:	460b      	mov	r3, r1
 8008a02:	4313      	orrs	r3, r2
 8008a04:	d011      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa4a 	bl	8009ea8 <RCCEx_PLL2_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	2100      	movs	r1, #0
 8008a34:	6239      	str	r1, [r7, #32]
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d011      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fa2a 	bl	8009ea8 <RCCEx_PLL2_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	2100      	movs	r1, #0
 8008a74:	61b9      	str	r1, [r7, #24]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a80:	460b      	mov	r3, r1
 8008a82:	4313      	orrs	r3, r2
 8008a84:	d011      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 fa0a 	bl	8009ea8 <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6139      	str	r1, [r7, #16]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	d011      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aca:	3328      	adds	r3, #40	; 0x28
 8008acc:	2100      	movs	r1, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 fa9c 	bl	800a00c <RCCEx_PLL3_Config>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	2100      	movs	r1, #0
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b00:	460b      	mov	r3, r1
 8008b02:	4313      	orrs	r3, r2
 8008b04:	d011      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b0a:	3328      	adds	r3, #40	; 0x28
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fa7c 	bl	800a00c <RCCEx_PLL3_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	2100      	movs	r1, #0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	607b      	str	r3, [r7, #4]
 8008b3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008b40:	460b      	mov	r3, r1
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d011      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4a:	3328      	adds	r3, #40	; 0x28
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fa5c 	bl	800a00c <RCCEx_PLL3_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008b6a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e000      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b84:	58024400 	.word	0x58024400

08008b88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b090      	sub	sp, #64	; 0x40
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	f040 8094 	bne.w	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ba0:	4b9e      	ldr	r3, [pc, #632]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	f200 8087 	bhi.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008bcd 	.word	0x08008bcd
 8008bbc:	08008bf5 	.word	0x08008bf5
 8008bc0:	08008c1d 	.word	0x08008c1d
 8008bc4:	08008cb9 	.word	0x08008cb9
 8008bc8:	08008c45 	.word	0x08008c45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bcc:	4b93      	ldr	r3, [pc, #588]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bd8:	d108      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 f810 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be8:	f000 bd45 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf0:	f000 bd41 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bf4:	4b89      	ldr	r3, [pc, #548]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c00:	d108      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c02:	f107 0318 	add.w	r3, r7, #24
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fd54 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c10:	f000 bd31 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c18:	f000 bd2d 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c1c:	4b7f      	ldr	r3, [pc, #508]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c28:	d108      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c2a:	f107 030c 	add.w	r3, r7, #12
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fe94 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c38:	f000 bd1d 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c40:	f000 bd19 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c44:	4b75      	ldr	r3, [pc, #468]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c4e:	4b73      	ldr	r3, [pc, #460]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d10c      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c60:	4b6e      	ldr	r3, [pc, #440]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	08db      	lsrs	r3, r3, #3
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	4a6d      	ldr	r2, [pc, #436]	; (8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c72:	e01f      	b.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c74:	4b69      	ldr	r3, [pc, #420]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c80:	d106      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c88:	d102      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c8a:	4b66      	ldr	r3, [pc, #408]	; (8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c8e:	e011      	b.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c90:	4b62      	ldr	r3, [pc, #392]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c9c:	d106      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca4:	d102      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ca6:	4b60      	ldr	r3, [pc, #384]	; (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008caa:	e003      	b.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008cb0:	f000 bce1 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008cb4:	f000 bcdf 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cb8:	4b5c      	ldr	r3, [pc, #368]	; (8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cbc:	f000 bcdb 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc4:	f000 bcd7 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ccc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	f040 80ad 	bne.w	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008cd6:	4b51      	ldr	r3, [pc, #324]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008cde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce6:	d056      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cee:	f200 8090 	bhi.w	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	2bc0      	cmp	r3, #192	; 0xc0
 8008cf6:	f000 8088 	beq.w	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8008cfe:	f200 8088 	bhi.w	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	2b80      	cmp	r3, #128	; 0x80
 8008d06:	d032      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	2b80      	cmp	r3, #128	; 0x80
 8008d0c:	f200 8081 	bhi.w	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d014      	beq.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008d1c:	e079      	b.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d1e:	4b3f      	ldr	r3, [pc, #252]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d2a:	d108      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 ff67 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d3a:	f000 bc9c 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d42:	f000 bc98 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d46:	4b35      	ldr	r3, [pc, #212]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d52:	d108      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d54:	f107 0318 	add.w	r3, r7, #24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fcab 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d62:	f000 bc88 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d6a:	f000 bc84 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d6e:	4b2b      	ldr	r3, [pc, #172]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7a:	d108      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d7c:	f107 030c 	add.w	r3, r7, #12
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fdeb 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8a:	f000 bc74 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d92:	f000 bc70 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d96:	4b21      	ldr	r3, [pc, #132]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d9e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da0:	4b1e      	ldr	r3, [pc, #120]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d10c      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d109      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db2:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	08db      	lsrs	r3, r3, #3
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	4a18      	ldr	r2, [pc, #96]	; (8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc4:	e01f      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dc6:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd2:	d106      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dda:	d102      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ddc:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de0:	e011      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008de2:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dee:	d106      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df6:	d102      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008df8:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dfc:	e003      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008e02:	f000 bc38 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e06:	f000 bc36 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e0a:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0e:	f000 bc32 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e16:	f000 bc2e 	b.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e1a:	bf00      	nop
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	03d09000 	.word	0x03d09000
 8008e24:	003d0900 	.word	0x003d0900
 8008e28:	007a1200 	.word	0x007a1200
 8008e2c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e34:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	f040 809c 	bne.w	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008e3e:	4b9e      	ldr	r3, [pc, #632]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e4e:	d054      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e56:	f200 808b 	bhi.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e60:	f000 8083 	beq.w	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e6a:	f200 8081 	bhi.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e74:	d02f      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e7c:	d878      	bhi.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e8a:	d012      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008e8c:	e070      	b.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e8e:	4b8a      	ldr	r3, [pc, #552]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e9a:	d107      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 feaf 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eaa:	e3e4      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb0:	e3e1      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eb2:	4b81      	ldr	r3, [pc, #516]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ebe:	d107      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ec0:	f107 0318 	add.w	r3, r7, #24
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fbf5 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ece:	e3d2      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed4:	e3cf      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ed6:	4b78      	ldr	r3, [pc, #480]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee4:	f107 030c 	add.w	r3, r7, #12
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fd37 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef2:	e3c0      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef8:	e3bd      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008efa:	4b6f      	ldr	r3, [pc, #444]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f04:	4b6c      	ldr	r3, [pc, #432]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d10c      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f16:	4b68      	ldr	r3, [pc, #416]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	08db      	lsrs	r3, r3, #3
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	4a66      	ldr	r2, [pc, #408]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f22:	fa22 f303 	lsr.w	r3, r2, r3
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f28:	e01e      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f2a:	4b63      	ldr	r3, [pc, #396]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f36:	d106      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f3e:	d102      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f40:	4b5f      	ldr	r3, [pc, #380]	; (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f44:	e010      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f46:	4b5c      	ldr	r3, [pc, #368]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f52:	d106      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5a:	d102      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f5c:	4b59      	ldr	r3, [pc, #356]	; (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f60:	e002      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f66:	e386      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f68:	e385      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f6a:	4b57      	ldr	r3, [pc, #348]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f6e:	e382      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f74:	e37f      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	f040 80a7 	bne.w	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008f84:	4b4c      	ldr	r3, [pc, #304]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f88:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f94:	d055      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f9c:	f200 8096 	bhi.w	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fa6:	f000 8084 	beq.w	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fb0:	f200 808c 	bhi.w	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fba:	d030      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fc2:	f200 8083 	bhi.w	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fd2:	d012      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008fd4:	e07a      	b.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fd6:	4b38      	ldr	r3, [pc, #224]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fe2:	d107      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fe0b 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff2:	e340      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff8:	e33d      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ffa:	4b2f      	ldr	r3, [pc, #188]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009006:	d107      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009008:	f107 0318 	add.w	r3, r7, #24
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fb51 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009016:	e32e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800901c:	e32b      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800901e:	4b26      	ldr	r3, [pc, #152]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800902a:	d107      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800902c:	f107 030c 	add.w	r3, r7, #12
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fc93 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800903a:	e31c      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009040:	e319      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009042:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800904a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800904c:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b04      	cmp	r3, #4
 8009056:	d10c      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800905e:	4b16      	ldr	r3, [pc, #88]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	08db      	lsrs	r3, r3, #3
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	4a14      	ldr	r2, [pc, #80]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800906a:	fa22 f303 	lsr.w	r3, r2, r3
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009070:	e01e      	b.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009072:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907e:	d106      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009086:	d102      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908c:	e010      	b.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800908e:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800909a:	d106      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800909c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a2:	d102      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090a4:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80090ae:	e2e2      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090b0:	e2e1      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80090b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b6:	e2de      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090b8:	58024400 	.word	0x58024400
 80090bc:	03d09000 	.word	0x03d09000
 80090c0:	003d0900 	.word	0x003d0900
 80090c4:	007a1200 	.word	0x007a1200
 80090c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d0:	e2d1      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80090d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80090da:	430b      	orrs	r3, r1
 80090dc:	f040 809c 	bne.w	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80090e0:	4b93      	ldr	r3, [pc, #588]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80090e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090f0:	d054      	beq.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090f8:	f200 808b 	bhi.w	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009102:	f000 8083 	beq.w	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800910c:	f200 8081 	bhi.w	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009116:	d02f      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800911e:	d878      	bhi.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	2b00      	cmp	r3, #0
 8009124:	d004      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912c:	d012      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800912e:	e070      	b.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009130:	4b7f      	ldr	r3, [pc, #508]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800913c:	d107      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800913e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fd5e 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914c:	e293      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009152:	e290      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009154:	4b76      	ldr	r3, [pc, #472]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800915c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009160:	d107      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009162:	f107 0318 	add.w	r3, r7, #24
 8009166:	4618      	mov	r0, r3
 8009168:	f000 faa4 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009170:	e281      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009176:	e27e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009178:	4b6d      	ldr	r3, [pc, #436]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009184:	d107      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009186:	f107 030c 	add.w	r3, r7, #12
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fbe6 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009194:	e26f      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800919a:	e26c      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800919c:	4b64      	ldr	r3, [pc, #400]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800919e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091a6:	4b62      	ldr	r3, [pc, #392]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d10c      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d109      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091b8:	4b5d      	ldr	r3, [pc, #372]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	08db      	lsrs	r3, r3, #3
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	4a5c      	ldr	r2, [pc, #368]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80091c4:	fa22 f303 	lsr.w	r3, r2, r3
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ca:	e01e      	b.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091cc:	4b58      	ldr	r3, [pc, #352]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d8:	d106      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80091da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091e0:	d102      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091e2:	4b55      	ldr	r3, [pc, #340]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e6:	e010      	b.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091e8:	4b51      	ldr	r3, [pc, #324]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091f4:	d106      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80091f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091fc:	d102      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091fe:	4b4f      	ldr	r3, [pc, #316]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009202:	e002      	b.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009208:	e235      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800920a:	e234      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800920c:	4b4c      	ldr	r3, [pc, #304]	; (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009210:	e231      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009216:	e22e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009220:	430b      	orrs	r3, r1
 8009222:	f040 808f 	bne.w	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009226:	4b42      	ldr	r3, [pc, #264]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800922e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009236:	d06b      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800923e:	d874      	bhi.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009246:	d056      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800924e:	d86c      	bhi.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009256:	d03b      	beq.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800925e:	d864      	bhi.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009266:	d021      	beq.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800926e:	d85c      	bhi.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	2b00      	cmp	r3, #0
 8009274:	d004      	beq.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800927c:	d004      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800927e:	e054      	b.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fe fa4c 	bl	800771c <HAL_RCC_GetPCLK1Freq>
 8009284:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009286:	e1f6      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009288:	4b29      	ldr	r3, [pc, #164]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009294:	d107      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009296:	f107 0318 	add.w	r3, r7, #24
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fa0a 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a4:	e1e7      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092aa:	e1e4      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092ac:	4b20      	ldr	r3, [pc, #128]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092b8:	d107      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ba:	f107 030c 	add.w	r3, r7, #12
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fb4c 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c8:	e1d5      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ce:	e1d2      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092d0:	4b17      	ldr	r3, [pc, #92]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0304 	and.w	r3, r3, #4
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d109      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092dc:	4b14      	ldr	r3, [pc, #80]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	08db      	lsrs	r3, r3, #3
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	4a13      	ldr	r2, [pc, #76]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ee:	e1c2      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f4:	e1bf      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092f6:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009302:	d102      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009308:	e1b5      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800930e:	e1b2      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800931c:	d102      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009322:	e1a8      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009328:	e1a5      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800932e:	e1a2      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009330:	58024400 	.word	0x58024400
 8009334:	03d09000 	.word	0x03d09000
 8009338:	003d0900 	.word	0x003d0900
 800933c:	007a1200 	.word	0x007a1200
 8009340:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009348:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800934c:	430b      	orrs	r3, r1
 800934e:	d173      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009350:	4b9c      	ldr	r3, [pc, #624]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009358:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009360:	d02f      	beq.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009368:	d863      	bhi.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009376:	d012      	beq.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009378:	e05b      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800937a:	4b92      	ldr	r3, [pc, #584]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009386:	d107      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009388:	f107 0318 	add.w	r3, r7, #24
 800938c:	4618      	mov	r0, r3
 800938e:	f000 f991 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009396:	e16e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800939c:	e16b      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800939e:	4b89      	ldr	r3, [pc, #548]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093aa:	d107      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ac:	f107 030c 	add.w	r3, r7, #12
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fad3 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ba:	e15c      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093c0:	e159      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093c2:	4b80      	ldr	r3, [pc, #512]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093cc:	4b7d      	ldr	r3, [pc, #500]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	d10c      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d109      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093de:	4b79      	ldr	r3, [pc, #484]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	08db      	lsrs	r3, r3, #3
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	4a77      	ldr	r2, [pc, #476]	; (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80093ea:	fa22 f303 	lsr.w	r3, r2, r3
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093f0:	e01e      	b.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093f2:	4b74      	ldr	r3, [pc, #464]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fe:	d106      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009406:	d102      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009408:	4b70      	ldr	r3, [pc, #448]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800940c:	e010      	b.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800940e:	4b6d      	ldr	r3, [pc, #436]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800941a:	d106      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009422:	d102      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009424:	4b6a      	ldr	r3, [pc, #424]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009428:	e002      	b.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800942e:	e122      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009430:	e121      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009436:	e11e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009440:	430b      	orrs	r3, r1
 8009442:	d133      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009444:	4b5f      	ldr	r3, [pc, #380]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800945a:	d012      	beq.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800945c:	e023      	b.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945e:	4b59      	ldr	r3, [pc, #356]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800946a:	d107      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800946c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009470:	4618      	mov	r0, r3
 8009472:	f000 fbc7 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800947a:	e0fc      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009480:	e0f9      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009482:	4b50      	ldr	r3, [pc, #320]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800948a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800948e:	d107      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009490:	f107 0318 	add.w	r3, r7, #24
 8009494:	4618      	mov	r0, r3
 8009496:	f000 f90d 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949e:	e0ea      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a4:	e0e7      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094aa:	e0e4      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80094ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80094b4:	430b      	orrs	r3, r1
 80094b6:	f040 808d 	bne.w	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80094ba:	4b42      	ldr	r3, [pc, #264]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094ca:	d06b      	beq.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094d2:	d874      	bhi.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094da:	d056      	beq.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e2:	d86c      	bhi.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094ea:	d03b      	beq.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094f2:	d864      	bhi.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fa:	d021      	beq.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009502:	d85c      	bhi.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009510:	d004      	beq.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009512:	e054      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009514:	f000 f8b8 	bl	8009688 <HAL_RCCEx_GetD3PCLK1Freq>
 8009518:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800951a:	e0ac      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800951c:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009528:	d107      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f8c0 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009538:	e09d      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800953e:	e09a      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009540:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954c:	d107      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800954e:	f107 030c 	add.w	r3, r7, #12
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fa02 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800955c:	e08b      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009562:	e088      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009564:	4b17      	ldr	r3, [pc, #92]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	2b04      	cmp	r3, #4
 800956e:	d109      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009570:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	08db      	lsrs	r3, r3, #3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	4a13      	ldr	r2, [pc, #76]	; (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009582:	e078      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009588:	e075      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800958a:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009596:	d102      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009598:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959c:	e06b      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a2:	e068      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095a4:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095b0:	d102      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b6:	e05e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095bc:	e05b      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c2:	e058      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095c4:	58024400 	.word	0x58024400
 80095c8:	03d09000 	.word	0x03d09000
 80095cc:	003d0900 	.word	0x003d0900
 80095d0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80095d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80095dc:	430b      	orrs	r3, r1
 80095de:	d148      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80095e0:	4b27      	ldr	r3, [pc, #156]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f0:	d02a      	beq.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f8:	d838      	bhi.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009606:	d00d      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009608:	e030      	b.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800960a:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009616:	d102      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961c:	e02b      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009622:	e028      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009624:	4b16      	ldr	r3, [pc, #88]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800962c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009630:	d107      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fae4 	bl	8009c04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009640:	e019      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009646:	e016      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009648:	4b0d      	ldr	r3, [pc, #52]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009654:	d107      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009656:	f107 0318 	add.w	r3, r7, #24
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f82a 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009664:	e007      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966a:	e004      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009670:	e001      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009678:	4618      	mov	r0, r3
 800967a:	3740      	adds	r7, #64	; 0x40
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	58024400 	.word	0x58024400
 8009684:	007a1200 	.word	0x007a1200

08009688 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800968c:	f7fe f816 	bl	80076bc <HAL_RCC_GetHCLKFreq>
 8009690:	4602      	mov	r2, r0
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	091b      	lsrs	r3, r3, #4
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800969e:	5ccb      	ldrb	r3, [r1, r3]
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	58024400 	.word	0x58024400
 80096b0:	08011bc4 	.word	0x08011bc4

080096b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	; 0x24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096bc:	4ba1      	ldr	r3, [pc, #644]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f003 0303 	and.w	r3, r3, #3
 80096c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80096c6:	4b9f      	ldr	r3, [pc, #636]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	0b1b      	lsrs	r3, r3, #12
 80096cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80096d2:	4b9c      	ldr	r3, [pc, #624]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	091b      	lsrs	r3, r3, #4
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80096de:	4b99      	ldr	r3, [pc, #612]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e2:	08db      	lsrs	r3, r3, #3
 80096e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	fb02 f303 	mul.w	r3, r2, r3
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 8111 	beq.w	8009924 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b02      	cmp	r3, #2
 8009706:	f000 8083 	beq.w	8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	2b02      	cmp	r3, #2
 800970e:	f200 80a1 	bhi.w	8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d056      	beq.n	80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800971e:	e099      	b.n	8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009720:	4b88      	ldr	r3, [pc, #544]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d02d      	beq.n	8009788 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800972c:	4b85      	ldr	r3, [pc, #532]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	08db      	lsrs	r3, r3, #3
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	4a84      	ldr	r2, [pc, #528]	; (8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009738:	fa22 f303 	lsr.w	r3, r2, r3
 800973c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009756:	4b7b      	ldr	r3, [pc, #492]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009766:	ed97 6a03 	vldr	s12, [r7, #12]
 800976a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800976e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009782:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009786:	e087      	b.n	8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009792:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009950 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979a:	4b6a      	ldr	r3, [pc, #424]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ca:	e065      	b.n	8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097de:	4b59      	ldr	r3, [pc, #356]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80097f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800980e:	e043      	b.n	8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800981e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009822:	4b48      	ldr	r3, [pc, #288]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009832:	ed97 6a03 	vldr	s12, [r7, #12]
 8009836:	eddf 5a45 	vldr	s11, [pc, #276]	; 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800983a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009852:	e021      	b.n	8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009866:	4b37      	ldr	r3, [pc, #220]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009876:	ed97 6a03 	vldr	s12, [r7, #12]
 800987a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800987e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009896:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009898:	4b2a      	ldr	r3, [pc, #168]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	0a5b      	lsrs	r3, r3, #9
 800989e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098be:	ee17 2a90 	vmov	r2, s15
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80098c6:	4b1f      	ldr	r3, [pc, #124]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	0c1b      	lsrs	r3, r3, #16
 80098cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ec:	ee17 2a90 	vmov	r2, s15
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80098f4:	4b13      	ldr	r3, [pc, #76]	; (8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	0e1b      	lsrs	r3, r3, #24
 80098fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800990a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800990e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800991a:	ee17 2a90 	vmov	r2, s15
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009922:	e008      	b.n	8009936 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	609a      	str	r2, [r3, #8]
}
 8009936:	bf00      	nop
 8009938:	3724      	adds	r7, #36	; 0x24
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	58024400 	.word	0x58024400
 8009948:	03d09000 	.word	0x03d09000
 800994c:	46000000 	.word	0x46000000
 8009950:	4c742400 	.word	0x4c742400
 8009954:	4a742400 	.word	0x4a742400
 8009958:	4af42400 	.word	0x4af42400

0800995c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800995c:	b480      	push	{r7}
 800995e:	b089      	sub	sp, #36	; 0x24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009964:	4ba1      	ldr	r3, [pc, #644]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800996e:	4b9f      	ldr	r3, [pc, #636]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009972:	0d1b      	lsrs	r3, r3, #20
 8009974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009978:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800997a:	4b9c      	ldr	r3, [pc, #624]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009986:	4b99      	ldr	r3, [pc, #612]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	fb02 f303 	mul.w	r3, r2, r3
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8111 	beq.w	8009bcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	f000 8083 	beq.w	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	f200 80a1 	bhi.w	8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d056      	beq.n	8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80099c6:	e099      	b.n	8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c8:	4b88      	ldr	r3, [pc, #544]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d02d      	beq.n	8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099d4:	4b85      	ldr	r3, [pc, #532]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	08db      	lsrs	r3, r3, #3
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	4a84      	ldr	r2, [pc, #528]	; (8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80099e0:	fa22 f303 	lsr.w	r3, r2, r3
 80099e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	ee07 3a90 	vmov	s15, r3
 80099ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b7b      	ldr	r3, [pc, #492]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a2e:	e087      	b.n	8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b6a      	ldr	r3, [pc, #424]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a72:	e065      	b.n	8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a86:	4b59      	ldr	r3, [pc, #356]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ab6:	e043      	b.n	8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aca:	4b48      	ldr	r3, [pc, #288]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ade:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009afa:	e021      	b.n	8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b37      	ldr	r3, [pc, #220]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009b40:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	0a5b      	lsrs	r3, r3, #9
 8009b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b66:	ee17 2a90 	vmov	r2, s15
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009b6e:	4b1f      	ldr	r3, [pc, #124]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b94:	ee17 2a90 	vmov	r2, s15
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009b9c:	4b13      	ldr	r3, [pc, #76]	; (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	0e1b      	lsrs	r3, r3, #24
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc2:	ee17 2a90 	vmov	r2, s15
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009bca:	e008      	b.n	8009bde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	609a      	str	r2, [r3, #8]
}
 8009bde:	bf00      	nop
 8009be0:	3724      	adds	r7, #36	; 0x24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	03d09000 	.word	0x03d09000
 8009bf4:	46000000 	.word	0x46000000
 8009bf8:	4c742400 	.word	0x4c742400
 8009bfc:	4a742400 	.word	0x4a742400
 8009c00:	4af42400 	.word	0x4af42400

08009c04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b089      	sub	sp, #36	; 0x24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c0c:	4ba0      	ldr	r3, [pc, #640]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009c16:	4b9e      	ldr	r3, [pc, #632]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	091b      	lsrs	r3, r3, #4
 8009c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c22:	4b9b      	ldr	r3, [pc, #620]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009c2c:	4b98      	ldr	r3, [pc, #608]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c30:	08db      	lsrs	r3, r3, #3
 8009c32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	fb02 f303 	mul.w	r3, r2, r3
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 8111 	beq.w	8009e72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	f000 8083 	beq.w	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	f200 80a1 	bhi.w	8009da2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d056      	beq.n	8009d1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009c6c:	e099      	b.n	8009da2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c6e:	4b88      	ldr	r3, [pc, #544]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d02d      	beq.n	8009cd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c7a:	4b85      	ldr	r3, [pc, #532]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	08db      	lsrs	r3, r3, #3
 8009c80:	f003 0303 	and.w	r3, r3, #3
 8009c84:	4a83      	ldr	r2, [pc, #524]	; (8009e94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009c86:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca4:	4b7a      	ldr	r3, [pc, #488]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cac:	ee07 3a90 	vmov	s15, r3
 8009cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cd4:	e087      	b.n	8009de6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	ee07 3a90 	vmov	s15, r3
 8009cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009e9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce8:	4b69      	ldr	r3, [pc, #420]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d18:	e065      	b.n	8009de6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2c:	4b58      	ldr	r3, [pc, #352]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d5c:	e043      	b.n	8009de6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	ee07 3a90 	vmov	s15, r3
 8009d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d70:	4b47      	ldr	r3, [pc, #284]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009da0:	e021      	b.n	8009de6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	ee07 3a90 	vmov	s15, r3
 8009da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db4:	4b36      	ldr	r3, [pc, #216]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009de4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009de6:	4b2a      	ldr	r3, [pc, #168]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	0a5b      	lsrs	r3, r3, #9
 8009dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df0:	ee07 3a90 	vmov	s15, r3
 8009df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e0c:	ee17 2a90 	vmov	r2, s15
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009e14:	4b1e      	ldr	r3, [pc, #120]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e18:	0c1b      	lsrs	r3, r3, #16
 8009e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e3a:	ee17 2a90 	vmov	r2, s15
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009e42:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e46:	0e1b      	lsrs	r3, r3, #24
 8009e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4c:	ee07 3a90 	vmov	s15, r3
 8009e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e68:	ee17 2a90 	vmov	r2, s15
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e70:	e008      	b.n	8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	3724      	adds	r7, #36	; 0x24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	58024400 	.word	0x58024400
 8009e94:	03d09000 	.word	0x03d09000
 8009e98:	46000000 	.word	0x46000000
 8009e9c:	4c742400 	.word	0x4c742400
 8009ea0:	4a742400 	.word	0x4a742400
 8009ea4:	4af42400 	.word	0x4af42400

08009ea8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eb6:	4b53      	ldr	r3, [pc, #332]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d101      	bne.n	8009ec6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e099      	b.n	8009ffa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ec6:	4b4f      	ldr	r3, [pc, #316]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a4e      	ldr	r2, [pc, #312]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009ecc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ed2:	f7f8 fa13 	bl	80022fc <HAL_GetTick>
 8009ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ed8:	e008      	b.n	8009eec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eda:	f7f8 fa0f 	bl	80022fc <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e086      	b.n	8009ffa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009eec:	4b45      	ldr	r3, [pc, #276]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f0      	bne.n	8009eda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ef8:	4b42      	ldr	r3, [pc, #264]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	031b      	lsls	r3, r3, #12
 8009f06:	493f      	ldr	r1, [pc, #252]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	025b      	lsls	r3, r3, #9
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f3c:	4931      	ldr	r1, [pc, #196]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f42:	4b30      	ldr	r3, [pc, #192]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	492d      	ldr	r1, [pc, #180]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f54:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	f023 0220 	bic.w	r2, r3, #32
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	4928      	ldr	r1, [pc, #160]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f66:	4b27      	ldr	r3, [pc, #156]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4a26      	ldr	r2, [pc, #152]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f6c:	f023 0310 	bic.w	r3, r3, #16
 8009f70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f76:	4b24      	ldr	r3, [pc, #144]	; (800a008 <RCCEx_PLL2_Config+0x160>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	69d2      	ldr	r2, [r2, #28]
 8009f7e:	00d2      	lsls	r2, r2, #3
 8009f80:	4920      	ldr	r1, [pc, #128]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f86:	4b1f      	ldr	r3, [pc, #124]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f8c:	f043 0310 	orr.w	r3, r3, #16
 8009f90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f98:	4b1a      	ldr	r3, [pc, #104]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a19      	ldr	r2, [pc, #100]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009f9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fa4:	e00f      	b.n	8009fc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d106      	bne.n	8009fba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009fac:	4b15      	ldr	r3, [pc, #84]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	4a14      	ldr	r2, [pc, #80]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fb8:	e005      	b.n	8009fc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	4a11      	ldr	r2, [pc, #68]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a0e      	ldr	r2, [pc, #56]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fd2:	f7f8 f993 	bl	80022fc <HAL_GetTick>
 8009fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fd8:	e008      	b.n	8009fec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fda:	f7f8 f98f 	bl	80022fc <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d901      	bls.n	8009fec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e006      	b.n	8009ffa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <RCCEx_PLL2_Config+0x15c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0f0      	beq.n	8009fda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
 800a008:	ffff0007 	.word	0xffff0007

0800a00c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a01a:	4b53      	ldr	r3, [pc, #332]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	2b03      	cmp	r3, #3
 800a024:	d101      	bne.n	800a02a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e099      	b.n	800a15e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a02a:	4b4f      	ldr	r3, [pc, #316]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a4e      	ldr	r2, [pc, #312]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a036:	f7f8 f961 	bl	80022fc <HAL_GetTick>
 800a03a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a03c:	e008      	b.n	800a050 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a03e:	f7f8 f95d 	bl	80022fc <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d901      	bls.n	800a050 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e086      	b.n	800a15e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a050:	4b45      	ldr	r3, [pc, #276]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f0      	bne.n	800a03e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a05c:	4b42      	ldr	r3, [pc, #264]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a060:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	051b      	lsls	r3, r3, #20
 800a06a:	493f      	ldr	r1, [pc, #252]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	628b      	str	r3, [r1, #40]	; 0x28
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	3b01      	subs	r3, #1
 800a076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	3b01      	subs	r3, #1
 800a080:	025b      	lsls	r3, r3, #9
 800a082:	b29b      	uxth	r3, r3
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	041b      	lsls	r3, r3, #16
 800a08e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	3b01      	subs	r3, #1
 800a09a:	061b      	lsls	r3, r3, #24
 800a09c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0a0:	4931      	ldr	r1, [pc, #196]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a0a6:	4b30      	ldr	r3, [pc, #192]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	492d      	ldr	r1, [pc, #180]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0b8:	4b2b      	ldr	r3, [pc, #172]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	4928      	ldr	r1, [pc, #160]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0ca:	4b27      	ldr	r3, [pc, #156]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	4a26      	ldr	r2, [pc, #152]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0d6:	4b24      	ldr	r3, [pc, #144]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0da:	4b24      	ldr	r3, [pc, #144]	; (800a16c <RCCEx_PLL3_Config+0x160>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	69d2      	ldr	r2, [r2, #28]
 800a0e2:	00d2      	lsls	r2, r2, #3
 800a0e4:	4920      	ldr	r1, [pc, #128]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0ea:	4b1f      	ldr	r3, [pc, #124]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4a1e      	ldr	r2, [pc, #120]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	4a19      	ldr	r2, [pc, #100]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a106:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a108:	e00f      	b.n	800a12a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d106      	bne.n	800a11e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a110:	4b15      	ldr	r3, [pc, #84]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a114:	4a14      	ldr	r2, [pc, #80]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a116:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a11a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a11c:	e005      	b.n	800a12a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a11e:	4b12      	ldr	r3, [pc, #72]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	4a11      	ldr	r2, [pc, #68]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a128:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a0e      	ldr	r2, [pc, #56]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a136:	f7f8 f8e1 	bl	80022fc <HAL_GetTick>
 800a13a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a13c:	e008      	b.n	800a150 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a13e:	f7f8 f8dd 	bl	80022fc <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d901      	bls.n	800a150 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e006      	b.n	800a15e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <RCCEx_PLL3_Config+0x15c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0f0      	beq.n	800a13e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	58024400 	.word	0x58024400
 800a16c:	ffff0007 	.word	0xffff0007

0800a170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e049      	b.n	800a216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7f7 fc50 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f000 fc9a 	bl	800aae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e049      	b.n	800a2c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f841 	bl	800a2cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2202      	movs	r2, #2
 800a24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3304      	adds	r3, #4
 800a25a:	4619      	mov	r1, r3
 800a25c:	4610      	mov	r0, r2
 800a25e:	f000 fc43 	bl	800aae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e08f      	b.n	800a414 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d106      	bne.n	800a30e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7f7 fbeb 	bl	8001ae4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2202      	movs	r2, #2
 800a312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6899      	ldr	r1, [r3, #8]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	4b3e      	ldr	r3, [pc, #248]	; (800a41c <HAL_TIM_Encoder_Init+0x13c>)
 800a322:	400b      	ands	r3, r1
 800a324:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f000 fbd9 	bl	800aae8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	4b31      	ldr	r3, [pc, #196]	; (800a420 <HAL_TIM_Encoder_Init+0x140>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	4313      	orrs	r3, r2
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	4b2b      	ldr	r3, [pc, #172]	; (800a424 <HAL_TIM_Encoder_Init+0x144>)
 800a376:	4013      	ands	r3, r2
 800a378:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	4b2a      	ldr	r3, [pc, #168]	; (800a428 <HAL_TIM_Encoder_Init+0x148>)
 800a37e:	4013      	ands	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	4313      	orrs	r3, r2
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	4313      	orrs	r3, r2
 800a392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	011a      	lsls	r2, r3, #4
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	031b      	lsls	r3, r3, #12
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a3ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a3b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	fffebff8 	.word	0xfffebff8
 800a420:	fffffcfc 	.word	0xfffffcfc
 800a424:	fffff3f3 	.word	0xfffff3f3
 800a428:	ffff0f0f 	.word	0xffff0f0f

0800a42c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d122      	bne.n	800a488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d11b      	bne.n	800a488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f06f 0202 	mvn.w	r2, #2
 800a458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fb1c 	bl	800aaac <HAL_TIM_IC_CaptureCallback>
 800a474:	e005      	b.n	800a482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fb0e 	bl	800aa98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fb1f 	bl	800aac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f003 0304 	and.w	r3, r3, #4
 800a492:	2b04      	cmp	r3, #4
 800a494:	d122      	bne.n	800a4dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	d11b      	bne.n	800a4dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f06f 0204 	mvn.w	r2, #4
 800a4ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 faf2 	bl	800aaac <HAL_TIM_IC_CaptureCallback>
 800a4c8:	e005      	b.n	800a4d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fae4 	bl	800aa98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 faf5 	bl	800aac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0308 	and.w	r3, r3, #8
 800a4e6:	2b08      	cmp	r3, #8
 800a4e8:	d122      	bne.n	800a530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d11b      	bne.n	800a530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f06f 0208 	mvn.w	r2, #8
 800a500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fac8 	bl	800aaac <HAL_TIM_IC_CaptureCallback>
 800a51c:	e005      	b.n	800a52a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 faba 	bl	800aa98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 facb 	bl	800aac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	f003 0310 	and.w	r3, r3, #16
 800a53a:	2b10      	cmp	r3, #16
 800a53c:	d122      	bne.n	800a584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f003 0310 	and.w	r3, r3, #16
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d11b      	bne.n	800a584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f06f 0210 	mvn.w	r2, #16
 800a554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2208      	movs	r2, #8
 800a55a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fa9e 	bl	800aaac <HAL_TIM_IC_CaptureCallback>
 800a570:	e005      	b.n	800a57e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa90 	bl	800aa98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 faa1 	bl	800aac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d10e      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d107      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f06f 0201 	mvn.w	r2, #1
 800a5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa6a 	bl	800aa84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ba:	2b80      	cmp	r3, #128	; 0x80
 800a5bc:	d10e      	bne.n	800a5dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c8:	2b80      	cmp	r3, #128	; 0x80
 800a5ca:	d107      	bne.n	800a5dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 ff2c 	bl	800b434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ea:	d10e      	bne.n	800a60a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f6:	2b80      	cmp	r3, #128	; 0x80
 800a5f8:	d107      	bne.n	800a60a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 ff1f 	bl	800b448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a614:	2b40      	cmp	r3, #64	; 0x40
 800a616:	d10e      	bne.n	800a636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	d107      	bne.n	800a636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fa4f 	bl	800aad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b20      	cmp	r3, #32
 800a642:	d10e      	bne.n	800a662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b20      	cmp	r3, #32
 800a650:	d107      	bne.n	800a662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f06f 0220 	mvn.w	r2, #32
 800a65a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fedf 	bl	800b420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a686:	2302      	movs	r3, #2
 800a688:	e0ff      	b.n	800a88a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b14      	cmp	r3, #20
 800a696:	f200 80f0 	bhi.w	800a87a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a87b 	.word	0x0800a87b
 800a6a8:	0800a87b 	.word	0x0800a87b
 800a6ac:	0800a87b 	.word	0x0800a87b
 800a6b0:	0800a735 	.word	0x0800a735
 800a6b4:	0800a87b 	.word	0x0800a87b
 800a6b8:	0800a87b 	.word	0x0800a87b
 800a6bc:	0800a87b 	.word	0x0800a87b
 800a6c0:	0800a777 	.word	0x0800a777
 800a6c4:	0800a87b 	.word	0x0800a87b
 800a6c8:	0800a87b 	.word	0x0800a87b
 800a6cc:	0800a87b 	.word	0x0800a87b
 800a6d0:	0800a7b7 	.word	0x0800a7b7
 800a6d4:	0800a87b 	.word	0x0800a87b
 800a6d8:	0800a87b 	.word	0x0800a87b
 800a6dc:	0800a87b 	.word	0x0800a87b
 800a6e0:	0800a7f9 	.word	0x0800a7f9
 800a6e4:	0800a87b 	.word	0x0800a87b
 800a6e8:	0800a87b 	.word	0x0800a87b
 800a6ec:	0800a87b 	.word	0x0800a87b
 800a6f0:	0800a839 	.word	0x0800a839
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fa8e 	bl	800ac1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699a      	ldr	r2, [r3, #24]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0208 	orr.w	r2, r2, #8
 800a70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699a      	ldr	r2, [r3, #24]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0204 	bic.w	r2, r2, #4
 800a71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6999      	ldr	r1, [r3, #24]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	619a      	str	r2, [r3, #24]
      break;
 800a732:	e0a5      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68b9      	ldr	r1, [r7, #8]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fafe 	bl	800ad3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6999      	ldr	r1, [r3, #24]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	021a      	lsls	r2, r3, #8
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	619a      	str	r2, [r3, #24]
      break;
 800a774:	e084      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68b9      	ldr	r1, [r7, #8]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fb67 	bl	800ae50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69da      	ldr	r2, [r3, #28]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0208 	orr.w	r2, r2, #8
 800a790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69da      	ldr	r2, [r3, #28]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0204 	bic.w	r2, r2, #4
 800a7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69d9      	ldr	r1, [r3, #28]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	61da      	str	r2, [r3, #28]
      break;
 800a7b4:	e064      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 fbcf 	bl	800af60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69da      	ldr	r2, [r3, #28]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69da      	ldr	r2, [r3, #28]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69d9      	ldr	r1, [r3, #28]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	021a      	lsls	r2, r3, #8
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	61da      	str	r2, [r3, #28]
      break;
 800a7f6:	e043      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fc18 	bl	800b034 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0204 	bic.w	r2, r2, #4
 800a822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a836:	e023      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fc5c 	bl	800b0fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	021a      	lsls	r2, r3, #8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a878:	e002      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	75fb      	strb	r3, [r7, #23]
      break;
 800a87e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop

0800a894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1c>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e0dc      	b.n	800aa6a <HAL_TIM_ConfigClockSource+0x1d6>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	4b6a      	ldr	r3, [pc, #424]	; (800aa74 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a64      	ldr	r2, [pc, #400]	; (800aa78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f000 80a9 	beq.w	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a8ec:	4a62      	ldr	r2, [pc, #392]	; (800aa78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f200 80ae 	bhi.w	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8f4:	4a61      	ldr	r2, [pc, #388]	; (800aa7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	f000 80a1 	beq.w	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a8fc:	4a5f      	ldr	r2, [pc, #380]	; (800aa7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f200 80a6 	bhi.w	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a904:	4a5e      	ldr	r2, [pc, #376]	; (800aa80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a906:	4293      	cmp	r3, r2
 800a908:	f000 8099 	beq.w	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a90c:	4a5c      	ldr	r2, [pc, #368]	; (800aa80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	f200 809e 	bhi.w	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a914:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a918:	f000 8091 	beq.w	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a91c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a920:	f200 8096 	bhi.w	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a928:	f000 8089 	beq.w	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a92c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a930:	f200 808e 	bhi.w	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a938:	d03e      	beq.n	800a9b8 <HAL_TIM_ConfigClockSource+0x124>
 800a93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a93e:	f200 8087 	bhi.w	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a946:	f000 8086 	beq.w	800aa56 <HAL_TIM_ConfigClockSource+0x1c2>
 800a94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94e:	d87f      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a950:	2b70      	cmp	r3, #112	; 0x70
 800a952:	d01a      	beq.n	800a98a <HAL_TIM_ConfigClockSource+0xf6>
 800a954:	2b70      	cmp	r3, #112	; 0x70
 800a956:	d87b      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a958:	2b60      	cmp	r3, #96	; 0x60
 800a95a:	d050      	beq.n	800a9fe <HAL_TIM_ConfigClockSource+0x16a>
 800a95c:	2b60      	cmp	r3, #96	; 0x60
 800a95e:	d877      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a960:	2b50      	cmp	r3, #80	; 0x50
 800a962:	d03c      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x14a>
 800a964:	2b50      	cmp	r3, #80	; 0x50
 800a966:	d873      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d058      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x18a>
 800a96c:	2b40      	cmp	r3, #64	; 0x40
 800a96e:	d86f      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a970:	2b30      	cmp	r3, #48	; 0x30
 800a972:	d064      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a974:	2b30      	cmp	r3, #48	; 0x30
 800a976:	d86b      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a978:	2b20      	cmp	r3, #32
 800a97a:	d060      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d867      	bhi.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
 800a980:	2b00      	cmp	r3, #0
 800a982:	d05c      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a984:	2b10      	cmp	r3, #16
 800a986:	d05a      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x1aa>
 800a988:	e062      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a99a:	f000 fc93 	bl	800b2c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	609a      	str	r2, [r3, #8]
      break;
 800a9b6:	e04f      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9c8:	f000 fc7c 	bl	800b2c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689a      	ldr	r2, [r3, #8]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9da:	609a      	str	r2, [r3, #8]
      break;
 800a9dc:	e03c      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f000 fbec 	bl	800b1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2150      	movs	r1, #80	; 0x50
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fc46 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800a9fc:	e02c      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f000 fc0b 	bl	800b226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2160      	movs	r1, #96	; 0x60
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fc36 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800aa1c:	e01c      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f000 fbcc 	bl	800b1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2140      	movs	r1, #64	; 0x40
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fc26 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800aa3c:	e00c      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4619      	mov	r1, r3
 800aa48:	4610      	mov	r0, r2
 800aa4a:	f000 fc1d 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800aa4e:	e003      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	73fb      	strb	r3, [r7, #15]
      break;
 800aa54:	e000      	b.n	800aa58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aa56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	ffceff88 	.word	0xffceff88
 800aa78:	00100040 	.word	0x00100040
 800aa7c:	00100030 	.word	0x00100030
 800aa80:	00100020 	.word	0x00100020

0800aa84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a40      	ldr	r2, [pc, #256]	; (800abfc <TIM_Base_SetConfig+0x114>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d013      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab06:	d00f      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a3d      	ldr	r2, [pc, #244]	; (800ac00 <TIM_Base_SetConfig+0x118>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d00b      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a3c      	ldr	r2, [pc, #240]	; (800ac04 <TIM_Base_SetConfig+0x11c>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d007      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a3b      	ldr	r2, [pc, #236]	; (800ac08 <TIM_Base_SetConfig+0x120>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d003      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a3a      	ldr	r2, [pc, #232]	; (800ac0c <TIM_Base_SetConfig+0x124>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d108      	bne.n	800ab3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a2f      	ldr	r2, [pc, #188]	; (800abfc <TIM_Base_SetConfig+0x114>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01f      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab48:	d01b      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a2c      	ldr	r2, [pc, #176]	; (800ac00 <TIM_Base_SetConfig+0x118>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d017      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a2b      	ldr	r2, [pc, #172]	; (800ac04 <TIM_Base_SetConfig+0x11c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d013      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a2a      	ldr	r2, [pc, #168]	; (800ac08 <TIM_Base_SetConfig+0x120>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00f      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a29      	ldr	r2, [pc, #164]	; (800ac0c <TIM_Base_SetConfig+0x124>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00b      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a28      	ldr	r2, [pc, #160]	; (800ac10 <TIM_Base_SetConfig+0x128>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d007      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a27      	ldr	r2, [pc, #156]	; (800ac14 <TIM_Base_SetConfig+0x12c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d003      	beq.n	800ab82 <TIM_Base_SetConfig+0x9a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a26      	ldr	r2, [pc, #152]	; (800ac18 <TIM_Base_SetConfig+0x130>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d108      	bne.n	800ab94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a10      	ldr	r2, [pc, #64]	; (800abfc <TIM_Base_SetConfig+0x114>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00f      	beq.n	800abe0 <TIM_Base_SetConfig+0xf8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a12      	ldr	r2, [pc, #72]	; (800ac0c <TIM_Base_SetConfig+0x124>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d00b      	beq.n	800abe0 <TIM_Base_SetConfig+0xf8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a11      	ldr	r2, [pc, #68]	; (800ac10 <TIM_Base_SetConfig+0x128>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d007      	beq.n	800abe0 <TIM_Base_SetConfig+0xf8>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a10      	ldr	r2, [pc, #64]	; (800ac14 <TIM_Base_SetConfig+0x12c>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d003      	beq.n	800abe0 <TIM_Base_SetConfig+0xf8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a0f      	ldr	r2, [pc, #60]	; (800ac18 <TIM_Base_SetConfig+0x130>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d103      	bne.n	800abe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	615a      	str	r2, [r3, #20]
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40010400 	.word	0x40010400
 800ac10:	40014000 	.word	0x40014000
 800ac14:	40014400 	.word	0x40014400
 800ac18:	40014800 	.word	0x40014800

0800ac1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	f023 0201 	bic.w	r2, r3, #1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4b37      	ldr	r3, [pc, #220]	; (800ad24 <TIM_OC1_SetConfig+0x108>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0303 	bic.w	r3, r3, #3
 800ac52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f023 0302 	bic.w	r3, r3, #2
 800ac64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a2d      	ldr	r2, [pc, #180]	; (800ad28 <TIM_OC1_SetConfig+0x10c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00f      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a2c      	ldr	r2, [pc, #176]	; (800ad2c <TIM_OC1_SetConfig+0x110>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00b      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a2b      	ldr	r2, [pc, #172]	; (800ad30 <TIM_OC1_SetConfig+0x114>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d007      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a2a      	ldr	r2, [pc, #168]	; (800ad34 <TIM_OC1_SetConfig+0x118>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a29      	ldr	r2, [pc, #164]	; (800ad38 <TIM_OC1_SetConfig+0x11c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d10c      	bne.n	800acb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f023 0308 	bic.w	r3, r3, #8
 800ac9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f023 0304 	bic.w	r3, r3, #4
 800acb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a1c      	ldr	r2, [pc, #112]	; (800ad28 <TIM_OC1_SetConfig+0x10c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00f      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a1b      	ldr	r2, [pc, #108]	; (800ad2c <TIM_OC1_SetConfig+0x110>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00b      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a1a      	ldr	r2, [pc, #104]	; (800ad30 <TIM_OC1_SetConfig+0x114>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d007      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a19      	ldr	r2, [pc, #100]	; (800ad34 <TIM_OC1_SetConfig+0x118>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d003      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <TIM_OC1_SetConfig+0x11c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d111      	bne.n	800acfe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ace0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ace8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	621a      	str	r2, [r3, #32]
}
 800ad18:	bf00      	nop
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	fffeff8f 	.word	0xfffeff8f
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40010400 	.word	0x40010400
 800ad30:	40014000 	.word	0x40014000
 800ad34:	40014400 	.word	0x40014400
 800ad38:	40014800 	.word	0x40014800

0800ad3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4b34      	ldr	r3, [pc, #208]	; (800ae38 <TIM_OC2_SetConfig+0xfc>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 0320 	bic.w	r3, r3, #32
 800ad86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a29      	ldr	r2, [pc, #164]	; (800ae3c <TIM_OC2_SetConfig+0x100>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d003      	beq.n	800ada4 <TIM_OC2_SetConfig+0x68>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a28      	ldr	r2, [pc, #160]	; (800ae40 <TIM_OC2_SetConfig+0x104>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d10d      	bne.n	800adc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a1e      	ldr	r2, [pc, #120]	; (800ae3c <TIM_OC2_SetConfig+0x100>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d00f      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a1d      	ldr	r2, [pc, #116]	; (800ae40 <TIM_OC2_SetConfig+0x104>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d00b      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a1c      	ldr	r2, [pc, #112]	; (800ae44 <TIM_OC2_SetConfig+0x108>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d007      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <TIM_OC2_SetConfig+0x10c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d003      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a1a      	ldr	r2, [pc, #104]	; (800ae4c <TIM_OC2_SetConfig+0x110>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d113      	bne.n	800ae10 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	621a      	str	r2, [r3, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	feff8fff 	.word	0xfeff8fff
 800ae3c:	40010000 	.word	0x40010000
 800ae40:	40010400 	.word	0x40010400
 800ae44:	40014000 	.word	0x40014000
 800ae48:	40014400 	.word	0x40014400
 800ae4c:	40014800 	.word	0x40014800

0800ae50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4b33      	ldr	r3, [pc, #204]	; (800af48 <TIM_OC3_SetConfig+0xf8>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0303 	bic.w	r3, r3, #3
 800ae86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a28      	ldr	r2, [pc, #160]	; (800af4c <TIM_OC3_SetConfig+0xfc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d003      	beq.n	800aeb6 <TIM_OC3_SetConfig+0x66>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a27      	ldr	r2, [pc, #156]	; (800af50 <TIM_OC3_SetConfig+0x100>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d10d      	bne.n	800aed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	021b      	lsls	r3, r3, #8
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a1d      	ldr	r2, [pc, #116]	; (800af4c <TIM_OC3_SetConfig+0xfc>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d00f      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a1c      	ldr	r2, [pc, #112]	; (800af50 <TIM_OC3_SetConfig+0x100>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00b      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <TIM_OC3_SetConfig+0x104>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d007      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a1a      	ldr	r2, [pc, #104]	; (800af58 <TIM_OC3_SetConfig+0x108>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d003      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a19      	ldr	r2, [pc, #100]	; (800af5c <TIM_OC3_SetConfig+0x10c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d113      	bne.n	800af22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	621a      	str	r2, [r3, #32]
}
 800af3c:	bf00      	nop
 800af3e:	371c      	adds	r7, #28
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	fffeff8f 	.word	0xfffeff8f
 800af4c:	40010000 	.word	0x40010000
 800af50:	40010400 	.word	0x40010400
 800af54:	40014000 	.word	0x40014000
 800af58:	40014400 	.word	0x40014400
 800af5c:	40014800 	.word	0x40014800

0800af60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4b24      	ldr	r3, [pc, #144]	; (800b01c <TIM_OC4_SetConfig+0xbc>)
 800af8c:	4013      	ands	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	021b      	lsls	r3, r3, #8
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	031b      	lsls	r3, r3, #12
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a19      	ldr	r2, [pc, #100]	; (800b020 <TIM_OC4_SetConfig+0xc0>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00f      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a18      	ldr	r2, [pc, #96]	; (800b024 <TIM_OC4_SetConfig+0xc4>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00b      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a17      	ldr	r2, [pc, #92]	; (800b028 <TIM_OC4_SetConfig+0xc8>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d007      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a16      	ldr	r2, [pc, #88]	; (800b02c <TIM_OC4_SetConfig+0xcc>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d003      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a15      	ldr	r2, [pc, #84]	; (800b030 <TIM_OC4_SetConfig+0xd0>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d109      	bne.n	800aff4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	019b      	lsls	r3, r3, #6
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	621a      	str	r2, [r3, #32]
}
 800b00e:	bf00      	nop
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	feff8fff 	.word	0xfeff8fff
 800b020:	40010000 	.word	0x40010000
 800b024:	40010400 	.word	0x40010400
 800b028:	40014000 	.word	0x40014000
 800b02c:	40014400 	.word	0x40014400
 800b030:	40014800 	.word	0x40014800

0800b034 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4b21      	ldr	r3, [pc, #132]	; (800b0e4 <TIM_OC5_SetConfig+0xb0>)
 800b060:	4013      	ands	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	041b      	lsls	r3, r3, #16
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a18      	ldr	r2, [pc, #96]	; (800b0e8 <TIM_OC5_SetConfig+0xb4>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d00f      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a17      	ldr	r2, [pc, #92]	; (800b0ec <TIM_OC5_SetConfig+0xb8>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d00b      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a16      	ldr	r2, [pc, #88]	; (800b0f0 <TIM_OC5_SetConfig+0xbc>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d007      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <TIM_OC5_SetConfig+0xc0>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d003      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a14      	ldr	r2, [pc, #80]	; (800b0f8 <TIM_OC5_SetConfig+0xc4>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d109      	bne.n	800b0be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	621a      	str	r2, [r3, #32]
}
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	fffeff8f 	.word	0xfffeff8f
 800b0e8:	40010000 	.word	0x40010000
 800b0ec:	40010400 	.word	0x40010400
 800b0f0:	40014000 	.word	0x40014000
 800b0f4:	40014400 	.word	0x40014400
 800b0f8:	40014800 	.word	0x40014800

0800b0fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4b22      	ldr	r3, [pc, #136]	; (800b1b0 <TIM_OC6_SetConfig+0xb4>)
 800b128:	4013      	ands	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	4313      	orrs	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b13e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	051b      	lsls	r3, r3, #20
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	4313      	orrs	r3, r2
 800b14a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a19      	ldr	r2, [pc, #100]	; (800b1b4 <TIM_OC6_SetConfig+0xb8>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00f      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a18      	ldr	r2, [pc, #96]	; (800b1b8 <TIM_OC6_SetConfig+0xbc>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00b      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a17      	ldr	r2, [pc, #92]	; (800b1bc <TIM_OC6_SetConfig+0xc0>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d007      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <TIM_OC6_SetConfig+0xc4>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <TIM_OC6_SetConfig+0xc8>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d109      	bne.n	800b188 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b17a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	029b      	lsls	r3, r3, #10
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	feff8fff 	.word	0xfeff8fff
 800b1b4:	40010000 	.word	0x40010000
 800b1b8:	40010400 	.word	0x40010400
 800b1bc:	40014000 	.word	0x40014000
 800b1c0:	40014400 	.word	0x40014400
 800b1c4:	40014800 	.word	0x40014800

0800b1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f023 0201 	bic.w	r2, r3, #1
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f023 030a 	bic.w	r3, r3, #10
 800b204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b226:	b480      	push	{r7}
 800b228:	b087      	sub	sp, #28
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f023 0210 	bic.w	r2, r3, #16
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	031b      	lsls	r3, r3, #12
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	4313      	orrs	r3, r2
 800b25a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	621a      	str	r2, [r3, #32]
}
 800b27a:	bf00      	nop
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
	...

0800b288 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <TIM_ITRx_SetConfig+0x38>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f043 0307 	orr.w	r3, r3, #7
 800b2aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	609a      	str	r2, [r3, #8]
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	ffcfff8f 	.word	0xffcfff8f

0800b2c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	021a      	lsls	r2, r3, #8
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	609a      	str	r2, [r3, #8]
}
 800b2f8:	bf00      	nop
 800b2fa:	371c      	adds	r7, #28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b314:	2b01      	cmp	r3, #1
 800b316:	d101      	bne.n	800b31c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b318:	2302      	movs	r3, #2
 800b31a:	e06d      	b.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2202      	movs	r2, #2
 800b328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a30      	ldr	r2, [pc, #192]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d004      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a2f      	ldr	r2, [pc, #188]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d108      	bne.n	800b362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	4313      	orrs	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a20      	ldr	r2, [pc, #128]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d022      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38e:	d01d      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a1d      	ldr	r2, [pc, #116]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d018      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a1c      	ldr	r2, [pc, #112]	; (800b410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d013      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a1a      	ldr	r2, [pc, #104]	; (800b414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00e      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a15      	ldr	r2, [pc, #84]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d009      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a16      	ldr	r2, [pc, #88]	; (800b418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d004      	beq.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a15      	ldr	r2, [pc, #84]	; (800b41c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d10c      	bne.n	800b3e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	40010000 	.word	0x40010000
 800b408:	40010400 	.word	0x40010400
 800b40c:	40000400 	.word	0x40000400
 800b410:	40000800 	.word	0x40000800
 800b414:	40000c00 	.word	0x40000c00
 800b418:	40001800 	.word	0x40001800
 800b41c:	40014000 	.word	0x40014000

0800b420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e042      	b.n	800b4f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b474:	2b00      	cmp	r3, #0
 800b476:	d106      	bne.n	800b486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7f6 fc11 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2224      	movs	r2, #36	; 0x24
 800b48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0201 	bic.w	r2, r2, #1
 800b49c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 fc94 	bl	800bdcc <UART_SetConfig>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d101      	bne.n	800b4ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e022      	b.n	800b4f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 f9f0 	bl	800c89c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f042 0201 	orr.w	r2, r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 fa77 	bl	800c9e0 <UART_CheckIdleState>
 800b4f2:	4603      	mov	r3, r0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08a      	sub	sp, #40	; 0x28
 800b500:	af02      	add	r7, sp, #8
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	603b      	str	r3, [r7, #0]
 800b508:	4613      	mov	r3, r2
 800b50a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b512:	2b20      	cmp	r3, #32
 800b514:	d17b      	bne.n	800b60e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <HAL_UART_Transmit+0x26>
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e074      	b.n	800b610 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2221      	movs	r2, #33	; 0x21
 800b532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b536:	f7f6 fee1 	bl	80022fc <HAL_GetTick>
 800b53a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	88fa      	ldrh	r2, [r7, #6]
 800b540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	88fa      	ldrh	r2, [r7, #6]
 800b548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	d108      	bne.n	800b568 <HAL_UART_Transmit+0x6c>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d104      	bne.n	800b568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	e003      	b.n	800b570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b570:	e030      	b.n	800b5d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2200      	movs	r2, #0
 800b57a:	2180      	movs	r1, #128	; 0x80
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f001 fad9 	bl	800cb34 <UART_WaitOnFlagUntilTimeout>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2220      	movs	r2, #32
 800b58c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e03d      	b.n	800b610 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10b      	bne.n	800b5b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	61bb      	str	r3, [r7, #24]
 800b5b0:	e007      	b.n	800b5c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1c8      	bne.n	800b572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2140      	movs	r1, #64	; 0x40
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f001 faa2 	bl	800cb34 <UART_WaitOnFlagUntilTimeout>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b5fe:	2303      	movs	r3, #3
 800b600:	e006      	b.n	800b610 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2220      	movs	r2, #32
 800b606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e000      	b.n	800b610 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b60e:	2302      	movs	r3, #2
  }
}
 800b610:	4618      	mov	r0, r3
 800b612:	3720      	adds	r7, #32
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b0ba      	sub	sp, #232	; 0xe8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b63e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b642:	f640 030f 	movw	r3, #2063	; 0x80f
 800b646:	4013      	ands	r3, r2
 800b648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b64c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11b      	bne.n	800b68c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b658:	f003 0320 	and.w	r3, r3, #32
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d015      	beq.n	800b68c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b664:	f003 0320 	and.w	r3, r3, #32
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d105      	bne.n	800b678 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b66c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d009      	beq.n	800b68c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f000 8377 	beq.w	800bd70 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	4798      	blx	r3
      }
      return;
 800b68a:	e371      	b.n	800bd70 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b68c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8123 	beq.w	800b8dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b69a:	4b8d      	ldr	r3, [pc, #564]	; (800b8d0 <HAL_UART_IRQHandler+0x2b8>)
 800b69c:	4013      	ands	r3, r2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d106      	bne.n	800b6b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b6a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b6a6:	4b8b      	ldr	r3, [pc, #556]	; (800b8d4 <HAL_UART_IRQHandler+0x2bc>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 8116 	beq.w	800b8dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d011      	beq.n	800b6e0 <HAL_UART_IRQHandler+0xc8>
 800b6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00b      	beq.n	800b6e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d6:	f043 0201 	orr.w	r2, r3, #1
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d011      	beq.n	800b710 <HAL_UART_IRQHandler+0xf8>
 800b6ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00b      	beq.n	800b710 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b706:	f043 0204 	orr.w	r2, r3, #4
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d011      	beq.n	800b740 <HAL_UART_IRQHandler+0x128>
 800b71c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00b      	beq.n	800b740 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2204      	movs	r2, #4
 800b72e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b736:	f043 0202 	orr.w	r2, r3, #2
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b744:	f003 0308 	and.w	r3, r3, #8
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d017      	beq.n	800b77c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b750:	f003 0320 	and.w	r3, r3, #32
 800b754:	2b00      	cmp	r3, #0
 800b756:	d105      	bne.n	800b764 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b75c:	4b5c      	ldr	r3, [pc, #368]	; (800b8d0 <HAL_UART_IRQHandler+0x2b8>)
 800b75e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00b      	beq.n	800b77c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2208      	movs	r2, #8
 800b76a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b772:	f043 0208 	orr.w	r2, r3, #8
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b784:	2b00      	cmp	r3, #0
 800b786:	d012      	beq.n	800b7ae <HAL_UART_IRQHandler+0x196>
 800b788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b78c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00c      	beq.n	800b7ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b79c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a4:	f043 0220 	orr.w	r2, r3, #32
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 82dd 	beq.w	800bd74 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7be:	f003 0320 	and.w	r3, r3, #32
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d013      	beq.n	800b7ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d105      	bne.n	800b7de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d007      	beq.n	800b7ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b40      	cmp	r3, #64	; 0x40
 800b804:	d005      	beq.n	800b812 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b80a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d054      	beq.n	800b8bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f001 f9f6 	bl	800cc04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b822:	2b40      	cmp	r3, #64	; 0x40
 800b824:	d146      	bne.n	800b8b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b83c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b85e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b862:	e841 2300 	strex	r3, r2, [r1]
 800b866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b86a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1d9      	bne.n	800b826 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d017      	beq.n	800b8ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b882:	4a15      	ldr	r2, [pc, #84]	; (800b8d8 <HAL_UART_IRQHandler+0x2c0>)
 800b884:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f9 f835 	bl	80048fc <HAL_DMA_Abort_IT>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d019      	beq.n	800b8cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8aa:	e00f      	b.n	800b8cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fa77 	bl	800bda0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b2:	e00b      	b.n	800b8cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fa73 	bl	800bda0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ba:	e007      	b.n	800b8cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fa6f 	bl	800bda0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b8ca:	e253      	b.n	800bd74 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8cc:	bf00      	nop
    return;
 800b8ce:	e251      	b.n	800bd74 <HAL_UART_IRQHandler+0x75c>
 800b8d0:	10000001 	.word	0x10000001
 800b8d4:	04000120 	.word	0x04000120
 800b8d8:	0800ccd1 	.word	0x0800ccd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	f040 81e7 	bne.w	800bcb4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ea:	f003 0310 	and.w	r3, r3, #16
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 81e0 	beq.w	800bcb4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f8:	f003 0310 	and.w	r3, r3, #16
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 81d9 	beq.w	800bcb4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2210      	movs	r2, #16
 800b908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b914:	2b40      	cmp	r3, #64	; 0x40
 800b916:	f040 8151 	bne.w	800bbbc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a96      	ldr	r2, [pc, #600]	; (800bb7c <HAL_UART_IRQHandler+0x564>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d068      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a93      	ldr	r2, [pc, #588]	; (800bb80 <HAL_UART_IRQHandler+0x568>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d061      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a91      	ldr	r2, [pc, #580]	; (800bb84 <HAL_UART_IRQHandler+0x56c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d05a      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a8e      	ldr	r2, [pc, #568]	; (800bb88 <HAL_UART_IRQHandler+0x570>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d053      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a8c      	ldr	r2, [pc, #560]	; (800bb8c <HAL_UART_IRQHandler+0x574>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d04c      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a89      	ldr	r2, [pc, #548]	; (800bb90 <HAL_UART_IRQHandler+0x578>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d045      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a87      	ldr	r2, [pc, #540]	; (800bb94 <HAL_UART_IRQHandler+0x57c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d03e      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a84      	ldr	r2, [pc, #528]	; (800bb98 <HAL_UART_IRQHandler+0x580>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d037      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a82      	ldr	r2, [pc, #520]	; (800bb9c <HAL_UART_IRQHandler+0x584>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d030      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a7f      	ldr	r2, [pc, #508]	; (800bba0 <HAL_UART_IRQHandler+0x588>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d029      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a7d      	ldr	r2, [pc, #500]	; (800bba4 <HAL_UART_IRQHandler+0x58c>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d022      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a7a      	ldr	r2, [pc, #488]	; (800bba8 <HAL_UART_IRQHandler+0x590>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d01b      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a78      	ldr	r2, [pc, #480]	; (800bbac <HAL_UART_IRQHandler+0x594>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d014      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a75      	ldr	r2, [pc, #468]	; (800bbb0 <HAL_UART_IRQHandler+0x598>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00d      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a73      	ldr	r2, [pc, #460]	; (800bbb4 <HAL_UART_IRQHandler+0x59c>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d006      	beq.n	800b9fa <HAL_UART_IRQHandler+0x3e2>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a70      	ldr	r2, [pc, #448]	; (800bbb8 <HAL_UART_IRQHandler+0x5a0>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d106      	bne.n	800ba08 <HAL_UART_IRQHandler+0x3f0>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	e005      	b.n	800ba14 <HAL_UART_IRQHandler+0x3fc>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 81ab 	beq.w	800bd78 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	f080 81a3 	bcs.w	800bd78 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba48:	f000 8087 	beq.w	800bb5a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	461a      	mov	r2, r3
 800ba72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1da      	bne.n	800ba4c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800baa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baa8:	f023 0301 	bic.w	r3, r3, #1
 800baac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3308      	adds	r3, #8
 800bab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800baba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800babe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bacc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e1      	bne.n	800ba96 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3308      	adds	r3, #8
 800baf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800baf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800baf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bafc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bafe:	e841 2300 	strex	r3, r2, [r1]
 800bb02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e3      	bne.n	800bad2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb28:	f023 0310 	bic.w	r3, r3, #16
 800bb2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e4      	bne.n	800bb18 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7f8 fbb3 	bl	80042c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f91d 	bl	800bdb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb7a:	e0fd      	b.n	800bd78 <HAL_UART_IRQHandler+0x760>
 800bb7c:	40020010 	.word	0x40020010
 800bb80:	40020028 	.word	0x40020028
 800bb84:	40020040 	.word	0x40020040
 800bb88:	40020058 	.word	0x40020058
 800bb8c:	40020070 	.word	0x40020070
 800bb90:	40020088 	.word	0x40020088
 800bb94:	400200a0 	.word	0x400200a0
 800bb98:	400200b8 	.word	0x400200b8
 800bb9c:	40020410 	.word	0x40020410
 800bba0:	40020428 	.word	0x40020428
 800bba4:	40020440 	.word	0x40020440
 800bba8:	40020458 	.word	0x40020458
 800bbac:	40020470 	.word	0x40020470
 800bbb0:	40020488 	.word	0x40020488
 800bbb4:	400204a0 	.word	0x400204a0
 800bbb8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 80cf 	beq.w	800bd7c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bbde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 80ca 	beq.w	800bd7c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	461a      	mov	r2, r3
 800bc06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc0a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e4      	bne.n	800bbe8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3308      	adds	r3, #8
 800bc24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	e853 3f00 	ldrex	r3, [r3]
 800bc2c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc2e:	6a3a      	ldr	r2, [r7, #32]
 800bc30:	4b55      	ldr	r3, [pc, #340]	; (800bd88 <HAL_UART_IRQHandler+0x770>)
 800bc32:	4013      	ands	r3, r2
 800bc34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc42:	633a      	str	r2, [r7, #48]	; 0x30
 800bc44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e3      	bne.n	800bc1e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2220      	movs	r2, #32
 800bc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f023 0310 	bic.w	r3, r3, #16
 800bc7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc8c:	61fb      	str	r3, [r7, #28]
 800bc8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc90:	69b9      	ldr	r1, [r7, #24]
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	e841 2300 	strex	r3, r2, [r1]
 800bc98:	617b      	str	r3, [r7, #20]
   return(result);
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1e4      	bne.n	800bc6a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f881 	bl	800bdb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcb2:	e063      	b.n	800bd7c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00e      	beq.n	800bcde <HAL_UART_IRQHandler+0x6c6>
 800bcc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d008      	beq.n	800bcde <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bcd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f001 f83b 	bl	800cd52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcdc:	e051      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d014      	beq.n	800bd14 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bcea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d105      	bne.n	800bd02 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bcf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d008      	beq.n	800bd14 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d03a      	beq.n	800bd80 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	4798      	blx	r3
    }
    return;
 800bd12:	e035      	b.n	800bd80 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d009      	beq.n	800bd34 <HAL_UART_IRQHandler+0x71c>
 800bd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d003      	beq.n	800bd34 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 ffe5 	bl	800ccfc <UART_EndTransmit_IT>
    return;
 800bd32:	e026      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d009      	beq.n	800bd54 <HAL_UART_IRQHandler+0x73c>
 800bd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 f814 	bl	800cd7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd52:	e016      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d010      	beq.n	800bd82 <HAL_UART_IRQHandler+0x76a>
 800bd60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	da0c      	bge.n	800bd82 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fffc 	bl	800cd66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd6e:	e008      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
      return;
 800bd70:	bf00      	nop
 800bd72:	e006      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
    return;
 800bd74:	bf00      	nop
 800bd76:	e004      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
      return;
 800bd78:	bf00      	nop
 800bd7a:	e002      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
      return;
 800bd7c:	bf00      	nop
 800bd7e:	e000      	b.n	800bd82 <HAL_UART_IRQHandler+0x76a>
    return;
 800bd80:	bf00      	nop
  }
}
 800bd82:	37e8      	adds	r7, #232	; 0xe8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	effffffe 	.word	0xeffffffe

0800bd8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bdcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bdd0:	b092      	sub	sp, #72	; 0x48
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	431a      	orrs	r2, r3
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4bbe      	ldr	r3, [pc, #760]	; (800c0f4 <UART_SetConfig+0x328>)
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be04:	430b      	orrs	r3, r1
 800be06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	68da      	ldr	r2, [r3, #12]
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4ab3      	ldr	r2, [pc, #716]	; (800c0f8 <UART_SetConfig+0x32c>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d004      	beq.n	800be38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be34:	4313      	orrs	r3, r2
 800be36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	4baf      	ldr	r3, [pc, #700]	; (800c0fc <UART_SetConfig+0x330>)
 800be40:	4013      	ands	r3, r2
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	6812      	ldr	r2, [r2, #0]
 800be46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be48:	430b      	orrs	r3, r1
 800be4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be52:	f023 010f 	bic.w	r1, r3, #15
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4aa6      	ldr	r2, [pc, #664]	; (800c100 <UART_SetConfig+0x334>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d177      	bne.n	800bf5c <UART_SetConfig+0x190>
 800be6c:	4ba5      	ldr	r3, [pc, #660]	; (800c104 <UART_SetConfig+0x338>)
 800be6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be74:	2b28      	cmp	r3, #40	; 0x28
 800be76:	d86d      	bhi.n	800bf54 <UART_SetConfig+0x188>
 800be78:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <UART_SetConfig+0xb4>)
 800be7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7e:	bf00      	nop
 800be80:	0800bf25 	.word	0x0800bf25
 800be84:	0800bf55 	.word	0x0800bf55
 800be88:	0800bf55 	.word	0x0800bf55
 800be8c:	0800bf55 	.word	0x0800bf55
 800be90:	0800bf55 	.word	0x0800bf55
 800be94:	0800bf55 	.word	0x0800bf55
 800be98:	0800bf55 	.word	0x0800bf55
 800be9c:	0800bf55 	.word	0x0800bf55
 800bea0:	0800bf2d 	.word	0x0800bf2d
 800bea4:	0800bf55 	.word	0x0800bf55
 800bea8:	0800bf55 	.word	0x0800bf55
 800beac:	0800bf55 	.word	0x0800bf55
 800beb0:	0800bf55 	.word	0x0800bf55
 800beb4:	0800bf55 	.word	0x0800bf55
 800beb8:	0800bf55 	.word	0x0800bf55
 800bebc:	0800bf55 	.word	0x0800bf55
 800bec0:	0800bf35 	.word	0x0800bf35
 800bec4:	0800bf55 	.word	0x0800bf55
 800bec8:	0800bf55 	.word	0x0800bf55
 800becc:	0800bf55 	.word	0x0800bf55
 800bed0:	0800bf55 	.word	0x0800bf55
 800bed4:	0800bf55 	.word	0x0800bf55
 800bed8:	0800bf55 	.word	0x0800bf55
 800bedc:	0800bf55 	.word	0x0800bf55
 800bee0:	0800bf3d 	.word	0x0800bf3d
 800bee4:	0800bf55 	.word	0x0800bf55
 800bee8:	0800bf55 	.word	0x0800bf55
 800beec:	0800bf55 	.word	0x0800bf55
 800bef0:	0800bf55 	.word	0x0800bf55
 800bef4:	0800bf55 	.word	0x0800bf55
 800bef8:	0800bf55 	.word	0x0800bf55
 800befc:	0800bf55 	.word	0x0800bf55
 800bf00:	0800bf45 	.word	0x0800bf45
 800bf04:	0800bf55 	.word	0x0800bf55
 800bf08:	0800bf55 	.word	0x0800bf55
 800bf0c:	0800bf55 	.word	0x0800bf55
 800bf10:	0800bf55 	.word	0x0800bf55
 800bf14:	0800bf55 	.word	0x0800bf55
 800bf18:	0800bf55 	.word	0x0800bf55
 800bf1c:	0800bf55 	.word	0x0800bf55
 800bf20:	0800bf4d 	.word	0x0800bf4d
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e222      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e21e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf34:	2308      	movs	r3, #8
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e21a      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e216      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf44:	2320      	movs	r3, #32
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e212      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e20e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e20a      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a69      	ldr	r2, [pc, #420]	; (800c108 <UART_SetConfig+0x33c>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d130      	bne.n	800bfc8 <UART_SetConfig+0x1fc>
 800bf66:	4b67      	ldr	r3, [pc, #412]	; (800c104 <UART_SetConfig+0x338>)
 800bf68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6a:	f003 0307 	and.w	r3, r3, #7
 800bf6e:	2b05      	cmp	r3, #5
 800bf70:	d826      	bhi.n	800bfc0 <UART_SetConfig+0x1f4>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <UART_SetConfig+0x1ac>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf91 	.word	0x0800bf91
 800bf7c:	0800bf99 	.word	0x0800bf99
 800bf80:	0800bfa1 	.word	0x0800bfa1
 800bf84:	0800bfa9 	.word	0x0800bfa9
 800bf88:	0800bfb1 	.word	0x0800bfb1
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e1ec      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bf98:	2304      	movs	r3, #4
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e1e8      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e1e4      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e1e0      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e1dc      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e1d8      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bfc0:	2380      	movs	r3, #128	; 0x80
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e1d4      	b.n	800c372 <UART_SetConfig+0x5a6>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a4f      	ldr	r2, [pc, #316]	; (800c10c <UART_SetConfig+0x340>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d130      	bne.n	800c034 <UART_SetConfig+0x268>
 800bfd2:	4b4c      	ldr	r3, [pc, #304]	; (800c104 <UART_SetConfig+0x338>)
 800bfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd6:	f003 0307 	and.w	r3, r3, #7
 800bfda:	2b05      	cmp	r3, #5
 800bfdc:	d826      	bhi.n	800c02c <UART_SetConfig+0x260>
 800bfde:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <UART_SetConfig+0x218>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800bffd 	.word	0x0800bffd
 800bfe8:	0800c005 	.word	0x0800c005
 800bfec:	0800c00d 	.word	0x0800c00d
 800bff0:	0800c015 	.word	0x0800c015
 800bff4:	0800c01d 	.word	0x0800c01d
 800bff8:	0800c025 	.word	0x0800c025
 800bffc:	2300      	movs	r3, #0
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e1b6      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c004:	2304      	movs	r3, #4
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e1b2      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c00c:	2308      	movs	r3, #8
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e1ae      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c014:	2310      	movs	r3, #16
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e1aa      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c01c:	2320      	movs	r3, #32
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e1a6      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c024:	2340      	movs	r3, #64	; 0x40
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02a:	e1a2      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c032:	e19e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a35      	ldr	r2, [pc, #212]	; (800c110 <UART_SetConfig+0x344>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d130      	bne.n	800c0a0 <UART_SetConfig+0x2d4>
 800c03e:	4b31      	ldr	r3, [pc, #196]	; (800c104 <UART_SetConfig+0x338>)
 800c040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b05      	cmp	r3, #5
 800c048:	d826      	bhi.n	800c098 <UART_SetConfig+0x2cc>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <UART_SetConfig+0x284>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c069 	.word	0x0800c069
 800c054:	0800c071 	.word	0x0800c071
 800c058:	0800c079 	.word	0x0800c079
 800c05c:	0800c081 	.word	0x0800c081
 800c060:	0800c089 	.word	0x0800c089
 800c064:	0800c091 	.word	0x0800c091
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e180      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c070:	2304      	movs	r3, #4
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e17c      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c078:	2308      	movs	r3, #8
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07e:	e178      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c080:	2310      	movs	r3, #16
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c086:	e174      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c088:	2320      	movs	r3, #32
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08e:	e170      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c096:	e16c      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c098:	2380      	movs	r3, #128	; 0x80
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c09e:	e168      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a1b      	ldr	r2, [pc, #108]	; (800c114 <UART_SetConfig+0x348>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d142      	bne.n	800c130 <UART_SetConfig+0x364>
 800c0aa:	4b16      	ldr	r3, [pc, #88]	; (800c104 <UART_SetConfig+0x338>)
 800c0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d838      	bhi.n	800c128 <UART_SetConfig+0x35c>
 800c0b6:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <UART_SetConfig+0x2f0>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c0d5 	.word	0x0800c0d5
 800c0c0:	0800c0dd 	.word	0x0800c0dd
 800c0c4:	0800c0e5 	.word	0x0800c0e5
 800c0c8:	0800c0ed 	.word	0x0800c0ed
 800c0cc:	0800c119 	.word	0x0800c119
 800c0d0:	0800c121 	.word	0x0800c121
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0da:	e14a      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c0dc:	2304      	movs	r3, #4
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e2:	e146      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c0e4:	2308      	movs	r3, #8
 800c0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ea:	e142      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c0ec:	2310      	movs	r3, #16
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f2:	e13e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c0f4:	cfff69f3 	.word	0xcfff69f3
 800c0f8:	58000c00 	.word	0x58000c00
 800c0fc:	11fff4ff 	.word	0x11fff4ff
 800c100:	40011000 	.word	0x40011000
 800c104:	58024400 	.word	0x58024400
 800c108:	40004400 	.word	0x40004400
 800c10c:	40004800 	.word	0x40004800
 800c110:	40004c00 	.word	0x40004c00
 800c114:	40005000 	.word	0x40005000
 800c118:	2320      	movs	r3, #32
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11e:	e128      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c120:	2340      	movs	r3, #64	; 0x40
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c126:	e124      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c128:	2380      	movs	r3, #128	; 0x80
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12e:	e120      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4acb      	ldr	r2, [pc, #812]	; (800c464 <UART_SetConfig+0x698>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d176      	bne.n	800c228 <UART_SetConfig+0x45c>
 800c13a:	4bcb      	ldr	r3, [pc, #812]	; (800c468 <UART_SetConfig+0x69c>)
 800c13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c142:	2b28      	cmp	r3, #40	; 0x28
 800c144:	d86c      	bhi.n	800c220 <UART_SetConfig+0x454>
 800c146:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <UART_SetConfig+0x380>)
 800c148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14c:	0800c1f1 	.word	0x0800c1f1
 800c150:	0800c221 	.word	0x0800c221
 800c154:	0800c221 	.word	0x0800c221
 800c158:	0800c221 	.word	0x0800c221
 800c15c:	0800c221 	.word	0x0800c221
 800c160:	0800c221 	.word	0x0800c221
 800c164:	0800c221 	.word	0x0800c221
 800c168:	0800c221 	.word	0x0800c221
 800c16c:	0800c1f9 	.word	0x0800c1f9
 800c170:	0800c221 	.word	0x0800c221
 800c174:	0800c221 	.word	0x0800c221
 800c178:	0800c221 	.word	0x0800c221
 800c17c:	0800c221 	.word	0x0800c221
 800c180:	0800c221 	.word	0x0800c221
 800c184:	0800c221 	.word	0x0800c221
 800c188:	0800c221 	.word	0x0800c221
 800c18c:	0800c201 	.word	0x0800c201
 800c190:	0800c221 	.word	0x0800c221
 800c194:	0800c221 	.word	0x0800c221
 800c198:	0800c221 	.word	0x0800c221
 800c19c:	0800c221 	.word	0x0800c221
 800c1a0:	0800c221 	.word	0x0800c221
 800c1a4:	0800c221 	.word	0x0800c221
 800c1a8:	0800c221 	.word	0x0800c221
 800c1ac:	0800c209 	.word	0x0800c209
 800c1b0:	0800c221 	.word	0x0800c221
 800c1b4:	0800c221 	.word	0x0800c221
 800c1b8:	0800c221 	.word	0x0800c221
 800c1bc:	0800c221 	.word	0x0800c221
 800c1c0:	0800c221 	.word	0x0800c221
 800c1c4:	0800c221 	.word	0x0800c221
 800c1c8:	0800c221 	.word	0x0800c221
 800c1cc:	0800c211 	.word	0x0800c211
 800c1d0:	0800c221 	.word	0x0800c221
 800c1d4:	0800c221 	.word	0x0800c221
 800c1d8:	0800c221 	.word	0x0800c221
 800c1dc:	0800c221 	.word	0x0800c221
 800c1e0:	0800c221 	.word	0x0800c221
 800c1e4:	0800c221 	.word	0x0800c221
 800c1e8:	0800c221 	.word	0x0800c221
 800c1ec:	0800c219 	.word	0x0800c219
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e0bc      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c1f8:	2304      	movs	r3, #4
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e0b8      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c200:	2308      	movs	r3, #8
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e0b4      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c208:	2310      	movs	r3, #16
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e0b0      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c210:	2320      	movs	r3, #32
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c216:	e0ac      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c218:	2340      	movs	r3, #64	; 0x40
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21e:	e0a8      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c220:	2380      	movs	r3, #128	; 0x80
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c226:	e0a4      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a8f      	ldr	r2, [pc, #572]	; (800c46c <UART_SetConfig+0x6a0>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d130      	bne.n	800c294 <UART_SetConfig+0x4c8>
 800c232:	4b8d      	ldr	r3, [pc, #564]	; (800c468 <UART_SetConfig+0x69c>)
 800c234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d826      	bhi.n	800c28c <UART_SetConfig+0x4c0>
 800c23e:	a201      	add	r2, pc, #4	; (adr r2, 800c244 <UART_SetConfig+0x478>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c25d 	.word	0x0800c25d
 800c248:	0800c265 	.word	0x0800c265
 800c24c:	0800c26d 	.word	0x0800c26d
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c27d 	.word	0x0800c27d
 800c258:	0800c285 	.word	0x0800c285
 800c25c:	2300      	movs	r3, #0
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e086      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c264:	2304      	movs	r3, #4
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e082      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c26c:	2308      	movs	r3, #8
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e07e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c274:	2310      	movs	r3, #16
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e07a      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c27c:	2320      	movs	r3, #32
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e076      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c284:	2340      	movs	r3, #64	; 0x40
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28a:	e072      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c28c:	2380      	movs	r3, #128	; 0x80
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c292:	e06e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a75      	ldr	r2, [pc, #468]	; (800c470 <UART_SetConfig+0x6a4>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d130      	bne.n	800c300 <UART_SetConfig+0x534>
 800c29e:	4b72      	ldr	r3, [pc, #456]	; (800c468 <UART_SetConfig+0x69c>)
 800c2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a2:	f003 0307 	and.w	r3, r3, #7
 800c2a6:	2b05      	cmp	r3, #5
 800c2a8:	d826      	bhi.n	800c2f8 <UART_SetConfig+0x52c>
 800c2aa:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <UART_SetConfig+0x4e4>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c2c9 	.word	0x0800c2c9
 800c2b4:	0800c2d1 	.word	0x0800c2d1
 800c2b8:	0800c2d9 	.word	0x0800c2d9
 800c2bc:	0800c2e1 	.word	0x0800c2e1
 800c2c0:	0800c2e9 	.word	0x0800c2e9
 800c2c4:	0800c2f1 	.word	0x0800c2f1
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e050      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c2d0:	2304      	movs	r3, #4
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e04c      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c2d8:	2308      	movs	r3, #8
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2de:	e048      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c2e0:	2310      	movs	r3, #16
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e044      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c2e8:	2320      	movs	r3, #32
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e040      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c2f0:	2340      	movs	r3, #64	; 0x40
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f6:	e03c      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c2f8:	2380      	movs	r3, #128	; 0x80
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fe:	e038      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a5b      	ldr	r2, [pc, #364]	; (800c474 <UART_SetConfig+0x6a8>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d130      	bne.n	800c36c <UART_SetConfig+0x5a0>
 800c30a:	4b57      	ldr	r3, [pc, #348]	; (800c468 <UART_SetConfig+0x69c>)
 800c30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	2b05      	cmp	r3, #5
 800c314:	d826      	bhi.n	800c364 <UART_SetConfig+0x598>
 800c316:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <UART_SetConfig+0x550>)
 800c318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31c:	0800c335 	.word	0x0800c335
 800c320:	0800c33d 	.word	0x0800c33d
 800c324:	0800c345 	.word	0x0800c345
 800c328:	0800c34d 	.word	0x0800c34d
 800c32c:	0800c355 	.word	0x0800c355
 800c330:	0800c35d 	.word	0x0800c35d
 800c334:	2302      	movs	r3, #2
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e01a      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c33c:	2304      	movs	r3, #4
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c342:	e016      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c344:	2308      	movs	r3, #8
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34a:	e012      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c34c:	2310      	movs	r3, #16
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c352:	e00e      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c354:	2320      	movs	r3, #32
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35a:	e00a      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c35c:	2340      	movs	r3, #64	; 0x40
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c362:	e006      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c364:	2380      	movs	r3, #128	; 0x80
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36a:	e002      	b.n	800c372 <UART_SetConfig+0x5a6>
 800c36c:	2380      	movs	r3, #128	; 0x80
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a3f      	ldr	r2, [pc, #252]	; (800c474 <UART_SetConfig+0x6a8>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	f040 80f8 	bne.w	800c56e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c37e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c382:	2b20      	cmp	r3, #32
 800c384:	dc46      	bgt.n	800c414 <UART_SetConfig+0x648>
 800c386:	2b02      	cmp	r3, #2
 800c388:	f2c0 8082 	blt.w	800c490 <UART_SetConfig+0x6c4>
 800c38c:	3b02      	subs	r3, #2
 800c38e:	2b1e      	cmp	r3, #30
 800c390:	d87e      	bhi.n	800c490 <UART_SetConfig+0x6c4>
 800c392:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <UART_SetConfig+0x5cc>)
 800c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c398:	0800c41b 	.word	0x0800c41b
 800c39c:	0800c491 	.word	0x0800c491
 800c3a0:	0800c423 	.word	0x0800c423
 800c3a4:	0800c491 	.word	0x0800c491
 800c3a8:	0800c491 	.word	0x0800c491
 800c3ac:	0800c491 	.word	0x0800c491
 800c3b0:	0800c433 	.word	0x0800c433
 800c3b4:	0800c491 	.word	0x0800c491
 800c3b8:	0800c491 	.word	0x0800c491
 800c3bc:	0800c491 	.word	0x0800c491
 800c3c0:	0800c491 	.word	0x0800c491
 800c3c4:	0800c491 	.word	0x0800c491
 800c3c8:	0800c491 	.word	0x0800c491
 800c3cc:	0800c491 	.word	0x0800c491
 800c3d0:	0800c443 	.word	0x0800c443
 800c3d4:	0800c491 	.word	0x0800c491
 800c3d8:	0800c491 	.word	0x0800c491
 800c3dc:	0800c491 	.word	0x0800c491
 800c3e0:	0800c491 	.word	0x0800c491
 800c3e4:	0800c491 	.word	0x0800c491
 800c3e8:	0800c491 	.word	0x0800c491
 800c3ec:	0800c491 	.word	0x0800c491
 800c3f0:	0800c491 	.word	0x0800c491
 800c3f4:	0800c491 	.word	0x0800c491
 800c3f8:	0800c491 	.word	0x0800c491
 800c3fc:	0800c491 	.word	0x0800c491
 800c400:	0800c491 	.word	0x0800c491
 800c404:	0800c491 	.word	0x0800c491
 800c408:	0800c491 	.word	0x0800c491
 800c40c:	0800c491 	.word	0x0800c491
 800c410:	0800c483 	.word	0x0800c483
 800c414:	2b40      	cmp	r3, #64	; 0x40
 800c416:	d037      	beq.n	800c488 <UART_SetConfig+0x6bc>
 800c418:	e03a      	b.n	800c490 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c41a:	f7fd f935 	bl	8009688 <HAL_RCCEx_GetD3PCLK1Freq>
 800c41e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c420:	e03c      	b.n	800c49c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c426:	4618      	mov	r0, r3
 800c428:	f7fd f944 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c430:	e034      	b.n	800c49c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c432:	f107 0318 	add.w	r3, r7, #24
 800c436:	4618      	mov	r0, r3
 800c438:	f7fd fa90 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c440:	e02c      	b.n	800c49c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c442:	4b09      	ldr	r3, [pc, #36]	; (800c468 <UART_SetConfig+0x69c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0320 	and.w	r3, r3, #32
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d016      	beq.n	800c47c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <UART_SetConfig+0x69c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	08db      	lsrs	r3, r3, #3
 800c454:	f003 0303 	and.w	r3, r3, #3
 800c458:	4a07      	ldr	r2, [pc, #28]	; (800c478 <UART_SetConfig+0x6ac>)
 800c45a:	fa22 f303 	lsr.w	r3, r2, r3
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c460:	e01c      	b.n	800c49c <UART_SetConfig+0x6d0>
 800c462:	bf00      	nop
 800c464:	40011400 	.word	0x40011400
 800c468:	58024400 	.word	0x58024400
 800c46c:	40007800 	.word	0x40007800
 800c470:	40007c00 	.word	0x40007c00
 800c474:	58000c00 	.word	0x58000c00
 800c478:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c47c:	4b9d      	ldr	r3, [pc, #628]	; (800c6f4 <UART_SetConfig+0x928>)
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c480:	e00c      	b.n	800c49c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c482:	4b9d      	ldr	r3, [pc, #628]	; (800c6f8 <UART_SetConfig+0x92c>)
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c486:	e009      	b.n	800c49c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48e:	e005      	b.n	800c49c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c49a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 81de 	beq.w	800c860 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a8:	4a94      	ldr	r2, [pc, #592]	; (800c6fc <UART_SetConfig+0x930>)
 800c4aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	4413      	add	r3, r2
 800c4c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d305      	bcc.n	800c4d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d903      	bls.n	800c4dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c4da:	e1c1      	b.n	800c860 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4de:	2200      	movs	r2, #0
 800c4e0:	60bb      	str	r3, [r7, #8]
 800c4e2:	60fa      	str	r2, [r7, #12]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e8:	4a84      	ldr	r2, [pc, #528]	; (800c6fc <UART_SetConfig+0x930>)
 800c4ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4fe:	f7f4 f903 	bl	8000708 <__aeabi_uldivmod>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4610      	mov	r0, r2
 800c508:	4619      	mov	r1, r3
 800c50a:	f04f 0200 	mov.w	r2, #0
 800c50e:	f04f 0300 	mov.w	r3, #0
 800c512:	020b      	lsls	r3, r1, #8
 800c514:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c518:	0202      	lsls	r2, r0, #8
 800c51a:	6979      	ldr	r1, [r7, #20]
 800c51c:	6849      	ldr	r1, [r1, #4]
 800c51e:	0849      	lsrs	r1, r1, #1
 800c520:	2000      	movs	r0, #0
 800c522:	460c      	mov	r4, r1
 800c524:	4605      	mov	r5, r0
 800c526:	eb12 0804 	adds.w	r8, r2, r4
 800c52a:	eb43 0905 	adc.w	r9, r3, r5
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	469a      	mov	sl, r3
 800c536:	4693      	mov	fp, r2
 800c538:	4652      	mov	r2, sl
 800c53a:	465b      	mov	r3, fp
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	f7f4 f8e2 	bl	8000708 <__aeabi_uldivmod>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4613      	mov	r3, r2
 800c54a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c552:	d308      	bcc.n	800c566 <UART_SetConfig+0x79a>
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c55a:	d204      	bcs.n	800c566 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c562:	60da      	str	r2, [r3, #12]
 800c564:	e17c      	b.n	800c860 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c56c:	e178      	b.n	800c860 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c576:	f040 80c5 	bne.w	800c704 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c57a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c57e:	2b20      	cmp	r3, #32
 800c580:	dc48      	bgt.n	800c614 <UART_SetConfig+0x848>
 800c582:	2b00      	cmp	r3, #0
 800c584:	db7b      	blt.n	800c67e <UART_SetConfig+0x8b2>
 800c586:	2b20      	cmp	r3, #32
 800c588:	d879      	bhi.n	800c67e <UART_SetConfig+0x8b2>
 800c58a:	a201      	add	r2, pc, #4	; (adr r2, 800c590 <UART_SetConfig+0x7c4>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c61b 	.word	0x0800c61b
 800c594:	0800c623 	.word	0x0800c623
 800c598:	0800c67f 	.word	0x0800c67f
 800c59c:	0800c67f 	.word	0x0800c67f
 800c5a0:	0800c62b 	.word	0x0800c62b
 800c5a4:	0800c67f 	.word	0x0800c67f
 800c5a8:	0800c67f 	.word	0x0800c67f
 800c5ac:	0800c67f 	.word	0x0800c67f
 800c5b0:	0800c63b 	.word	0x0800c63b
 800c5b4:	0800c67f 	.word	0x0800c67f
 800c5b8:	0800c67f 	.word	0x0800c67f
 800c5bc:	0800c67f 	.word	0x0800c67f
 800c5c0:	0800c67f 	.word	0x0800c67f
 800c5c4:	0800c67f 	.word	0x0800c67f
 800c5c8:	0800c67f 	.word	0x0800c67f
 800c5cc:	0800c67f 	.word	0x0800c67f
 800c5d0:	0800c64b 	.word	0x0800c64b
 800c5d4:	0800c67f 	.word	0x0800c67f
 800c5d8:	0800c67f 	.word	0x0800c67f
 800c5dc:	0800c67f 	.word	0x0800c67f
 800c5e0:	0800c67f 	.word	0x0800c67f
 800c5e4:	0800c67f 	.word	0x0800c67f
 800c5e8:	0800c67f 	.word	0x0800c67f
 800c5ec:	0800c67f 	.word	0x0800c67f
 800c5f0:	0800c67f 	.word	0x0800c67f
 800c5f4:	0800c67f 	.word	0x0800c67f
 800c5f8:	0800c67f 	.word	0x0800c67f
 800c5fc:	0800c67f 	.word	0x0800c67f
 800c600:	0800c67f 	.word	0x0800c67f
 800c604:	0800c67f 	.word	0x0800c67f
 800c608:	0800c67f 	.word	0x0800c67f
 800c60c:	0800c67f 	.word	0x0800c67f
 800c610:	0800c671 	.word	0x0800c671
 800c614:	2b40      	cmp	r3, #64	; 0x40
 800c616:	d02e      	beq.n	800c676 <UART_SetConfig+0x8aa>
 800c618:	e031      	b.n	800c67e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c61a:	f7fb f87f 	bl	800771c <HAL_RCC_GetPCLK1Freq>
 800c61e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c620:	e033      	b.n	800c68a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c622:	f7fb f891 	bl	8007748 <HAL_RCC_GetPCLK2Freq>
 800c626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c628:	e02f      	b.n	800c68a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c62a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fd f840 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c638:	e027      	b.n	800c68a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c63a:	f107 0318 	add.w	r3, r7, #24
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fd f98c 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c648:	e01f      	b.n	800c68a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c64a:	4b2d      	ldr	r3, [pc, #180]	; (800c700 <UART_SetConfig+0x934>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d009      	beq.n	800c66a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c656:	4b2a      	ldr	r3, [pc, #168]	; (800c700 <UART_SetConfig+0x934>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	08db      	lsrs	r3, r3, #3
 800c65c:	f003 0303 	and.w	r3, r3, #3
 800c660:	4a24      	ldr	r2, [pc, #144]	; (800c6f4 <UART_SetConfig+0x928>)
 800c662:	fa22 f303 	lsr.w	r3, r2, r3
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c668:	e00f      	b.n	800c68a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c66a:	4b22      	ldr	r3, [pc, #136]	; (800c6f4 <UART_SetConfig+0x928>)
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c66e:	e00c      	b.n	800c68a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c670:	4b21      	ldr	r3, [pc, #132]	; (800c6f8 <UART_SetConfig+0x92c>)
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c674:	e009      	b.n	800c68a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67c:	e005      	b.n	800c68a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 80e7 	beq.w	800c860 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c696:	4a19      	ldr	r2, [pc, #100]	; (800c6fc <UART_SetConfig+0x930>)
 800c698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c69c:	461a      	mov	r2, r3
 800c69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6a4:	005a      	lsls	r2, r3, #1
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	085b      	lsrs	r3, r3, #1
 800c6ac:	441a      	add	r2, r3
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	2b0f      	cmp	r3, #15
 800c6bc:	d916      	bls.n	800c6ec <UART_SetConfig+0x920>
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6c4:	d212      	bcs.n	800c6ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	f023 030f 	bic.w	r3, r3, #15
 800c6ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	085b      	lsrs	r3, r3, #1
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c6e8:	60da      	str	r2, [r3, #12]
 800c6ea:	e0b9      	b.n	800c860 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c6f2:	e0b5      	b.n	800c860 <UART_SetConfig+0xa94>
 800c6f4:	03d09000 	.word	0x03d09000
 800c6f8:	003d0900 	.word	0x003d0900
 800c6fc:	08011bdc 	.word	0x08011bdc
 800c700:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c704:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c708:	2b20      	cmp	r3, #32
 800c70a:	dc49      	bgt.n	800c7a0 <UART_SetConfig+0x9d4>
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	db7c      	blt.n	800c80a <UART_SetConfig+0xa3e>
 800c710:	2b20      	cmp	r3, #32
 800c712:	d87a      	bhi.n	800c80a <UART_SetConfig+0xa3e>
 800c714:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <UART_SetConfig+0x950>)
 800c716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71a:	bf00      	nop
 800c71c:	0800c7a7 	.word	0x0800c7a7
 800c720:	0800c7af 	.word	0x0800c7af
 800c724:	0800c80b 	.word	0x0800c80b
 800c728:	0800c80b 	.word	0x0800c80b
 800c72c:	0800c7b7 	.word	0x0800c7b7
 800c730:	0800c80b 	.word	0x0800c80b
 800c734:	0800c80b 	.word	0x0800c80b
 800c738:	0800c80b 	.word	0x0800c80b
 800c73c:	0800c7c7 	.word	0x0800c7c7
 800c740:	0800c80b 	.word	0x0800c80b
 800c744:	0800c80b 	.word	0x0800c80b
 800c748:	0800c80b 	.word	0x0800c80b
 800c74c:	0800c80b 	.word	0x0800c80b
 800c750:	0800c80b 	.word	0x0800c80b
 800c754:	0800c80b 	.word	0x0800c80b
 800c758:	0800c80b 	.word	0x0800c80b
 800c75c:	0800c7d7 	.word	0x0800c7d7
 800c760:	0800c80b 	.word	0x0800c80b
 800c764:	0800c80b 	.word	0x0800c80b
 800c768:	0800c80b 	.word	0x0800c80b
 800c76c:	0800c80b 	.word	0x0800c80b
 800c770:	0800c80b 	.word	0x0800c80b
 800c774:	0800c80b 	.word	0x0800c80b
 800c778:	0800c80b 	.word	0x0800c80b
 800c77c:	0800c80b 	.word	0x0800c80b
 800c780:	0800c80b 	.word	0x0800c80b
 800c784:	0800c80b 	.word	0x0800c80b
 800c788:	0800c80b 	.word	0x0800c80b
 800c78c:	0800c80b 	.word	0x0800c80b
 800c790:	0800c80b 	.word	0x0800c80b
 800c794:	0800c80b 	.word	0x0800c80b
 800c798:	0800c80b 	.word	0x0800c80b
 800c79c:	0800c7fd 	.word	0x0800c7fd
 800c7a0:	2b40      	cmp	r3, #64	; 0x40
 800c7a2:	d02e      	beq.n	800c802 <UART_SetConfig+0xa36>
 800c7a4:	e031      	b.n	800c80a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7a6:	f7fa ffb9 	bl	800771c <HAL_RCC_GetPCLK1Freq>
 800c7aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7ac:	e033      	b.n	800c816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7ae:	f7fa ffcb 	bl	8007748 <HAL_RCC_GetPCLK2Freq>
 800c7b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7b4:	e02f      	b.n	800c816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fc ff7a 	bl	80096b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c4:	e027      	b.n	800c816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7c6:	f107 0318 	add.w	r3, r7, #24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fd f8c6 	bl	800995c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d4:	e01f      	b.n	800c816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7d6:	4b2d      	ldr	r3, [pc, #180]	; (800c88c <UART_SetConfig+0xac0>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 0320 	and.w	r3, r3, #32
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d009      	beq.n	800c7f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7e2:	4b2a      	ldr	r3, [pc, #168]	; (800c88c <UART_SetConfig+0xac0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	08db      	lsrs	r3, r3, #3
 800c7e8:	f003 0303 	and.w	r3, r3, #3
 800c7ec:	4a28      	ldr	r2, [pc, #160]	; (800c890 <UART_SetConfig+0xac4>)
 800c7ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7f4:	e00f      	b.n	800c816 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c7f6:	4b26      	ldr	r3, [pc, #152]	; (800c890 <UART_SetConfig+0xac4>)
 800c7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fa:	e00c      	b.n	800c816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7fc:	4b25      	ldr	r3, [pc, #148]	; (800c894 <UART_SetConfig+0xac8>)
 800c7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c800:	e009      	b.n	800c816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c808:	e005      	b.n	800c816 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c814:	bf00      	nop
    }

    if (pclk != 0U)
 800c816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d021      	beq.n	800c860 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c820:	4a1d      	ldr	r2, [pc, #116]	; (800c898 <UART_SetConfig+0xacc>)
 800c822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c826:	461a      	mov	r2, r3
 800c828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	085b      	lsrs	r3, r3, #1
 800c834:	441a      	add	r2, r3
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c83e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	2b0f      	cmp	r3, #15
 800c844:	d909      	bls.n	800c85a <UART_SetConfig+0xa8e>
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c84c:	d205      	bcs.n	800c85a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	b29a      	uxth	r2, r3
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	60da      	str	r2, [r3, #12]
 800c858:	e002      	b.n	800c860 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2201      	movs	r2, #1
 800c864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2200      	movs	r2, #0
 800c874:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2200      	movs	r2, #0
 800c87a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c87c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c880:	4618      	mov	r0, r3
 800c882:	3748      	adds	r7, #72	; 0x48
 800c884:	46bd      	mov	sp, r7
 800c886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c88a:	bf00      	nop
 800c88c:	58024400 	.word	0x58024400
 800c890:	03d09000 	.word	0x03d09000
 800c894:	003d0900 	.word	0x003d0900
 800c898:	08011bdc 	.word	0x08011bdc

0800c89c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00a      	beq.n	800c8c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	430a      	orrs	r2, r1
 800c8e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ec:	f003 0304 	and.w	r3, r3, #4
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00a      	beq.n	800c90a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	430a      	orrs	r2, r1
 800c908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90e:	f003 0308 	and.w	r3, r3, #8
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	430a      	orrs	r2, r1
 800c92a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c930:	f003 0310 	and.w	r3, r3, #16
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	430a      	orrs	r2, r1
 800c96e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01a      	beq.n	800c9b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c99a:	d10a      	bne.n	800c9b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00a      	beq.n	800c9d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	605a      	str	r2, [r3, #4]
  }
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b098      	sub	sp, #96	; 0x60
 800c9e4:	af02      	add	r7, sp, #8
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9f0:	f7f5 fc84 	bl	80022fc <HAL_GetTick>
 800c9f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 0308 	and.w	r3, r3, #8
 800ca00:	2b08      	cmp	r3, #8
 800ca02:	d12f      	bne.n	800ca64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 f88e 	bl	800cb34 <UART_WaitOnFlagUntilTimeout>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d022      	beq.n	800ca64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	e853 3f00 	ldrex	r3, [r3]
 800ca2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca32:	653b      	str	r3, [r7, #80]	; 0x50
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca3c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca44:	e841 2300 	strex	r3, r2, [r1]
 800ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1e6      	bne.n	800ca1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2220      	movs	r2, #32
 800ca54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e063      	b.n	800cb2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 0304 	and.w	r3, r3, #4
 800ca6e:	2b04      	cmp	r3, #4
 800ca70:	d149      	bne.n	800cb06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f857 	bl	800cb34 <UART_WaitOnFlagUntilTimeout>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d03c      	beq.n	800cb06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	e853 3f00 	ldrex	r3, [r3]
 800ca98:	623b      	str	r3, [r7, #32]
   return(result);
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caaa:	633b      	str	r3, [r7, #48]	; 0x30
 800caac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab2:	e841 2300 	strex	r3, r2, [r1]
 800cab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e6      	bne.n	800ca8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3308      	adds	r3, #8
 800cac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	60fb      	str	r3, [r7, #12]
   return(result);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f023 0301 	bic.w	r3, r3, #1
 800cad4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3308      	adds	r3, #8
 800cadc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cade:	61fa      	str	r2, [r7, #28]
 800cae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	69b9      	ldr	r1, [r7, #24]
 800cae4:	69fa      	ldr	r2, [r7, #28]
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	617b      	str	r3, [r7, #20]
   return(result);
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e5      	bne.n	800cabe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb02:	2303      	movs	r3, #3
 800cb04:	e012      	b.n	800cb2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2220      	movs	r2, #32
 800cb0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2220      	movs	r2, #32
 800cb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3758      	adds	r7, #88	; 0x58
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	4613      	mov	r3, r2
 800cb42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb44:	e049      	b.n	800cbda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4c:	d045      	beq.n	800cbda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb4e:	f7f5 fbd5 	bl	80022fc <HAL_GetTick>
 800cb52:	4602      	mov	r2, r0
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d302      	bcc.n	800cb64 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb64:	2303      	movs	r3, #3
 800cb66:	e048      	b.n	800cbfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d031      	beq.n	800cbda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	69db      	ldr	r3, [r3, #28]
 800cb7c:	f003 0308 	and.w	r3, r3, #8
 800cb80:	2b08      	cmp	r3, #8
 800cb82:	d110      	bne.n	800cba6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2208      	movs	r2, #8
 800cb8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 f839 	bl	800cc04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2208      	movs	r2, #8
 800cb96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e029      	b.n	800cbfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbb4:	d111      	bne.n	800cbda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 f81f 	bl	800cc04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2220      	movs	r2, #32
 800cbca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e00f      	b.n	800cbfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	69da      	ldr	r2, [r3, #28]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	4013      	ands	r3, r2
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	bf0c      	ite	eq
 800cbea:	2301      	moveq	r3, #1
 800cbec:	2300      	movne	r3, #0
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d0a6      	beq.n	800cb46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b095      	sub	sp, #84	; 0x54
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc14:	e853 3f00 	ldrex	r3, [r3]
 800cc18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc2a:	643b      	str	r3, [r7, #64]	; 0x40
 800cc2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc32:	e841 2300 	strex	r3, r2, [r1]
 800cc36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1e6      	bne.n	800cc0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3308      	adds	r3, #8
 800cc44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	e853 3f00 	ldrex	r3, [r3]
 800cc4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc4e:	69fa      	ldr	r2, [r7, #28]
 800cc50:	4b1e      	ldr	r3, [pc, #120]	; (800cccc <UART_EndRxTransfer+0xc8>)
 800cc52:	4013      	ands	r3, r2
 800cc54:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc66:	e841 2300 	strex	r3, r2, [r1]
 800cc6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1e5      	bne.n	800cc3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d118      	bne.n	800ccac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	e853 3f00 	ldrex	r3, [r3]
 800cc86:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	f023 0310 	bic.w	r3, r3, #16
 800cc8e:	647b      	str	r3, [r7, #68]	; 0x44
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	461a      	mov	r2, r3
 800cc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9c:	6979      	ldr	r1, [r7, #20]
 800cc9e:	69ba      	ldr	r2, [r7, #24]
 800cca0:	e841 2300 	strex	r3, r2, [r1]
 800cca4:	613b      	str	r3, [r7, #16]
   return(result);
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1e6      	bne.n	800cc7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2220      	movs	r2, #32
 800ccb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ccc0:	bf00      	nop
 800ccc2:	3754      	adds	r7, #84	; 0x54
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	effffffe 	.word	0xeffffffe

0800ccd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff f856 	bl	800bda0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccf4:	bf00      	nop
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	61bb      	str	r3, [r7, #24]
 800cd24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	6979      	ldr	r1, [r7, #20]
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e6      	bne.n	800cd04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff f821 	bl	800bd8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd4a:	bf00      	nop
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd6e:	bf00      	nop
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b085      	sub	sp, #20
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d101      	bne.n	800cda4 <HAL_UARTEx_DisableFifoMode+0x16>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e027      	b.n	800cdf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2224      	movs	r2, #36	; 0x24
 800cdb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f022 0201 	bic.w	r2, r2, #1
 800cdca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cdd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2220      	movs	r2, #32
 800cde6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce14:	2302      	movs	r3, #2
 800ce16:	e02d      	b.n	800ce74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2224      	movs	r2, #36	; 0x24
 800ce24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f022 0201 	bic.w	r2, r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f84f 	bl	800cef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e02d      	b.n	800cef0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2224      	movs	r2, #36	; 0x24
 800cea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0201 	bic.w	r2, r2, #1
 800ceba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f811 	bl	800cef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2220      	movs	r2, #32
 800cee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d108      	bne.n	800cf1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf18:	e031      	b.n	800cf7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf1a:	2310      	movs	r3, #16
 800cf1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf1e:	2310      	movs	r3, #16
 800cf20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	0e5b      	lsrs	r3, r3, #25
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	0f5b      	lsrs	r3, r3, #29
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
 800cf44:	7b3a      	ldrb	r2, [r7, #12]
 800cf46:	4911      	ldr	r1, [pc, #68]	; (800cf8c <UARTEx_SetNbDataToProcess+0x94>)
 800cf48:	5c8a      	ldrb	r2, [r1, r2]
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf4e:	7b3a      	ldrb	r2, [r7, #12]
 800cf50:	490f      	ldr	r1, [pc, #60]	; (800cf90 <UARTEx_SetNbDataToProcess+0x98>)
 800cf52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf54:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	7b7a      	ldrb	r2, [r7, #13]
 800cf64:	4909      	ldr	r1, [pc, #36]	; (800cf8c <UARTEx_SetNbDataToProcess+0x94>)
 800cf66:	5c8a      	ldrb	r2, [r1, r2]
 800cf68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf6c:	7b7a      	ldrb	r2, [r7, #13]
 800cf6e:	4908      	ldr	r1, [pc, #32]	; (800cf90 <UARTEx_SetNbDataToProcess+0x98>)
 800cf70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf72:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	08011bf4 	.word	0x08011bf4
 800cf90:	08011bfc 	.word	0x08011bfc

0800cf94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf94:	b084      	sub	sp, #16
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b084      	sub	sp, #16
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	f107 001c 	add.w	r0, r7, #28
 800cfa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d120      	bne.n	800cfee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68da      	ldr	r2, [r3, #12]
 800cfbc:	4b2a      	ldr	r3, [pc, #168]	; (800d068 <USB_CoreInit+0xd4>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cfd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d105      	bne.n	800cfe2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 faac 	bl	800d540 <USB_CoreReset>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	73fb      	strb	r3, [r7, #15]
 800cfec:	e01a      	b.n	800d024 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 faa0 	bl	800d540 <USB_CoreReset>
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	639a      	str	r2, [r3, #56]	; 0x38
 800d016:	e005      	b.n	800d024 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	2b01      	cmp	r3, #1
 800d028:	d116      	bne.n	800d058 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d02e:	b29a      	uxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d038:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <USB_CoreInit+0xd8>)
 800d03a:	4313      	orrs	r3, r2
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f043 0206 	orr.w	r2, r3, #6
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f043 0220 	orr.w	r2, r3, #32
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d064:	b004      	add	sp, #16
 800d066:	4770      	bx	lr
 800d068:	ffbdffbf 	.word	0xffbdffbf
 800d06c:	03ee0000 	.word	0x03ee0000

0800d070 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	f023 0201 	bic.w	r2, r3, #1
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b084      	sub	sp, #16
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	460b      	mov	r3, r1
 800d09c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d0ae:	78fb      	ldrb	r3, [r7, #3]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d115      	bne.n	800d0e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	f7f5 f927 	bl	8002314 <HAL_Delay>
      ms++;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fa29 	bl	800d524 <USB_GetMode>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d01e      	beq.n	800d116 <USB_SetCurrentMode+0x84>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b31      	cmp	r3, #49	; 0x31
 800d0dc:	d9f0      	bls.n	800d0c0 <USB_SetCurrentMode+0x2e>
 800d0de:	e01a      	b.n	800d116 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d0e0:	78fb      	ldrb	r3, [r7, #3]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d115      	bne.n	800d112 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0f2:	2001      	movs	r0, #1
 800d0f4:	f7f5 f90e 	bl	8002314 <HAL_Delay>
      ms++;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fa10 	bl	800d524 <USB_GetMode>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d005      	beq.n	800d116 <USB_SetCurrentMode+0x84>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b31      	cmp	r3, #49	; 0x31
 800d10e:	d9f0      	bls.n	800d0f2 <USB_SetCurrentMode+0x60>
 800d110:	e001      	b.n	800d116 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e005      	b.n	800d122 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b32      	cmp	r3, #50	; 0x32
 800d11a:	d101      	bne.n	800d120 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	e000      	b.n	800d122 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d12c:	b084      	sub	sp, #16
 800d12e:	b580      	push	{r7, lr}
 800d130:	b086      	sub	sp, #24
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d13a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]
 800d14a:	e009      	b.n	800d160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	3340      	adds	r3, #64	; 0x40
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4413      	add	r3, r2
 800d156:	2200      	movs	r2, #0
 800d158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	3301      	adds	r3, #1
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b0e      	cmp	r3, #14
 800d164:	d9f2      	bls.n	800d14c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d11c      	bne.n	800d1a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d17a:	f043 0302 	orr.w	r3, r3, #2
 800d17e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d184:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e005      	b.n	800d1b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	680b      	ldr	r3, [r1, #0]
 800d1d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d10c      	bne.n	800d1f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d1de:	2100      	movs	r1, #0
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f965 	bl	800d4b0 <USB_SetDevSpeed>
 800d1e6:	e008      	b.n	800d1fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d1e8:	2101      	movs	r1, #1
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f960 	bl	800d4b0 <USB_SetDevSpeed>
 800d1f0:	e003      	b.n	800d1fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d1f2:	2103      	movs	r1, #3
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f95b 	bl	800d4b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d1fa:	2110      	movs	r1, #16
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f8f3 	bl	800d3e8 <USB_FlushTxFifo>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f91f 	bl	800d450 <USB_FlushRxFifo>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d222:	461a      	mov	r2, r3
 800d224:	2300      	movs	r3, #0
 800d226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d22e:	461a      	mov	r2, r3
 800d230:	2300      	movs	r3, #0
 800d232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23a:	461a      	mov	r2, r3
 800d23c:	2300      	movs	r3, #0
 800d23e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d240:	2300      	movs	r3, #0
 800d242:	613b      	str	r3, [r7, #16]
 800d244:	e043      	b.n	800d2ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d25c:	d118      	bne.n	800d290 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10a      	bne.n	800d27a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	015a      	lsls	r2, r3, #5
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	4413      	add	r3, r2
 800d26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d270:	461a      	mov	r2, r3
 800d272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	e013      	b.n	800d2a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	4413      	add	r3, r2
 800d282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d286:	461a      	mov	r2, r3
 800d288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	e008      	b.n	800d2a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	015a      	lsls	r2, r3, #5
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	4413      	add	r3, r2
 800d298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d29c:	461a      	mov	r2, r3
 800d29e:	2300      	movs	r3, #0
 800d2a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	613b      	str	r3, [r7, #16]
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d3b7      	bcc.n	800d246 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]
 800d2da:	e043      	b.n	800d364 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2f2:	d118      	bne.n	800d326 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	015a      	lsls	r2, r3, #5
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4413      	add	r3, r2
 800d302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d306:	461a      	mov	r2, r3
 800d308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	e013      	b.n	800d338 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	015a      	lsls	r2, r3, #5
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4413      	add	r3, r2
 800d318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d31c:	461a      	mov	r2, r3
 800d31e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	e008      	b.n	800d338 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d332:	461a      	mov	r2, r3
 800d334:	2300      	movs	r3, #0
 800d336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	015a      	lsls	r2, r3, #5
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d344:	461a      	mov	r2, r3
 800d346:	2300      	movs	r3, #0
 800d348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	015a      	lsls	r2, r3, #5
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	4413      	add	r3, r2
 800d352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d356:	461a      	mov	r2, r3
 800d358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d35c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	3301      	adds	r3, #1
 800d362:	613b      	str	r3, [r7, #16]
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d3b7      	bcc.n	800d2dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d37a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d37e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d38c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d105      	bne.n	800d3a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	f043 0210 	orr.w	r2, r3, #16
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	699a      	ldr	r2, [r3, #24]
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <USB_DevInit+0x2b4>)
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	f043 0208 	orr.w	r2, r3, #8
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d105      	bne.n	800d3d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	699a      	ldr	r2, [r3, #24]
 800d3c8:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <USB_DevInit+0x2b8>)
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3dc:	b004      	add	sp, #16
 800d3de:	4770      	bx	lr
 800d3e0:	803c3800 	.word	0x803c3800
 800d3e4:	40000004 	.word	0x40000004

0800d3e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	4a13      	ldr	r2, [pc, #76]	; (800d44c <USB_FlushTxFifo+0x64>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d901      	bls.n	800d408 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d404:	2303      	movs	r3, #3
 800d406:	e01b      	b.n	800d440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	daf2      	bge.n	800d3f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	019b      	lsls	r3, r3, #6
 800d418:	f043 0220 	orr.w	r2, r3, #32
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3301      	adds	r3, #1
 800d424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	4a08      	ldr	r2, [pc, #32]	; (800d44c <USB_FlushTxFifo+0x64>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d901      	bls.n	800d432 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d42e:	2303      	movs	r3, #3
 800d430:	e006      	b.n	800d440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	f003 0320 	and.w	r3, r3, #32
 800d43a:	2b20      	cmp	r3, #32
 800d43c:	d0f0      	beq.n	800d420 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	00030d40 	.word	0x00030d40

0800d450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d458:	2300      	movs	r3, #0
 800d45a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3301      	adds	r3, #1
 800d460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	4a11      	ldr	r2, [pc, #68]	; (800d4ac <USB_FlushRxFifo+0x5c>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d901      	bls.n	800d46e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e018      	b.n	800d4a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	daf2      	bge.n	800d45c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2210      	movs	r2, #16
 800d47e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	3301      	adds	r3, #1
 800d484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	4a08      	ldr	r2, [pc, #32]	; (800d4ac <USB_FlushRxFifo+0x5c>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d901      	bls.n	800d492 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d48e:	2303      	movs	r3, #3
 800d490:	e006      	b.n	800d4a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	f003 0310 	and.w	r3, r3, #16
 800d49a:	2b10      	cmp	r3, #16
 800d49c:	d0f0      	beq.n	800d480 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	00030d40 	.word	0x00030d40

0800d4b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	78fb      	ldrb	r3, [r7, #3]
 800d4ca:	68f9      	ldr	r1, [r7, #12]
 800d4cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d4fc:	f023 0303 	bic.w	r3, r3, #3
 800d500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d510:	f043 0302 	orr.w	r3, r3, #2
 800d514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3714      	adds	r7, #20
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	695b      	ldr	r3, [r3, #20]
 800d530:	f003 0301 	and.w	r3, r3, #1
}
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3301      	adds	r3, #1
 800d550:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	4a13      	ldr	r2, [pc, #76]	; (800d5a4 <USB_CoreReset+0x64>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d901      	bls.n	800d55e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e01b      	b.n	800d596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	daf2      	bge.n	800d54c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	f043 0201 	orr.w	r2, r3, #1
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3301      	adds	r3, #1
 800d57a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4a09      	ldr	r2, [pc, #36]	; (800d5a4 <USB_CoreReset+0x64>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d901      	bls.n	800d588 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e006      	b.n	800d596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b01      	cmp	r3, #1
 800d592:	d0f0      	beq.n	800d576 <USB_CoreReset+0x36>

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	00030d40 	.word	0x00030d40

0800d5a8 <malloc>:
 800d5a8:	4b02      	ldr	r3, [pc, #8]	; (800d5b4 <malloc+0xc>)
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f000 b823 	b.w	800d5f8 <_malloc_r>
 800d5b2:	bf00      	nop
 800d5b4:	24000068 	.word	0x24000068

0800d5b8 <sbrk_aligned>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	4e0e      	ldr	r6, [pc, #56]	; (800d5f4 <sbrk_aligned+0x3c>)
 800d5bc:	460c      	mov	r4, r1
 800d5be:	6831      	ldr	r1, [r6, #0]
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	b911      	cbnz	r1, 800d5ca <sbrk_aligned+0x12>
 800d5c4:	f001 f86a 	bl	800e69c <_sbrk_r>
 800d5c8:	6030      	str	r0, [r6, #0]
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f001 f865 	bl	800e69c <_sbrk_r>
 800d5d2:	1c43      	adds	r3, r0, #1
 800d5d4:	d00a      	beq.n	800d5ec <sbrk_aligned+0x34>
 800d5d6:	1cc4      	adds	r4, r0, #3
 800d5d8:	f024 0403 	bic.w	r4, r4, #3
 800d5dc:	42a0      	cmp	r0, r4
 800d5de:	d007      	beq.n	800d5f0 <sbrk_aligned+0x38>
 800d5e0:	1a21      	subs	r1, r4, r0
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f001 f85a 	bl	800e69c <_sbrk_r>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d101      	bne.n	800d5f0 <sbrk_aligned+0x38>
 800d5ec:	f04f 34ff 	mov.w	r4, #4294967295
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	24000b60 	.word	0x24000b60

0800d5f8 <_malloc_r>:
 800d5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5fc:	1ccd      	adds	r5, r1, #3
 800d5fe:	f025 0503 	bic.w	r5, r5, #3
 800d602:	3508      	adds	r5, #8
 800d604:	2d0c      	cmp	r5, #12
 800d606:	bf38      	it	cc
 800d608:	250c      	movcc	r5, #12
 800d60a:	2d00      	cmp	r5, #0
 800d60c:	4607      	mov	r7, r0
 800d60e:	db01      	blt.n	800d614 <_malloc_r+0x1c>
 800d610:	42a9      	cmp	r1, r5
 800d612:	d905      	bls.n	800d620 <_malloc_r+0x28>
 800d614:	230c      	movs	r3, #12
 800d616:	603b      	str	r3, [r7, #0]
 800d618:	2600      	movs	r6, #0
 800d61a:	4630      	mov	r0, r6
 800d61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d620:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6f4 <_malloc_r+0xfc>
 800d624:	f000 f868 	bl	800d6f8 <__malloc_lock>
 800d628:	f8d8 3000 	ldr.w	r3, [r8]
 800d62c:	461c      	mov	r4, r3
 800d62e:	bb5c      	cbnz	r4, 800d688 <_malloc_r+0x90>
 800d630:	4629      	mov	r1, r5
 800d632:	4638      	mov	r0, r7
 800d634:	f7ff ffc0 	bl	800d5b8 <sbrk_aligned>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	4604      	mov	r4, r0
 800d63c:	d155      	bne.n	800d6ea <_malloc_r+0xf2>
 800d63e:	f8d8 4000 	ldr.w	r4, [r8]
 800d642:	4626      	mov	r6, r4
 800d644:	2e00      	cmp	r6, #0
 800d646:	d145      	bne.n	800d6d4 <_malloc_r+0xdc>
 800d648:	2c00      	cmp	r4, #0
 800d64a:	d048      	beq.n	800d6de <_malloc_r+0xe6>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	4631      	mov	r1, r6
 800d650:	4638      	mov	r0, r7
 800d652:	eb04 0903 	add.w	r9, r4, r3
 800d656:	f001 f821 	bl	800e69c <_sbrk_r>
 800d65a:	4581      	cmp	r9, r0
 800d65c:	d13f      	bne.n	800d6de <_malloc_r+0xe6>
 800d65e:	6821      	ldr	r1, [r4, #0]
 800d660:	1a6d      	subs	r5, r5, r1
 800d662:	4629      	mov	r1, r5
 800d664:	4638      	mov	r0, r7
 800d666:	f7ff ffa7 	bl	800d5b8 <sbrk_aligned>
 800d66a:	3001      	adds	r0, #1
 800d66c:	d037      	beq.n	800d6de <_malloc_r+0xe6>
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	442b      	add	r3, r5
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	f8d8 3000 	ldr.w	r3, [r8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d038      	beq.n	800d6ee <_malloc_r+0xf6>
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	42a2      	cmp	r2, r4
 800d680:	d12b      	bne.n	800d6da <_malloc_r+0xe2>
 800d682:	2200      	movs	r2, #0
 800d684:	605a      	str	r2, [r3, #4]
 800d686:	e00f      	b.n	800d6a8 <_malloc_r+0xb0>
 800d688:	6822      	ldr	r2, [r4, #0]
 800d68a:	1b52      	subs	r2, r2, r5
 800d68c:	d41f      	bmi.n	800d6ce <_malloc_r+0xd6>
 800d68e:	2a0b      	cmp	r2, #11
 800d690:	d917      	bls.n	800d6c2 <_malloc_r+0xca>
 800d692:	1961      	adds	r1, r4, r5
 800d694:	42a3      	cmp	r3, r4
 800d696:	6025      	str	r5, [r4, #0]
 800d698:	bf18      	it	ne
 800d69a:	6059      	strne	r1, [r3, #4]
 800d69c:	6863      	ldr	r3, [r4, #4]
 800d69e:	bf08      	it	eq
 800d6a0:	f8c8 1000 	streq.w	r1, [r8]
 800d6a4:	5162      	str	r2, [r4, r5]
 800d6a6:	604b      	str	r3, [r1, #4]
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f104 060b 	add.w	r6, r4, #11
 800d6ae:	f000 f829 	bl	800d704 <__malloc_unlock>
 800d6b2:	f026 0607 	bic.w	r6, r6, #7
 800d6b6:	1d23      	adds	r3, r4, #4
 800d6b8:	1af2      	subs	r2, r6, r3
 800d6ba:	d0ae      	beq.n	800d61a <_malloc_r+0x22>
 800d6bc:	1b9b      	subs	r3, r3, r6
 800d6be:	50a3      	str	r3, [r4, r2]
 800d6c0:	e7ab      	b.n	800d61a <_malloc_r+0x22>
 800d6c2:	42a3      	cmp	r3, r4
 800d6c4:	6862      	ldr	r2, [r4, #4]
 800d6c6:	d1dd      	bne.n	800d684 <_malloc_r+0x8c>
 800d6c8:	f8c8 2000 	str.w	r2, [r8]
 800d6cc:	e7ec      	b.n	800d6a8 <_malloc_r+0xb0>
 800d6ce:	4623      	mov	r3, r4
 800d6d0:	6864      	ldr	r4, [r4, #4]
 800d6d2:	e7ac      	b.n	800d62e <_malloc_r+0x36>
 800d6d4:	4634      	mov	r4, r6
 800d6d6:	6876      	ldr	r6, [r6, #4]
 800d6d8:	e7b4      	b.n	800d644 <_malloc_r+0x4c>
 800d6da:	4613      	mov	r3, r2
 800d6dc:	e7cc      	b.n	800d678 <_malloc_r+0x80>
 800d6de:	230c      	movs	r3, #12
 800d6e0:	603b      	str	r3, [r7, #0]
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f000 f80e 	bl	800d704 <__malloc_unlock>
 800d6e8:	e797      	b.n	800d61a <_malloc_r+0x22>
 800d6ea:	6025      	str	r5, [r4, #0]
 800d6ec:	e7dc      	b.n	800d6a8 <_malloc_r+0xb0>
 800d6ee:	605b      	str	r3, [r3, #4]
 800d6f0:	deff      	udf	#255	; 0xff
 800d6f2:	bf00      	nop
 800d6f4:	24000b5c 	.word	0x24000b5c

0800d6f8 <__malloc_lock>:
 800d6f8:	4801      	ldr	r0, [pc, #4]	; (800d700 <__malloc_lock+0x8>)
 800d6fa:	f001 b81b 	b.w	800e734 <__retarget_lock_acquire_recursive>
 800d6fe:	bf00      	nop
 800d700:	24000ca4 	.word	0x24000ca4

0800d704 <__malloc_unlock>:
 800d704:	4801      	ldr	r0, [pc, #4]	; (800d70c <__malloc_unlock+0x8>)
 800d706:	f001 b816 	b.w	800e736 <__retarget_lock_release_recursive>
 800d70a:	bf00      	nop
 800d70c:	24000ca4 	.word	0x24000ca4

0800d710 <__cvt>:
 800d710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d712:	ed2d 8b02 	vpush	{d8}
 800d716:	eeb0 8b40 	vmov.f64	d8, d0
 800d71a:	b085      	sub	sp, #20
 800d71c:	4617      	mov	r7, r2
 800d71e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d720:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d722:	ee18 2a90 	vmov	r2, s17
 800d726:	f025 0520 	bic.w	r5, r5, #32
 800d72a:	2a00      	cmp	r2, #0
 800d72c:	bfb6      	itet	lt
 800d72e:	222d      	movlt	r2, #45	; 0x2d
 800d730:	2200      	movge	r2, #0
 800d732:	eeb1 8b40 	vneglt.f64	d8, d0
 800d736:	2d46      	cmp	r5, #70	; 0x46
 800d738:	460c      	mov	r4, r1
 800d73a:	701a      	strb	r2, [r3, #0]
 800d73c:	d004      	beq.n	800d748 <__cvt+0x38>
 800d73e:	2d45      	cmp	r5, #69	; 0x45
 800d740:	d100      	bne.n	800d744 <__cvt+0x34>
 800d742:	3401      	adds	r4, #1
 800d744:	2102      	movs	r1, #2
 800d746:	e000      	b.n	800d74a <__cvt+0x3a>
 800d748:	2103      	movs	r1, #3
 800d74a:	ab03      	add	r3, sp, #12
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	ab02      	add	r3, sp, #8
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	4622      	mov	r2, r4
 800d754:	4633      	mov	r3, r6
 800d756:	eeb0 0b48 	vmov.f64	d0, d8
 800d75a:	f001 f87d 	bl	800e858 <_dtoa_r>
 800d75e:	2d47      	cmp	r5, #71	; 0x47
 800d760:	d101      	bne.n	800d766 <__cvt+0x56>
 800d762:	07fb      	lsls	r3, r7, #31
 800d764:	d51a      	bpl.n	800d79c <__cvt+0x8c>
 800d766:	2d46      	cmp	r5, #70	; 0x46
 800d768:	eb00 0204 	add.w	r2, r0, r4
 800d76c:	d10c      	bne.n	800d788 <__cvt+0x78>
 800d76e:	7803      	ldrb	r3, [r0, #0]
 800d770:	2b30      	cmp	r3, #48	; 0x30
 800d772:	d107      	bne.n	800d784 <__cvt+0x74>
 800d774:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77c:	bf1c      	itt	ne
 800d77e:	f1c4 0401 	rsbne	r4, r4, #1
 800d782:	6034      	strne	r4, [r6, #0]
 800d784:	6833      	ldr	r3, [r6, #0]
 800d786:	441a      	add	r2, r3
 800d788:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d790:	bf08      	it	eq
 800d792:	9203      	streq	r2, [sp, #12]
 800d794:	2130      	movs	r1, #48	; 0x30
 800d796:	9b03      	ldr	r3, [sp, #12]
 800d798:	4293      	cmp	r3, r2
 800d79a:	d307      	bcc.n	800d7ac <__cvt+0x9c>
 800d79c:	9b03      	ldr	r3, [sp, #12]
 800d79e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a0:	1a1b      	subs	r3, r3, r0
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	b005      	add	sp, #20
 800d7a6:	ecbd 8b02 	vpop	{d8}
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ac:	1c5c      	adds	r4, r3, #1
 800d7ae:	9403      	str	r4, [sp, #12]
 800d7b0:	7019      	strb	r1, [r3, #0]
 800d7b2:	e7f0      	b.n	800d796 <__cvt+0x86>

0800d7b4 <__exponent>:
 800d7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2900      	cmp	r1, #0
 800d7ba:	bfb8      	it	lt
 800d7bc:	4249      	neglt	r1, r1
 800d7be:	f803 2b02 	strb.w	r2, [r3], #2
 800d7c2:	bfb4      	ite	lt
 800d7c4:	222d      	movlt	r2, #45	; 0x2d
 800d7c6:	222b      	movge	r2, #43	; 0x2b
 800d7c8:	2909      	cmp	r1, #9
 800d7ca:	7042      	strb	r2, [r0, #1]
 800d7cc:	dd2a      	ble.n	800d824 <__exponent+0x70>
 800d7ce:	f10d 0207 	add.w	r2, sp, #7
 800d7d2:	4617      	mov	r7, r2
 800d7d4:	260a      	movs	r6, #10
 800d7d6:	4694      	mov	ip, r2
 800d7d8:	fb91 f5f6 	sdiv	r5, r1, r6
 800d7dc:	fb06 1415 	mls	r4, r6, r5, r1
 800d7e0:	3430      	adds	r4, #48	; 0x30
 800d7e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	2c63      	cmp	r4, #99	; 0x63
 800d7ea:	f102 32ff 	add.w	r2, r2, #4294967295
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	dcf1      	bgt.n	800d7d6 <__exponent+0x22>
 800d7f2:	3130      	adds	r1, #48	; 0x30
 800d7f4:	f1ac 0402 	sub.w	r4, ip, #2
 800d7f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d7fc:	1c41      	adds	r1, r0, #1
 800d7fe:	4622      	mov	r2, r4
 800d800:	42ba      	cmp	r2, r7
 800d802:	d30a      	bcc.n	800d81a <__exponent+0x66>
 800d804:	f10d 0209 	add.w	r2, sp, #9
 800d808:	eba2 020c 	sub.w	r2, r2, ip
 800d80c:	42bc      	cmp	r4, r7
 800d80e:	bf88      	it	hi
 800d810:	2200      	movhi	r2, #0
 800d812:	4413      	add	r3, r2
 800d814:	1a18      	subs	r0, r3, r0
 800d816:	b003      	add	sp, #12
 800d818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d81e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d822:	e7ed      	b.n	800d800 <__exponent+0x4c>
 800d824:	2330      	movs	r3, #48	; 0x30
 800d826:	3130      	adds	r1, #48	; 0x30
 800d828:	7083      	strb	r3, [r0, #2]
 800d82a:	70c1      	strb	r1, [r0, #3]
 800d82c:	1d03      	adds	r3, r0, #4
 800d82e:	e7f1      	b.n	800d814 <__exponent+0x60>

0800d830 <_printf_float>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	b08b      	sub	sp, #44	; 0x2c
 800d836:	460c      	mov	r4, r1
 800d838:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d83c:	4616      	mov	r6, r2
 800d83e:	461f      	mov	r7, r3
 800d840:	4605      	mov	r5, r0
 800d842:	f000 fef3 	bl	800e62c <_localeconv_r>
 800d846:	f8d0 b000 	ldr.w	fp, [r0]
 800d84a:	4658      	mov	r0, fp
 800d84c:	f7f2 fd98 	bl	8000380 <strlen>
 800d850:	2300      	movs	r3, #0
 800d852:	9308      	str	r3, [sp, #32]
 800d854:	f8d8 3000 	ldr.w	r3, [r8]
 800d858:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d85c:	6822      	ldr	r2, [r4, #0]
 800d85e:	3307      	adds	r3, #7
 800d860:	f023 0307 	bic.w	r3, r3, #7
 800d864:	f103 0108 	add.w	r1, r3, #8
 800d868:	f8c8 1000 	str.w	r1, [r8]
 800d86c:	ed93 0b00 	vldr	d0, [r3]
 800d870:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800dad0 <_printf_float+0x2a0>
 800d874:	eeb0 7bc0 	vabs.f64	d7, d0
 800d878:	eeb4 7b46 	vcmp.f64	d7, d6
 800d87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d880:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800d884:	4682      	mov	sl, r0
 800d886:	dd24      	ble.n	800d8d2 <_printf_float+0xa2>
 800d888:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	d502      	bpl.n	800d898 <_printf_float+0x68>
 800d892:	232d      	movs	r3, #45	; 0x2d
 800d894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d898:	498f      	ldr	r1, [pc, #572]	; (800dad8 <_printf_float+0x2a8>)
 800d89a:	4b90      	ldr	r3, [pc, #576]	; (800dadc <_printf_float+0x2ac>)
 800d89c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d8a0:	bf94      	ite	ls
 800d8a2:	4688      	movls	r8, r1
 800d8a4:	4698      	movhi	r8, r3
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	6123      	str	r3, [r4, #16]
 800d8aa:	f022 0204 	bic.w	r2, r2, #4
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6022      	str	r2, [r4, #0]
 800d8b2:	9304      	str	r3, [sp, #16]
 800d8b4:	9700      	str	r7, [sp, #0]
 800d8b6:	4633      	mov	r3, r6
 800d8b8:	aa09      	add	r2, sp, #36	; 0x24
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f000 f9d1 	bl	800dc64 <_printf_common>
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	f040 808a 	bne.w	800d9dc <_printf_float+0x1ac>
 800d8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8cc:	b00b      	add	sp, #44	; 0x2c
 800d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d2:	eeb4 0b40 	vcmp.f64	d0, d0
 800d8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8da:	d709      	bvc.n	800d8f0 <_printf_float+0xc0>
 800d8dc:	ee10 3a90 	vmov	r3, s1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	bfbc      	itt	lt
 800d8e4:	232d      	movlt	r3, #45	; 0x2d
 800d8e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d8ea:	497d      	ldr	r1, [pc, #500]	; (800dae0 <_printf_float+0x2b0>)
 800d8ec:	4b7d      	ldr	r3, [pc, #500]	; (800dae4 <_printf_float+0x2b4>)
 800d8ee:	e7d5      	b.n	800d89c <_printf_float+0x6c>
 800d8f0:	6863      	ldr	r3, [r4, #4]
 800d8f2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d8f6:	9104      	str	r1, [sp, #16]
 800d8f8:	1c59      	adds	r1, r3, #1
 800d8fa:	d13c      	bne.n	800d976 <_printf_float+0x146>
 800d8fc:	2306      	movs	r3, #6
 800d8fe:	6063      	str	r3, [r4, #4]
 800d900:	2300      	movs	r3, #0
 800d902:	9303      	str	r3, [sp, #12]
 800d904:	ab08      	add	r3, sp, #32
 800d906:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d90a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d90e:	ab07      	add	r3, sp, #28
 800d910:	6861      	ldr	r1, [r4, #4]
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	6022      	str	r2, [r4, #0]
 800d916:	f10d 031b 	add.w	r3, sp, #27
 800d91a:	4628      	mov	r0, r5
 800d91c:	f7ff fef8 	bl	800d710 <__cvt>
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	9907      	ldr	r1, [sp, #28]
 800d924:	2b47      	cmp	r3, #71	; 0x47
 800d926:	4680      	mov	r8, r0
 800d928:	d108      	bne.n	800d93c <_printf_float+0x10c>
 800d92a:	1cc8      	adds	r0, r1, #3
 800d92c:	db02      	blt.n	800d934 <_printf_float+0x104>
 800d92e:	6863      	ldr	r3, [r4, #4]
 800d930:	4299      	cmp	r1, r3
 800d932:	dd41      	ble.n	800d9b8 <_printf_float+0x188>
 800d934:	f1a9 0902 	sub.w	r9, r9, #2
 800d938:	fa5f f989 	uxtb.w	r9, r9
 800d93c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d940:	d820      	bhi.n	800d984 <_printf_float+0x154>
 800d942:	3901      	subs	r1, #1
 800d944:	464a      	mov	r2, r9
 800d946:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d94a:	9107      	str	r1, [sp, #28]
 800d94c:	f7ff ff32 	bl	800d7b4 <__exponent>
 800d950:	9a08      	ldr	r2, [sp, #32]
 800d952:	9004      	str	r0, [sp, #16]
 800d954:	1813      	adds	r3, r2, r0
 800d956:	2a01      	cmp	r2, #1
 800d958:	6123      	str	r3, [r4, #16]
 800d95a:	dc02      	bgt.n	800d962 <_printf_float+0x132>
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	07d2      	lsls	r2, r2, #31
 800d960:	d501      	bpl.n	800d966 <_printf_float+0x136>
 800d962:	3301      	adds	r3, #1
 800d964:	6123      	str	r3, [r4, #16]
 800d966:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d0a2      	beq.n	800d8b4 <_printf_float+0x84>
 800d96e:	232d      	movs	r3, #45	; 0x2d
 800d970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d974:	e79e      	b.n	800d8b4 <_printf_float+0x84>
 800d976:	9904      	ldr	r1, [sp, #16]
 800d978:	2947      	cmp	r1, #71	; 0x47
 800d97a:	d1c1      	bne.n	800d900 <_printf_float+0xd0>
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1bf      	bne.n	800d900 <_printf_float+0xd0>
 800d980:	2301      	movs	r3, #1
 800d982:	e7bc      	b.n	800d8fe <_printf_float+0xce>
 800d984:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d988:	d118      	bne.n	800d9bc <_printf_float+0x18c>
 800d98a:	2900      	cmp	r1, #0
 800d98c:	6863      	ldr	r3, [r4, #4]
 800d98e:	dd0b      	ble.n	800d9a8 <_printf_float+0x178>
 800d990:	6121      	str	r1, [r4, #16]
 800d992:	b913      	cbnz	r3, 800d99a <_printf_float+0x16a>
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	07d0      	lsls	r0, r2, #31
 800d998:	d502      	bpl.n	800d9a0 <_printf_float+0x170>
 800d99a:	3301      	adds	r3, #1
 800d99c:	440b      	add	r3, r1
 800d99e:	6123      	str	r3, [r4, #16]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9a4:	9304      	str	r3, [sp, #16]
 800d9a6:	e7de      	b.n	800d966 <_printf_float+0x136>
 800d9a8:	b913      	cbnz	r3, 800d9b0 <_printf_float+0x180>
 800d9aa:	6822      	ldr	r2, [r4, #0]
 800d9ac:	07d2      	lsls	r2, r2, #31
 800d9ae:	d501      	bpl.n	800d9b4 <_printf_float+0x184>
 800d9b0:	3302      	adds	r3, #2
 800d9b2:	e7f4      	b.n	800d99e <_printf_float+0x16e>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e7f2      	b.n	800d99e <_printf_float+0x16e>
 800d9b8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d9bc:	9b08      	ldr	r3, [sp, #32]
 800d9be:	4299      	cmp	r1, r3
 800d9c0:	db05      	blt.n	800d9ce <_printf_float+0x19e>
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	6121      	str	r1, [r4, #16]
 800d9c6:	07d8      	lsls	r0, r3, #31
 800d9c8:	d5ea      	bpl.n	800d9a0 <_printf_float+0x170>
 800d9ca:	1c4b      	adds	r3, r1, #1
 800d9cc:	e7e7      	b.n	800d99e <_printf_float+0x16e>
 800d9ce:	2900      	cmp	r1, #0
 800d9d0:	bfd4      	ite	le
 800d9d2:	f1c1 0202 	rsble	r2, r1, #2
 800d9d6:	2201      	movgt	r2, #1
 800d9d8:	4413      	add	r3, r2
 800d9da:	e7e0      	b.n	800d99e <_printf_float+0x16e>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	055a      	lsls	r2, r3, #21
 800d9e0:	d407      	bmi.n	800d9f2 <_printf_float+0x1c2>
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	4642      	mov	r2, r8
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	d12a      	bne.n	800da46 <_printf_float+0x216>
 800d9f0:	e76a      	b.n	800d8c8 <_printf_float+0x98>
 800d9f2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d9f6:	f240 80e0 	bls.w	800dbba <_printf_float+0x38a>
 800d9fa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d9fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da06:	d133      	bne.n	800da70 <_printf_float+0x240>
 800da08:	4a37      	ldr	r2, [pc, #220]	; (800dae8 <_printf_float+0x2b8>)
 800da0a:	2301      	movs	r3, #1
 800da0c:	4631      	mov	r1, r6
 800da0e:	4628      	mov	r0, r5
 800da10:	47b8      	blx	r7
 800da12:	3001      	adds	r0, #1
 800da14:	f43f af58 	beq.w	800d8c8 <_printf_float+0x98>
 800da18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	db02      	blt.n	800da26 <_printf_float+0x1f6>
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	07d8      	lsls	r0, r3, #31
 800da24:	d50f      	bpl.n	800da46 <_printf_float+0x216>
 800da26:	4653      	mov	r3, sl
 800da28:	465a      	mov	r2, fp
 800da2a:	4631      	mov	r1, r6
 800da2c:	4628      	mov	r0, r5
 800da2e:	47b8      	blx	r7
 800da30:	3001      	adds	r0, #1
 800da32:	f43f af49 	beq.w	800d8c8 <_printf_float+0x98>
 800da36:	f04f 0800 	mov.w	r8, #0
 800da3a:	f104 091a 	add.w	r9, r4, #26
 800da3e:	9b08      	ldr	r3, [sp, #32]
 800da40:	3b01      	subs	r3, #1
 800da42:	4543      	cmp	r3, r8
 800da44:	dc09      	bgt.n	800da5a <_printf_float+0x22a>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	079b      	lsls	r3, r3, #30
 800da4a:	f100 8106 	bmi.w	800dc5a <_printf_float+0x42a>
 800da4e:	68e0      	ldr	r0, [r4, #12]
 800da50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da52:	4298      	cmp	r0, r3
 800da54:	bfb8      	it	lt
 800da56:	4618      	movlt	r0, r3
 800da58:	e738      	b.n	800d8cc <_printf_float+0x9c>
 800da5a:	2301      	movs	r3, #1
 800da5c:	464a      	mov	r2, r9
 800da5e:	4631      	mov	r1, r6
 800da60:	4628      	mov	r0, r5
 800da62:	47b8      	blx	r7
 800da64:	3001      	adds	r0, #1
 800da66:	f43f af2f 	beq.w	800d8c8 <_printf_float+0x98>
 800da6a:	f108 0801 	add.w	r8, r8, #1
 800da6e:	e7e6      	b.n	800da3e <_printf_float+0x20e>
 800da70:	9b07      	ldr	r3, [sp, #28]
 800da72:	2b00      	cmp	r3, #0
 800da74:	dc3a      	bgt.n	800daec <_printf_float+0x2bc>
 800da76:	4a1c      	ldr	r2, [pc, #112]	; (800dae8 <_printf_float+0x2b8>)
 800da78:	2301      	movs	r3, #1
 800da7a:	4631      	mov	r1, r6
 800da7c:	4628      	mov	r0, r5
 800da7e:	47b8      	blx	r7
 800da80:	3001      	adds	r0, #1
 800da82:	f43f af21 	beq.w	800d8c8 <_printf_float+0x98>
 800da86:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	d102      	bne.n	800da94 <_printf_float+0x264>
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	07d9      	lsls	r1, r3, #31
 800da92:	d5d8      	bpl.n	800da46 <_printf_float+0x216>
 800da94:	4653      	mov	r3, sl
 800da96:	465a      	mov	r2, fp
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	f43f af12 	beq.w	800d8c8 <_printf_float+0x98>
 800daa4:	f04f 0900 	mov.w	r9, #0
 800daa8:	f104 0a1a 	add.w	sl, r4, #26
 800daac:	9b07      	ldr	r3, [sp, #28]
 800daae:	425b      	negs	r3, r3
 800dab0:	454b      	cmp	r3, r9
 800dab2:	dc01      	bgt.n	800dab8 <_printf_float+0x288>
 800dab4:	9b08      	ldr	r3, [sp, #32]
 800dab6:	e795      	b.n	800d9e4 <_printf_float+0x1b4>
 800dab8:	2301      	movs	r3, #1
 800daba:	4652      	mov	r2, sl
 800dabc:	4631      	mov	r1, r6
 800dabe:	4628      	mov	r0, r5
 800dac0:	47b8      	blx	r7
 800dac2:	3001      	adds	r0, #1
 800dac4:	f43f af00 	beq.w	800d8c8 <_printf_float+0x98>
 800dac8:	f109 0901 	add.w	r9, r9, #1
 800dacc:	e7ee      	b.n	800daac <_printf_float+0x27c>
 800dace:	bf00      	nop
 800dad0:	ffffffff 	.word	0xffffffff
 800dad4:	7fefffff 	.word	0x7fefffff
 800dad8:	08011c04 	.word	0x08011c04
 800dadc:	08011c08 	.word	0x08011c08
 800dae0:	08011c0c 	.word	0x08011c0c
 800dae4:	08011c10 	.word	0x08011c10
 800dae8:	08011c14 	.word	0x08011c14
 800daec:	9a08      	ldr	r2, [sp, #32]
 800daee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800daf0:	429a      	cmp	r2, r3
 800daf2:	bfa8      	it	ge
 800daf4:	461a      	movge	r2, r3
 800daf6:	2a00      	cmp	r2, #0
 800daf8:	4691      	mov	r9, r2
 800dafa:	dc38      	bgt.n	800db6e <_printf_float+0x33e>
 800dafc:	2300      	movs	r3, #0
 800dafe:	9305      	str	r3, [sp, #20]
 800db00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db04:	f104 021a 	add.w	r2, r4, #26
 800db08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db0a:	9905      	ldr	r1, [sp, #20]
 800db0c:	9304      	str	r3, [sp, #16]
 800db0e:	eba3 0309 	sub.w	r3, r3, r9
 800db12:	428b      	cmp	r3, r1
 800db14:	dc33      	bgt.n	800db7e <_printf_float+0x34e>
 800db16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	db3c      	blt.n	800db98 <_printf_float+0x368>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	07da      	lsls	r2, r3, #31
 800db22:	d439      	bmi.n	800db98 <_printf_float+0x368>
 800db24:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800db28:	eba2 0903 	sub.w	r9, r2, r3
 800db2c:	9b04      	ldr	r3, [sp, #16]
 800db2e:	1ad2      	subs	r2, r2, r3
 800db30:	4591      	cmp	r9, r2
 800db32:	bfa8      	it	ge
 800db34:	4691      	movge	r9, r2
 800db36:	f1b9 0f00 	cmp.w	r9, #0
 800db3a:	dc35      	bgt.n	800dba8 <_printf_float+0x378>
 800db3c:	f04f 0800 	mov.w	r8, #0
 800db40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db44:	f104 0a1a 	add.w	sl, r4, #26
 800db48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db4c:	1a9b      	subs	r3, r3, r2
 800db4e:	eba3 0309 	sub.w	r3, r3, r9
 800db52:	4543      	cmp	r3, r8
 800db54:	f77f af77 	ble.w	800da46 <_printf_float+0x216>
 800db58:	2301      	movs	r3, #1
 800db5a:	4652      	mov	r2, sl
 800db5c:	4631      	mov	r1, r6
 800db5e:	4628      	mov	r0, r5
 800db60:	47b8      	blx	r7
 800db62:	3001      	adds	r0, #1
 800db64:	f43f aeb0 	beq.w	800d8c8 <_printf_float+0x98>
 800db68:	f108 0801 	add.w	r8, r8, #1
 800db6c:	e7ec      	b.n	800db48 <_printf_float+0x318>
 800db6e:	4613      	mov	r3, r2
 800db70:	4631      	mov	r1, r6
 800db72:	4642      	mov	r2, r8
 800db74:	4628      	mov	r0, r5
 800db76:	47b8      	blx	r7
 800db78:	3001      	adds	r0, #1
 800db7a:	d1bf      	bne.n	800dafc <_printf_float+0x2cc>
 800db7c:	e6a4      	b.n	800d8c8 <_printf_float+0x98>
 800db7e:	2301      	movs	r3, #1
 800db80:	4631      	mov	r1, r6
 800db82:	4628      	mov	r0, r5
 800db84:	9204      	str	r2, [sp, #16]
 800db86:	47b8      	blx	r7
 800db88:	3001      	adds	r0, #1
 800db8a:	f43f ae9d 	beq.w	800d8c8 <_printf_float+0x98>
 800db8e:	9b05      	ldr	r3, [sp, #20]
 800db90:	9a04      	ldr	r2, [sp, #16]
 800db92:	3301      	adds	r3, #1
 800db94:	9305      	str	r3, [sp, #20]
 800db96:	e7b7      	b.n	800db08 <_printf_float+0x2d8>
 800db98:	4653      	mov	r3, sl
 800db9a:	465a      	mov	r2, fp
 800db9c:	4631      	mov	r1, r6
 800db9e:	4628      	mov	r0, r5
 800dba0:	47b8      	blx	r7
 800dba2:	3001      	adds	r0, #1
 800dba4:	d1be      	bne.n	800db24 <_printf_float+0x2f4>
 800dba6:	e68f      	b.n	800d8c8 <_printf_float+0x98>
 800dba8:	9a04      	ldr	r2, [sp, #16]
 800dbaa:	464b      	mov	r3, r9
 800dbac:	4442      	add	r2, r8
 800dbae:	4631      	mov	r1, r6
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	47b8      	blx	r7
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	d1c1      	bne.n	800db3c <_printf_float+0x30c>
 800dbb8:	e686      	b.n	800d8c8 <_printf_float+0x98>
 800dbba:	9a08      	ldr	r2, [sp, #32]
 800dbbc:	2a01      	cmp	r2, #1
 800dbbe:	dc01      	bgt.n	800dbc4 <_printf_float+0x394>
 800dbc0:	07db      	lsls	r3, r3, #31
 800dbc2:	d537      	bpl.n	800dc34 <_printf_float+0x404>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	4642      	mov	r2, r8
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4628      	mov	r0, r5
 800dbcc:	47b8      	blx	r7
 800dbce:	3001      	adds	r0, #1
 800dbd0:	f43f ae7a 	beq.w	800d8c8 <_printf_float+0x98>
 800dbd4:	4653      	mov	r3, sl
 800dbd6:	465a      	mov	r2, fp
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4628      	mov	r0, r5
 800dbdc:	47b8      	blx	r7
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f43f ae72 	beq.w	800d8c8 <_printf_float+0x98>
 800dbe4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dbe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf0:	9b08      	ldr	r3, [sp, #32]
 800dbf2:	d01a      	beq.n	800dc2a <_printf_float+0x3fa>
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	f108 0201 	add.w	r2, r8, #1
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b8      	blx	r7
 800dc00:	3001      	adds	r0, #1
 800dc02:	d10e      	bne.n	800dc22 <_printf_float+0x3f2>
 800dc04:	e660      	b.n	800d8c8 <_printf_float+0x98>
 800dc06:	2301      	movs	r3, #1
 800dc08:	464a      	mov	r2, r9
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	47b8      	blx	r7
 800dc10:	3001      	adds	r0, #1
 800dc12:	f43f ae59 	beq.w	800d8c8 <_printf_float+0x98>
 800dc16:	f108 0801 	add.w	r8, r8, #1
 800dc1a:	9b08      	ldr	r3, [sp, #32]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	4543      	cmp	r3, r8
 800dc20:	dcf1      	bgt.n	800dc06 <_printf_float+0x3d6>
 800dc22:	9b04      	ldr	r3, [sp, #16]
 800dc24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc28:	e6dd      	b.n	800d9e6 <_printf_float+0x1b6>
 800dc2a:	f04f 0800 	mov.w	r8, #0
 800dc2e:	f104 091a 	add.w	r9, r4, #26
 800dc32:	e7f2      	b.n	800dc1a <_printf_float+0x3ea>
 800dc34:	2301      	movs	r3, #1
 800dc36:	4642      	mov	r2, r8
 800dc38:	e7df      	b.n	800dbfa <_printf_float+0x3ca>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	464a      	mov	r2, r9
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4628      	mov	r0, r5
 800dc42:	47b8      	blx	r7
 800dc44:	3001      	adds	r0, #1
 800dc46:	f43f ae3f 	beq.w	800d8c8 <_printf_float+0x98>
 800dc4a:	f108 0801 	add.w	r8, r8, #1
 800dc4e:	68e3      	ldr	r3, [r4, #12]
 800dc50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc52:	1a5b      	subs	r3, r3, r1
 800dc54:	4543      	cmp	r3, r8
 800dc56:	dcf0      	bgt.n	800dc3a <_printf_float+0x40a>
 800dc58:	e6f9      	b.n	800da4e <_printf_float+0x21e>
 800dc5a:	f04f 0800 	mov.w	r8, #0
 800dc5e:	f104 0919 	add.w	r9, r4, #25
 800dc62:	e7f4      	b.n	800dc4e <_printf_float+0x41e>

0800dc64 <_printf_common>:
 800dc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	4616      	mov	r6, r2
 800dc6a:	4699      	mov	r9, r3
 800dc6c:	688a      	ldr	r2, [r1, #8]
 800dc6e:	690b      	ldr	r3, [r1, #16]
 800dc70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc74:	4293      	cmp	r3, r2
 800dc76:	bfb8      	it	lt
 800dc78:	4613      	movlt	r3, r2
 800dc7a:	6033      	str	r3, [r6, #0]
 800dc7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc80:	4607      	mov	r7, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	b10a      	cbz	r2, 800dc8a <_printf_common+0x26>
 800dc86:	3301      	adds	r3, #1
 800dc88:	6033      	str	r3, [r6, #0]
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	0699      	lsls	r1, r3, #26
 800dc8e:	bf42      	ittt	mi
 800dc90:	6833      	ldrmi	r3, [r6, #0]
 800dc92:	3302      	addmi	r3, #2
 800dc94:	6033      	strmi	r3, [r6, #0]
 800dc96:	6825      	ldr	r5, [r4, #0]
 800dc98:	f015 0506 	ands.w	r5, r5, #6
 800dc9c:	d106      	bne.n	800dcac <_printf_common+0x48>
 800dc9e:	f104 0a19 	add.w	sl, r4, #25
 800dca2:	68e3      	ldr	r3, [r4, #12]
 800dca4:	6832      	ldr	r2, [r6, #0]
 800dca6:	1a9b      	subs	r3, r3, r2
 800dca8:	42ab      	cmp	r3, r5
 800dcaa:	dc26      	bgt.n	800dcfa <_printf_common+0x96>
 800dcac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcb0:	1e13      	subs	r3, r2, #0
 800dcb2:	6822      	ldr	r2, [r4, #0]
 800dcb4:	bf18      	it	ne
 800dcb6:	2301      	movne	r3, #1
 800dcb8:	0692      	lsls	r2, r2, #26
 800dcba:	d42b      	bmi.n	800dd14 <_printf_common+0xb0>
 800dcbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcc0:	4649      	mov	r1, r9
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	47c0      	blx	r8
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	d01e      	beq.n	800dd08 <_printf_common+0xa4>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	6922      	ldr	r2, [r4, #16]
 800dcce:	f003 0306 	and.w	r3, r3, #6
 800dcd2:	2b04      	cmp	r3, #4
 800dcd4:	bf02      	ittt	eq
 800dcd6:	68e5      	ldreq	r5, [r4, #12]
 800dcd8:	6833      	ldreq	r3, [r6, #0]
 800dcda:	1aed      	subeq	r5, r5, r3
 800dcdc:	68a3      	ldr	r3, [r4, #8]
 800dcde:	bf0c      	ite	eq
 800dce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dce4:	2500      	movne	r5, #0
 800dce6:	4293      	cmp	r3, r2
 800dce8:	bfc4      	itt	gt
 800dcea:	1a9b      	subgt	r3, r3, r2
 800dcec:	18ed      	addgt	r5, r5, r3
 800dcee:	2600      	movs	r6, #0
 800dcf0:	341a      	adds	r4, #26
 800dcf2:	42b5      	cmp	r5, r6
 800dcf4:	d11a      	bne.n	800dd2c <_printf_common+0xc8>
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	e008      	b.n	800dd0c <_printf_common+0xa8>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	4652      	mov	r2, sl
 800dcfe:	4649      	mov	r1, r9
 800dd00:	4638      	mov	r0, r7
 800dd02:	47c0      	blx	r8
 800dd04:	3001      	adds	r0, #1
 800dd06:	d103      	bne.n	800dd10 <_printf_common+0xac>
 800dd08:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd10:	3501      	adds	r5, #1
 800dd12:	e7c6      	b.n	800dca2 <_printf_common+0x3e>
 800dd14:	18e1      	adds	r1, r4, r3
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	2030      	movs	r0, #48	; 0x30
 800dd1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd1e:	4422      	add	r2, r4
 800dd20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd28:	3302      	adds	r3, #2
 800dd2a:	e7c7      	b.n	800dcbc <_printf_common+0x58>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	4622      	mov	r2, r4
 800dd30:	4649      	mov	r1, r9
 800dd32:	4638      	mov	r0, r7
 800dd34:	47c0      	blx	r8
 800dd36:	3001      	adds	r0, #1
 800dd38:	d0e6      	beq.n	800dd08 <_printf_common+0xa4>
 800dd3a:	3601      	adds	r6, #1
 800dd3c:	e7d9      	b.n	800dcf2 <_printf_common+0x8e>
	...

0800dd40 <_printf_i>:
 800dd40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd44:	7e0f      	ldrb	r7, [r1, #24]
 800dd46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd48:	2f78      	cmp	r7, #120	; 0x78
 800dd4a:	4691      	mov	r9, r2
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	469a      	mov	sl, r3
 800dd52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd56:	d807      	bhi.n	800dd68 <_printf_i+0x28>
 800dd58:	2f62      	cmp	r7, #98	; 0x62
 800dd5a:	d80a      	bhi.n	800dd72 <_printf_i+0x32>
 800dd5c:	2f00      	cmp	r7, #0
 800dd5e:	f000 80d4 	beq.w	800df0a <_printf_i+0x1ca>
 800dd62:	2f58      	cmp	r7, #88	; 0x58
 800dd64:	f000 80c0 	beq.w	800dee8 <_printf_i+0x1a8>
 800dd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd70:	e03a      	b.n	800dde8 <_printf_i+0xa8>
 800dd72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd76:	2b15      	cmp	r3, #21
 800dd78:	d8f6      	bhi.n	800dd68 <_printf_i+0x28>
 800dd7a:	a101      	add	r1, pc, #4	; (adr r1, 800dd80 <_printf_i+0x40>)
 800dd7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd80:	0800ddd9 	.word	0x0800ddd9
 800dd84:	0800dded 	.word	0x0800dded
 800dd88:	0800dd69 	.word	0x0800dd69
 800dd8c:	0800dd69 	.word	0x0800dd69
 800dd90:	0800dd69 	.word	0x0800dd69
 800dd94:	0800dd69 	.word	0x0800dd69
 800dd98:	0800dded 	.word	0x0800dded
 800dd9c:	0800dd69 	.word	0x0800dd69
 800dda0:	0800dd69 	.word	0x0800dd69
 800dda4:	0800dd69 	.word	0x0800dd69
 800dda8:	0800dd69 	.word	0x0800dd69
 800ddac:	0800def1 	.word	0x0800def1
 800ddb0:	0800de19 	.word	0x0800de19
 800ddb4:	0800deab 	.word	0x0800deab
 800ddb8:	0800dd69 	.word	0x0800dd69
 800ddbc:	0800dd69 	.word	0x0800dd69
 800ddc0:	0800df13 	.word	0x0800df13
 800ddc4:	0800dd69 	.word	0x0800dd69
 800ddc8:	0800de19 	.word	0x0800de19
 800ddcc:	0800dd69 	.word	0x0800dd69
 800ddd0:	0800dd69 	.word	0x0800dd69
 800ddd4:	0800deb3 	.word	0x0800deb3
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	1d1a      	adds	r2, r3, #4
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	602a      	str	r2, [r5, #0]
 800dde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dde4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dde8:	2301      	movs	r3, #1
 800ddea:	e09f      	b.n	800df2c <_printf_i+0x1ec>
 800ddec:	6820      	ldr	r0, [r4, #0]
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	0607      	lsls	r7, r0, #24
 800ddf2:	f103 0104 	add.w	r1, r3, #4
 800ddf6:	6029      	str	r1, [r5, #0]
 800ddf8:	d501      	bpl.n	800ddfe <_printf_i+0xbe>
 800ddfa:	681e      	ldr	r6, [r3, #0]
 800ddfc:	e003      	b.n	800de06 <_printf_i+0xc6>
 800ddfe:	0646      	lsls	r6, r0, #25
 800de00:	d5fb      	bpl.n	800ddfa <_printf_i+0xba>
 800de02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de06:	2e00      	cmp	r6, #0
 800de08:	da03      	bge.n	800de12 <_printf_i+0xd2>
 800de0a:	232d      	movs	r3, #45	; 0x2d
 800de0c:	4276      	negs	r6, r6
 800de0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de12:	485a      	ldr	r0, [pc, #360]	; (800df7c <_printf_i+0x23c>)
 800de14:	230a      	movs	r3, #10
 800de16:	e012      	b.n	800de3e <_printf_i+0xfe>
 800de18:	682b      	ldr	r3, [r5, #0]
 800de1a:	6820      	ldr	r0, [r4, #0]
 800de1c:	1d19      	adds	r1, r3, #4
 800de1e:	6029      	str	r1, [r5, #0]
 800de20:	0605      	lsls	r5, r0, #24
 800de22:	d501      	bpl.n	800de28 <_printf_i+0xe8>
 800de24:	681e      	ldr	r6, [r3, #0]
 800de26:	e002      	b.n	800de2e <_printf_i+0xee>
 800de28:	0641      	lsls	r1, r0, #25
 800de2a:	d5fb      	bpl.n	800de24 <_printf_i+0xe4>
 800de2c:	881e      	ldrh	r6, [r3, #0]
 800de2e:	4853      	ldr	r0, [pc, #332]	; (800df7c <_printf_i+0x23c>)
 800de30:	2f6f      	cmp	r7, #111	; 0x6f
 800de32:	bf0c      	ite	eq
 800de34:	2308      	moveq	r3, #8
 800de36:	230a      	movne	r3, #10
 800de38:	2100      	movs	r1, #0
 800de3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de3e:	6865      	ldr	r5, [r4, #4]
 800de40:	60a5      	str	r5, [r4, #8]
 800de42:	2d00      	cmp	r5, #0
 800de44:	bfa2      	ittt	ge
 800de46:	6821      	ldrge	r1, [r4, #0]
 800de48:	f021 0104 	bicge.w	r1, r1, #4
 800de4c:	6021      	strge	r1, [r4, #0]
 800de4e:	b90e      	cbnz	r6, 800de54 <_printf_i+0x114>
 800de50:	2d00      	cmp	r5, #0
 800de52:	d04b      	beq.n	800deec <_printf_i+0x1ac>
 800de54:	4615      	mov	r5, r2
 800de56:	fbb6 f1f3 	udiv	r1, r6, r3
 800de5a:	fb03 6711 	mls	r7, r3, r1, r6
 800de5e:	5dc7      	ldrb	r7, [r0, r7]
 800de60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de64:	4637      	mov	r7, r6
 800de66:	42bb      	cmp	r3, r7
 800de68:	460e      	mov	r6, r1
 800de6a:	d9f4      	bls.n	800de56 <_printf_i+0x116>
 800de6c:	2b08      	cmp	r3, #8
 800de6e:	d10b      	bne.n	800de88 <_printf_i+0x148>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	07de      	lsls	r6, r3, #31
 800de74:	d508      	bpl.n	800de88 <_printf_i+0x148>
 800de76:	6923      	ldr	r3, [r4, #16]
 800de78:	6861      	ldr	r1, [r4, #4]
 800de7a:	4299      	cmp	r1, r3
 800de7c:	bfde      	ittt	le
 800de7e:	2330      	movle	r3, #48	; 0x30
 800de80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de88:	1b52      	subs	r2, r2, r5
 800de8a:	6122      	str	r2, [r4, #16]
 800de8c:	f8cd a000 	str.w	sl, [sp]
 800de90:	464b      	mov	r3, r9
 800de92:	aa03      	add	r2, sp, #12
 800de94:	4621      	mov	r1, r4
 800de96:	4640      	mov	r0, r8
 800de98:	f7ff fee4 	bl	800dc64 <_printf_common>
 800de9c:	3001      	adds	r0, #1
 800de9e:	d14a      	bne.n	800df36 <_printf_i+0x1f6>
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	b004      	add	sp, #16
 800dea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	f043 0320 	orr.w	r3, r3, #32
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	4833      	ldr	r0, [pc, #204]	; (800df80 <_printf_i+0x240>)
 800deb4:	2778      	movs	r7, #120	; 0x78
 800deb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	6829      	ldr	r1, [r5, #0]
 800debe:	061f      	lsls	r7, r3, #24
 800dec0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dec4:	d402      	bmi.n	800decc <_printf_i+0x18c>
 800dec6:	065f      	lsls	r7, r3, #25
 800dec8:	bf48      	it	mi
 800deca:	b2b6      	uxthmi	r6, r6
 800decc:	07df      	lsls	r7, r3, #31
 800dece:	bf48      	it	mi
 800ded0:	f043 0320 	orrmi.w	r3, r3, #32
 800ded4:	6029      	str	r1, [r5, #0]
 800ded6:	bf48      	it	mi
 800ded8:	6023      	strmi	r3, [r4, #0]
 800deda:	b91e      	cbnz	r6, 800dee4 <_printf_i+0x1a4>
 800dedc:	6823      	ldr	r3, [r4, #0]
 800dede:	f023 0320 	bic.w	r3, r3, #32
 800dee2:	6023      	str	r3, [r4, #0]
 800dee4:	2310      	movs	r3, #16
 800dee6:	e7a7      	b.n	800de38 <_printf_i+0xf8>
 800dee8:	4824      	ldr	r0, [pc, #144]	; (800df7c <_printf_i+0x23c>)
 800deea:	e7e4      	b.n	800deb6 <_printf_i+0x176>
 800deec:	4615      	mov	r5, r2
 800deee:	e7bd      	b.n	800de6c <_printf_i+0x12c>
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	6826      	ldr	r6, [r4, #0]
 800def4:	6961      	ldr	r1, [r4, #20]
 800def6:	1d18      	adds	r0, r3, #4
 800def8:	6028      	str	r0, [r5, #0]
 800defa:	0635      	lsls	r5, r6, #24
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	d501      	bpl.n	800df04 <_printf_i+0x1c4>
 800df00:	6019      	str	r1, [r3, #0]
 800df02:	e002      	b.n	800df0a <_printf_i+0x1ca>
 800df04:	0670      	lsls	r0, r6, #25
 800df06:	d5fb      	bpl.n	800df00 <_printf_i+0x1c0>
 800df08:	8019      	strh	r1, [r3, #0]
 800df0a:	2300      	movs	r3, #0
 800df0c:	6123      	str	r3, [r4, #16]
 800df0e:	4615      	mov	r5, r2
 800df10:	e7bc      	b.n	800de8c <_printf_i+0x14c>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	1d1a      	adds	r2, r3, #4
 800df16:	602a      	str	r2, [r5, #0]
 800df18:	681d      	ldr	r5, [r3, #0]
 800df1a:	6862      	ldr	r2, [r4, #4]
 800df1c:	2100      	movs	r1, #0
 800df1e:	4628      	mov	r0, r5
 800df20:	f7f2 f9de 	bl	80002e0 <memchr>
 800df24:	b108      	cbz	r0, 800df2a <_printf_i+0x1ea>
 800df26:	1b40      	subs	r0, r0, r5
 800df28:	6060      	str	r0, [r4, #4]
 800df2a:	6863      	ldr	r3, [r4, #4]
 800df2c:	6123      	str	r3, [r4, #16]
 800df2e:	2300      	movs	r3, #0
 800df30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df34:	e7aa      	b.n	800de8c <_printf_i+0x14c>
 800df36:	6923      	ldr	r3, [r4, #16]
 800df38:	462a      	mov	r2, r5
 800df3a:	4649      	mov	r1, r9
 800df3c:	4640      	mov	r0, r8
 800df3e:	47d0      	blx	sl
 800df40:	3001      	adds	r0, #1
 800df42:	d0ad      	beq.n	800dea0 <_printf_i+0x160>
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	079b      	lsls	r3, r3, #30
 800df48:	d413      	bmi.n	800df72 <_printf_i+0x232>
 800df4a:	68e0      	ldr	r0, [r4, #12]
 800df4c:	9b03      	ldr	r3, [sp, #12]
 800df4e:	4298      	cmp	r0, r3
 800df50:	bfb8      	it	lt
 800df52:	4618      	movlt	r0, r3
 800df54:	e7a6      	b.n	800dea4 <_printf_i+0x164>
 800df56:	2301      	movs	r3, #1
 800df58:	4632      	mov	r2, r6
 800df5a:	4649      	mov	r1, r9
 800df5c:	4640      	mov	r0, r8
 800df5e:	47d0      	blx	sl
 800df60:	3001      	adds	r0, #1
 800df62:	d09d      	beq.n	800dea0 <_printf_i+0x160>
 800df64:	3501      	adds	r5, #1
 800df66:	68e3      	ldr	r3, [r4, #12]
 800df68:	9903      	ldr	r1, [sp, #12]
 800df6a:	1a5b      	subs	r3, r3, r1
 800df6c:	42ab      	cmp	r3, r5
 800df6e:	dcf2      	bgt.n	800df56 <_printf_i+0x216>
 800df70:	e7eb      	b.n	800df4a <_printf_i+0x20a>
 800df72:	2500      	movs	r5, #0
 800df74:	f104 0619 	add.w	r6, r4, #25
 800df78:	e7f5      	b.n	800df66 <_printf_i+0x226>
 800df7a:	bf00      	nop
 800df7c:	08011c16 	.word	0x08011c16
 800df80:	08011c27 	.word	0x08011c27

0800df84 <_scanf_float>:
 800df84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df88:	b087      	sub	sp, #28
 800df8a:	4617      	mov	r7, r2
 800df8c:	9303      	str	r3, [sp, #12]
 800df8e:	688b      	ldr	r3, [r1, #8]
 800df90:	1e5a      	subs	r2, r3, #1
 800df92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800df96:	bf83      	ittte	hi
 800df98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800df9c:	195b      	addhi	r3, r3, r5
 800df9e:	9302      	strhi	r3, [sp, #8]
 800dfa0:	2300      	movls	r3, #0
 800dfa2:	bf86      	itte	hi
 800dfa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dfa8:	608b      	strhi	r3, [r1, #8]
 800dfaa:	9302      	strls	r3, [sp, #8]
 800dfac:	680b      	ldr	r3, [r1, #0]
 800dfae:	468b      	mov	fp, r1
 800dfb0:	2500      	movs	r5, #0
 800dfb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dfb6:	f84b 3b1c 	str.w	r3, [fp], #28
 800dfba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dfbe:	4680      	mov	r8, r0
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	465e      	mov	r6, fp
 800dfc4:	46aa      	mov	sl, r5
 800dfc6:	46a9      	mov	r9, r5
 800dfc8:	9501      	str	r5, [sp, #4]
 800dfca:	68a2      	ldr	r2, [r4, #8]
 800dfcc:	b152      	cbz	r2, 800dfe4 <_scanf_float+0x60>
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b4e      	cmp	r3, #78	; 0x4e
 800dfd4:	d864      	bhi.n	800e0a0 <_scanf_float+0x11c>
 800dfd6:	2b40      	cmp	r3, #64	; 0x40
 800dfd8:	d83c      	bhi.n	800e054 <_scanf_float+0xd0>
 800dfda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dfde:	b2c8      	uxtb	r0, r1
 800dfe0:	280e      	cmp	r0, #14
 800dfe2:	d93a      	bls.n	800e05a <_scanf_float+0xd6>
 800dfe4:	f1b9 0f00 	cmp.w	r9, #0
 800dfe8:	d003      	beq.n	800dff2 <_scanf_float+0x6e>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dff6:	f1ba 0f01 	cmp.w	sl, #1
 800dffa:	f200 8113 	bhi.w	800e224 <_scanf_float+0x2a0>
 800dffe:	455e      	cmp	r6, fp
 800e000:	f200 8105 	bhi.w	800e20e <_scanf_float+0x28a>
 800e004:	2501      	movs	r5, #1
 800e006:	4628      	mov	r0, r5
 800e008:	b007      	add	sp, #28
 800e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e012:	2a0d      	cmp	r2, #13
 800e014:	d8e6      	bhi.n	800dfe4 <_scanf_float+0x60>
 800e016:	a101      	add	r1, pc, #4	; (adr r1, 800e01c <_scanf_float+0x98>)
 800e018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e01c:	0800e15b 	.word	0x0800e15b
 800e020:	0800dfe5 	.word	0x0800dfe5
 800e024:	0800dfe5 	.word	0x0800dfe5
 800e028:	0800dfe5 	.word	0x0800dfe5
 800e02c:	0800e1bb 	.word	0x0800e1bb
 800e030:	0800e193 	.word	0x0800e193
 800e034:	0800dfe5 	.word	0x0800dfe5
 800e038:	0800dfe5 	.word	0x0800dfe5
 800e03c:	0800e169 	.word	0x0800e169
 800e040:	0800dfe5 	.word	0x0800dfe5
 800e044:	0800dfe5 	.word	0x0800dfe5
 800e048:	0800dfe5 	.word	0x0800dfe5
 800e04c:	0800dfe5 	.word	0x0800dfe5
 800e050:	0800e121 	.word	0x0800e121
 800e054:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e058:	e7db      	b.n	800e012 <_scanf_float+0x8e>
 800e05a:	290e      	cmp	r1, #14
 800e05c:	d8c2      	bhi.n	800dfe4 <_scanf_float+0x60>
 800e05e:	a001      	add	r0, pc, #4	; (adr r0, 800e064 <_scanf_float+0xe0>)
 800e060:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e064:	0800e113 	.word	0x0800e113
 800e068:	0800dfe5 	.word	0x0800dfe5
 800e06c:	0800e113 	.word	0x0800e113
 800e070:	0800e1a7 	.word	0x0800e1a7
 800e074:	0800dfe5 	.word	0x0800dfe5
 800e078:	0800e0c1 	.word	0x0800e0c1
 800e07c:	0800e0fd 	.word	0x0800e0fd
 800e080:	0800e0fd 	.word	0x0800e0fd
 800e084:	0800e0fd 	.word	0x0800e0fd
 800e088:	0800e0fd 	.word	0x0800e0fd
 800e08c:	0800e0fd 	.word	0x0800e0fd
 800e090:	0800e0fd 	.word	0x0800e0fd
 800e094:	0800e0fd 	.word	0x0800e0fd
 800e098:	0800e0fd 	.word	0x0800e0fd
 800e09c:	0800e0fd 	.word	0x0800e0fd
 800e0a0:	2b6e      	cmp	r3, #110	; 0x6e
 800e0a2:	d809      	bhi.n	800e0b8 <_scanf_float+0x134>
 800e0a4:	2b60      	cmp	r3, #96	; 0x60
 800e0a6:	d8b2      	bhi.n	800e00e <_scanf_float+0x8a>
 800e0a8:	2b54      	cmp	r3, #84	; 0x54
 800e0aa:	d077      	beq.n	800e19c <_scanf_float+0x218>
 800e0ac:	2b59      	cmp	r3, #89	; 0x59
 800e0ae:	d199      	bne.n	800dfe4 <_scanf_float+0x60>
 800e0b0:	2d07      	cmp	r5, #7
 800e0b2:	d197      	bne.n	800dfe4 <_scanf_float+0x60>
 800e0b4:	2508      	movs	r5, #8
 800e0b6:	e029      	b.n	800e10c <_scanf_float+0x188>
 800e0b8:	2b74      	cmp	r3, #116	; 0x74
 800e0ba:	d06f      	beq.n	800e19c <_scanf_float+0x218>
 800e0bc:	2b79      	cmp	r3, #121	; 0x79
 800e0be:	e7f6      	b.n	800e0ae <_scanf_float+0x12a>
 800e0c0:	6821      	ldr	r1, [r4, #0]
 800e0c2:	05c8      	lsls	r0, r1, #23
 800e0c4:	d51a      	bpl.n	800e0fc <_scanf_float+0x178>
 800e0c6:	9b02      	ldr	r3, [sp, #8]
 800e0c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e0cc:	6021      	str	r1, [r4, #0]
 800e0ce:	f109 0901 	add.w	r9, r9, #1
 800e0d2:	b11b      	cbz	r3, 800e0dc <_scanf_float+0x158>
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	3201      	adds	r2, #1
 800e0d8:	9302      	str	r3, [sp, #8]
 800e0da:	60a2      	str	r2, [r4, #8]
 800e0dc:	68a3      	ldr	r3, [r4, #8]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	60a3      	str	r3, [r4, #8]
 800e0e2:	6923      	ldr	r3, [r4, #16]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	607b      	str	r3, [r7, #4]
 800e0f0:	f340 8084 	ble.w	800e1fc <_scanf_float+0x278>
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	603b      	str	r3, [r7, #0]
 800e0fa:	e766      	b.n	800dfca <_scanf_float+0x46>
 800e0fc:	eb1a 0f05 	cmn.w	sl, r5
 800e100:	f47f af70 	bne.w	800dfe4 <_scanf_float+0x60>
 800e104:	6822      	ldr	r2, [r4, #0]
 800e106:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e10a:	6022      	str	r2, [r4, #0]
 800e10c:	f806 3b01 	strb.w	r3, [r6], #1
 800e110:	e7e4      	b.n	800e0dc <_scanf_float+0x158>
 800e112:	6822      	ldr	r2, [r4, #0]
 800e114:	0610      	lsls	r0, r2, #24
 800e116:	f57f af65 	bpl.w	800dfe4 <_scanf_float+0x60>
 800e11a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e11e:	e7f4      	b.n	800e10a <_scanf_float+0x186>
 800e120:	f1ba 0f00 	cmp.w	sl, #0
 800e124:	d10e      	bne.n	800e144 <_scanf_float+0x1c0>
 800e126:	f1b9 0f00 	cmp.w	r9, #0
 800e12a:	d10e      	bne.n	800e14a <_scanf_float+0x1c6>
 800e12c:	6822      	ldr	r2, [r4, #0]
 800e12e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e132:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e136:	d108      	bne.n	800e14a <_scanf_float+0x1c6>
 800e138:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e13c:	6022      	str	r2, [r4, #0]
 800e13e:	f04f 0a01 	mov.w	sl, #1
 800e142:	e7e3      	b.n	800e10c <_scanf_float+0x188>
 800e144:	f1ba 0f02 	cmp.w	sl, #2
 800e148:	d055      	beq.n	800e1f6 <_scanf_float+0x272>
 800e14a:	2d01      	cmp	r5, #1
 800e14c:	d002      	beq.n	800e154 <_scanf_float+0x1d0>
 800e14e:	2d04      	cmp	r5, #4
 800e150:	f47f af48 	bne.w	800dfe4 <_scanf_float+0x60>
 800e154:	3501      	adds	r5, #1
 800e156:	b2ed      	uxtb	r5, r5
 800e158:	e7d8      	b.n	800e10c <_scanf_float+0x188>
 800e15a:	f1ba 0f01 	cmp.w	sl, #1
 800e15e:	f47f af41 	bne.w	800dfe4 <_scanf_float+0x60>
 800e162:	f04f 0a02 	mov.w	sl, #2
 800e166:	e7d1      	b.n	800e10c <_scanf_float+0x188>
 800e168:	b97d      	cbnz	r5, 800e18a <_scanf_float+0x206>
 800e16a:	f1b9 0f00 	cmp.w	r9, #0
 800e16e:	f47f af3c 	bne.w	800dfea <_scanf_float+0x66>
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e178:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e17c:	f47f af39 	bne.w	800dff2 <_scanf_float+0x6e>
 800e180:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e184:	6022      	str	r2, [r4, #0]
 800e186:	2501      	movs	r5, #1
 800e188:	e7c0      	b.n	800e10c <_scanf_float+0x188>
 800e18a:	2d03      	cmp	r5, #3
 800e18c:	d0e2      	beq.n	800e154 <_scanf_float+0x1d0>
 800e18e:	2d05      	cmp	r5, #5
 800e190:	e7de      	b.n	800e150 <_scanf_float+0x1cc>
 800e192:	2d02      	cmp	r5, #2
 800e194:	f47f af26 	bne.w	800dfe4 <_scanf_float+0x60>
 800e198:	2503      	movs	r5, #3
 800e19a:	e7b7      	b.n	800e10c <_scanf_float+0x188>
 800e19c:	2d06      	cmp	r5, #6
 800e19e:	f47f af21 	bne.w	800dfe4 <_scanf_float+0x60>
 800e1a2:	2507      	movs	r5, #7
 800e1a4:	e7b2      	b.n	800e10c <_scanf_float+0x188>
 800e1a6:	6822      	ldr	r2, [r4, #0]
 800e1a8:	0591      	lsls	r1, r2, #22
 800e1aa:	f57f af1b 	bpl.w	800dfe4 <_scanf_float+0x60>
 800e1ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e1b2:	6022      	str	r2, [r4, #0]
 800e1b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e1b8:	e7a8      	b.n	800e10c <_scanf_float+0x188>
 800e1ba:	6822      	ldr	r2, [r4, #0]
 800e1bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e1c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e1c4:	d006      	beq.n	800e1d4 <_scanf_float+0x250>
 800e1c6:	0550      	lsls	r0, r2, #21
 800e1c8:	f57f af0c 	bpl.w	800dfe4 <_scanf_float+0x60>
 800e1cc:	f1b9 0f00 	cmp.w	r9, #0
 800e1d0:	f43f af0f 	beq.w	800dff2 <_scanf_float+0x6e>
 800e1d4:	0591      	lsls	r1, r2, #22
 800e1d6:	bf58      	it	pl
 800e1d8:	9901      	ldrpl	r1, [sp, #4]
 800e1da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e1de:	bf58      	it	pl
 800e1e0:	eba9 0101 	subpl.w	r1, r9, r1
 800e1e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e1e8:	bf58      	it	pl
 800e1ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e1ee:	6022      	str	r2, [r4, #0]
 800e1f0:	f04f 0900 	mov.w	r9, #0
 800e1f4:	e78a      	b.n	800e10c <_scanf_float+0x188>
 800e1f6:	f04f 0a03 	mov.w	sl, #3
 800e1fa:	e787      	b.n	800e10c <_scanf_float+0x188>
 800e1fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e200:	4639      	mov	r1, r7
 800e202:	4640      	mov	r0, r8
 800e204:	4798      	blx	r3
 800e206:	2800      	cmp	r0, #0
 800e208:	f43f aedf 	beq.w	800dfca <_scanf_float+0x46>
 800e20c:	e6ea      	b.n	800dfe4 <_scanf_float+0x60>
 800e20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e212:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e216:	463a      	mov	r2, r7
 800e218:	4640      	mov	r0, r8
 800e21a:	4798      	blx	r3
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	3b01      	subs	r3, #1
 800e220:	6123      	str	r3, [r4, #16]
 800e222:	e6ec      	b.n	800dffe <_scanf_float+0x7a>
 800e224:	1e6b      	subs	r3, r5, #1
 800e226:	2b06      	cmp	r3, #6
 800e228:	d825      	bhi.n	800e276 <_scanf_float+0x2f2>
 800e22a:	2d02      	cmp	r5, #2
 800e22c:	d836      	bhi.n	800e29c <_scanf_float+0x318>
 800e22e:	455e      	cmp	r6, fp
 800e230:	f67f aee8 	bls.w	800e004 <_scanf_float+0x80>
 800e234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e238:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e23c:	463a      	mov	r2, r7
 800e23e:	4640      	mov	r0, r8
 800e240:	4798      	blx	r3
 800e242:	6923      	ldr	r3, [r4, #16]
 800e244:	3b01      	subs	r3, #1
 800e246:	6123      	str	r3, [r4, #16]
 800e248:	e7f1      	b.n	800e22e <_scanf_float+0x2aa>
 800e24a:	9802      	ldr	r0, [sp, #8]
 800e24c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e250:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e254:	9002      	str	r0, [sp, #8]
 800e256:	463a      	mov	r2, r7
 800e258:	4640      	mov	r0, r8
 800e25a:	4798      	blx	r3
 800e25c:	6923      	ldr	r3, [r4, #16]
 800e25e:	3b01      	subs	r3, #1
 800e260:	6123      	str	r3, [r4, #16]
 800e262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e266:	fa5f fa8a 	uxtb.w	sl, sl
 800e26a:	f1ba 0f02 	cmp.w	sl, #2
 800e26e:	d1ec      	bne.n	800e24a <_scanf_float+0x2c6>
 800e270:	3d03      	subs	r5, #3
 800e272:	b2ed      	uxtb	r5, r5
 800e274:	1b76      	subs	r6, r6, r5
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	05da      	lsls	r2, r3, #23
 800e27a:	d52f      	bpl.n	800e2dc <_scanf_float+0x358>
 800e27c:	055b      	lsls	r3, r3, #21
 800e27e:	d510      	bpl.n	800e2a2 <_scanf_float+0x31e>
 800e280:	455e      	cmp	r6, fp
 800e282:	f67f aebf 	bls.w	800e004 <_scanf_float+0x80>
 800e286:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e28a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e28e:	463a      	mov	r2, r7
 800e290:	4640      	mov	r0, r8
 800e292:	4798      	blx	r3
 800e294:	6923      	ldr	r3, [r4, #16]
 800e296:	3b01      	subs	r3, #1
 800e298:	6123      	str	r3, [r4, #16]
 800e29a:	e7f1      	b.n	800e280 <_scanf_float+0x2fc>
 800e29c:	46aa      	mov	sl, r5
 800e29e:	9602      	str	r6, [sp, #8]
 800e2a0:	e7df      	b.n	800e262 <_scanf_float+0x2de>
 800e2a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e2a6:	6923      	ldr	r3, [r4, #16]
 800e2a8:	2965      	cmp	r1, #101	; 0x65
 800e2aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2ae:	f106 35ff 	add.w	r5, r6, #4294967295
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	d00c      	beq.n	800e2d0 <_scanf_float+0x34c>
 800e2b6:	2945      	cmp	r1, #69	; 0x45
 800e2b8:	d00a      	beq.n	800e2d0 <_scanf_float+0x34c>
 800e2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2be:	463a      	mov	r2, r7
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	4798      	blx	r3
 800e2c4:	6923      	ldr	r3, [r4, #16]
 800e2c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	1eb5      	subs	r5, r6, #2
 800e2ce:	6123      	str	r3, [r4, #16]
 800e2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2d4:	463a      	mov	r2, r7
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	4798      	blx	r3
 800e2da:	462e      	mov	r6, r5
 800e2dc:	6825      	ldr	r5, [r4, #0]
 800e2de:	f015 0510 	ands.w	r5, r5, #16
 800e2e2:	d14d      	bne.n	800e380 <_scanf_float+0x3fc>
 800e2e4:	7035      	strb	r5, [r6, #0]
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e2ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2f0:	d11a      	bne.n	800e328 <_scanf_float+0x3a4>
 800e2f2:	9b01      	ldr	r3, [sp, #4]
 800e2f4:	454b      	cmp	r3, r9
 800e2f6:	eba3 0209 	sub.w	r2, r3, r9
 800e2fa:	d122      	bne.n	800e342 <_scanf_float+0x3be>
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	4659      	mov	r1, fp
 800e300:	4640      	mov	r0, r8
 800e302:	f002 fad7 	bl	80108b4 <_strtod_r>
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	6821      	ldr	r1, [r4, #0]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f011 0f02 	tst.w	r1, #2
 800e310:	f103 0204 	add.w	r2, r3, #4
 800e314:	d020      	beq.n	800e358 <_scanf_float+0x3d4>
 800e316:	9903      	ldr	r1, [sp, #12]
 800e318:	600a      	str	r2, [r1, #0]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	ed83 0b00 	vstr	d0, [r3]
 800e320:	68e3      	ldr	r3, [r4, #12]
 800e322:	3301      	adds	r3, #1
 800e324:	60e3      	str	r3, [r4, #12]
 800e326:	e66e      	b.n	800e006 <_scanf_float+0x82>
 800e328:	9b04      	ldr	r3, [sp, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0e6      	beq.n	800e2fc <_scanf_float+0x378>
 800e32e:	9905      	ldr	r1, [sp, #20]
 800e330:	230a      	movs	r3, #10
 800e332:	462a      	mov	r2, r5
 800e334:	3101      	adds	r1, #1
 800e336:	4640      	mov	r0, r8
 800e338:	f002 fb44 	bl	80109c4 <_strtol_r>
 800e33c:	9b04      	ldr	r3, [sp, #16]
 800e33e:	9e05      	ldr	r6, [sp, #20]
 800e340:	1ac2      	subs	r2, r0, r3
 800e342:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e346:	429e      	cmp	r6, r3
 800e348:	bf28      	it	cs
 800e34a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e34e:	490d      	ldr	r1, [pc, #52]	; (800e384 <_scanf_float+0x400>)
 800e350:	4630      	mov	r0, r6
 800e352:	f000 f8ff 	bl	800e554 <siprintf>
 800e356:	e7d1      	b.n	800e2fc <_scanf_float+0x378>
 800e358:	f011 0f04 	tst.w	r1, #4
 800e35c:	9903      	ldr	r1, [sp, #12]
 800e35e:	600a      	str	r2, [r1, #0]
 800e360:	d1db      	bne.n	800e31a <_scanf_float+0x396>
 800e362:	eeb4 0b40 	vcmp.f64	d0, d0
 800e366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36a:	681e      	ldr	r6, [r3, #0]
 800e36c:	d705      	bvc.n	800e37a <_scanf_float+0x3f6>
 800e36e:	4806      	ldr	r0, [pc, #24]	; (800e388 <_scanf_float+0x404>)
 800e370:	f000 f9e2 	bl	800e738 <nanf>
 800e374:	ed86 0a00 	vstr	s0, [r6]
 800e378:	e7d2      	b.n	800e320 <_scanf_float+0x39c>
 800e37a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e37e:	e7f9      	b.n	800e374 <_scanf_float+0x3f0>
 800e380:	2500      	movs	r5, #0
 800e382:	e640      	b.n	800e006 <_scanf_float+0x82>
 800e384:	08011c38 	.word	0x08011c38
 800e388:	08011fcd 	.word	0x08011fcd

0800e38c <std>:
 800e38c:	2300      	movs	r3, #0
 800e38e:	b510      	push	{r4, lr}
 800e390:	4604      	mov	r4, r0
 800e392:	e9c0 3300 	strd	r3, r3, [r0]
 800e396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e39a:	6083      	str	r3, [r0, #8]
 800e39c:	8181      	strh	r1, [r0, #12]
 800e39e:	6643      	str	r3, [r0, #100]	; 0x64
 800e3a0:	81c2      	strh	r2, [r0, #14]
 800e3a2:	6183      	str	r3, [r0, #24]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	2208      	movs	r2, #8
 800e3a8:	305c      	adds	r0, #92	; 0x5c
 800e3aa:	f000 f936 	bl	800e61a <memset>
 800e3ae:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <std+0x38>)
 800e3b0:	6263      	str	r3, [r4, #36]	; 0x24
 800e3b2:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <std+0x3c>)
 800e3b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3b6:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <std+0x40>)
 800e3b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3ba:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <std+0x44>)
 800e3bc:	6224      	str	r4, [r4, #32]
 800e3be:	6323      	str	r3, [r4, #48]	; 0x30
 800e3c0:	bd10      	pop	{r4, pc}
 800e3c2:	bf00      	nop
 800e3c4:	0800e595 	.word	0x0800e595
 800e3c8:	0800e5b7 	.word	0x0800e5b7
 800e3cc:	0800e5ef 	.word	0x0800e5ef
 800e3d0:	0800e613 	.word	0x0800e613

0800e3d4 <stdio_exit_handler>:
 800e3d4:	4a02      	ldr	r2, [pc, #8]	; (800e3e0 <stdio_exit_handler+0xc>)
 800e3d6:	4903      	ldr	r1, [pc, #12]	; (800e3e4 <stdio_exit_handler+0x10>)
 800e3d8:	4803      	ldr	r0, [pc, #12]	; (800e3e8 <stdio_exit_handler+0x14>)
 800e3da:	f000 b869 	b.w	800e4b0 <_fwalk_sglue>
 800e3de:	bf00      	nop
 800e3e0:	24000010 	.word	0x24000010
 800e3e4:	08010d85 	.word	0x08010d85
 800e3e8:	2400001c 	.word	0x2400001c

0800e3ec <cleanup_stdio>:
 800e3ec:	6841      	ldr	r1, [r0, #4]
 800e3ee:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <cleanup_stdio+0x34>)
 800e3f0:	4299      	cmp	r1, r3
 800e3f2:	b510      	push	{r4, lr}
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	d001      	beq.n	800e3fc <cleanup_stdio+0x10>
 800e3f8:	f002 fcc4 	bl	8010d84 <_fflush_r>
 800e3fc:	68a1      	ldr	r1, [r4, #8]
 800e3fe:	4b09      	ldr	r3, [pc, #36]	; (800e424 <cleanup_stdio+0x38>)
 800e400:	4299      	cmp	r1, r3
 800e402:	d002      	beq.n	800e40a <cleanup_stdio+0x1e>
 800e404:	4620      	mov	r0, r4
 800e406:	f002 fcbd 	bl	8010d84 <_fflush_r>
 800e40a:	68e1      	ldr	r1, [r4, #12]
 800e40c:	4b06      	ldr	r3, [pc, #24]	; (800e428 <cleanup_stdio+0x3c>)
 800e40e:	4299      	cmp	r1, r3
 800e410:	d004      	beq.n	800e41c <cleanup_stdio+0x30>
 800e412:	4620      	mov	r0, r4
 800e414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e418:	f002 bcb4 	b.w	8010d84 <_fflush_r>
 800e41c:	bd10      	pop	{r4, pc}
 800e41e:	bf00      	nop
 800e420:	24000b64 	.word	0x24000b64
 800e424:	24000bcc 	.word	0x24000bcc
 800e428:	24000c34 	.word	0x24000c34

0800e42c <global_stdio_init.part.0>:
 800e42c:	b510      	push	{r4, lr}
 800e42e:	4b0b      	ldr	r3, [pc, #44]	; (800e45c <global_stdio_init.part.0+0x30>)
 800e430:	4c0b      	ldr	r4, [pc, #44]	; (800e460 <global_stdio_init.part.0+0x34>)
 800e432:	4a0c      	ldr	r2, [pc, #48]	; (800e464 <global_stdio_init.part.0+0x38>)
 800e434:	601a      	str	r2, [r3, #0]
 800e436:	4620      	mov	r0, r4
 800e438:	2200      	movs	r2, #0
 800e43a:	2104      	movs	r1, #4
 800e43c:	f7ff ffa6 	bl	800e38c <std>
 800e440:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e444:	2201      	movs	r2, #1
 800e446:	2109      	movs	r1, #9
 800e448:	f7ff ffa0 	bl	800e38c <std>
 800e44c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e450:	2202      	movs	r2, #2
 800e452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e456:	2112      	movs	r1, #18
 800e458:	f7ff bf98 	b.w	800e38c <std>
 800e45c:	24000c9c 	.word	0x24000c9c
 800e460:	24000b64 	.word	0x24000b64
 800e464:	0800e3d5 	.word	0x0800e3d5

0800e468 <__sfp_lock_acquire>:
 800e468:	4801      	ldr	r0, [pc, #4]	; (800e470 <__sfp_lock_acquire+0x8>)
 800e46a:	f000 b963 	b.w	800e734 <__retarget_lock_acquire_recursive>
 800e46e:	bf00      	nop
 800e470:	24000ca5 	.word	0x24000ca5

0800e474 <__sfp_lock_release>:
 800e474:	4801      	ldr	r0, [pc, #4]	; (800e47c <__sfp_lock_release+0x8>)
 800e476:	f000 b95e 	b.w	800e736 <__retarget_lock_release_recursive>
 800e47a:	bf00      	nop
 800e47c:	24000ca5 	.word	0x24000ca5

0800e480 <__sinit>:
 800e480:	b510      	push	{r4, lr}
 800e482:	4604      	mov	r4, r0
 800e484:	f7ff fff0 	bl	800e468 <__sfp_lock_acquire>
 800e488:	6a23      	ldr	r3, [r4, #32]
 800e48a:	b11b      	cbz	r3, 800e494 <__sinit+0x14>
 800e48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e490:	f7ff bff0 	b.w	800e474 <__sfp_lock_release>
 800e494:	4b04      	ldr	r3, [pc, #16]	; (800e4a8 <__sinit+0x28>)
 800e496:	6223      	str	r3, [r4, #32]
 800e498:	4b04      	ldr	r3, [pc, #16]	; (800e4ac <__sinit+0x2c>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1f5      	bne.n	800e48c <__sinit+0xc>
 800e4a0:	f7ff ffc4 	bl	800e42c <global_stdio_init.part.0>
 800e4a4:	e7f2      	b.n	800e48c <__sinit+0xc>
 800e4a6:	bf00      	nop
 800e4a8:	0800e3ed 	.word	0x0800e3ed
 800e4ac:	24000c9c 	.word	0x24000c9c

0800e4b0 <_fwalk_sglue>:
 800e4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b4:	4607      	mov	r7, r0
 800e4b6:	4688      	mov	r8, r1
 800e4b8:	4614      	mov	r4, r2
 800e4ba:	2600      	movs	r6, #0
 800e4bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e4c4:	d505      	bpl.n	800e4d2 <_fwalk_sglue+0x22>
 800e4c6:	6824      	ldr	r4, [r4, #0]
 800e4c8:	2c00      	cmp	r4, #0
 800e4ca:	d1f7      	bne.n	800e4bc <_fwalk_sglue+0xc>
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d2:	89ab      	ldrh	r3, [r5, #12]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d907      	bls.n	800e4e8 <_fwalk_sglue+0x38>
 800e4d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	d003      	beq.n	800e4e8 <_fwalk_sglue+0x38>
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	47c0      	blx	r8
 800e4e6:	4306      	orrs	r6, r0
 800e4e8:	3568      	adds	r5, #104	; 0x68
 800e4ea:	e7e9      	b.n	800e4c0 <_fwalk_sglue+0x10>

0800e4ec <sniprintf>:
 800e4ec:	b40c      	push	{r2, r3}
 800e4ee:	b530      	push	{r4, r5, lr}
 800e4f0:	4b17      	ldr	r3, [pc, #92]	; (800e550 <sniprintf+0x64>)
 800e4f2:	1e0c      	subs	r4, r1, #0
 800e4f4:	681d      	ldr	r5, [r3, #0]
 800e4f6:	b09d      	sub	sp, #116	; 0x74
 800e4f8:	da08      	bge.n	800e50c <sniprintf+0x20>
 800e4fa:	238b      	movs	r3, #139	; 0x8b
 800e4fc:	602b      	str	r3, [r5, #0]
 800e4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e502:	b01d      	add	sp, #116	; 0x74
 800e504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e508:	b002      	add	sp, #8
 800e50a:	4770      	bx	lr
 800e50c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e510:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e514:	bf14      	ite	ne
 800e516:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e51a:	4623      	moveq	r3, r4
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	9307      	str	r3, [sp, #28]
 800e520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e524:	9002      	str	r0, [sp, #8]
 800e526:	9006      	str	r0, [sp, #24]
 800e528:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e52c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e52e:	ab21      	add	r3, sp, #132	; 0x84
 800e530:	a902      	add	r1, sp, #8
 800e532:	4628      	mov	r0, r5
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	f002 faa1 	bl	8010a7c <_svfiprintf_r>
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	bfbc      	itt	lt
 800e53e:	238b      	movlt	r3, #139	; 0x8b
 800e540:	602b      	strlt	r3, [r5, #0]
 800e542:	2c00      	cmp	r4, #0
 800e544:	d0dd      	beq.n	800e502 <sniprintf+0x16>
 800e546:	9b02      	ldr	r3, [sp, #8]
 800e548:	2200      	movs	r2, #0
 800e54a:	701a      	strb	r2, [r3, #0]
 800e54c:	e7d9      	b.n	800e502 <sniprintf+0x16>
 800e54e:	bf00      	nop
 800e550:	24000068 	.word	0x24000068

0800e554 <siprintf>:
 800e554:	b40e      	push	{r1, r2, r3}
 800e556:	b500      	push	{lr}
 800e558:	b09c      	sub	sp, #112	; 0x70
 800e55a:	ab1d      	add	r3, sp, #116	; 0x74
 800e55c:	9002      	str	r0, [sp, #8]
 800e55e:	9006      	str	r0, [sp, #24]
 800e560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e564:	4809      	ldr	r0, [pc, #36]	; (800e58c <siprintf+0x38>)
 800e566:	9107      	str	r1, [sp, #28]
 800e568:	9104      	str	r1, [sp, #16]
 800e56a:	4909      	ldr	r1, [pc, #36]	; (800e590 <siprintf+0x3c>)
 800e56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e570:	9105      	str	r1, [sp, #20]
 800e572:	6800      	ldr	r0, [r0, #0]
 800e574:	9301      	str	r3, [sp, #4]
 800e576:	a902      	add	r1, sp, #8
 800e578:	f002 fa80 	bl	8010a7c <_svfiprintf_r>
 800e57c:	9b02      	ldr	r3, [sp, #8]
 800e57e:	2200      	movs	r2, #0
 800e580:	701a      	strb	r2, [r3, #0]
 800e582:	b01c      	add	sp, #112	; 0x70
 800e584:	f85d eb04 	ldr.w	lr, [sp], #4
 800e588:	b003      	add	sp, #12
 800e58a:	4770      	bx	lr
 800e58c:	24000068 	.word	0x24000068
 800e590:	ffff0208 	.word	0xffff0208

0800e594 <__sread>:
 800e594:	b510      	push	{r4, lr}
 800e596:	460c      	mov	r4, r1
 800e598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e59c:	f000 f86c 	bl	800e678 <_read_r>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	bfab      	itete	ge
 800e5a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e5a8:	181b      	addge	r3, r3, r0
 800e5aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5ae:	bfac      	ite	ge
 800e5b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5b2:	81a3      	strhlt	r3, [r4, #12]
 800e5b4:	bd10      	pop	{r4, pc}

0800e5b6 <__swrite>:
 800e5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ba:	461f      	mov	r7, r3
 800e5bc:	898b      	ldrh	r3, [r1, #12]
 800e5be:	05db      	lsls	r3, r3, #23
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	460c      	mov	r4, r1
 800e5c4:	4616      	mov	r6, r2
 800e5c6:	d505      	bpl.n	800e5d4 <__swrite+0x1e>
 800e5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f000 f840 	bl	800e654 <_lseek_r>
 800e5d4:	89a3      	ldrh	r3, [r4, #12]
 800e5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5de:	81a3      	strh	r3, [r4, #12]
 800e5e0:	4632      	mov	r2, r6
 800e5e2:	463b      	mov	r3, r7
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ea:	f000 b867 	b.w	800e6bc <_write_r>

0800e5ee <__sseek>:
 800e5ee:	b510      	push	{r4, lr}
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5f6:	f000 f82d 	bl	800e654 <_lseek_r>
 800e5fa:	1c43      	adds	r3, r0, #1
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	bf15      	itete	ne
 800e600:	6560      	strne	r0, [r4, #84]	; 0x54
 800e602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e60a:	81a3      	strheq	r3, [r4, #12]
 800e60c:	bf18      	it	ne
 800e60e:	81a3      	strhne	r3, [r4, #12]
 800e610:	bd10      	pop	{r4, pc}

0800e612 <__sclose>:
 800e612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e616:	f000 b80d 	b.w	800e634 <_close_r>

0800e61a <memset>:
 800e61a:	4402      	add	r2, r0
 800e61c:	4603      	mov	r3, r0
 800e61e:	4293      	cmp	r3, r2
 800e620:	d100      	bne.n	800e624 <memset+0xa>
 800e622:	4770      	bx	lr
 800e624:	f803 1b01 	strb.w	r1, [r3], #1
 800e628:	e7f9      	b.n	800e61e <memset+0x4>
	...

0800e62c <_localeconv_r>:
 800e62c:	4800      	ldr	r0, [pc, #0]	; (800e630 <_localeconv_r+0x4>)
 800e62e:	4770      	bx	lr
 800e630:	2400015c 	.word	0x2400015c

0800e634 <_close_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d06      	ldr	r5, [pc, #24]	; (800e650 <_close_r+0x1c>)
 800e638:	2300      	movs	r3, #0
 800e63a:	4604      	mov	r4, r0
 800e63c:	4608      	mov	r0, r1
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	f7f3 fd41 	bl	80020c6 <_close>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_close_r+0x1a>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_close_r+0x1a>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	24000ca0 	.word	0x24000ca0

0800e654 <_lseek_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	4d07      	ldr	r5, [pc, #28]	; (800e674 <_lseek_r+0x20>)
 800e658:	4604      	mov	r4, r0
 800e65a:	4608      	mov	r0, r1
 800e65c:	4611      	mov	r1, r2
 800e65e:	2200      	movs	r2, #0
 800e660:	602a      	str	r2, [r5, #0]
 800e662:	461a      	mov	r2, r3
 800e664:	f7f3 fd56 	bl	8002114 <_lseek>
 800e668:	1c43      	adds	r3, r0, #1
 800e66a:	d102      	bne.n	800e672 <_lseek_r+0x1e>
 800e66c:	682b      	ldr	r3, [r5, #0]
 800e66e:	b103      	cbz	r3, 800e672 <_lseek_r+0x1e>
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	bd38      	pop	{r3, r4, r5, pc}
 800e674:	24000ca0 	.word	0x24000ca0

0800e678 <_read_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4d07      	ldr	r5, [pc, #28]	; (800e698 <_read_r+0x20>)
 800e67c:	4604      	mov	r4, r0
 800e67e:	4608      	mov	r0, r1
 800e680:	4611      	mov	r1, r2
 800e682:	2200      	movs	r2, #0
 800e684:	602a      	str	r2, [r5, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	f7f3 fce4 	bl	8002054 <_read>
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	d102      	bne.n	800e696 <_read_r+0x1e>
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	b103      	cbz	r3, 800e696 <_read_r+0x1e>
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	24000ca0 	.word	0x24000ca0

0800e69c <_sbrk_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4d06      	ldr	r5, [pc, #24]	; (800e6b8 <_sbrk_r+0x1c>)
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	4608      	mov	r0, r1
 800e6a6:	602b      	str	r3, [r5, #0]
 800e6a8:	f7f3 fd42 	bl	8002130 <_sbrk>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	d102      	bne.n	800e6b6 <_sbrk_r+0x1a>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	b103      	cbz	r3, 800e6b6 <_sbrk_r+0x1a>
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	24000ca0 	.word	0x24000ca0

0800e6bc <_write_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d07      	ldr	r5, [pc, #28]	; (800e6dc <_write_r+0x20>)
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	4608      	mov	r0, r1
 800e6c4:	4611      	mov	r1, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	602a      	str	r2, [r5, #0]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	f7f3 fcdf 	bl	800208e <_write>
 800e6d0:	1c43      	adds	r3, r0, #1
 800e6d2:	d102      	bne.n	800e6da <_write_r+0x1e>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	b103      	cbz	r3, 800e6da <_write_r+0x1e>
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	24000ca0 	.word	0x24000ca0

0800e6e0 <__errno>:
 800e6e0:	4b01      	ldr	r3, [pc, #4]	; (800e6e8 <__errno+0x8>)
 800e6e2:	6818      	ldr	r0, [r3, #0]
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	24000068 	.word	0x24000068

0800e6ec <__libc_init_array>:
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	4d0d      	ldr	r5, [pc, #52]	; (800e724 <__libc_init_array+0x38>)
 800e6f0:	4c0d      	ldr	r4, [pc, #52]	; (800e728 <__libc_init_array+0x3c>)
 800e6f2:	1b64      	subs	r4, r4, r5
 800e6f4:	10a4      	asrs	r4, r4, #2
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	42a6      	cmp	r6, r4
 800e6fa:	d109      	bne.n	800e710 <__libc_init_array+0x24>
 800e6fc:	4d0b      	ldr	r5, [pc, #44]	; (800e72c <__libc_init_array+0x40>)
 800e6fe:	4c0c      	ldr	r4, [pc, #48]	; (800e730 <__libc_init_array+0x44>)
 800e700:	f003 fa46 	bl	8011b90 <_init>
 800e704:	1b64      	subs	r4, r4, r5
 800e706:	10a4      	asrs	r4, r4, #2
 800e708:	2600      	movs	r6, #0
 800e70a:	42a6      	cmp	r6, r4
 800e70c:	d105      	bne.n	800e71a <__libc_init_array+0x2e>
 800e70e:	bd70      	pop	{r4, r5, r6, pc}
 800e710:	f855 3b04 	ldr.w	r3, [r5], #4
 800e714:	4798      	blx	r3
 800e716:	3601      	adds	r6, #1
 800e718:	e7ee      	b.n	800e6f8 <__libc_init_array+0xc>
 800e71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e71e:	4798      	blx	r3
 800e720:	3601      	adds	r6, #1
 800e722:	e7f2      	b.n	800e70a <__libc_init_array+0x1e>
 800e724:	08012038 	.word	0x08012038
 800e728:	08012038 	.word	0x08012038
 800e72c:	08012038 	.word	0x08012038
 800e730:	0801203c 	.word	0x0801203c

0800e734 <__retarget_lock_acquire_recursive>:
 800e734:	4770      	bx	lr

0800e736 <__retarget_lock_release_recursive>:
 800e736:	4770      	bx	lr

0800e738 <nanf>:
 800e738:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e740 <nanf+0x8>
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	7fc00000 	.word	0x7fc00000

0800e744 <quorem>:
 800e744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e748:	6903      	ldr	r3, [r0, #16]
 800e74a:	690c      	ldr	r4, [r1, #16]
 800e74c:	42a3      	cmp	r3, r4
 800e74e:	4607      	mov	r7, r0
 800e750:	db7e      	blt.n	800e850 <quorem+0x10c>
 800e752:	3c01      	subs	r4, #1
 800e754:	f101 0814 	add.w	r8, r1, #20
 800e758:	f100 0514 	add.w	r5, r0, #20
 800e75c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e760:	9301      	str	r3, [sp, #4]
 800e762:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e766:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e76a:	3301      	adds	r3, #1
 800e76c:	429a      	cmp	r2, r3
 800e76e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e772:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e776:	fbb2 f6f3 	udiv	r6, r2, r3
 800e77a:	d331      	bcc.n	800e7e0 <quorem+0x9c>
 800e77c:	f04f 0e00 	mov.w	lr, #0
 800e780:	4640      	mov	r0, r8
 800e782:	46ac      	mov	ip, r5
 800e784:	46f2      	mov	sl, lr
 800e786:	f850 2b04 	ldr.w	r2, [r0], #4
 800e78a:	b293      	uxth	r3, r2
 800e78c:	fb06 e303 	mla	r3, r6, r3, lr
 800e790:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e794:	0c1a      	lsrs	r2, r3, #16
 800e796:	b29b      	uxth	r3, r3
 800e798:	ebaa 0303 	sub.w	r3, sl, r3
 800e79c:	f8dc a000 	ldr.w	sl, [ip]
 800e7a0:	fa13 f38a 	uxtah	r3, r3, sl
 800e7a4:	fb06 220e 	mla	r2, r6, lr, r2
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	9b00      	ldr	r3, [sp, #0]
 800e7ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7b0:	b292      	uxth	r2, r2
 800e7b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7be:	4581      	cmp	r9, r0
 800e7c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7c4:	f84c 3b04 	str.w	r3, [ip], #4
 800e7c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7cc:	d2db      	bcs.n	800e786 <quorem+0x42>
 800e7ce:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7d2:	b92b      	cbnz	r3, 800e7e0 <quorem+0x9c>
 800e7d4:	9b01      	ldr	r3, [sp, #4]
 800e7d6:	3b04      	subs	r3, #4
 800e7d8:	429d      	cmp	r5, r3
 800e7da:	461a      	mov	r2, r3
 800e7dc:	d32c      	bcc.n	800e838 <quorem+0xf4>
 800e7de:	613c      	str	r4, [r7, #16]
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	f001 f8b7 	bl	800f954 <__mcmp>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	db22      	blt.n	800e830 <quorem+0xec>
 800e7ea:	3601      	adds	r6, #1
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7f4:	f8d1 c000 	ldr.w	ip, [r1]
 800e7f8:	b293      	uxth	r3, r2
 800e7fa:	1ac3      	subs	r3, r0, r3
 800e7fc:	0c12      	lsrs	r2, r2, #16
 800e7fe:	fa13 f38c 	uxtah	r3, r3, ip
 800e802:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e806:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e810:	45c1      	cmp	r9, r8
 800e812:	f841 3b04 	str.w	r3, [r1], #4
 800e816:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e81a:	d2e9      	bcs.n	800e7f0 <quorem+0xac>
 800e81c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e820:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e824:	b922      	cbnz	r2, 800e830 <quorem+0xec>
 800e826:	3b04      	subs	r3, #4
 800e828:	429d      	cmp	r5, r3
 800e82a:	461a      	mov	r2, r3
 800e82c:	d30a      	bcc.n	800e844 <quorem+0x100>
 800e82e:	613c      	str	r4, [r7, #16]
 800e830:	4630      	mov	r0, r6
 800e832:	b003      	add	sp, #12
 800e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e838:	6812      	ldr	r2, [r2, #0]
 800e83a:	3b04      	subs	r3, #4
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	d1ce      	bne.n	800e7de <quorem+0x9a>
 800e840:	3c01      	subs	r4, #1
 800e842:	e7c9      	b.n	800e7d8 <quorem+0x94>
 800e844:	6812      	ldr	r2, [r2, #0]
 800e846:	3b04      	subs	r3, #4
 800e848:	2a00      	cmp	r2, #0
 800e84a:	d1f0      	bne.n	800e82e <quorem+0xea>
 800e84c:	3c01      	subs	r4, #1
 800e84e:	e7eb      	b.n	800e828 <quorem+0xe4>
 800e850:	2000      	movs	r0, #0
 800e852:	e7ee      	b.n	800e832 <quorem+0xee>
 800e854:	0000      	movs	r0, r0
	...

0800e858 <_dtoa_r>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	ed2d 8b02 	vpush	{d8}
 800e860:	69c5      	ldr	r5, [r0, #28]
 800e862:	b091      	sub	sp, #68	; 0x44
 800e864:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e868:	ec59 8b10 	vmov	r8, r9, d0
 800e86c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e86e:	9106      	str	r1, [sp, #24]
 800e870:	4606      	mov	r6, r0
 800e872:	9208      	str	r2, [sp, #32]
 800e874:	930c      	str	r3, [sp, #48]	; 0x30
 800e876:	b975      	cbnz	r5, 800e896 <_dtoa_r+0x3e>
 800e878:	2010      	movs	r0, #16
 800e87a:	f7fe fe95 	bl	800d5a8 <malloc>
 800e87e:	4602      	mov	r2, r0
 800e880:	61f0      	str	r0, [r6, #28]
 800e882:	b920      	cbnz	r0, 800e88e <_dtoa_r+0x36>
 800e884:	4ba6      	ldr	r3, [pc, #664]	; (800eb20 <_dtoa_r+0x2c8>)
 800e886:	21ef      	movs	r1, #239	; 0xef
 800e888:	48a6      	ldr	r0, [pc, #664]	; (800eb24 <_dtoa_r+0x2cc>)
 800e88a:	f002 fae5 	bl	8010e58 <__assert_func>
 800e88e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e892:	6005      	str	r5, [r0, #0]
 800e894:	60c5      	str	r5, [r0, #12]
 800e896:	69f3      	ldr	r3, [r6, #28]
 800e898:	6819      	ldr	r1, [r3, #0]
 800e89a:	b151      	cbz	r1, 800e8b2 <_dtoa_r+0x5a>
 800e89c:	685a      	ldr	r2, [r3, #4]
 800e89e:	604a      	str	r2, [r1, #4]
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	4093      	lsls	r3, r2
 800e8a4:	608b      	str	r3, [r1, #8]
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f000 fdce 	bl	800f448 <_Bfree>
 800e8ac:	69f3      	ldr	r3, [r6, #28]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	601a      	str	r2, [r3, #0]
 800e8b2:	f1b9 0300 	subs.w	r3, r9, #0
 800e8b6:	bfbb      	ittet	lt
 800e8b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8bc:	9303      	strlt	r3, [sp, #12]
 800e8be:	2300      	movge	r3, #0
 800e8c0:	2201      	movlt	r2, #1
 800e8c2:	bfac      	ite	ge
 800e8c4:	6023      	strge	r3, [r4, #0]
 800e8c6:	6022      	strlt	r2, [r4, #0]
 800e8c8:	4b97      	ldr	r3, [pc, #604]	; (800eb28 <_dtoa_r+0x2d0>)
 800e8ca:	9c03      	ldr	r4, [sp, #12]
 800e8cc:	43a3      	bics	r3, r4
 800e8ce:	d11c      	bne.n	800e90a <_dtoa_r+0xb2>
 800e8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8d6:	6013      	str	r3, [r2, #0]
 800e8d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e8dc:	ea53 0308 	orrs.w	r3, r3, r8
 800e8e0:	f000 84fb 	beq.w	800f2da <_dtoa_r+0xa82>
 800e8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8e6:	b963      	cbnz	r3, 800e902 <_dtoa_r+0xaa>
 800e8e8:	4b90      	ldr	r3, [pc, #576]	; (800eb2c <_dtoa_r+0x2d4>)
 800e8ea:	e020      	b.n	800e92e <_dtoa_r+0xd6>
 800e8ec:	4b90      	ldr	r3, [pc, #576]	; (800eb30 <_dtoa_r+0x2d8>)
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	9801      	ldr	r0, [sp, #4]
 800e8f8:	b011      	add	sp, #68	; 0x44
 800e8fa:	ecbd 8b02 	vpop	{d8}
 800e8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e902:	4b8a      	ldr	r3, [pc, #552]	; (800eb2c <_dtoa_r+0x2d4>)
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	3303      	adds	r3, #3
 800e908:	e7f3      	b.n	800e8f2 <_dtoa_r+0x9a>
 800e90a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e90e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e916:	d10c      	bne.n	800e932 <_dtoa_r+0xda>
 800e918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e91a:	2301      	movs	r3, #1
 800e91c:	6013      	str	r3, [r2, #0]
 800e91e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 84d7 	beq.w	800f2d4 <_dtoa_r+0xa7c>
 800e926:	4b83      	ldr	r3, [pc, #524]	; (800eb34 <_dtoa_r+0x2dc>)
 800e928:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e92a:	6013      	str	r3, [r2, #0]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	e7e1      	b.n	800e8f6 <_dtoa_r+0x9e>
 800e932:	aa0e      	add	r2, sp, #56	; 0x38
 800e934:	a90f      	add	r1, sp, #60	; 0x3c
 800e936:	4630      	mov	r0, r6
 800e938:	eeb0 0b48 	vmov.f64	d0, d8
 800e93c:	f001 f920 	bl	800fb80 <__d2b>
 800e940:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800e944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e946:	4605      	mov	r5, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d046      	beq.n	800e9da <_dtoa_r+0x182>
 800e94c:	eeb0 7b48 	vmov.f64	d7, d8
 800e950:	ee18 1a90 	vmov	r1, s17
 800e954:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e958:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e95c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e960:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e964:	2000      	movs	r0, #0
 800e966:	ee07 1a90 	vmov	s15, r1
 800e96a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800e96e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800eb08 <_dtoa_r+0x2b0>
 800e972:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e976:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800eb10 <_dtoa_r+0x2b8>
 800e97a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e97e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800eb18 <_dtoa_r+0x2c0>
 800e982:	ee07 3a90 	vmov	s15, r3
 800e986:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e98a:	eeb0 7b46 	vmov.f64	d7, d6
 800e98e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e992:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e996:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99e:	ee16 ba90 	vmov	fp, s13
 800e9a2:	9009      	str	r0, [sp, #36]	; 0x24
 800e9a4:	d508      	bpl.n	800e9b8 <_dtoa_r+0x160>
 800e9a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e9aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800e9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b2:	bf18      	it	ne
 800e9b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e9b8:	f1bb 0f16 	cmp.w	fp, #22
 800e9bc:	d82b      	bhi.n	800ea16 <_dtoa_r+0x1be>
 800e9be:	495e      	ldr	r1, [pc, #376]	; (800eb38 <_dtoa_r+0x2e0>)
 800e9c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800e9c4:	ed91 7b00 	vldr	d7, [r1]
 800e9c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d0:	d501      	bpl.n	800e9d6 <_dtoa_r+0x17e>
 800e9d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	e01e      	b.n	800ea18 <_dtoa_r+0x1c0>
 800e9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9dc:	4413      	add	r3, r2
 800e9de:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800e9e2:	2920      	cmp	r1, #32
 800e9e4:	bfc1      	itttt	gt
 800e9e6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800e9ea:	408c      	lslgt	r4, r1
 800e9ec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800e9f0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800e9f4:	bfd6      	itet	le
 800e9f6:	f1c1 0120 	rsble	r1, r1, #32
 800e9fa:	4321      	orrgt	r1, r4
 800e9fc:	fa08 f101 	lslle.w	r1, r8, r1
 800ea00:	ee07 1a90 	vmov	s15, r1
 800ea04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	ee17 1a90 	vmov	r1, s15
 800ea0e:	2001      	movs	r0, #1
 800ea10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ea14:	e7a7      	b.n	800e966 <_dtoa_r+0x10e>
 800ea16:	2101      	movs	r1, #1
 800ea18:	1ad2      	subs	r2, r2, r3
 800ea1a:	1e53      	subs	r3, r2, #1
 800ea1c:	9305      	str	r3, [sp, #20]
 800ea1e:	bf45      	ittet	mi
 800ea20:	f1c2 0301 	rsbmi	r3, r2, #1
 800ea24:	9304      	strmi	r3, [sp, #16]
 800ea26:	2300      	movpl	r3, #0
 800ea28:	2300      	movmi	r3, #0
 800ea2a:	bf4c      	ite	mi
 800ea2c:	9305      	strmi	r3, [sp, #20]
 800ea2e:	9304      	strpl	r3, [sp, #16]
 800ea30:	f1bb 0f00 	cmp.w	fp, #0
 800ea34:	910b      	str	r1, [sp, #44]	; 0x2c
 800ea36:	db18      	blt.n	800ea6a <_dtoa_r+0x212>
 800ea38:	9b05      	ldr	r3, [sp, #20]
 800ea3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ea3e:	445b      	add	r3, fp
 800ea40:	9305      	str	r3, [sp, #20]
 800ea42:	2300      	movs	r3, #0
 800ea44:	9a06      	ldr	r2, [sp, #24]
 800ea46:	2a09      	cmp	r2, #9
 800ea48:	d848      	bhi.n	800eadc <_dtoa_r+0x284>
 800ea4a:	2a05      	cmp	r2, #5
 800ea4c:	bfc4      	itt	gt
 800ea4e:	3a04      	subgt	r2, #4
 800ea50:	9206      	strgt	r2, [sp, #24]
 800ea52:	9a06      	ldr	r2, [sp, #24]
 800ea54:	f1a2 0202 	sub.w	r2, r2, #2
 800ea58:	bfcc      	ite	gt
 800ea5a:	2400      	movgt	r4, #0
 800ea5c:	2401      	movle	r4, #1
 800ea5e:	2a03      	cmp	r2, #3
 800ea60:	d847      	bhi.n	800eaf2 <_dtoa_r+0x29a>
 800ea62:	e8df f002 	tbb	[pc, r2]
 800ea66:	2d0b      	.short	0x2d0b
 800ea68:	392b      	.short	0x392b
 800ea6a:	9b04      	ldr	r3, [sp, #16]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	eba3 030b 	sub.w	r3, r3, fp
 800ea72:	9304      	str	r3, [sp, #16]
 800ea74:	920a      	str	r2, [sp, #40]	; 0x28
 800ea76:	f1cb 0300 	rsb	r3, fp, #0
 800ea7a:	e7e3      	b.n	800ea44 <_dtoa_r+0x1ec>
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	9207      	str	r2, [sp, #28]
 800ea80:	9a08      	ldr	r2, [sp, #32]
 800ea82:	2a00      	cmp	r2, #0
 800ea84:	dc38      	bgt.n	800eaf8 <_dtoa_r+0x2a0>
 800ea86:	f04f 0a01 	mov.w	sl, #1
 800ea8a:	46d1      	mov	r9, sl
 800ea8c:	4652      	mov	r2, sl
 800ea8e:	f8cd a020 	str.w	sl, [sp, #32]
 800ea92:	69f7      	ldr	r7, [r6, #28]
 800ea94:	2100      	movs	r1, #0
 800ea96:	2004      	movs	r0, #4
 800ea98:	f100 0c14 	add.w	ip, r0, #20
 800ea9c:	4594      	cmp	ip, r2
 800ea9e:	d930      	bls.n	800eb02 <_dtoa_r+0x2aa>
 800eaa0:	6079      	str	r1, [r7, #4]
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	930d      	str	r3, [sp, #52]	; 0x34
 800eaa6:	f000 fc8f 	bl	800f3c8 <_Balloc>
 800eaaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaac:	9001      	str	r0, [sp, #4]
 800eaae:	4602      	mov	r2, r0
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d145      	bne.n	800eb40 <_dtoa_r+0x2e8>
 800eab4:	4b21      	ldr	r3, [pc, #132]	; (800eb3c <_dtoa_r+0x2e4>)
 800eab6:	f240 11af 	movw	r1, #431	; 0x1af
 800eaba:	e6e5      	b.n	800e888 <_dtoa_r+0x30>
 800eabc:	2201      	movs	r2, #1
 800eabe:	e7de      	b.n	800ea7e <_dtoa_r+0x226>
 800eac0:	2200      	movs	r2, #0
 800eac2:	9207      	str	r2, [sp, #28]
 800eac4:	9a08      	ldr	r2, [sp, #32]
 800eac6:	eb0b 0a02 	add.w	sl, fp, r2
 800eaca:	f10a 0901 	add.w	r9, sl, #1
 800eace:	464a      	mov	r2, r9
 800ead0:	2a01      	cmp	r2, #1
 800ead2:	bfb8      	it	lt
 800ead4:	2201      	movlt	r2, #1
 800ead6:	e7dc      	b.n	800ea92 <_dtoa_r+0x23a>
 800ead8:	2201      	movs	r2, #1
 800eada:	e7f2      	b.n	800eac2 <_dtoa_r+0x26a>
 800eadc:	2401      	movs	r4, #1
 800eade:	2200      	movs	r2, #0
 800eae0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800eae4:	f04f 3aff 	mov.w	sl, #4294967295
 800eae8:	2100      	movs	r1, #0
 800eaea:	46d1      	mov	r9, sl
 800eaec:	2212      	movs	r2, #18
 800eaee:	9108      	str	r1, [sp, #32]
 800eaf0:	e7cf      	b.n	800ea92 <_dtoa_r+0x23a>
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	9207      	str	r2, [sp, #28]
 800eaf6:	e7f5      	b.n	800eae4 <_dtoa_r+0x28c>
 800eaf8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800eafc:	46d1      	mov	r9, sl
 800eafe:	4652      	mov	r2, sl
 800eb00:	e7c7      	b.n	800ea92 <_dtoa_r+0x23a>
 800eb02:	3101      	adds	r1, #1
 800eb04:	0040      	lsls	r0, r0, #1
 800eb06:	e7c7      	b.n	800ea98 <_dtoa_r+0x240>
 800eb08:	636f4361 	.word	0x636f4361
 800eb0c:	3fd287a7 	.word	0x3fd287a7
 800eb10:	8b60c8b3 	.word	0x8b60c8b3
 800eb14:	3fc68a28 	.word	0x3fc68a28
 800eb18:	509f79fb 	.word	0x509f79fb
 800eb1c:	3fd34413 	.word	0x3fd34413
 800eb20:	08011c4a 	.word	0x08011c4a
 800eb24:	08011c61 	.word	0x08011c61
 800eb28:	7ff00000 	.word	0x7ff00000
 800eb2c:	08011c46 	.word	0x08011c46
 800eb30:	08011c3d 	.word	0x08011c3d
 800eb34:	08011c15 	.word	0x08011c15
 800eb38:	08011d50 	.word	0x08011d50
 800eb3c:	08011cb9 	.word	0x08011cb9
 800eb40:	69f2      	ldr	r2, [r6, #28]
 800eb42:	9901      	ldr	r1, [sp, #4]
 800eb44:	6011      	str	r1, [r2, #0]
 800eb46:	f1b9 0f0e 	cmp.w	r9, #14
 800eb4a:	d86c      	bhi.n	800ec26 <_dtoa_r+0x3ce>
 800eb4c:	2c00      	cmp	r4, #0
 800eb4e:	d06a      	beq.n	800ec26 <_dtoa_r+0x3ce>
 800eb50:	f1bb 0f00 	cmp.w	fp, #0
 800eb54:	f340 80a0 	ble.w	800ec98 <_dtoa_r+0x440>
 800eb58:	4ac1      	ldr	r2, [pc, #772]	; (800ee60 <_dtoa_r+0x608>)
 800eb5a:	f00b 010f 	and.w	r1, fp, #15
 800eb5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800eb62:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eb66:	ed92 7b00 	vldr	d7, [r2]
 800eb6a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800eb6e:	f000 8087 	beq.w	800ec80 <_dtoa_r+0x428>
 800eb72:	49bc      	ldr	r1, [pc, #752]	; (800ee64 <_dtoa_r+0x60c>)
 800eb74:	ed91 6b08 	vldr	d6, [r1, #32]
 800eb78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800eb7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800eb80:	f002 020f 	and.w	r2, r2, #15
 800eb84:	2103      	movs	r1, #3
 800eb86:	48b7      	ldr	r0, [pc, #732]	; (800ee64 <_dtoa_r+0x60c>)
 800eb88:	2a00      	cmp	r2, #0
 800eb8a:	d17b      	bne.n	800ec84 <_dtoa_r+0x42c>
 800eb8c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800eb90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eb94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb9e:	2a00      	cmp	r2, #0
 800eba0:	f000 80a0 	beq.w	800ece4 <_dtoa_r+0x48c>
 800eba4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eba8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	f140 8098 	bpl.w	800ece4 <_dtoa_r+0x48c>
 800ebb4:	f1b9 0f00 	cmp.w	r9, #0
 800ebb8:	f000 8094 	beq.w	800ece4 <_dtoa_r+0x48c>
 800ebbc:	f1ba 0f00 	cmp.w	sl, #0
 800ebc0:	dd2f      	ble.n	800ec22 <_dtoa_r+0x3ca>
 800ebc2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ebc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ebca:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ebce:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ebd2:	3101      	adds	r1, #1
 800ebd4:	4654      	mov	r4, sl
 800ebd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ebda:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ebde:	ee07 1a90 	vmov	s15, r1
 800ebe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ebe6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ebea:	ee15 7a90 	vmov	r7, s11
 800ebee:	ec51 0b15 	vmov	r0, r1, d5
 800ebf2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ebf6:	2c00      	cmp	r4, #0
 800ebf8:	d177      	bne.n	800ecea <_dtoa_r+0x492>
 800ebfa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ebfe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ec02:	ec41 0b17 	vmov	d7, r0, r1
 800ec06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	f300 826a 	bgt.w	800f0e6 <_dtoa_r+0x88e>
 800ec12:	eeb1 7b47 	vneg.f64	d7, d7
 800ec16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1e:	f100 8260 	bmi.w	800f0e2 <_dtoa_r+0x88a>
 800ec22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ec26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec28:	2a00      	cmp	r2, #0
 800ec2a:	f2c0 811d 	blt.w	800ee68 <_dtoa_r+0x610>
 800ec2e:	f1bb 0f0e 	cmp.w	fp, #14
 800ec32:	f300 8119 	bgt.w	800ee68 <_dtoa_r+0x610>
 800ec36:	4b8a      	ldr	r3, [pc, #552]	; (800ee60 <_dtoa_r+0x608>)
 800ec38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ec3c:	ed93 6b00 	vldr	d6, [r3]
 800ec40:	9b08      	ldr	r3, [sp, #32]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f280 80b7 	bge.w	800edb6 <_dtoa_r+0x55e>
 800ec48:	f1b9 0f00 	cmp.w	r9, #0
 800ec4c:	f300 80b3 	bgt.w	800edb6 <_dtoa_r+0x55e>
 800ec50:	f040 8246 	bne.w	800f0e0 <_dtoa_r+0x888>
 800ec54:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ec58:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ec5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	464c      	mov	r4, r9
 800ec6a:	464f      	mov	r7, r9
 800ec6c:	f280 821c 	bge.w	800f0a8 <_dtoa_r+0x850>
 800ec70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ec74:	2331      	movs	r3, #49	; 0x31
 800ec76:	f808 3b01 	strb.w	r3, [r8], #1
 800ec7a:	f10b 0b01 	add.w	fp, fp, #1
 800ec7e:	e218      	b.n	800f0b2 <_dtoa_r+0x85a>
 800ec80:	2102      	movs	r1, #2
 800ec82:	e780      	b.n	800eb86 <_dtoa_r+0x32e>
 800ec84:	07d4      	lsls	r4, r2, #31
 800ec86:	d504      	bpl.n	800ec92 <_dtoa_r+0x43a>
 800ec88:	ed90 6b00 	vldr	d6, [r0]
 800ec8c:	3101      	adds	r1, #1
 800ec8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec92:	1052      	asrs	r2, r2, #1
 800ec94:	3008      	adds	r0, #8
 800ec96:	e777      	b.n	800eb88 <_dtoa_r+0x330>
 800ec98:	d022      	beq.n	800ece0 <_dtoa_r+0x488>
 800ec9a:	f1cb 0200 	rsb	r2, fp, #0
 800ec9e:	4970      	ldr	r1, [pc, #448]	; (800ee60 <_dtoa_r+0x608>)
 800eca0:	f002 000f 	and.w	r0, r2, #15
 800eca4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eca8:	ed91 7b00 	vldr	d7, [r1]
 800ecac:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ecb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecb4:	486b      	ldr	r0, [pc, #428]	; (800ee64 <_dtoa_r+0x60c>)
 800ecb6:	1112      	asrs	r2, r2, #4
 800ecb8:	2400      	movs	r4, #0
 800ecba:	2102      	movs	r1, #2
 800ecbc:	b92a      	cbnz	r2, 800ecca <_dtoa_r+0x472>
 800ecbe:	2c00      	cmp	r4, #0
 800ecc0:	f43f af6a 	beq.w	800eb98 <_dtoa_r+0x340>
 800ecc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecc8:	e766      	b.n	800eb98 <_dtoa_r+0x340>
 800ecca:	07d7      	lsls	r7, r2, #31
 800eccc:	d505      	bpl.n	800ecda <_dtoa_r+0x482>
 800ecce:	ed90 6b00 	vldr	d6, [r0]
 800ecd2:	3101      	adds	r1, #1
 800ecd4:	2401      	movs	r4, #1
 800ecd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ecda:	1052      	asrs	r2, r2, #1
 800ecdc:	3008      	adds	r0, #8
 800ecde:	e7ed      	b.n	800ecbc <_dtoa_r+0x464>
 800ece0:	2102      	movs	r1, #2
 800ece2:	e759      	b.n	800eb98 <_dtoa_r+0x340>
 800ece4:	465a      	mov	r2, fp
 800ece6:	464c      	mov	r4, r9
 800ece8:	e775      	b.n	800ebd6 <_dtoa_r+0x37e>
 800ecea:	ec41 0b17 	vmov	d7, r0, r1
 800ecee:	495c      	ldr	r1, [pc, #368]	; (800ee60 <_dtoa_r+0x608>)
 800ecf0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ecf4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ecf8:	9901      	ldr	r1, [sp, #4]
 800ecfa:	440c      	add	r4, r1
 800ecfc:	9907      	ldr	r1, [sp, #28]
 800ecfe:	b351      	cbz	r1, 800ed56 <_dtoa_r+0x4fe>
 800ed00:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ed04:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ed08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ed0c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ed10:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ed14:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ed18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ed1c:	ee14 1a90 	vmov	r1, s9
 800ed20:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ed24:	3130      	adds	r1, #48	; 0x30
 800ed26:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ed2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	f808 1b01 	strb.w	r1, [r8], #1
 800ed36:	d439      	bmi.n	800edac <_dtoa_r+0x554>
 800ed38:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ed3c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	d472      	bmi.n	800ee2c <_dtoa_r+0x5d4>
 800ed46:	45a0      	cmp	r8, r4
 800ed48:	f43f af6b 	beq.w	800ec22 <_dtoa_r+0x3ca>
 800ed4c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ed50:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ed54:	e7e0      	b.n	800ed18 <_dtoa_r+0x4c0>
 800ed56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ed5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ed5e:	4620      	mov	r0, r4
 800ed60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ed64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ed68:	ee14 1a90 	vmov	r1, s9
 800ed6c:	3130      	adds	r1, #48	; 0x30
 800ed6e:	f808 1b01 	strb.w	r1, [r8], #1
 800ed72:	45a0      	cmp	r8, r4
 800ed74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ed78:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ed7c:	d118      	bne.n	800edb0 <_dtoa_r+0x558>
 800ed7e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ed82:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ed86:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ed8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8e:	dc4d      	bgt.n	800ee2c <_dtoa_r+0x5d4>
 800ed90:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ed94:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ed98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9c:	f57f af41 	bpl.w	800ec22 <_dtoa_r+0x3ca>
 800eda0:	4680      	mov	r8, r0
 800eda2:	3801      	subs	r0, #1
 800eda4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800eda8:	2b30      	cmp	r3, #48	; 0x30
 800edaa:	d0f9      	beq.n	800eda0 <_dtoa_r+0x548>
 800edac:	4693      	mov	fp, r2
 800edae:	e02a      	b.n	800ee06 <_dtoa_r+0x5ae>
 800edb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800edb4:	e7d6      	b.n	800ed64 <_dtoa_r+0x50c>
 800edb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800edba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800edbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800edc2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800edc6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800edca:	ee15 3a10 	vmov	r3, s10
 800edce:	3330      	adds	r3, #48	; 0x30
 800edd0:	f808 3b01 	strb.w	r3, [r8], #1
 800edd4:	9b01      	ldr	r3, [sp, #4]
 800edd6:	eba8 0303 	sub.w	r3, r8, r3
 800edda:	4599      	cmp	r9, r3
 800eddc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ede0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ede4:	d133      	bne.n	800ee4e <_dtoa_r+0x5f6>
 800ede6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800edea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800edee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf2:	dc1a      	bgt.n	800ee2a <_dtoa_r+0x5d2>
 800edf4:	eeb4 7b46 	vcmp.f64	d7, d6
 800edf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfc:	d103      	bne.n	800ee06 <_dtoa_r+0x5ae>
 800edfe:	ee15 3a10 	vmov	r3, s10
 800ee02:	07d9      	lsls	r1, r3, #31
 800ee04:	d411      	bmi.n	800ee2a <_dtoa_r+0x5d2>
 800ee06:	4629      	mov	r1, r5
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f000 fb1d 	bl	800f448 <_Bfree>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee12:	f888 3000 	strb.w	r3, [r8]
 800ee16:	f10b 0301 	add.w	r3, fp, #1
 800ee1a:	6013      	str	r3, [r2, #0]
 800ee1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f43f ad69 	beq.w	800e8f6 <_dtoa_r+0x9e>
 800ee24:	f8c3 8000 	str.w	r8, [r3]
 800ee28:	e565      	b.n	800e8f6 <_dtoa_r+0x9e>
 800ee2a:	465a      	mov	r2, fp
 800ee2c:	4643      	mov	r3, r8
 800ee2e:	4698      	mov	r8, r3
 800ee30:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ee34:	2939      	cmp	r1, #57	; 0x39
 800ee36:	d106      	bne.n	800ee46 <_dtoa_r+0x5ee>
 800ee38:	9901      	ldr	r1, [sp, #4]
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	d1f7      	bne.n	800ee2e <_dtoa_r+0x5d6>
 800ee3e:	9801      	ldr	r0, [sp, #4]
 800ee40:	2130      	movs	r1, #48	; 0x30
 800ee42:	3201      	adds	r2, #1
 800ee44:	7001      	strb	r1, [r0, #0]
 800ee46:	7819      	ldrb	r1, [r3, #0]
 800ee48:	3101      	adds	r1, #1
 800ee4a:	7019      	strb	r1, [r3, #0]
 800ee4c:	e7ae      	b.n	800edac <_dtoa_r+0x554>
 800ee4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5a:	d1b2      	bne.n	800edc2 <_dtoa_r+0x56a>
 800ee5c:	e7d3      	b.n	800ee06 <_dtoa_r+0x5ae>
 800ee5e:	bf00      	nop
 800ee60:	08011d50 	.word	0x08011d50
 800ee64:	08011d28 	.word	0x08011d28
 800ee68:	9907      	ldr	r1, [sp, #28]
 800ee6a:	2900      	cmp	r1, #0
 800ee6c:	f000 80d0 	beq.w	800f010 <_dtoa_r+0x7b8>
 800ee70:	9906      	ldr	r1, [sp, #24]
 800ee72:	2901      	cmp	r1, #1
 800ee74:	f300 80b4 	bgt.w	800efe0 <_dtoa_r+0x788>
 800ee78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee7a:	2900      	cmp	r1, #0
 800ee7c:	f000 80ac 	beq.w	800efd8 <_dtoa_r+0x780>
 800ee80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ee84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ee88:	461c      	mov	r4, r3
 800ee8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee8c:	9b04      	ldr	r3, [sp, #16]
 800ee8e:	4413      	add	r3, r2
 800ee90:	9304      	str	r3, [sp, #16]
 800ee92:	9b05      	ldr	r3, [sp, #20]
 800ee94:	2101      	movs	r1, #1
 800ee96:	4413      	add	r3, r2
 800ee98:	4630      	mov	r0, r6
 800ee9a:	9305      	str	r3, [sp, #20]
 800ee9c:	f000 fbd4 	bl	800f648 <__i2b>
 800eea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eea2:	4607      	mov	r7, r0
 800eea4:	f1b8 0f00 	cmp.w	r8, #0
 800eea8:	d00d      	beq.n	800eec6 <_dtoa_r+0x66e>
 800eeaa:	9a05      	ldr	r2, [sp, #20]
 800eeac:	2a00      	cmp	r2, #0
 800eeae:	dd0a      	ble.n	800eec6 <_dtoa_r+0x66e>
 800eeb0:	4542      	cmp	r2, r8
 800eeb2:	9904      	ldr	r1, [sp, #16]
 800eeb4:	bfa8      	it	ge
 800eeb6:	4642      	movge	r2, r8
 800eeb8:	1a89      	subs	r1, r1, r2
 800eeba:	9104      	str	r1, [sp, #16]
 800eebc:	9905      	ldr	r1, [sp, #20]
 800eebe:	eba8 0802 	sub.w	r8, r8, r2
 800eec2:	1a8a      	subs	r2, r1, r2
 800eec4:	9205      	str	r2, [sp, #20]
 800eec6:	b303      	cbz	r3, 800ef0a <_dtoa_r+0x6b2>
 800eec8:	9a07      	ldr	r2, [sp, #28]
 800eeca:	2a00      	cmp	r2, #0
 800eecc:	f000 80a5 	beq.w	800f01a <_dtoa_r+0x7c2>
 800eed0:	2c00      	cmp	r4, #0
 800eed2:	dd13      	ble.n	800eefc <_dtoa_r+0x6a4>
 800eed4:	4639      	mov	r1, r7
 800eed6:	4622      	mov	r2, r4
 800eed8:	4630      	mov	r0, r6
 800eeda:	930d      	str	r3, [sp, #52]	; 0x34
 800eedc:	f000 fc74 	bl	800f7c8 <__pow5mult>
 800eee0:	462a      	mov	r2, r5
 800eee2:	4601      	mov	r1, r0
 800eee4:	4607      	mov	r7, r0
 800eee6:	4630      	mov	r0, r6
 800eee8:	f000 fbc4 	bl	800f674 <__multiply>
 800eeec:	4629      	mov	r1, r5
 800eeee:	9009      	str	r0, [sp, #36]	; 0x24
 800eef0:	4630      	mov	r0, r6
 800eef2:	f000 faa9 	bl	800f448 <_Bfree>
 800eef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eefa:	4615      	mov	r5, r2
 800eefc:	1b1a      	subs	r2, r3, r4
 800eefe:	d004      	beq.n	800ef0a <_dtoa_r+0x6b2>
 800ef00:	4629      	mov	r1, r5
 800ef02:	4630      	mov	r0, r6
 800ef04:	f000 fc60 	bl	800f7c8 <__pow5mult>
 800ef08:	4605      	mov	r5, r0
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f000 fb9b 	bl	800f648 <__i2b>
 800ef12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	4604      	mov	r4, r0
 800ef18:	f340 8081 	ble.w	800f01e <_dtoa_r+0x7c6>
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4601      	mov	r1, r0
 800ef20:	4630      	mov	r0, r6
 800ef22:	f000 fc51 	bl	800f7c8 <__pow5mult>
 800ef26:	9b06      	ldr	r3, [sp, #24]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	dd7a      	ble.n	800f024 <_dtoa_r+0x7cc>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	9309      	str	r3, [sp, #36]	; 0x24
 800ef32:	6922      	ldr	r2, [r4, #16]
 800ef34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ef38:	6910      	ldr	r0, [r2, #16]
 800ef3a:	f000 fb37 	bl	800f5ac <__hi0bits>
 800ef3e:	f1c0 0020 	rsb	r0, r0, #32
 800ef42:	9b05      	ldr	r3, [sp, #20]
 800ef44:	4418      	add	r0, r3
 800ef46:	f010 001f 	ands.w	r0, r0, #31
 800ef4a:	f000 8093 	beq.w	800f074 <_dtoa_r+0x81c>
 800ef4e:	f1c0 0220 	rsb	r2, r0, #32
 800ef52:	2a04      	cmp	r2, #4
 800ef54:	f340 8085 	ble.w	800f062 <_dtoa_r+0x80a>
 800ef58:	9b04      	ldr	r3, [sp, #16]
 800ef5a:	f1c0 001c 	rsb	r0, r0, #28
 800ef5e:	4403      	add	r3, r0
 800ef60:	9304      	str	r3, [sp, #16]
 800ef62:	9b05      	ldr	r3, [sp, #20]
 800ef64:	4480      	add	r8, r0
 800ef66:	4403      	add	r3, r0
 800ef68:	9305      	str	r3, [sp, #20]
 800ef6a:	9b04      	ldr	r3, [sp, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dd05      	ble.n	800ef7c <_dtoa_r+0x724>
 800ef70:	4629      	mov	r1, r5
 800ef72:	461a      	mov	r2, r3
 800ef74:	4630      	mov	r0, r6
 800ef76:	f000 fc81 	bl	800f87c <__lshift>
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	9b05      	ldr	r3, [sp, #20]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	dd05      	ble.n	800ef8e <_dtoa_r+0x736>
 800ef82:	4621      	mov	r1, r4
 800ef84:	461a      	mov	r2, r3
 800ef86:	4630      	mov	r0, r6
 800ef88:	f000 fc78 	bl	800f87c <__lshift>
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d071      	beq.n	800f078 <_dtoa_r+0x820>
 800ef94:	4621      	mov	r1, r4
 800ef96:	4628      	mov	r0, r5
 800ef98:	f000 fcdc 	bl	800f954 <__mcmp>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	da6b      	bge.n	800f078 <_dtoa_r+0x820>
 800efa0:	2300      	movs	r3, #0
 800efa2:	4629      	mov	r1, r5
 800efa4:	220a      	movs	r2, #10
 800efa6:	4630      	mov	r0, r6
 800efa8:	f000 fa70 	bl	800f48c <__multadd>
 800efac:	9b07      	ldr	r3, [sp, #28]
 800efae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efb2:	4605      	mov	r5, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	f000 8197 	beq.w	800f2e8 <_dtoa_r+0xa90>
 800efba:	4639      	mov	r1, r7
 800efbc:	2300      	movs	r3, #0
 800efbe:	220a      	movs	r2, #10
 800efc0:	4630      	mov	r0, r6
 800efc2:	f000 fa63 	bl	800f48c <__multadd>
 800efc6:	f1ba 0f00 	cmp.w	sl, #0
 800efca:	4607      	mov	r7, r0
 800efcc:	f300 8093 	bgt.w	800f0f6 <_dtoa_r+0x89e>
 800efd0:	9b06      	ldr	r3, [sp, #24]
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	dc57      	bgt.n	800f086 <_dtoa_r+0x82e>
 800efd6:	e08e      	b.n	800f0f6 <_dtoa_r+0x89e>
 800efd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800efde:	e751      	b.n	800ee84 <_dtoa_r+0x62c>
 800efe0:	f109 34ff 	add.w	r4, r9, #4294967295
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	bfbf      	itttt	lt
 800efe8:	1ae2      	sublt	r2, r4, r3
 800efea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800efec:	189b      	addlt	r3, r3, r2
 800efee:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eff0:	bfae      	itee	ge
 800eff2:	1b1c      	subge	r4, r3, r4
 800eff4:	4623      	movlt	r3, r4
 800eff6:	2400      	movlt	r4, #0
 800eff8:	f1b9 0f00 	cmp.w	r9, #0
 800effc:	bfb5      	itete	lt
 800effe:	9a04      	ldrlt	r2, [sp, #16]
 800f000:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f004:	eba2 0809 	sublt.w	r8, r2, r9
 800f008:	464a      	movge	r2, r9
 800f00a:	bfb8      	it	lt
 800f00c:	2200      	movlt	r2, #0
 800f00e:	e73c      	b.n	800ee8a <_dtoa_r+0x632>
 800f010:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f014:	9f07      	ldr	r7, [sp, #28]
 800f016:	461c      	mov	r4, r3
 800f018:	e744      	b.n	800eea4 <_dtoa_r+0x64c>
 800f01a:	461a      	mov	r2, r3
 800f01c:	e770      	b.n	800ef00 <_dtoa_r+0x6a8>
 800f01e:	9b06      	ldr	r3, [sp, #24]
 800f020:	2b01      	cmp	r3, #1
 800f022:	dc18      	bgt.n	800f056 <_dtoa_r+0x7fe>
 800f024:	9b02      	ldr	r3, [sp, #8]
 800f026:	b9b3      	cbnz	r3, 800f056 <_dtoa_r+0x7fe>
 800f028:	9b03      	ldr	r3, [sp, #12]
 800f02a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f02e:	b9a2      	cbnz	r2, 800f05a <_dtoa_r+0x802>
 800f030:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f034:	0d12      	lsrs	r2, r2, #20
 800f036:	0512      	lsls	r2, r2, #20
 800f038:	b18a      	cbz	r2, 800f05e <_dtoa_r+0x806>
 800f03a:	9b04      	ldr	r3, [sp, #16]
 800f03c:	3301      	adds	r3, #1
 800f03e:	9304      	str	r3, [sp, #16]
 800f040:	9b05      	ldr	r3, [sp, #20]
 800f042:	3301      	adds	r3, #1
 800f044:	9305      	str	r3, [sp, #20]
 800f046:	2301      	movs	r3, #1
 800f048:	9309      	str	r3, [sp, #36]	; 0x24
 800f04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f47f af70 	bne.w	800ef32 <_dtoa_r+0x6da>
 800f052:	2001      	movs	r0, #1
 800f054:	e775      	b.n	800ef42 <_dtoa_r+0x6ea>
 800f056:	2300      	movs	r3, #0
 800f058:	e7f6      	b.n	800f048 <_dtoa_r+0x7f0>
 800f05a:	9b02      	ldr	r3, [sp, #8]
 800f05c:	e7f4      	b.n	800f048 <_dtoa_r+0x7f0>
 800f05e:	9209      	str	r2, [sp, #36]	; 0x24
 800f060:	e7f3      	b.n	800f04a <_dtoa_r+0x7f2>
 800f062:	d082      	beq.n	800ef6a <_dtoa_r+0x712>
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	321c      	adds	r2, #28
 800f068:	4413      	add	r3, r2
 800f06a:	9304      	str	r3, [sp, #16]
 800f06c:	9b05      	ldr	r3, [sp, #20]
 800f06e:	4490      	add	r8, r2
 800f070:	4413      	add	r3, r2
 800f072:	e779      	b.n	800ef68 <_dtoa_r+0x710>
 800f074:	4602      	mov	r2, r0
 800f076:	e7f5      	b.n	800f064 <_dtoa_r+0x80c>
 800f078:	f1b9 0f00 	cmp.w	r9, #0
 800f07c:	dc36      	bgt.n	800f0ec <_dtoa_r+0x894>
 800f07e:	9b06      	ldr	r3, [sp, #24]
 800f080:	2b02      	cmp	r3, #2
 800f082:	dd33      	ble.n	800f0ec <_dtoa_r+0x894>
 800f084:	46ca      	mov	sl, r9
 800f086:	f1ba 0f00 	cmp.w	sl, #0
 800f08a:	d10d      	bne.n	800f0a8 <_dtoa_r+0x850>
 800f08c:	4621      	mov	r1, r4
 800f08e:	4653      	mov	r3, sl
 800f090:	2205      	movs	r2, #5
 800f092:	4630      	mov	r0, r6
 800f094:	f000 f9fa 	bl	800f48c <__multadd>
 800f098:	4601      	mov	r1, r0
 800f09a:	4604      	mov	r4, r0
 800f09c:	4628      	mov	r0, r5
 800f09e:	f000 fc59 	bl	800f954 <__mcmp>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f73f ade4 	bgt.w	800ec70 <_dtoa_r+0x418>
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f0ae:	ea6f 0b03 	mvn.w	fp, r3
 800f0b2:	f04f 0900 	mov.w	r9, #0
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f000 f9c5 	bl	800f448 <_Bfree>
 800f0be:	2f00      	cmp	r7, #0
 800f0c0:	f43f aea1 	beq.w	800ee06 <_dtoa_r+0x5ae>
 800f0c4:	f1b9 0f00 	cmp.w	r9, #0
 800f0c8:	d005      	beq.n	800f0d6 <_dtoa_r+0x87e>
 800f0ca:	45b9      	cmp	r9, r7
 800f0cc:	d003      	beq.n	800f0d6 <_dtoa_r+0x87e>
 800f0ce:	4649      	mov	r1, r9
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f000 f9b9 	bl	800f448 <_Bfree>
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f000 f9b5 	bl	800f448 <_Bfree>
 800f0de:	e692      	b.n	800ee06 <_dtoa_r+0x5ae>
 800f0e0:	2400      	movs	r4, #0
 800f0e2:	4627      	mov	r7, r4
 800f0e4:	e7e0      	b.n	800f0a8 <_dtoa_r+0x850>
 800f0e6:	4693      	mov	fp, r2
 800f0e8:	4627      	mov	r7, r4
 800f0ea:	e5c1      	b.n	800ec70 <_dtoa_r+0x418>
 800f0ec:	9b07      	ldr	r3, [sp, #28]
 800f0ee:	46ca      	mov	sl, r9
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 8100 	beq.w	800f2f6 <_dtoa_r+0xa9e>
 800f0f6:	f1b8 0f00 	cmp.w	r8, #0
 800f0fa:	dd05      	ble.n	800f108 <_dtoa_r+0x8b0>
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	4642      	mov	r2, r8
 800f100:	4630      	mov	r0, r6
 800f102:	f000 fbbb 	bl	800f87c <__lshift>
 800f106:	4607      	mov	r7, r0
 800f108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d05d      	beq.n	800f1ca <_dtoa_r+0x972>
 800f10e:	6879      	ldr	r1, [r7, #4]
 800f110:	4630      	mov	r0, r6
 800f112:	f000 f959 	bl	800f3c8 <_Balloc>
 800f116:	4680      	mov	r8, r0
 800f118:	b928      	cbnz	r0, 800f126 <_dtoa_r+0x8ce>
 800f11a:	4b82      	ldr	r3, [pc, #520]	; (800f324 <_dtoa_r+0xacc>)
 800f11c:	4602      	mov	r2, r0
 800f11e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f122:	f7ff bbb1 	b.w	800e888 <_dtoa_r+0x30>
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	3202      	adds	r2, #2
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	f107 010c 	add.w	r1, r7, #12
 800f130:	300c      	adds	r0, #12
 800f132:	f001 fe7b 	bl	8010e2c <memcpy>
 800f136:	2201      	movs	r2, #1
 800f138:	4641      	mov	r1, r8
 800f13a:	4630      	mov	r0, r6
 800f13c:	f000 fb9e 	bl	800f87c <__lshift>
 800f140:	9b01      	ldr	r3, [sp, #4]
 800f142:	3301      	adds	r3, #1
 800f144:	9304      	str	r3, [sp, #16]
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	4453      	add	r3, sl
 800f14a:	9308      	str	r3, [sp, #32]
 800f14c:	9b02      	ldr	r3, [sp, #8]
 800f14e:	f003 0301 	and.w	r3, r3, #1
 800f152:	46b9      	mov	r9, r7
 800f154:	9307      	str	r3, [sp, #28]
 800f156:	4607      	mov	r7, r0
 800f158:	9b04      	ldr	r3, [sp, #16]
 800f15a:	4621      	mov	r1, r4
 800f15c:	3b01      	subs	r3, #1
 800f15e:	4628      	mov	r0, r5
 800f160:	9302      	str	r3, [sp, #8]
 800f162:	f7ff faef 	bl	800e744 <quorem>
 800f166:	4603      	mov	r3, r0
 800f168:	3330      	adds	r3, #48	; 0x30
 800f16a:	9005      	str	r0, [sp, #20]
 800f16c:	4649      	mov	r1, r9
 800f16e:	4628      	mov	r0, r5
 800f170:	9309      	str	r3, [sp, #36]	; 0x24
 800f172:	f000 fbef 	bl	800f954 <__mcmp>
 800f176:	463a      	mov	r2, r7
 800f178:	4682      	mov	sl, r0
 800f17a:	4621      	mov	r1, r4
 800f17c:	4630      	mov	r0, r6
 800f17e:	f000 fc05 	bl	800f98c <__mdiff>
 800f182:	68c2      	ldr	r2, [r0, #12]
 800f184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f186:	4680      	mov	r8, r0
 800f188:	bb0a      	cbnz	r2, 800f1ce <_dtoa_r+0x976>
 800f18a:	4601      	mov	r1, r0
 800f18c:	4628      	mov	r0, r5
 800f18e:	f000 fbe1 	bl	800f954 <__mcmp>
 800f192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f194:	4602      	mov	r2, r0
 800f196:	4641      	mov	r1, r8
 800f198:	4630      	mov	r0, r6
 800f19a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f19e:	f000 f953 	bl	800f448 <_Bfree>
 800f1a2:	9b06      	ldr	r3, [sp, #24]
 800f1a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f1aa:	ea43 0102 	orr.w	r1, r3, r2
 800f1ae:	9b07      	ldr	r3, [sp, #28]
 800f1b0:	4319      	orrs	r1, r3
 800f1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b4:	d10d      	bne.n	800f1d2 <_dtoa_r+0x97a>
 800f1b6:	2b39      	cmp	r3, #57	; 0x39
 800f1b8:	d029      	beq.n	800f20e <_dtoa_r+0x9b6>
 800f1ba:	f1ba 0f00 	cmp.w	sl, #0
 800f1be:	dd01      	ble.n	800f1c4 <_dtoa_r+0x96c>
 800f1c0:	9b05      	ldr	r3, [sp, #20]
 800f1c2:	3331      	adds	r3, #49	; 0x31
 800f1c4:	9a02      	ldr	r2, [sp, #8]
 800f1c6:	7013      	strb	r3, [r2, #0]
 800f1c8:	e775      	b.n	800f0b6 <_dtoa_r+0x85e>
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	e7b8      	b.n	800f140 <_dtoa_r+0x8e8>
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	e7e1      	b.n	800f196 <_dtoa_r+0x93e>
 800f1d2:	f1ba 0f00 	cmp.w	sl, #0
 800f1d6:	db06      	blt.n	800f1e6 <_dtoa_r+0x98e>
 800f1d8:	9906      	ldr	r1, [sp, #24]
 800f1da:	ea41 0a0a 	orr.w	sl, r1, sl
 800f1de:	9907      	ldr	r1, [sp, #28]
 800f1e0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800f1e4:	d120      	bne.n	800f228 <_dtoa_r+0x9d0>
 800f1e6:	2a00      	cmp	r2, #0
 800f1e8:	ddec      	ble.n	800f1c4 <_dtoa_r+0x96c>
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	9304      	str	r3, [sp, #16]
 800f1f2:	f000 fb43 	bl	800f87c <__lshift>
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	f000 fbab 	bl	800f954 <__mcmp>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	9b04      	ldr	r3, [sp, #16]
 800f202:	dc02      	bgt.n	800f20a <_dtoa_r+0x9b2>
 800f204:	d1de      	bne.n	800f1c4 <_dtoa_r+0x96c>
 800f206:	07da      	lsls	r2, r3, #31
 800f208:	d5dc      	bpl.n	800f1c4 <_dtoa_r+0x96c>
 800f20a:	2b39      	cmp	r3, #57	; 0x39
 800f20c:	d1d8      	bne.n	800f1c0 <_dtoa_r+0x968>
 800f20e:	9a02      	ldr	r2, [sp, #8]
 800f210:	2339      	movs	r3, #57	; 0x39
 800f212:	7013      	strb	r3, [r2, #0]
 800f214:	4643      	mov	r3, r8
 800f216:	4698      	mov	r8, r3
 800f218:	3b01      	subs	r3, #1
 800f21a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f21e:	2a39      	cmp	r2, #57	; 0x39
 800f220:	d051      	beq.n	800f2c6 <_dtoa_r+0xa6e>
 800f222:	3201      	adds	r2, #1
 800f224:	701a      	strb	r2, [r3, #0]
 800f226:	e746      	b.n	800f0b6 <_dtoa_r+0x85e>
 800f228:	2a00      	cmp	r2, #0
 800f22a:	dd03      	ble.n	800f234 <_dtoa_r+0x9dc>
 800f22c:	2b39      	cmp	r3, #57	; 0x39
 800f22e:	d0ee      	beq.n	800f20e <_dtoa_r+0x9b6>
 800f230:	3301      	adds	r3, #1
 800f232:	e7c7      	b.n	800f1c4 <_dtoa_r+0x96c>
 800f234:	9a04      	ldr	r2, [sp, #16]
 800f236:	9908      	ldr	r1, [sp, #32]
 800f238:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f23c:	428a      	cmp	r2, r1
 800f23e:	d02b      	beq.n	800f298 <_dtoa_r+0xa40>
 800f240:	4629      	mov	r1, r5
 800f242:	2300      	movs	r3, #0
 800f244:	220a      	movs	r2, #10
 800f246:	4630      	mov	r0, r6
 800f248:	f000 f920 	bl	800f48c <__multadd>
 800f24c:	45b9      	cmp	r9, r7
 800f24e:	4605      	mov	r5, r0
 800f250:	f04f 0300 	mov.w	r3, #0
 800f254:	f04f 020a 	mov.w	r2, #10
 800f258:	4649      	mov	r1, r9
 800f25a:	4630      	mov	r0, r6
 800f25c:	d107      	bne.n	800f26e <_dtoa_r+0xa16>
 800f25e:	f000 f915 	bl	800f48c <__multadd>
 800f262:	4681      	mov	r9, r0
 800f264:	4607      	mov	r7, r0
 800f266:	9b04      	ldr	r3, [sp, #16]
 800f268:	3301      	adds	r3, #1
 800f26a:	9304      	str	r3, [sp, #16]
 800f26c:	e774      	b.n	800f158 <_dtoa_r+0x900>
 800f26e:	f000 f90d 	bl	800f48c <__multadd>
 800f272:	4639      	mov	r1, r7
 800f274:	4681      	mov	r9, r0
 800f276:	2300      	movs	r3, #0
 800f278:	220a      	movs	r2, #10
 800f27a:	4630      	mov	r0, r6
 800f27c:	f000 f906 	bl	800f48c <__multadd>
 800f280:	4607      	mov	r7, r0
 800f282:	e7f0      	b.n	800f266 <_dtoa_r+0xa0e>
 800f284:	f1ba 0f00 	cmp.w	sl, #0
 800f288:	9a01      	ldr	r2, [sp, #4]
 800f28a:	bfcc      	ite	gt
 800f28c:	46d0      	movgt	r8, sl
 800f28e:	f04f 0801 	movle.w	r8, #1
 800f292:	4490      	add	r8, r2
 800f294:	f04f 0900 	mov.w	r9, #0
 800f298:	4629      	mov	r1, r5
 800f29a:	2201      	movs	r2, #1
 800f29c:	4630      	mov	r0, r6
 800f29e:	9302      	str	r3, [sp, #8]
 800f2a0:	f000 faec 	bl	800f87c <__lshift>
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4605      	mov	r5, r0
 800f2a8:	f000 fb54 	bl	800f954 <__mcmp>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	dcb1      	bgt.n	800f214 <_dtoa_r+0x9bc>
 800f2b0:	d102      	bne.n	800f2b8 <_dtoa_r+0xa60>
 800f2b2:	9b02      	ldr	r3, [sp, #8]
 800f2b4:	07db      	lsls	r3, r3, #31
 800f2b6:	d4ad      	bmi.n	800f214 <_dtoa_r+0x9bc>
 800f2b8:	4643      	mov	r3, r8
 800f2ba:	4698      	mov	r8, r3
 800f2bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2c0:	2a30      	cmp	r2, #48	; 0x30
 800f2c2:	d0fa      	beq.n	800f2ba <_dtoa_r+0xa62>
 800f2c4:	e6f7      	b.n	800f0b6 <_dtoa_r+0x85e>
 800f2c6:	9a01      	ldr	r2, [sp, #4]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d1a4      	bne.n	800f216 <_dtoa_r+0x9be>
 800f2cc:	f10b 0b01 	add.w	fp, fp, #1
 800f2d0:	2331      	movs	r3, #49	; 0x31
 800f2d2:	e778      	b.n	800f1c6 <_dtoa_r+0x96e>
 800f2d4:	4b14      	ldr	r3, [pc, #80]	; (800f328 <_dtoa_r+0xad0>)
 800f2d6:	f7ff bb2a 	b.w	800e92e <_dtoa_r+0xd6>
 800f2da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f47f ab05 	bne.w	800e8ec <_dtoa_r+0x94>
 800f2e2:	4b12      	ldr	r3, [pc, #72]	; (800f32c <_dtoa_r+0xad4>)
 800f2e4:	f7ff bb23 	b.w	800e92e <_dtoa_r+0xd6>
 800f2e8:	f1ba 0f00 	cmp.w	sl, #0
 800f2ec:	dc03      	bgt.n	800f2f6 <_dtoa_r+0xa9e>
 800f2ee:	9b06      	ldr	r3, [sp, #24]
 800f2f0:	2b02      	cmp	r3, #2
 800f2f2:	f73f aec8 	bgt.w	800f086 <_dtoa_r+0x82e>
 800f2f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f7ff fa21 	bl	800e744 <quorem>
 800f302:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f306:	f808 3b01 	strb.w	r3, [r8], #1
 800f30a:	9a01      	ldr	r2, [sp, #4]
 800f30c:	eba8 0202 	sub.w	r2, r8, r2
 800f310:	4592      	cmp	sl, r2
 800f312:	ddb7      	ble.n	800f284 <_dtoa_r+0xa2c>
 800f314:	4629      	mov	r1, r5
 800f316:	2300      	movs	r3, #0
 800f318:	220a      	movs	r2, #10
 800f31a:	4630      	mov	r0, r6
 800f31c:	f000 f8b6 	bl	800f48c <__multadd>
 800f320:	4605      	mov	r5, r0
 800f322:	e7ea      	b.n	800f2fa <_dtoa_r+0xaa2>
 800f324:	08011cb9 	.word	0x08011cb9
 800f328:	08011c14 	.word	0x08011c14
 800f32c:	08011c3d 	.word	0x08011c3d

0800f330 <_free_r>:
 800f330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f332:	2900      	cmp	r1, #0
 800f334:	d044      	beq.n	800f3c0 <_free_r+0x90>
 800f336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f33a:	9001      	str	r0, [sp, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f1a1 0404 	sub.w	r4, r1, #4
 800f342:	bfb8      	it	lt
 800f344:	18e4      	addlt	r4, r4, r3
 800f346:	f7fe f9d7 	bl	800d6f8 <__malloc_lock>
 800f34a:	4a1e      	ldr	r2, [pc, #120]	; (800f3c4 <_free_r+0x94>)
 800f34c:	9801      	ldr	r0, [sp, #4]
 800f34e:	6813      	ldr	r3, [r2, #0]
 800f350:	b933      	cbnz	r3, 800f360 <_free_r+0x30>
 800f352:	6063      	str	r3, [r4, #4]
 800f354:	6014      	str	r4, [r2, #0]
 800f356:	b003      	add	sp, #12
 800f358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f35c:	f7fe b9d2 	b.w	800d704 <__malloc_unlock>
 800f360:	42a3      	cmp	r3, r4
 800f362:	d908      	bls.n	800f376 <_free_r+0x46>
 800f364:	6825      	ldr	r5, [r4, #0]
 800f366:	1961      	adds	r1, r4, r5
 800f368:	428b      	cmp	r3, r1
 800f36a:	bf01      	itttt	eq
 800f36c:	6819      	ldreq	r1, [r3, #0]
 800f36e:	685b      	ldreq	r3, [r3, #4]
 800f370:	1949      	addeq	r1, r1, r5
 800f372:	6021      	streq	r1, [r4, #0]
 800f374:	e7ed      	b.n	800f352 <_free_r+0x22>
 800f376:	461a      	mov	r2, r3
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	b10b      	cbz	r3, 800f380 <_free_r+0x50>
 800f37c:	42a3      	cmp	r3, r4
 800f37e:	d9fa      	bls.n	800f376 <_free_r+0x46>
 800f380:	6811      	ldr	r1, [r2, #0]
 800f382:	1855      	adds	r5, r2, r1
 800f384:	42a5      	cmp	r5, r4
 800f386:	d10b      	bne.n	800f3a0 <_free_r+0x70>
 800f388:	6824      	ldr	r4, [r4, #0]
 800f38a:	4421      	add	r1, r4
 800f38c:	1854      	adds	r4, r2, r1
 800f38e:	42a3      	cmp	r3, r4
 800f390:	6011      	str	r1, [r2, #0]
 800f392:	d1e0      	bne.n	800f356 <_free_r+0x26>
 800f394:	681c      	ldr	r4, [r3, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	6053      	str	r3, [r2, #4]
 800f39a:	440c      	add	r4, r1
 800f39c:	6014      	str	r4, [r2, #0]
 800f39e:	e7da      	b.n	800f356 <_free_r+0x26>
 800f3a0:	d902      	bls.n	800f3a8 <_free_r+0x78>
 800f3a2:	230c      	movs	r3, #12
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	e7d6      	b.n	800f356 <_free_r+0x26>
 800f3a8:	6825      	ldr	r5, [r4, #0]
 800f3aa:	1961      	adds	r1, r4, r5
 800f3ac:	428b      	cmp	r3, r1
 800f3ae:	bf04      	itt	eq
 800f3b0:	6819      	ldreq	r1, [r3, #0]
 800f3b2:	685b      	ldreq	r3, [r3, #4]
 800f3b4:	6063      	str	r3, [r4, #4]
 800f3b6:	bf04      	itt	eq
 800f3b8:	1949      	addeq	r1, r1, r5
 800f3ba:	6021      	streq	r1, [r4, #0]
 800f3bc:	6054      	str	r4, [r2, #4]
 800f3be:	e7ca      	b.n	800f356 <_free_r+0x26>
 800f3c0:	b003      	add	sp, #12
 800f3c2:	bd30      	pop	{r4, r5, pc}
 800f3c4:	24000b5c 	.word	0x24000b5c

0800f3c8 <_Balloc>:
 800f3c8:	b570      	push	{r4, r5, r6, lr}
 800f3ca:	69c6      	ldr	r6, [r0, #28]
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	b976      	cbnz	r6, 800f3f0 <_Balloc+0x28>
 800f3d2:	2010      	movs	r0, #16
 800f3d4:	f7fe f8e8 	bl	800d5a8 <malloc>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	61e0      	str	r0, [r4, #28]
 800f3dc:	b920      	cbnz	r0, 800f3e8 <_Balloc+0x20>
 800f3de:	4b18      	ldr	r3, [pc, #96]	; (800f440 <_Balloc+0x78>)
 800f3e0:	4818      	ldr	r0, [pc, #96]	; (800f444 <_Balloc+0x7c>)
 800f3e2:	216b      	movs	r1, #107	; 0x6b
 800f3e4:	f001 fd38 	bl	8010e58 <__assert_func>
 800f3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3ec:	6006      	str	r6, [r0, #0]
 800f3ee:	60c6      	str	r6, [r0, #12]
 800f3f0:	69e6      	ldr	r6, [r4, #28]
 800f3f2:	68f3      	ldr	r3, [r6, #12]
 800f3f4:	b183      	cbz	r3, 800f418 <_Balloc+0x50>
 800f3f6:	69e3      	ldr	r3, [r4, #28]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3fe:	b9b8      	cbnz	r0, 800f430 <_Balloc+0x68>
 800f400:	2101      	movs	r1, #1
 800f402:	fa01 f605 	lsl.w	r6, r1, r5
 800f406:	1d72      	adds	r2, r6, #5
 800f408:	0092      	lsls	r2, r2, #2
 800f40a:	4620      	mov	r0, r4
 800f40c:	f001 fd42 	bl	8010e94 <_calloc_r>
 800f410:	b160      	cbz	r0, 800f42c <_Balloc+0x64>
 800f412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f416:	e00e      	b.n	800f436 <_Balloc+0x6e>
 800f418:	2221      	movs	r2, #33	; 0x21
 800f41a:	2104      	movs	r1, #4
 800f41c:	4620      	mov	r0, r4
 800f41e:	f001 fd39 	bl	8010e94 <_calloc_r>
 800f422:	69e3      	ldr	r3, [r4, #28]
 800f424:	60f0      	str	r0, [r6, #12]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1e4      	bne.n	800f3f6 <_Balloc+0x2e>
 800f42c:	2000      	movs	r0, #0
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	6802      	ldr	r2, [r0, #0]
 800f432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f436:	2300      	movs	r3, #0
 800f438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f43c:	e7f7      	b.n	800f42e <_Balloc+0x66>
 800f43e:	bf00      	nop
 800f440:	08011c4a 	.word	0x08011c4a
 800f444:	08011cca 	.word	0x08011cca

0800f448 <_Bfree>:
 800f448:	b570      	push	{r4, r5, r6, lr}
 800f44a:	69c6      	ldr	r6, [r0, #28]
 800f44c:	4605      	mov	r5, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	b976      	cbnz	r6, 800f470 <_Bfree+0x28>
 800f452:	2010      	movs	r0, #16
 800f454:	f7fe f8a8 	bl	800d5a8 <malloc>
 800f458:	4602      	mov	r2, r0
 800f45a:	61e8      	str	r0, [r5, #28]
 800f45c:	b920      	cbnz	r0, 800f468 <_Bfree+0x20>
 800f45e:	4b09      	ldr	r3, [pc, #36]	; (800f484 <_Bfree+0x3c>)
 800f460:	4809      	ldr	r0, [pc, #36]	; (800f488 <_Bfree+0x40>)
 800f462:	218f      	movs	r1, #143	; 0x8f
 800f464:	f001 fcf8 	bl	8010e58 <__assert_func>
 800f468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f46c:	6006      	str	r6, [r0, #0]
 800f46e:	60c6      	str	r6, [r0, #12]
 800f470:	b13c      	cbz	r4, 800f482 <_Bfree+0x3a>
 800f472:	69eb      	ldr	r3, [r5, #28]
 800f474:	6862      	ldr	r2, [r4, #4]
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f47c:	6021      	str	r1, [r4, #0]
 800f47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f482:	bd70      	pop	{r4, r5, r6, pc}
 800f484:	08011c4a 	.word	0x08011c4a
 800f488:	08011cca 	.word	0x08011cca

0800f48c <__multadd>:
 800f48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f490:	690d      	ldr	r5, [r1, #16]
 800f492:	4607      	mov	r7, r0
 800f494:	460c      	mov	r4, r1
 800f496:	461e      	mov	r6, r3
 800f498:	f101 0c14 	add.w	ip, r1, #20
 800f49c:	2000      	movs	r0, #0
 800f49e:	f8dc 3000 	ldr.w	r3, [ip]
 800f4a2:	b299      	uxth	r1, r3
 800f4a4:	fb02 6101 	mla	r1, r2, r1, r6
 800f4a8:	0c1e      	lsrs	r6, r3, #16
 800f4aa:	0c0b      	lsrs	r3, r1, #16
 800f4ac:	fb02 3306 	mla	r3, r2, r6, r3
 800f4b0:	b289      	uxth	r1, r1
 800f4b2:	3001      	adds	r0, #1
 800f4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4b8:	4285      	cmp	r5, r0
 800f4ba:	f84c 1b04 	str.w	r1, [ip], #4
 800f4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4c2:	dcec      	bgt.n	800f49e <__multadd+0x12>
 800f4c4:	b30e      	cbz	r6, 800f50a <__multadd+0x7e>
 800f4c6:	68a3      	ldr	r3, [r4, #8]
 800f4c8:	42ab      	cmp	r3, r5
 800f4ca:	dc19      	bgt.n	800f500 <__multadd+0x74>
 800f4cc:	6861      	ldr	r1, [r4, #4]
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	3101      	adds	r1, #1
 800f4d2:	f7ff ff79 	bl	800f3c8 <_Balloc>
 800f4d6:	4680      	mov	r8, r0
 800f4d8:	b928      	cbnz	r0, 800f4e6 <__multadd+0x5a>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	4b0c      	ldr	r3, [pc, #48]	; (800f510 <__multadd+0x84>)
 800f4de:	480d      	ldr	r0, [pc, #52]	; (800f514 <__multadd+0x88>)
 800f4e0:	21ba      	movs	r1, #186	; 0xba
 800f4e2:	f001 fcb9 	bl	8010e58 <__assert_func>
 800f4e6:	6922      	ldr	r2, [r4, #16]
 800f4e8:	3202      	adds	r2, #2
 800f4ea:	f104 010c 	add.w	r1, r4, #12
 800f4ee:	0092      	lsls	r2, r2, #2
 800f4f0:	300c      	adds	r0, #12
 800f4f2:	f001 fc9b 	bl	8010e2c <memcpy>
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	4638      	mov	r0, r7
 800f4fa:	f7ff ffa5 	bl	800f448 <_Bfree>
 800f4fe:	4644      	mov	r4, r8
 800f500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f504:	3501      	adds	r5, #1
 800f506:	615e      	str	r6, [r3, #20]
 800f508:	6125      	str	r5, [r4, #16]
 800f50a:	4620      	mov	r0, r4
 800f50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f510:	08011cb9 	.word	0x08011cb9
 800f514:	08011cca 	.word	0x08011cca

0800f518 <__s2b>:
 800f518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f51c:	460c      	mov	r4, r1
 800f51e:	4615      	mov	r5, r2
 800f520:	461f      	mov	r7, r3
 800f522:	2209      	movs	r2, #9
 800f524:	3308      	adds	r3, #8
 800f526:	4606      	mov	r6, r0
 800f528:	fb93 f3f2 	sdiv	r3, r3, r2
 800f52c:	2100      	movs	r1, #0
 800f52e:	2201      	movs	r2, #1
 800f530:	429a      	cmp	r2, r3
 800f532:	db09      	blt.n	800f548 <__s2b+0x30>
 800f534:	4630      	mov	r0, r6
 800f536:	f7ff ff47 	bl	800f3c8 <_Balloc>
 800f53a:	b940      	cbnz	r0, 800f54e <__s2b+0x36>
 800f53c:	4602      	mov	r2, r0
 800f53e:	4b19      	ldr	r3, [pc, #100]	; (800f5a4 <__s2b+0x8c>)
 800f540:	4819      	ldr	r0, [pc, #100]	; (800f5a8 <__s2b+0x90>)
 800f542:	21d3      	movs	r1, #211	; 0xd3
 800f544:	f001 fc88 	bl	8010e58 <__assert_func>
 800f548:	0052      	lsls	r2, r2, #1
 800f54a:	3101      	adds	r1, #1
 800f54c:	e7f0      	b.n	800f530 <__s2b+0x18>
 800f54e:	9b08      	ldr	r3, [sp, #32]
 800f550:	6143      	str	r3, [r0, #20]
 800f552:	2d09      	cmp	r5, #9
 800f554:	f04f 0301 	mov.w	r3, #1
 800f558:	6103      	str	r3, [r0, #16]
 800f55a:	dd16      	ble.n	800f58a <__s2b+0x72>
 800f55c:	f104 0909 	add.w	r9, r4, #9
 800f560:	46c8      	mov	r8, r9
 800f562:	442c      	add	r4, r5
 800f564:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f568:	4601      	mov	r1, r0
 800f56a:	3b30      	subs	r3, #48	; 0x30
 800f56c:	220a      	movs	r2, #10
 800f56e:	4630      	mov	r0, r6
 800f570:	f7ff ff8c 	bl	800f48c <__multadd>
 800f574:	45a0      	cmp	r8, r4
 800f576:	d1f5      	bne.n	800f564 <__s2b+0x4c>
 800f578:	f1a5 0408 	sub.w	r4, r5, #8
 800f57c:	444c      	add	r4, r9
 800f57e:	1b2d      	subs	r5, r5, r4
 800f580:	1963      	adds	r3, r4, r5
 800f582:	42bb      	cmp	r3, r7
 800f584:	db04      	blt.n	800f590 <__s2b+0x78>
 800f586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f58a:	340a      	adds	r4, #10
 800f58c:	2509      	movs	r5, #9
 800f58e:	e7f6      	b.n	800f57e <__s2b+0x66>
 800f590:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f594:	4601      	mov	r1, r0
 800f596:	3b30      	subs	r3, #48	; 0x30
 800f598:	220a      	movs	r2, #10
 800f59a:	4630      	mov	r0, r6
 800f59c:	f7ff ff76 	bl	800f48c <__multadd>
 800f5a0:	e7ee      	b.n	800f580 <__s2b+0x68>
 800f5a2:	bf00      	nop
 800f5a4:	08011cb9 	.word	0x08011cb9
 800f5a8:	08011cca 	.word	0x08011cca

0800f5ac <__hi0bits>:
 800f5ac:	0c03      	lsrs	r3, r0, #16
 800f5ae:	041b      	lsls	r3, r3, #16
 800f5b0:	b9d3      	cbnz	r3, 800f5e8 <__hi0bits+0x3c>
 800f5b2:	0400      	lsls	r0, r0, #16
 800f5b4:	2310      	movs	r3, #16
 800f5b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5ba:	bf04      	itt	eq
 800f5bc:	0200      	lsleq	r0, r0, #8
 800f5be:	3308      	addeq	r3, #8
 800f5c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5c4:	bf04      	itt	eq
 800f5c6:	0100      	lsleq	r0, r0, #4
 800f5c8:	3304      	addeq	r3, #4
 800f5ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5ce:	bf04      	itt	eq
 800f5d0:	0080      	lsleq	r0, r0, #2
 800f5d2:	3302      	addeq	r3, #2
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	db05      	blt.n	800f5e4 <__hi0bits+0x38>
 800f5d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f5dc:	f103 0301 	add.w	r3, r3, #1
 800f5e0:	bf08      	it	eq
 800f5e2:	2320      	moveq	r3, #32
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	4770      	bx	lr
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	e7e4      	b.n	800f5b6 <__hi0bits+0xa>

0800f5ec <__lo0bits>:
 800f5ec:	6803      	ldr	r3, [r0, #0]
 800f5ee:	f013 0207 	ands.w	r2, r3, #7
 800f5f2:	d00c      	beq.n	800f60e <__lo0bits+0x22>
 800f5f4:	07d9      	lsls	r1, r3, #31
 800f5f6:	d422      	bmi.n	800f63e <__lo0bits+0x52>
 800f5f8:	079a      	lsls	r2, r3, #30
 800f5fa:	bf49      	itett	mi
 800f5fc:	085b      	lsrmi	r3, r3, #1
 800f5fe:	089b      	lsrpl	r3, r3, #2
 800f600:	6003      	strmi	r3, [r0, #0]
 800f602:	2201      	movmi	r2, #1
 800f604:	bf5c      	itt	pl
 800f606:	6003      	strpl	r3, [r0, #0]
 800f608:	2202      	movpl	r2, #2
 800f60a:	4610      	mov	r0, r2
 800f60c:	4770      	bx	lr
 800f60e:	b299      	uxth	r1, r3
 800f610:	b909      	cbnz	r1, 800f616 <__lo0bits+0x2a>
 800f612:	0c1b      	lsrs	r3, r3, #16
 800f614:	2210      	movs	r2, #16
 800f616:	b2d9      	uxtb	r1, r3
 800f618:	b909      	cbnz	r1, 800f61e <__lo0bits+0x32>
 800f61a:	3208      	adds	r2, #8
 800f61c:	0a1b      	lsrs	r3, r3, #8
 800f61e:	0719      	lsls	r1, r3, #28
 800f620:	bf04      	itt	eq
 800f622:	091b      	lsreq	r3, r3, #4
 800f624:	3204      	addeq	r2, #4
 800f626:	0799      	lsls	r1, r3, #30
 800f628:	bf04      	itt	eq
 800f62a:	089b      	lsreq	r3, r3, #2
 800f62c:	3202      	addeq	r2, #2
 800f62e:	07d9      	lsls	r1, r3, #31
 800f630:	d403      	bmi.n	800f63a <__lo0bits+0x4e>
 800f632:	085b      	lsrs	r3, r3, #1
 800f634:	f102 0201 	add.w	r2, r2, #1
 800f638:	d003      	beq.n	800f642 <__lo0bits+0x56>
 800f63a:	6003      	str	r3, [r0, #0]
 800f63c:	e7e5      	b.n	800f60a <__lo0bits+0x1e>
 800f63e:	2200      	movs	r2, #0
 800f640:	e7e3      	b.n	800f60a <__lo0bits+0x1e>
 800f642:	2220      	movs	r2, #32
 800f644:	e7e1      	b.n	800f60a <__lo0bits+0x1e>
	...

0800f648 <__i2b>:
 800f648:	b510      	push	{r4, lr}
 800f64a:	460c      	mov	r4, r1
 800f64c:	2101      	movs	r1, #1
 800f64e:	f7ff febb 	bl	800f3c8 <_Balloc>
 800f652:	4602      	mov	r2, r0
 800f654:	b928      	cbnz	r0, 800f662 <__i2b+0x1a>
 800f656:	4b05      	ldr	r3, [pc, #20]	; (800f66c <__i2b+0x24>)
 800f658:	4805      	ldr	r0, [pc, #20]	; (800f670 <__i2b+0x28>)
 800f65a:	f240 1145 	movw	r1, #325	; 0x145
 800f65e:	f001 fbfb 	bl	8010e58 <__assert_func>
 800f662:	2301      	movs	r3, #1
 800f664:	6144      	str	r4, [r0, #20]
 800f666:	6103      	str	r3, [r0, #16]
 800f668:	bd10      	pop	{r4, pc}
 800f66a:	bf00      	nop
 800f66c:	08011cb9 	.word	0x08011cb9
 800f670:	08011cca 	.word	0x08011cca

0800f674 <__multiply>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	4691      	mov	r9, r2
 800f67a:	690a      	ldr	r2, [r1, #16]
 800f67c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f680:	429a      	cmp	r2, r3
 800f682:	bfb8      	it	lt
 800f684:	460b      	movlt	r3, r1
 800f686:	460c      	mov	r4, r1
 800f688:	bfbc      	itt	lt
 800f68a:	464c      	movlt	r4, r9
 800f68c:	4699      	movlt	r9, r3
 800f68e:	6927      	ldr	r7, [r4, #16]
 800f690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f694:	68a3      	ldr	r3, [r4, #8]
 800f696:	6861      	ldr	r1, [r4, #4]
 800f698:	eb07 060a 	add.w	r6, r7, sl
 800f69c:	42b3      	cmp	r3, r6
 800f69e:	b085      	sub	sp, #20
 800f6a0:	bfb8      	it	lt
 800f6a2:	3101      	addlt	r1, #1
 800f6a4:	f7ff fe90 	bl	800f3c8 <_Balloc>
 800f6a8:	b930      	cbnz	r0, 800f6b8 <__multiply+0x44>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	4b44      	ldr	r3, [pc, #272]	; (800f7c0 <__multiply+0x14c>)
 800f6ae:	4845      	ldr	r0, [pc, #276]	; (800f7c4 <__multiply+0x150>)
 800f6b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f6b4:	f001 fbd0 	bl	8010e58 <__assert_func>
 800f6b8:	f100 0514 	add.w	r5, r0, #20
 800f6bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6c0:	462b      	mov	r3, r5
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	4543      	cmp	r3, r8
 800f6c6:	d321      	bcc.n	800f70c <__multiply+0x98>
 800f6c8:	f104 0314 	add.w	r3, r4, #20
 800f6cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f6d0:	f109 0314 	add.w	r3, r9, #20
 800f6d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f6d8:	9202      	str	r2, [sp, #8]
 800f6da:	1b3a      	subs	r2, r7, r4
 800f6dc:	3a15      	subs	r2, #21
 800f6de:	f022 0203 	bic.w	r2, r2, #3
 800f6e2:	3204      	adds	r2, #4
 800f6e4:	f104 0115 	add.w	r1, r4, #21
 800f6e8:	428f      	cmp	r7, r1
 800f6ea:	bf38      	it	cc
 800f6ec:	2204      	movcc	r2, #4
 800f6ee:	9201      	str	r2, [sp, #4]
 800f6f0:	9a02      	ldr	r2, [sp, #8]
 800f6f2:	9303      	str	r3, [sp, #12]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d80c      	bhi.n	800f712 <__multiply+0x9e>
 800f6f8:	2e00      	cmp	r6, #0
 800f6fa:	dd03      	ble.n	800f704 <__multiply+0x90>
 800f6fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f700:	2b00      	cmp	r3, #0
 800f702:	d05b      	beq.n	800f7bc <__multiply+0x148>
 800f704:	6106      	str	r6, [r0, #16]
 800f706:	b005      	add	sp, #20
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	f843 2b04 	str.w	r2, [r3], #4
 800f710:	e7d8      	b.n	800f6c4 <__multiply+0x50>
 800f712:	f8b3 a000 	ldrh.w	sl, [r3]
 800f716:	f1ba 0f00 	cmp.w	sl, #0
 800f71a:	d024      	beq.n	800f766 <__multiply+0xf2>
 800f71c:	f104 0e14 	add.w	lr, r4, #20
 800f720:	46a9      	mov	r9, r5
 800f722:	f04f 0c00 	mov.w	ip, #0
 800f726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f72a:	f8d9 1000 	ldr.w	r1, [r9]
 800f72e:	fa1f fb82 	uxth.w	fp, r2
 800f732:	b289      	uxth	r1, r1
 800f734:	fb0a 110b 	mla	r1, sl, fp, r1
 800f738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f73c:	f8d9 2000 	ldr.w	r2, [r9]
 800f740:	4461      	add	r1, ip
 800f742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f746:	fb0a c20b 	mla	r2, sl, fp, ip
 800f74a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f74e:	b289      	uxth	r1, r1
 800f750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f754:	4577      	cmp	r7, lr
 800f756:	f849 1b04 	str.w	r1, [r9], #4
 800f75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f75e:	d8e2      	bhi.n	800f726 <__multiply+0xb2>
 800f760:	9a01      	ldr	r2, [sp, #4]
 800f762:	f845 c002 	str.w	ip, [r5, r2]
 800f766:	9a03      	ldr	r2, [sp, #12]
 800f768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f76c:	3304      	adds	r3, #4
 800f76e:	f1b9 0f00 	cmp.w	r9, #0
 800f772:	d021      	beq.n	800f7b8 <__multiply+0x144>
 800f774:	6829      	ldr	r1, [r5, #0]
 800f776:	f104 0c14 	add.w	ip, r4, #20
 800f77a:	46ae      	mov	lr, r5
 800f77c:	f04f 0a00 	mov.w	sl, #0
 800f780:	f8bc b000 	ldrh.w	fp, [ip]
 800f784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f788:	fb09 220b 	mla	r2, r9, fp, r2
 800f78c:	4452      	add	r2, sl
 800f78e:	b289      	uxth	r1, r1
 800f790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f794:	f84e 1b04 	str.w	r1, [lr], #4
 800f798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f79c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7a0:	f8be 1000 	ldrh.w	r1, [lr]
 800f7a4:	fb09 110a 	mla	r1, r9, sl, r1
 800f7a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f7ac:	4567      	cmp	r7, ip
 800f7ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7b2:	d8e5      	bhi.n	800f780 <__multiply+0x10c>
 800f7b4:	9a01      	ldr	r2, [sp, #4]
 800f7b6:	50a9      	str	r1, [r5, r2]
 800f7b8:	3504      	adds	r5, #4
 800f7ba:	e799      	b.n	800f6f0 <__multiply+0x7c>
 800f7bc:	3e01      	subs	r6, #1
 800f7be:	e79b      	b.n	800f6f8 <__multiply+0x84>
 800f7c0:	08011cb9 	.word	0x08011cb9
 800f7c4:	08011cca 	.word	0x08011cca

0800f7c8 <__pow5mult>:
 800f7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7cc:	4615      	mov	r5, r2
 800f7ce:	f012 0203 	ands.w	r2, r2, #3
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	460f      	mov	r7, r1
 800f7d6:	d007      	beq.n	800f7e8 <__pow5mult+0x20>
 800f7d8:	4c25      	ldr	r4, [pc, #148]	; (800f870 <__pow5mult+0xa8>)
 800f7da:	3a01      	subs	r2, #1
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f7e2:	f7ff fe53 	bl	800f48c <__multadd>
 800f7e6:	4607      	mov	r7, r0
 800f7e8:	10ad      	asrs	r5, r5, #2
 800f7ea:	d03d      	beq.n	800f868 <__pow5mult+0xa0>
 800f7ec:	69f4      	ldr	r4, [r6, #28]
 800f7ee:	b97c      	cbnz	r4, 800f810 <__pow5mult+0x48>
 800f7f0:	2010      	movs	r0, #16
 800f7f2:	f7fd fed9 	bl	800d5a8 <malloc>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	61f0      	str	r0, [r6, #28]
 800f7fa:	b928      	cbnz	r0, 800f808 <__pow5mult+0x40>
 800f7fc:	4b1d      	ldr	r3, [pc, #116]	; (800f874 <__pow5mult+0xac>)
 800f7fe:	481e      	ldr	r0, [pc, #120]	; (800f878 <__pow5mult+0xb0>)
 800f800:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f804:	f001 fb28 	bl	8010e58 <__assert_func>
 800f808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f80c:	6004      	str	r4, [r0, #0]
 800f80e:	60c4      	str	r4, [r0, #12]
 800f810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f818:	b94c      	cbnz	r4, 800f82e <__pow5mult+0x66>
 800f81a:	f240 2171 	movw	r1, #625	; 0x271
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff ff12 	bl	800f648 <__i2b>
 800f824:	2300      	movs	r3, #0
 800f826:	f8c8 0008 	str.w	r0, [r8, #8]
 800f82a:	4604      	mov	r4, r0
 800f82c:	6003      	str	r3, [r0, #0]
 800f82e:	f04f 0900 	mov.w	r9, #0
 800f832:	07eb      	lsls	r3, r5, #31
 800f834:	d50a      	bpl.n	800f84c <__pow5mult+0x84>
 800f836:	4639      	mov	r1, r7
 800f838:	4622      	mov	r2, r4
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7ff ff1a 	bl	800f674 <__multiply>
 800f840:	4639      	mov	r1, r7
 800f842:	4680      	mov	r8, r0
 800f844:	4630      	mov	r0, r6
 800f846:	f7ff fdff 	bl	800f448 <_Bfree>
 800f84a:	4647      	mov	r7, r8
 800f84c:	106d      	asrs	r5, r5, #1
 800f84e:	d00b      	beq.n	800f868 <__pow5mult+0xa0>
 800f850:	6820      	ldr	r0, [r4, #0]
 800f852:	b938      	cbnz	r0, 800f864 <__pow5mult+0x9c>
 800f854:	4622      	mov	r2, r4
 800f856:	4621      	mov	r1, r4
 800f858:	4630      	mov	r0, r6
 800f85a:	f7ff ff0b 	bl	800f674 <__multiply>
 800f85e:	6020      	str	r0, [r4, #0]
 800f860:	f8c0 9000 	str.w	r9, [r0]
 800f864:	4604      	mov	r4, r0
 800f866:	e7e4      	b.n	800f832 <__pow5mult+0x6a>
 800f868:	4638      	mov	r0, r7
 800f86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f86e:	bf00      	nop
 800f870:	08011e18 	.word	0x08011e18
 800f874:	08011c4a 	.word	0x08011c4a
 800f878:	08011cca 	.word	0x08011cca

0800f87c <__lshift>:
 800f87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f880:	460c      	mov	r4, r1
 800f882:	6849      	ldr	r1, [r1, #4]
 800f884:	6923      	ldr	r3, [r4, #16]
 800f886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f88a:	68a3      	ldr	r3, [r4, #8]
 800f88c:	4607      	mov	r7, r0
 800f88e:	4691      	mov	r9, r2
 800f890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f894:	f108 0601 	add.w	r6, r8, #1
 800f898:	42b3      	cmp	r3, r6
 800f89a:	db0b      	blt.n	800f8b4 <__lshift+0x38>
 800f89c:	4638      	mov	r0, r7
 800f89e:	f7ff fd93 	bl	800f3c8 <_Balloc>
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	b948      	cbnz	r0, 800f8ba <__lshift+0x3e>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	4b28      	ldr	r3, [pc, #160]	; (800f94c <__lshift+0xd0>)
 800f8aa:	4829      	ldr	r0, [pc, #164]	; (800f950 <__lshift+0xd4>)
 800f8ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f8b0:	f001 fad2 	bl	8010e58 <__assert_func>
 800f8b4:	3101      	adds	r1, #1
 800f8b6:	005b      	lsls	r3, r3, #1
 800f8b8:	e7ee      	b.n	800f898 <__lshift+0x1c>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	f100 0114 	add.w	r1, r0, #20
 800f8c0:	f100 0210 	add.w	r2, r0, #16
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	4553      	cmp	r3, sl
 800f8c8:	db33      	blt.n	800f932 <__lshift+0xb6>
 800f8ca:	6920      	ldr	r0, [r4, #16]
 800f8cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8d0:	f104 0314 	add.w	r3, r4, #20
 800f8d4:	f019 091f 	ands.w	r9, r9, #31
 800f8d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f8e0:	d02b      	beq.n	800f93a <__lshift+0xbe>
 800f8e2:	f1c9 0e20 	rsb	lr, r9, #32
 800f8e6:	468a      	mov	sl, r1
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	6818      	ldr	r0, [r3, #0]
 800f8ec:	fa00 f009 	lsl.w	r0, r0, r9
 800f8f0:	4310      	orrs	r0, r2
 800f8f2:	f84a 0b04 	str.w	r0, [sl], #4
 800f8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8fa:	459c      	cmp	ip, r3
 800f8fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800f900:	d8f3      	bhi.n	800f8ea <__lshift+0x6e>
 800f902:	ebac 0304 	sub.w	r3, ip, r4
 800f906:	3b15      	subs	r3, #21
 800f908:	f023 0303 	bic.w	r3, r3, #3
 800f90c:	3304      	adds	r3, #4
 800f90e:	f104 0015 	add.w	r0, r4, #21
 800f912:	4584      	cmp	ip, r0
 800f914:	bf38      	it	cc
 800f916:	2304      	movcc	r3, #4
 800f918:	50ca      	str	r2, [r1, r3]
 800f91a:	b10a      	cbz	r2, 800f920 <__lshift+0xa4>
 800f91c:	f108 0602 	add.w	r6, r8, #2
 800f920:	3e01      	subs	r6, #1
 800f922:	4638      	mov	r0, r7
 800f924:	612e      	str	r6, [r5, #16]
 800f926:	4621      	mov	r1, r4
 800f928:	f7ff fd8e 	bl	800f448 <_Bfree>
 800f92c:	4628      	mov	r0, r5
 800f92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f932:	f842 0f04 	str.w	r0, [r2, #4]!
 800f936:	3301      	adds	r3, #1
 800f938:	e7c5      	b.n	800f8c6 <__lshift+0x4a>
 800f93a:	3904      	subs	r1, #4
 800f93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f940:	f841 2f04 	str.w	r2, [r1, #4]!
 800f944:	459c      	cmp	ip, r3
 800f946:	d8f9      	bhi.n	800f93c <__lshift+0xc0>
 800f948:	e7ea      	b.n	800f920 <__lshift+0xa4>
 800f94a:	bf00      	nop
 800f94c:	08011cb9 	.word	0x08011cb9
 800f950:	08011cca 	.word	0x08011cca

0800f954 <__mcmp>:
 800f954:	b530      	push	{r4, r5, lr}
 800f956:	6902      	ldr	r2, [r0, #16]
 800f958:	690c      	ldr	r4, [r1, #16]
 800f95a:	1b12      	subs	r2, r2, r4
 800f95c:	d10e      	bne.n	800f97c <__mcmp+0x28>
 800f95e:	f100 0314 	add.w	r3, r0, #20
 800f962:	3114      	adds	r1, #20
 800f964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f96c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f974:	42a5      	cmp	r5, r4
 800f976:	d003      	beq.n	800f980 <__mcmp+0x2c>
 800f978:	d305      	bcc.n	800f986 <__mcmp+0x32>
 800f97a:	2201      	movs	r2, #1
 800f97c:	4610      	mov	r0, r2
 800f97e:	bd30      	pop	{r4, r5, pc}
 800f980:	4283      	cmp	r3, r0
 800f982:	d3f3      	bcc.n	800f96c <__mcmp+0x18>
 800f984:	e7fa      	b.n	800f97c <__mcmp+0x28>
 800f986:	f04f 32ff 	mov.w	r2, #4294967295
 800f98a:	e7f7      	b.n	800f97c <__mcmp+0x28>

0800f98c <__mdiff>:
 800f98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	460c      	mov	r4, r1
 800f992:	4606      	mov	r6, r0
 800f994:	4611      	mov	r1, r2
 800f996:	4620      	mov	r0, r4
 800f998:	4690      	mov	r8, r2
 800f99a:	f7ff ffdb 	bl	800f954 <__mcmp>
 800f99e:	1e05      	subs	r5, r0, #0
 800f9a0:	d110      	bne.n	800f9c4 <__mdiff+0x38>
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f7ff fd0f 	bl	800f3c8 <_Balloc>
 800f9aa:	b930      	cbnz	r0, 800f9ba <__mdiff+0x2e>
 800f9ac:	4b3a      	ldr	r3, [pc, #232]	; (800fa98 <__mdiff+0x10c>)
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	f240 2137 	movw	r1, #567	; 0x237
 800f9b4:	4839      	ldr	r0, [pc, #228]	; (800fa9c <__mdiff+0x110>)
 800f9b6:	f001 fa4f 	bl	8010e58 <__assert_func>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c4:	bfa4      	itt	ge
 800f9c6:	4643      	movge	r3, r8
 800f9c8:	46a0      	movge	r8, r4
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9d0:	bfa6      	itte	ge
 800f9d2:	461c      	movge	r4, r3
 800f9d4:	2500      	movge	r5, #0
 800f9d6:	2501      	movlt	r5, #1
 800f9d8:	f7ff fcf6 	bl	800f3c8 <_Balloc>
 800f9dc:	b920      	cbnz	r0, 800f9e8 <__mdiff+0x5c>
 800f9de:	4b2e      	ldr	r3, [pc, #184]	; (800fa98 <__mdiff+0x10c>)
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	f240 2145 	movw	r1, #581	; 0x245
 800f9e6:	e7e5      	b.n	800f9b4 <__mdiff+0x28>
 800f9e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9ec:	6926      	ldr	r6, [r4, #16]
 800f9ee:	60c5      	str	r5, [r0, #12]
 800f9f0:	f104 0914 	add.w	r9, r4, #20
 800f9f4:	f108 0514 	add.w	r5, r8, #20
 800f9f8:	f100 0e14 	add.w	lr, r0, #20
 800f9fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa04:	f108 0210 	add.w	r2, r8, #16
 800fa08:	46f2      	mov	sl, lr
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa14:	fa11 f88b 	uxtah	r8, r1, fp
 800fa18:	b299      	uxth	r1, r3
 800fa1a:	0c1b      	lsrs	r3, r3, #16
 800fa1c:	eba8 0801 	sub.w	r8, r8, r1
 800fa20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa28:	fa1f f888 	uxth.w	r8, r8
 800fa2c:	1419      	asrs	r1, r3, #16
 800fa2e:	454e      	cmp	r6, r9
 800fa30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa34:	f84a 3b04 	str.w	r3, [sl], #4
 800fa38:	d8e8      	bhi.n	800fa0c <__mdiff+0x80>
 800fa3a:	1b33      	subs	r3, r6, r4
 800fa3c:	3b15      	subs	r3, #21
 800fa3e:	f023 0303 	bic.w	r3, r3, #3
 800fa42:	3304      	adds	r3, #4
 800fa44:	3415      	adds	r4, #21
 800fa46:	42a6      	cmp	r6, r4
 800fa48:	bf38      	it	cc
 800fa4a:	2304      	movcc	r3, #4
 800fa4c:	441d      	add	r5, r3
 800fa4e:	4473      	add	r3, lr
 800fa50:	469e      	mov	lr, r3
 800fa52:	462e      	mov	r6, r5
 800fa54:	4566      	cmp	r6, ip
 800fa56:	d30e      	bcc.n	800fa76 <__mdiff+0xea>
 800fa58:	f10c 0203 	add.w	r2, ip, #3
 800fa5c:	1b52      	subs	r2, r2, r5
 800fa5e:	f022 0203 	bic.w	r2, r2, #3
 800fa62:	3d03      	subs	r5, #3
 800fa64:	45ac      	cmp	ip, r5
 800fa66:	bf38      	it	cc
 800fa68:	2200      	movcc	r2, #0
 800fa6a:	4413      	add	r3, r2
 800fa6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fa70:	b17a      	cbz	r2, 800fa92 <__mdiff+0x106>
 800fa72:	6107      	str	r7, [r0, #16]
 800fa74:	e7a4      	b.n	800f9c0 <__mdiff+0x34>
 800fa76:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa7a:	fa11 f288 	uxtah	r2, r1, r8
 800fa7e:	1414      	asrs	r4, r2, #16
 800fa80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fa84:	b292      	uxth	r2, r2
 800fa86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fa8a:	f84e 2b04 	str.w	r2, [lr], #4
 800fa8e:	1421      	asrs	r1, r4, #16
 800fa90:	e7e0      	b.n	800fa54 <__mdiff+0xc8>
 800fa92:	3f01      	subs	r7, #1
 800fa94:	e7ea      	b.n	800fa6c <__mdiff+0xe0>
 800fa96:	bf00      	nop
 800fa98:	08011cb9 	.word	0x08011cb9
 800fa9c:	08011cca 	.word	0x08011cca

0800faa0 <__ulp>:
 800faa0:	b082      	sub	sp, #8
 800faa2:	ed8d 0b00 	vstr	d0, [sp]
 800faa6:	9a01      	ldr	r2, [sp, #4]
 800faa8:	4b0f      	ldr	r3, [pc, #60]	; (800fae8 <__ulp+0x48>)
 800faaa:	4013      	ands	r3, r2
 800faac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dc08      	bgt.n	800fac6 <__ulp+0x26>
 800fab4:	425b      	negs	r3, r3
 800fab6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800faba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fabe:	da04      	bge.n	800faca <__ulp+0x2a>
 800fac0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fac4:	4113      	asrs	r3, r2
 800fac6:	2200      	movs	r2, #0
 800fac8:	e008      	b.n	800fadc <__ulp+0x3c>
 800faca:	f1a2 0314 	sub.w	r3, r2, #20
 800face:	2b1e      	cmp	r3, #30
 800fad0:	bfda      	itte	le
 800fad2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fad6:	40da      	lsrle	r2, r3
 800fad8:	2201      	movgt	r2, #1
 800fada:	2300      	movs	r3, #0
 800fadc:	4619      	mov	r1, r3
 800fade:	4610      	mov	r0, r2
 800fae0:	ec41 0b10 	vmov	d0, r0, r1
 800fae4:	b002      	add	sp, #8
 800fae6:	4770      	bx	lr
 800fae8:	7ff00000 	.word	0x7ff00000

0800faec <__b2d>:
 800faec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf0:	6906      	ldr	r6, [r0, #16]
 800faf2:	f100 0814 	add.w	r8, r0, #20
 800faf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fafa:	1f37      	subs	r7, r6, #4
 800fafc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fb00:	4610      	mov	r0, r2
 800fb02:	f7ff fd53 	bl	800f5ac <__hi0bits>
 800fb06:	f1c0 0320 	rsb	r3, r0, #32
 800fb0a:	280a      	cmp	r0, #10
 800fb0c:	600b      	str	r3, [r1, #0]
 800fb0e:	491b      	ldr	r1, [pc, #108]	; (800fb7c <__b2d+0x90>)
 800fb10:	dc15      	bgt.n	800fb3e <__b2d+0x52>
 800fb12:	f1c0 0c0b 	rsb	ip, r0, #11
 800fb16:	fa22 f30c 	lsr.w	r3, r2, ip
 800fb1a:	45b8      	cmp	r8, r7
 800fb1c:	ea43 0501 	orr.w	r5, r3, r1
 800fb20:	bf34      	ite	cc
 800fb22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb26:	2300      	movcs	r3, #0
 800fb28:	3015      	adds	r0, #21
 800fb2a:	fa02 f000 	lsl.w	r0, r2, r0
 800fb2e:	fa23 f30c 	lsr.w	r3, r3, ip
 800fb32:	4303      	orrs	r3, r0
 800fb34:	461c      	mov	r4, r3
 800fb36:	ec45 4b10 	vmov	d0, r4, r5
 800fb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb3e:	45b8      	cmp	r8, r7
 800fb40:	bf3a      	itte	cc
 800fb42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb46:	f1a6 0708 	subcc.w	r7, r6, #8
 800fb4a:	2300      	movcs	r3, #0
 800fb4c:	380b      	subs	r0, #11
 800fb4e:	d012      	beq.n	800fb76 <__b2d+0x8a>
 800fb50:	f1c0 0120 	rsb	r1, r0, #32
 800fb54:	fa23 f401 	lsr.w	r4, r3, r1
 800fb58:	4082      	lsls	r2, r0
 800fb5a:	4322      	orrs	r2, r4
 800fb5c:	4547      	cmp	r7, r8
 800fb5e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fb62:	bf8c      	ite	hi
 800fb64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fb68:	2200      	movls	r2, #0
 800fb6a:	4083      	lsls	r3, r0
 800fb6c:	40ca      	lsrs	r2, r1
 800fb6e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fb72:	4313      	orrs	r3, r2
 800fb74:	e7de      	b.n	800fb34 <__b2d+0x48>
 800fb76:	ea42 0501 	orr.w	r5, r2, r1
 800fb7a:	e7db      	b.n	800fb34 <__b2d+0x48>
 800fb7c:	3ff00000 	.word	0x3ff00000

0800fb80 <__d2b>:
 800fb80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb84:	460f      	mov	r7, r1
 800fb86:	2101      	movs	r1, #1
 800fb88:	ec59 8b10 	vmov	r8, r9, d0
 800fb8c:	4616      	mov	r6, r2
 800fb8e:	f7ff fc1b 	bl	800f3c8 <_Balloc>
 800fb92:	4604      	mov	r4, r0
 800fb94:	b930      	cbnz	r0, 800fba4 <__d2b+0x24>
 800fb96:	4602      	mov	r2, r0
 800fb98:	4b24      	ldr	r3, [pc, #144]	; (800fc2c <__d2b+0xac>)
 800fb9a:	4825      	ldr	r0, [pc, #148]	; (800fc30 <__d2b+0xb0>)
 800fb9c:	f240 310f 	movw	r1, #783	; 0x30f
 800fba0:	f001 f95a 	bl	8010e58 <__assert_func>
 800fba4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbac:	bb2d      	cbnz	r5, 800fbfa <__d2b+0x7a>
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	f1b8 0300 	subs.w	r3, r8, #0
 800fbb4:	d026      	beq.n	800fc04 <__d2b+0x84>
 800fbb6:	4668      	mov	r0, sp
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	f7ff fd17 	bl	800f5ec <__lo0bits>
 800fbbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fbc2:	b1e8      	cbz	r0, 800fc00 <__d2b+0x80>
 800fbc4:	f1c0 0320 	rsb	r3, r0, #32
 800fbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbcc:	430b      	orrs	r3, r1
 800fbce:	40c2      	lsrs	r2, r0
 800fbd0:	6163      	str	r3, [r4, #20]
 800fbd2:	9201      	str	r2, [sp, #4]
 800fbd4:	9b01      	ldr	r3, [sp, #4]
 800fbd6:	61a3      	str	r3, [r4, #24]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	bf14      	ite	ne
 800fbdc:	2202      	movne	r2, #2
 800fbde:	2201      	moveq	r2, #1
 800fbe0:	6122      	str	r2, [r4, #16]
 800fbe2:	b1bd      	cbz	r5, 800fc14 <__d2b+0x94>
 800fbe4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fbe8:	4405      	add	r5, r0
 800fbea:	603d      	str	r5, [r7, #0]
 800fbec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbf0:	6030      	str	r0, [r6, #0]
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	b003      	add	sp, #12
 800fbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbfe:	e7d6      	b.n	800fbae <__d2b+0x2e>
 800fc00:	6161      	str	r1, [r4, #20]
 800fc02:	e7e7      	b.n	800fbd4 <__d2b+0x54>
 800fc04:	a801      	add	r0, sp, #4
 800fc06:	f7ff fcf1 	bl	800f5ec <__lo0bits>
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	6163      	str	r3, [r4, #20]
 800fc0e:	3020      	adds	r0, #32
 800fc10:	2201      	movs	r2, #1
 800fc12:	e7e5      	b.n	800fbe0 <__d2b+0x60>
 800fc14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc1c:	6038      	str	r0, [r7, #0]
 800fc1e:	6918      	ldr	r0, [r3, #16]
 800fc20:	f7ff fcc4 	bl	800f5ac <__hi0bits>
 800fc24:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc28:	e7e2      	b.n	800fbf0 <__d2b+0x70>
 800fc2a:	bf00      	nop
 800fc2c:	08011cb9 	.word	0x08011cb9
 800fc30:	08011cca 	.word	0x08011cca

0800fc34 <__ratio>:
 800fc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc38:	4688      	mov	r8, r1
 800fc3a:	4669      	mov	r1, sp
 800fc3c:	4681      	mov	r9, r0
 800fc3e:	f7ff ff55 	bl	800faec <__b2d>
 800fc42:	a901      	add	r1, sp, #4
 800fc44:	4640      	mov	r0, r8
 800fc46:	ec55 4b10 	vmov	r4, r5, d0
 800fc4a:	ee10 aa10 	vmov	sl, s0
 800fc4e:	f7ff ff4d 	bl	800faec <__b2d>
 800fc52:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fc56:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fc5a:	1ad2      	subs	r2, r2, r3
 800fc5c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fc60:	1a5b      	subs	r3, r3, r1
 800fc62:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800fc66:	ec57 6b10 	vmov	r6, r7, d0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	bfd6      	itet	le
 800fc6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc72:	462a      	movgt	r2, r5
 800fc74:	463a      	movle	r2, r7
 800fc76:	46ab      	mov	fp, r5
 800fc78:	bfd6      	itet	le
 800fc7a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800fc7e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800fc82:	ee00 3a90 	vmovle	s1, r3
 800fc86:	ec4b ab17 	vmov	d7, sl, fp
 800fc8a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800fc8e:	b003      	add	sp, #12
 800fc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc94 <__copybits>:
 800fc94:	3901      	subs	r1, #1
 800fc96:	b570      	push	{r4, r5, r6, lr}
 800fc98:	1149      	asrs	r1, r1, #5
 800fc9a:	6914      	ldr	r4, [r2, #16]
 800fc9c:	3101      	adds	r1, #1
 800fc9e:	f102 0314 	add.w	r3, r2, #20
 800fca2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fca6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fcaa:	1f05      	subs	r5, r0, #4
 800fcac:	42a3      	cmp	r3, r4
 800fcae:	d30c      	bcc.n	800fcca <__copybits+0x36>
 800fcb0:	1aa3      	subs	r3, r4, r2
 800fcb2:	3b11      	subs	r3, #17
 800fcb4:	f023 0303 	bic.w	r3, r3, #3
 800fcb8:	3211      	adds	r2, #17
 800fcba:	42a2      	cmp	r2, r4
 800fcbc:	bf88      	it	hi
 800fcbe:	2300      	movhi	r3, #0
 800fcc0:	4418      	add	r0, r3
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4288      	cmp	r0, r1
 800fcc6:	d305      	bcc.n	800fcd4 <__copybits+0x40>
 800fcc8:	bd70      	pop	{r4, r5, r6, pc}
 800fcca:	f853 6b04 	ldr.w	r6, [r3], #4
 800fcce:	f845 6f04 	str.w	r6, [r5, #4]!
 800fcd2:	e7eb      	b.n	800fcac <__copybits+0x18>
 800fcd4:	f840 3b04 	str.w	r3, [r0], #4
 800fcd8:	e7f4      	b.n	800fcc4 <__copybits+0x30>

0800fcda <__any_on>:
 800fcda:	f100 0214 	add.w	r2, r0, #20
 800fcde:	6900      	ldr	r0, [r0, #16]
 800fce0:	114b      	asrs	r3, r1, #5
 800fce2:	4298      	cmp	r0, r3
 800fce4:	b510      	push	{r4, lr}
 800fce6:	db11      	blt.n	800fd0c <__any_on+0x32>
 800fce8:	dd0a      	ble.n	800fd00 <__any_on+0x26>
 800fcea:	f011 011f 	ands.w	r1, r1, #31
 800fcee:	d007      	beq.n	800fd00 <__any_on+0x26>
 800fcf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fcf4:	fa24 f001 	lsr.w	r0, r4, r1
 800fcf8:	fa00 f101 	lsl.w	r1, r0, r1
 800fcfc:	428c      	cmp	r4, r1
 800fcfe:	d10b      	bne.n	800fd18 <__any_on+0x3e>
 800fd00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d803      	bhi.n	800fd10 <__any_on+0x36>
 800fd08:	2000      	movs	r0, #0
 800fd0a:	bd10      	pop	{r4, pc}
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	e7f7      	b.n	800fd00 <__any_on+0x26>
 800fd10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd14:	2900      	cmp	r1, #0
 800fd16:	d0f5      	beq.n	800fd04 <__any_on+0x2a>
 800fd18:	2001      	movs	r0, #1
 800fd1a:	e7f6      	b.n	800fd0a <__any_on+0x30>

0800fd1c <sulp>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	4604      	mov	r4, r0
 800fd20:	460d      	mov	r5, r1
 800fd22:	4616      	mov	r6, r2
 800fd24:	ec45 4b10 	vmov	d0, r4, r5
 800fd28:	f7ff feba 	bl	800faa0 <__ulp>
 800fd2c:	b17e      	cbz	r6, 800fd4e <sulp+0x32>
 800fd2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fd32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	dd09      	ble.n	800fd4e <sulp+0x32>
 800fd3a:	051b      	lsls	r3, r3, #20
 800fd3c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800fd40:	2000      	movs	r0, #0
 800fd42:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800fd46:	ec41 0b17 	vmov	d7, r0, r1
 800fd4a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}

0800fd50 <_strtod_l>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	ed2d 8b0e 	vpush	{d8-d14}
 800fd58:	b097      	sub	sp, #92	; 0x5c
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	920d      	str	r2, [sp, #52]	; 0x34
 800fd5e:	2200      	movs	r2, #0
 800fd60:	9212      	str	r2, [sp, #72]	; 0x48
 800fd62:	468a      	mov	sl, r1
 800fd64:	f04f 0800 	mov.w	r8, #0
 800fd68:	f04f 0900 	mov.w	r9, #0
 800fd6c:	460a      	mov	r2, r1
 800fd6e:	9211      	str	r2, [sp, #68]	; 0x44
 800fd70:	7811      	ldrb	r1, [r2, #0]
 800fd72:	292b      	cmp	r1, #43	; 0x2b
 800fd74:	d04c      	beq.n	800fe10 <_strtod_l+0xc0>
 800fd76:	d839      	bhi.n	800fdec <_strtod_l+0x9c>
 800fd78:	290d      	cmp	r1, #13
 800fd7a:	d833      	bhi.n	800fde4 <_strtod_l+0x94>
 800fd7c:	2908      	cmp	r1, #8
 800fd7e:	d833      	bhi.n	800fde8 <_strtod_l+0x98>
 800fd80:	2900      	cmp	r1, #0
 800fd82:	d03c      	beq.n	800fdfe <_strtod_l+0xae>
 800fd84:	2200      	movs	r2, #0
 800fd86:	9208      	str	r2, [sp, #32]
 800fd88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fd8a:	7832      	ldrb	r2, [r6, #0]
 800fd8c:	2a30      	cmp	r2, #48	; 0x30
 800fd8e:	f040 80b8 	bne.w	800ff02 <_strtod_l+0x1b2>
 800fd92:	7872      	ldrb	r2, [r6, #1]
 800fd94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fd98:	2a58      	cmp	r2, #88	; 0x58
 800fd9a:	d170      	bne.n	800fe7e <_strtod_l+0x12e>
 800fd9c:	9302      	str	r3, [sp, #8]
 800fd9e:	9b08      	ldr	r3, [sp, #32]
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	ab12      	add	r3, sp, #72	; 0x48
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	4a91      	ldr	r2, [pc, #580]	; (800ffec <_strtod_l+0x29c>)
 800fda8:	ab13      	add	r3, sp, #76	; 0x4c
 800fdaa:	a911      	add	r1, sp, #68	; 0x44
 800fdac:	4620      	mov	r0, r4
 800fdae:	f001 f8ef 	bl	8010f90 <__gethex>
 800fdb2:	f010 070f 	ands.w	r7, r0, #15
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	d005      	beq.n	800fdc6 <_strtod_l+0x76>
 800fdba:	2f06      	cmp	r7, #6
 800fdbc:	d12a      	bne.n	800fe14 <_strtod_l+0xc4>
 800fdbe:	3601      	adds	r6, #1
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	9611      	str	r6, [sp, #68]	; 0x44
 800fdc4:	9308      	str	r3, [sp, #32]
 800fdc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f040 8555 	bne.w	8010878 <_strtod_l+0xb28>
 800fdce:	9b08      	ldr	r3, [sp, #32]
 800fdd0:	ec49 8b10 	vmov	d0, r8, r9
 800fdd4:	b1cb      	cbz	r3, 800fe0a <_strtod_l+0xba>
 800fdd6:	eeb1 0b40 	vneg.f64	d0, d0
 800fdda:	b017      	add	sp, #92	; 0x5c
 800fddc:	ecbd 8b0e 	vpop	{d8-d14}
 800fde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde4:	2920      	cmp	r1, #32
 800fde6:	d1cd      	bne.n	800fd84 <_strtod_l+0x34>
 800fde8:	3201      	adds	r2, #1
 800fdea:	e7c0      	b.n	800fd6e <_strtod_l+0x1e>
 800fdec:	292d      	cmp	r1, #45	; 0x2d
 800fdee:	d1c9      	bne.n	800fd84 <_strtod_l+0x34>
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	9108      	str	r1, [sp, #32]
 800fdf4:	1c51      	adds	r1, r2, #1
 800fdf6:	9111      	str	r1, [sp, #68]	; 0x44
 800fdf8:	7852      	ldrb	r2, [r2, #1]
 800fdfa:	2a00      	cmp	r2, #0
 800fdfc:	d1c4      	bne.n	800fd88 <_strtod_l+0x38>
 800fdfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe00:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f040 8535 	bne.w	8010874 <_strtod_l+0xb24>
 800fe0a:	ec49 8b10 	vmov	d0, r8, r9
 800fe0e:	e7e4      	b.n	800fdda <_strtod_l+0x8a>
 800fe10:	2100      	movs	r1, #0
 800fe12:	e7ee      	b.n	800fdf2 <_strtod_l+0xa2>
 800fe14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe16:	b13a      	cbz	r2, 800fe28 <_strtod_l+0xd8>
 800fe18:	2135      	movs	r1, #53	; 0x35
 800fe1a:	a814      	add	r0, sp, #80	; 0x50
 800fe1c:	f7ff ff3a 	bl	800fc94 <__copybits>
 800fe20:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fe22:	4620      	mov	r0, r4
 800fe24:	f7ff fb10 	bl	800f448 <_Bfree>
 800fe28:	1e7b      	subs	r3, r7, #1
 800fe2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe2c:	2b04      	cmp	r3, #4
 800fe2e:	d806      	bhi.n	800fe3e <_strtod_l+0xee>
 800fe30:	e8df f003 	tbb	[pc, r3]
 800fe34:	201d0314 	.word	0x201d0314
 800fe38:	14          	.byte	0x14
 800fe39:	00          	.byte	0x00
 800fe3a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800fe3e:	05eb      	lsls	r3, r5, #23
 800fe40:	bf48      	it	mi
 800fe42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fe46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe4a:	0d1b      	lsrs	r3, r3, #20
 800fe4c:	051b      	lsls	r3, r3, #20
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1b9      	bne.n	800fdc6 <_strtod_l+0x76>
 800fe52:	f7fe fc45 	bl	800e6e0 <__errno>
 800fe56:	2322      	movs	r3, #34	; 0x22
 800fe58:	6003      	str	r3, [r0, #0]
 800fe5a:	e7b4      	b.n	800fdc6 <_strtod_l+0x76>
 800fe5c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800fe60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fe64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fe68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fe6c:	e7e7      	b.n	800fe3e <_strtod_l+0xee>
 800fe6e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800fff4 <_strtod_l+0x2a4>
 800fe72:	e7e4      	b.n	800fe3e <_strtod_l+0xee>
 800fe74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fe78:	f04f 38ff 	mov.w	r8, #4294967295
 800fe7c:	e7df      	b.n	800fe3e <_strtod_l+0xee>
 800fe7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe80:	1c5a      	adds	r2, r3, #1
 800fe82:	9211      	str	r2, [sp, #68]	; 0x44
 800fe84:	785b      	ldrb	r3, [r3, #1]
 800fe86:	2b30      	cmp	r3, #48	; 0x30
 800fe88:	d0f9      	beq.n	800fe7e <_strtod_l+0x12e>
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d09b      	beq.n	800fdc6 <_strtod_l+0x76>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	9306      	str	r3, [sp, #24]
 800fe92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe94:	9309      	str	r3, [sp, #36]	; 0x24
 800fe96:	2300      	movs	r3, #0
 800fe98:	9305      	str	r3, [sp, #20]
 800fe9a:	9307      	str	r3, [sp, #28]
 800fe9c:	461e      	mov	r6, r3
 800fe9e:	220a      	movs	r2, #10
 800fea0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fea2:	7805      	ldrb	r5, [r0, #0]
 800fea4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800fea8:	b2d9      	uxtb	r1, r3
 800feaa:	2909      	cmp	r1, #9
 800feac:	d92b      	bls.n	800ff06 <_strtod_l+0x1b6>
 800feae:	4950      	ldr	r1, [pc, #320]	; (800fff0 <_strtod_l+0x2a0>)
 800feb0:	2201      	movs	r2, #1
 800feb2:	f000 ffa9 	bl	8010e08 <strncmp>
 800feb6:	2800      	cmp	r0, #0
 800feb8:	d035      	beq.n	800ff26 <_strtod_l+0x1d6>
 800feba:	2000      	movs	r0, #0
 800febc:	462a      	mov	r2, r5
 800febe:	4633      	mov	r3, r6
 800fec0:	4683      	mov	fp, r0
 800fec2:	4601      	mov	r1, r0
 800fec4:	2a65      	cmp	r2, #101	; 0x65
 800fec6:	d001      	beq.n	800fecc <_strtod_l+0x17c>
 800fec8:	2a45      	cmp	r2, #69	; 0x45
 800feca:	d118      	bne.n	800fefe <_strtod_l+0x1ae>
 800fecc:	b91b      	cbnz	r3, 800fed6 <_strtod_l+0x186>
 800fece:	9b06      	ldr	r3, [sp, #24]
 800fed0:	4303      	orrs	r3, r0
 800fed2:	d094      	beq.n	800fdfe <_strtod_l+0xae>
 800fed4:	2300      	movs	r3, #0
 800fed6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800feda:	f10a 0201 	add.w	r2, sl, #1
 800fede:	9211      	str	r2, [sp, #68]	; 0x44
 800fee0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800fee4:	2a2b      	cmp	r2, #43	; 0x2b
 800fee6:	d075      	beq.n	800ffd4 <_strtod_l+0x284>
 800fee8:	2a2d      	cmp	r2, #45	; 0x2d
 800feea:	d07b      	beq.n	800ffe4 <_strtod_l+0x294>
 800feec:	f04f 0e00 	mov.w	lr, #0
 800fef0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800fef4:	2d09      	cmp	r5, #9
 800fef6:	f240 8083 	bls.w	8010000 <_strtod_l+0x2b0>
 800fefa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800fefe:	2500      	movs	r5, #0
 800ff00:	e09e      	b.n	8010040 <_strtod_l+0x2f0>
 800ff02:	2300      	movs	r3, #0
 800ff04:	e7c4      	b.n	800fe90 <_strtod_l+0x140>
 800ff06:	2e08      	cmp	r6, #8
 800ff08:	bfd5      	itete	le
 800ff0a:	9907      	ldrle	r1, [sp, #28]
 800ff0c:	9905      	ldrgt	r1, [sp, #20]
 800ff0e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff12:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ff16:	f100 0001 	add.w	r0, r0, #1
 800ff1a:	bfd4      	ite	le
 800ff1c:	9307      	strle	r3, [sp, #28]
 800ff1e:	9305      	strgt	r3, [sp, #20]
 800ff20:	3601      	adds	r6, #1
 800ff22:	9011      	str	r0, [sp, #68]	; 0x44
 800ff24:	e7bc      	b.n	800fea0 <_strtod_l+0x150>
 800ff26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff28:	1c5a      	adds	r2, r3, #1
 800ff2a:	9211      	str	r2, [sp, #68]	; 0x44
 800ff2c:	785a      	ldrb	r2, [r3, #1]
 800ff2e:	b3ae      	cbz	r6, 800ff9c <_strtod_l+0x24c>
 800ff30:	4683      	mov	fp, r0
 800ff32:	4633      	mov	r3, r6
 800ff34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ff38:	2909      	cmp	r1, #9
 800ff3a:	d912      	bls.n	800ff62 <_strtod_l+0x212>
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	e7c1      	b.n	800fec4 <_strtod_l+0x174>
 800ff40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	9211      	str	r2, [sp, #68]	; 0x44
 800ff46:	785a      	ldrb	r2, [r3, #1]
 800ff48:	3001      	adds	r0, #1
 800ff4a:	2a30      	cmp	r2, #48	; 0x30
 800ff4c:	d0f8      	beq.n	800ff40 <_strtod_l+0x1f0>
 800ff4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ff52:	2b08      	cmp	r3, #8
 800ff54:	f200 8495 	bhi.w	8010882 <_strtod_l+0xb32>
 800ff58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff5c:	4683      	mov	fp, r0
 800ff5e:	2000      	movs	r0, #0
 800ff60:	4603      	mov	r3, r0
 800ff62:	3a30      	subs	r2, #48	; 0x30
 800ff64:	f100 0101 	add.w	r1, r0, #1
 800ff68:	d012      	beq.n	800ff90 <_strtod_l+0x240>
 800ff6a:	448b      	add	fp, r1
 800ff6c:	eb00 0c03 	add.w	ip, r0, r3
 800ff70:	4619      	mov	r1, r3
 800ff72:	250a      	movs	r5, #10
 800ff74:	4561      	cmp	r1, ip
 800ff76:	d113      	bne.n	800ffa0 <_strtod_l+0x250>
 800ff78:	1819      	adds	r1, r3, r0
 800ff7a:	2908      	cmp	r1, #8
 800ff7c:	f103 0301 	add.w	r3, r3, #1
 800ff80:	4403      	add	r3, r0
 800ff82:	dc1b      	bgt.n	800ffbc <_strtod_l+0x26c>
 800ff84:	9807      	ldr	r0, [sp, #28]
 800ff86:	210a      	movs	r1, #10
 800ff88:	fb01 2200 	mla	r2, r1, r0, r2
 800ff8c:	9207      	str	r2, [sp, #28]
 800ff8e:	2100      	movs	r1, #0
 800ff90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ff92:	1c50      	adds	r0, r2, #1
 800ff94:	9011      	str	r0, [sp, #68]	; 0x44
 800ff96:	7852      	ldrb	r2, [r2, #1]
 800ff98:	4608      	mov	r0, r1
 800ff9a:	e7cb      	b.n	800ff34 <_strtod_l+0x1e4>
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	e7d4      	b.n	800ff4a <_strtod_l+0x1fa>
 800ffa0:	2908      	cmp	r1, #8
 800ffa2:	f101 0101 	add.w	r1, r1, #1
 800ffa6:	dc03      	bgt.n	800ffb0 <_strtod_l+0x260>
 800ffa8:	9f07      	ldr	r7, [sp, #28]
 800ffaa:	436f      	muls	r7, r5
 800ffac:	9707      	str	r7, [sp, #28]
 800ffae:	e7e1      	b.n	800ff74 <_strtod_l+0x224>
 800ffb0:	2910      	cmp	r1, #16
 800ffb2:	bfde      	ittt	le
 800ffb4:	9f05      	ldrle	r7, [sp, #20]
 800ffb6:	436f      	mulle	r7, r5
 800ffb8:	9705      	strle	r7, [sp, #20]
 800ffba:	e7db      	b.n	800ff74 <_strtod_l+0x224>
 800ffbc:	2b10      	cmp	r3, #16
 800ffbe:	bfdf      	itttt	le
 800ffc0:	9805      	ldrle	r0, [sp, #20]
 800ffc2:	210a      	movle	r1, #10
 800ffc4:	fb01 2200 	mlale	r2, r1, r0, r2
 800ffc8:	9205      	strle	r2, [sp, #20]
 800ffca:	e7e0      	b.n	800ff8e <_strtod_l+0x23e>
 800ffcc:	f04f 0b00 	mov.w	fp, #0
 800ffd0:	2101      	movs	r1, #1
 800ffd2:	e77c      	b.n	800fece <_strtod_l+0x17e>
 800ffd4:	f04f 0e00 	mov.w	lr, #0
 800ffd8:	f10a 0202 	add.w	r2, sl, #2
 800ffdc:	9211      	str	r2, [sp, #68]	; 0x44
 800ffde:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800ffe2:	e785      	b.n	800fef0 <_strtod_l+0x1a0>
 800ffe4:	f04f 0e01 	mov.w	lr, #1
 800ffe8:	e7f6      	b.n	800ffd8 <_strtod_l+0x288>
 800ffea:	bf00      	nop
 800ffec:	08011e28 	.word	0x08011e28
 800fff0:	08011e24 	.word	0x08011e24
 800fff4:	7ff00000 	.word	0x7ff00000
 800fff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fffa:	1c55      	adds	r5, r2, #1
 800fffc:	9511      	str	r5, [sp, #68]	; 0x44
 800fffe:	7852      	ldrb	r2, [r2, #1]
 8010000:	2a30      	cmp	r2, #48	; 0x30
 8010002:	d0f9      	beq.n	800fff8 <_strtod_l+0x2a8>
 8010004:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010008:	2d08      	cmp	r5, #8
 801000a:	f63f af78 	bhi.w	800fefe <_strtod_l+0x1ae>
 801000e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010012:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010014:	920a      	str	r2, [sp, #40]	; 0x28
 8010016:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010018:	1c55      	adds	r5, r2, #1
 801001a:	9511      	str	r5, [sp, #68]	; 0x44
 801001c:	7852      	ldrb	r2, [r2, #1]
 801001e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010022:	2f09      	cmp	r7, #9
 8010024:	d937      	bls.n	8010096 <_strtod_l+0x346>
 8010026:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010028:	1bed      	subs	r5, r5, r7
 801002a:	2d08      	cmp	r5, #8
 801002c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010030:	dc02      	bgt.n	8010038 <_strtod_l+0x2e8>
 8010032:	4565      	cmp	r5, ip
 8010034:	bfa8      	it	ge
 8010036:	4665      	movge	r5, ip
 8010038:	f1be 0f00 	cmp.w	lr, #0
 801003c:	d000      	beq.n	8010040 <_strtod_l+0x2f0>
 801003e:	426d      	negs	r5, r5
 8010040:	2b00      	cmp	r3, #0
 8010042:	d14d      	bne.n	80100e0 <_strtod_l+0x390>
 8010044:	9b06      	ldr	r3, [sp, #24]
 8010046:	4303      	orrs	r3, r0
 8010048:	f47f aebd 	bne.w	800fdc6 <_strtod_l+0x76>
 801004c:	2900      	cmp	r1, #0
 801004e:	f47f aed6 	bne.w	800fdfe <_strtod_l+0xae>
 8010052:	2a69      	cmp	r2, #105	; 0x69
 8010054:	d027      	beq.n	80100a6 <_strtod_l+0x356>
 8010056:	dc24      	bgt.n	80100a2 <_strtod_l+0x352>
 8010058:	2a49      	cmp	r2, #73	; 0x49
 801005a:	d024      	beq.n	80100a6 <_strtod_l+0x356>
 801005c:	2a4e      	cmp	r2, #78	; 0x4e
 801005e:	f47f aece 	bne.w	800fdfe <_strtod_l+0xae>
 8010062:	4995      	ldr	r1, [pc, #596]	; (80102b8 <_strtod_l+0x568>)
 8010064:	a811      	add	r0, sp, #68	; 0x44
 8010066:	f001 f9d3 	bl	8011410 <__match>
 801006a:	2800      	cmp	r0, #0
 801006c:	f43f aec7 	beq.w	800fdfe <_strtod_l+0xae>
 8010070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	2b28      	cmp	r3, #40	; 0x28
 8010076:	d12d      	bne.n	80100d4 <_strtod_l+0x384>
 8010078:	4990      	ldr	r1, [pc, #576]	; (80102bc <_strtod_l+0x56c>)
 801007a:	aa14      	add	r2, sp, #80	; 0x50
 801007c:	a811      	add	r0, sp, #68	; 0x44
 801007e:	f001 f9db 	bl	8011438 <__hexnan>
 8010082:	2805      	cmp	r0, #5
 8010084:	d126      	bne.n	80100d4 <_strtod_l+0x384>
 8010086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010088:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801008c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010090:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010094:	e697      	b.n	800fdc6 <_strtod_l+0x76>
 8010096:	250a      	movs	r5, #10
 8010098:	fb05 2c0c 	mla	ip, r5, ip, r2
 801009c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80100a0:	e7b9      	b.n	8010016 <_strtod_l+0x2c6>
 80100a2:	2a6e      	cmp	r2, #110	; 0x6e
 80100a4:	e7db      	b.n	801005e <_strtod_l+0x30e>
 80100a6:	4986      	ldr	r1, [pc, #536]	; (80102c0 <_strtod_l+0x570>)
 80100a8:	a811      	add	r0, sp, #68	; 0x44
 80100aa:	f001 f9b1 	bl	8011410 <__match>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f43f aea5 	beq.w	800fdfe <_strtod_l+0xae>
 80100b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100b6:	4983      	ldr	r1, [pc, #524]	; (80102c4 <_strtod_l+0x574>)
 80100b8:	3b01      	subs	r3, #1
 80100ba:	a811      	add	r0, sp, #68	; 0x44
 80100bc:	9311      	str	r3, [sp, #68]	; 0x44
 80100be:	f001 f9a7 	bl	8011410 <__match>
 80100c2:	b910      	cbnz	r0, 80100ca <_strtod_l+0x37a>
 80100c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100c6:	3301      	adds	r3, #1
 80100c8:	9311      	str	r3, [sp, #68]	; 0x44
 80100ca:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80102d8 <_strtod_l+0x588>
 80100ce:	f04f 0800 	mov.w	r8, #0
 80100d2:	e678      	b.n	800fdc6 <_strtod_l+0x76>
 80100d4:	487c      	ldr	r0, [pc, #496]	; (80102c8 <_strtod_l+0x578>)
 80100d6:	f000 feb7 	bl	8010e48 <nan>
 80100da:	ec59 8b10 	vmov	r8, r9, d0
 80100de:	e672      	b.n	800fdc6 <_strtod_l+0x76>
 80100e0:	eddd 7a07 	vldr	s15, [sp, #28]
 80100e4:	eba5 020b 	sub.w	r2, r5, fp
 80100e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80100ec:	2e00      	cmp	r6, #0
 80100ee:	bf08      	it	eq
 80100f0:	461e      	moveq	r6, r3
 80100f2:	2b10      	cmp	r3, #16
 80100f4:	9206      	str	r2, [sp, #24]
 80100f6:	461a      	mov	r2, r3
 80100f8:	bfa8      	it	ge
 80100fa:	2210      	movge	r2, #16
 80100fc:	2b09      	cmp	r3, #9
 80100fe:	ec59 8b17 	vmov	r8, r9, d7
 8010102:	dd0c      	ble.n	801011e <_strtod_l+0x3ce>
 8010104:	4971      	ldr	r1, [pc, #452]	; (80102cc <_strtod_l+0x57c>)
 8010106:	eddd 6a05 	vldr	s13, [sp, #20]
 801010a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801010e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8010112:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010116:	eea7 6b05 	vfma.f64	d6, d7, d5
 801011a:	ec59 8b16 	vmov	r8, r9, d6
 801011e:	2b0f      	cmp	r3, #15
 8010120:	dc37      	bgt.n	8010192 <_strtod_l+0x442>
 8010122:	9906      	ldr	r1, [sp, #24]
 8010124:	2900      	cmp	r1, #0
 8010126:	f43f ae4e 	beq.w	800fdc6 <_strtod_l+0x76>
 801012a:	dd23      	ble.n	8010174 <_strtod_l+0x424>
 801012c:	2916      	cmp	r1, #22
 801012e:	dc0b      	bgt.n	8010148 <_strtod_l+0x3f8>
 8010130:	4b66      	ldr	r3, [pc, #408]	; (80102cc <_strtod_l+0x57c>)
 8010132:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010136:	ed93 7b00 	vldr	d7, [r3]
 801013a:	ec49 8b16 	vmov	d6, r8, r9
 801013e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010142:	ec59 8b17 	vmov	r8, r9, d7
 8010146:	e63e      	b.n	800fdc6 <_strtod_l+0x76>
 8010148:	9806      	ldr	r0, [sp, #24]
 801014a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801014e:	4281      	cmp	r1, r0
 8010150:	db1f      	blt.n	8010192 <_strtod_l+0x442>
 8010152:	4a5e      	ldr	r2, [pc, #376]	; (80102cc <_strtod_l+0x57c>)
 8010154:	f1c3 030f 	rsb	r3, r3, #15
 8010158:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801015c:	ed91 7b00 	vldr	d7, [r1]
 8010160:	ec49 8b16 	vmov	d6, r8, r9
 8010164:	1ac3      	subs	r3, r0, r3
 8010166:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801016a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801016e:	ed92 6b00 	vldr	d6, [r2]
 8010172:	e7e4      	b.n	801013e <_strtod_l+0x3ee>
 8010174:	9906      	ldr	r1, [sp, #24]
 8010176:	3116      	adds	r1, #22
 8010178:	db0b      	blt.n	8010192 <_strtod_l+0x442>
 801017a:	4b54      	ldr	r3, [pc, #336]	; (80102cc <_strtod_l+0x57c>)
 801017c:	ebab 0505 	sub.w	r5, fp, r5
 8010180:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010184:	ed95 7b00 	vldr	d7, [r5]
 8010188:	ec49 8b16 	vmov	d6, r8, r9
 801018c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010190:	e7d7      	b.n	8010142 <_strtod_l+0x3f2>
 8010192:	9906      	ldr	r1, [sp, #24]
 8010194:	1a9a      	subs	r2, r3, r2
 8010196:	440a      	add	r2, r1
 8010198:	2a00      	cmp	r2, #0
 801019a:	dd6e      	ble.n	801027a <_strtod_l+0x52a>
 801019c:	f012 000f 	ands.w	r0, r2, #15
 80101a0:	d00a      	beq.n	80101b8 <_strtod_l+0x468>
 80101a2:	494a      	ldr	r1, [pc, #296]	; (80102cc <_strtod_l+0x57c>)
 80101a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80101a8:	ed91 7b00 	vldr	d7, [r1]
 80101ac:	ec49 8b16 	vmov	d6, r8, r9
 80101b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101b4:	ec59 8b17 	vmov	r8, r9, d7
 80101b8:	f032 020f 	bics.w	r2, r2, #15
 80101bc:	d04e      	beq.n	801025c <_strtod_l+0x50c>
 80101be:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80101c2:	dd22      	ble.n	801020a <_strtod_l+0x4ba>
 80101c4:	2500      	movs	r5, #0
 80101c6:	462e      	mov	r6, r5
 80101c8:	9507      	str	r5, [sp, #28]
 80101ca:	462f      	mov	r7, r5
 80101cc:	2322      	movs	r3, #34	; 0x22
 80101ce:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80102d8 <_strtod_l+0x588>
 80101d2:	6023      	str	r3, [r4, #0]
 80101d4:	f04f 0800 	mov.w	r8, #0
 80101d8:	9b07      	ldr	r3, [sp, #28]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f43f adf3 	beq.w	800fdc6 <_strtod_l+0x76>
 80101e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80101e2:	4620      	mov	r0, r4
 80101e4:	f7ff f930 	bl	800f448 <_Bfree>
 80101e8:	4639      	mov	r1, r7
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7ff f92c 	bl	800f448 <_Bfree>
 80101f0:	4631      	mov	r1, r6
 80101f2:	4620      	mov	r0, r4
 80101f4:	f7ff f928 	bl	800f448 <_Bfree>
 80101f8:	9907      	ldr	r1, [sp, #28]
 80101fa:	4620      	mov	r0, r4
 80101fc:	f7ff f924 	bl	800f448 <_Bfree>
 8010200:	4629      	mov	r1, r5
 8010202:	4620      	mov	r0, r4
 8010204:	f7ff f920 	bl	800f448 <_Bfree>
 8010208:	e5dd      	b.n	800fdc6 <_strtod_l+0x76>
 801020a:	2000      	movs	r0, #0
 801020c:	ec49 8b17 	vmov	d7, r8, r9
 8010210:	4f2f      	ldr	r7, [pc, #188]	; (80102d0 <_strtod_l+0x580>)
 8010212:	1112      	asrs	r2, r2, #4
 8010214:	4601      	mov	r1, r0
 8010216:	2a01      	cmp	r2, #1
 8010218:	dc23      	bgt.n	8010262 <_strtod_l+0x512>
 801021a:	b108      	cbz	r0, 8010220 <_strtod_l+0x4d0>
 801021c:	ec59 8b17 	vmov	r8, r9, d7
 8010220:	4a2b      	ldr	r2, [pc, #172]	; (80102d0 <_strtod_l+0x580>)
 8010222:	482c      	ldr	r0, [pc, #176]	; (80102d4 <_strtod_l+0x584>)
 8010224:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010228:	ed92 7b00 	vldr	d7, [r2]
 801022c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010230:	ec49 8b16 	vmov	d6, r8, r9
 8010234:	4a28      	ldr	r2, [pc, #160]	; (80102d8 <_strtod_l+0x588>)
 8010236:	ee27 7b06 	vmul.f64	d7, d7, d6
 801023a:	ee17 1a90 	vmov	r1, s15
 801023e:	400a      	ands	r2, r1
 8010240:	4282      	cmp	r2, r0
 8010242:	ec59 8b17 	vmov	r8, r9, d7
 8010246:	d8bd      	bhi.n	80101c4 <_strtod_l+0x474>
 8010248:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801024c:	4282      	cmp	r2, r0
 801024e:	bf86      	itte	hi
 8010250:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80102dc <_strtod_l+0x58c>
 8010254:	f04f 38ff 	movhi.w	r8, #4294967295
 8010258:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801025c:	2200      	movs	r2, #0
 801025e:	9205      	str	r2, [sp, #20]
 8010260:	e076      	b.n	8010350 <_strtod_l+0x600>
 8010262:	f012 0f01 	tst.w	r2, #1
 8010266:	d004      	beq.n	8010272 <_strtod_l+0x522>
 8010268:	ed97 6b00 	vldr	d6, [r7]
 801026c:	2001      	movs	r0, #1
 801026e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010272:	3101      	adds	r1, #1
 8010274:	1052      	asrs	r2, r2, #1
 8010276:	3708      	adds	r7, #8
 8010278:	e7cd      	b.n	8010216 <_strtod_l+0x4c6>
 801027a:	d0ef      	beq.n	801025c <_strtod_l+0x50c>
 801027c:	4252      	negs	r2, r2
 801027e:	f012 000f 	ands.w	r0, r2, #15
 8010282:	d00a      	beq.n	801029a <_strtod_l+0x54a>
 8010284:	4911      	ldr	r1, [pc, #68]	; (80102cc <_strtod_l+0x57c>)
 8010286:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801028a:	ed91 7b00 	vldr	d7, [r1]
 801028e:	ec49 8b16 	vmov	d6, r8, r9
 8010292:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010296:	ec59 8b17 	vmov	r8, r9, d7
 801029a:	1112      	asrs	r2, r2, #4
 801029c:	d0de      	beq.n	801025c <_strtod_l+0x50c>
 801029e:	2a1f      	cmp	r2, #31
 80102a0:	dd1e      	ble.n	80102e0 <_strtod_l+0x590>
 80102a2:	2500      	movs	r5, #0
 80102a4:	462e      	mov	r6, r5
 80102a6:	9507      	str	r5, [sp, #28]
 80102a8:	462f      	mov	r7, r5
 80102aa:	2322      	movs	r3, #34	; 0x22
 80102ac:	f04f 0800 	mov.w	r8, #0
 80102b0:	f04f 0900 	mov.w	r9, #0
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	e78f      	b.n	80101d8 <_strtod_l+0x488>
 80102b8:	08011c11 	.word	0x08011c11
 80102bc:	08011e3c 	.word	0x08011e3c
 80102c0:	08011c09 	.word	0x08011c09
 80102c4:	08011c40 	.word	0x08011c40
 80102c8:	08011fcd 	.word	0x08011fcd
 80102cc:	08011d50 	.word	0x08011d50
 80102d0:	08011d28 	.word	0x08011d28
 80102d4:	7ca00000 	.word	0x7ca00000
 80102d8:	7ff00000 	.word	0x7ff00000
 80102dc:	7fefffff 	.word	0x7fefffff
 80102e0:	f012 0110 	ands.w	r1, r2, #16
 80102e4:	bf18      	it	ne
 80102e6:	216a      	movne	r1, #106	; 0x6a
 80102e8:	9105      	str	r1, [sp, #20]
 80102ea:	ec49 8b17 	vmov	d7, r8, r9
 80102ee:	49be      	ldr	r1, [pc, #760]	; (80105e8 <_strtod_l+0x898>)
 80102f0:	2000      	movs	r0, #0
 80102f2:	07d7      	lsls	r7, r2, #31
 80102f4:	d504      	bpl.n	8010300 <_strtod_l+0x5b0>
 80102f6:	ed91 6b00 	vldr	d6, [r1]
 80102fa:	2001      	movs	r0, #1
 80102fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010300:	1052      	asrs	r2, r2, #1
 8010302:	f101 0108 	add.w	r1, r1, #8
 8010306:	d1f4      	bne.n	80102f2 <_strtod_l+0x5a2>
 8010308:	b108      	cbz	r0, 801030e <_strtod_l+0x5be>
 801030a:	ec59 8b17 	vmov	r8, r9, d7
 801030e:	9a05      	ldr	r2, [sp, #20]
 8010310:	b1ba      	cbz	r2, 8010342 <_strtod_l+0x5f2>
 8010312:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8010316:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801031a:	2a00      	cmp	r2, #0
 801031c:	4648      	mov	r0, r9
 801031e:	dd10      	ble.n	8010342 <_strtod_l+0x5f2>
 8010320:	2a1f      	cmp	r2, #31
 8010322:	f340 812c 	ble.w	801057e <_strtod_l+0x82e>
 8010326:	2a34      	cmp	r2, #52	; 0x34
 8010328:	bfde      	ittt	le
 801032a:	f04f 32ff 	movle.w	r2, #4294967295
 801032e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8010332:	408a      	lslle	r2, r1
 8010334:	f04f 0800 	mov.w	r8, #0
 8010338:	bfcc      	ite	gt
 801033a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801033e:	ea02 0900 	andle.w	r9, r2, r0
 8010342:	ec49 8b17 	vmov	d7, r8, r9
 8010346:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034e:	d0a8      	beq.n	80102a2 <_strtod_l+0x552>
 8010350:	9a07      	ldr	r2, [sp, #28]
 8010352:	9200      	str	r2, [sp, #0]
 8010354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010356:	4632      	mov	r2, r6
 8010358:	4620      	mov	r0, r4
 801035a:	f7ff f8dd 	bl	800f518 <__s2b>
 801035e:	9007      	str	r0, [sp, #28]
 8010360:	2800      	cmp	r0, #0
 8010362:	f43f af2f 	beq.w	80101c4 <_strtod_l+0x474>
 8010366:	9a06      	ldr	r2, [sp, #24]
 8010368:	2a00      	cmp	r2, #0
 801036a:	ebab 0305 	sub.w	r3, fp, r5
 801036e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80105c8 <_strtod_l+0x878>
 8010372:	bfa8      	it	ge
 8010374:	2300      	movge	r3, #0
 8010376:	ed9f ab96 	vldr	d10, [pc, #600]	; 80105d0 <_strtod_l+0x880>
 801037a:	ed9f bb97 	vldr	d11, [pc, #604]	; 80105d8 <_strtod_l+0x888>
 801037e:	9309      	str	r3, [sp, #36]	; 0x24
 8010380:	2500      	movs	r5, #0
 8010382:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010386:	930c      	str	r3, [sp, #48]	; 0x30
 8010388:	462e      	mov	r6, r5
 801038a:	9b07      	ldr	r3, [sp, #28]
 801038c:	4620      	mov	r0, r4
 801038e:	6859      	ldr	r1, [r3, #4]
 8010390:	f7ff f81a 	bl	800f3c8 <_Balloc>
 8010394:	4607      	mov	r7, r0
 8010396:	2800      	cmp	r0, #0
 8010398:	f43f af18 	beq.w	80101cc <_strtod_l+0x47c>
 801039c:	9b07      	ldr	r3, [sp, #28]
 801039e:	691a      	ldr	r2, [r3, #16]
 80103a0:	3202      	adds	r2, #2
 80103a2:	f103 010c 	add.w	r1, r3, #12
 80103a6:	0092      	lsls	r2, r2, #2
 80103a8:	300c      	adds	r0, #12
 80103aa:	f000 fd3f 	bl	8010e2c <memcpy>
 80103ae:	ec49 8b10 	vmov	d0, r8, r9
 80103b2:	aa14      	add	r2, sp, #80	; 0x50
 80103b4:	a913      	add	r1, sp, #76	; 0x4c
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7ff fbe2 	bl	800fb80 <__d2b>
 80103bc:	ec49 8b18 	vmov	d8, r8, r9
 80103c0:	9012      	str	r0, [sp, #72]	; 0x48
 80103c2:	2800      	cmp	r0, #0
 80103c4:	f43f af02 	beq.w	80101cc <_strtod_l+0x47c>
 80103c8:	2101      	movs	r1, #1
 80103ca:	4620      	mov	r0, r4
 80103cc:	f7ff f93c 	bl	800f648 <__i2b>
 80103d0:	4606      	mov	r6, r0
 80103d2:	2800      	cmp	r0, #0
 80103d4:	f43f aefa 	beq.w	80101cc <_strtod_l+0x47c>
 80103d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80103dc:	2b00      	cmp	r3, #0
 80103de:	bfab      	itete	ge
 80103e0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80103e2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80103e4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80103e8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80103ec:	bfac      	ite	ge
 80103ee:	eb03 0b02 	addge.w	fp, r3, r2
 80103f2:	eba2 0a03 	sublt.w	sl, r2, r3
 80103f6:	9a05      	ldr	r2, [sp, #20]
 80103f8:	1a9b      	subs	r3, r3, r2
 80103fa:	440b      	add	r3, r1
 80103fc:	4a7b      	ldr	r2, [pc, #492]	; (80105ec <_strtod_l+0x89c>)
 80103fe:	3b01      	subs	r3, #1
 8010400:	4293      	cmp	r3, r2
 8010402:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8010406:	f280 80cd 	bge.w	80105a4 <_strtod_l+0x854>
 801040a:	1ad2      	subs	r2, r2, r3
 801040c:	2a1f      	cmp	r2, #31
 801040e:	eba1 0102 	sub.w	r1, r1, r2
 8010412:	f04f 0001 	mov.w	r0, #1
 8010416:	f300 80b9 	bgt.w	801058c <_strtod_l+0x83c>
 801041a:	fa00 f302 	lsl.w	r3, r0, r2
 801041e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010420:	2300      	movs	r3, #0
 8010422:	930a      	str	r3, [sp, #40]	; 0x28
 8010424:	eb0b 0301 	add.w	r3, fp, r1
 8010428:	9a05      	ldr	r2, [sp, #20]
 801042a:	459b      	cmp	fp, r3
 801042c:	448a      	add	sl, r1
 801042e:	4492      	add	sl, r2
 8010430:	465a      	mov	r2, fp
 8010432:	bfa8      	it	ge
 8010434:	461a      	movge	r2, r3
 8010436:	4552      	cmp	r2, sl
 8010438:	bfa8      	it	ge
 801043a:	4652      	movge	r2, sl
 801043c:	2a00      	cmp	r2, #0
 801043e:	bfc2      	ittt	gt
 8010440:	1a9b      	subgt	r3, r3, r2
 8010442:	ebaa 0a02 	subgt.w	sl, sl, r2
 8010446:	ebab 0b02 	subgt.w	fp, fp, r2
 801044a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801044c:	2a00      	cmp	r2, #0
 801044e:	dd18      	ble.n	8010482 <_strtod_l+0x732>
 8010450:	4631      	mov	r1, r6
 8010452:	4620      	mov	r0, r4
 8010454:	930f      	str	r3, [sp, #60]	; 0x3c
 8010456:	f7ff f9b7 	bl	800f7c8 <__pow5mult>
 801045a:	4606      	mov	r6, r0
 801045c:	2800      	cmp	r0, #0
 801045e:	f43f aeb5 	beq.w	80101cc <_strtod_l+0x47c>
 8010462:	4601      	mov	r1, r0
 8010464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010466:	4620      	mov	r0, r4
 8010468:	f7ff f904 	bl	800f674 <__multiply>
 801046c:	900e      	str	r0, [sp, #56]	; 0x38
 801046e:	2800      	cmp	r0, #0
 8010470:	f43f aeac 	beq.w	80101cc <_strtod_l+0x47c>
 8010474:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010476:	4620      	mov	r0, r4
 8010478:	f7fe ffe6 	bl	800f448 <_Bfree>
 801047c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801047e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010480:	9212      	str	r2, [sp, #72]	; 0x48
 8010482:	2b00      	cmp	r3, #0
 8010484:	f300 8093 	bgt.w	80105ae <_strtod_l+0x85e>
 8010488:	9b06      	ldr	r3, [sp, #24]
 801048a:	2b00      	cmp	r3, #0
 801048c:	dd08      	ble.n	80104a0 <_strtod_l+0x750>
 801048e:	4639      	mov	r1, r7
 8010490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010492:	4620      	mov	r0, r4
 8010494:	f7ff f998 	bl	800f7c8 <__pow5mult>
 8010498:	4607      	mov	r7, r0
 801049a:	2800      	cmp	r0, #0
 801049c:	f43f ae96 	beq.w	80101cc <_strtod_l+0x47c>
 80104a0:	f1ba 0f00 	cmp.w	sl, #0
 80104a4:	dd08      	ble.n	80104b8 <_strtod_l+0x768>
 80104a6:	4639      	mov	r1, r7
 80104a8:	4652      	mov	r2, sl
 80104aa:	4620      	mov	r0, r4
 80104ac:	f7ff f9e6 	bl	800f87c <__lshift>
 80104b0:	4607      	mov	r7, r0
 80104b2:	2800      	cmp	r0, #0
 80104b4:	f43f ae8a 	beq.w	80101cc <_strtod_l+0x47c>
 80104b8:	f1bb 0f00 	cmp.w	fp, #0
 80104bc:	dd08      	ble.n	80104d0 <_strtod_l+0x780>
 80104be:	4631      	mov	r1, r6
 80104c0:	465a      	mov	r2, fp
 80104c2:	4620      	mov	r0, r4
 80104c4:	f7ff f9da 	bl	800f87c <__lshift>
 80104c8:	4606      	mov	r6, r0
 80104ca:	2800      	cmp	r0, #0
 80104cc:	f43f ae7e 	beq.w	80101cc <_strtod_l+0x47c>
 80104d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80104d2:	463a      	mov	r2, r7
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7ff fa59 	bl	800f98c <__mdiff>
 80104da:	4605      	mov	r5, r0
 80104dc:	2800      	cmp	r0, #0
 80104de:	f43f ae75 	beq.w	80101cc <_strtod_l+0x47c>
 80104e2:	2300      	movs	r3, #0
 80104e4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80104e8:	60c3      	str	r3, [r0, #12]
 80104ea:	4631      	mov	r1, r6
 80104ec:	f7ff fa32 	bl	800f954 <__mcmp>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	da7f      	bge.n	80105f4 <_strtod_l+0x8a4>
 80104f4:	ea5a 0a08 	orrs.w	sl, sl, r8
 80104f8:	f040 80a5 	bne.w	8010646 <_strtod_l+0x8f6>
 80104fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010500:	2b00      	cmp	r3, #0
 8010502:	f040 80a0 	bne.w	8010646 <_strtod_l+0x8f6>
 8010506:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801050a:	0d1b      	lsrs	r3, r3, #20
 801050c:	051b      	lsls	r3, r3, #20
 801050e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010512:	f240 8098 	bls.w	8010646 <_strtod_l+0x8f6>
 8010516:	696b      	ldr	r3, [r5, #20]
 8010518:	b91b      	cbnz	r3, 8010522 <_strtod_l+0x7d2>
 801051a:	692b      	ldr	r3, [r5, #16]
 801051c:	2b01      	cmp	r3, #1
 801051e:	f340 8092 	ble.w	8010646 <_strtod_l+0x8f6>
 8010522:	4629      	mov	r1, r5
 8010524:	2201      	movs	r2, #1
 8010526:	4620      	mov	r0, r4
 8010528:	f7ff f9a8 	bl	800f87c <__lshift>
 801052c:	4631      	mov	r1, r6
 801052e:	4605      	mov	r5, r0
 8010530:	f7ff fa10 	bl	800f954 <__mcmp>
 8010534:	2800      	cmp	r0, #0
 8010536:	f340 8086 	ble.w	8010646 <_strtod_l+0x8f6>
 801053a:	9905      	ldr	r1, [sp, #20]
 801053c:	4a2c      	ldr	r2, [pc, #176]	; (80105f0 <_strtod_l+0x8a0>)
 801053e:	464b      	mov	r3, r9
 8010540:	2900      	cmp	r1, #0
 8010542:	f000 809f 	beq.w	8010684 <_strtod_l+0x934>
 8010546:	ea02 0109 	and.w	r1, r2, r9
 801054a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801054e:	f300 8099 	bgt.w	8010684 <_strtod_l+0x934>
 8010552:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010556:	f77f aea8 	ble.w	80102aa <_strtod_l+0x55a>
 801055a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80105e0 <_strtod_l+0x890>
 801055e:	ec49 8b16 	vmov	d6, r8, r9
 8010562:	4b23      	ldr	r3, [pc, #140]	; (80105f0 <_strtod_l+0x8a0>)
 8010564:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010568:	ee17 2a90 	vmov	r2, s15
 801056c:	4013      	ands	r3, r2
 801056e:	ec59 8b17 	vmov	r8, r9, d7
 8010572:	2b00      	cmp	r3, #0
 8010574:	f47f ae34 	bne.w	80101e0 <_strtod_l+0x490>
 8010578:	2322      	movs	r3, #34	; 0x22
 801057a:	6023      	str	r3, [r4, #0]
 801057c:	e630      	b.n	80101e0 <_strtod_l+0x490>
 801057e:	f04f 31ff 	mov.w	r1, #4294967295
 8010582:	fa01 f202 	lsl.w	r2, r1, r2
 8010586:	ea02 0808 	and.w	r8, r2, r8
 801058a:	e6da      	b.n	8010342 <_strtod_l+0x5f2>
 801058c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8010590:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8010594:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8010598:	33e2      	adds	r3, #226	; 0xe2
 801059a:	fa00 f303 	lsl.w	r3, r0, r3
 801059e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80105a2:	e73f      	b.n	8010424 <_strtod_l+0x6d4>
 80105a4:	2200      	movs	r2, #0
 80105a6:	2301      	movs	r3, #1
 80105a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80105ac:	e73a      	b.n	8010424 <_strtod_l+0x6d4>
 80105ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 80105b0:	461a      	mov	r2, r3
 80105b2:	4620      	mov	r0, r4
 80105b4:	f7ff f962 	bl	800f87c <__lshift>
 80105b8:	9012      	str	r0, [sp, #72]	; 0x48
 80105ba:	2800      	cmp	r0, #0
 80105bc:	f47f af64 	bne.w	8010488 <_strtod_l+0x738>
 80105c0:	e604      	b.n	80101cc <_strtod_l+0x47c>
 80105c2:	bf00      	nop
 80105c4:	f3af 8000 	nop.w
 80105c8:	94a03595 	.word	0x94a03595
 80105cc:	3fcfffff 	.word	0x3fcfffff
 80105d0:	94a03595 	.word	0x94a03595
 80105d4:	3fdfffff 	.word	0x3fdfffff
 80105d8:	35afe535 	.word	0x35afe535
 80105dc:	3fe00000 	.word	0x3fe00000
 80105e0:	00000000 	.word	0x00000000
 80105e4:	39500000 	.word	0x39500000
 80105e8:	08011e50 	.word	0x08011e50
 80105ec:	fffffc02 	.word	0xfffffc02
 80105f0:	7ff00000 	.word	0x7ff00000
 80105f4:	46cb      	mov	fp, r9
 80105f6:	d15f      	bne.n	80106b8 <_strtod_l+0x968>
 80105f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105fc:	f1ba 0f00 	cmp.w	sl, #0
 8010600:	d02a      	beq.n	8010658 <_strtod_l+0x908>
 8010602:	4aa7      	ldr	r2, [pc, #668]	; (80108a0 <_strtod_l+0xb50>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d12b      	bne.n	8010660 <_strtod_l+0x910>
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	4642      	mov	r2, r8
 801060c:	b1fb      	cbz	r3, 801064e <_strtod_l+0x8fe>
 801060e:	4ba5      	ldr	r3, [pc, #660]	; (80108a4 <_strtod_l+0xb54>)
 8010610:	ea09 0303 	and.w	r3, r9, r3
 8010614:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010618:	f04f 31ff 	mov.w	r1, #4294967295
 801061c:	d81a      	bhi.n	8010654 <_strtod_l+0x904>
 801061e:	0d1b      	lsrs	r3, r3, #20
 8010620:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010624:	fa01 f303 	lsl.w	r3, r1, r3
 8010628:	429a      	cmp	r2, r3
 801062a:	d119      	bne.n	8010660 <_strtod_l+0x910>
 801062c:	4b9e      	ldr	r3, [pc, #632]	; (80108a8 <_strtod_l+0xb58>)
 801062e:	459b      	cmp	fp, r3
 8010630:	d102      	bne.n	8010638 <_strtod_l+0x8e8>
 8010632:	3201      	adds	r2, #1
 8010634:	f43f adca 	beq.w	80101cc <_strtod_l+0x47c>
 8010638:	4b9a      	ldr	r3, [pc, #616]	; (80108a4 <_strtod_l+0xb54>)
 801063a:	ea0b 0303 	and.w	r3, fp, r3
 801063e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010642:	f04f 0800 	mov.w	r8, #0
 8010646:	9b05      	ldr	r3, [sp, #20]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d186      	bne.n	801055a <_strtod_l+0x80a>
 801064c:	e5c8      	b.n	80101e0 <_strtod_l+0x490>
 801064e:	f04f 33ff 	mov.w	r3, #4294967295
 8010652:	e7e9      	b.n	8010628 <_strtod_l+0x8d8>
 8010654:	460b      	mov	r3, r1
 8010656:	e7e7      	b.n	8010628 <_strtod_l+0x8d8>
 8010658:	ea53 0308 	orrs.w	r3, r3, r8
 801065c:	f43f af6d 	beq.w	801053a <_strtod_l+0x7ea>
 8010660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010662:	b1cb      	cbz	r3, 8010698 <_strtod_l+0x948>
 8010664:	ea13 0f0b 	tst.w	r3, fp
 8010668:	d0ed      	beq.n	8010646 <_strtod_l+0x8f6>
 801066a:	9a05      	ldr	r2, [sp, #20]
 801066c:	4640      	mov	r0, r8
 801066e:	4649      	mov	r1, r9
 8010670:	f1ba 0f00 	cmp.w	sl, #0
 8010674:	d014      	beq.n	80106a0 <_strtod_l+0x950>
 8010676:	f7ff fb51 	bl	800fd1c <sulp>
 801067a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801067e:	ec59 8b17 	vmov	r8, r9, d7
 8010682:	e7e0      	b.n	8010646 <_strtod_l+0x8f6>
 8010684:	4013      	ands	r3, r2
 8010686:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801068a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801068e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010692:	f04f 38ff 	mov.w	r8, #4294967295
 8010696:	e7d6      	b.n	8010646 <_strtod_l+0x8f6>
 8010698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801069a:	ea13 0f08 	tst.w	r3, r8
 801069e:	e7e3      	b.n	8010668 <_strtod_l+0x918>
 80106a0:	f7ff fb3c 	bl	800fd1c <sulp>
 80106a4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80106a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80106ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b0:	ec59 8b10 	vmov	r8, r9, d0
 80106b4:	d1c7      	bne.n	8010646 <_strtod_l+0x8f6>
 80106b6:	e5f8      	b.n	80102aa <_strtod_l+0x55a>
 80106b8:	4631      	mov	r1, r6
 80106ba:	4628      	mov	r0, r5
 80106bc:	f7ff faba 	bl	800fc34 <__ratio>
 80106c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80106c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80106c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106cc:	d85f      	bhi.n	801078e <_strtod_l+0xa3e>
 80106ce:	f1ba 0f00 	cmp.w	sl, #0
 80106d2:	d166      	bne.n	80107a2 <_strtod_l+0xa52>
 80106d4:	f1b8 0f00 	cmp.w	r8, #0
 80106d8:	d14d      	bne.n	8010776 <_strtod_l+0xa26>
 80106da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106de:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d162      	bne.n	80107ac <_strtod_l+0xa5c>
 80106e6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80106ea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f2:	d401      	bmi.n	80106f8 <_strtod_l+0x9a8>
 80106f4:	ee20 db0d 	vmul.f64	d13, d0, d13
 80106f8:	eeb1 cb4d 	vneg.f64	d12, d13
 80106fc:	4869      	ldr	r0, [pc, #420]	; (80108a4 <_strtod_l+0xb54>)
 80106fe:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80108b0 <_strtod_l+0xb60>
 8010702:	ea0b 0100 	and.w	r1, fp, r0
 8010706:	4561      	cmp	r1, ip
 8010708:	ec53 2b1c 	vmov	r2, r3, d12
 801070c:	d17a      	bne.n	8010804 <_strtod_l+0xab4>
 801070e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8010712:	ec49 8b10 	vmov	d0, r8, r9
 8010716:	910a      	str	r1, [sp, #40]	; 0x28
 8010718:	f7ff f9c2 	bl	800faa0 <__ulp>
 801071c:	ec49 8b1e 	vmov	d14, r8, r9
 8010720:	4860      	ldr	r0, [pc, #384]	; (80108a4 <_strtod_l+0xb54>)
 8010722:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8010726:	ee1e 3a90 	vmov	r3, s29
 801072a:	4a60      	ldr	r2, [pc, #384]	; (80108ac <_strtod_l+0xb5c>)
 801072c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801072e:	4018      	ands	r0, r3
 8010730:	4290      	cmp	r0, r2
 8010732:	ec59 8b1e 	vmov	r8, r9, d14
 8010736:	d93c      	bls.n	80107b2 <_strtod_l+0xa62>
 8010738:	ee18 2a90 	vmov	r2, s17
 801073c:	4b5a      	ldr	r3, [pc, #360]	; (80108a8 <_strtod_l+0xb58>)
 801073e:	429a      	cmp	r2, r3
 8010740:	d104      	bne.n	801074c <_strtod_l+0x9fc>
 8010742:	ee18 3a10 	vmov	r3, s16
 8010746:	3301      	adds	r3, #1
 8010748:	f43f ad40 	beq.w	80101cc <_strtod_l+0x47c>
 801074c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80108a8 <_strtod_l+0xb58>
 8010750:	f04f 38ff 	mov.w	r8, #4294967295
 8010754:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010756:	4620      	mov	r0, r4
 8010758:	f7fe fe76 	bl	800f448 <_Bfree>
 801075c:	4639      	mov	r1, r7
 801075e:	4620      	mov	r0, r4
 8010760:	f7fe fe72 	bl	800f448 <_Bfree>
 8010764:	4631      	mov	r1, r6
 8010766:	4620      	mov	r0, r4
 8010768:	f7fe fe6e 	bl	800f448 <_Bfree>
 801076c:	4629      	mov	r1, r5
 801076e:	4620      	mov	r0, r4
 8010770:	f7fe fe6a 	bl	800f448 <_Bfree>
 8010774:	e609      	b.n	801038a <_strtod_l+0x63a>
 8010776:	f1b8 0f01 	cmp.w	r8, #1
 801077a:	d103      	bne.n	8010784 <_strtod_l+0xa34>
 801077c:	f1b9 0f00 	cmp.w	r9, #0
 8010780:	f43f ad93 	beq.w	80102aa <_strtod_l+0x55a>
 8010784:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8010788:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801078c:	e7b6      	b.n	80106fc <_strtod_l+0x9ac>
 801078e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8010792:	ee20 db0d 	vmul.f64	d13, d0, d13
 8010796:	f1ba 0f00 	cmp.w	sl, #0
 801079a:	d0ad      	beq.n	80106f8 <_strtod_l+0x9a8>
 801079c:	eeb0 cb4d 	vmov.f64	d12, d13
 80107a0:	e7ac      	b.n	80106fc <_strtod_l+0x9ac>
 80107a2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80107a6:	eeb0 db4c 	vmov.f64	d13, d12
 80107aa:	e7a7      	b.n	80106fc <_strtod_l+0x9ac>
 80107ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80107b0:	e7a4      	b.n	80106fc <_strtod_l+0x9ac>
 80107b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80107b6:	9b05      	ldr	r3, [sp, #20]
 80107b8:	46cb      	mov	fp, r9
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1ca      	bne.n	8010754 <_strtod_l+0xa04>
 80107be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80107c2:	0d1b      	lsrs	r3, r3, #20
 80107c4:	051b      	lsls	r3, r3, #20
 80107c6:	4299      	cmp	r1, r3
 80107c8:	d1c4      	bne.n	8010754 <_strtod_l+0xa04>
 80107ca:	ec51 0b1d 	vmov	r0, r1, d13
 80107ce:	f7ef ffb3 	bl	8000738 <__aeabi_d2lz>
 80107d2:	f7ef ff6b 	bl	80006ac <__aeabi_l2d>
 80107d6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80107da:	ec41 0b17 	vmov	d7, r0, r1
 80107de:	ea4b 0b08 	orr.w	fp, fp, r8
 80107e2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80107e6:	ee3d db47 	vsub.f64	d13, d13, d7
 80107ea:	d03c      	beq.n	8010866 <_strtod_l+0xb16>
 80107ec:	eeb4 dbca 	vcmpe.f64	d13, d10
 80107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f4:	f53f acf4 	bmi.w	80101e0 <_strtod_l+0x490>
 80107f8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80107fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010800:	dda8      	ble.n	8010754 <_strtod_l+0xa04>
 8010802:	e4ed      	b.n	80101e0 <_strtod_l+0x490>
 8010804:	9805      	ldr	r0, [sp, #20]
 8010806:	b1f0      	cbz	r0, 8010846 <_strtod_l+0xaf6>
 8010808:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801080c:	d81b      	bhi.n	8010846 <_strtod_l+0xaf6>
 801080e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8010898 <_strtod_l+0xb48>
 8010812:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8010816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801081a:	d811      	bhi.n	8010840 <_strtod_l+0xaf0>
 801081c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8010820:	ee1d 3a10 	vmov	r3, s26
 8010824:	2b01      	cmp	r3, #1
 8010826:	bf38      	it	cc
 8010828:	2301      	movcc	r3, #1
 801082a:	ee0d 3a10 	vmov	s26, r3
 801082e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8010832:	f1ba 0f00 	cmp.w	sl, #0
 8010836:	d113      	bne.n	8010860 <_strtod_l+0xb10>
 8010838:	eeb1 7b4d 	vneg.f64	d7, d13
 801083c:	ec53 2b17 	vmov	r2, r3, d7
 8010840:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8010844:	1a43      	subs	r3, r0, r1
 8010846:	eeb0 0b48 	vmov.f64	d0, d8
 801084a:	ec43 2b1c 	vmov	d12, r2, r3
 801084e:	910a      	str	r1, [sp, #40]	; 0x28
 8010850:	f7ff f926 	bl	800faa0 <__ulp>
 8010854:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010856:	eeac 8b00 	vfma.f64	d8, d12, d0
 801085a:	ec59 8b18 	vmov	r8, r9, d8
 801085e:	e7aa      	b.n	80107b6 <_strtod_l+0xa66>
 8010860:	eeb0 7b4d 	vmov.f64	d7, d13
 8010864:	e7ea      	b.n	801083c <_strtod_l+0xaec>
 8010866:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086e:	f57f af71 	bpl.w	8010754 <_strtod_l+0xa04>
 8010872:	e4b5      	b.n	80101e0 <_strtod_l+0x490>
 8010874:	2300      	movs	r3, #0
 8010876:	9308      	str	r3, [sp, #32]
 8010878:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801087a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801087c:	6013      	str	r3, [r2, #0]
 801087e:	f7ff baa6 	b.w	800fdce <_strtod_l+0x7e>
 8010882:	2a65      	cmp	r2, #101	; 0x65
 8010884:	f43f aba2 	beq.w	800ffcc <_strtod_l+0x27c>
 8010888:	2a45      	cmp	r2, #69	; 0x45
 801088a:	f43f ab9f 	beq.w	800ffcc <_strtod_l+0x27c>
 801088e:	2101      	movs	r1, #1
 8010890:	f7ff bbd8 	b.w	8010044 <_strtod_l+0x2f4>
 8010894:	f3af 8000 	nop.w
 8010898:	ffc00000 	.word	0xffc00000
 801089c:	41dfffff 	.word	0x41dfffff
 80108a0:	000fffff 	.word	0x000fffff
 80108a4:	7ff00000 	.word	0x7ff00000
 80108a8:	7fefffff 	.word	0x7fefffff
 80108ac:	7c9fffff 	.word	0x7c9fffff
 80108b0:	7fe00000 	.word	0x7fe00000

080108b4 <_strtod_r>:
 80108b4:	4b01      	ldr	r3, [pc, #4]	; (80108bc <_strtod_r+0x8>)
 80108b6:	f7ff ba4b 	b.w	800fd50 <_strtod_l>
 80108ba:	bf00      	nop
 80108bc:	2400006c 	.word	0x2400006c

080108c0 <_strtol_l.constprop.0>:
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c6:	d001      	beq.n	80108cc <_strtol_l.constprop.0+0xc>
 80108c8:	2b24      	cmp	r3, #36	; 0x24
 80108ca:	d906      	bls.n	80108da <_strtol_l.constprop.0+0x1a>
 80108cc:	f7fd ff08 	bl	800e6e0 <__errno>
 80108d0:	2316      	movs	r3, #22
 80108d2:	6003      	str	r3, [r0, #0]
 80108d4:	2000      	movs	r0, #0
 80108d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80109c0 <_strtol_l.constprop.0+0x100>
 80108de:	460d      	mov	r5, r1
 80108e0:	462e      	mov	r6, r5
 80108e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80108ea:	f017 0708 	ands.w	r7, r7, #8
 80108ee:	d1f7      	bne.n	80108e0 <_strtol_l.constprop.0+0x20>
 80108f0:	2c2d      	cmp	r4, #45	; 0x2d
 80108f2:	d132      	bne.n	801095a <_strtol_l.constprop.0+0x9a>
 80108f4:	782c      	ldrb	r4, [r5, #0]
 80108f6:	2701      	movs	r7, #1
 80108f8:	1cb5      	adds	r5, r6, #2
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d05b      	beq.n	80109b6 <_strtol_l.constprop.0+0xf6>
 80108fe:	2b10      	cmp	r3, #16
 8010900:	d109      	bne.n	8010916 <_strtol_l.constprop.0+0x56>
 8010902:	2c30      	cmp	r4, #48	; 0x30
 8010904:	d107      	bne.n	8010916 <_strtol_l.constprop.0+0x56>
 8010906:	782c      	ldrb	r4, [r5, #0]
 8010908:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801090c:	2c58      	cmp	r4, #88	; 0x58
 801090e:	d14d      	bne.n	80109ac <_strtol_l.constprop.0+0xec>
 8010910:	786c      	ldrb	r4, [r5, #1]
 8010912:	2310      	movs	r3, #16
 8010914:	3502      	adds	r5, #2
 8010916:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801091a:	f108 38ff 	add.w	r8, r8, #4294967295
 801091e:	f04f 0e00 	mov.w	lr, #0
 8010922:	fbb8 f9f3 	udiv	r9, r8, r3
 8010926:	4676      	mov	r6, lr
 8010928:	fb03 8a19 	mls	sl, r3, r9, r8
 801092c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010930:	f1bc 0f09 	cmp.w	ip, #9
 8010934:	d816      	bhi.n	8010964 <_strtol_l.constprop.0+0xa4>
 8010936:	4664      	mov	r4, ip
 8010938:	42a3      	cmp	r3, r4
 801093a:	dd24      	ble.n	8010986 <_strtol_l.constprop.0+0xc6>
 801093c:	f1be 3fff 	cmp.w	lr, #4294967295
 8010940:	d008      	beq.n	8010954 <_strtol_l.constprop.0+0x94>
 8010942:	45b1      	cmp	r9, r6
 8010944:	d31c      	bcc.n	8010980 <_strtol_l.constprop.0+0xc0>
 8010946:	d101      	bne.n	801094c <_strtol_l.constprop.0+0x8c>
 8010948:	45a2      	cmp	sl, r4
 801094a:	db19      	blt.n	8010980 <_strtol_l.constprop.0+0xc0>
 801094c:	fb06 4603 	mla	r6, r6, r3, r4
 8010950:	f04f 0e01 	mov.w	lr, #1
 8010954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010958:	e7e8      	b.n	801092c <_strtol_l.constprop.0+0x6c>
 801095a:	2c2b      	cmp	r4, #43	; 0x2b
 801095c:	bf04      	itt	eq
 801095e:	782c      	ldrbeq	r4, [r5, #0]
 8010960:	1cb5      	addeq	r5, r6, #2
 8010962:	e7ca      	b.n	80108fa <_strtol_l.constprop.0+0x3a>
 8010964:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010968:	f1bc 0f19 	cmp.w	ip, #25
 801096c:	d801      	bhi.n	8010972 <_strtol_l.constprop.0+0xb2>
 801096e:	3c37      	subs	r4, #55	; 0x37
 8010970:	e7e2      	b.n	8010938 <_strtol_l.constprop.0+0x78>
 8010972:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010976:	f1bc 0f19 	cmp.w	ip, #25
 801097a:	d804      	bhi.n	8010986 <_strtol_l.constprop.0+0xc6>
 801097c:	3c57      	subs	r4, #87	; 0x57
 801097e:	e7db      	b.n	8010938 <_strtol_l.constprop.0+0x78>
 8010980:	f04f 3eff 	mov.w	lr, #4294967295
 8010984:	e7e6      	b.n	8010954 <_strtol_l.constprop.0+0x94>
 8010986:	f1be 3fff 	cmp.w	lr, #4294967295
 801098a:	d105      	bne.n	8010998 <_strtol_l.constprop.0+0xd8>
 801098c:	2322      	movs	r3, #34	; 0x22
 801098e:	6003      	str	r3, [r0, #0]
 8010990:	4646      	mov	r6, r8
 8010992:	b942      	cbnz	r2, 80109a6 <_strtol_l.constprop.0+0xe6>
 8010994:	4630      	mov	r0, r6
 8010996:	e79e      	b.n	80108d6 <_strtol_l.constprop.0+0x16>
 8010998:	b107      	cbz	r7, 801099c <_strtol_l.constprop.0+0xdc>
 801099a:	4276      	negs	r6, r6
 801099c:	2a00      	cmp	r2, #0
 801099e:	d0f9      	beq.n	8010994 <_strtol_l.constprop.0+0xd4>
 80109a0:	f1be 0f00 	cmp.w	lr, #0
 80109a4:	d000      	beq.n	80109a8 <_strtol_l.constprop.0+0xe8>
 80109a6:	1e69      	subs	r1, r5, #1
 80109a8:	6011      	str	r1, [r2, #0]
 80109aa:	e7f3      	b.n	8010994 <_strtol_l.constprop.0+0xd4>
 80109ac:	2430      	movs	r4, #48	; 0x30
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1b1      	bne.n	8010916 <_strtol_l.constprop.0+0x56>
 80109b2:	2308      	movs	r3, #8
 80109b4:	e7af      	b.n	8010916 <_strtol_l.constprop.0+0x56>
 80109b6:	2c30      	cmp	r4, #48	; 0x30
 80109b8:	d0a5      	beq.n	8010906 <_strtol_l.constprop.0+0x46>
 80109ba:	230a      	movs	r3, #10
 80109bc:	e7ab      	b.n	8010916 <_strtol_l.constprop.0+0x56>
 80109be:	bf00      	nop
 80109c0:	08011e79 	.word	0x08011e79

080109c4 <_strtol_r>:
 80109c4:	f7ff bf7c 	b.w	80108c0 <_strtol_l.constprop.0>

080109c8 <__ssputs_r>:
 80109c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109cc:	688e      	ldr	r6, [r1, #8]
 80109ce:	461f      	mov	r7, r3
 80109d0:	42be      	cmp	r6, r7
 80109d2:	680b      	ldr	r3, [r1, #0]
 80109d4:	4682      	mov	sl, r0
 80109d6:	460c      	mov	r4, r1
 80109d8:	4690      	mov	r8, r2
 80109da:	d82c      	bhi.n	8010a36 <__ssputs_r+0x6e>
 80109dc:	898a      	ldrh	r2, [r1, #12]
 80109de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109e2:	d026      	beq.n	8010a32 <__ssputs_r+0x6a>
 80109e4:	6965      	ldr	r5, [r4, #20]
 80109e6:	6909      	ldr	r1, [r1, #16]
 80109e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109ec:	eba3 0901 	sub.w	r9, r3, r1
 80109f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109f4:	1c7b      	adds	r3, r7, #1
 80109f6:	444b      	add	r3, r9
 80109f8:	106d      	asrs	r5, r5, #1
 80109fa:	429d      	cmp	r5, r3
 80109fc:	bf38      	it	cc
 80109fe:	461d      	movcc	r5, r3
 8010a00:	0553      	lsls	r3, r2, #21
 8010a02:	d527      	bpl.n	8010a54 <__ssputs_r+0x8c>
 8010a04:	4629      	mov	r1, r5
 8010a06:	f7fc fdf7 	bl	800d5f8 <_malloc_r>
 8010a0a:	4606      	mov	r6, r0
 8010a0c:	b360      	cbz	r0, 8010a68 <__ssputs_r+0xa0>
 8010a0e:	6921      	ldr	r1, [r4, #16]
 8010a10:	464a      	mov	r2, r9
 8010a12:	f000 fa0b 	bl	8010e2c <memcpy>
 8010a16:	89a3      	ldrh	r3, [r4, #12]
 8010a18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a20:	81a3      	strh	r3, [r4, #12]
 8010a22:	6126      	str	r6, [r4, #16]
 8010a24:	6165      	str	r5, [r4, #20]
 8010a26:	444e      	add	r6, r9
 8010a28:	eba5 0509 	sub.w	r5, r5, r9
 8010a2c:	6026      	str	r6, [r4, #0]
 8010a2e:	60a5      	str	r5, [r4, #8]
 8010a30:	463e      	mov	r6, r7
 8010a32:	42be      	cmp	r6, r7
 8010a34:	d900      	bls.n	8010a38 <__ssputs_r+0x70>
 8010a36:	463e      	mov	r6, r7
 8010a38:	6820      	ldr	r0, [r4, #0]
 8010a3a:	4632      	mov	r2, r6
 8010a3c:	4641      	mov	r1, r8
 8010a3e:	f000 f9c9 	bl	8010dd4 <memmove>
 8010a42:	68a3      	ldr	r3, [r4, #8]
 8010a44:	1b9b      	subs	r3, r3, r6
 8010a46:	60a3      	str	r3, [r4, #8]
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	4433      	add	r3, r6
 8010a4c:	6023      	str	r3, [r4, #0]
 8010a4e:	2000      	movs	r0, #0
 8010a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a54:	462a      	mov	r2, r5
 8010a56:	f000 fd9c 	bl	8011592 <_realloc_r>
 8010a5a:	4606      	mov	r6, r0
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d1e0      	bne.n	8010a22 <__ssputs_r+0x5a>
 8010a60:	6921      	ldr	r1, [r4, #16]
 8010a62:	4650      	mov	r0, sl
 8010a64:	f7fe fc64 	bl	800f330 <_free_r>
 8010a68:	230c      	movs	r3, #12
 8010a6a:	f8ca 3000 	str.w	r3, [sl]
 8010a6e:	89a3      	ldrh	r3, [r4, #12]
 8010a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a74:	81a3      	strh	r3, [r4, #12]
 8010a76:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7a:	e7e9      	b.n	8010a50 <__ssputs_r+0x88>

08010a7c <_svfiprintf_r>:
 8010a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	4698      	mov	r8, r3
 8010a82:	898b      	ldrh	r3, [r1, #12]
 8010a84:	061b      	lsls	r3, r3, #24
 8010a86:	b09d      	sub	sp, #116	; 0x74
 8010a88:	4607      	mov	r7, r0
 8010a8a:	460d      	mov	r5, r1
 8010a8c:	4614      	mov	r4, r2
 8010a8e:	d50e      	bpl.n	8010aae <_svfiprintf_r+0x32>
 8010a90:	690b      	ldr	r3, [r1, #16]
 8010a92:	b963      	cbnz	r3, 8010aae <_svfiprintf_r+0x32>
 8010a94:	2140      	movs	r1, #64	; 0x40
 8010a96:	f7fc fdaf 	bl	800d5f8 <_malloc_r>
 8010a9a:	6028      	str	r0, [r5, #0]
 8010a9c:	6128      	str	r0, [r5, #16]
 8010a9e:	b920      	cbnz	r0, 8010aaa <_svfiprintf_r+0x2e>
 8010aa0:	230c      	movs	r3, #12
 8010aa2:	603b      	str	r3, [r7, #0]
 8010aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa8:	e0d0      	b.n	8010c4c <_svfiprintf_r+0x1d0>
 8010aaa:	2340      	movs	r3, #64	; 0x40
 8010aac:	616b      	str	r3, [r5, #20]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab2:	2320      	movs	r3, #32
 8010ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010abc:	2330      	movs	r3, #48	; 0x30
 8010abe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010c64 <_svfiprintf_r+0x1e8>
 8010ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ac6:	f04f 0901 	mov.w	r9, #1
 8010aca:	4623      	mov	r3, r4
 8010acc:	469a      	mov	sl, r3
 8010ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ad2:	b10a      	cbz	r2, 8010ad8 <_svfiprintf_r+0x5c>
 8010ad4:	2a25      	cmp	r2, #37	; 0x25
 8010ad6:	d1f9      	bne.n	8010acc <_svfiprintf_r+0x50>
 8010ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8010adc:	d00b      	beq.n	8010af6 <_svfiprintf_r+0x7a>
 8010ade:	465b      	mov	r3, fp
 8010ae0:	4622      	mov	r2, r4
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	4638      	mov	r0, r7
 8010ae6:	f7ff ff6f 	bl	80109c8 <__ssputs_r>
 8010aea:	3001      	adds	r0, #1
 8010aec:	f000 80a9 	beq.w	8010c42 <_svfiprintf_r+0x1c6>
 8010af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010af2:	445a      	add	r2, fp
 8010af4:	9209      	str	r2, [sp, #36]	; 0x24
 8010af6:	f89a 3000 	ldrb.w	r3, [sl]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f000 80a1 	beq.w	8010c42 <_svfiprintf_r+0x1c6>
 8010b00:	2300      	movs	r3, #0
 8010b02:	f04f 32ff 	mov.w	r2, #4294967295
 8010b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b0a:	f10a 0a01 	add.w	sl, sl, #1
 8010b0e:	9304      	str	r3, [sp, #16]
 8010b10:	9307      	str	r3, [sp, #28]
 8010b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b16:	931a      	str	r3, [sp, #104]	; 0x68
 8010b18:	4654      	mov	r4, sl
 8010b1a:	2205      	movs	r2, #5
 8010b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b20:	4850      	ldr	r0, [pc, #320]	; (8010c64 <_svfiprintf_r+0x1e8>)
 8010b22:	f7ef fbdd 	bl	80002e0 <memchr>
 8010b26:	9a04      	ldr	r2, [sp, #16]
 8010b28:	b9d8      	cbnz	r0, 8010b62 <_svfiprintf_r+0xe6>
 8010b2a:	06d0      	lsls	r0, r2, #27
 8010b2c:	bf44      	itt	mi
 8010b2e:	2320      	movmi	r3, #32
 8010b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b34:	0711      	lsls	r1, r2, #28
 8010b36:	bf44      	itt	mi
 8010b38:	232b      	movmi	r3, #43	; 0x2b
 8010b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b42:	2b2a      	cmp	r3, #42	; 0x2a
 8010b44:	d015      	beq.n	8010b72 <_svfiprintf_r+0xf6>
 8010b46:	9a07      	ldr	r2, [sp, #28]
 8010b48:	4654      	mov	r4, sl
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	f04f 0c0a 	mov.w	ip, #10
 8010b50:	4621      	mov	r1, r4
 8010b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b56:	3b30      	subs	r3, #48	; 0x30
 8010b58:	2b09      	cmp	r3, #9
 8010b5a:	d94d      	bls.n	8010bf8 <_svfiprintf_r+0x17c>
 8010b5c:	b1b0      	cbz	r0, 8010b8c <_svfiprintf_r+0x110>
 8010b5e:	9207      	str	r2, [sp, #28]
 8010b60:	e014      	b.n	8010b8c <_svfiprintf_r+0x110>
 8010b62:	eba0 0308 	sub.w	r3, r0, r8
 8010b66:	fa09 f303 	lsl.w	r3, r9, r3
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	9304      	str	r3, [sp, #16]
 8010b6e:	46a2      	mov	sl, r4
 8010b70:	e7d2      	b.n	8010b18 <_svfiprintf_r+0x9c>
 8010b72:	9b03      	ldr	r3, [sp, #12]
 8010b74:	1d19      	adds	r1, r3, #4
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	9103      	str	r1, [sp, #12]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	bfbb      	ittet	lt
 8010b7e:	425b      	neglt	r3, r3
 8010b80:	f042 0202 	orrlt.w	r2, r2, #2
 8010b84:	9307      	strge	r3, [sp, #28]
 8010b86:	9307      	strlt	r3, [sp, #28]
 8010b88:	bfb8      	it	lt
 8010b8a:	9204      	strlt	r2, [sp, #16]
 8010b8c:	7823      	ldrb	r3, [r4, #0]
 8010b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8010b90:	d10c      	bne.n	8010bac <_svfiprintf_r+0x130>
 8010b92:	7863      	ldrb	r3, [r4, #1]
 8010b94:	2b2a      	cmp	r3, #42	; 0x2a
 8010b96:	d134      	bne.n	8010c02 <_svfiprintf_r+0x186>
 8010b98:	9b03      	ldr	r3, [sp, #12]
 8010b9a:	1d1a      	adds	r2, r3, #4
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	9203      	str	r2, [sp, #12]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	bfb8      	it	lt
 8010ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ba8:	3402      	adds	r4, #2
 8010baa:	9305      	str	r3, [sp, #20]
 8010bac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010c74 <_svfiprintf_r+0x1f8>
 8010bb0:	7821      	ldrb	r1, [r4, #0]
 8010bb2:	2203      	movs	r2, #3
 8010bb4:	4650      	mov	r0, sl
 8010bb6:	f7ef fb93 	bl	80002e0 <memchr>
 8010bba:	b138      	cbz	r0, 8010bcc <_svfiprintf_r+0x150>
 8010bbc:	9b04      	ldr	r3, [sp, #16]
 8010bbe:	eba0 000a 	sub.w	r0, r0, sl
 8010bc2:	2240      	movs	r2, #64	; 0x40
 8010bc4:	4082      	lsls	r2, r0
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	3401      	adds	r4, #1
 8010bca:	9304      	str	r3, [sp, #16]
 8010bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bd0:	4825      	ldr	r0, [pc, #148]	; (8010c68 <_svfiprintf_r+0x1ec>)
 8010bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bd6:	2206      	movs	r2, #6
 8010bd8:	f7ef fb82 	bl	80002e0 <memchr>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d038      	beq.n	8010c52 <_svfiprintf_r+0x1d6>
 8010be0:	4b22      	ldr	r3, [pc, #136]	; (8010c6c <_svfiprintf_r+0x1f0>)
 8010be2:	bb1b      	cbnz	r3, 8010c2c <_svfiprintf_r+0x1b0>
 8010be4:	9b03      	ldr	r3, [sp, #12]
 8010be6:	3307      	adds	r3, #7
 8010be8:	f023 0307 	bic.w	r3, r3, #7
 8010bec:	3308      	adds	r3, #8
 8010bee:	9303      	str	r3, [sp, #12]
 8010bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf2:	4433      	add	r3, r6
 8010bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8010bf6:	e768      	b.n	8010aca <_svfiprintf_r+0x4e>
 8010bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	2001      	movs	r0, #1
 8010c00:	e7a6      	b.n	8010b50 <_svfiprintf_r+0xd4>
 8010c02:	2300      	movs	r3, #0
 8010c04:	3401      	adds	r4, #1
 8010c06:	9305      	str	r3, [sp, #20]
 8010c08:	4619      	mov	r1, r3
 8010c0a:	f04f 0c0a 	mov.w	ip, #10
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c14:	3a30      	subs	r2, #48	; 0x30
 8010c16:	2a09      	cmp	r2, #9
 8010c18:	d903      	bls.n	8010c22 <_svfiprintf_r+0x1a6>
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d0c6      	beq.n	8010bac <_svfiprintf_r+0x130>
 8010c1e:	9105      	str	r1, [sp, #20]
 8010c20:	e7c4      	b.n	8010bac <_svfiprintf_r+0x130>
 8010c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c26:	4604      	mov	r4, r0
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e7f0      	b.n	8010c0e <_svfiprintf_r+0x192>
 8010c2c:	ab03      	add	r3, sp, #12
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	462a      	mov	r2, r5
 8010c32:	4b0f      	ldr	r3, [pc, #60]	; (8010c70 <_svfiprintf_r+0x1f4>)
 8010c34:	a904      	add	r1, sp, #16
 8010c36:	4638      	mov	r0, r7
 8010c38:	f7fc fdfa 	bl	800d830 <_printf_float>
 8010c3c:	1c42      	adds	r2, r0, #1
 8010c3e:	4606      	mov	r6, r0
 8010c40:	d1d6      	bne.n	8010bf0 <_svfiprintf_r+0x174>
 8010c42:	89ab      	ldrh	r3, [r5, #12]
 8010c44:	065b      	lsls	r3, r3, #25
 8010c46:	f53f af2d 	bmi.w	8010aa4 <_svfiprintf_r+0x28>
 8010c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c4c:	b01d      	add	sp, #116	; 0x74
 8010c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c52:	ab03      	add	r3, sp, #12
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	462a      	mov	r2, r5
 8010c58:	4b05      	ldr	r3, [pc, #20]	; (8010c70 <_svfiprintf_r+0x1f4>)
 8010c5a:	a904      	add	r1, sp, #16
 8010c5c:	4638      	mov	r0, r7
 8010c5e:	f7fd f86f 	bl	800dd40 <_printf_i>
 8010c62:	e7eb      	b.n	8010c3c <_svfiprintf_r+0x1c0>
 8010c64:	08011f79 	.word	0x08011f79
 8010c68:	08011f83 	.word	0x08011f83
 8010c6c:	0800d831 	.word	0x0800d831
 8010c70:	080109c9 	.word	0x080109c9
 8010c74:	08011f7f 	.word	0x08011f7f

08010c78 <__sflush_r>:
 8010c78:	898a      	ldrh	r2, [r1, #12]
 8010c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7e:	4605      	mov	r5, r0
 8010c80:	0710      	lsls	r0, r2, #28
 8010c82:	460c      	mov	r4, r1
 8010c84:	d458      	bmi.n	8010d38 <__sflush_r+0xc0>
 8010c86:	684b      	ldr	r3, [r1, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	dc05      	bgt.n	8010c98 <__sflush_r+0x20>
 8010c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	dc02      	bgt.n	8010c98 <__sflush_r+0x20>
 8010c92:	2000      	movs	r0, #0
 8010c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c9a:	2e00      	cmp	r6, #0
 8010c9c:	d0f9      	beq.n	8010c92 <__sflush_r+0x1a>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ca4:	682f      	ldr	r7, [r5, #0]
 8010ca6:	6a21      	ldr	r1, [r4, #32]
 8010ca8:	602b      	str	r3, [r5, #0]
 8010caa:	d032      	beq.n	8010d12 <__sflush_r+0x9a>
 8010cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010cae:	89a3      	ldrh	r3, [r4, #12]
 8010cb0:	075a      	lsls	r2, r3, #29
 8010cb2:	d505      	bpl.n	8010cc0 <__sflush_r+0x48>
 8010cb4:	6863      	ldr	r3, [r4, #4]
 8010cb6:	1ac0      	subs	r0, r0, r3
 8010cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cba:	b10b      	cbz	r3, 8010cc0 <__sflush_r+0x48>
 8010cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cbe:	1ac0      	subs	r0, r0, r3
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cc6:	6a21      	ldr	r1, [r4, #32]
 8010cc8:	4628      	mov	r0, r5
 8010cca:	47b0      	blx	r6
 8010ccc:	1c43      	adds	r3, r0, #1
 8010cce:	89a3      	ldrh	r3, [r4, #12]
 8010cd0:	d106      	bne.n	8010ce0 <__sflush_r+0x68>
 8010cd2:	6829      	ldr	r1, [r5, #0]
 8010cd4:	291d      	cmp	r1, #29
 8010cd6:	d82b      	bhi.n	8010d30 <__sflush_r+0xb8>
 8010cd8:	4a29      	ldr	r2, [pc, #164]	; (8010d80 <__sflush_r+0x108>)
 8010cda:	410a      	asrs	r2, r1
 8010cdc:	07d6      	lsls	r6, r2, #31
 8010cde:	d427      	bmi.n	8010d30 <__sflush_r+0xb8>
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	6062      	str	r2, [r4, #4]
 8010ce4:	04d9      	lsls	r1, r3, #19
 8010ce6:	6922      	ldr	r2, [r4, #16]
 8010ce8:	6022      	str	r2, [r4, #0]
 8010cea:	d504      	bpl.n	8010cf6 <__sflush_r+0x7e>
 8010cec:	1c42      	adds	r2, r0, #1
 8010cee:	d101      	bne.n	8010cf4 <__sflush_r+0x7c>
 8010cf0:	682b      	ldr	r3, [r5, #0]
 8010cf2:	b903      	cbnz	r3, 8010cf6 <__sflush_r+0x7e>
 8010cf4:	6560      	str	r0, [r4, #84]	; 0x54
 8010cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cf8:	602f      	str	r7, [r5, #0]
 8010cfa:	2900      	cmp	r1, #0
 8010cfc:	d0c9      	beq.n	8010c92 <__sflush_r+0x1a>
 8010cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d02:	4299      	cmp	r1, r3
 8010d04:	d002      	beq.n	8010d0c <__sflush_r+0x94>
 8010d06:	4628      	mov	r0, r5
 8010d08:	f7fe fb12 	bl	800f330 <_free_r>
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8010d10:	e7c0      	b.n	8010c94 <__sflush_r+0x1c>
 8010d12:	2301      	movs	r3, #1
 8010d14:	4628      	mov	r0, r5
 8010d16:	47b0      	blx	r6
 8010d18:	1c41      	adds	r1, r0, #1
 8010d1a:	d1c8      	bne.n	8010cae <__sflush_r+0x36>
 8010d1c:	682b      	ldr	r3, [r5, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d0c5      	beq.n	8010cae <__sflush_r+0x36>
 8010d22:	2b1d      	cmp	r3, #29
 8010d24:	d001      	beq.n	8010d2a <__sflush_r+0xb2>
 8010d26:	2b16      	cmp	r3, #22
 8010d28:	d101      	bne.n	8010d2e <__sflush_r+0xb6>
 8010d2a:	602f      	str	r7, [r5, #0]
 8010d2c:	e7b1      	b.n	8010c92 <__sflush_r+0x1a>
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d34:	81a3      	strh	r3, [r4, #12]
 8010d36:	e7ad      	b.n	8010c94 <__sflush_r+0x1c>
 8010d38:	690f      	ldr	r7, [r1, #16]
 8010d3a:	2f00      	cmp	r7, #0
 8010d3c:	d0a9      	beq.n	8010c92 <__sflush_r+0x1a>
 8010d3e:	0793      	lsls	r3, r2, #30
 8010d40:	680e      	ldr	r6, [r1, #0]
 8010d42:	bf08      	it	eq
 8010d44:	694b      	ldreq	r3, [r1, #20]
 8010d46:	600f      	str	r7, [r1, #0]
 8010d48:	bf18      	it	ne
 8010d4a:	2300      	movne	r3, #0
 8010d4c:	eba6 0807 	sub.w	r8, r6, r7
 8010d50:	608b      	str	r3, [r1, #8]
 8010d52:	f1b8 0f00 	cmp.w	r8, #0
 8010d56:	dd9c      	ble.n	8010c92 <__sflush_r+0x1a>
 8010d58:	6a21      	ldr	r1, [r4, #32]
 8010d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d5c:	4643      	mov	r3, r8
 8010d5e:	463a      	mov	r2, r7
 8010d60:	4628      	mov	r0, r5
 8010d62:	47b0      	blx	r6
 8010d64:	2800      	cmp	r0, #0
 8010d66:	dc06      	bgt.n	8010d76 <__sflush_r+0xfe>
 8010d68:	89a3      	ldrh	r3, [r4, #12]
 8010d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d6e:	81a3      	strh	r3, [r4, #12]
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	e78e      	b.n	8010c94 <__sflush_r+0x1c>
 8010d76:	4407      	add	r7, r0
 8010d78:	eba8 0800 	sub.w	r8, r8, r0
 8010d7c:	e7e9      	b.n	8010d52 <__sflush_r+0xda>
 8010d7e:	bf00      	nop
 8010d80:	dfbffffe 	.word	0xdfbffffe

08010d84 <_fflush_r>:
 8010d84:	b538      	push	{r3, r4, r5, lr}
 8010d86:	690b      	ldr	r3, [r1, #16]
 8010d88:	4605      	mov	r5, r0
 8010d8a:	460c      	mov	r4, r1
 8010d8c:	b913      	cbnz	r3, 8010d94 <_fflush_r+0x10>
 8010d8e:	2500      	movs	r5, #0
 8010d90:	4628      	mov	r0, r5
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	b118      	cbz	r0, 8010d9e <_fflush_r+0x1a>
 8010d96:	6a03      	ldr	r3, [r0, #32]
 8010d98:	b90b      	cbnz	r3, 8010d9e <_fflush_r+0x1a>
 8010d9a:	f7fd fb71 	bl	800e480 <__sinit>
 8010d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d0f3      	beq.n	8010d8e <_fflush_r+0xa>
 8010da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010da8:	07d0      	lsls	r0, r2, #31
 8010daa:	d404      	bmi.n	8010db6 <_fflush_r+0x32>
 8010dac:	0599      	lsls	r1, r3, #22
 8010dae:	d402      	bmi.n	8010db6 <_fflush_r+0x32>
 8010db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010db2:	f7fd fcbf 	bl	800e734 <__retarget_lock_acquire_recursive>
 8010db6:	4628      	mov	r0, r5
 8010db8:	4621      	mov	r1, r4
 8010dba:	f7ff ff5d 	bl	8010c78 <__sflush_r>
 8010dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dc0:	07da      	lsls	r2, r3, #31
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	d4e4      	bmi.n	8010d90 <_fflush_r+0xc>
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	059b      	lsls	r3, r3, #22
 8010dca:	d4e1      	bmi.n	8010d90 <_fflush_r+0xc>
 8010dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dce:	f7fd fcb2 	bl	800e736 <__retarget_lock_release_recursive>
 8010dd2:	e7dd      	b.n	8010d90 <_fflush_r+0xc>

08010dd4 <memmove>:
 8010dd4:	4288      	cmp	r0, r1
 8010dd6:	b510      	push	{r4, lr}
 8010dd8:	eb01 0402 	add.w	r4, r1, r2
 8010ddc:	d902      	bls.n	8010de4 <memmove+0x10>
 8010dde:	4284      	cmp	r4, r0
 8010de0:	4623      	mov	r3, r4
 8010de2:	d807      	bhi.n	8010df4 <memmove+0x20>
 8010de4:	1e43      	subs	r3, r0, #1
 8010de6:	42a1      	cmp	r1, r4
 8010de8:	d008      	beq.n	8010dfc <memmove+0x28>
 8010dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010df2:	e7f8      	b.n	8010de6 <memmove+0x12>
 8010df4:	4402      	add	r2, r0
 8010df6:	4601      	mov	r1, r0
 8010df8:	428a      	cmp	r2, r1
 8010dfa:	d100      	bne.n	8010dfe <memmove+0x2a>
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e06:	e7f7      	b.n	8010df8 <memmove+0x24>

08010e08 <strncmp>:
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	b16a      	cbz	r2, 8010e28 <strncmp+0x20>
 8010e0c:	3901      	subs	r1, #1
 8010e0e:	1884      	adds	r4, r0, r2
 8010e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d103      	bne.n	8010e24 <strncmp+0x1c>
 8010e1c:	42a0      	cmp	r0, r4
 8010e1e:	d001      	beq.n	8010e24 <strncmp+0x1c>
 8010e20:	2a00      	cmp	r2, #0
 8010e22:	d1f5      	bne.n	8010e10 <strncmp+0x8>
 8010e24:	1ad0      	subs	r0, r2, r3
 8010e26:	bd10      	pop	{r4, pc}
 8010e28:	4610      	mov	r0, r2
 8010e2a:	e7fc      	b.n	8010e26 <strncmp+0x1e>

08010e2c <memcpy>:
 8010e2c:	440a      	add	r2, r1
 8010e2e:	4291      	cmp	r1, r2
 8010e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e34:	d100      	bne.n	8010e38 <memcpy+0xc>
 8010e36:	4770      	bx	lr
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e42:	4291      	cmp	r1, r2
 8010e44:	d1f9      	bne.n	8010e3a <memcpy+0xe>
 8010e46:	bd10      	pop	{r4, pc}

08010e48 <nan>:
 8010e48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010e50 <nan+0x8>
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	00000000 	.word	0x00000000
 8010e54:	7ff80000 	.word	0x7ff80000

08010e58 <__assert_func>:
 8010e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e5a:	4614      	mov	r4, r2
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <__assert_func+0x2c>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4605      	mov	r5, r0
 8010e64:	68d8      	ldr	r0, [r3, #12]
 8010e66:	b14c      	cbz	r4, 8010e7c <__assert_func+0x24>
 8010e68:	4b07      	ldr	r3, [pc, #28]	; (8010e88 <__assert_func+0x30>)
 8010e6a:	9100      	str	r1, [sp, #0]
 8010e6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e70:	4906      	ldr	r1, [pc, #24]	; (8010e8c <__assert_func+0x34>)
 8010e72:	462b      	mov	r3, r5
 8010e74:	f000 fbca 	bl	801160c <fiprintf>
 8010e78:	f000 fbda 	bl	8011630 <abort>
 8010e7c:	4b04      	ldr	r3, [pc, #16]	; (8010e90 <__assert_func+0x38>)
 8010e7e:	461c      	mov	r4, r3
 8010e80:	e7f3      	b.n	8010e6a <__assert_func+0x12>
 8010e82:	bf00      	nop
 8010e84:	24000068 	.word	0x24000068
 8010e88:	08011f92 	.word	0x08011f92
 8010e8c:	08011f9f 	.word	0x08011f9f
 8010e90:	08011fcd 	.word	0x08011fcd

08010e94 <_calloc_r>:
 8010e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e96:	fba1 2402 	umull	r2, r4, r1, r2
 8010e9a:	b94c      	cbnz	r4, 8010eb0 <_calloc_r+0x1c>
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	9201      	str	r2, [sp, #4]
 8010ea0:	f7fc fbaa 	bl	800d5f8 <_malloc_r>
 8010ea4:	9a01      	ldr	r2, [sp, #4]
 8010ea6:	4605      	mov	r5, r0
 8010ea8:	b930      	cbnz	r0, 8010eb8 <_calloc_r+0x24>
 8010eaa:	4628      	mov	r0, r5
 8010eac:	b003      	add	sp, #12
 8010eae:	bd30      	pop	{r4, r5, pc}
 8010eb0:	220c      	movs	r2, #12
 8010eb2:	6002      	str	r2, [r0, #0]
 8010eb4:	2500      	movs	r5, #0
 8010eb6:	e7f8      	b.n	8010eaa <_calloc_r+0x16>
 8010eb8:	4621      	mov	r1, r4
 8010eba:	f7fd fbae 	bl	800e61a <memset>
 8010ebe:	e7f4      	b.n	8010eaa <_calloc_r+0x16>

08010ec0 <rshift>:
 8010ec0:	6903      	ldr	r3, [r0, #16]
 8010ec2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010ec6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010eca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ece:	f100 0414 	add.w	r4, r0, #20
 8010ed2:	dd45      	ble.n	8010f60 <rshift+0xa0>
 8010ed4:	f011 011f 	ands.w	r1, r1, #31
 8010ed8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010edc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ee0:	d10c      	bne.n	8010efc <rshift+0x3c>
 8010ee2:	f100 0710 	add.w	r7, r0, #16
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	42b1      	cmp	r1, r6
 8010eea:	d334      	bcc.n	8010f56 <rshift+0x96>
 8010eec:	1a9b      	subs	r3, r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	1eea      	subs	r2, r5, #3
 8010ef2:	4296      	cmp	r6, r2
 8010ef4:	bf38      	it	cc
 8010ef6:	2300      	movcc	r3, #0
 8010ef8:	4423      	add	r3, r4
 8010efa:	e015      	b.n	8010f28 <rshift+0x68>
 8010efc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f00:	f1c1 0820 	rsb	r8, r1, #32
 8010f04:	40cf      	lsrs	r7, r1
 8010f06:	f105 0e04 	add.w	lr, r5, #4
 8010f0a:	46a1      	mov	r9, r4
 8010f0c:	4576      	cmp	r6, lr
 8010f0e:	46f4      	mov	ip, lr
 8010f10:	d815      	bhi.n	8010f3e <rshift+0x7e>
 8010f12:	1a9a      	subs	r2, r3, r2
 8010f14:	0092      	lsls	r2, r2, #2
 8010f16:	3a04      	subs	r2, #4
 8010f18:	3501      	adds	r5, #1
 8010f1a:	42ae      	cmp	r6, r5
 8010f1c:	bf38      	it	cc
 8010f1e:	2200      	movcc	r2, #0
 8010f20:	18a3      	adds	r3, r4, r2
 8010f22:	50a7      	str	r7, [r4, r2]
 8010f24:	b107      	cbz	r7, 8010f28 <rshift+0x68>
 8010f26:	3304      	adds	r3, #4
 8010f28:	1b1a      	subs	r2, r3, r4
 8010f2a:	42a3      	cmp	r3, r4
 8010f2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f30:	bf08      	it	eq
 8010f32:	2300      	moveq	r3, #0
 8010f34:	6102      	str	r2, [r0, #16]
 8010f36:	bf08      	it	eq
 8010f38:	6143      	streq	r3, [r0, #20]
 8010f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f3e:	f8dc c000 	ldr.w	ip, [ip]
 8010f42:	fa0c fc08 	lsl.w	ip, ip, r8
 8010f46:	ea4c 0707 	orr.w	r7, ip, r7
 8010f4a:	f849 7b04 	str.w	r7, [r9], #4
 8010f4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f52:	40cf      	lsrs	r7, r1
 8010f54:	e7da      	b.n	8010f0c <rshift+0x4c>
 8010f56:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f5e:	e7c3      	b.n	8010ee8 <rshift+0x28>
 8010f60:	4623      	mov	r3, r4
 8010f62:	e7e1      	b.n	8010f28 <rshift+0x68>

08010f64 <__hexdig_fun>:
 8010f64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010f68:	2b09      	cmp	r3, #9
 8010f6a:	d802      	bhi.n	8010f72 <__hexdig_fun+0xe>
 8010f6c:	3820      	subs	r0, #32
 8010f6e:	b2c0      	uxtb	r0, r0
 8010f70:	4770      	bx	lr
 8010f72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010f76:	2b05      	cmp	r3, #5
 8010f78:	d801      	bhi.n	8010f7e <__hexdig_fun+0x1a>
 8010f7a:	3847      	subs	r0, #71	; 0x47
 8010f7c:	e7f7      	b.n	8010f6e <__hexdig_fun+0xa>
 8010f7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010f82:	2b05      	cmp	r3, #5
 8010f84:	d801      	bhi.n	8010f8a <__hexdig_fun+0x26>
 8010f86:	3827      	subs	r0, #39	; 0x27
 8010f88:	e7f1      	b.n	8010f6e <__hexdig_fun+0xa>
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	4770      	bx	lr
	...

08010f90 <__gethex>:
 8010f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	4617      	mov	r7, r2
 8010f96:	680a      	ldr	r2, [r1, #0]
 8010f98:	b085      	sub	sp, #20
 8010f9a:	f102 0b02 	add.w	fp, r2, #2
 8010f9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010fa2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010fa6:	4681      	mov	r9, r0
 8010fa8:	468a      	mov	sl, r1
 8010faa:	9302      	str	r3, [sp, #8]
 8010fac:	32fe      	adds	r2, #254	; 0xfe
 8010fae:	eb02 030b 	add.w	r3, r2, fp
 8010fb2:	46d8      	mov	r8, fp
 8010fb4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010fb8:	9301      	str	r3, [sp, #4]
 8010fba:	2830      	cmp	r0, #48	; 0x30
 8010fbc:	d0f7      	beq.n	8010fae <__gethex+0x1e>
 8010fbe:	f7ff ffd1 	bl	8010f64 <__hexdig_fun>
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d138      	bne.n	801103a <__gethex+0xaa>
 8010fc8:	49a7      	ldr	r1, [pc, #668]	; (8011268 <__gethex+0x2d8>)
 8010fca:	2201      	movs	r2, #1
 8010fcc:	4640      	mov	r0, r8
 8010fce:	f7ff ff1b 	bl	8010e08 <strncmp>
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d169      	bne.n	80110ac <__gethex+0x11c>
 8010fd8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010fdc:	465d      	mov	r5, fp
 8010fde:	f7ff ffc1 	bl	8010f64 <__hexdig_fun>
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d064      	beq.n	80110b0 <__gethex+0x120>
 8010fe6:	465a      	mov	r2, fp
 8010fe8:	7810      	ldrb	r0, [r2, #0]
 8010fea:	2830      	cmp	r0, #48	; 0x30
 8010fec:	4690      	mov	r8, r2
 8010fee:	f102 0201 	add.w	r2, r2, #1
 8010ff2:	d0f9      	beq.n	8010fe8 <__gethex+0x58>
 8010ff4:	f7ff ffb6 	bl	8010f64 <__hexdig_fun>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	fab0 f480 	clz	r4, r0
 8010ffe:	0964      	lsrs	r4, r4, #5
 8011000:	465e      	mov	r6, fp
 8011002:	9301      	str	r3, [sp, #4]
 8011004:	4642      	mov	r2, r8
 8011006:	4615      	mov	r5, r2
 8011008:	3201      	adds	r2, #1
 801100a:	7828      	ldrb	r0, [r5, #0]
 801100c:	f7ff ffaa 	bl	8010f64 <__hexdig_fun>
 8011010:	2800      	cmp	r0, #0
 8011012:	d1f8      	bne.n	8011006 <__gethex+0x76>
 8011014:	4994      	ldr	r1, [pc, #592]	; (8011268 <__gethex+0x2d8>)
 8011016:	2201      	movs	r2, #1
 8011018:	4628      	mov	r0, r5
 801101a:	f7ff fef5 	bl	8010e08 <strncmp>
 801101e:	b978      	cbnz	r0, 8011040 <__gethex+0xb0>
 8011020:	b946      	cbnz	r6, 8011034 <__gethex+0xa4>
 8011022:	1c6e      	adds	r6, r5, #1
 8011024:	4632      	mov	r2, r6
 8011026:	4615      	mov	r5, r2
 8011028:	3201      	adds	r2, #1
 801102a:	7828      	ldrb	r0, [r5, #0]
 801102c:	f7ff ff9a 	bl	8010f64 <__hexdig_fun>
 8011030:	2800      	cmp	r0, #0
 8011032:	d1f8      	bne.n	8011026 <__gethex+0x96>
 8011034:	1b73      	subs	r3, r6, r5
 8011036:	009e      	lsls	r6, r3, #2
 8011038:	e004      	b.n	8011044 <__gethex+0xb4>
 801103a:	2400      	movs	r4, #0
 801103c:	4626      	mov	r6, r4
 801103e:	e7e1      	b.n	8011004 <__gethex+0x74>
 8011040:	2e00      	cmp	r6, #0
 8011042:	d1f7      	bne.n	8011034 <__gethex+0xa4>
 8011044:	782b      	ldrb	r3, [r5, #0]
 8011046:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801104a:	2b50      	cmp	r3, #80	; 0x50
 801104c:	d13d      	bne.n	80110ca <__gethex+0x13a>
 801104e:	786b      	ldrb	r3, [r5, #1]
 8011050:	2b2b      	cmp	r3, #43	; 0x2b
 8011052:	d02f      	beq.n	80110b4 <__gethex+0x124>
 8011054:	2b2d      	cmp	r3, #45	; 0x2d
 8011056:	d031      	beq.n	80110bc <__gethex+0x12c>
 8011058:	1c69      	adds	r1, r5, #1
 801105a:	f04f 0b00 	mov.w	fp, #0
 801105e:	7808      	ldrb	r0, [r1, #0]
 8011060:	f7ff ff80 	bl	8010f64 <__hexdig_fun>
 8011064:	1e42      	subs	r2, r0, #1
 8011066:	b2d2      	uxtb	r2, r2
 8011068:	2a18      	cmp	r2, #24
 801106a:	d82e      	bhi.n	80110ca <__gethex+0x13a>
 801106c:	f1a0 0210 	sub.w	r2, r0, #16
 8011070:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011074:	f7ff ff76 	bl	8010f64 <__hexdig_fun>
 8011078:	f100 3cff 	add.w	ip, r0, #4294967295
 801107c:	fa5f fc8c 	uxtb.w	ip, ip
 8011080:	f1bc 0f18 	cmp.w	ip, #24
 8011084:	d91d      	bls.n	80110c2 <__gethex+0x132>
 8011086:	f1bb 0f00 	cmp.w	fp, #0
 801108a:	d000      	beq.n	801108e <__gethex+0xfe>
 801108c:	4252      	negs	r2, r2
 801108e:	4416      	add	r6, r2
 8011090:	f8ca 1000 	str.w	r1, [sl]
 8011094:	b1dc      	cbz	r4, 80110ce <__gethex+0x13e>
 8011096:	9b01      	ldr	r3, [sp, #4]
 8011098:	2b00      	cmp	r3, #0
 801109a:	bf14      	ite	ne
 801109c:	f04f 0800 	movne.w	r8, #0
 80110a0:	f04f 0806 	moveq.w	r8, #6
 80110a4:	4640      	mov	r0, r8
 80110a6:	b005      	add	sp, #20
 80110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ac:	4645      	mov	r5, r8
 80110ae:	4626      	mov	r6, r4
 80110b0:	2401      	movs	r4, #1
 80110b2:	e7c7      	b.n	8011044 <__gethex+0xb4>
 80110b4:	f04f 0b00 	mov.w	fp, #0
 80110b8:	1ca9      	adds	r1, r5, #2
 80110ba:	e7d0      	b.n	801105e <__gethex+0xce>
 80110bc:	f04f 0b01 	mov.w	fp, #1
 80110c0:	e7fa      	b.n	80110b8 <__gethex+0x128>
 80110c2:	230a      	movs	r3, #10
 80110c4:	fb03 0002 	mla	r0, r3, r2, r0
 80110c8:	e7d0      	b.n	801106c <__gethex+0xdc>
 80110ca:	4629      	mov	r1, r5
 80110cc:	e7e0      	b.n	8011090 <__gethex+0x100>
 80110ce:	eba5 0308 	sub.w	r3, r5, r8
 80110d2:	3b01      	subs	r3, #1
 80110d4:	4621      	mov	r1, r4
 80110d6:	2b07      	cmp	r3, #7
 80110d8:	dc0a      	bgt.n	80110f0 <__gethex+0x160>
 80110da:	4648      	mov	r0, r9
 80110dc:	f7fe f974 	bl	800f3c8 <_Balloc>
 80110e0:	4604      	mov	r4, r0
 80110e2:	b940      	cbnz	r0, 80110f6 <__gethex+0x166>
 80110e4:	4b61      	ldr	r3, [pc, #388]	; (801126c <__gethex+0x2dc>)
 80110e6:	4602      	mov	r2, r0
 80110e8:	21e4      	movs	r1, #228	; 0xe4
 80110ea:	4861      	ldr	r0, [pc, #388]	; (8011270 <__gethex+0x2e0>)
 80110ec:	f7ff feb4 	bl	8010e58 <__assert_func>
 80110f0:	3101      	adds	r1, #1
 80110f2:	105b      	asrs	r3, r3, #1
 80110f4:	e7ef      	b.n	80110d6 <__gethex+0x146>
 80110f6:	f100 0a14 	add.w	sl, r0, #20
 80110fa:	2300      	movs	r3, #0
 80110fc:	495a      	ldr	r1, [pc, #360]	; (8011268 <__gethex+0x2d8>)
 80110fe:	f8cd a004 	str.w	sl, [sp, #4]
 8011102:	469b      	mov	fp, r3
 8011104:	45a8      	cmp	r8, r5
 8011106:	d342      	bcc.n	801118e <__gethex+0x1fe>
 8011108:	9801      	ldr	r0, [sp, #4]
 801110a:	f840 bb04 	str.w	fp, [r0], #4
 801110e:	eba0 000a 	sub.w	r0, r0, sl
 8011112:	1080      	asrs	r0, r0, #2
 8011114:	6120      	str	r0, [r4, #16]
 8011116:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801111a:	4658      	mov	r0, fp
 801111c:	f7fe fa46 	bl	800f5ac <__hi0bits>
 8011120:	683d      	ldr	r5, [r7, #0]
 8011122:	eba8 0000 	sub.w	r0, r8, r0
 8011126:	42a8      	cmp	r0, r5
 8011128:	dd59      	ble.n	80111de <__gethex+0x24e>
 801112a:	eba0 0805 	sub.w	r8, r0, r5
 801112e:	4641      	mov	r1, r8
 8011130:	4620      	mov	r0, r4
 8011132:	f7fe fdd2 	bl	800fcda <__any_on>
 8011136:	4683      	mov	fp, r0
 8011138:	b1b8      	cbz	r0, 801116a <__gethex+0x1da>
 801113a:	f108 33ff 	add.w	r3, r8, #4294967295
 801113e:	1159      	asrs	r1, r3, #5
 8011140:	f003 021f 	and.w	r2, r3, #31
 8011144:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011148:	f04f 0b01 	mov.w	fp, #1
 801114c:	fa0b f202 	lsl.w	r2, fp, r2
 8011150:	420a      	tst	r2, r1
 8011152:	d00a      	beq.n	801116a <__gethex+0x1da>
 8011154:	455b      	cmp	r3, fp
 8011156:	dd06      	ble.n	8011166 <__gethex+0x1d6>
 8011158:	f1a8 0102 	sub.w	r1, r8, #2
 801115c:	4620      	mov	r0, r4
 801115e:	f7fe fdbc 	bl	800fcda <__any_on>
 8011162:	2800      	cmp	r0, #0
 8011164:	d138      	bne.n	80111d8 <__gethex+0x248>
 8011166:	f04f 0b02 	mov.w	fp, #2
 801116a:	4641      	mov	r1, r8
 801116c:	4620      	mov	r0, r4
 801116e:	f7ff fea7 	bl	8010ec0 <rshift>
 8011172:	4446      	add	r6, r8
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	42b3      	cmp	r3, r6
 8011178:	da41      	bge.n	80111fe <__gethex+0x26e>
 801117a:	4621      	mov	r1, r4
 801117c:	4648      	mov	r0, r9
 801117e:	f7fe f963 	bl	800f448 <_Bfree>
 8011182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011184:	2300      	movs	r3, #0
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801118c:	e78a      	b.n	80110a4 <__gethex+0x114>
 801118e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011192:	2a2e      	cmp	r2, #46	; 0x2e
 8011194:	d014      	beq.n	80111c0 <__gethex+0x230>
 8011196:	2b20      	cmp	r3, #32
 8011198:	d106      	bne.n	80111a8 <__gethex+0x218>
 801119a:	9b01      	ldr	r3, [sp, #4]
 801119c:	f843 bb04 	str.w	fp, [r3], #4
 80111a0:	f04f 0b00 	mov.w	fp, #0
 80111a4:	9301      	str	r3, [sp, #4]
 80111a6:	465b      	mov	r3, fp
 80111a8:	7828      	ldrb	r0, [r5, #0]
 80111aa:	9303      	str	r3, [sp, #12]
 80111ac:	f7ff feda 	bl	8010f64 <__hexdig_fun>
 80111b0:	9b03      	ldr	r3, [sp, #12]
 80111b2:	f000 000f 	and.w	r0, r0, #15
 80111b6:	4098      	lsls	r0, r3
 80111b8:	ea4b 0b00 	orr.w	fp, fp, r0
 80111bc:	3304      	adds	r3, #4
 80111be:	e7a1      	b.n	8011104 <__gethex+0x174>
 80111c0:	45a8      	cmp	r8, r5
 80111c2:	d8e8      	bhi.n	8011196 <__gethex+0x206>
 80111c4:	2201      	movs	r2, #1
 80111c6:	4628      	mov	r0, r5
 80111c8:	9303      	str	r3, [sp, #12]
 80111ca:	f7ff fe1d 	bl	8010e08 <strncmp>
 80111ce:	4926      	ldr	r1, [pc, #152]	; (8011268 <__gethex+0x2d8>)
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d1df      	bne.n	8011196 <__gethex+0x206>
 80111d6:	e795      	b.n	8011104 <__gethex+0x174>
 80111d8:	f04f 0b03 	mov.w	fp, #3
 80111dc:	e7c5      	b.n	801116a <__gethex+0x1da>
 80111de:	da0b      	bge.n	80111f8 <__gethex+0x268>
 80111e0:	eba5 0800 	sub.w	r8, r5, r0
 80111e4:	4621      	mov	r1, r4
 80111e6:	4642      	mov	r2, r8
 80111e8:	4648      	mov	r0, r9
 80111ea:	f7fe fb47 	bl	800f87c <__lshift>
 80111ee:	eba6 0608 	sub.w	r6, r6, r8
 80111f2:	4604      	mov	r4, r0
 80111f4:	f100 0a14 	add.w	sl, r0, #20
 80111f8:	f04f 0b00 	mov.w	fp, #0
 80111fc:	e7ba      	b.n	8011174 <__gethex+0x1e4>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	42b3      	cmp	r3, r6
 8011202:	dd73      	ble.n	80112ec <__gethex+0x35c>
 8011204:	1b9e      	subs	r6, r3, r6
 8011206:	42b5      	cmp	r5, r6
 8011208:	dc34      	bgt.n	8011274 <__gethex+0x2e4>
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2b02      	cmp	r3, #2
 801120e:	d023      	beq.n	8011258 <__gethex+0x2c8>
 8011210:	2b03      	cmp	r3, #3
 8011212:	d025      	beq.n	8011260 <__gethex+0x2d0>
 8011214:	2b01      	cmp	r3, #1
 8011216:	d115      	bne.n	8011244 <__gethex+0x2b4>
 8011218:	42b5      	cmp	r5, r6
 801121a:	d113      	bne.n	8011244 <__gethex+0x2b4>
 801121c:	2d01      	cmp	r5, #1
 801121e:	d10b      	bne.n	8011238 <__gethex+0x2a8>
 8011220:	9a02      	ldr	r2, [sp, #8]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6013      	str	r3, [r2, #0]
 8011226:	2301      	movs	r3, #1
 8011228:	6123      	str	r3, [r4, #16]
 801122a:	f8ca 3000 	str.w	r3, [sl]
 801122e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011230:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011234:	601c      	str	r4, [r3, #0]
 8011236:	e735      	b.n	80110a4 <__gethex+0x114>
 8011238:	1e69      	subs	r1, r5, #1
 801123a:	4620      	mov	r0, r4
 801123c:	f7fe fd4d 	bl	800fcda <__any_on>
 8011240:	2800      	cmp	r0, #0
 8011242:	d1ed      	bne.n	8011220 <__gethex+0x290>
 8011244:	4621      	mov	r1, r4
 8011246:	4648      	mov	r0, r9
 8011248:	f7fe f8fe 	bl	800f448 <_Bfree>
 801124c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801124e:	2300      	movs	r3, #0
 8011250:	6013      	str	r3, [r2, #0]
 8011252:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011256:	e725      	b.n	80110a4 <__gethex+0x114>
 8011258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801125a:	2b00      	cmp	r3, #0
 801125c:	d1f2      	bne.n	8011244 <__gethex+0x2b4>
 801125e:	e7df      	b.n	8011220 <__gethex+0x290>
 8011260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011262:	2b00      	cmp	r3, #0
 8011264:	d1dc      	bne.n	8011220 <__gethex+0x290>
 8011266:	e7ed      	b.n	8011244 <__gethex+0x2b4>
 8011268:	08011e24 	.word	0x08011e24
 801126c:	08011cb9 	.word	0x08011cb9
 8011270:	08011fce 	.word	0x08011fce
 8011274:	f106 38ff 	add.w	r8, r6, #4294967295
 8011278:	f1bb 0f00 	cmp.w	fp, #0
 801127c:	d133      	bne.n	80112e6 <__gethex+0x356>
 801127e:	f1b8 0f00 	cmp.w	r8, #0
 8011282:	d004      	beq.n	801128e <__gethex+0x2fe>
 8011284:	4641      	mov	r1, r8
 8011286:	4620      	mov	r0, r4
 8011288:	f7fe fd27 	bl	800fcda <__any_on>
 801128c:	4683      	mov	fp, r0
 801128e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011292:	2301      	movs	r3, #1
 8011294:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011298:	f008 081f 	and.w	r8, r8, #31
 801129c:	fa03 f308 	lsl.w	r3, r3, r8
 80112a0:	4213      	tst	r3, r2
 80112a2:	4631      	mov	r1, r6
 80112a4:	4620      	mov	r0, r4
 80112a6:	bf18      	it	ne
 80112a8:	f04b 0b02 	orrne.w	fp, fp, #2
 80112ac:	1bad      	subs	r5, r5, r6
 80112ae:	f7ff fe07 	bl	8010ec0 <rshift>
 80112b2:	687e      	ldr	r6, [r7, #4]
 80112b4:	f04f 0802 	mov.w	r8, #2
 80112b8:	f1bb 0f00 	cmp.w	fp, #0
 80112bc:	d04a      	beq.n	8011354 <__gethex+0x3c4>
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	d016      	beq.n	80112f2 <__gethex+0x362>
 80112c4:	2b03      	cmp	r3, #3
 80112c6:	d018      	beq.n	80112fa <__gethex+0x36a>
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d109      	bne.n	80112e0 <__gethex+0x350>
 80112cc:	f01b 0f02 	tst.w	fp, #2
 80112d0:	d006      	beq.n	80112e0 <__gethex+0x350>
 80112d2:	f8da 3000 	ldr.w	r3, [sl]
 80112d6:	ea4b 0b03 	orr.w	fp, fp, r3
 80112da:	f01b 0f01 	tst.w	fp, #1
 80112de:	d10f      	bne.n	8011300 <__gethex+0x370>
 80112e0:	f048 0810 	orr.w	r8, r8, #16
 80112e4:	e036      	b.n	8011354 <__gethex+0x3c4>
 80112e6:	f04f 0b01 	mov.w	fp, #1
 80112ea:	e7d0      	b.n	801128e <__gethex+0x2fe>
 80112ec:	f04f 0801 	mov.w	r8, #1
 80112f0:	e7e2      	b.n	80112b8 <__gethex+0x328>
 80112f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112f4:	f1c3 0301 	rsb	r3, r3, #1
 80112f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80112fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d0ef      	beq.n	80112e0 <__gethex+0x350>
 8011300:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011304:	f104 0214 	add.w	r2, r4, #20
 8011308:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801130c:	9301      	str	r3, [sp, #4]
 801130e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011312:	2300      	movs	r3, #0
 8011314:	4694      	mov	ip, r2
 8011316:	f852 1b04 	ldr.w	r1, [r2], #4
 801131a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801131e:	d01e      	beq.n	801135e <__gethex+0x3ce>
 8011320:	3101      	adds	r1, #1
 8011322:	f8cc 1000 	str.w	r1, [ip]
 8011326:	f1b8 0f02 	cmp.w	r8, #2
 801132a:	f104 0214 	add.w	r2, r4, #20
 801132e:	d13d      	bne.n	80113ac <__gethex+0x41c>
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	3b01      	subs	r3, #1
 8011334:	42ab      	cmp	r3, r5
 8011336:	d10b      	bne.n	8011350 <__gethex+0x3c0>
 8011338:	1169      	asrs	r1, r5, #5
 801133a:	2301      	movs	r3, #1
 801133c:	f005 051f 	and.w	r5, r5, #31
 8011340:	fa03 f505 	lsl.w	r5, r3, r5
 8011344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011348:	421d      	tst	r5, r3
 801134a:	bf18      	it	ne
 801134c:	f04f 0801 	movne.w	r8, #1
 8011350:	f048 0820 	orr.w	r8, r8, #32
 8011354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011356:	601c      	str	r4, [r3, #0]
 8011358:	9b02      	ldr	r3, [sp, #8]
 801135a:	601e      	str	r6, [r3, #0]
 801135c:	e6a2      	b.n	80110a4 <__gethex+0x114>
 801135e:	4290      	cmp	r0, r2
 8011360:	f842 3c04 	str.w	r3, [r2, #-4]
 8011364:	d8d6      	bhi.n	8011314 <__gethex+0x384>
 8011366:	68a2      	ldr	r2, [r4, #8]
 8011368:	4593      	cmp	fp, r2
 801136a:	db17      	blt.n	801139c <__gethex+0x40c>
 801136c:	6861      	ldr	r1, [r4, #4]
 801136e:	4648      	mov	r0, r9
 8011370:	3101      	adds	r1, #1
 8011372:	f7fe f829 	bl	800f3c8 <_Balloc>
 8011376:	4682      	mov	sl, r0
 8011378:	b918      	cbnz	r0, 8011382 <__gethex+0x3f2>
 801137a:	4b1b      	ldr	r3, [pc, #108]	; (80113e8 <__gethex+0x458>)
 801137c:	4602      	mov	r2, r0
 801137e:	2184      	movs	r1, #132	; 0x84
 8011380:	e6b3      	b.n	80110ea <__gethex+0x15a>
 8011382:	6922      	ldr	r2, [r4, #16]
 8011384:	3202      	adds	r2, #2
 8011386:	f104 010c 	add.w	r1, r4, #12
 801138a:	0092      	lsls	r2, r2, #2
 801138c:	300c      	adds	r0, #12
 801138e:	f7ff fd4d 	bl	8010e2c <memcpy>
 8011392:	4621      	mov	r1, r4
 8011394:	4648      	mov	r0, r9
 8011396:	f7fe f857 	bl	800f448 <_Bfree>
 801139a:	4654      	mov	r4, sl
 801139c:	6922      	ldr	r2, [r4, #16]
 801139e:	1c51      	adds	r1, r2, #1
 80113a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80113a4:	6121      	str	r1, [r4, #16]
 80113a6:	2101      	movs	r1, #1
 80113a8:	6151      	str	r1, [r2, #20]
 80113aa:	e7bc      	b.n	8011326 <__gethex+0x396>
 80113ac:	6921      	ldr	r1, [r4, #16]
 80113ae:	4559      	cmp	r1, fp
 80113b0:	dd0b      	ble.n	80113ca <__gethex+0x43a>
 80113b2:	2101      	movs	r1, #1
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fd83 	bl	8010ec0 <rshift>
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	3601      	adds	r6, #1
 80113be:	42b3      	cmp	r3, r6
 80113c0:	f6ff aedb 	blt.w	801117a <__gethex+0x1ea>
 80113c4:	f04f 0801 	mov.w	r8, #1
 80113c8:	e7c2      	b.n	8011350 <__gethex+0x3c0>
 80113ca:	f015 051f 	ands.w	r5, r5, #31
 80113ce:	d0f9      	beq.n	80113c4 <__gethex+0x434>
 80113d0:	9b01      	ldr	r3, [sp, #4]
 80113d2:	441a      	add	r2, r3
 80113d4:	f1c5 0520 	rsb	r5, r5, #32
 80113d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80113dc:	f7fe f8e6 	bl	800f5ac <__hi0bits>
 80113e0:	42a8      	cmp	r0, r5
 80113e2:	dbe6      	blt.n	80113b2 <__gethex+0x422>
 80113e4:	e7ee      	b.n	80113c4 <__gethex+0x434>
 80113e6:	bf00      	nop
 80113e8:	08011cb9 	.word	0x08011cb9

080113ec <L_shift>:
 80113ec:	f1c2 0208 	rsb	r2, r2, #8
 80113f0:	0092      	lsls	r2, r2, #2
 80113f2:	b570      	push	{r4, r5, r6, lr}
 80113f4:	f1c2 0620 	rsb	r6, r2, #32
 80113f8:	6843      	ldr	r3, [r0, #4]
 80113fa:	6804      	ldr	r4, [r0, #0]
 80113fc:	fa03 f506 	lsl.w	r5, r3, r6
 8011400:	432c      	orrs	r4, r5
 8011402:	40d3      	lsrs	r3, r2
 8011404:	6004      	str	r4, [r0, #0]
 8011406:	f840 3f04 	str.w	r3, [r0, #4]!
 801140a:	4288      	cmp	r0, r1
 801140c:	d3f4      	bcc.n	80113f8 <L_shift+0xc>
 801140e:	bd70      	pop	{r4, r5, r6, pc}

08011410 <__match>:
 8011410:	b530      	push	{r4, r5, lr}
 8011412:	6803      	ldr	r3, [r0, #0]
 8011414:	3301      	adds	r3, #1
 8011416:	f811 4b01 	ldrb.w	r4, [r1], #1
 801141a:	b914      	cbnz	r4, 8011422 <__match+0x12>
 801141c:	6003      	str	r3, [r0, #0]
 801141e:	2001      	movs	r0, #1
 8011420:	bd30      	pop	{r4, r5, pc}
 8011422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011426:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801142a:	2d19      	cmp	r5, #25
 801142c:	bf98      	it	ls
 801142e:	3220      	addls	r2, #32
 8011430:	42a2      	cmp	r2, r4
 8011432:	d0f0      	beq.n	8011416 <__match+0x6>
 8011434:	2000      	movs	r0, #0
 8011436:	e7f3      	b.n	8011420 <__match+0x10>

08011438 <__hexnan>:
 8011438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143c:	680b      	ldr	r3, [r1, #0]
 801143e:	6801      	ldr	r1, [r0, #0]
 8011440:	115e      	asrs	r6, r3, #5
 8011442:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011446:	f013 031f 	ands.w	r3, r3, #31
 801144a:	b087      	sub	sp, #28
 801144c:	bf18      	it	ne
 801144e:	3604      	addne	r6, #4
 8011450:	2500      	movs	r5, #0
 8011452:	1f37      	subs	r7, r6, #4
 8011454:	4682      	mov	sl, r0
 8011456:	4690      	mov	r8, r2
 8011458:	9301      	str	r3, [sp, #4]
 801145a:	f846 5c04 	str.w	r5, [r6, #-4]
 801145e:	46b9      	mov	r9, r7
 8011460:	463c      	mov	r4, r7
 8011462:	9502      	str	r5, [sp, #8]
 8011464:	46ab      	mov	fp, r5
 8011466:	784a      	ldrb	r2, [r1, #1]
 8011468:	1c4b      	adds	r3, r1, #1
 801146a:	9303      	str	r3, [sp, #12]
 801146c:	b342      	cbz	r2, 80114c0 <__hexnan+0x88>
 801146e:	4610      	mov	r0, r2
 8011470:	9105      	str	r1, [sp, #20]
 8011472:	9204      	str	r2, [sp, #16]
 8011474:	f7ff fd76 	bl	8010f64 <__hexdig_fun>
 8011478:	2800      	cmp	r0, #0
 801147a:	d14f      	bne.n	801151c <__hexnan+0xe4>
 801147c:	9a04      	ldr	r2, [sp, #16]
 801147e:	9905      	ldr	r1, [sp, #20]
 8011480:	2a20      	cmp	r2, #32
 8011482:	d818      	bhi.n	80114b6 <__hexnan+0x7e>
 8011484:	9b02      	ldr	r3, [sp, #8]
 8011486:	459b      	cmp	fp, r3
 8011488:	dd13      	ble.n	80114b2 <__hexnan+0x7a>
 801148a:	454c      	cmp	r4, r9
 801148c:	d206      	bcs.n	801149c <__hexnan+0x64>
 801148e:	2d07      	cmp	r5, #7
 8011490:	dc04      	bgt.n	801149c <__hexnan+0x64>
 8011492:	462a      	mov	r2, r5
 8011494:	4649      	mov	r1, r9
 8011496:	4620      	mov	r0, r4
 8011498:	f7ff ffa8 	bl	80113ec <L_shift>
 801149c:	4544      	cmp	r4, r8
 801149e:	d950      	bls.n	8011542 <__hexnan+0x10a>
 80114a0:	2300      	movs	r3, #0
 80114a2:	f1a4 0904 	sub.w	r9, r4, #4
 80114a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80114aa:	f8cd b008 	str.w	fp, [sp, #8]
 80114ae:	464c      	mov	r4, r9
 80114b0:	461d      	mov	r5, r3
 80114b2:	9903      	ldr	r1, [sp, #12]
 80114b4:	e7d7      	b.n	8011466 <__hexnan+0x2e>
 80114b6:	2a29      	cmp	r2, #41	; 0x29
 80114b8:	d155      	bne.n	8011566 <__hexnan+0x12e>
 80114ba:	3102      	adds	r1, #2
 80114bc:	f8ca 1000 	str.w	r1, [sl]
 80114c0:	f1bb 0f00 	cmp.w	fp, #0
 80114c4:	d04f      	beq.n	8011566 <__hexnan+0x12e>
 80114c6:	454c      	cmp	r4, r9
 80114c8:	d206      	bcs.n	80114d8 <__hexnan+0xa0>
 80114ca:	2d07      	cmp	r5, #7
 80114cc:	dc04      	bgt.n	80114d8 <__hexnan+0xa0>
 80114ce:	462a      	mov	r2, r5
 80114d0:	4649      	mov	r1, r9
 80114d2:	4620      	mov	r0, r4
 80114d4:	f7ff ff8a 	bl	80113ec <L_shift>
 80114d8:	4544      	cmp	r4, r8
 80114da:	d934      	bls.n	8011546 <__hexnan+0x10e>
 80114dc:	f1a8 0204 	sub.w	r2, r8, #4
 80114e0:	4623      	mov	r3, r4
 80114e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80114e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80114ea:	429f      	cmp	r7, r3
 80114ec:	d2f9      	bcs.n	80114e2 <__hexnan+0xaa>
 80114ee:	1b3b      	subs	r3, r7, r4
 80114f0:	f023 0303 	bic.w	r3, r3, #3
 80114f4:	3304      	adds	r3, #4
 80114f6:	3e03      	subs	r6, #3
 80114f8:	3401      	adds	r4, #1
 80114fa:	42a6      	cmp	r6, r4
 80114fc:	bf38      	it	cc
 80114fe:	2304      	movcc	r3, #4
 8011500:	4443      	add	r3, r8
 8011502:	2200      	movs	r2, #0
 8011504:	f843 2b04 	str.w	r2, [r3], #4
 8011508:	429f      	cmp	r7, r3
 801150a:	d2fb      	bcs.n	8011504 <__hexnan+0xcc>
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	b91b      	cbnz	r3, 8011518 <__hexnan+0xe0>
 8011510:	4547      	cmp	r7, r8
 8011512:	d126      	bne.n	8011562 <__hexnan+0x12a>
 8011514:	2301      	movs	r3, #1
 8011516:	603b      	str	r3, [r7, #0]
 8011518:	2005      	movs	r0, #5
 801151a:	e025      	b.n	8011568 <__hexnan+0x130>
 801151c:	3501      	adds	r5, #1
 801151e:	2d08      	cmp	r5, #8
 8011520:	f10b 0b01 	add.w	fp, fp, #1
 8011524:	dd06      	ble.n	8011534 <__hexnan+0xfc>
 8011526:	4544      	cmp	r4, r8
 8011528:	d9c3      	bls.n	80114b2 <__hexnan+0x7a>
 801152a:	2300      	movs	r3, #0
 801152c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011530:	2501      	movs	r5, #1
 8011532:	3c04      	subs	r4, #4
 8011534:	6822      	ldr	r2, [r4, #0]
 8011536:	f000 000f 	and.w	r0, r0, #15
 801153a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801153e:	6020      	str	r0, [r4, #0]
 8011540:	e7b7      	b.n	80114b2 <__hexnan+0x7a>
 8011542:	2508      	movs	r5, #8
 8011544:	e7b5      	b.n	80114b2 <__hexnan+0x7a>
 8011546:	9b01      	ldr	r3, [sp, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d0df      	beq.n	801150c <__hexnan+0xd4>
 801154c:	f1c3 0320 	rsb	r3, r3, #32
 8011550:	f04f 32ff 	mov.w	r2, #4294967295
 8011554:	40da      	lsrs	r2, r3
 8011556:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801155a:	4013      	ands	r3, r2
 801155c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011560:	e7d4      	b.n	801150c <__hexnan+0xd4>
 8011562:	3f04      	subs	r7, #4
 8011564:	e7d2      	b.n	801150c <__hexnan+0xd4>
 8011566:	2004      	movs	r0, #4
 8011568:	b007      	add	sp, #28
 801156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801156e <__ascii_mbtowc>:
 801156e:	b082      	sub	sp, #8
 8011570:	b901      	cbnz	r1, 8011574 <__ascii_mbtowc+0x6>
 8011572:	a901      	add	r1, sp, #4
 8011574:	b142      	cbz	r2, 8011588 <__ascii_mbtowc+0x1a>
 8011576:	b14b      	cbz	r3, 801158c <__ascii_mbtowc+0x1e>
 8011578:	7813      	ldrb	r3, [r2, #0]
 801157a:	600b      	str	r3, [r1, #0]
 801157c:	7812      	ldrb	r2, [r2, #0]
 801157e:	1e10      	subs	r0, r2, #0
 8011580:	bf18      	it	ne
 8011582:	2001      	movne	r0, #1
 8011584:	b002      	add	sp, #8
 8011586:	4770      	bx	lr
 8011588:	4610      	mov	r0, r2
 801158a:	e7fb      	b.n	8011584 <__ascii_mbtowc+0x16>
 801158c:	f06f 0001 	mvn.w	r0, #1
 8011590:	e7f8      	b.n	8011584 <__ascii_mbtowc+0x16>

08011592 <_realloc_r>:
 8011592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011596:	4680      	mov	r8, r0
 8011598:	4614      	mov	r4, r2
 801159a:	460e      	mov	r6, r1
 801159c:	b921      	cbnz	r1, 80115a8 <_realloc_r+0x16>
 801159e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115a2:	4611      	mov	r1, r2
 80115a4:	f7fc b828 	b.w	800d5f8 <_malloc_r>
 80115a8:	b92a      	cbnz	r2, 80115b6 <_realloc_r+0x24>
 80115aa:	f7fd fec1 	bl	800f330 <_free_r>
 80115ae:	4625      	mov	r5, r4
 80115b0:	4628      	mov	r0, r5
 80115b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b6:	f000 f842 	bl	801163e <_malloc_usable_size_r>
 80115ba:	4284      	cmp	r4, r0
 80115bc:	4607      	mov	r7, r0
 80115be:	d802      	bhi.n	80115c6 <_realloc_r+0x34>
 80115c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80115c4:	d812      	bhi.n	80115ec <_realloc_r+0x5a>
 80115c6:	4621      	mov	r1, r4
 80115c8:	4640      	mov	r0, r8
 80115ca:	f7fc f815 	bl	800d5f8 <_malloc_r>
 80115ce:	4605      	mov	r5, r0
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d0ed      	beq.n	80115b0 <_realloc_r+0x1e>
 80115d4:	42bc      	cmp	r4, r7
 80115d6:	4622      	mov	r2, r4
 80115d8:	4631      	mov	r1, r6
 80115da:	bf28      	it	cs
 80115dc:	463a      	movcs	r2, r7
 80115de:	f7ff fc25 	bl	8010e2c <memcpy>
 80115e2:	4631      	mov	r1, r6
 80115e4:	4640      	mov	r0, r8
 80115e6:	f7fd fea3 	bl	800f330 <_free_r>
 80115ea:	e7e1      	b.n	80115b0 <_realloc_r+0x1e>
 80115ec:	4635      	mov	r5, r6
 80115ee:	e7df      	b.n	80115b0 <_realloc_r+0x1e>

080115f0 <__ascii_wctomb>:
 80115f0:	b149      	cbz	r1, 8011606 <__ascii_wctomb+0x16>
 80115f2:	2aff      	cmp	r2, #255	; 0xff
 80115f4:	bf85      	ittet	hi
 80115f6:	238a      	movhi	r3, #138	; 0x8a
 80115f8:	6003      	strhi	r3, [r0, #0]
 80115fa:	700a      	strbls	r2, [r1, #0]
 80115fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8011600:	bf98      	it	ls
 8011602:	2001      	movls	r0, #1
 8011604:	4770      	bx	lr
 8011606:	4608      	mov	r0, r1
 8011608:	4770      	bx	lr
	...

0801160c <fiprintf>:
 801160c:	b40e      	push	{r1, r2, r3}
 801160e:	b503      	push	{r0, r1, lr}
 8011610:	4601      	mov	r1, r0
 8011612:	ab03      	add	r3, sp, #12
 8011614:	4805      	ldr	r0, [pc, #20]	; (801162c <fiprintf+0x20>)
 8011616:	f853 2b04 	ldr.w	r2, [r3], #4
 801161a:	6800      	ldr	r0, [r0, #0]
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	f000 f83f 	bl	80116a0 <_vfiprintf_r>
 8011622:	b002      	add	sp, #8
 8011624:	f85d eb04 	ldr.w	lr, [sp], #4
 8011628:	b003      	add	sp, #12
 801162a:	4770      	bx	lr
 801162c:	24000068 	.word	0x24000068

08011630 <abort>:
 8011630:	b508      	push	{r3, lr}
 8011632:	2006      	movs	r0, #6
 8011634:	f000 fa0c 	bl	8011a50 <raise>
 8011638:	2001      	movs	r0, #1
 801163a:	f7f0 fd01 	bl	8002040 <_exit>

0801163e <_malloc_usable_size_r>:
 801163e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011642:	1f18      	subs	r0, r3, #4
 8011644:	2b00      	cmp	r3, #0
 8011646:	bfbc      	itt	lt
 8011648:	580b      	ldrlt	r3, [r1, r0]
 801164a:	18c0      	addlt	r0, r0, r3
 801164c:	4770      	bx	lr

0801164e <__sfputc_r>:
 801164e:	6893      	ldr	r3, [r2, #8]
 8011650:	3b01      	subs	r3, #1
 8011652:	2b00      	cmp	r3, #0
 8011654:	b410      	push	{r4}
 8011656:	6093      	str	r3, [r2, #8]
 8011658:	da08      	bge.n	801166c <__sfputc_r+0x1e>
 801165a:	6994      	ldr	r4, [r2, #24]
 801165c:	42a3      	cmp	r3, r4
 801165e:	db01      	blt.n	8011664 <__sfputc_r+0x16>
 8011660:	290a      	cmp	r1, #10
 8011662:	d103      	bne.n	801166c <__sfputc_r+0x1e>
 8011664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011668:	f000 b934 	b.w	80118d4 <__swbuf_r>
 801166c:	6813      	ldr	r3, [r2, #0]
 801166e:	1c58      	adds	r0, r3, #1
 8011670:	6010      	str	r0, [r2, #0]
 8011672:	7019      	strb	r1, [r3, #0]
 8011674:	4608      	mov	r0, r1
 8011676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801167a:	4770      	bx	lr

0801167c <__sfputs_r>:
 801167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801167e:	4606      	mov	r6, r0
 8011680:	460f      	mov	r7, r1
 8011682:	4614      	mov	r4, r2
 8011684:	18d5      	adds	r5, r2, r3
 8011686:	42ac      	cmp	r4, r5
 8011688:	d101      	bne.n	801168e <__sfputs_r+0x12>
 801168a:	2000      	movs	r0, #0
 801168c:	e007      	b.n	801169e <__sfputs_r+0x22>
 801168e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011692:	463a      	mov	r2, r7
 8011694:	4630      	mov	r0, r6
 8011696:	f7ff ffda 	bl	801164e <__sfputc_r>
 801169a:	1c43      	adds	r3, r0, #1
 801169c:	d1f3      	bne.n	8011686 <__sfputs_r+0xa>
 801169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116a0 <_vfiprintf_r>:
 80116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	460d      	mov	r5, r1
 80116a6:	b09d      	sub	sp, #116	; 0x74
 80116a8:	4614      	mov	r4, r2
 80116aa:	4698      	mov	r8, r3
 80116ac:	4606      	mov	r6, r0
 80116ae:	b118      	cbz	r0, 80116b8 <_vfiprintf_r+0x18>
 80116b0:	6a03      	ldr	r3, [r0, #32]
 80116b2:	b90b      	cbnz	r3, 80116b8 <_vfiprintf_r+0x18>
 80116b4:	f7fc fee4 	bl	800e480 <__sinit>
 80116b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116ba:	07d9      	lsls	r1, r3, #31
 80116bc:	d405      	bmi.n	80116ca <_vfiprintf_r+0x2a>
 80116be:	89ab      	ldrh	r3, [r5, #12]
 80116c0:	059a      	lsls	r2, r3, #22
 80116c2:	d402      	bmi.n	80116ca <_vfiprintf_r+0x2a>
 80116c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116c6:	f7fd f835 	bl	800e734 <__retarget_lock_acquire_recursive>
 80116ca:	89ab      	ldrh	r3, [r5, #12]
 80116cc:	071b      	lsls	r3, r3, #28
 80116ce:	d501      	bpl.n	80116d4 <_vfiprintf_r+0x34>
 80116d0:	692b      	ldr	r3, [r5, #16]
 80116d2:	b99b      	cbnz	r3, 80116fc <_vfiprintf_r+0x5c>
 80116d4:	4629      	mov	r1, r5
 80116d6:	4630      	mov	r0, r6
 80116d8:	f000 f93a 	bl	8011950 <__swsetup_r>
 80116dc:	b170      	cbz	r0, 80116fc <_vfiprintf_r+0x5c>
 80116de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116e0:	07dc      	lsls	r4, r3, #31
 80116e2:	d504      	bpl.n	80116ee <_vfiprintf_r+0x4e>
 80116e4:	f04f 30ff 	mov.w	r0, #4294967295
 80116e8:	b01d      	add	sp, #116	; 0x74
 80116ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ee:	89ab      	ldrh	r3, [r5, #12]
 80116f0:	0598      	lsls	r0, r3, #22
 80116f2:	d4f7      	bmi.n	80116e4 <_vfiprintf_r+0x44>
 80116f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116f6:	f7fd f81e 	bl	800e736 <__retarget_lock_release_recursive>
 80116fa:	e7f3      	b.n	80116e4 <_vfiprintf_r+0x44>
 80116fc:	2300      	movs	r3, #0
 80116fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011700:	2320      	movs	r3, #32
 8011702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011706:	f8cd 800c 	str.w	r8, [sp, #12]
 801170a:	2330      	movs	r3, #48	; 0x30
 801170c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80118c0 <_vfiprintf_r+0x220>
 8011710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011714:	f04f 0901 	mov.w	r9, #1
 8011718:	4623      	mov	r3, r4
 801171a:	469a      	mov	sl, r3
 801171c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011720:	b10a      	cbz	r2, 8011726 <_vfiprintf_r+0x86>
 8011722:	2a25      	cmp	r2, #37	; 0x25
 8011724:	d1f9      	bne.n	801171a <_vfiprintf_r+0x7a>
 8011726:	ebba 0b04 	subs.w	fp, sl, r4
 801172a:	d00b      	beq.n	8011744 <_vfiprintf_r+0xa4>
 801172c:	465b      	mov	r3, fp
 801172e:	4622      	mov	r2, r4
 8011730:	4629      	mov	r1, r5
 8011732:	4630      	mov	r0, r6
 8011734:	f7ff ffa2 	bl	801167c <__sfputs_r>
 8011738:	3001      	adds	r0, #1
 801173a:	f000 80a9 	beq.w	8011890 <_vfiprintf_r+0x1f0>
 801173e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011740:	445a      	add	r2, fp
 8011742:	9209      	str	r2, [sp, #36]	; 0x24
 8011744:	f89a 3000 	ldrb.w	r3, [sl]
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 80a1 	beq.w	8011890 <_vfiprintf_r+0x1f0>
 801174e:	2300      	movs	r3, #0
 8011750:	f04f 32ff 	mov.w	r2, #4294967295
 8011754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011758:	f10a 0a01 	add.w	sl, sl, #1
 801175c:	9304      	str	r3, [sp, #16]
 801175e:	9307      	str	r3, [sp, #28]
 8011760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011764:	931a      	str	r3, [sp, #104]	; 0x68
 8011766:	4654      	mov	r4, sl
 8011768:	2205      	movs	r2, #5
 801176a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801176e:	4854      	ldr	r0, [pc, #336]	; (80118c0 <_vfiprintf_r+0x220>)
 8011770:	f7ee fdb6 	bl	80002e0 <memchr>
 8011774:	9a04      	ldr	r2, [sp, #16]
 8011776:	b9d8      	cbnz	r0, 80117b0 <_vfiprintf_r+0x110>
 8011778:	06d1      	lsls	r1, r2, #27
 801177a:	bf44      	itt	mi
 801177c:	2320      	movmi	r3, #32
 801177e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011782:	0713      	lsls	r3, r2, #28
 8011784:	bf44      	itt	mi
 8011786:	232b      	movmi	r3, #43	; 0x2b
 8011788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801178c:	f89a 3000 	ldrb.w	r3, [sl]
 8011790:	2b2a      	cmp	r3, #42	; 0x2a
 8011792:	d015      	beq.n	80117c0 <_vfiprintf_r+0x120>
 8011794:	9a07      	ldr	r2, [sp, #28]
 8011796:	4654      	mov	r4, sl
 8011798:	2000      	movs	r0, #0
 801179a:	f04f 0c0a 	mov.w	ip, #10
 801179e:	4621      	mov	r1, r4
 80117a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117a4:	3b30      	subs	r3, #48	; 0x30
 80117a6:	2b09      	cmp	r3, #9
 80117a8:	d94d      	bls.n	8011846 <_vfiprintf_r+0x1a6>
 80117aa:	b1b0      	cbz	r0, 80117da <_vfiprintf_r+0x13a>
 80117ac:	9207      	str	r2, [sp, #28]
 80117ae:	e014      	b.n	80117da <_vfiprintf_r+0x13a>
 80117b0:	eba0 0308 	sub.w	r3, r0, r8
 80117b4:	fa09 f303 	lsl.w	r3, r9, r3
 80117b8:	4313      	orrs	r3, r2
 80117ba:	9304      	str	r3, [sp, #16]
 80117bc:	46a2      	mov	sl, r4
 80117be:	e7d2      	b.n	8011766 <_vfiprintf_r+0xc6>
 80117c0:	9b03      	ldr	r3, [sp, #12]
 80117c2:	1d19      	adds	r1, r3, #4
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	9103      	str	r1, [sp, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	bfbb      	ittet	lt
 80117cc:	425b      	neglt	r3, r3
 80117ce:	f042 0202 	orrlt.w	r2, r2, #2
 80117d2:	9307      	strge	r3, [sp, #28]
 80117d4:	9307      	strlt	r3, [sp, #28]
 80117d6:	bfb8      	it	lt
 80117d8:	9204      	strlt	r2, [sp, #16]
 80117da:	7823      	ldrb	r3, [r4, #0]
 80117dc:	2b2e      	cmp	r3, #46	; 0x2e
 80117de:	d10c      	bne.n	80117fa <_vfiprintf_r+0x15a>
 80117e0:	7863      	ldrb	r3, [r4, #1]
 80117e2:	2b2a      	cmp	r3, #42	; 0x2a
 80117e4:	d134      	bne.n	8011850 <_vfiprintf_r+0x1b0>
 80117e6:	9b03      	ldr	r3, [sp, #12]
 80117e8:	1d1a      	adds	r2, r3, #4
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	9203      	str	r2, [sp, #12]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	bfb8      	it	lt
 80117f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80117f6:	3402      	adds	r4, #2
 80117f8:	9305      	str	r3, [sp, #20]
 80117fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80118d0 <_vfiprintf_r+0x230>
 80117fe:	7821      	ldrb	r1, [r4, #0]
 8011800:	2203      	movs	r2, #3
 8011802:	4650      	mov	r0, sl
 8011804:	f7ee fd6c 	bl	80002e0 <memchr>
 8011808:	b138      	cbz	r0, 801181a <_vfiprintf_r+0x17a>
 801180a:	9b04      	ldr	r3, [sp, #16]
 801180c:	eba0 000a 	sub.w	r0, r0, sl
 8011810:	2240      	movs	r2, #64	; 0x40
 8011812:	4082      	lsls	r2, r0
 8011814:	4313      	orrs	r3, r2
 8011816:	3401      	adds	r4, #1
 8011818:	9304      	str	r3, [sp, #16]
 801181a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801181e:	4829      	ldr	r0, [pc, #164]	; (80118c4 <_vfiprintf_r+0x224>)
 8011820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011824:	2206      	movs	r2, #6
 8011826:	f7ee fd5b 	bl	80002e0 <memchr>
 801182a:	2800      	cmp	r0, #0
 801182c:	d03f      	beq.n	80118ae <_vfiprintf_r+0x20e>
 801182e:	4b26      	ldr	r3, [pc, #152]	; (80118c8 <_vfiprintf_r+0x228>)
 8011830:	bb1b      	cbnz	r3, 801187a <_vfiprintf_r+0x1da>
 8011832:	9b03      	ldr	r3, [sp, #12]
 8011834:	3307      	adds	r3, #7
 8011836:	f023 0307 	bic.w	r3, r3, #7
 801183a:	3308      	adds	r3, #8
 801183c:	9303      	str	r3, [sp, #12]
 801183e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011840:	443b      	add	r3, r7
 8011842:	9309      	str	r3, [sp, #36]	; 0x24
 8011844:	e768      	b.n	8011718 <_vfiprintf_r+0x78>
 8011846:	fb0c 3202 	mla	r2, ip, r2, r3
 801184a:	460c      	mov	r4, r1
 801184c:	2001      	movs	r0, #1
 801184e:	e7a6      	b.n	801179e <_vfiprintf_r+0xfe>
 8011850:	2300      	movs	r3, #0
 8011852:	3401      	adds	r4, #1
 8011854:	9305      	str	r3, [sp, #20]
 8011856:	4619      	mov	r1, r3
 8011858:	f04f 0c0a 	mov.w	ip, #10
 801185c:	4620      	mov	r0, r4
 801185e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011862:	3a30      	subs	r2, #48	; 0x30
 8011864:	2a09      	cmp	r2, #9
 8011866:	d903      	bls.n	8011870 <_vfiprintf_r+0x1d0>
 8011868:	2b00      	cmp	r3, #0
 801186a:	d0c6      	beq.n	80117fa <_vfiprintf_r+0x15a>
 801186c:	9105      	str	r1, [sp, #20]
 801186e:	e7c4      	b.n	80117fa <_vfiprintf_r+0x15a>
 8011870:	fb0c 2101 	mla	r1, ip, r1, r2
 8011874:	4604      	mov	r4, r0
 8011876:	2301      	movs	r3, #1
 8011878:	e7f0      	b.n	801185c <_vfiprintf_r+0x1bc>
 801187a:	ab03      	add	r3, sp, #12
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	462a      	mov	r2, r5
 8011880:	4b12      	ldr	r3, [pc, #72]	; (80118cc <_vfiprintf_r+0x22c>)
 8011882:	a904      	add	r1, sp, #16
 8011884:	4630      	mov	r0, r6
 8011886:	f7fb ffd3 	bl	800d830 <_printf_float>
 801188a:	4607      	mov	r7, r0
 801188c:	1c78      	adds	r0, r7, #1
 801188e:	d1d6      	bne.n	801183e <_vfiprintf_r+0x19e>
 8011890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011892:	07d9      	lsls	r1, r3, #31
 8011894:	d405      	bmi.n	80118a2 <_vfiprintf_r+0x202>
 8011896:	89ab      	ldrh	r3, [r5, #12]
 8011898:	059a      	lsls	r2, r3, #22
 801189a:	d402      	bmi.n	80118a2 <_vfiprintf_r+0x202>
 801189c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801189e:	f7fc ff4a 	bl	800e736 <__retarget_lock_release_recursive>
 80118a2:	89ab      	ldrh	r3, [r5, #12]
 80118a4:	065b      	lsls	r3, r3, #25
 80118a6:	f53f af1d 	bmi.w	80116e4 <_vfiprintf_r+0x44>
 80118aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118ac:	e71c      	b.n	80116e8 <_vfiprintf_r+0x48>
 80118ae:	ab03      	add	r3, sp, #12
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	462a      	mov	r2, r5
 80118b4:	4b05      	ldr	r3, [pc, #20]	; (80118cc <_vfiprintf_r+0x22c>)
 80118b6:	a904      	add	r1, sp, #16
 80118b8:	4630      	mov	r0, r6
 80118ba:	f7fc fa41 	bl	800dd40 <_printf_i>
 80118be:	e7e4      	b.n	801188a <_vfiprintf_r+0x1ea>
 80118c0:	08011f79 	.word	0x08011f79
 80118c4:	08011f83 	.word	0x08011f83
 80118c8:	0800d831 	.word	0x0800d831
 80118cc:	0801167d 	.word	0x0801167d
 80118d0:	08011f7f 	.word	0x08011f7f

080118d4 <__swbuf_r>:
 80118d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d6:	460e      	mov	r6, r1
 80118d8:	4614      	mov	r4, r2
 80118da:	4605      	mov	r5, r0
 80118dc:	b118      	cbz	r0, 80118e6 <__swbuf_r+0x12>
 80118de:	6a03      	ldr	r3, [r0, #32]
 80118e0:	b90b      	cbnz	r3, 80118e6 <__swbuf_r+0x12>
 80118e2:	f7fc fdcd 	bl	800e480 <__sinit>
 80118e6:	69a3      	ldr	r3, [r4, #24]
 80118e8:	60a3      	str	r3, [r4, #8]
 80118ea:	89a3      	ldrh	r3, [r4, #12]
 80118ec:	071a      	lsls	r2, r3, #28
 80118ee:	d525      	bpl.n	801193c <__swbuf_r+0x68>
 80118f0:	6923      	ldr	r3, [r4, #16]
 80118f2:	b31b      	cbz	r3, 801193c <__swbuf_r+0x68>
 80118f4:	6823      	ldr	r3, [r4, #0]
 80118f6:	6922      	ldr	r2, [r4, #16]
 80118f8:	1a98      	subs	r0, r3, r2
 80118fa:	6963      	ldr	r3, [r4, #20]
 80118fc:	b2f6      	uxtb	r6, r6
 80118fe:	4283      	cmp	r3, r0
 8011900:	4637      	mov	r7, r6
 8011902:	dc04      	bgt.n	801190e <__swbuf_r+0x3a>
 8011904:	4621      	mov	r1, r4
 8011906:	4628      	mov	r0, r5
 8011908:	f7ff fa3c 	bl	8010d84 <_fflush_r>
 801190c:	b9e0      	cbnz	r0, 8011948 <__swbuf_r+0x74>
 801190e:	68a3      	ldr	r3, [r4, #8]
 8011910:	3b01      	subs	r3, #1
 8011912:	60a3      	str	r3, [r4, #8]
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	6022      	str	r2, [r4, #0]
 801191a:	701e      	strb	r6, [r3, #0]
 801191c:	6962      	ldr	r2, [r4, #20]
 801191e:	1c43      	adds	r3, r0, #1
 8011920:	429a      	cmp	r2, r3
 8011922:	d004      	beq.n	801192e <__swbuf_r+0x5a>
 8011924:	89a3      	ldrh	r3, [r4, #12]
 8011926:	07db      	lsls	r3, r3, #31
 8011928:	d506      	bpl.n	8011938 <__swbuf_r+0x64>
 801192a:	2e0a      	cmp	r6, #10
 801192c:	d104      	bne.n	8011938 <__swbuf_r+0x64>
 801192e:	4621      	mov	r1, r4
 8011930:	4628      	mov	r0, r5
 8011932:	f7ff fa27 	bl	8010d84 <_fflush_r>
 8011936:	b938      	cbnz	r0, 8011948 <__swbuf_r+0x74>
 8011938:	4638      	mov	r0, r7
 801193a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801193c:	4621      	mov	r1, r4
 801193e:	4628      	mov	r0, r5
 8011940:	f000 f806 	bl	8011950 <__swsetup_r>
 8011944:	2800      	cmp	r0, #0
 8011946:	d0d5      	beq.n	80118f4 <__swbuf_r+0x20>
 8011948:	f04f 37ff 	mov.w	r7, #4294967295
 801194c:	e7f4      	b.n	8011938 <__swbuf_r+0x64>
	...

08011950 <__swsetup_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4b2a      	ldr	r3, [pc, #168]	; (80119fc <__swsetup_r+0xac>)
 8011954:	4605      	mov	r5, r0
 8011956:	6818      	ldr	r0, [r3, #0]
 8011958:	460c      	mov	r4, r1
 801195a:	b118      	cbz	r0, 8011964 <__swsetup_r+0x14>
 801195c:	6a03      	ldr	r3, [r0, #32]
 801195e:	b90b      	cbnz	r3, 8011964 <__swsetup_r+0x14>
 8011960:	f7fc fd8e 	bl	800e480 <__sinit>
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801196a:	0718      	lsls	r0, r3, #28
 801196c:	d422      	bmi.n	80119b4 <__swsetup_r+0x64>
 801196e:	06d9      	lsls	r1, r3, #27
 8011970:	d407      	bmi.n	8011982 <__swsetup_r+0x32>
 8011972:	2309      	movs	r3, #9
 8011974:	602b      	str	r3, [r5, #0]
 8011976:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801197a:	81a3      	strh	r3, [r4, #12]
 801197c:	f04f 30ff 	mov.w	r0, #4294967295
 8011980:	e034      	b.n	80119ec <__swsetup_r+0x9c>
 8011982:	0758      	lsls	r0, r3, #29
 8011984:	d512      	bpl.n	80119ac <__swsetup_r+0x5c>
 8011986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011988:	b141      	cbz	r1, 801199c <__swsetup_r+0x4c>
 801198a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801198e:	4299      	cmp	r1, r3
 8011990:	d002      	beq.n	8011998 <__swsetup_r+0x48>
 8011992:	4628      	mov	r0, r5
 8011994:	f7fd fccc 	bl	800f330 <_free_r>
 8011998:	2300      	movs	r3, #0
 801199a:	6363      	str	r3, [r4, #52]	; 0x34
 801199c:	89a3      	ldrh	r3, [r4, #12]
 801199e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119a2:	81a3      	strh	r3, [r4, #12]
 80119a4:	2300      	movs	r3, #0
 80119a6:	6063      	str	r3, [r4, #4]
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	6023      	str	r3, [r4, #0]
 80119ac:	89a3      	ldrh	r3, [r4, #12]
 80119ae:	f043 0308 	orr.w	r3, r3, #8
 80119b2:	81a3      	strh	r3, [r4, #12]
 80119b4:	6923      	ldr	r3, [r4, #16]
 80119b6:	b94b      	cbnz	r3, 80119cc <__swsetup_r+0x7c>
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119c2:	d003      	beq.n	80119cc <__swsetup_r+0x7c>
 80119c4:	4621      	mov	r1, r4
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 f884 	bl	8011ad4 <__smakebuf_r>
 80119cc:	89a0      	ldrh	r0, [r4, #12]
 80119ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119d2:	f010 0301 	ands.w	r3, r0, #1
 80119d6:	d00a      	beq.n	80119ee <__swsetup_r+0x9e>
 80119d8:	2300      	movs	r3, #0
 80119da:	60a3      	str	r3, [r4, #8]
 80119dc:	6963      	ldr	r3, [r4, #20]
 80119de:	425b      	negs	r3, r3
 80119e0:	61a3      	str	r3, [r4, #24]
 80119e2:	6923      	ldr	r3, [r4, #16]
 80119e4:	b943      	cbnz	r3, 80119f8 <__swsetup_r+0xa8>
 80119e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119ea:	d1c4      	bne.n	8011976 <__swsetup_r+0x26>
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	0781      	lsls	r1, r0, #30
 80119f0:	bf58      	it	pl
 80119f2:	6963      	ldrpl	r3, [r4, #20]
 80119f4:	60a3      	str	r3, [r4, #8]
 80119f6:	e7f4      	b.n	80119e2 <__swsetup_r+0x92>
 80119f8:	2000      	movs	r0, #0
 80119fa:	e7f7      	b.n	80119ec <__swsetup_r+0x9c>
 80119fc:	24000068 	.word	0x24000068

08011a00 <_raise_r>:
 8011a00:	291f      	cmp	r1, #31
 8011a02:	b538      	push	{r3, r4, r5, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	460d      	mov	r5, r1
 8011a08:	d904      	bls.n	8011a14 <_raise_r+0x14>
 8011a0a:	2316      	movs	r3, #22
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011a16:	b112      	cbz	r2, 8011a1e <_raise_r+0x1e>
 8011a18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a1c:	b94b      	cbnz	r3, 8011a32 <_raise_r+0x32>
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f000 f830 	bl	8011a84 <_getpid_r>
 8011a24:	462a      	mov	r2, r5
 8011a26:	4601      	mov	r1, r0
 8011a28:	4620      	mov	r0, r4
 8011a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a2e:	f000 b817 	b.w	8011a60 <_kill_r>
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d00a      	beq.n	8011a4c <_raise_r+0x4c>
 8011a36:	1c59      	adds	r1, r3, #1
 8011a38:	d103      	bne.n	8011a42 <_raise_r+0x42>
 8011a3a:	2316      	movs	r3, #22
 8011a3c:	6003      	str	r3, [r0, #0]
 8011a3e:	2001      	movs	r0, #1
 8011a40:	e7e7      	b.n	8011a12 <_raise_r+0x12>
 8011a42:	2400      	movs	r4, #0
 8011a44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a48:	4628      	mov	r0, r5
 8011a4a:	4798      	blx	r3
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	e7e0      	b.n	8011a12 <_raise_r+0x12>

08011a50 <raise>:
 8011a50:	4b02      	ldr	r3, [pc, #8]	; (8011a5c <raise+0xc>)
 8011a52:	4601      	mov	r1, r0
 8011a54:	6818      	ldr	r0, [r3, #0]
 8011a56:	f7ff bfd3 	b.w	8011a00 <_raise_r>
 8011a5a:	bf00      	nop
 8011a5c:	24000068 	.word	0x24000068

08011a60 <_kill_r>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	4d07      	ldr	r5, [pc, #28]	; (8011a80 <_kill_r+0x20>)
 8011a64:	2300      	movs	r3, #0
 8011a66:	4604      	mov	r4, r0
 8011a68:	4608      	mov	r0, r1
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	602b      	str	r3, [r5, #0]
 8011a6e:	f7f0 fad7 	bl	8002020 <_kill>
 8011a72:	1c43      	adds	r3, r0, #1
 8011a74:	d102      	bne.n	8011a7c <_kill_r+0x1c>
 8011a76:	682b      	ldr	r3, [r5, #0]
 8011a78:	b103      	cbz	r3, 8011a7c <_kill_r+0x1c>
 8011a7a:	6023      	str	r3, [r4, #0]
 8011a7c:	bd38      	pop	{r3, r4, r5, pc}
 8011a7e:	bf00      	nop
 8011a80:	24000ca0 	.word	0x24000ca0

08011a84 <_getpid_r>:
 8011a84:	f7f0 bac4 	b.w	8002010 <_getpid>

08011a88 <__swhatbuf_r>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a90:	2900      	cmp	r1, #0
 8011a92:	b096      	sub	sp, #88	; 0x58
 8011a94:	4615      	mov	r5, r2
 8011a96:	461e      	mov	r6, r3
 8011a98:	da0d      	bge.n	8011ab6 <__swhatbuf_r+0x2e>
 8011a9a:	89a3      	ldrh	r3, [r4, #12]
 8011a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011aa0:	f04f 0100 	mov.w	r1, #0
 8011aa4:	bf0c      	ite	eq
 8011aa6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011aaa:	2340      	movne	r3, #64	; 0x40
 8011aac:	2000      	movs	r0, #0
 8011aae:	6031      	str	r1, [r6, #0]
 8011ab0:	602b      	str	r3, [r5, #0]
 8011ab2:	b016      	add	sp, #88	; 0x58
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
 8011ab6:	466a      	mov	r2, sp
 8011ab8:	f000 f848 	bl	8011b4c <_fstat_r>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	dbec      	blt.n	8011a9a <__swhatbuf_r+0x12>
 8011ac0:	9901      	ldr	r1, [sp, #4]
 8011ac2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011ac6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011aca:	4259      	negs	r1, r3
 8011acc:	4159      	adcs	r1, r3
 8011ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ad2:	e7eb      	b.n	8011aac <__swhatbuf_r+0x24>

08011ad4 <__smakebuf_r>:
 8011ad4:	898b      	ldrh	r3, [r1, #12]
 8011ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ad8:	079d      	lsls	r5, r3, #30
 8011ada:	4606      	mov	r6, r0
 8011adc:	460c      	mov	r4, r1
 8011ade:	d507      	bpl.n	8011af0 <__smakebuf_r+0x1c>
 8011ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	6123      	str	r3, [r4, #16]
 8011ae8:	2301      	movs	r3, #1
 8011aea:	6163      	str	r3, [r4, #20]
 8011aec:	b002      	add	sp, #8
 8011aee:	bd70      	pop	{r4, r5, r6, pc}
 8011af0:	ab01      	add	r3, sp, #4
 8011af2:	466a      	mov	r2, sp
 8011af4:	f7ff ffc8 	bl	8011a88 <__swhatbuf_r>
 8011af8:	9900      	ldr	r1, [sp, #0]
 8011afa:	4605      	mov	r5, r0
 8011afc:	4630      	mov	r0, r6
 8011afe:	f7fb fd7b 	bl	800d5f8 <_malloc_r>
 8011b02:	b948      	cbnz	r0, 8011b18 <__smakebuf_r+0x44>
 8011b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b08:	059a      	lsls	r2, r3, #22
 8011b0a:	d4ef      	bmi.n	8011aec <__smakebuf_r+0x18>
 8011b0c:	f023 0303 	bic.w	r3, r3, #3
 8011b10:	f043 0302 	orr.w	r3, r3, #2
 8011b14:	81a3      	strh	r3, [r4, #12]
 8011b16:	e7e3      	b.n	8011ae0 <__smakebuf_r+0xc>
 8011b18:	89a3      	ldrh	r3, [r4, #12]
 8011b1a:	6020      	str	r0, [r4, #0]
 8011b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b20:	81a3      	strh	r3, [r4, #12]
 8011b22:	9b00      	ldr	r3, [sp, #0]
 8011b24:	6163      	str	r3, [r4, #20]
 8011b26:	9b01      	ldr	r3, [sp, #4]
 8011b28:	6120      	str	r0, [r4, #16]
 8011b2a:	b15b      	cbz	r3, 8011b44 <__smakebuf_r+0x70>
 8011b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b30:	4630      	mov	r0, r6
 8011b32:	f000 f81d 	bl	8011b70 <_isatty_r>
 8011b36:	b128      	cbz	r0, 8011b44 <__smakebuf_r+0x70>
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	f023 0303 	bic.w	r3, r3, #3
 8011b3e:	f043 0301 	orr.w	r3, r3, #1
 8011b42:	81a3      	strh	r3, [r4, #12]
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	431d      	orrs	r5, r3
 8011b48:	81a5      	strh	r5, [r4, #12]
 8011b4a:	e7cf      	b.n	8011aec <__smakebuf_r+0x18>

08011b4c <_fstat_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4d07      	ldr	r5, [pc, #28]	; (8011b6c <_fstat_r+0x20>)
 8011b50:	2300      	movs	r3, #0
 8011b52:	4604      	mov	r4, r0
 8011b54:	4608      	mov	r0, r1
 8011b56:	4611      	mov	r1, r2
 8011b58:	602b      	str	r3, [r5, #0]
 8011b5a:	f7f0 fac0 	bl	80020de <_fstat>
 8011b5e:	1c43      	adds	r3, r0, #1
 8011b60:	d102      	bne.n	8011b68 <_fstat_r+0x1c>
 8011b62:	682b      	ldr	r3, [r5, #0]
 8011b64:	b103      	cbz	r3, 8011b68 <_fstat_r+0x1c>
 8011b66:	6023      	str	r3, [r4, #0]
 8011b68:	bd38      	pop	{r3, r4, r5, pc}
 8011b6a:	bf00      	nop
 8011b6c:	24000ca0 	.word	0x24000ca0

08011b70 <_isatty_r>:
 8011b70:	b538      	push	{r3, r4, r5, lr}
 8011b72:	4d06      	ldr	r5, [pc, #24]	; (8011b8c <_isatty_r+0x1c>)
 8011b74:	2300      	movs	r3, #0
 8011b76:	4604      	mov	r4, r0
 8011b78:	4608      	mov	r0, r1
 8011b7a:	602b      	str	r3, [r5, #0]
 8011b7c:	f7f0 fabf 	bl	80020fe <_isatty>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d102      	bne.n	8011b8a <_isatty_r+0x1a>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	b103      	cbz	r3, 8011b8a <_isatty_r+0x1a>
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	24000ca0 	.word	0x24000ca0

08011b90 <_init>:
 8011b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b92:	bf00      	nop
 8011b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b96:	bc08      	pop	{r3}
 8011b98:	469e      	mov	lr, r3
 8011b9a:	4770      	bx	lr

08011b9c <_fini>:
 8011b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9e:	bf00      	nop
 8011ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ba2:	bc08      	pop	{r3}
 8011ba4:	469e      	mov	lr, r3
 8011ba6:	4770      	bx	lr
