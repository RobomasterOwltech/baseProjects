
chassis_movement_joystick_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08014e70  08014e70  00024e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153c0  080153c0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080153c0  080153c0  000253c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153c8  080153c8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153c8  080153c8  000253c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080153cc  080153cc  000253cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  080153d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c0  240001dc  080155ac  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400569c  080155ac  0003569c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003032f  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054a0  00000000  00000000  0006057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002258  00000000  00000000  00065a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aa4  00000000  00000000  00067c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000400ae  00000000  00000000  0006971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c2aa  00000000  00000000  000a97ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001aab1e  00000000  00000000  000d5a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a7d4  00000000  00000000  00280594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0028ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014e58 	.word	0x08014e58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08014e58 	.word	0x08014e58

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>:
 *      Author: serfa
 */

#include "Joystick.hpp"

Joystick::Joystick(ADC_HandleTypeDef *_hadc1, ADC_HandleTypeDef *_hadc2) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]

	hadc1 = _hadc1;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	605a      	str	r2, [r3, #4]
	hadc2 = _hadc2;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

    in_min  =  1;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	621a      	str	r2, [r3, #32]
    in_max  =  65536;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
    out_min = -1;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    out_max =  1;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_ZN8Joystick4readEv>:
void Joystick::read(){
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 f824 	bl	8002c3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 f8e7 	bl	8002dd0 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(hadc1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 f9d6 	bl	8002fb8 <HAL_ADC_GetValue>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	819a      	strh	r2, [r3, #12]
    x_axis = x_adc;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	899b      	ldrh	r3, [r3, #12]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	edc3 7a04 	vstr	s15, [r3, #16]
    HAL_ADC_Start(hadc2);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 f806 	bl	8002c3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc2, HAL_MAX_DELAY);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f8c9 	bl	8002dd0 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(hadc2);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 f9b8 	bl	8002fb8 <HAL_ADC_GetValue>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	81da      	strh	r2, [r3, #14]
    y_axis = y_adc;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	89db      	ldrh	r3, [r3, #14]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN8Joystick3mapEf>:
float Joystick::map(float x){
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	ed87 0a00 	vstr	s0, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c82:	ed97 7a00 	vldr	s14, [r7]
 8000c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_ZN8Joystick7set_posEv>:
void Joystick::set_pos(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	x_pos = map(x_axis);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffbf 	bl	8000c6a <_ZN8Joystick3mapEf>
 8000cec:	eef0 7a40 	vmov.f32	s15, s0
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a06 	vstr	s15, [r3, #24]
	y_pos = map(y_axis);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ffb2 	bl	8000c6a <_ZN8Joystick3mapEf>
 8000d06:	eef0 7a40 	vmov.f32	s15, s0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN8Joystick8get_xPosEv>:
float Joystick::get_xPos(){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	return x_pos;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	ee07 3a90 	vmov	s15, r3
}
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_ZN8Joystick8get_yPosEv>:
float Joystick::get_yPos(){
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return y_pos;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	ee07 3a90 	vmov	s15, r3
}
 8000d46:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d60:	bf00      	nop
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <main+0x118>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <main+0x28>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd01      	ble.n	8000d7c <main+0x28>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <main+0x2a>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1ef      	bne.n	8000d62 <main+0xe>
  if ( timeout < 0 )
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da01      	bge.n	8000d8c <main+0x38>
  {
  Error_Handler();
 8000d88:	f000 fe66 	bl	8001a58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f001 fb46 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f884 	bl	8000e9c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d94:	f000 f90e 	bl	8000fb4 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <main+0x118>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <main+0x118>)
 8000da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <main+0x118>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f005 fbc6 	bl	8006548 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f005 fbdc 	bl	800657c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc8:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dca:	bf00      	nop
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <main+0x118>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d106      	bne.n	8000de6 <main+0x92>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dd01      	ble.n	8000de6 <main+0x92>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <main+0x94>
 8000de6:	2300      	movs	r3, #0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1ef      	bne.n	8000dcc <main+0x78>
if ( timeout < 0 )
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	da01      	bge.n	8000df6 <main+0xa2>
{
Error_Handler();
 8000df2:	f000 fe31 	bl	8001a58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 fd0f 	bl	8001818 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000dfa:	f000 fce5 	bl	80017c8 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000dfe:	f000 fc4d 	bl	800169c <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000e02:	f000 fcab 	bl	800175c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8000e06:	f000 fbe5 	bl	80015d4 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8000e0a:	f000 fb83 	bl	8001514 <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8000e0e:	f000 fa61 	bl	80012d4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000e12:	f000 faef 	bl	80013f4 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8000e16:	f000 f9fb 	bl	8001210 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8000e1a:	f000 f901 	bl	8001020 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000e1e:	f000 f987 	bl	8001130 <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e22:	f00c fd67 	bl	800d8f4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of JoystickQueue */
  JoystickQueueHandle = osMessageQueueNew (16, sizeof(Data), &JoystickQueue_attributes);
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <main+0x11c>)
 8000e28:	2108      	movs	r1, #8
 8000e2a:	2010      	movs	r0, #16
 8000e2c:	f00c fe59 	bl	800dae2 <osMessageQueueNew>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <main+0x120>)
 8000e34:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <main+0x124>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4810      	ldr	r0, [pc, #64]	; (8000e7c <main+0x128>)
 8000e3c:	f00c fda4 	bl	800d988 <osThreadNew>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <main+0x12c>)
 8000e44:	6013      	str	r3, [r2, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(StartJoystick, NULL, &Joystick_attributes);
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <main+0x130>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	480f      	ldr	r0, [pc, #60]	; (8000e88 <main+0x134>)
 8000e4c:	f00c fd9c 	bl	800d988 <osThreadNew>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <main+0x138>)
 8000e54:	6013      	str	r3, [r2, #0]

  /* creation of Chassis */
  ChassisHandle = osThreadNew(StartChassis, NULL, &Chassis_attributes);
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <main+0x13c>)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <main+0x140>)
 8000e5c:	f00c fd94 	bl	800d988 <osThreadNew>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <main+0x144>)
 8000e64:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e66:	f00c fd69 	bl	800d93c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <main+0x116>
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	08014f50 	.word	0x08014f50
 8000e74:	24000ad8 	.word	0x24000ad8
 8000e78:	08014ee4 	.word	0x08014ee4
 8000e7c:	08001949 	.word	0x08001949
 8000e80:	24000acc 	.word	0x24000acc
 8000e84:	08014f08 	.word	0x08014f08
 8000e88:	08001959 	.word	0x08001959
 8000e8c:	24000ad0 	.word	0x24000ad0
 8000e90:	08014f2c 	.word	0x08014f2c
 8000e94:	080019d5 	.word	0x080019d5
 8000e98:	24000ad4 	.word	0x24000ad4

08000e9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09c      	sub	sp, #112	; 0x70
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	224c      	movs	r2, #76	; 0x4c
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f010 fcc1 	bl	8011832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f010 fcbb 	bl	8011832 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f005 fcb9 	bl	8006834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <_Z18SystemClock_Configv+0x110>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	4a38      	ldr	r2, [pc, #224]	; (8000fac <_Z18SystemClock_Configv+0x110>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <_Z18SystemClock_Configv+0x110>)
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <_Z18SystemClock_Configv+0x114>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee4:	4a32      	ldr	r2, [pc, #200]	; (8000fb0 <_Z18SystemClock_Configv+0x114>)
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <_Z18SystemClock_Configv+0x114>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ef8:	bf00      	nop
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <_Z18SystemClock_Configv+0x114>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f06:	bf14      	ite	ne
 8000f08:	2301      	movne	r3, #1
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f3      	bne.n	8000efa <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000f28:	2312      	movs	r3, #18
 8000f2a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000f40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 fcdc 	bl	8006908 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000f60:	f000 fd7a 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	233f      	movs	r3, #63	; 0x3f
 8000f66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f74:	2340      	movs	r3, #64	; 0x40
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f82:	2340      	movs	r3, #64	; 0x40
 8000f84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 f916 	bl	80071bc <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf14      	ite	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000fa0:	f000 fd5a 	bl	8001a58 <Error_Handler>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3770      	adds	r7, #112	; 0x70
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	58000400 	.word	0x58000400
 8000fb0:	58024800 	.word	0x58024800

08000fb4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b0      	sub	sp, #192	; 0xc0
 8000fb8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	22c0      	movs	r2, #192	; 0xc0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f010 fc36 	bl	8011832 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000fea:	2320      	movs	r3, #32
 8000fec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000fee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fcab 	bl	8007958 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8001012:	f000 fd21 	bl	8001a58 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	37c0      	adds	r7, #192	; 0xc0
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001046:	4a38      	ldr	r2, [pc, #224]	; (8001128 <_ZL12MX_ADC1_Initv+0x108>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 800105e:	2204      	movs	r2, #4
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001064:	2200      	movs	r2, #0
 8001066:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001068:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 800106a:	2200      	movs	r2, #0
 800106c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001070:	2201      	movs	r2, #1
 8001072:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001076:	2200      	movs	r2, #0
 8001078:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001086:	4b27      	ldr	r3, [pc, #156]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 800108e:	2200      	movs	r2, #0
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a0:	4820      	ldr	r0, [pc, #128]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 80010a2:	f001 fc29 	bl	80028f8 <HAL_ADC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 80010b6:	f000 fccf 	bl	8001a58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 80010c6:	f002 fc91 	bl	80039ec <HAL_ADCEx_MultiModeConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bf14      	ite	ne
 80010d0:	2301      	movne	r3, #1
 80010d2:	2300      	moveq	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80010da:	f000 fcbd 	bl	8001a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <_ZL12MX_ADC1_Initv+0x10c>)
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f0:	2304      	movs	r3, #4
 80010f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <_ZL12MX_ADC1_Initv+0x104>)
 8001102:	f001 ff67 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 8001116:	f000 fc9f 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	240001f8 	.word	0x240001f8
 8001128:	40022000 	.word	0x40022000
 800112c:	4b840000 	.word	0x4b840000

08001130 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <_ZL12MX_ADC2_Initv+0xd8>)
 800114c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001162:	2204      	movs	r2, #4
 8001164:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001168:	2200      	movs	r2, #0
 800116a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 800116e:	2200      	movs	r2, #0
 8001170:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001174:	2201      	movs	r2, #1
 8001176:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 800117a:	2200      	movs	r2, #0
 800117c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 80011a6:	f001 fba7 	bl	80028f8 <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 80011ba:	f000 fc4d 	bl	8001a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <_ZL12MX_ADC2_Initv+0xdc>)
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2306      	movs	r3, #6
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d0:	2304      	movs	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <_ZL12MX_ADC2_Initv+0xd4>)
 80011e2:	f001 fef7 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80011f6:	f000 fc2f 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2400025c 	.word	0x2400025c
 8001208:	40022100 	.word	0x40022100
 800120c:	4fb80000 	.word	0x4fb80000

08001210 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <_ZL12MX_TIM1_Initv+0xc0>)
 8001232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001236:	224a      	movs	r2, #74	; 0x4a
 8001238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001242:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 800125c:	f009 f87a 	bl	800a354 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8001270:	f000 fbf2 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001282:	f009 fc73 	bl	800ab6c <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8001296:	f000 fbdf 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <_ZL12MX_TIM1_Initv+0xbc>)
 80012ac:	f00a f98c 	bl	800b5c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 80012c0:	f000 fbca 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	240002c0 	.word	0x240002c0
 80012d0:	40010000 	.word	0x40010000

080012d4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001310:	224b      	movs	r2, #75	; 0x4b
 8001312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 800131c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001320:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800132e:	4830      	ldr	r0, [pc, #192]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001330:	f009 f810 	bl	800a354 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001344:	f000 fb88 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	4826      	ldr	r0, [pc, #152]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001356:	f009 fc09 	bl	800ab6c <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 800136a:	f000 fb75 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800136e:	4820      	ldr	r0, [pc, #128]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001370:	f009 f8c0 	bl	800a4f4 <HAL_TIM_PWM_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001384:	f000 fb68 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4816      	ldr	r0, [pc, #88]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001398:	f00a f916 	bl	800b5c8 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80013ac:	f000 fb54 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	4619      	mov	r1, r3
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 80013c8:	f009 fabc 	bl	800a944 <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 80013dc:	f000 fb3c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <_ZL12MX_TIM2_Initv+0x11c>)
 80013e2:	f000 fcbf 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 80013e6:	bf00      	nop
 80013e8:	3738      	adds	r7, #56	; 0x38
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2400030c 	.word	0x2400030c

080013f4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 8001428:	4a39      	ldr	r2, [pc, #228]	; (8001510 <_ZL12MX_TIM3_Initv+0x11c>)
 800142a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 800142e:	224b      	movs	r2, #75	; 0x4b
 8001430:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 800143a:	f240 729e 	movw	r2, #1950	; 0x79e
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144c:	482f      	ldr	r0, [pc, #188]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 800144e:	f008 ff81 	bl	800a354 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001462:	f000 faf9 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001470:	4619      	mov	r1, r3
 8001472:	4826      	ldr	r0, [pc, #152]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 8001474:	f009 fb7a 	bl	800ab6c <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001488:	f000 fae6 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800148c:	481f      	ldr	r0, [pc, #124]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 800148e:	f009 f831 	bl	800a4f4 <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80014a2:	f000 fad9 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4815      	ldr	r0, [pc, #84]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 80014b6:	f00a f887 	bl	800b5c8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80014ca:	f000 fac5 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ce:	2360      	movs	r3, #96	; 0x60
 80014d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 80014e6:	f009 fa2d 	bl	800a944 <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf14      	ite	ne
 80014f0:	2301      	movne	r3, #1
 80014f2:	2300      	moveq	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80014fa:	f000 faad 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <_ZL12MX_TIM3_Initv+0x118>)
 8001500:	f000 fc30 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	24000358 	.word	0x24000358
 8001510:	40000400 	.word	0x40000400

08001514 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f010 f985 	bl	8011832 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <_ZL12MX_TIM4_Initv+0xbc>)
 8001536:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 8001546:	f240 221a 	movw	r2, #538	; 0x21a
 800154a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001558:	2303      	movs	r3, #3
 800155a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001560:	2301      	movs	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001570:	2301      	movs	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4812      	ldr	r0, [pc, #72]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 8001584:	f009 f818 	bl	800a5b8 <HAL_TIM_Encoder_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8001598:	f000 fa5e 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <_ZL12MX_TIM4_Initv+0xb8>)
 80015aa:	f00a f80d 	bl	800b5c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf14      	ite	ne
 80015b4:	2301      	movne	r3, #1
 80015b6:	2300      	moveq	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 80015be:	f000 fa4b 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	240003a4 	.word	0x240003a4
 80015d0:	40000800 	.word	0x40000800

080015d4 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	; 0x30
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2224      	movs	r2, #36	; 0x24
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f010 f925 	bl	8011832 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 80015f4:	4a28      	ldr	r2, [pc, #160]	; (8001698 <_ZL12MX_TIM8_Initv+0xc4>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 8001606:	f240 221a 	movw	r2, #538	; 0x21a
 800160a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800161e:	2303      	movs	r3, #3
 8001620:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001636:	2301      	movs	r3, #1
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	4812      	ldr	r0, [pc, #72]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 800164a:	f008 ffb5 	bl	800a5b8 <HAL_TIM_Encoder_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 800165e:	f000 f9fb 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	4619      	mov	r1, r3
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <_ZL12MX_TIM8_Initv+0xc0>)
 8001674:	f009 ffa8 	bl	800b5c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8001688:	f000 f9e6 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	240003f0 	.word	0x240003f0
 8001698:	40010400 	.word	0x40010400

0800169c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016a2:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016e4:	481b      	ldr	r0, [pc, #108]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016e6:	f00a f81b 	bl	800b720 <HAL_UART_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80016fa:	f000 f9ad 	bl	8001a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4814      	ldr	r0, [pc, #80]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001702:	f00b fcdf 	bl	800d0c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001716:	f000 f99f 	bl	8001a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800171e:	f00b fd0f 	bl	800d140 <HAL_UARTEx_SetRxFifoThreshold>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001732:	f000 f991 	bl	8001a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001738:	f00b fc8b 	bl	800d052 <HAL_UARTEx_DisableFifoMode>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 800174c:	f000 f984 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2400043c 	.word	0x2400043c
 8001758:	40004800 	.word	0x40004800

0800175c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001768:	2209      	movs	r2, #9
 800176a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800176e:	2202      	movs	r2, #2
 8001770:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800177a:	2202      	movs	r2, #2
 800177c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001792:	2201      	movs	r2, #1
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001798:	2201      	movs	r2, #1
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80017a4:	f004 fefe 	bl	80065a4 <HAL_PCD_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 80017b8:	f000 f94e 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	240005c0 	.word	0x240005c0
 80017c4:	40080000 	.word	0x40080000

080017c8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_ZL11MX_DMA_Initv+0x4c>)
 80017d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <_ZL11MX_DMA_Initv+0x4c>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <_ZL11MX_DMA_Initv+0x4c>)
 80017e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2105      	movs	r1, #5
 80017f0:	200b      	movs	r0, #11
 80017f2:	f002 fa91 	bl	8003d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017f6:	200b      	movs	r0, #11
 80017f8:	f002 faa8 	bl	8003d4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2105      	movs	r1, #5
 8001800:	200c      	movs	r0, #12
 8001802:	f002 fa89 	bl	8003d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001806:	200c      	movs	r0, #12
 8001808:	f002 faa0 	bl	8003d4c <HAL_NVIC_EnableIRQ>

}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58024400 	.word	0x58024400

08001818 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	4a41      	ldr	r2, [pc, #260]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	4a3a      	ldr	r2, [pc, #232]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a32      	ldr	r2, [pc, #200]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	4a2b      	ldr	r2, [pc, #172]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <_ZL12MX_GPIO_Initv+0x124>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f244 0101 	movw	r1, #16385	; 0x4001
 80018e8:	4815      	ldr	r0, [pc, #84]	; (8001940 <_ZL12MX_GPIO_Initv+0x128>)
 80018ea:	f004 fe13 	bl	8006514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2102      	movs	r1, #2
 80018f2:	4814      	ldr	r0, [pc, #80]	; (8001944 <_ZL12MX_GPIO_Initv+0x12c>)
 80018f4:	f004 fe0e 	bl	8006514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80018f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001902:	2301      	movs	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <_ZL12MX_GPIO_Initv+0x128>)
 8001912:	f004 fc4f 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <_ZL12MX_GPIO_Initv+0x12c>)
 800192e:	f004 fc41 	bl	80061b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	; 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	58024400 	.word	0x58024400
 8001940:	58020400 	.word	0x58020400
 8001944:	58021000 	.word	0x58021000

08001948 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f00c f8ab 	bl	800daac <osDelay>
 8001956:	e7fb      	b.n	8001950 <_Z16StartDefaultTaskPv+0x8>

08001958 <_Z13StartJoystickPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystick */
void StartJoystick(void *argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	ed2d 8b02 	vpush	{d8}
 800195e:	b09e      	sub	sp, #120	; 0x78
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystick */
  Joystick j1(&hadc1, &hadc2);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <_Z13StartJoystickPv+0x70>)
 800196a:	4918      	ldr	r1, [pc, #96]	; (80019cc <_Z13StartJoystickPv+0x74>)
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f917 	bl	8000ba0 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>
  Data data_joystick;
  /* Infinite loop */
  for(;;)
  {
    j1.read();
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f933 	bl	8000be2 <_ZN8Joystick4readEv>
    j1.set_pos();
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f9a7 	bl	8000cd4 <_ZN8Joystick7set_posEv>
    osDelay(10U);
 8001986:	200a      	movs	r0, #10
 8001988:	f00c f890 	bl	800daac <osDelay>
    data_joystick = {j1.get_xPos(), j1.get_yPos()};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9c1 	bl	8000d18 <_ZN8Joystick8get_xPosEv>
 8001996:	eeb0 8a40 	vmov.f32	s16, s0
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f9c9 	bl	8000d36 <_ZN8Joystick8get_yPosEv>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	ed87 8a03 	vstr	s16, [r7, #12]
 80019ac:	edc7 7a04 	vstr	s15, [r7, #16]
    osMessageQueuePut(JoystickQueueHandle,&data_joystick,0, 200);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_Z13StartJoystickPv+0x78>)
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f107 010c 	add.w	r1, r7, #12
 80019b8:	23c8      	movs	r3, #200	; 0xc8
 80019ba:	2200      	movs	r2, #0
 80019bc:	f00c f904 	bl	800dbc8 <osMessageQueuePut>
    osDelay(250U);
 80019c0:	20fa      	movs	r0, #250	; 0xfa
 80019c2:	f00c f873 	bl	800daac <osDelay>
    j1.read();
 80019c6:	e7d4      	b.n	8001972 <_Z13StartJoystickPv+0x1a>
 80019c8:	2400025c 	.word	0x2400025c
 80019cc:	240001f8 	.word	0x240001f8
 80019d0:	24000ad8 	.word	0x24000ad8

080019d4 <_Z12StartChassisPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassis */
void StartChassis(void *argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af04      	add	r7, sp, #16
 80019da:	6078      	str	r0, [r7, #4]
*/
  /* Infinite loop */
  for(;;)
  {

    osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_Z12StartChassisPv+0x50>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	f107 0108 	add.w	r1, r7, #8
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	2200      	movs	r2, #0
 80019ea:	f00c f94d 	bl	800dc88 <osMessageQueueGet>

    motorR.set_reference((reference.x_data * 2) + (reference.y_data*2));
    encR.update();
    motorR.go_to_ref();
*/
    snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", reference.x_data, reference.y_data);
 80019ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f6:	edd7 6a03 	vldr	s13, [r7, #12]
 80019fa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80019fe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001a02:	ed8d 7b00 	vstr	d7, [sp]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <_Z12StartChassisPv+0x54>)
 8001a08:	2132      	movs	r1, #50	; 0x32
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <_Z12StartChassisPv+0x58>)
 8001a0c:	f00f fe7a 	bl	8011704 <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);
 8001a10:	230a      	movs	r3, #10
 8001a12:	2232      	movs	r2, #50	; 0x32
 8001a14:	4905      	ldr	r1, [pc, #20]	; (8001a2c <_Z12StartChassisPv+0x58>)
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <_Z12StartChassisPv+0x5c>)
 8001a18:	f009 fed2 	bl	800b7c0 <HAL_UART_Transmit>

    osDelay(20U);
 8001a1c:	2014      	movs	r0, #20
 8001a1e:	f00c f845 	bl	800daac <osDelay>
    osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);
 8001a22:	e7db      	b.n	80019dc <_Z12StartChassisPv+0x8>
 8001a24:	24000ad8 	.word	0x24000ad8
 8001a28:	08014ea0 	.word	0x08014ea0
 8001a2c:	24000adc 	.word	0x24000adc
 8001a30:	2400043c 	.word	0x2400043c

08001a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a46:	f000 fd25 	bl	8002494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40014800 	.word	0x40014800

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_MspInit+0x38>)
 8001a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_MspInit+0x38>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_MspInit+0x38>)
 8001a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f06f 0001 	mvn.w	r0, #1
 8001a90:	f002 f942 	bl	8003d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58024400 	.word	0x58024400

08001aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a39      	ldr	r2, [pc, #228]	; (8001ba4 <HAL_ADC_MspInit+0x104>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d133      	bne.n	8001b2a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_ADC_MspInit+0x108>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <HAL_ADC_MspInit+0x108>)
 8001aca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_ADC_MspInit+0x108>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d10e      	bne.n	8001af2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	2310      	movs	r3, #16
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <HAL_ADC_MspInit+0x110>)
 8001b24:	f004 fb46 	bl	80061b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b28:	e037      	b.n	8001b9a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <HAL_ADC_MspInit+0x114>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d132      	bne.n	8001b9a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_ADC_MspInit+0x108>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_ADC_MspInit+0x108>)
 8001b3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_ADC_MspInit+0x108>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10e      	bne.n	8001b64 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b4e:	f043 0320 	orr.w	r3, r3, #32
 8001b52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_ADC_MspInit+0x10c>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b82:	2320      	movs	r3, #32
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <HAL_ADC_MspInit+0x110>)
 8001b96:	f004 fb0d 	bl	80061b4 <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3730      	adds	r7, #48	; 0x30
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	24000b10 	.word	0x24000b10
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	58020000 	.word	0x58020000
 8001bb4:	40022100 	.word	0x40022100

08001bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_TIM_Base_MspInit+0x9c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d117      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2105      	movs	r1, #5
 8001bec:	2019      	movs	r0, #25
 8001bee:	f002 f893 	bl	8003d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001bf2:	2019      	movs	r0, #25
 8001bf4:	f002 f8aa 	bl	8003d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bf8:	e028      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d10f      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
}
 8001c22:	e013      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <HAL_TIM_Base_MspInit+0xa4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10e      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c34:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_TIM_Base_MspInit+0xa0>)
 8001c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40010000 	.word	0x40010000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	40000400 	.word	0x40000400

08001c60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12f      	bne.n	8001ce2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 8001cbe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481f      	ldr	r0, [pc, #124]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001cdc:	f004 fa6a 	bl	80061b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ce0:	e032      	b.n	8001d48 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d12d      	bne.n	8001d48 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <HAL_TIM_Encoder_MspInit+0x100>)
 8001d44:	f004 fa36 	bl	80061b4 <HAL_GPIO_Init>
}
 8001d48:	bf00      	nop
 8001d4a:	3730      	adds	r7, #48	; 0x30
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40000800 	.word	0x40000800
 8001d54:	58024400 	.word	0x58024400
 8001d58:	58020c00 	.word	0x58020c00
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	58020800 	.word	0x58020800

08001d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d11f      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001da4:	2301      	movs	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001db4:	2301      	movs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <HAL_TIM_MspPostInit+0xb8>)
 8001dc0:	f004 f9f8 	bl	80061b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dc4:	e023      	b.n	8001e0e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_TIM_MspPostInit+0xbc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d11e      	bne.n	8001e0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8001dee:	2340      	movs	r3, #64	; 0x40
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <HAL_TIM_MspPostInit+0xb8>)
 8001e0a:	f004 f9d3 	bl	80061b4 <HAL_GPIO_Init>
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58020000 	.word	0x58020000
 8001e20:	40000400 	.word	0x40000400

08001e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0ba      	sub	sp, #232	; 0xe8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	22c0      	movs	r2, #192	; 0xc0
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00f fcf4 	bl	8011832 <memset>
  if(huart->Instance==USART3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a59      	ldr	r2, [pc, #356]	; (8001fb4 <HAL_UART_MspInit+0x190>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f040 80aa 	bne.w	8001faa <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e56:	f04f 0202 	mov.w	r2, #2
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f005 fd73 	bl	8007958 <HAL_RCCEx_PeriphCLKConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001e78:	f7ff fdee 	bl	8001a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <HAL_UART_MspInit+0x194>)
 8001e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e82:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <HAL_UART_MspInit+0x194>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_UART_MspInit+0x194>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_UART_MspInit+0x194>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_UART_MspInit+0x194>)
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_UART_MspInit+0x194>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001eb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4837      	ldr	r0, [pc, #220]	; (8001fbc <HAL_UART_MspInit+0x198>)
 8001ee0:	f004 f968 	bl	80061b4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001ee6:	4a37      	ldr	r2, [pc, #220]	; (8001fc4 <HAL_UART_MspInit+0x1a0>)
 8001ee8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001eec:	222d      	movs	r2, #45	; 0x2d
 8001eee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001efc:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f02:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f22:	4827      	ldr	r0, [pc, #156]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f24:	f001 ff20 	bl	8003d68 <HAL_DMA_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001f2e:	f7ff fd93 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f3a:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <HAL_UART_MspInit+0x19c>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f42:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <HAL_UART_MspInit+0x1a8>)
 8001f44:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f48:	222e      	movs	r2, #46	; 0x2e
 8001f4a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f7e:	4812      	ldr	r0, [pc, #72]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f80:	f001 fef2 	bl	8003d68 <HAL_DMA_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001f8a:	f7ff fd65 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f92:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_UART_MspInit+0x1a4>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	2027      	movs	r0, #39	; 0x27
 8001fa0:	f001 feba 	bl	8003d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fa4:	2027      	movs	r0, #39	; 0x27
 8001fa6:	f001 fed1 	bl	8003d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	37e8      	adds	r7, #232	; 0xe8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	240004d0 	.word	0x240004d0
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	24000548 	.word	0x24000548
 8001fcc:	40020028 	.word	0x40020028

08001fd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0ba      	sub	sp, #232	; 0xe8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	22c0      	movs	r2, #192	; 0xc0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00f fc1e 	bl	8011832 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a38      	ldr	r2, [pc, #224]	; (80020dc <HAL_PCD_MspInit+0x10c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d169      	bne.n	80020d4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002000:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8002010:	2312      	movs	r3, #18
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002014:	2302      	movs	r3, #2
 8002016:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8002018:	2303      	movs	r3, #3
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800201c:	2302      	movs	r3, #2
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002020:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002024:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8002026:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800202a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800202c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4618      	mov	r0, r3
 800203a:	f005 fc8d 	bl	8007958 <HAL_RCCEx_PeriphCLKConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8002044:	f7ff fd08 	bl	8001a58 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002048:	f004 fc4e 	bl	80068e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_PCD_MspInit+0x110>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_PCD_MspInit+0x110>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_PCD_MspInit+0x110>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800206a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002084:	230a      	movs	r3, #10
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800208e:	4619      	mov	r1, r3
 8002090:	4814      	ldr	r0, [pc, #80]	; (80020e4 <HAL_PCD_MspInit+0x114>)
 8002092:	f004 f88f 	bl	80061b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020ae:	4619      	mov	r1, r3
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <HAL_PCD_MspInit+0x114>)
 80020b2:	f004 f87f 	bl	80061b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_PCD_MspInit+0x110>)
 80020b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_PCD_MspInit+0x110>)
 80020be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_PCD_MspInit+0x110>)
 80020c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	37e8      	adds	r7, #232	; 0xe8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40080000 	.word	0x40080000
 80020e0:	58024400 	.word	0x58024400
 80020e4:	58020000 	.word	0x58020000

080020e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	; 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b0f      	cmp	r3, #15
 80020f4:	d844      	bhi.n	8002180 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80020f6:	2200      	movs	r2, #0
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	2076      	movs	r0, #118	; 0x76
 80020fc:	f001 fe0c 	bl	8003d18 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002100:	2076      	movs	r0, #118	; 0x76
 8002102:	f001 fe23 	bl	8003d4c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002106:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_InitTick+0xb0>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_InitTick+0xb4>)
 800210e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_InitTick+0xb4>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_InitTick+0xb4>)
 800211e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fbcd 	bl	80078d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800213a:	f005 fbb5 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800213e:	4603      	mov	r3, r0
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <HAL_InitTick+0xb8>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	3b01      	subs	r3, #1
 8002150:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_InitTick+0xbc>)
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <HAL_InitTick+0xc0>)
 8002156:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0xbc>)
 800215a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800215e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002160:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_InitTick+0xbc>)
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_InitTick+0xbc>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_InitTick+0xbc>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002172:	480c      	ldr	r0, [pc, #48]	; (80021a4 <HAL_InitTick+0xbc>)
 8002174:	f008 f8ee 	bl	800a354 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <HAL_InitTick+0xa6>
 800217e:	e001      	b.n	8002184 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e005      	b.n	8002190 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <HAL_InitTick+0xbc>)
 8002186:	f008 f93d 	bl	800a404 <HAL_TIM_Base_Start_IT>
 800218a:	4603      	mov	r3, r0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3738      	adds	r7, #56	; 0x38
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	24000008 	.word	0x24000008
 800219c:	58024400 	.word	0x58024400
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	24000b14 	.word	0x24000b14
 80021a8:	40014800 	.word	0x40014800

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Stream0_IRQHandler+0x10>)
 80021de:	f002 fe83 	bl	8004ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	240004d0 	.word	0x240004d0

080021ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Stream1_IRQHandler+0x10>)
 80021f2:	f002 fe79 	bl	8004ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	24000548 	.word	0x24000548

08002200 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM1_UP_IRQHandler+0x10>)
 8002206:	f008 fa7d 	bl	800a704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	240002c0 	.word	0x240002c0

08002214 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <USART3_IRQHandler+0x10>)
 800221a:	f009 fb5f 	bl	800b8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2400043c 	.word	0x2400043c

08002228 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <TIM17_IRQHandler+0x10>)
 800222e:	f008 fa69 	bl	800a704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	24000b14 	.word	0x24000b14

0800223c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return 1;
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_kill>:

int _kill(int pid, int sig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002256:	f00f fba5 	bl	80119a4 <__errno>
 800225a:	4603      	mov	r3, r0
 800225c:	2216      	movs	r2, #22
 800225e:	601a      	str	r2, [r3, #0]
  return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_exit>:

void _exit (int status)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ffe7 	bl	800224c <_kill>
  while (1) {}    /* Make sure we hang here */
 800227e:	e7fe      	b.n	800227e <_exit+0x12>

08002280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e00a      	b.n	80022a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002292:	f3af 8000 	nop.w
 8002296:	4601      	mov	r1, r0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60ba      	str	r2, [r7, #8]
 800229e:	b2ca      	uxtb	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbf0      	blt.n	8002292 <_read+0x12>
  }

  return len;
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e009      	b.n	80022e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	60ba      	str	r2, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf1      	blt.n	80022cc <_write+0x12>
  }
  return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_close>:

int _close(int file)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231a:	605a      	str	r2, [r3, #4]
  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_isatty>:

int _isatty(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800238c:	f00f fb0a 	bl	80119a4 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	220c      	movs	r2, #12
 8002394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e009      	b.n	80023b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <_sbrk+0x64>)
 80023ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	24080000 	.word	0x24080000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	24000b60 	.word	0x24000b60
 80023c4:	240056a0 	.word	0x240056a0

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023cc:	f7fe fb52 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023d2:	490d      	ldr	r1, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023e8:	4c0a      	ldr	r4, [pc, #40]	; (8002414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f6:	f00f fadb 	bl	80119b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7fe fcab 	bl	8000d54 <main>
  bx  lr
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002404:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002408:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 800240c:	080153d0 	.word	0x080153d0
  ldr r2, =_sbss
 8002410:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002414:	2400569c 	.word	0x2400569c

08002418 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC3_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002422:	2003      	movs	r0, #3
 8002424:	f001 fc6d 	bl	8003d02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002428:	f005 f87e 	bl	8007528 <HAL_RCC_GetSysClockFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_Init+0x68>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	4913      	ldr	r1, [pc, #76]	; (8002488 <HAL_Init+0x6c>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_Init+0x68>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_Init+0x6c>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_Init+0x70>)
 800245e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_Init+0x74>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002466:	200f      	movs	r0, #15
 8002468:	f7ff fe3e 	bl	80020e8 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e002      	b.n	800247c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002476:	f7ff faf5 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	58024400 	.word	0x58024400
 8002488:	08014ed4 	.word	0x08014ed4
 800248c:	24000004 	.word	0x24000004
 8002490:	24000000 	.word	0x24000000

08002494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x20>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x24>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_IncTick+0x24>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	2400000c 	.word	0x2400000c
 80024b8:	24000b64 	.word	0x24000b64

080024bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_GetTick+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	24000b64 	.word	0x24000b64

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff ffee 	bl	80024bc <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d005      	beq.n	80024fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_Delay+0x44>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024fa:	bf00      	nop
 80024fc:	f7ff ffde 	bl	80024bc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8f7      	bhi.n	80024fc <HAL_Delay+0x28>
  {
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2400000c 	.word	0x2400000c

0800251c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_GetREVID+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0c1b      	lsrs	r3, r3, #16
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	5c001000 	.word	0x5c001000

08002534 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	609a      	str	r2, [r3, #8]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	611a      	str	r2, [r3, #16]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
  }
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3330      	adds	r3, #48	; 0x30
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	211f      	movs	r1, #31
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 011f 	and.w	r1, r3, #31
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b087      	sub	sp, #28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3314      	adds	r3, #20
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0e5b      	lsrs	r3, r3, #25
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0d1b      	lsrs	r3, r3, #20
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2107      	movs	r1, #7
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	0d1b      	lsrs	r3, r3, #20
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	431a      	orrs	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0318 	and.w	r3, r3, #24
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <LL_ADC_SetChannelSingleDiff+0x44>)
 800273c:	40d9      	lsrs	r1, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	400b      	ands	r3, r1
 8002742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	000fffff 	.word	0x000fffff

08002760 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6093      	str	r3, [r2, #8]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	5fffffc0 	.word	0x5fffffc0

080027bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <LL_ADC_EnableInternalRegulator+0x24>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	6fffffc0 	.word	0x6fffffc0

0800280c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002820:	d101      	bne.n	8002826 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <LL_ADC_Enable+0x24>)
 8002842:	4013      	ands	r3, r2
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	7fffffc0 	.word	0x7fffffc0

0800285c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <LL_ADC_IsEnabled+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_ADC_IsEnabled+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <LL_ADC_REG_StartConversion+0x24>)
 8002892:	4013      	ands	r3, r2
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	7fffffc0 	.word	0x7fffffc0

080028ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d101      	bne.n	80028c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d101      	bne.n	80028ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e18f      	b.n	8002c32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff f8bd 	bl	8001aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff3f 	bl	80027bc <LL_ADC_IsDeepPowerDownEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff25 	bl	8002798 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff5a 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d114      	bne.n	8002988 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff3e 	bl	80027e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002968:	4b87      	ldr	r3, [pc, #540]	; (8002b88 <HAL_ADC_Init+0x290>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	4a87      	ldr	r2, [pc, #540]	; (8002b8c <HAL_ADC_Init+0x294>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	3301      	adds	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800297a:	e002      	b.n	8002982 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3b01      	subs	r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff3d 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10d      	bne.n	80029b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff77 	bl	80028ac <LL_ADC_REG_IsConversionOngoing>
 80029be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 8129 	bne.w	8002c20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 8125 	bne.w	8002c20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff36 	bl	800285c <LL_ADC_IsEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d136      	bne.n	8002a64 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <HAL_ADC_Init+0x298>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_Init+0x112>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a63      	ldr	r2, [pc, #396]	; (8002b94 <HAL_ADC_Init+0x29c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10e      	bne.n	8002a28 <HAL_ADC_Init+0x130>
 8002a0a:	4861      	ldr	r0, [pc, #388]	; (8002b90 <HAL_ADC_Init+0x298>)
 8002a0c:	f7ff ff26 	bl	800285c <LL_ADC_IsEnabled>
 8002a10:	4604      	mov	r4, r0
 8002a12:	4860      	ldr	r0, [pc, #384]	; (8002b94 <HAL_ADC_Init+0x29c>)
 8002a14:	f7ff ff22 	bl	800285c <LL_ADC_IsEnabled>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e008      	b.n	8002a3a <HAL_ADC_Init+0x142>
 8002a28:	485b      	ldr	r0, [pc, #364]	; (8002b98 <HAL_ADC_Init+0x2a0>)
 8002a2a:	f7ff ff17 	bl	800285c <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <HAL_ADC_Init+0x298>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_Init+0x15a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a51      	ldr	r2, [pc, #324]	; (8002b94 <HAL_ADC_Init+0x29c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Init+0x15e>
 8002a52:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_ADC_Init+0x2a4>)
 8002a54:	e000      	b.n	8002a58 <HAL_ADC_Init+0x160>
 8002a56:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_ADC_Init+0x2a8>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f7ff fd68 	bl	8002534 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a64:	f7ff fd5a 	bl	800251c <HAL_GetREVID>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d914      	bls.n	8002a9c <HAL_ADC_Init+0x1a4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d110      	bne.n	8002a9c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7d5b      	ldrb	r3, [r3, #21]
 8002a7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7f1b      	ldrb	r3, [r3, #28]
 8002a90:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a92:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a94:	f043 030c 	orr.w	r3, r3, #12
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e00d      	b.n	8002ab8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7d5b      	ldrb	r3, [r3, #21]
 8002aa0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aa6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002aac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7f1b      	ldrb	r3, [r3, #28]
 8002ab2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7f1b      	ldrb	r3, [r3, #28]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	045b      	lsls	r3, r3, #17
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_ADC_Init+0x2ac>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fed2 	bl	80028ac <LL_ADC_REG_IsConversionOngoing>
 8002b08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fedf 	bl	80028d2 <LL_ADC_INJ_IsConversionOngoing>
 8002b14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d15f      	bne.n	8002bdc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d15c      	bne.n	8002bdc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7d1b      	ldrb	r3, [r3, #20]
 8002b26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_ADC_Init+0x2b0>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d130      	bne.n	8002bb0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_ADC_Init+0x2b4>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b62:	3a01      	subs	r2, #1
 8002b64:	0411      	lsls	r1, r2, #16
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b76:	430a      	orrs	r2, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	e01c      	b.n	8002bc0 <HAL_ADC_Init+0x2c8>
 8002b86:	bf00      	nop
 8002b88:	24000000 	.word	0x24000000
 8002b8c:	053e2d63 	.word	0x053e2d63
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40022100 	.word	0x40022100
 8002b98:	58026000 	.word	0x58026000
 8002b9c:	40022300 	.word	0x40022300
 8002ba0:	58026300 	.word	0x58026300
 8002ba4:	fff0c003 	.word	0xfff0c003
 8002ba8:	ffffbffc 	.word	0xffffbffc
 8002bac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fdd6 	bl	8003788 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10c      	bne.n	8002bfe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f023 010f 	bic.w	r1, r3, #15
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfc:	e007      	b.n	8002c0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 020f 	bic.w	r2, r2, #15
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
 8002c1e:	e007      	b.n	8002c30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop

08002c3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5c      	ldr	r2, [pc, #368]	; (8002dbc <HAL_ADC_Start+0x180>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADC_Start+0x1c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5b      	ldr	r2, [pc, #364]	; (8002dc0 <HAL_ADC_Start+0x184>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_ADC_Start+0x20>
 8002c58:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <HAL_ADC_Start+0x188>)
 8002c5a:	e000      	b.n	8002c5e <HAL_ADC_Start+0x22>
 8002c5c:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_ADC_Start+0x18c>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fd7e 	bl	8002760 <LL_ADC_GetMultimode>
 8002c64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fe1e 	bl	80028ac <LL_ADC_REG_IsConversionOngoing>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 809a 	bne.w	8002dac <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Start+0x4a>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e095      	b.n	8002db2 <HAL_ADC_Start+0x176>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fcf0 	bl	8003674 <ADC_Enable>
 8002c94:	4603      	mov	r3, r0
 8002c96:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 8081 	bne.w	8002da2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_ADC_Start+0x190>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_ADC_Start+0x184>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_Start+0x84>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADC_Start+0x86>
 8002cc0:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <HAL_ADC_Start+0x180>)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d002      	beq.n	8002cd0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f023 0206 	bic.w	r2, r3, #6
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58
 8002cf6:	e002      	b.n	8002cfe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	221c      	movs	r2, #28
 8002d04:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <HAL_ADC_Start+0x184>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d002      	beq.n	8002d1e <HAL_ADC_Start+0xe2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	e000      	b.n	8002d20 <HAL_ADC_Start+0xe4>
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <HAL_ADC_Start+0x180>)
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d008      	beq.n	8002d3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d002      	beq.n	8002d3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	d114      	bne.n	8002d64 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fd91 	bl	8002884 <LL_ADC_REG_StartConversion>
 8002d62:	e025      	b.n	8002db0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <HAL_ADC_Start+0x184>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d002      	beq.n	8002d80 <HAL_ADC_Start+0x144>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	e000      	b.n	8002d82 <HAL_ADC_Start+0x146>
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_ADC_Start+0x180>)
 8002d82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8002da0:	e006      	b.n	8002db0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002daa:	e001      	b.n	8002db0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
 8002dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40022100 	.word	0x40022100
 8002dc4:	40022300 	.word	0x40022300
 8002dc8:	58026300 	.word	0x58026300
 8002dcc:	fffff0fe 	.word	0xfffff0fe

08002dd0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a72      	ldr	r2, [pc, #456]	; (8002fa8 <HAL_ADC_PollForConversion+0x1d8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_PollForConversion+0x1e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a70      	ldr	r2, [pc, #448]	; (8002fac <HAL_ADC_PollForConversion+0x1dc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_PollForConversion+0x22>
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_ADC_PollForConversion+0x1e0>)
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_PollForConversion+0x24>
 8002df2:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_ADC_PollForConversion+0x1e4>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fcb3 	bl	8002760 <LL_ADC_GetMultimode>
 8002dfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d102      	bne.n	8002e0a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e04:	2308      	movs	r3, #8
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	e037      	b.n	8002e7a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d002      	beq.n	8002e1c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d111      	bne.n	8002e40 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0b1      	b.n	8002f9e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002e3e:	e01c      	b.n	8002e7a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a58      	ldr	r2, [pc, #352]	; (8002fa8 <HAL_ADC_PollForConversion+0x1d8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_ADC_PollForConversion+0x84>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a57      	ldr	r2, [pc, #348]	; (8002fac <HAL_ADC_PollForConversion+0x1dc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_PollForConversion+0x88>
 8002e54:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <HAL_ADC_PollForConversion+0x1e0>)
 8002e56:	e000      	b.n	8002e5a <HAL_ADC_PollForConversion+0x8a>
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_ADC_PollForConversion+0x1e4>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fc8e 	bl	800277c <LL_ADC_GetMultiDMATransfer>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e093      	b.n	8002f9e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e76:	2304      	movs	r3, #4
 8002e78:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e7a:	f7ff fb1f 	bl	80024bc <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e80:	e021      	b.n	8002ec6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d01d      	beq.n	8002ec6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e8a:	f7ff fb17 	bl	80024bc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <HAL_ADC_PollForConversion+0xd0>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d112      	bne.n	8002ec6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f043 0204 	orr.w	r2, r3, #4
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e06b      	b.n	8002f9e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0d6      	beq.n	8002e82 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fbad 	bl	8002644 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7d5b      	ldrb	r3, [r3, #21]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d118      	bne.n	8002f2a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d111      	bne.n	8002f2a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_ADC_PollForConversion+0x1dc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d002      	beq.n	8002f3a <HAL_ADC_PollForConversion+0x16a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e000      	b.n	8002f3c <HAL_ADC_PollForConversion+0x16c>
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_ADC_PollForConversion+0x1d8>)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d008      	beq.n	8002f56 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d002      	beq.n	8002f56 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d104      	bne.n	8002f60 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	e00c      	b.n	8002f7a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_ADC_PollForConversion+0x1dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d002      	beq.n	8002f70 <HAL_ADC_PollForConversion+0x1a0>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_PollForConversion+0x1a2>
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_ADC_PollForConversion+0x1d8>)
 8002f72:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d104      	bne.n	8002f8a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2208      	movs	r2, #8
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e008      	b.n	8002f9c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	220c      	movs	r2, #12
 8002f9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40022100 	.word	0x40022100
 8002fb0:	40022300 	.word	0x40022300
 8002fb4:	58026300 	.word	0x58026300

08002fb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b0a1      	sub	sp, #132	; 0x84
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a9d      	ldr	r2, [pc, #628]	; (8003264 <HAL_ADC_ConfigChannel+0x290>)
 8002fee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x2a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e321      	b.n	8003642 <HAL_ADC_ConfigChannel+0x66e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fc4e 	bl	80028ac <LL_ADC_REG_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8306 	bne.w	8003624 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x62>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2201      	movs	r2, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	e016      	b.n	8003064 <HAL_ADC_ConfigChannel+0x90>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003046:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2201      	movs	r2, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	69d1      	ldr	r1, [r2, #28]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	430b      	orrs	r3, r1
 8003070:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	f7ff faf3 	bl	800266a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fc0f 	bl	80028ac <LL_ADC_REG_IsConversionOngoing>
 800308e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fc1c 	bl	80028d2 <LL_ADC_INJ_IsConversionOngoing>
 800309a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800309c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80b3 	bne.w	800320a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80af 	bne.w	800320a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	461a      	mov	r2, r3
 80030ba:	f7ff fb02 	bl	80026c2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030be:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_ADC_ConfigChannel+0x294>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ca:	d10b      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x110>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	e01d      	b.n	8003120 <HAL_ADC_ConfigChannel+0x14c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_ADC_ConfigChannel+0x136>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	e00a      	b.n	8003120 <HAL_ADC_ConfigChannel+0x14c>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d027      	beq.n	800317a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6919      	ldr	r1, [r3, #16]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003138:	f7ff fa30 	bl	800259c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6919      	ldr	r1, [r3, #16]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	7e5b      	ldrb	r3, [r3, #25]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d102      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x17e>
 800314c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003150:	e000      	b.n	8003154 <HAL_ADC_ConfigChannel+0x180>
 8003152:	2300      	movs	r3, #0
 8003154:	461a      	mov	r2, r3
 8003156:	f7ff fa5a 	bl	800260e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	7e1b      	ldrb	r3, [r3, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d102      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x19c>
 800316a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800316e:	e000      	b.n	8003172 <HAL_ADC_ConfigChannel+0x19e>
 8003170:	2300      	movs	r3, #0
 8003172:	461a      	mov	r2, r3
 8003174:	f7ff fa32 	bl	80025dc <LL_ADC_SetDataRightShift>
 8003178:	e047      	b.n	800320a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	429a      	cmp	r2, r3
 800318c:	d107      	bne.n	800319e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800319c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	069b      	lsls	r3, r3, #26
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d107      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031c0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	069b      	lsls	r3, r3, #26
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d107      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031e4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	069b      	lsls	r3, r3, #26
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d107      	bne.n	800320a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003208:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fb24 	bl	800285c <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 820d 	bne.w	8003636 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	461a      	mov	r2, r3
 800322a:	f7ff fa75 	bl	8002718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_ADC_ConfigChannel+0x290>)
 8003234:	4293      	cmp	r3, r2
 8003236:	f040 8133 	bne.w	80034a0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003246:	2b00      	cmp	r3, #0
 8003248:	d110      	bne.n	800326c <HAL_ADC_ConfigChannel+0x298>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e9b      	lsrs	r3, r3, #26
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2b09      	cmp	r3, #9
 8003258:	bf94      	ite	ls
 800325a:	2301      	movls	r3, #1
 800325c:	2300      	movhi	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e01e      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x2cc>
 8003262:	bf00      	nop
 8003264:	47ff0000 	.word	0x47ff0000
 8003268:	5c001000 	.word	0x5c001000
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800327e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e003      	b.n	8003290 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2b09      	cmp	r3, #9
 8003298:	bf94      	ite	ls
 800329a:	2301      	movls	r3, #1
 800329c:	2300      	movhi	r3, #0
 800329e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d079      	beq.n	8003398 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x2ec>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	069b      	lsls	r3, r3, #26
 80032ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	e015      	b.n	80032ec <HAL_ADC_ConfigChannel+0x318>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	069b      	lsls	r3, r3, #26
 80032e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_ADC_ConfigChannel+0x338>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	e017      	b.n	800333c <HAL_ADC_ConfigChannel+0x368>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800331e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e003      	b.n	8003330 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x38e>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	051b      	lsls	r3, r3, #20
 8003360:	e018      	b.n	8003394 <HAL_ADC_ConfigChannel+0x3c0>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003394:	430b      	orrs	r3, r1
 8003396:	e07e      	b.n	8003496 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x3e0>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	3301      	adds	r3, #1
 80033ac:	069b      	lsls	r3, r3, #26
 80033ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b2:	e015      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x40c>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e003      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x42c>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	e017      	b.n	8003430 <HAL_ADC_ConfigChannel+0x45c>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	61bb      	str	r3, [r7, #24]
  return result;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	ea42 0103 	orr.w	r1, r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_ADC_ConfigChannel+0x488>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	3301      	adds	r3, #1
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	3b1e      	subs	r3, #30
 8003454:	051b      	lsls	r3, r3, #20
 8003456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800345a:	e01b      	b.n	8003494 <HAL_ADC_ConfigChannel+0x4c0>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	60fb      	str	r3, [r7, #12]
  return result;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f003 021f 	and.w	r2, r3, #31
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	3b1e      	subs	r3, #30
 800348e:	051b      	lsls	r3, r3, #20
 8003490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003494:	430b      	orrs	r3, r1
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	6892      	ldr	r2, [r2, #8]
 800349a:	4619      	mov	r1, r3
 800349c:	f7ff f911 	bl	80026c2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f280 80c6 	bge.w	8003636 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_ADC_ConfigChannel+0x678>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_ADC_ConfigChannel+0x4ea>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <HAL_ADC_ConfigChannel+0x67c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x4ee>
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_ADC_ConfigChannel+0x680>)
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x4f0>
 80034c2:	4b65      	ldr	r3, [pc, #404]	; (8003658 <HAL_ADC_ConfigChannel+0x684>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff f85b 	bl	8002580 <LL_ADC_GetCommonPathInternalCh>
 80034ca:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5e      	ldr	r2, [pc, #376]	; (800364c <HAL_ADC_ConfigChannel+0x678>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_ADC_ConfigChannel+0x50c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_ADC_ConfigChannel+0x67c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10e      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x52a>
 80034e0:	485a      	ldr	r0, [pc, #360]	; (800364c <HAL_ADC_ConfigChannel+0x678>)
 80034e2:	f7ff f9bb 	bl	800285c <LL_ADC_IsEnabled>
 80034e6:	4604      	mov	r4, r0
 80034e8:	4859      	ldr	r0, [pc, #356]	; (8003650 <HAL_ADC_ConfigChannel+0x67c>)
 80034ea:	f7ff f9b7 	bl	800285c <LL_ADC_IsEnabled>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4323      	orrs	r3, r4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e008      	b.n	8003510 <HAL_ADC_ConfigChannel+0x53c>
 80034fe:	4857      	ldr	r0, [pc, #348]	; (800365c <HAL_ADC_ConfigChannel+0x688>)
 8003500:	f7ff f9ac 	bl	800285c <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d07d      	beq.n	8003610 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a51      	ldr	r2, [pc, #324]	; (8003660 <HAL_ADC_ConfigChannel+0x68c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d130      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x5ac>
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d12b      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_ADC_ConfigChannel+0x688>)
 800352e:	4293      	cmp	r3, r2
 8003530:	f040 8081 	bne.w	8003636 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a44      	ldr	r2, [pc, #272]	; (800364c <HAL_ADC_ConfigChannel+0x678>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x574>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a43      	ldr	r2, [pc, #268]	; (8003650 <HAL_ADC_ConfigChannel+0x67c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x578>
 8003548:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_ADC_ConfigChannel+0x680>)
 800354a:	e000      	b.n	800354e <HAL_ADC_ConfigChannel+0x57a>
 800354c:	4a42      	ldr	r2, [pc, #264]	; (8003658 <HAL_ADC_ConfigChannel+0x684>)
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f7fe ffff 	bl	800255a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355c:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_ADC_ConfigChannel+0x690>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	4a41      	ldr	r2, [pc, #260]	; (8003668 <HAL_ADC_ConfigChannel+0x694>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003570:	e002      	b.n	8003578 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3b01      	subs	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800357e:	e05a      	b.n	8003636 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a39      	ldr	r2, [pc, #228]	; (800366c <HAL_ADC_ConfigChannel+0x698>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d11e      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x5f4>
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d119      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_ADC_ConfigChannel+0x688>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d14b      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2a      	ldr	r2, [pc, #168]	; (800364c <HAL_ADC_ConfigChannel+0x678>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x5de>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a28      	ldr	r2, [pc, #160]	; (8003650 <HAL_ADC_ConfigChannel+0x67c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x5e2>
 80035b2:	4a28      	ldr	r2, [pc, #160]	; (8003654 <HAL_ADC_ConfigChannel+0x680>)
 80035b4:	e000      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x5e4>
 80035b6:	4a28      	ldr	r2, [pc, #160]	; (8003658 <HAL_ADC_ConfigChannel+0x684>)
 80035b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe ffca 	bl	800255a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c6:	e036      	b.n	8003636 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <HAL_ADC_ConfigChannel+0x69c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d131      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x662>
 80035d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d12c      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_ADC_ConfigChannel+0x688>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d127      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_ADC_ConfigChannel+0x678>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_ADC_ConfigChannel+0x626>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_ADC_ConfigChannel+0x67c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x62a>
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <HAL_ADC_ConfigChannel+0x680>)
 80035fc:	e000      	b.n	8003600 <HAL_ADC_ConfigChannel+0x62c>
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <HAL_ADC_ConfigChannel+0x684>)
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fe ffa6 	bl	800255a <LL_ADC_SetCommonPathInternalCh>
 800360e:	e012      	b.n	8003636 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003622:	e008      	b.n	8003636 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800363e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003642:	4618      	mov	r0, r3
 8003644:	3784      	adds	r7, #132	; 0x84
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}
 800364a:	bf00      	nop
 800364c:	40022000 	.word	0x40022000
 8003650:	40022100 	.word	0x40022100
 8003654:	40022300 	.word	0x40022300
 8003658:	58026300 	.word	0x58026300
 800365c:	58026000 	.word	0x58026000
 8003660:	cb840000 	.word	0xcb840000
 8003664:	24000000 	.word	0x24000000
 8003668:	053e2d63 	.word	0x053e2d63
 800366c:	c7520000 	.word	0xc7520000
 8003670:	cfb80000 	.word	0xcfb80000

08003674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f8eb 	bl	800285c <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d16e      	bne.n	800376a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <ADC_Enable+0x100>)
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f043 0210 	orr.w	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e05a      	b.n	800376c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f8ba 	bl	8002834 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fefc 	bl	80024bc <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <ADC_Enable+0x104>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <ADC_Enable+0x66>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <ADC_Enable+0x108>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <ADC_Enable+0x6a>
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <ADC_Enable+0x10c>)
 80036dc:	e000      	b.n	80036e0 <ADC_Enable+0x6c>
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <ADC_Enable+0x110>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f83d 	bl	8002760 <LL_ADC_GetMultimode>
 80036e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <ADC_Enable+0x108>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d002      	beq.n	80036f8 <ADC_Enable+0x84>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	e000      	b.n	80036fa <ADC_Enable+0x86>
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <ADC_Enable+0x104>)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02c      	beq.n	800375c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d130      	bne.n	800376a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003708:	e028      	b.n	800375c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f8a4 	bl	800285c <LL_ADC_IsEnabled>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff f888 	bl	8002834 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003724:	f7fe feca 	bl	80024bc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d914      	bls.n	800375c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d00d      	beq.n	800375c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d1cf      	bne.n	800370a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	8000003f 	.word	0x8000003f
 8003778:	40022000 	.word	0x40022000
 800377c:	40022100 	.word	0x40022100
 8003780:	40022300 	.word	0x40022300
 8003784:	58026300 	.word	0x58026300

08003788 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7a      	ldr	r2, [pc, #488]	; (8003980 <ADC_ConfigureBoostMode+0x1f8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <ADC_ConfigureBoostMode+0x1c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a79      	ldr	r2, [pc, #484]	; (8003984 <ADC_ConfigureBoostMode+0x1fc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d109      	bne.n	80037b8 <ADC_ConfigureBoostMode+0x30>
 80037a4:	4b78      	ldr	r3, [pc, #480]	; (8003988 <ADC_ConfigureBoostMode+0x200>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e008      	b.n	80037ca <ADC_ConfigureBoostMode+0x42>
 80037b8:	4b74      	ldr	r3, [pc, #464]	; (800398c <ADC_ConfigureBoostMode+0x204>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01c      	beq.n	8003808 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037ce:	f004 f825 	bl	800781c <HAL_RCC_GetHCLKFreq>
 80037d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037dc:	d010      	beq.n	8003800 <ADC_ConfigureBoostMode+0x78>
 80037de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037e2:	d873      	bhi.n	80038cc <ADC_ConfigureBoostMode+0x144>
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d002      	beq.n	80037f0 <ADC_ConfigureBoostMode+0x68>
 80037ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ee:	d16d      	bne.n	80038cc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	60fb      	str	r3, [r7, #12]
        break;
 80037fe:	e068      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	60fb      	str	r3, [r7, #12]
        break;
 8003806:	e064      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003808:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	f005 faac 	bl	8008d6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003814:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800381e:	d051      	beq.n	80038c4 <ADC_ConfigureBoostMode+0x13c>
 8003820:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003824:	d854      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 8003826:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800382a:	d047      	beq.n	80038bc <ADC_ConfigureBoostMode+0x134>
 800382c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003830:	d84e      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 8003832:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003836:	d03d      	beq.n	80038b4 <ADC_ConfigureBoostMode+0x12c>
 8003838:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800383c:	d848      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 800383e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003842:	d033      	beq.n	80038ac <ADC_ConfigureBoostMode+0x124>
 8003844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003848:	d842      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 800384a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800384e:	d029      	beq.n	80038a4 <ADC_ConfigureBoostMode+0x11c>
 8003850:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003854:	d83c      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 8003856:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800385a:	d01a      	beq.n	8003892 <ADC_ConfigureBoostMode+0x10a>
 800385c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003860:	d836      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 8003862:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003866:	d014      	beq.n	8003892 <ADC_ConfigureBoostMode+0x10a>
 8003868:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800386c:	d830      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003872:	d00e      	beq.n	8003892 <ADC_ConfigureBoostMode+0x10a>
 8003874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003878:	d82a      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 800387a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800387e:	d008      	beq.n	8003892 <ADC_ConfigureBoostMode+0x10a>
 8003880:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003884:	d824      	bhi.n	80038d0 <ADC_ConfigureBoostMode+0x148>
 8003886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800388a:	d002      	beq.n	8003892 <ADC_ConfigureBoostMode+0x10a>
 800388c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003890:	d11e      	bne.n	80038d0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0c9b      	lsrs	r3, r3, #18
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	60fb      	str	r3, [r7, #12]
        break;
 80038a2:	e016      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
        break;
 80038aa:	e012      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	60fb      	str	r3, [r7, #12]
        break;
 80038b2:	e00e      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	60fb      	str	r3, [r7, #12]
        break;
 80038ba:	e00a      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	09db      	lsrs	r3, r3, #7
 80038c0:	60fb      	str	r3, [r7, #12]
        break;
 80038c2:	e006      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	60fb      	str	r3, [r7, #12]
        break;
 80038ca:	e002      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80038d0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80038d2:	f7fe fe23 	bl	800251c <HAL_GetREVID>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80038dc:	4293      	cmp	r3, r2
 80038de:	d815      	bhi.n	800390c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <ADC_ConfigureBoostMode+0x208>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d908      	bls.n	80038fa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038f8:	e03e      	b.n	8003978 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	609a      	str	r2, [r3, #8]
}
 800390a:	e035      	b.n	8003978 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <ADC_ConfigureBoostMode+0x20c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d808      	bhi.n	800392c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003928:	609a      	str	r2, [r3, #8]
}
 800392a:	e025      	b.n	8003978 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <ADC_ConfigureBoostMode+0x210>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d80a      	bhi.n	800394a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	e016      	b.n	8003978 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <ADC_ConfigureBoostMode+0x214>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d80a      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	e007      	b.n	8003978 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40022000 	.word	0x40022000
 8003984:	40022100 	.word	0x40022100
 8003988:	40022300 	.word	0x40022300
 800398c:	58026300 	.word	0x58026300
 8003990:	01312d00 	.word	0x01312d00
 8003994:	005f5e10 	.word	0x005f5e10
 8003998:	00bebc20 	.word	0x00bebc20
 800399c:	017d7840 	.word	0x017d7840

080039a0 <LL_ADC_IsEnabled>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <LL_ADC_IsEnabled+0x18>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <LL_ADC_IsEnabled+0x1a>
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d101      	bne.n	80039de <LL_ADC_REG_IsConversionOngoing+0x18>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b09f      	sub	sp, #124	; 0x7c
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0be      	b.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5c      	ldr	r2, [pc, #368]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d102      	bne.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e001      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e09d      	b.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ffb9 	bl	80039c6 <LL_ADC_REG_IsConversionOngoing>
 8003a54:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ffb3 	bl	80039c6 <LL_ADC_REG_IsConversionOngoing>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d17f      	bne.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d17c      	bne.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a47      	ldr	r2, [pc, #284]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a46      	ldr	r2, [pc, #280]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a80:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a82:	e000      	b.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a84:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a86:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d039      	beq.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a38      	ldr	r2, [pc, #224]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003ab6:	4836      	ldr	r0, [pc, #216]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ab8:	f7ff ff72 	bl	80039a0 <LL_ADC_IsEnabled>
 8003abc:	4604      	mov	r4, r0
 8003abe:	4835      	ldr	r0, [pc, #212]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ac0:	f7ff ff6e 	bl	80039a0 <LL_ADC_IsEnabled>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4323      	orrs	r3, r4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e008      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ad4:	4832      	ldr	r0, [pc, #200]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ad6:	f7ff ff63 	bl	80039a0 <LL_ADC_IsEnabled>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d047      	beq.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b02:	e03a      	b.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10e      	bne.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003b24:	481a      	ldr	r0, [pc, #104]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b26:	f7ff ff3b 	bl	80039a0 <LL_ADC_IsEnabled>
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4819      	ldr	r0, [pc, #100]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b2e:	f7ff ff37 	bl	80039a0 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4323      	orrs	r3, r4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	e008      	b.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b42:	4817      	ldr	r0, [pc, #92]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b44:	f7ff ff2c 	bl	80039a0 <LL_ADC_IsEnabled>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b62:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b64:	e009      	b.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b78:	e000      	b.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	377c      	adds	r7, #124	; 0x7c
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	40022000 	.word	0x40022000
 8003b94:	40022100 	.word	0x40022100
 8003b98:	40022300 	.word	0x40022300
 8003b9c:	58026300 	.word	0x58026300
 8003ba0:	58026000 	.word	0x58026000
 8003ba4:	fffff0e0 	.word	0xfffff0e0

08003ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <__NVIC_SetPriorityGrouping+0x40>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <__NVIC_SetPriorityGrouping+0x40>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00
 8003bec:	05fa0000 	.word	0x05fa0000

08003bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 0307 	and.w	r3, r3, #7
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	db0b      	blt.n	8003c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4907      	ldr	r1, [pc, #28]	; (8003c44 <__NVIC_EnableIRQ+0x38>)
 8003c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000e100 	.word	0xe000e100

08003c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	db0a      	blt.n	8003c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	490c      	ldr	r1, [pc, #48]	; (8003c94 <__NVIC_SetPriority+0x4c>)
 8003c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c70:	e00a      	b.n	8003c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <__NVIC_SetPriority+0x50>)
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	440b      	add	r3, r1
 8003c86:	761a      	strb	r2, [r3, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000e100 	.word	0xe000e100
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f1c3 0307 	rsb	r3, r3, #7
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf28      	it	cs
 8003cba:	2304      	movcs	r3, #4
 8003cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d902      	bls.n	8003ccc <NVIC_EncodePriority+0x30>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3b03      	subs	r3, #3
 8003cca:	e000      	b.n	8003cce <NVIC_EncodePriority+0x32>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43d9      	mvns	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	4313      	orrs	r3, r2
         );
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3724      	adds	r7, #36	; 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff4c 	bl	8003ba8 <__NVIC_SetPriorityGrouping>
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d26:	f7ff ff63 	bl	8003bf0 <__NVIC_GetPriorityGrouping>
 8003d2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	6978      	ldr	r0, [r7, #20]
 8003d32:	f7ff ffb3 	bl	8003c9c <NVIC_EncodePriority>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff ff82 	bl	8003c48 <__NVIC_SetPriority>
}
 8003d44:	bf00      	nop
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff56 	bl	8003c0c <__NVIC_EnableIRQ>
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7fe fba4 	bl	80024bc <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e316      	b.n	80043ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a66      	ldr	r2, [pc, #408]	; (8003f20 <HAL_DMA_Init+0x1b8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04a      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a65      	ldr	r2, [pc, #404]	; (8003f24 <HAL_DMA_Init+0x1bc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d045      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a63      	ldr	r2, [pc, #396]	; (8003f28 <HAL_DMA_Init+0x1c0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a62      	ldr	r2, [pc, #392]	; (8003f2c <HAL_DMA_Init+0x1c4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d03b      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a60      	ldr	r2, [pc, #384]	; (8003f30 <HAL_DMA_Init+0x1c8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d036      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5f      	ldr	r2, [pc, #380]	; (8003f34 <HAL_DMA_Init+0x1cc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d031      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5d      	ldr	r2, [pc, #372]	; (8003f38 <HAL_DMA_Init+0x1d0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02c      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a5c      	ldr	r2, [pc, #368]	; (8003f3c <HAL_DMA_Init+0x1d4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d027      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5a      	ldr	r2, [pc, #360]	; (8003f40 <HAL_DMA_Init+0x1d8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d022      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a59      	ldr	r2, [pc, #356]	; (8003f44 <HAL_DMA_Init+0x1dc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01d      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a57      	ldr	r2, [pc, #348]	; (8003f48 <HAL_DMA_Init+0x1e0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a56      	ldr	r2, [pc, #344]	; (8003f4c <HAL_DMA_Init+0x1e4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a54      	ldr	r2, [pc, #336]	; (8003f50 <HAL_DMA_Init+0x1e8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a53      	ldr	r2, [pc, #332]	; (8003f54 <HAL_DMA_Init+0x1ec>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a51      	ldr	r2, [pc, #324]	; (8003f58 <HAL_DMA_Init+0x1f0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a50      	ldr	r2, [pc, #320]	; (8003f5c <HAL_DMA_Init+0x1f4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA_Init+0xbc>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_DMA_Init+0xbe>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 813b 	beq.w	80040a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a37      	ldr	r2, [pc, #220]	; (8003f20 <HAL_DMA_Init+0x1b8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04a      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a36      	ldr	r2, [pc, #216]	; (8003f24 <HAL_DMA_Init+0x1bc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d045      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a34      	ldr	r2, [pc, #208]	; (8003f28 <HAL_DMA_Init+0x1c0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d040      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a33      	ldr	r2, [pc, #204]	; (8003f2c <HAL_DMA_Init+0x1c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d03b      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <HAL_DMA_Init+0x1c8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d036      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_DMA_Init+0x1cc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	; (8003f38 <HAL_DMA_Init+0x1d0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2d      	ldr	r2, [pc, #180]	; (8003f3c <HAL_DMA_Init+0x1d4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d027      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <HAL_DMA_Init+0x1d8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <HAL_DMA_Init+0x1dc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <HAL_DMA_Init+0x1e0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a27      	ldr	r2, [pc, #156]	; (8003f4c <HAL_DMA_Init+0x1e4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <HAL_DMA_Init+0x1e8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <HAL_DMA_Init+0x1ec>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <HAL_DMA_Init+0x1f0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_DMA_Init+0x1f4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <HAL_DMA_Init+0x186>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e007      	b.n	8003efe <HAL_DMA_Init+0x196>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003efe:	e02f      	b.n	8003f60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f00:	f7fe fadc 	bl	80024bc <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d928      	bls.n	8003f60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2203      	movs	r2, #3
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e246      	b.n	80043ae <HAL_DMA_Init+0x646>
 8003f20:	40020010 	.word	0x40020010
 8003f24:	40020028 	.word	0x40020028
 8003f28:	40020040 	.word	0x40020040
 8003f2c:	40020058 	.word	0x40020058
 8003f30:	40020070 	.word	0x40020070
 8003f34:	40020088 	.word	0x40020088
 8003f38:	400200a0 	.word	0x400200a0
 8003f3c:	400200b8 	.word	0x400200b8
 8003f40:	40020410 	.word	0x40020410
 8003f44:	40020428 	.word	0x40020428
 8003f48:	40020440 	.word	0x40020440
 8003f4c:	40020458 	.word	0x40020458
 8003f50:	40020470 	.word	0x40020470
 8003f54:	40020488 	.word	0x40020488
 8003f58:	400204a0 	.word	0x400204a0
 8003f5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1c8      	bne.n	8003f00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4b83      	ldr	r3, [pc, #524]	; (8004188 <HAL_DMA_Init+0x420>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d107      	bne.n	8003fc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003fc4:	4b71      	ldr	r3, [pc, #452]	; (800418c <HAL_DMA_Init+0x424>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b71      	ldr	r3, [pc, #452]	; (8004190 <HAL_DMA_Init+0x428>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd0:	d328      	bcc.n	8004024 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b28      	cmp	r3, #40	; 0x28
 8003fd8:	d903      	bls.n	8003fe2 <HAL_DMA_Init+0x27a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe0:	d917      	bls.n	8004012 <HAL_DMA_Init+0x2aa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe8:	d903      	bls.n	8003ff2 <HAL_DMA_Init+0x28a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b42      	cmp	r3, #66	; 0x42
 8003ff0:	d90f      	bls.n	8004012 <HAL_DMA_Init+0x2aa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b46      	cmp	r3, #70	; 0x46
 8003ff8:	d903      	bls.n	8004002 <HAL_DMA_Init+0x29a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b48      	cmp	r3, #72	; 0x48
 8004000:	d907      	bls.n	8004012 <HAL_DMA_Init+0x2aa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b4e      	cmp	r3, #78	; 0x4e
 8004008:	d905      	bls.n	8004016 <HAL_DMA_Init+0x2ae>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b52      	cmp	r3, #82	; 0x52
 8004010:	d801      	bhi.n	8004016 <HAL_DMA_Init+0x2ae>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_DMA_Init+0x2b0>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0307 	bic.w	r3, r3, #7
 800403a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b04      	cmp	r3, #4
 800404c:	d117      	bne.n	800407e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f001 ff1d 	bl	8005ea0 <DMA_CheckFifoParam>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e197      	b.n	80043ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f001 fe58 	bl	8005d3c <DMA_CalcBaseAndBitshift>
 800408c:	4603      	mov	r3, r0
 800408e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	223f      	movs	r2, #63	; 0x3f
 800409a:	409a      	lsls	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	e0cd      	b.n	800423e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3b      	ldr	r2, [pc, #236]	; (8004194 <HAL_DMA_Init+0x42c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a39      	ldr	r2, [pc, #228]	; (8004198 <HAL_DMA_Init+0x430>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a38      	ldr	r2, [pc, #224]	; (800419c <HAL_DMA_Init+0x434>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a36      	ldr	r2, [pc, #216]	; (80041a0 <HAL_DMA_Init+0x438>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a35      	ldr	r2, [pc, #212]	; (80041a4 <HAL_DMA_Init+0x43c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <HAL_DMA_Init+0x440>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <HAL_DMA_Init+0x444>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_DMA_Init+0x38a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <HAL_DMA_Init+0x448>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_DMA_Init+0x38e>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_DMA_Init+0x390>
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8097 	beq.w	800422c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a24      	ldr	r2, [pc, #144]	; (8004194 <HAL_DMA_Init+0x42c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d021      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_DMA_Init+0x430>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01c      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a21      	ldr	r2, [pc, #132]	; (800419c <HAL_DMA_Init+0x434>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d017      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <HAL_DMA_Init+0x438>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d012      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <HAL_DMA_Init+0x43c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00d      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_DMA_Init+0x440>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d008      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <HAL_DMA_Init+0x444>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <HAL_DMA_Init+0x3e4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <HAL_DMA_Init+0x448>)
 800414a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <HAL_DMA_Init+0x44c>)
 8004168:	4013      	ands	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d021      	beq.n	80041b8 <HAL_DMA_Init+0x450>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d102      	bne.n	8004182 <HAL_DMA_Init+0x41a>
 800417c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004180:	e01b      	b.n	80041ba <HAL_DMA_Init+0x452>
 8004182:	2300      	movs	r3, #0
 8004184:	e019      	b.n	80041ba <HAL_DMA_Init+0x452>
 8004186:	bf00      	nop
 8004188:	fe10803f 	.word	0xfe10803f
 800418c:	5c001000 	.word	0x5c001000
 8004190:	ffff0000 	.word	0xffff0000
 8004194:	58025408 	.word	0x58025408
 8004198:	5802541c 	.word	0x5802541c
 800419c:	58025430 	.word	0x58025430
 80041a0:	58025444 	.word	0x58025444
 80041a4:	58025458 	.word	0x58025458
 80041a8:	5802546c 	.word	0x5802546c
 80041ac:	58025480 	.word	0x58025480
 80041b0:	58025494 	.word	0x58025494
 80041b4:	fffe000f 	.word	0xfffe000f
 80041b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68d2      	ldr	r2, [r2, #12]
 80041be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b6e      	ldr	r3, [pc, #440]	; (80043b8 <HAL_DMA_Init+0x650>)
 8004200:	4413      	add	r3, r2
 8004202:	4a6e      	ldr	r2, [pc, #440]	; (80043bc <HAL_DMA_Init+0x654>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	009a      	lsls	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fd93 	bl	8005d3c <DMA_CalcBaseAndBitshift>
 8004216:	4603      	mov	r3, r0
 8004218:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2201      	movs	r2, #1
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	e008      	b.n	800423e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2240      	movs	r2, #64	; 0x40
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0b7      	b.n	80043ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5f      	ldr	r2, [pc, #380]	; (80043c0 <HAL_DMA_Init+0x658>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d072      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <HAL_DMA_Init+0x65c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d06d      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_DMA_Init+0x660>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d068      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a5a      	ldr	r2, [pc, #360]	; (80043cc <HAL_DMA_Init+0x664>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d063      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a59      	ldr	r2, [pc, #356]	; (80043d0 <HAL_DMA_Init+0x668>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d05e      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <HAL_DMA_Init+0x66c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d059      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a56      	ldr	r2, [pc, #344]	; (80043d8 <HAL_DMA_Init+0x670>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d054      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a54      	ldr	r2, [pc, #336]	; (80043dc <HAL_DMA_Init+0x674>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d04f      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a53      	ldr	r2, [pc, #332]	; (80043e0 <HAL_DMA_Init+0x678>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d04a      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a51      	ldr	r2, [pc, #324]	; (80043e4 <HAL_DMA_Init+0x67c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d045      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a50      	ldr	r2, [pc, #320]	; (80043e8 <HAL_DMA_Init+0x680>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d040      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a4e      	ldr	r2, [pc, #312]	; (80043ec <HAL_DMA_Init+0x684>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d03b      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a4d      	ldr	r2, [pc, #308]	; (80043f0 <HAL_DMA_Init+0x688>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d036      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_DMA_Init+0x68c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d031      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a4a      	ldr	r2, [pc, #296]	; (80043f8 <HAL_DMA_Init+0x690>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d02c      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a48      	ldr	r2, [pc, #288]	; (80043fc <HAL_DMA_Init+0x694>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d027      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a47      	ldr	r2, [pc, #284]	; (8004400 <HAL_DMA_Init+0x698>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a45      	ldr	r2, [pc, #276]	; (8004404 <HAL_DMA_Init+0x69c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01d      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a44      	ldr	r2, [pc, #272]	; (8004408 <HAL_DMA_Init+0x6a0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a42      	ldr	r2, [pc, #264]	; (800440c <HAL_DMA_Init+0x6a4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a41      	ldr	r2, [pc, #260]	; (8004410 <HAL_DMA_Init+0x6a8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3f      	ldr	r2, [pc, #252]	; (8004414 <HAL_DMA_Init+0x6ac>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3e      	ldr	r2, [pc, #248]	; (8004418 <HAL_DMA_Init+0x6b0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_DMA_Init+0x5c6>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a3c      	ldr	r2, [pc, #240]	; (800441c <HAL_DMA_Init+0x6b4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_DMA_Init+0x5ca>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_DMA_Init+0x5cc>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d032      	beq.n	800439e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f001 fe2d 	bl	8005f98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d102      	bne.n	800434c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004360:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_DMA_Init+0x624>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d80c      	bhi.n	800438c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f001 feaa 	bl	80060cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e008      	b.n	800439e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	a7fdabf8 	.word	0xa7fdabf8
 80043bc:	cccccccd 	.word	0xcccccccd
 80043c0:	40020010 	.word	0x40020010
 80043c4:	40020028 	.word	0x40020028
 80043c8:	40020040 	.word	0x40020040
 80043cc:	40020058 	.word	0x40020058
 80043d0:	40020070 	.word	0x40020070
 80043d4:	40020088 	.word	0x40020088
 80043d8:	400200a0 	.word	0x400200a0
 80043dc:	400200b8 	.word	0x400200b8
 80043e0:	40020410 	.word	0x40020410
 80043e4:	40020428 	.word	0x40020428
 80043e8:	40020440 	.word	0x40020440
 80043ec:	40020458 	.word	0x40020458
 80043f0:	40020470 	.word	0x40020470
 80043f4:	40020488 	.word	0x40020488
 80043f8:	400204a0 	.word	0x400204a0
 80043fc:	400204b8 	.word	0x400204b8
 8004400:	58025408 	.word	0x58025408
 8004404:	5802541c 	.word	0x5802541c
 8004408:	58025430 	.word	0x58025430
 800440c:	58025444 	.word	0x58025444
 8004410:	58025458 	.word	0x58025458
 8004414:	5802546c 	.word	0x5802546c
 8004418:	58025480 	.word	0x58025480
 800441c:	58025494 	.word	0x58025494

08004420 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004428:	f7fe f848 	bl	80024bc <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e2dc      	b.n	80049f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d008      	beq.n	8004456 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e2cd      	b.n	80049f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a76      	ldr	r2, [pc, #472]	; (8004634 <HAL_DMA_Abort+0x214>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a74      	ldr	r2, [pc, #464]	; (8004638 <HAL_DMA_Abort+0x218>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a73      	ldr	r2, [pc, #460]	; (800463c <HAL_DMA_Abort+0x21c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a71      	ldr	r2, [pc, #452]	; (8004640 <HAL_DMA_Abort+0x220>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a70      	ldr	r2, [pc, #448]	; (8004644 <HAL_DMA_Abort+0x224>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_DMA_Abort+0x228>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6d      	ldr	r2, [pc, #436]	; (800464c <HAL_DMA_Abort+0x22c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6b      	ldr	r2, [pc, #428]	; (8004650 <HAL_DMA_Abort+0x230>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6a      	ldr	r2, [pc, #424]	; (8004654 <HAL_DMA_Abort+0x234>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a68      	ldr	r2, [pc, #416]	; (8004658 <HAL_DMA_Abort+0x238>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a67      	ldr	r2, [pc, #412]	; (800465c <HAL_DMA_Abort+0x23c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a65      	ldr	r2, [pc, #404]	; (8004660 <HAL_DMA_Abort+0x240>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a64      	ldr	r2, [pc, #400]	; (8004664 <HAL_DMA_Abort+0x244>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a62      	ldr	r2, [pc, #392]	; (8004668 <HAL_DMA_Abort+0x248>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a61      	ldr	r2, [pc, #388]	; (800466c <HAL_DMA_Abort+0x24c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_DMA_Abort+0xd6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5f      	ldr	r2, [pc, #380]	; (8004670 <HAL_DMA_Abort+0x250>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_DMA_Abort+0xda>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_DMA_Abort+0xdc>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 021e 	bic.w	r2, r2, #30
 800450e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800451e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e00a      	b.n	800453e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 020e 	bic.w	r2, r2, #14
 8004536:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <HAL_DMA_Abort+0x214>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d072      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <HAL_DMA_Abort+0x218>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d06d      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a39      	ldr	r2, [pc, #228]	; (800463c <HAL_DMA_Abort+0x21c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d068      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a37      	ldr	r2, [pc, #220]	; (8004640 <HAL_DMA_Abort+0x220>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d063      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a36      	ldr	r2, [pc, #216]	; (8004644 <HAL_DMA_Abort+0x224>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d05e      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_DMA_Abort+0x228>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d059      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a33      	ldr	r2, [pc, #204]	; (800464c <HAL_DMA_Abort+0x22c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d054      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a31      	ldr	r2, [pc, #196]	; (8004650 <HAL_DMA_Abort+0x230>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d04f      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <HAL_DMA_Abort+0x234>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d04a      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <HAL_DMA_Abort+0x238>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d045      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_DMA_Abort+0x23c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d040      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <HAL_DMA_Abort+0x240>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d03b      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <HAL_DMA_Abort+0x244>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d036      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_DMA_Abort+0x248>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d031      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a27      	ldr	r2, [pc, #156]	; (800466c <HAL_DMA_Abort+0x24c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d02c      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <HAL_DMA_Abort+0x250>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d027      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a24      	ldr	r2, [pc, #144]	; (8004674 <HAL_DMA_Abort+0x254>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_DMA_Abort+0x258>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01d      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_DMA_Abort+0x25c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_DMA_Abort+0x260>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_DMA_Abort+0x264>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_DMA_Abort+0x268>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <HAL_DMA_Abort+0x26c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_DMA_Abort+0x20e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_DMA_Abort+0x270>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d132      	bne.n	8004694 <HAL_DMA_Abort+0x274>
 800462e:	2301      	movs	r3, #1
 8004630:	e031      	b.n	8004696 <HAL_DMA_Abort+0x276>
 8004632:	bf00      	nop
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8
 8004674:	58025408 	.word	0x58025408
 8004678:	5802541c 	.word	0x5802541c
 800467c:	58025430 	.word	0x58025430
 8004680:	58025444 	.word	0x58025444
 8004684:	58025458 	.word	0x58025458
 8004688:	5802546c 	.word	0x5802546c
 800468c:	58025480 	.word	0x58025480
 8004690:	58025494 	.word	0x58025494
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6d      	ldr	r2, [pc, #436]	; (8004864 <HAL_DMA_Abort+0x444>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04a      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6b      	ldr	r2, [pc, #428]	; (8004868 <HAL_DMA_Abort+0x448>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d045      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6a      	ldr	r2, [pc, #424]	; (800486c <HAL_DMA_Abort+0x44c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d040      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a68      	ldr	r2, [pc, #416]	; (8004870 <HAL_DMA_Abort+0x450>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d03b      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a67      	ldr	r2, [pc, #412]	; (8004874 <HAL_DMA_Abort+0x454>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d036      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a65      	ldr	r2, [pc, #404]	; (8004878 <HAL_DMA_Abort+0x458>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d031      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a64      	ldr	r2, [pc, #400]	; (800487c <HAL_DMA_Abort+0x45c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02c      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a62      	ldr	r2, [pc, #392]	; (8004880 <HAL_DMA_Abort+0x460>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d027      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a61      	ldr	r2, [pc, #388]	; (8004884 <HAL_DMA_Abort+0x464>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5f      	ldr	r2, [pc, #380]	; (8004888 <HAL_DMA_Abort+0x468>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01d      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5e      	ldr	r2, [pc, #376]	; (800488c <HAL_DMA_Abort+0x46c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5c      	ldr	r2, [pc, #368]	; (8004890 <HAL_DMA_Abort+0x470>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5b      	ldr	r2, [pc, #364]	; (8004894 <HAL_DMA_Abort+0x474>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a59      	ldr	r2, [pc, #356]	; (8004898 <HAL_DMA_Abort+0x478>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a58      	ldr	r2, [pc, #352]	; (800489c <HAL_DMA_Abort+0x47c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_DMA_Abort+0x32a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a56      	ldr	r2, [pc, #344]	; (80048a0 <HAL_DMA_Abort+0x480>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <HAL_DMA_Abort+0x33c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e007      	b.n	800476c <HAL_DMA_Abort+0x34c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800476c:	e013      	b.n	8004796 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800476e:	f7fd fea5 	bl	80024bc <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b05      	cmp	r3, #5
 800477a:	d90c      	bls.n	8004796 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e12d      	b.n	80049f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e5      	bne.n	800476e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2f      	ldr	r2, [pc, #188]	; (8004864 <HAL_DMA_Abort+0x444>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d04a      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2d      	ldr	r2, [pc, #180]	; (8004868 <HAL_DMA_Abort+0x448>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d045      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <HAL_DMA_Abort+0x44c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d040      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <HAL_DMA_Abort+0x450>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d03b      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a29      	ldr	r2, [pc, #164]	; (8004874 <HAL_DMA_Abort+0x454>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d036      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <HAL_DMA_Abort+0x458>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a26      	ldr	r2, [pc, #152]	; (800487c <HAL_DMA_Abort+0x45c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d02c      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <HAL_DMA_Abort+0x460>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d027      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a23      	ldr	r2, [pc, #140]	; (8004884 <HAL_DMA_Abort+0x464>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a21      	ldr	r2, [pc, #132]	; (8004888 <HAL_DMA_Abort+0x468>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <HAL_DMA_Abort+0x46c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_DMA_Abort+0x470>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_DMA_Abort+0x474>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <HAL_DMA_Abort+0x478>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1a      	ldr	r2, [pc, #104]	; (800489c <HAL_DMA_Abort+0x47c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_DMA_Abort+0x422>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_DMA_Abort+0x480>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_DMA_Abort+0x426>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_DMA_Abort+0x428>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02b      	beq.n	80048a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	223f      	movs	r2, #63	; 0x3f
 800485c:	409a      	lsls	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	e02a      	b.n	80048ba <HAL_DMA_Abort+0x49a>
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4f      	ldr	r2, [pc, #316]	; (80049fc <HAL_DMA_Abort+0x5dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d072      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_DMA_Abort+0x5e0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d06d      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_DMA_Abort+0x5e4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d068      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <HAL_DMA_Abort+0x5e8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d063      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <HAL_DMA_Abort+0x5ec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d05e      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a47      	ldr	r2, [pc, #284]	; (8004a10 <HAL_DMA_Abort+0x5f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d059      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a46      	ldr	r2, [pc, #280]	; (8004a14 <HAL_DMA_Abort+0x5f4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d054      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a44      	ldr	r2, [pc, #272]	; (8004a18 <HAL_DMA_Abort+0x5f8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04f      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <HAL_DMA_Abort+0x5fc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d04a      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a41      	ldr	r2, [pc, #260]	; (8004a20 <HAL_DMA_Abort+0x600>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d045      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <HAL_DMA_Abort+0x604>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d040      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3e      	ldr	r2, [pc, #248]	; (8004a28 <HAL_DMA_Abort+0x608>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d03b      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <HAL_DMA_Abort+0x60c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d036      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <HAL_DMA_Abort+0x610>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d031      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3a      	ldr	r2, [pc, #232]	; (8004a34 <HAL_DMA_Abort+0x614>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d02c      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <HAL_DMA_Abort+0x618>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d027      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <HAL_DMA_Abort+0x61c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d022      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a35      	ldr	r2, [pc, #212]	; (8004a40 <HAL_DMA_Abort+0x620>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01d      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <HAL_DMA_Abort+0x624>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a32      	ldr	r2, [pc, #200]	; (8004a48 <HAL_DMA_Abort+0x628>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a31      	ldr	r2, [pc, #196]	; (8004a4c <HAL_DMA_Abort+0x62c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2f      	ldr	r2, [pc, #188]	; (8004a50 <HAL_DMA_Abort+0x630>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <HAL_DMA_Abort+0x634>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_DMA_Abort+0x58a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_DMA_Abort+0x638>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_DMA_Abort+0x58e>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_DMA_Abort+0x590>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00c      	beq.n	80049e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40020010 	.word	0x40020010
 8004a00:	40020028 	.word	0x40020028
 8004a04:	40020040 	.word	0x40020040
 8004a08:	40020058 	.word	0x40020058
 8004a0c:	40020070 	.word	0x40020070
 8004a10:	40020088 	.word	0x40020088
 8004a14:	400200a0 	.word	0x400200a0
 8004a18:	400200b8 	.word	0x400200b8
 8004a1c:	40020410 	.word	0x40020410
 8004a20:	40020428 	.word	0x40020428
 8004a24:	40020440 	.word	0x40020440
 8004a28:	40020458 	.word	0x40020458
 8004a2c:	40020470 	.word	0x40020470
 8004a30:	40020488 	.word	0x40020488
 8004a34:	400204a0 	.word	0x400204a0
 8004a38:	400204b8 	.word	0x400204b8
 8004a3c:	58025408 	.word	0x58025408
 8004a40:	5802541c 	.word	0x5802541c
 8004a44:	58025430 	.word	0x58025430
 8004a48:	58025444 	.word	0x58025444
 8004a4c:	58025458 	.word	0x58025458
 8004a50:	5802546c 	.word	0x5802546c
 8004a54:	58025480 	.word	0x58025480
 8004a58:	58025494 	.word	0x58025494

08004a5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e237      	b.n	8004ede <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d004      	beq.n	8004a84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e22c      	b.n	8004ede <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5c      	ldr	r2, [pc, #368]	; (8004bfc <HAL_DMA_Abort_IT+0x1a0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5b      	ldr	r2, [pc, #364]	; (8004c00 <HAL_DMA_Abort_IT+0x1a4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a59      	ldr	r2, [pc, #356]	; (8004c04 <HAL_DMA_Abort_IT+0x1a8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a58      	ldr	r2, [pc, #352]	; (8004c08 <HAL_DMA_Abort_IT+0x1ac>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a56      	ldr	r2, [pc, #344]	; (8004c0c <HAL_DMA_Abort_IT+0x1b0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a55      	ldr	r2, [pc, #340]	; (8004c10 <HAL_DMA_Abort_IT+0x1b4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a53      	ldr	r2, [pc, #332]	; (8004c14 <HAL_DMA_Abort_IT+0x1b8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_DMA_Abort_IT+0x1bc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a50      	ldr	r2, [pc, #320]	; (8004c1c <HAL_DMA_Abort_IT+0x1c0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4f      	ldr	r2, [pc, #316]	; (8004c20 <HAL_DMA_Abort_IT+0x1c4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4d      	ldr	r2, [pc, #308]	; (8004c24 <HAL_DMA_Abort_IT+0x1c8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4c      	ldr	r2, [pc, #304]	; (8004c28 <HAL_DMA_Abort_IT+0x1cc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a4a      	ldr	r2, [pc, #296]	; (8004c2c <HAL_DMA_Abort_IT+0x1d0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a49      	ldr	r2, [pc, #292]	; (8004c30 <HAL_DMA_Abort_IT+0x1d4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a47      	ldr	r2, [pc, #284]	; (8004c34 <HAL_DMA_Abort_IT+0x1d8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a46      	ldr	r2, [pc, #280]	; (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_DMA_Abort_IT+0xcc>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_DMA_Abort_IT+0xce>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8086 	beq.w	8004c3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2204      	movs	r2, #4
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <HAL_DMA_Abort_IT+0x1a0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <HAL_DMA_Abort_IT+0x1a4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d045      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <HAL_DMA_Abort_IT+0x1a8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <HAL_DMA_Abort_IT+0x1ac>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d03b      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <HAL_DMA_Abort_IT+0x1b0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a28      	ldr	r2, [pc, #160]	; (8004c10 <HAL_DMA_Abort_IT+0x1b4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d031      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <HAL_DMA_Abort_IT+0x1b8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <HAL_DMA_Abort_IT+0x1bc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	; (8004c1c <HAL_DMA_Abort_IT+0x1c0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <HAL_DMA_Abort_IT+0x1c4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	; (8004c24 <HAL_DMA_Abort_IT+0x1c8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_DMA_Abort_IT+0x1cc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <HAL_DMA_Abort_IT+0x1d0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <HAL_DMA_Abort_IT+0x1d4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_DMA_Abort_IT+0x1d8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <HAL_DMA_Abort_IT+0x18e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e178      	b.n	8004edc <HAL_DMA_Abort_IT+0x480>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e16f      	b.n	8004edc <HAL_DMA_Abort_IT+0x480>
 8004bfc:	40020010 	.word	0x40020010
 8004c00:	40020028 	.word	0x40020028
 8004c04:	40020040 	.word	0x40020040
 8004c08:	40020058 	.word	0x40020058
 8004c0c:	40020070 	.word	0x40020070
 8004c10:	40020088 	.word	0x40020088
 8004c14:	400200a0 	.word	0x400200a0
 8004c18:	400200b8 	.word	0x400200b8
 8004c1c:	40020410 	.word	0x40020410
 8004c20:	40020428 	.word	0x40020428
 8004c24:	40020440 	.word	0x40020440
 8004c28:	40020458 	.word	0x40020458
 8004c2c:	40020470 	.word	0x40020470
 8004c30:	40020488 	.word	0x40020488
 8004c34:	400204a0 	.word	0x400204a0
 8004c38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 020e 	bic.w	r2, r2, #14
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a6c      	ldr	r2, [pc, #432]	; (8004e04 <HAL_DMA_Abort_IT+0x3a8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d04a      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6b      	ldr	r2, [pc, #428]	; (8004e08 <HAL_DMA_Abort_IT+0x3ac>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d045      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a69      	ldr	r2, [pc, #420]	; (8004e0c <HAL_DMA_Abort_IT+0x3b0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d040      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a68      	ldr	r2, [pc, #416]	; (8004e10 <HAL_DMA_Abort_IT+0x3b4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d03b      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a66      	ldr	r2, [pc, #408]	; (8004e14 <HAL_DMA_Abort_IT+0x3b8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d036      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a65      	ldr	r2, [pc, #404]	; (8004e18 <HAL_DMA_Abort_IT+0x3bc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d031      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a63      	ldr	r2, [pc, #396]	; (8004e1c <HAL_DMA_Abort_IT+0x3c0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d02c      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a62      	ldr	r2, [pc, #392]	; (8004e20 <HAL_DMA_Abort_IT+0x3c4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d027      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a60      	ldr	r2, [pc, #384]	; (8004e24 <HAL_DMA_Abort_IT+0x3c8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d022      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5f      	ldr	r2, [pc, #380]	; (8004e28 <HAL_DMA_Abort_IT+0x3cc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01d      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5d      	ldr	r2, [pc, #372]	; (8004e2c <HAL_DMA_Abort_IT+0x3d0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d018      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5c      	ldr	r2, [pc, #368]	; (8004e30 <HAL_DMA_Abort_IT+0x3d4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5a      	ldr	r2, [pc, #360]	; (8004e34 <HAL_DMA_Abort_IT+0x3d8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a59      	ldr	r2, [pc, #356]	; (8004e38 <HAL_DMA_Abort_IT+0x3dc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a57      	ldr	r2, [pc, #348]	; (8004e3c <HAL_DMA_Abort_IT+0x3e0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a56      	ldr	r2, [pc, #344]	; (8004e40 <HAL_DMA_Abort_IT+0x3e4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <HAL_DMA_Abort_IT+0x2a2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e007      	b.n	8004d0e <HAL_DMA_Abort_IT+0x2b2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <HAL_DMA_Abort_IT+0x3a8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d072      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <HAL_DMA_Abort_IT+0x3ac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d06d      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <HAL_DMA_Abort_IT+0x3b0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d068      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a37      	ldr	r2, [pc, #220]	; (8004e10 <HAL_DMA_Abort_IT+0x3b4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d063      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a36      	ldr	r2, [pc, #216]	; (8004e14 <HAL_DMA_Abort_IT+0x3b8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d05e      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a34      	ldr	r2, [pc, #208]	; (8004e18 <HAL_DMA_Abort_IT+0x3bc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d059      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a33      	ldr	r2, [pc, #204]	; (8004e1c <HAL_DMA_Abort_IT+0x3c0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d054      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a31      	ldr	r2, [pc, #196]	; (8004e20 <HAL_DMA_Abort_IT+0x3c4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04f      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a30      	ldr	r2, [pc, #192]	; (8004e24 <HAL_DMA_Abort_IT+0x3c8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04a      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2e      	ldr	r2, [pc, #184]	; (8004e28 <HAL_DMA_Abort_IT+0x3cc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d045      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <HAL_DMA_Abort_IT+0x3d0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d040      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <HAL_DMA_Abort_IT+0x3d4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d03b      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_DMA_Abort_IT+0x3d8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d036      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a28      	ldr	r2, [pc, #160]	; (8004e38 <HAL_DMA_Abort_IT+0x3dc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <HAL_DMA_Abort_IT+0x3e0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d02c      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <HAL_DMA_Abort_IT+0x3e4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d027      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <HAL_DMA_Abort_IT+0x3e8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <HAL_DMA_Abort_IT+0x3ec>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_DMA_Abort_IT+0x3f0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_DMA_Abort_IT+0x3f4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_DMA_Abort_IT+0x3f8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_DMA_Abort_IT+0x3fc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_DMA_Abort_IT+0x400>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_DMA_Abort_IT+0x404>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d132      	bne.n	8004e64 <HAL_DMA_Abort_IT+0x408>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e031      	b.n	8004e66 <HAL_DMA_Abort_IT+0x40a>
 8004e02:	bf00      	nop
 8004e04:	40020010 	.word	0x40020010
 8004e08:	40020028 	.word	0x40020028
 8004e0c:	40020040 	.word	0x40020040
 8004e10:	40020058 	.word	0x40020058
 8004e14:	40020070 	.word	0x40020070
 8004e18:	40020088 	.word	0x40020088
 8004e1c:	400200a0 	.word	0x400200a0
 8004e20:	400200b8 	.word	0x400200b8
 8004e24:	40020410 	.word	0x40020410
 8004e28:	40020428 	.word	0x40020428
 8004e2c:	40020440 	.word	0x40020440
 8004e30:	40020458 	.word	0x40020458
 8004e34:	40020470 	.word	0x40020470
 8004e38:	40020488 	.word	0x40020488
 8004e3c:	400204a0 	.word	0x400204a0
 8004e40:	400204b8 	.word	0x400204b8
 8004e44:	58025408 	.word	0x58025408
 8004e48:	5802541c 	.word	0x5802541c
 8004e4c:	58025430 	.word	0x58025430
 8004e50:	58025444 	.word	0x58025444
 8004e54:	58025458 	.word	0x58025458
 8004e58:	5802546c 	.word	0x5802546c
 8004e5c:	58025480 	.word	0x58025480
 8004e60:	58025494 	.word	0x58025494
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d028      	beq.n	8004ebc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop

08004ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ef4:	4b67      	ldr	r3, [pc, #412]	; (8005094 <HAL_DMA_IRQHandler+0x1ac>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a67      	ldr	r2, [pc, #412]	; (8005098 <HAL_DMA_IRQHandler+0x1b0>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5f      	ldr	r2, [pc, #380]	; (800509c <HAL_DMA_IRQHandler+0x1b4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04a      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5d      	ldr	r2, [pc, #372]	; (80050a0 <HAL_DMA_IRQHandler+0x1b8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d045      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a5c      	ldr	r2, [pc, #368]	; (80050a4 <HAL_DMA_IRQHandler+0x1bc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d040      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5a      	ldr	r2, [pc, #360]	; (80050a8 <HAL_DMA_IRQHandler+0x1c0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03b      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a59      	ldr	r2, [pc, #356]	; (80050ac <HAL_DMA_IRQHandler+0x1c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a57      	ldr	r2, [pc, #348]	; (80050b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d031      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a56      	ldr	r2, [pc, #344]	; (80050b4 <HAL_DMA_IRQHandler+0x1cc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a54      	ldr	r2, [pc, #336]	; (80050b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a53      	ldr	r2, [pc, #332]	; (80050bc <HAL_DMA_IRQHandler+0x1d4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a51      	ldr	r2, [pc, #324]	; (80050c0 <HAL_DMA_IRQHandler+0x1d8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a50      	ldr	r2, [pc, #320]	; (80050c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a4e      	ldr	r2, [pc, #312]	; (80050c8 <HAL_DMA_IRQHandler+0x1e0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4d      	ldr	r2, [pc, #308]	; (80050cc <HAL_DMA_IRQHandler+0x1e4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a4b      	ldr	r2, [pc, #300]	; (80050d0 <HAL_DMA_IRQHandler+0x1e8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4a      	ldr	r2, [pc, #296]	; (80050d4 <HAL_DMA_IRQHandler+0x1ec>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_IRQHandler+0xd2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a48      	ldr	r2, [pc, #288]	; (80050d8 <HAL_DMA_IRQHandler+0x1f0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_IRQHandler+0xd6>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_DMA_IRQHandler+0xd8>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 842b 	beq.w	800581c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2208      	movs	r2, #8
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80a2 	beq.w	8005120 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	; (800509c <HAL_DMA_IRQHandler+0x1b4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d04a      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <HAL_DMA_IRQHandler+0x1b8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d045      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <HAL_DMA_IRQHandler+0x1bc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d040      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <HAL_DMA_IRQHandler+0x1c0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d03b      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a28      	ldr	r2, [pc, #160]	; (80050ac <HAL_DMA_IRQHandler+0x1c4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d036      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <HAL_DMA_IRQHandler+0x1c8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d031      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_DMA_IRQHandler+0x1cc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d02c      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <HAL_DMA_IRQHandler+0x1d0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d027      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_DMA_IRQHandler+0x1d4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d022      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <HAL_DMA_IRQHandler+0x1d8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d01d      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_DMA_IRQHandler+0x1dc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_DMA_IRQHandler+0x1e0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <HAL_DMA_IRQHandler+0x1e4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_DMA_IRQHandler+0x1e8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_DMA_IRQHandler+0x1ec>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_DMA_IRQHandler+0x194>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_DMA_IRQHandler+0x1f0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d12f      	bne.n	80050dc <HAL_DMA_IRQHandler+0x1f4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e02e      	b.n	80050f0 <HAL_DMA_IRQHandler+0x208>
 8005092:	bf00      	nop
 8005094:	24000000 	.word	0x24000000
 8005098:	1b4e81b5 	.word	0x1b4e81b5
 800509c:	40020010 	.word	0x40020010
 80050a0:	40020028 	.word	0x40020028
 80050a4:	40020040 	.word	0x40020040
 80050a8:	40020058 	.word	0x40020058
 80050ac:	40020070 	.word	0x40020070
 80050b0:	40020088 	.word	0x40020088
 80050b4:	400200a0 	.word	0x400200a0
 80050b8:	400200b8 	.word	0x400200b8
 80050bc:	40020410 	.word	0x40020410
 80050c0:	40020428 	.word	0x40020428
 80050c4:	40020440 	.word	0x40020440
 80050c8:	40020458 	.word	0x40020458
 80050cc:	40020470 	.word	0x40020470
 80050d0:	40020488 	.word	0x40020488
 80050d4:	400204a0 	.word	0x400204a0
 80050d8:	400204b8 	.word	0x400204b8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d015      	beq.n	8005120 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2208      	movs	r2, #8
 800510e:	409a      	lsls	r2, r3
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	fa22 f303 	lsr.w	r3, r2, r3
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d06e      	beq.n	8005214 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a69      	ldr	r2, [pc, #420]	; (80052e0 <HAL_DMA_IRQHandler+0x3f8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d04a      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a67      	ldr	r2, [pc, #412]	; (80052e4 <HAL_DMA_IRQHandler+0x3fc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d045      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a66      	ldr	r2, [pc, #408]	; (80052e8 <HAL_DMA_IRQHandler+0x400>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d040      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a64      	ldr	r2, [pc, #400]	; (80052ec <HAL_DMA_IRQHandler+0x404>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d03b      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a63      	ldr	r2, [pc, #396]	; (80052f0 <HAL_DMA_IRQHandler+0x408>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d036      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a61      	ldr	r2, [pc, #388]	; (80052f4 <HAL_DMA_IRQHandler+0x40c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d031      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a60      	ldr	r2, [pc, #384]	; (80052f8 <HAL_DMA_IRQHandler+0x410>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d02c      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5e      	ldr	r2, [pc, #376]	; (80052fc <HAL_DMA_IRQHandler+0x414>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d027      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <HAL_DMA_IRQHandler+0x418>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d022      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5b      	ldr	r2, [pc, #364]	; (8005304 <HAL_DMA_IRQHandler+0x41c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01d      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a5a      	ldr	r2, [pc, #360]	; (8005308 <HAL_DMA_IRQHandler+0x420>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a58      	ldr	r2, [pc, #352]	; (800530c <HAL_DMA_IRQHandler+0x424>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a57      	ldr	r2, [pc, #348]	; (8005310 <HAL_DMA_IRQHandler+0x428>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a55      	ldr	r2, [pc, #340]	; (8005314 <HAL_DMA_IRQHandler+0x42c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a54      	ldr	r2, [pc, #336]	; (8005318 <HAL_DMA_IRQHandler+0x430>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ee>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a52      	ldr	r2, [pc, #328]	; (800531c <HAL_DMA_IRQHandler+0x434>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10a      	bne.n	80051ec <HAL_DMA_IRQHandler+0x304>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e003      	b.n	80051f4 <HAL_DMA_IRQHandler+0x30c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2201      	movs	r2, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	f043 0202 	orr.w	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2204      	movs	r2, #4
 800521e:	409a      	lsls	r2, r3
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 808f 	beq.w	8005348 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <HAL_DMA_IRQHandler+0x3f8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04a      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <HAL_DMA_IRQHandler+0x3fc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d045      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <HAL_DMA_IRQHandler+0x400>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a27      	ldr	r2, [pc, #156]	; (80052ec <HAL_DMA_IRQHandler+0x404>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d03b      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <HAL_DMA_IRQHandler+0x408>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d036      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_DMA_IRQHandler+0x40c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <HAL_DMA_IRQHandler+0x410>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d02c      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_DMA_IRQHandler+0x414>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d027      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_DMA_IRQHandler+0x418>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <HAL_DMA_IRQHandler+0x41c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_DMA_IRQHandler+0x420>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <HAL_DMA_IRQHandler+0x424>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_DMA_IRQHandler+0x428>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a18      	ldr	r2, [pc, #96]	; (8005314 <HAL_DMA_IRQHandler+0x42c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_DMA_IRQHandler+0x430>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3e2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_DMA_IRQHandler+0x434>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d12a      	bne.n	8005320 <HAL_DMA_IRQHandler+0x438>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e023      	b.n	8005328 <HAL_DMA_IRQHandler+0x440>
 80052e0:	40020010 	.word	0x40020010
 80052e4:	40020028 	.word	0x40020028
 80052e8:	40020040 	.word	0x40020040
 80052ec:	40020058 	.word	0x40020058
 80052f0:	40020070 	.word	0x40020070
 80052f4:	40020088 	.word	0x40020088
 80052f8:	400200a0 	.word	0x400200a0
 80052fc:	400200b8 	.word	0x400200b8
 8005300:	40020410 	.word	0x40020410
 8005304:	40020428 	.word	0x40020428
 8005308:	40020440 	.word	0x40020440
 800530c:	40020458 	.word	0x40020458
 8005310:	40020470 	.word	0x40020470
 8005314:	40020488 	.word	0x40020488
 8005318:	400204a0 	.word	0x400204a0
 800531c:	400204b8 	.word	0x400204b8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2204      	movs	r2, #4
 8005336:	409a      	lsls	r2, r3
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0204 	orr.w	r2, r3, #4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2210      	movs	r2, #16
 8005352:	409a      	lsls	r2, r3
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80a6 	beq.w	80054aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a85      	ldr	r2, [pc, #532]	; (8005578 <HAL_DMA_IRQHandler+0x690>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d04a      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a83      	ldr	r2, [pc, #524]	; (800557c <HAL_DMA_IRQHandler+0x694>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d045      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a82      	ldr	r2, [pc, #520]	; (8005580 <HAL_DMA_IRQHandler+0x698>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d040      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a80      	ldr	r2, [pc, #512]	; (8005584 <HAL_DMA_IRQHandler+0x69c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d03b      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7f      	ldr	r2, [pc, #508]	; (8005588 <HAL_DMA_IRQHandler+0x6a0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d036      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a7d      	ldr	r2, [pc, #500]	; (800558c <HAL_DMA_IRQHandler+0x6a4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d031      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7c      	ldr	r2, [pc, #496]	; (8005590 <HAL_DMA_IRQHandler+0x6a8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d02c      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7a      	ldr	r2, [pc, #488]	; (8005594 <HAL_DMA_IRQHandler+0x6ac>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d027      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a79      	ldr	r2, [pc, #484]	; (8005598 <HAL_DMA_IRQHandler+0x6b0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a77      	ldr	r2, [pc, #476]	; (800559c <HAL_DMA_IRQHandler+0x6b4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01d      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a76      	ldr	r2, [pc, #472]	; (80055a0 <HAL_DMA_IRQHandler+0x6b8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a74      	ldr	r2, [pc, #464]	; (80055a4 <HAL_DMA_IRQHandler+0x6bc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a73      	ldr	r2, [pc, #460]	; (80055a8 <HAL_DMA_IRQHandler+0x6c0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a71      	ldr	r2, [pc, #452]	; (80055ac <HAL_DMA_IRQHandler+0x6c4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a70      	ldr	r2, [pc, #448]	; (80055b0 <HAL_DMA_IRQHandler+0x6c8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_DMA_IRQHandler+0x516>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6e      	ldr	r2, [pc, #440]	; (80055b4 <HAL_DMA_IRQHandler+0x6cc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10a      	bne.n	8005414 <HAL_DMA_IRQHandler+0x52c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e009      	b.n	8005428 <HAL_DMA_IRQHandler+0x540>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d03e      	beq.n	80054aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2210      	movs	r2, #16
 8005436:	409a      	lsls	r2, r3
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d018      	beq.n	800547c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d024      	beq.n	80054aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3
 8005468:	e01f      	b.n	80054aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	4798      	blx	r3
 800547a:	e016      	b.n	80054aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0208 	bic.w	r2, r2, #8
 8005498:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2220      	movs	r2, #32
 80054b4:	409a      	lsls	r2, r3
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8110 	beq.w	80056e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <HAL_DMA_IRQHandler+0x690>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2b      	ldr	r2, [pc, #172]	; (800557c <HAL_DMA_IRQHandler+0x694>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a29      	ldr	r2, [pc, #164]	; (8005580 <HAL_DMA_IRQHandler+0x698>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a28      	ldr	r2, [pc, #160]	; (8005584 <HAL_DMA_IRQHandler+0x69c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a26      	ldr	r2, [pc, #152]	; (8005588 <HAL_DMA_IRQHandler+0x6a0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a25      	ldr	r2, [pc, #148]	; (800558c <HAL_DMA_IRQHandler+0x6a4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a23      	ldr	r2, [pc, #140]	; (8005590 <HAL_DMA_IRQHandler+0x6a8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a22      	ldr	r2, [pc, #136]	; (8005594 <HAL_DMA_IRQHandler+0x6ac>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a20      	ldr	r2, [pc, #128]	; (8005598 <HAL_DMA_IRQHandler+0x6b0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_DMA_IRQHandler+0x6b4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1d      	ldr	r2, [pc, #116]	; (80055a0 <HAL_DMA_IRQHandler+0x6b8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_DMA_IRQHandler+0x6bc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <HAL_DMA_IRQHandler+0x6c0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a19      	ldr	r2, [pc, #100]	; (80055ac <HAL_DMA_IRQHandler+0x6c4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <HAL_DMA_IRQHandler+0x6c8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_IRQHandler+0x678>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_DMA_IRQHandler+0x6cc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d12b      	bne.n	80055b8 <HAL_DMA_IRQHandler+0x6d0>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	e02a      	b.n	80055cc <HAL_DMA_IRQHandler+0x6e4>
 8005576:	bf00      	nop
 8005578:	40020010 	.word	0x40020010
 800557c:	40020028 	.word	0x40020028
 8005580:	40020040 	.word	0x40020040
 8005584:	40020058 	.word	0x40020058
 8005588:	40020070 	.word	0x40020070
 800558c:	40020088 	.word	0x40020088
 8005590:	400200a0 	.word	0x400200a0
 8005594:	400200b8 	.word	0x400200b8
 8005598:	40020410 	.word	0x40020410
 800559c:	40020428 	.word	0x40020428
 80055a0:	40020440 	.word	0x40020440
 80055a4:	40020458 	.word	0x40020458
 80055a8:	40020470 	.word	0x40020470
 80055ac:	40020488 	.word	0x40020488
 80055b0:	400204a0 	.word	0x400204a0
 80055b4:	400204b8 	.word	0x400204b8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8087 	beq.w	80056e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	2220      	movs	r2, #32
 80055dc:	409a      	lsls	r2, r3
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d139      	bne.n	8005662 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0216 	bic.w	r2, r2, #22
 80055fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <HAL_DMA_IRQHandler+0x736>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0208 	bic.w	r2, r2, #8
 800562c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	223f      	movs	r2, #63	; 0x3f
 8005638:	409a      	lsls	r2, r3
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 834a 	beq.w	8005cec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
          }
          return;
 8005660:	e344      	b.n	8005cec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d018      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d108      	bne.n	8005690 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	2b00      	cmp	r3, #0
 8005684:	d02c      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
 800568e:	e027      	b.n	80056e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d023      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
 80056a0:	e01e      	b.n	80056e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10f      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0210 	bic.w	r2, r2, #16
 80056be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8306 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8088 	beq.w	8005808 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2204      	movs	r2, #4
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a7a      	ldr	r2, [pc, #488]	; (80058f0 <HAL_DMA_IRQHandler+0xa08>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d04a      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a79      	ldr	r2, [pc, #484]	; (80058f4 <HAL_DMA_IRQHandler+0xa0c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d045      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a77      	ldr	r2, [pc, #476]	; (80058f8 <HAL_DMA_IRQHandler+0xa10>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d040      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a76      	ldr	r2, [pc, #472]	; (80058fc <HAL_DMA_IRQHandler+0xa14>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d03b      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a74      	ldr	r2, [pc, #464]	; (8005900 <HAL_DMA_IRQHandler+0xa18>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d036      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a73      	ldr	r2, [pc, #460]	; (8005904 <HAL_DMA_IRQHandler+0xa1c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d031      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a71      	ldr	r2, [pc, #452]	; (8005908 <HAL_DMA_IRQHandler+0xa20>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d02c      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a70      	ldr	r2, [pc, #448]	; (800590c <HAL_DMA_IRQHandler+0xa24>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d027      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a6e      	ldr	r2, [pc, #440]	; (8005910 <HAL_DMA_IRQHandler+0xa28>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d022      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a6d      	ldr	r2, [pc, #436]	; (8005914 <HAL_DMA_IRQHandler+0xa2c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d01d      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6b      	ldr	r2, [pc, #428]	; (8005918 <HAL_DMA_IRQHandler+0xa30>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6a      	ldr	r2, [pc, #424]	; (800591c <HAL_DMA_IRQHandler+0xa34>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a68      	ldr	r2, [pc, #416]	; (8005920 <HAL_DMA_IRQHandler+0xa38>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a67      	ldr	r2, [pc, #412]	; (8005924 <HAL_DMA_IRQHandler+0xa3c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a65      	ldr	r2, [pc, #404]	; (8005928 <HAL_DMA_IRQHandler+0xa40>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x8b8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a64      	ldr	r2, [pc, #400]	; (800592c <HAL_DMA_IRQHandler+0xa44>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d108      	bne.n	80057b2 <HAL_DMA_IRQHandler+0x8ca>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e007      	b.n	80057c2 <HAL_DMA_IRQHandler+0x8da>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0201 	bic.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d307      	bcc.n	80057de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f2      	bne.n	80057c2 <HAL_DMA_IRQHandler+0x8da>
 80057dc:	e000      	b.n	80057e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2203      	movs	r2, #3
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057f6:	e003      	b.n	8005800 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8272 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
 800581a:	e26c      	b.n	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a43      	ldr	r2, [pc, #268]	; (8005930 <HAL_DMA_IRQHandler+0xa48>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d022      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a42      	ldr	r2, [pc, #264]	; (8005934 <HAL_DMA_IRQHandler+0xa4c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d01d      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a40      	ldr	r2, [pc, #256]	; (8005938 <HAL_DMA_IRQHandler+0xa50>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d018      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a3f      	ldr	r2, [pc, #252]	; (800593c <HAL_DMA_IRQHandler+0xa54>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <HAL_DMA_IRQHandler+0xa58>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a3c      	ldr	r2, [pc, #240]	; (8005944 <HAL_DMA_IRQHandler+0xa5c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3a      	ldr	r2, [pc, #232]	; (8005948 <HAL_DMA_IRQHandler+0xa60>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_DMA_IRQHandler+0x984>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a39      	ldr	r2, [pc, #228]	; (800594c <HAL_DMA_IRQHandler+0xa64>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d101      	bne.n	8005870 <HAL_DMA_IRQHandler+0x988>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_DMA_IRQHandler+0x98a>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 823f 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	2204      	movs	r2, #4
 800588a:	409a      	lsls	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4013      	ands	r3, r2
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80cd 	beq.w	8005a30 <HAL_DMA_IRQHandler+0xb48>
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80c7 	beq.w	8005a30 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2204      	movs	r2, #4
 80058ac:	409a      	lsls	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d049      	beq.n	8005950 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8210 	beq.w	8005cf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d8:	e20a      	b.n	8005cf0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8206 	beq.w	8005cf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ec:	e200      	b.n	8005cf0 <HAL_DMA_IRQHandler+0xe08>
 80058ee:	bf00      	nop
 80058f0:	40020010 	.word	0x40020010
 80058f4:	40020028 	.word	0x40020028
 80058f8:	40020040 	.word	0x40020040
 80058fc:	40020058 	.word	0x40020058
 8005900:	40020070 	.word	0x40020070
 8005904:	40020088 	.word	0x40020088
 8005908:	400200a0 	.word	0x400200a0
 800590c:	400200b8 	.word	0x400200b8
 8005910:	40020410 	.word	0x40020410
 8005914:	40020428 	.word	0x40020428
 8005918:	40020440 	.word	0x40020440
 800591c:	40020458 	.word	0x40020458
 8005920:	40020470 	.word	0x40020470
 8005924:	40020488 	.word	0x40020488
 8005928:	400204a0 	.word	0x400204a0
 800592c:	400204b8 	.word	0x400204b8
 8005930:	58025408 	.word	0x58025408
 8005934:	5802541c 	.word	0x5802541c
 8005938:	58025430 	.word	0x58025430
 800593c:	58025444 	.word	0x58025444
 8005940:	58025458 	.word	0x58025458
 8005944:	5802546c 	.word	0x5802546c
 8005948:	58025480 	.word	0x58025480
 800594c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d160      	bne.n	8005a1c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a7f      	ldr	r2, [pc, #508]	; (8005b5c <HAL_DMA_IRQHandler+0xc74>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d04a      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a7d      	ldr	r2, [pc, #500]	; (8005b60 <HAL_DMA_IRQHandler+0xc78>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d045      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a7c      	ldr	r2, [pc, #496]	; (8005b64 <HAL_DMA_IRQHandler+0xc7c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d040      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a7a      	ldr	r2, [pc, #488]	; (8005b68 <HAL_DMA_IRQHandler+0xc80>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d03b      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a79      	ldr	r2, [pc, #484]	; (8005b6c <HAL_DMA_IRQHandler+0xc84>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d036      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a77      	ldr	r2, [pc, #476]	; (8005b70 <HAL_DMA_IRQHandler+0xc88>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d031      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a76      	ldr	r2, [pc, #472]	; (8005b74 <HAL_DMA_IRQHandler+0xc8c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d02c      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a74      	ldr	r2, [pc, #464]	; (8005b78 <HAL_DMA_IRQHandler+0xc90>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d027      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a73      	ldr	r2, [pc, #460]	; (8005b7c <HAL_DMA_IRQHandler+0xc94>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d022      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a71      	ldr	r2, [pc, #452]	; (8005b80 <HAL_DMA_IRQHandler+0xc98>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a70      	ldr	r2, [pc, #448]	; (8005b84 <HAL_DMA_IRQHandler+0xc9c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a6e      	ldr	r2, [pc, #440]	; (8005b88 <HAL_DMA_IRQHandler+0xca0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a6d      	ldr	r2, [pc, #436]	; (8005b8c <HAL_DMA_IRQHandler+0xca4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6b      	ldr	r2, [pc, #428]	; (8005b90 <HAL_DMA_IRQHandler+0xca8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6a      	ldr	r2, [pc, #424]	; (8005b94 <HAL_DMA_IRQHandler+0xcac>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_DMA_IRQHandler+0xb12>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a68      	ldr	r2, [pc, #416]	; (8005b98 <HAL_DMA_IRQHandler+0xcb0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d108      	bne.n	8005a0c <HAL_DMA_IRQHandler+0xb24>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0208 	bic.w	r2, r2, #8
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e007      	b.n	8005a1c <HAL_DMA_IRQHandler+0xb34>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0204 	bic.w	r2, r2, #4
 8005a1a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8165 	beq.w	8005cf0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a2e:	e15f      	b.n	8005cf0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	2202      	movs	r2, #2
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80c5 	beq.w	8005bd0 <HAL_DMA_IRQHandler+0xce8>
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80bf 	beq.w	8005bd0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d018      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 813a 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a88:	e134      	b.n	8005cf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8130 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a9c:	e12a      	b.n	8005cf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 8089 	bne.w	8005bbc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <HAL_DMA_IRQHandler+0xc74>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d04a      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <HAL_DMA_IRQHandler+0xc78>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d045      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <HAL_DMA_IRQHandler+0xc7c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d040      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <HAL_DMA_IRQHandler+0xc80>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d03b      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a25      	ldr	r2, [pc, #148]	; (8005b6c <HAL_DMA_IRQHandler+0xc84>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d036      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <HAL_DMA_IRQHandler+0xc88>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d031      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <HAL_DMA_IRQHandler+0xc8c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d02c      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a20      	ldr	r2, [pc, #128]	; (8005b78 <HAL_DMA_IRQHandler+0xc90>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d027      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_DMA_IRQHandler+0xc94>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <HAL_DMA_IRQHandler+0xc98>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01d      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_DMA_IRQHandler+0xc9c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <HAL_DMA_IRQHandler+0xca0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_DMA_IRQHandler+0xca4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <HAL_DMA_IRQHandler+0xca8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <HAL_DMA_IRQHandler+0xcac>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xc62>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <HAL_DMA_IRQHandler+0xcb0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d128      	bne.n	8005b9c <HAL_DMA_IRQHandler+0xcb4>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0214 	bic.w	r2, r2, #20
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e027      	b.n	8005bac <HAL_DMA_IRQHandler+0xcc4>
 8005b5c:	40020010 	.word	0x40020010
 8005b60:	40020028 	.word	0x40020028
 8005b64:	40020040 	.word	0x40020040
 8005b68:	40020058 	.word	0x40020058
 8005b6c:	40020070 	.word	0x40020070
 8005b70:	40020088 	.word	0x40020088
 8005b74:	400200a0 	.word	0x400200a0
 8005b78:	400200b8 	.word	0x400200b8
 8005b7c:	40020410 	.word	0x40020410
 8005b80:	40020428 	.word	0x40020428
 8005b84:	40020440 	.word	0x40020440
 8005b88:	40020458 	.word	0x40020458
 8005b8c:	40020470 	.word	0x40020470
 8005b90:	40020488 	.word	0x40020488
 8005b94:	400204a0 	.word	0x400204a0
 8005b98:	400204b8 	.word	0x400204b8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 020a 	bic.w	r2, r2, #10
 8005baa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8097 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bce:	e091      	b.n	8005cf4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2208      	movs	r2, #8
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8088 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8082 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a41      	ldr	r2, [pc, #260]	; (8005cfc <HAL_DMA_IRQHandler+0xe14>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d04a      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a3f      	ldr	r2, [pc, #252]	; (8005d00 <HAL_DMA_IRQHandler+0xe18>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d045      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3e      	ldr	r2, [pc, #248]	; (8005d04 <HAL_DMA_IRQHandler+0xe1c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d040      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3c      	ldr	r2, [pc, #240]	; (8005d08 <HAL_DMA_IRQHandler+0xe20>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d03b      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a3b      	ldr	r2, [pc, #236]	; (8005d0c <HAL_DMA_IRQHandler+0xe24>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d036      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a39      	ldr	r2, [pc, #228]	; (8005d10 <HAL_DMA_IRQHandler+0xe28>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d031      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a38      	ldr	r2, [pc, #224]	; (8005d14 <HAL_DMA_IRQHandler+0xe2c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d02c      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a36      	ldr	r2, [pc, #216]	; (8005d18 <HAL_DMA_IRQHandler+0xe30>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d027      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a35      	ldr	r2, [pc, #212]	; (8005d1c <HAL_DMA_IRQHandler+0xe34>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a33      	ldr	r2, [pc, #204]	; (8005d20 <HAL_DMA_IRQHandler+0xe38>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a32      	ldr	r2, [pc, #200]	; (8005d24 <HAL_DMA_IRQHandler+0xe3c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a30      	ldr	r2, [pc, #192]	; (8005d28 <HAL_DMA_IRQHandler+0xe40>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <HAL_DMA_IRQHandler+0xe44>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <HAL_DMA_IRQHandler+0xe48>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <HAL_DMA_IRQHandler+0xe4c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xdaa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2a      	ldr	r2, [pc, #168]	; (8005d38 <HAL_DMA_IRQHandler+0xe50>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0xdbc>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 021c 	bic.w	r2, r2, #28
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e007      	b.n	8005cb4 <HAL_DMA_IRQHandler+0xdcc>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 020e 	bic.w	r2, r2, #14
 8005cb2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	e004      	b.n	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005cec:	bf00      	nop
 8005cee:	e002      	b.n	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cf4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cf6:	3728      	adds	r7, #40	; 0x28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40020010 	.word	0x40020010
 8005d00:	40020028 	.word	0x40020028
 8005d04:	40020040 	.word	0x40020040
 8005d08:	40020058 	.word	0x40020058
 8005d0c:	40020070 	.word	0x40020070
 8005d10:	40020088 	.word	0x40020088
 8005d14:	400200a0 	.word	0x400200a0
 8005d18:	400200b8 	.word	0x400200b8
 8005d1c:	40020410 	.word	0x40020410
 8005d20:	40020428 	.word	0x40020428
 8005d24:	40020440 	.word	0x40020440
 8005d28:	40020458 	.word	0x40020458
 8005d2c:	40020470 	.word	0x40020470
 8005d30:	40020488 	.word	0x40020488
 8005d34:	400204a0 	.word	0x400204a0
 8005d38:	400204b8 	.word	0x400204b8

08005d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a42      	ldr	r2, [pc, #264]	; (8005e54 <DMA_CalcBaseAndBitshift+0x118>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d04a      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a41      	ldr	r2, [pc, #260]	; (8005e58 <DMA_CalcBaseAndBitshift+0x11c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d045      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <DMA_CalcBaseAndBitshift+0x120>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d040      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3e      	ldr	r2, [pc, #248]	; (8005e60 <DMA_CalcBaseAndBitshift+0x124>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d03b      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a3c      	ldr	r2, [pc, #240]	; (8005e64 <DMA_CalcBaseAndBitshift+0x128>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d036      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3b      	ldr	r2, [pc, #236]	; (8005e68 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d031      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a39      	ldr	r2, [pc, #228]	; (8005e6c <DMA_CalcBaseAndBitshift+0x130>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02c      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a38      	ldr	r2, [pc, #224]	; (8005e70 <DMA_CalcBaseAndBitshift+0x134>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d027      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a36      	ldr	r2, [pc, #216]	; (8005e74 <DMA_CalcBaseAndBitshift+0x138>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d022      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a35      	ldr	r2, [pc, #212]	; (8005e78 <DMA_CalcBaseAndBitshift+0x13c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01d      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a33      	ldr	r2, [pc, #204]	; (8005e7c <DMA_CalcBaseAndBitshift+0x140>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d018      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a32      	ldr	r2, [pc, #200]	; (8005e80 <DMA_CalcBaseAndBitshift+0x144>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <DMA_CalcBaseAndBitshift+0x148>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00e      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <DMA_CalcBaseAndBitshift+0x14c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <DMA_CalcBaseAndBitshift+0x150>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <DMA_CalcBaseAndBitshift+0xa8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <DMA_CalcBaseAndBitshift+0x154>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <DMA_CalcBaseAndBitshift+0xac>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <DMA_CalcBaseAndBitshift+0xae>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d024      	beq.n	8005e38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	3b10      	subs	r3, #16
 8005df6:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <DMA_CalcBaseAndBitshift+0x158>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	091b      	lsrs	r3, r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	4a24      	ldr	r2, [pc, #144]	; (8005e98 <DMA_CalcBaseAndBitshift+0x15c>)
 8005e08:	5cd3      	ldrb	r3, [r2, r3]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d908      	bls.n	8005e28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <DMA_CalcBaseAndBitshift+0x160>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	659a      	str	r2, [r3, #88]	; 0x58
 8005e26:	e00d      	b.n	8005e44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <DMA_CalcBaseAndBitshift+0x160>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6593      	str	r3, [r2, #88]	; 0x58
 8005e36:	e005      	b.n	8005e44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40020010 	.word	0x40020010
 8005e58:	40020028 	.word	0x40020028
 8005e5c:	40020040 	.word	0x40020040
 8005e60:	40020058 	.word	0x40020058
 8005e64:	40020070 	.word	0x40020070
 8005e68:	40020088 	.word	0x40020088
 8005e6c:	400200a0 	.word	0x400200a0
 8005e70:	400200b8 	.word	0x400200b8
 8005e74:	40020410 	.word	0x40020410
 8005e78:	40020428 	.word	0x40020428
 8005e7c:	40020440 	.word	0x40020440
 8005e80:	40020458 	.word	0x40020458
 8005e84:	40020470 	.word	0x40020470
 8005e88:	40020488 	.word	0x40020488
 8005e8c:	400204a0 	.word	0x400204a0
 8005e90:	400204b8 	.word	0x400204b8
 8005e94:	aaaaaaab 	.word	0xaaaaaaab
 8005e98:	08014f68 	.word	0x08014f68
 8005e9c:	fffffc00 	.word	0xfffffc00

08005ea0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d120      	bne.n	8005ef6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d858      	bhi.n	8005f6e <DMA_CheckFifoParam+0xce>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <DMA_CheckFifoParam+0x24>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ee7 	.word	0x08005ee7
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005f6f 	.word	0x08005f6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d048      	beq.n	8005f72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ee4:	e045      	b.n	8005f72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005eee:	d142      	bne.n	8005f76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ef4:	e03f      	b.n	8005f76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efe:	d123      	bne.n	8005f48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d838      	bhi.n	8005f7a <DMA_CheckFifoParam+0xda>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <DMA_CheckFifoParam+0x70>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f27 	.word	0x08005f27
 8005f18:	08005f21 	.word	0x08005f21
 8005f1c:	08005f39 	.word	0x08005f39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
        break;
 8005f24:	e030      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d025      	beq.n	8005f7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f36:	e022      	b.n	8005f7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f40:	d11f      	bne.n	8005f82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f46:	e01c      	b.n	8005f82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d902      	bls.n	8005f56 <DMA_CheckFifoParam+0xb6>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d003      	beq.n	8005f5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005f54:	e018      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]
        break;
 8005f5a:	e015      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f6c:	e00b      	b.n	8005f86 <DMA_CheckFifoParam+0xe6>
        break;
 8005f6e:	bf00      	nop
 8005f70:	e00a      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        break;
 8005f72:	bf00      	nop
 8005f74:	e008      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        break;
 8005f76:	bf00      	nop
 8005f78:	e006      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e004      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
        break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <DMA_CheckFifoParam+0xe8>
    break;
 8005f86:	bf00      	nop
    }
  }

  return status;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a38      	ldr	r2, [pc, #224]	; (800608c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a36      	ldr	r2, [pc, #216]	; (8006090 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a35      	ldr	r2, [pc, #212]	; (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a33      	ldr	r2, [pc, #204]	; (8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a32      	ldr	r2, [pc, #200]	; (800609c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a30      	ldr	r2, [pc, #192]	; (80060a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2f      	ldr	r2, [pc, #188]	; (80060a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01a      	beq.n	8006036 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	3b08      	subs	r3, #8
 8006008:	4a28      	ldr	r2, [pc, #160]	; (80060ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a24      	ldr	r2, [pc, #144]	; (80060b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006024:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006034:	e024      	b.n	8006080 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	3b10      	subs	r3, #16
 800603e:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d806      	bhi.n	800605e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d902      	bls.n	800605e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3308      	adds	r3, #8
 800605c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006070:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	58025408 	.word	0x58025408
 8006090:	5802541c 	.word	0x5802541c
 8006094:	58025430 	.word	0x58025430
 8006098:	58025444 	.word	0x58025444
 800609c:	58025458 	.word	0x58025458
 80060a0:	5802546c 	.word	0x5802546c
 80060a4:	58025480 	.word	0x58025480
 80060a8:	58025494 	.word	0x58025494
 80060ac:	cccccccd 	.word	0xcccccccd
 80060b0:	16009600 	.word	0x16009600
 80060b4:	58025880 	.word	0x58025880
 80060b8:	aaaaaaab 	.word	0xaaaaaaab
 80060bc:	400204b8 	.word	0x400204b8
 80060c0:	4002040f 	.word	0x4002040f
 80060c4:	10008200 	.word	0x10008200
 80060c8:	40020880 	.word	0x40020880

080060cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d04a      	beq.n	8006178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d847      	bhi.n	8006178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a25      	ldr	r2, [pc, #148]	; (8006184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d022      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a24      	ldr	r2, [pc, #144]	; (8006188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d01d      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a22      	ldr	r2, [pc, #136]	; (800618c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a21      	ldr	r2, [pc, #132]	; (8006190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d101      	bne.n	800613c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4b17      	ldr	r3, [pc, #92]	; (80061a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006154:	671a      	str	r2, [r3, #112]	; 0x70
 8006156:	e009      	b.n	800616c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4b14      	ldr	r3, [pc, #80]	; (80061ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800616a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b01      	subs	r3, #1
 8006170:	2201      	movs	r2, #1
 8006172:	409a      	lsls	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	58025408 	.word	0x58025408
 8006188:	5802541c 	.word	0x5802541c
 800618c:	58025430 	.word	0x58025430
 8006190:	58025444 	.word	0x58025444
 8006194:	58025458 	.word	0x58025458
 8006198:	5802546c 	.word	0x5802546c
 800619c:	58025480 	.word	0x58025480
 80061a0:	58025494 	.word	0x58025494
 80061a4:	1600963f 	.word	0x1600963f
 80061a8:	58025940 	.word	0x58025940
 80061ac:	1000823f 	.word	0x1000823f
 80061b0:	40020940 	.word	0x40020940

080061b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061be:	2300      	movs	r3, #0
 80061c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061c2:	4b89      	ldr	r3, [pc, #548]	; (80063e8 <HAL_GPIO_Init+0x234>)
 80061c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061c6:	e194      	b.n	80064f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	2101      	movs	r1, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	4013      	ands	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8186 	beq.w	80064ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d005      	beq.n	80061f8 <HAL_GPIO_Init+0x44>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d130      	bne.n	800625a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	2203      	movs	r2, #3
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4013      	ands	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4313      	orrs	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800622e:	2201      	movs	r2, #1
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43db      	mvns	r3, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 0201 	and.w	r2, r3, #1
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b03      	cmp	r3, #3
 8006264:	d017      	beq.n	8006296 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	2203      	movs	r2, #3
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4013      	ands	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d123      	bne.n	80062ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	08da      	lsrs	r2, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3208      	adds	r2, #8
 80062aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	220f      	movs	r2, #15
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	08da      	lsrs	r2, r3, #3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3208      	adds	r2, #8
 80062e4:	69b9      	ldr	r1, [r7, #24]
 80062e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	2203      	movs	r2, #3
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 0203 	and.w	r2, r3, #3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4313      	orrs	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80e0 	beq.w	80064ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800632c:	4b2f      	ldr	r3, [pc, #188]	; (80063ec <HAL_GPIO_Init+0x238>)
 800632e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006332:	4a2e      	ldr	r2, [pc, #184]	; (80063ec <HAL_GPIO_Init+0x238>)
 8006334:	f043 0302 	orr.w	r3, r3, #2
 8006338:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800633c:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <HAL_GPIO_Init+0x238>)
 800633e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800634a:	4a29      	ldr	r2, [pc, #164]	; (80063f0 <HAL_GPIO_Init+0x23c>)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	089b      	lsrs	r3, r3, #2
 8006350:	3302      	adds	r3, #2
 8006352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	220f      	movs	r2, #15
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4013      	ands	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <HAL_GPIO_Init+0x240>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d052      	beq.n	800641c <HAL_GPIO_Init+0x268>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_GPIO_Init+0x244>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d031      	beq.n	80063e2 <HAL_GPIO_Init+0x22e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_GPIO_Init+0x248>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d02b      	beq.n	80063de <HAL_GPIO_Init+0x22a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <HAL_GPIO_Init+0x24c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d025      	beq.n	80063da <HAL_GPIO_Init+0x226>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <HAL_GPIO_Init+0x250>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01f      	beq.n	80063d6 <HAL_GPIO_Init+0x222>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <HAL_GPIO_Init+0x254>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d019      	beq.n	80063d2 <HAL_GPIO_Init+0x21e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1a      	ldr	r2, [pc, #104]	; (800640c <HAL_GPIO_Init+0x258>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <HAL_GPIO_Init+0x21a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <HAL_GPIO_Init+0x25c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00d      	beq.n	80063ca <HAL_GPIO_Init+0x216>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_GPIO_Init+0x260>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d007      	beq.n	80063c6 <HAL_GPIO_Init+0x212>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_GPIO_Init+0x264>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d101      	bne.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063be:	2309      	movs	r3, #9
 80063c0:	e02d      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063c2:	230a      	movs	r3, #10
 80063c4:	e02b      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063c6:	2308      	movs	r3, #8
 80063c8:	e029      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063ca:	2307      	movs	r3, #7
 80063cc:	e027      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063ce:	2306      	movs	r3, #6
 80063d0:	e025      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063d2:	2305      	movs	r3, #5
 80063d4:	e023      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063d6:	2304      	movs	r3, #4
 80063d8:	e021      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063da:	2303      	movs	r3, #3
 80063dc:	e01f      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063de:	2302      	movs	r3, #2
 80063e0:	e01d      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e01b      	b.n	800641e <HAL_GPIO_Init+0x26a>
 80063e6:	bf00      	nop
 80063e8:	58000080 	.word	0x58000080
 80063ec:	58024400 	.word	0x58024400
 80063f0:	58000400 	.word	0x58000400
 80063f4:	58020000 	.word	0x58020000
 80063f8:	58020400 	.word	0x58020400
 80063fc:	58020800 	.word	0x58020800
 8006400:	58020c00 	.word	0x58020c00
 8006404:	58021000 	.word	0x58021000
 8006408:	58021400 	.word	0x58021400
 800640c:	58021800 	.word	0x58021800
 8006410:	58021c00 	.word	0x58021c00
 8006414:	58022000 	.word	0x58022000
 8006418:	58022400 	.word	0x58022400
 800641c:	2300      	movs	r3, #0
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	f002 0203 	and.w	r2, r2, #3
 8006424:	0092      	lsls	r2, r2, #2
 8006426:	4093      	lsls	r3, r2
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4313      	orrs	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800642e:	4938      	ldr	r1, [pc, #224]	; (8006510 <HAL_GPIO_Init+0x35c>)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	3302      	adds	r3, #2
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	43db      	mvns	r3, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800646a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	43db      	mvns	r3, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	43db      	mvns	r3, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4013      	ands	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	3301      	adds	r3, #1
 80064f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f47f ae63 	bne.w	80061c8 <HAL_GPIO_Init+0x14>
  }
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	3724      	adds	r7, #36	; 0x24
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	58000400 	.word	0x58000400

08006514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	807b      	strh	r3, [r7, #2]
 8006520:	4613      	mov	r3, r2
 8006522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006524:	787b      	ldrb	r3, [r7, #1]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800652a:	887a      	ldrh	r2, [r7, #2]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006530:	e003      	b.n	800653a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006532:	887b      	ldrh	r3, [r7, #2]
 8006534:	041a      	lsls	r2, r3, #16
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	619a      	str	r2, [r3, #24]
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006550:	4a08      	ldr	r2, [pc, #32]	; (8006574 <HAL_HSEM_FastTake+0x2c>)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3320      	adds	r3, #32
 8006556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800655a:	4a07      	ldr	r2, [pc, #28]	; (8006578 <HAL_HSEM_FastTake+0x30>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d101      	bne.n	8006564 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
}
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	58026400 	.word	0x58026400
 8006578:	80000300 	.word	0x80000300

0800657c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006586:	4906      	ldr	r1, [pc, #24]	; (80065a0 <HAL_HSEM_Release+0x24>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	58026400 	.word	0x58026400

080065a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065a6:	b08f      	sub	sp, #60	; 0x3c
 80065a8:	af0a      	add	r7, sp, #40	; 0x28
 80065aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e116      	b.n	80067e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d106      	bne.n	80065d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb fcfd 	bl	8001fd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2203      	movs	r2, #3
 80065da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f006 fe9d 	bl	800d334 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	687e      	ldr	r6, [r7, #4]
 8006602:	466d      	mov	r5, sp
 8006604:	f106 0410 	add.w	r4, r6, #16
 8006608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800660a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800660c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800660e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006614:	e885 0003 	stmia.w	r5, {r0, r1}
 8006618:	1d33      	adds	r3, r6, #4
 800661a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	f006 fe1b 	bl	800d258 <USB_CoreInit>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e0d7      	b.n	80067e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f006 fe8b 	bl	800d356 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	e04a      	b.n	80066dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	333d      	adds	r3, #61	; 0x3d
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800665a:	7bfa      	ldrb	r2, [r7, #15]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	333c      	adds	r3, #60	; 0x3c
 800666a:	7bfa      	ldrb	r2, [r7, #15]
 800666c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800666e:	7bfa      	ldrb	r2, [r7, #15]
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	b298      	uxth	r0, r3
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	3356      	adds	r3, #86	; 0x56
 8006682:	4602      	mov	r2, r0
 8006684:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006686:	7bfa      	ldrb	r2, [r7, #15]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3340      	adds	r3, #64	; 0x40
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800669a:	7bfa      	ldrb	r2, [r7, #15]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3344      	adds	r3, #68	; 0x44
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3348      	adds	r3, #72	; 0x48
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80066c2:	7bfa      	ldrb	r2, [r7, #15]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	334c      	adds	r3, #76	; 0x4c
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	3301      	adds	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3af      	bcc.n	8006646 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e044      	b.n	8006776 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066ec:	7bfa      	ldrb	r2, [r7, #15]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006702:	7bfa      	ldrb	r2, [r7, #15]
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006714:	7bfa      	ldrb	r2, [r7, #15]
 8006716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006718:	7bfa      	ldrb	r2, [r7, #15]
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800672e:	7bfa      	ldrb	r2, [r7, #15]
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006744:	7bfa      	ldrb	r2, [r7, #15]
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800675a:	7bfa      	ldrb	r2, [r7, #15]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	3301      	adds	r3, #1
 8006774:	73fb      	strb	r3, [r7, #15]
 8006776:	7bfa      	ldrb	r2, [r7, #15]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d3b5      	bcc.n	80066ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	687e      	ldr	r6, [r7, #4]
 8006788:	466d      	mov	r5, sp
 800678a:	f106 0410 	add.w	r4, r6, #16
 800678e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800679a:	e885 0003 	stmia.w	r5, {r0, r1}
 800679e:	1d33      	adds	r3, r6, #4
 80067a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067a2:	6838      	ldr	r0, [r7, #0]
 80067a4:	f006 fe24 	bl	800d3f0 <USB_DevInit>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e014      	b.n	80067e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d102      	bne.n	80067d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f80a 	bl	80067ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f006 ffe2 	bl	800d7a6 <USB_DevDisconnect>

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <HAL_PCDEx_ActivateLPM+0x44>)
 800681c:	4313      	orrs	r3, r2
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	10000003 	.word	0x10000003

08006834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800683c:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	2b06      	cmp	r3, #6
 8006846:	d00a      	beq.n	800685e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006848:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d001      	beq.n	800685a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e040      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e03e      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006866:	491f      	ldr	r1, [pc, #124]	; (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4313      	orrs	r3, r2
 800686c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800686e:	f7fb fe25 	bl	80024bc <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006874:	e009      	b.n	800688a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006876:	f7fb fe21 	bl	80024bc <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006884:	d901      	bls.n	800688a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e028      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800688a:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006896:	d1ee      	bne.n	8006876 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b1e      	cmp	r3, #30
 800689c:	d008      	beq.n	80068b0 <HAL_PWREx_ConfigSupply+0x7c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b2e      	cmp	r3, #46	; 0x2e
 80068a2:	d005      	beq.n	80068b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b1d      	cmp	r3, #29
 80068a8:	d002      	beq.n	80068b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b2d      	cmp	r3, #45	; 0x2d
 80068ae:	d114      	bne.n	80068da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80068b0:	f7fb fe04 	bl	80024bc <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068b6:	e009      	b.n	80068cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068b8:	f7fb fe00 	bl	80024bc <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c6:	d901      	bls.n	80068cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e007      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d8:	d1ee      	bne.n	80068b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024800 	.word	0x58024800

080068e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	4a04      	ldr	r2, [pc, #16]	; (8006904 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068f6:	60d3      	str	r3, [r2, #12]
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	58024800 	.word	0x58024800

08006908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f000 bc48 	b.w	80071ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8088 	beq.w	8006a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800692a:	4b99      	ldr	r3, [pc, #612]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006934:	4b96      	ldr	r3, [pc, #600]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2b10      	cmp	r3, #16
 800693e:	d007      	beq.n	8006950 <HAL_RCC_OscConfig+0x48>
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	2b18      	cmp	r3, #24
 8006944:	d111      	bne.n	800696a <HAL_RCC_OscConfig+0x62>
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d10c      	bne.n	800696a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006950:	4b8f      	ldr	r3, [pc, #572]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d06d      	beq.n	8006a38 <HAL_RCC_OscConfig+0x130>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d169      	bne.n	8006a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f000 bc21 	b.w	80071ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x7a>
 8006974:	4b86      	ldr	r3, [pc, #536]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a85      	ldr	r2, [pc, #532]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 800697a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e02e      	b.n	80069e0 <HAL_RCC_OscConfig+0xd8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x9c>
 800698a:	4b81      	ldr	r3, [pc, #516]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a80      	ldr	r2, [pc, #512]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4b7e      	ldr	r3, [pc, #504]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a7d      	ldr	r2, [pc, #500]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 800699c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	e01d      	b.n	80069e0 <HAL_RCC_OscConfig+0xd8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCC_OscConfig+0xc0>
 80069ae:	4b78      	ldr	r3, [pc, #480]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a77      	ldr	r2, [pc, #476]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	4b75      	ldr	r3, [pc, #468]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a74      	ldr	r2, [pc, #464]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e00b      	b.n	80069e0 <HAL_RCC_OscConfig+0xd8>
 80069c8:	4b71      	ldr	r3, [pc, #452]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a70      	ldr	r2, [pc, #448]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b6e      	ldr	r3, [pc, #440]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a6d      	ldr	r2, [pc, #436]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 80069da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d013      	beq.n	8006a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fb fd68 	bl	80024bc <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f0:	f7fb fd64 	bl	80024bc <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b64      	cmp	r3, #100	; 0x64
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e3d4      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a02:	4b63      	ldr	r3, [pc, #396]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0xe8>
 8006a0e:	e014      	b.n	8006a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fb fd54 	bl	80024bc <HAL_GetTick>
 8006a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fb fd50 	bl	80024bc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e3c0      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a2a:	4b59      	ldr	r3, [pc, #356]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x110>
 8006a36:	e000      	b.n	8006a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80ca 	beq.w	8006bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a48:	4b51      	ldr	r3, [pc, #324]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a52:	4b4f      	ldr	r3, [pc, #316]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_RCC_OscConfig+0x166>
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	2b18      	cmp	r3, #24
 8006a62:	d156      	bne.n	8006b12 <HAL_RCC_OscConfig+0x20a>
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d151      	bne.n	8006b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a6e:	4b48      	ldr	r3, [pc, #288]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <HAL_RCC_OscConfig+0x17e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e392      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a86:	4b42      	ldr	r3, [pc, #264]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 0219 	bic.w	r2, r3, #25
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	493f      	ldr	r1, [pc, #252]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fb fd10 	bl	80024bc <HAL_GetTick>
 8006a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aa0:	f7fb fd0c 	bl	80024bc <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e37c      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ab2:	4b37      	ldr	r3, [pc, #220]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006abe:	f7fb fd2d 	bl	800251c <HAL_GetREVID>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d817      	bhi.n	8006afc <HAL_RCC_OscConfig+0x1f4>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d108      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x1de>
 8006ad4:	4b2e      	ldr	r3, [pc, #184]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006adc:	4a2c      	ldr	r2, [pc, #176]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae4:	e07a      	b.n	8006bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	031b      	lsls	r3, r3, #12
 8006af4:	4926      	ldr	r1, [pc, #152]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afa:	e06f      	b.n	8006bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afc:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	061b      	lsls	r3, r3, #24
 8006b0a:	4921      	ldr	r1, [pc, #132]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b10:	e064      	b.n	8006bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d047      	beq.n	8006baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 0219 	bic.w	r2, r3, #25
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	491a      	ldr	r1, [pc, #104]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fb fcc6 	bl	80024bc <HAL_GetTick>
 8006b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b34:	f7fb fcc2 	bl	80024bc <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e332      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b46:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f0      	beq.n	8006b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b52:	f7fb fce3 	bl	800251c <HAL_GetREVID>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d819      	bhi.n	8006b94 <HAL_RCC_OscConfig+0x28c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b40      	cmp	r3, #64	; 0x40
 8006b66:	d108      	bne.n	8006b7a <HAL_RCC_OscConfig+0x272>
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b70:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b76:	6053      	str	r3, [r2, #4]
 8006b78:	e030      	b.n	8006bdc <HAL_RCC_OscConfig+0x2d4>
 8006b7a:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	031b      	lsls	r3, r3, #12
 8006b88:	4901      	ldr	r1, [pc, #4]	; (8006b90 <HAL_RCC_OscConfig+0x288>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	604b      	str	r3, [r1, #4]
 8006b8e:	e025      	b.n	8006bdc <HAL_RCC_OscConfig+0x2d4>
 8006b90:	58024400 	.word	0x58024400
 8006b94:	4b9a      	ldr	r3, [pc, #616]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	4997      	ldr	r1, [pc, #604]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	604b      	str	r3, [r1, #4]
 8006ba8:	e018      	b.n	8006bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006baa:	4b95      	ldr	r3, [pc, #596]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a94      	ldr	r2, [pc, #592]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb6:	f7fb fc81 	bl	80024bc <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bbe:	f7fb fc7d 	bl	80024bc <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e2ed      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bd0:	4b8b      	ldr	r3, [pc, #556]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f0      	bne.n	8006bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80a9 	beq.w	8006d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bea:	4b85      	ldr	r3, [pc, #532]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bf4:	4b82      	ldr	r3, [pc, #520]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d007      	beq.n	8006c10 <HAL_RCC_OscConfig+0x308>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b18      	cmp	r3, #24
 8006c04:	d13a      	bne.n	8006c7c <HAL_RCC_OscConfig+0x374>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d135      	bne.n	8006c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c10:	4b7b      	ldr	r3, [pc, #492]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_RCC_OscConfig+0x320>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e2c1      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c28:	f7fb fc78 	bl	800251c <HAL_GetREVID>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d817      	bhi.n	8006c66 <HAL_RCC_OscConfig+0x35e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d108      	bne.n	8006c50 <HAL_RCC_OscConfig+0x348>
 8006c3e:	4b70      	ldr	r3, [pc, #448]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c46:	4a6e      	ldr	r2, [pc, #440]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c4e:	e075      	b.n	8006d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c50:	4b6b      	ldr	r3, [pc, #428]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	069b      	lsls	r3, r3, #26
 8006c5e:	4968      	ldr	r1, [pc, #416]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c64:	e06a      	b.n	8006d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c66:	4b66      	ldr	r3, [pc, #408]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	061b      	lsls	r3, r3, #24
 8006c74:	4962      	ldr	r1, [pc, #392]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c7a:	e05f      	b.n	8006d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d042      	beq.n	8006d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c84:	4b5e      	ldr	r3, [pc, #376]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a5d      	ldr	r2, [pc, #372]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fb fc14 	bl	80024bc <HAL_GetTick>
 8006c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c98:	f7fb fc10 	bl	80024bc <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e280      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006caa:	4b55      	ldr	r3, [pc, #340]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cb6:	f7fb fc31 	bl	800251c <HAL_GetREVID>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d817      	bhi.n	8006cf4 <HAL_RCC_OscConfig+0x3ec>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d108      	bne.n	8006cde <HAL_RCC_OscConfig+0x3d6>
 8006ccc:	4b4c      	ldr	r3, [pc, #304]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cd4:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cda:	6053      	str	r3, [r2, #4]
 8006cdc:	e02e      	b.n	8006d3c <HAL_RCC_OscConfig+0x434>
 8006cde:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	069b      	lsls	r3, r3, #26
 8006cec:	4944      	ldr	r1, [pc, #272]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	604b      	str	r3, [r1, #4]
 8006cf2:	e023      	b.n	8006d3c <HAL_RCC_OscConfig+0x434>
 8006cf4:	4b42      	ldr	r3, [pc, #264]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	061b      	lsls	r3, r3, #24
 8006d02:	493f      	ldr	r1, [pc, #252]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60cb      	str	r3, [r1, #12]
 8006d08:	e018      	b.n	8006d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d0a:	4b3d      	ldr	r3, [pc, #244]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a3c      	ldr	r2, [pc, #240]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d16:	f7fb fbd1 	bl	80024bc <HAL_GetTick>
 8006d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d1e:	f7fb fbcd 	bl	80024bc <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e23d      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d30:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f0      	bne.n	8006d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d036      	beq.n	8006db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d019      	beq.n	8006d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d50:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d54:	4a2a      	ldr	r2, [pc, #168]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5c:	f7fb fbae 	bl	80024bc <HAL_GetTick>
 8006d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d64:	f7fb fbaa 	bl	80024bc <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e21a      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d76:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f0      	beq.n	8006d64 <HAL_RCC_OscConfig+0x45c>
 8006d82:	e018      	b.n	8006db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d84:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d88:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d90:	f7fb fb94 	bl	80024bc <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d98:	f7fb fb90 	bl	80024bc <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e200      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d039      	beq.n	8006e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01c      	beq.n	8006e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dca:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dd6:	f7fb fb71 	bl	80024bc <HAL_GetTick>
 8006dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dde:	f7fb fb6d 	bl	80024bc <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e1dd      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006df0:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <HAL_RCC_OscConfig+0x4f8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <HAL_RCC_OscConfig+0x4d6>
 8006dfc:	e01b      	b.n	8006e36 <HAL_RCC_OscConfig+0x52e>
 8006dfe:	bf00      	nop
 8006e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e04:	4b9b      	ldr	r3, [pc, #620]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a9a      	ldr	r2, [pc, #616]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e10:	f7fb fb54 	bl	80024bc <HAL_GetTick>
 8006e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e18:	f7fb fb50 	bl	80024bc <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e1c0      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e2a:	4b92      	ldr	r3, [pc, #584]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8081 	beq.w	8006f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e44:	4b8c      	ldr	r3, [pc, #560]	; (8007078 <HAL_RCC_OscConfig+0x770>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a8b      	ldr	r2, [pc, #556]	; (8007078 <HAL_RCC_OscConfig+0x770>)
 8006e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e50:	f7fb fb34 	bl	80024bc <HAL_GetTick>
 8006e54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e58:	f7fb fb30 	bl	80024bc <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b64      	cmp	r3, #100	; 0x64
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e1a0      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e6a:	4b83      	ldr	r3, [pc, #524]	; (8007078 <HAL_RCC_OscConfig+0x770>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f0      	beq.n	8006e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCC_OscConfig+0x584>
 8006e7e:	4b7d      	ldr	r3, [pc, #500]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	4a7c      	ldr	r2, [pc, #496]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8a:	e02d      	b.n	8006ee8 <HAL_RCC_OscConfig+0x5e0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10c      	bne.n	8006eae <HAL_RCC_OscConfig+0x5a6>
 8006e94:	4b77      	ldr	r3, [pc, #476]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a76      	ldr	r2, [pc, #472]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea0:	4b74      	ldr	r3, [pc, #464]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4a73      	ldr	r2, [pc, #460]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	f023 0304 	bic.w	r3, r3, #4
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006eac:	e01c      	b.n	8006ee8 <HAL_RCC_OscConfig+0x5e0>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d10c      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x5c8>
 8006eb6:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eba:	4a6e      	ldr	r2, [pc, #440]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ebc:	f043 0304 	orr.w	r3, r3, #4
 8006ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec2:	4b6c      	ldr	r3, [pc, #432]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	4a6b      	ldr	r2, [pc, #428]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	f043 0301 	orr.w	r3, r3, #1
 8006ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ece:	e00b      	b.n	8006ee8 <HAL_RCC_OscConfig+0x5e0>
 8006ed0:	4b68      	ldr	r3, [pc, #416]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed4:	4a67      	ldr	r2, [pc, #412]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	6713      	str	r3, [r2, #112]	; 0x70
 8006edc:	4b65      	ldr	r3, [pc, #404]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee0:	4a64      	ldr	r2, [pc, #400]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ee2:	f023 0304 	bic.w	r3, r3, #4
 8006ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d015      	beq.n	8006f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef0:	f7fb fae4 	bl	80024bc <HAL_GetTick>
 8006ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef6:	e00a      	b.n	8006f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef8:	f7fb fae0 	bl	80024bc <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e14e      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f0e:	4b59      	ldr	r3, [pc, #356]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0ee      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x5f0>
 8006f1a:	e014      	b.n	8006f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1c:	f7fb face 	bl	80024bc <HAL_GetTick>
 8006f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f22:	e00a      	b.n	8006f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f24:	f7fb faca 	bl	80024bc <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e138      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f3a:	4b4e      	ldr	r3, [pc, #312]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1ee      	bne.n	8006f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 812d 	beq.w	80071aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f50:	4b48      	ldr	r3, [pc, #288]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f58:	2b18      	cmp	r3, #24
 8006f5a:	f000 80bd 	beq.w	80070d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	f040 809e 	bne.w	80070a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f68:	4b42      	ldr	r3, [pc, #264]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a41      	ldr	r2, [pc, #260]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fb faa2 	bl	80024bc <HAL_GetTick>
 8006f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fb fa9e 	bl	80024bc <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e10e      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f8e:	4b39      	ldr	r3, [pc, #228]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f9a:	4b36      	ldr	r3, [pc, #216]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f9e:	4b37      	ldr	r3, [pc, #220]	; (800707c <HAL_RCC_OscConfig+0x774>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006faa:	0112      	lsls	r2, r2, #4
 8006fac:	430a      	orrs	r2, r1
 8006fae:	4931      	ldr	r1, [pc, #196]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	025b      	lsls	r3, r3, #9
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fe4:	4923      	ldr	r1, [pc, #140]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fea:	4b22      	ldr	r3, [pc, #136]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	4a21      	ldr	r2, [pc, #132]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ff6:	4b1f      	ldr	r3, [pc, #124]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ffa:	4b21      	ldr	r3, [pc, #132]	; (8007080 <HAL_RCC_OscConfig+0x778>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007002:	00d2      	lsls	r2, r2, #3
 8007004:	491b      	ldr	r1, [pc, #108]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007006:	4313      	orrs	r3, r2
 8007008:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	f023 020c 	bic.w	r2, r3, #12
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	4917      	ldr	r1, [pc, #92]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007018:	4313      	orrs	r3, r2
 800701a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800701c:	4b15      	ldr	r3, [pc, #84]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	f023 0202 	bic.w	r2, r3, #2
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007028:	4912      	ldr	r1, [pc, #72]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 800702a:	4313      	orrs	r3, r2
 800702c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a10      	ldr	r2, [pc, #64]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703a:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	4a0a      	ldr	r2, [pc, #40]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 800704c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	4a07      	ldr	r2, [pc, #28]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a04      	ldr	r2, [pc, #16]	; (8007074 <HAL_RCC_OscConfig+0x76c>)
 8007064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fb fa27 	bl	80024bc <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007070:	e011      	b.n	8007096 <HAL_RCC_OscConfig+0x78e>
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
 8007078:	58024800 	.word	0x58024800
 800707c:	fffffc0c 	.word	0xfffffc0c
 8007080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007084:	f7fb fa1a 	bl	80024bc <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e08a      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007096:	4b47      	ldr	r3, [pc, #284]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0f0      	beq.n	8007084 <HAL_RCC_OscConfig+0x77c>
 80070a2:	e082      	b.n	80071aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a4:	4b43      	ldr	r3, [pc, #268]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a42      	ldr	r2, [pc, #264]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80070aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b0:	f7fb fa04 	bl	80024bc <HAL_GetTick>
 80070b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fb fa00 	bl	80024bc <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e070      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ca:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x7b0>
 80070d6:	e068      	b.n	80071aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070d8:	4b36      	ldr	r3, [pc, #216]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070de:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d031      	beq.n	8007150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f003 0203 	and.w	r2, r3, #3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d12a      	bne.n	8007150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007106:	429a      	cmp	r2, r3
 8007108:	d122      	bne.n	8007150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007116:	429a      	cmp	r2, r3
 8007118:	d11a      	bne.n	8007150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	0a5b      	lsrs	r3, r3, #9
 800711e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007128:	429a      	cmp	r2, r3
 800712a:	d111      	bne.n	8007150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d108      	bne.n	8007150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	0e1b      	lsrs	r3, r3, #24
 8007142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800714c:	429a      	cmp	r2, r3
 800714e:	d001      	beq.n	8007154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e02b      	b.n	80071ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 8007156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800715e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	429a      	cmp	r2, r3
 8007168:	d01f      	beq.n	80071aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 8007170:	f023 0301 	bic.w	r3, r3, #1
 8007174:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007176:	f7fb f9a1 	bl	80024bc <HAL_GetTick>
 800717a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800717c:	bf00      	nop
 800717e:	f7fb f99d 	bl	80024bc <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	4293      	cmp	r3, r2
 8007188:	d0f9      	beq.n	800717e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800718a:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 800718c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <HAL_RCC_OscConfig+0x8b0>)
 8007190:	4013      	ands	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007196:	00d2      	lsls	r2, r2, #3
 8007198:	4906      	ldr	r1, [pc, #24]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 800719a:	4313      	orrs	r3, r2
 800719c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <HAL_RCC_OscConfig+0x8ac>)
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3730      	adds	r7, #48	; 0x30
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	58024400 	.word	0x58024400
 80071b8:	ffff0007 	.word	0xffff0007

080071bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e19c      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071d0:	4b8a      	ldr	r3, [pc, #552]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d910      	bls.n	8007200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071de:	4b87      	ldr	r3, [pc, #540]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 020f 	bic.w	r2, r3, #15
 80071e6:	4985      	ldr	r1, [pc, #532]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ee:	4b83      	ldr	r3, [pc, #524]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e184      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d010      	beq.n	800722e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	4b7b      	ldr	r3, [pc, #492]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007218:	429a      	cmp	r2, r3
 800721a:	d908      	bls.n	800722e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800721c:	4b78      	ldr	r3, [pc, #480]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	4975      	ldr	r1, [pc, #468]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800722a:	4313      	orrs	r3, r2
 800722c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695a      	ldr	r2, [r3, #20]
 800723e:	4b70      	ldr	r3, [pc, #448]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007246:	429a      	cmp	r2, r3
 8007248:	d908      	bls.n	800725c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800724a:	4b6d      	ldr	r3, [pc, #436]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	496a      	ldr	r1, [pc, #424]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 8007258:	4313      	orrs	r3, r2
 800725a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2b00      	cmp	r3, #0
 8007266:	d010      	beq.n	800728a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	4b64      	ldr	r3, [pc, #400]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007274:	429a      	cmp	r2, r3
 8007276:	d908      	bls.n	800728a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007278:	4b61      	ldr	r3, [pc, #388]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	495e      	ldr	r1, [pc, #376]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 8007286:	4313      	orrs	r3, r2
 8007288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d010      	beq.n	80072b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69da      	ldr	r2, [r3, #28]
 800729a:	4b59      	ldr	r3, [pc, #356]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d908      	bls.n	80072b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072a6:	4b56      	ldr	r3, [pc, #344]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	4953      	ldr	r1, [pc, #332]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	4b4d      	ldr	r3, [pc, #308]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d908      	bls.n	80072e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d4:	4b4a      	ldr	r3, [pc, #296]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f023 020f 	bic.w	r2, r3, #15
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	4947      	ldr	r1, [pc, #284]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d055      	beq.n	800739e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072f2:	4b43      	ldr	r3, [pc, #268]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4940      	ldr	r1, [pc, #256]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 8007300:	4313      	orrs	r3, r2
 8007302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d107      	bne.n	800731c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800730c:	4b3c      	ldr	r3, [pc, #240]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d121      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0f6      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b03      	cmp	r3, #3
 8007322:	d107      	bne.n	8007334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d115      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0ea      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d107      	bne.n	800734c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800733c:	4b30      	ldr	r3, [pc, #192]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0de      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800734c:	4b2c      	ldr	r3, [pc, #176]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0d6      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800735c:	4b28      	ldr	r3, [pc, #160]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f023 0207 	bic.w	r2, r3, #7
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4925      	ldr	r1, [pc, #148]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800736a:	4313      	orrs	r3, r2
 800736c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736e:	f7fb f8a5 	bl	80024bc <HAL_GetTick>
 8007372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007374:	e00a      	b.n	800738c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007376:	f7fb f8a1 	bl	80024bc <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	f241 3288 	movw	r2, #5000	; 0x1388
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e0be      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738c:	4b1c      	ldr	r3, [pc, #112]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	429a      	cmp	r2, r3
 800739c:	d1eb      	bne.n	8007376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d010      	beq.n	80073cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d208      	bcs.n	80073cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f023 020f 	bic.w	r2, r3, #15
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	490e      	ldr	r1, [pc, #56]	; (8007400 <HAL_RCC_ClockConfig+0x244>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d214      	bcs.n	8007404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073da:	4b08      	ldr	r3, [pc, #32]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f023 020f 	bic.w	r2, r3, #15
 80073e2:	4906      	ldr	r1, [pc, #24]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ea:	4b04      	ldr	r3, [pc, #16]	; (80073fc <HAL_RCC_ClockConfig+0x240>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d005      	beq.n	8007404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e086      	b.n	800750a <HAL_RCC_ClockConfig+0x34e>
 80073fc:	52002000 	.word	0x52002000
 8007400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d010      	beq.n	8007432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	4b3f      	ldr	r3, [pc, #252]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800741c:	429a      	cmp	r2, r3
 800741e:	d208      	bcs.n	8007432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007420:	4b3c      	ldr	r3, [pc, #240]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	4939      	ldr	r1, [pc, #228]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 800742e:	4313      	orrs	r3, r2
 8007430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d010      	beq.n	8007460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	4b34      	ldr	r3, [pc, #208]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800744a:	429a      	cmp	r2, r3
 800744c:	d208      	bcs.n	8007460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	492e      	ldr	r1, [pc, #184]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 800745c:	4313      	orrs	r3, r2
 800745e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	4b28      	ldr	r3, [pc, #160]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007478:	429a      	cmp	r2, r3
 800747a:	d208      	bcs.n	800748e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800747c:	4b25      	ldr	r3, [pc, #148]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	4922      	ldr	r1, [pc, #136]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 800748a:	4313      	orrs	r3, r2
 800748c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69da      	ldr	r2, [r3, #28]
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d208      	bcs.n	80074bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	4917      	ldr	r1, [pc, #92]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074bc:	f000 f834 	bl	8007528 <HAL_RCC_GetSysClockFreq>
 80074c0:	4602      	mov	r2, r0
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	4912      	ldr	r1, [pc, #72]	; (8007518 <HAL_RCC_ClockConfig+0x35c>)
 80074ce:	5ccb      	ldrb	r3, [r1, r3]
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	fa22 f303 	lsr.w	r3, r2, r3
 80074d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074da:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <HAL_RCC_ClockConfig+0x358>)
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	4a0d      	ldr	r2, [pc, #52]	; (8007518 <HAL_RCC_ClockConfig+0x35c>)
 80074e4:	5cd3      	ldrb	r3, [r2, r3]
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	4a0a      	ldr	r2, [pc, #40]	; (800751c <HAL_RCC_ClockConfig+0x360>)
 80074f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <HAL_RCC_ClockConfig+0x364>)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <HAL_RCC_ClockConfig+0x368>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fa fdf2 	bl	80020e8 <HAL_InitTick>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	58024400 	.word	0x58024400
 8007518:	08014ed4 	.word	0x08014ed4
 800751c:	24000004 	.word	0x24000004
 8007520:	24000000 	.word	0x24000000
 8007524:	24000008 	.word	0x24000008

08007528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007528:	b480      	push	{r7}
 800752a:	b089      	sub	sp, #36	; 0x24
 800752c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800752e:	4bb3      	ldr	r3, [pc, #716]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007536:	2b18      	cmp	r3, #24
 8007538:	f200 8155 	bhi.w	80077e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	080075a9 	.word	0x080075a9
 8007548:	080077e7 	.word	0x080077e7
 800754c:	080077e7 	.word	0x080077e7
 8007550:	080077e7 	.word	0x080077e7
 8007554:	080077e7 	.word	0x080077e7
 8007558:	080077e7 	.word	0x080077e7
 800755c:	080077e7 	.word	0x080077e7
 8007560:	080077e7 	.word	0x080077e7
 8007564:	080075cf 	.word	0x080075cf
 8007568:	080077e7 	.word	0x080077e7
 800756c:	080077e7 	.word	0x080077e7
 8007570:	080077e7 	.word	0x080077e7
 8007574:	080077e7 	.word	0x080077e7
 8007578:	080077e7 	.word	0x080077e7
 800757c:	080077e7 	.word	0x080077e7
 8007580:	080077e7 	.word	0x080077e7
 8007584:	080075d5 	.word	0x080075d5
 8007588:	080077e7 	.word	0x080077e7
 800758c:	080077e7 	.word	0x080077e7
 8007590:	080077e7 	.word	0x080077e7
 8007594:	080077e7 	.word	0x080077e7
 8007598:	080077e7 	.word	0x080077e7
 800759c:	080077e7 	.word	0x080077e7
 80075a0:	080077e7 	.word	0x080077e7
 80075a4:	080075db 	.word	0x080075db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a8:	4b94      	ldr	r3, [pc, #592]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075b4:	4b91      	ldr	r3, [pc, #580]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	08db      	lsrs	r3, r3, #3
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	4a90      	ldr	r2, [pc, #576]	; (8007800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
 80075c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80075c6:	e111      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075c8:	4b8d      	ldr	r3, [pc, #564]	; (8007800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075ca:	61bb      	str	r3, [r7, #24]
      break;
 80075cc:	e10e      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80075ce:	4b8d      	ldr	r3, [pc, #564]	; (8007804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075d0:	61bb      	str	r3, [r7, #24]
      break;
 80075d2:	e10b      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80075d4:	4b8c      	ldr	r3, [pc, #560]	; (8007808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075d6:	61bb      	str	r3, [r7, #24]
      break;
 80075d8:	e108      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075da:	4b88      	ldr	r3, [pc, #544]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075e4:	4b85      	ldr	r3, [pc, #532]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075f0:	4b82      	ldr	r3, [pc, #520]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075fa:	4b80      	ldr	r3, [pc, #512]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80e1 	beq.w	80077e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b02      	cmp	r3, #2
 8007622:	f000 8083 	beq.w	800772c <HAL_RCC_GetSysClockFreq+0x204>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b02      	cmp	r3, #2
 800762a:	f200 80a1 	bhi.w	8007770 <HAL_RCC_GetSysClockFreq+0x248>
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_RCC_GetSysClockFreq+0x114>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d056      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800763a:	e099      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800763c:	4b6f      	ldr	r3, [pc, #444]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d02d      	beq.n	80076a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007648:	4b6c      	ldr	r3, [pc, #432]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	08db      	lsrs	r3, r3, #3
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	4a6b      	ldr	r2, [pc, #428]	; (8007800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007654:	fa22 f303 	lsr.w	r3, r2, r3
 8007658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b62      	ldr	r3, [pc, #392]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a02 	vldr	s12, [r7, #8]
 8007686:	eddf 5a61 	vldr	s11, [pc, #388]	; 800780c <HAL_RCC_GetSysClockFreq+0x2e4>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80076a2:	e087      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b51      	ldr	r3, [pc, #324]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800780c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076e6:	e065      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fa:	4b40      	ldr	r3, [pc, #256]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a02 	vldr	s12, [r7, #8]
 800770e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800780c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800772a:	e043      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b2f      	ldr	r3, [pc, #188]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007752:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800780c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800776e:	e021      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a02 	vldr	s12, [r7, #8]
 8007796:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800780c <HAL_RCC_GetSysClockFreq+0x2e4>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80077b4:	4b11      	ldr	r3, [pc, #68]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	0a5b      	lsrs	r3, r3, #9
 80077ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077be:	3301      	adds	r3, #1
 80077c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	ee07 3a90 	vmov	s15, r3
 80077c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d8:	ee17 3a90 	vmov	r3, s15
 80077dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077de:	e005      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
      break;
 80077e4:	e002      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077e6:	4b07      	ldr	r3, [pc, #28]	; (8007804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077e8:	61bb      	str	r3, [r7, #24]
      break;
 80077ea:	bf00      	nop
  }

  return sysclockfreq;
 80077ec:	69bb      	ldr	r3, [r7, #24]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3724      	adds	r7, #36	; 0x24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	03d09000 	.word	0x03d09000
 8007804:	003d0900 	.word	0x003d0900
 8007808:	007a1200 	.word	0x007a1200
 800780c:	46000000 	.word	0x46000000
 8007810:	4c742400 	.word	0x4c742400
 8007814:	4a742400 	.word	0x4a742400
 8007818:	4af42400 	.word	0x4af42400

0800781c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007822:	f7ff fe81 	bl	8007528 <HAL_RCC_GetSysClockFreq>
 8007826:	4602      	mov	r2, r0
 8007828:	4b10      	ldr	r3, [pc, #64]	; (800786c <HAL_RCC_GetHCLKFreq+0x50>)
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	0a1b      	lsrs	r3, r3, #8
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	490f      	ldr	r1, [pc, #60]	; (8007870 <HAL_RCC_GetHCLKFreq+0x54>)
 8007834:	5ccb      	ldrb	r3, [r1, r3]
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	fa22 f303 	lsr.w	r3, r2, r3
 800783e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <HAL_RCC_GetHCLKFreq+0x50>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <HAL_RCC_GetHCLKFreq+0x54>)
 800784a:	5cd3      	ldrb	r3, [r2, r3]
 800784c:	f003 031f 	and.w	r3, r3, #31
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	4a07      	ldr	r2, [pc, #28]	; (8007874 <HAL_RCC_GetHCLKFreq+0x58>)
 8007858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800785a:	4a07      	ldr	r2, [pc, #28]	; (8007878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007860:	4b04      	ldr	r3, [pc, #16]	; (8007874 <HAL_RCC_GetHCLKFreq+0x58>)
 8007862:	681b      	ldr	r3, [r3, #0]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	58024400 	.word	0x58024400
 8007870:	08014ed4 	.word	0x08014ed4
 8007874:	24000004 	.word	0x24000004
 8007878:	24000000 	.word	0x24000000

0800787c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007880:	f7ff ffcc 	bl	800781c <HAL_RCC_GetHCLKFreq>
 8007884:	4602      	mov	r2, r0
 8007886:	4b06      	ldr	r3, [pc, #24]	; (80078a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	4904      	ldr	r1, [pc, #16]	; (80078a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007892:	5ccb      	ldrb	r3, [r1, r3]
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800789c:	4618      	mov	r0, r3
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	58024400 	.word	0x58024400
 80078a4:	08014ed4 	.word	0x08014ed4

080078a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80078ac:	f7ff ffb6 	bl	800781c <HAL_RCC_GetHCLKFreq>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	4904      	ldr	r1, [pc, #16]	; (80078d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078be:	5ccb      	ldrb	r3, [r1, r3]
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	58024400 	.word	0x58024400
 80078d0:	08014ed4 	.word	0x08014ed4

080078d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	223f      	movs	r2, #63	; 0x3f
 80078e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0207 	and.w	r2, r3, #7
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80078f0:	4b17      	ldr	r3, [pc, #92]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80078fc:	4b14      	ldr	r3, [pc, #80]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007908:	4b11      	ldr	r3, [pc, #68]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007914:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <HAL_RCC_GetClockConfig+0x7c>)
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_RCC_GetClockConfig+0x80>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	58024400 	.word	0x58024400
 8007954:	52002000 	.word	0x52002000

08007958 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800795c:	b0ca      	sub	sp, #296	; 0x128
 800795e:	af00      	add	r7, sp, #0
 8007960:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800796a:	2300      	movs	r3, #0
 800796c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800797c:	2500      	movs	r5, #0
 800797e:	ea54 0305 	orrs.w	r3, r4, r5
 8007982:	d049      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800798e:	d02f      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007994:	d828      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800799a:	d01a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800799c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079a0:	d822      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80079a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079aa:	d007      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079ac:	e01c      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ae:	4bb8      	ldr	r3, [pc, #736]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	4ab7      	ldr	r2, [pc, #732]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079ba:	e01a      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	3308      	adds	r3, #8
 80079c2:	2102      	movs	r1, #2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f002 fb61 	bl	800a08c <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079d0:	e00f      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d6:	3328      	adds	r3, #40	; 0x28
 80079d8:	2102      	movs	r1, #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f002 fc08 	bl	800a1f0 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079e6:	e004      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079ee:	e000      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80079f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079fa:	4ba5      	ldr	r3, [pc, #660]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a08:	4aa1      	ldr	r2, [pc, #644]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	6513      	str	r3, [r2, #80]	; 0x50
 8007a0e:	e003      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007a24:	f04f 0900 	mov.w	r9, #0
 8007a28:	ea58 0309 	orrs.w	r3, r8, r9
 8007a2c:	d047      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d82a      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a38:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a55 	.word	0x08007a55
 8007a44:	08007a63 	.word	0x08007a63
 8007a48:	08007a79 	.word	0x08007a79
 8007a4c:	08007a97 	.word	0x08007a97
 8007a50:	08007a97 	.word	0x08007a97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4b8e      	ldr	r3, [pc, #568]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a8d      	ldr	r2, [pc, #564]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a60:	e01a      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	3308      	adds	r3, #8
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f002 fb0e 	bl	800a08c <RCCEx_PLL2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a76:	e00f      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	3328      	adds	r3, #40	; 0x28
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 fbb5 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e004      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a94:	e000      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007aa0:	4b7b      	ldr	r3, [pc, #492]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	f023 0107 	bic.w	r1, r3, #7
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	4a78      	ldr	r2, [pc, #480]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6513      	str	r3, [r2, #80]	; 0x50
 8007ab4:	e003      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007aca:	f04f 0b00 	mov.w	fp, #0
 8007ace:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ad2:	d04c      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ade:	d030      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae4:	d829      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ae8:	d02d      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007aea:	2bc0      	cmp	r3, #192	; 0xc0
 8007aec:	d825      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007aee:	2b80      	cmp	r3, #128	; 0x80
 8007af0:	d018      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007af2:	2b80      	cmp	r3, #128	; 0x80
 8007af4:	d821      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d007      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007afe:	e01c      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b00:	4b63      	ldr	r3, [pc, #396]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	4a62      	ldr	r2, [pc, #392]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b0c:	e01c      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b12:	3308      	adds	r3, #8
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f002 fab8 	bl	800a08c <RCCEx_PLL2_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b22:	e011      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b28:	3328      	adds	r3, #40	; 0x28
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f002 fb5f 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b38:	e006      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b40:	e002      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b50:	4b4f      	ldr	r3, [pc, #316]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5e:	4a4c      	ldr	r2, [pc, #304]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b60:	430b      	orrs	r3, r1
 8007b62:	6513      	str	r3, [r2, #80]	; 0x50
 8007b64:	e003      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d053      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b9a:	d035      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ba0:	d82e      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ba6:	d031      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ba8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bac:	d828      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb2:	d01a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb8:	d822      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bc2:	d007      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007bc4:	e01c      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc6:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	4a31      	ldr	r2, [pc, #196]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bd2:	e01c      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd8:	3308      	adds	r3, #8
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f002 fa55 	bl	800a08c <RCCEx_PLL2_Config>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007be8:	e011      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bee:	3328      	adds	r3, #40	; 0x28
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f002 fafc 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bfe:	e006      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c06:	e002      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c16:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c26:	4a1a      	ldr	r2, [pc, #104]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8007c2c:	e003      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007c42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007c50:	460b      	mov	r3, r1
 8007c52:	4313      	orrs	r3, r2
 8007c54:	d056      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c62:	d038      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c68:	d831      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c6e:	d034      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c74:	d82b      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c7a:	d01d      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c80:	d825      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c8c:	e01f      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c8e:	bf00      	nop
 8007c90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c94:	4ba2      	ldr	r3, [pc, #648]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	4aa1      	ldr	r2, [pc, #644]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ca0:	e01c      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 f9ee 	bl	800a08c <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cb6:	e011      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	3328      	adds	r3, #40	; 0x28
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f002 fa95 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ccc:	e006      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cd4:	e002      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10b      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ce4:	4b8e      	ldr	r3, [pc, #568]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cf4:	4a8a      	ldr	r2, [pc, #552]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8007cfa:	e003      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d14:	2300      	movs	r3, #0
 8007d16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4313      	orrs	r3, r2
 8007d22:	d03a      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2a:	2b30      	cmp	r3, #48	; 0x30
 8007d2c:	d01f      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007d2e:	2b30      	cmp	r3, #48	; 0x30
 8007d30:	d819      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d00c      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d815      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d019      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d111      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d42:	4b77      	ldr	r3, [pc, #476]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	4a76      	ldr	r2, [pc, #472]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d4e:	e011      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d54:	3308      	adds	r3, #8
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 f997 	bl	800a08c <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d64:	e006      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d6c:	e002      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d6e:	bf00      	nop
 8007d70:	e000      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d7c:	4b68      	ldr	r3, [pc, #416]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8a:	4a65      	ldr	r2, [pc, #404]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d90:	e003      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007daa:	2300      	movs	r3, #0
 8007dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007db0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d051      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc4:	d035      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dca:	d82e      	bhi.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd0:	d031      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd6:	d828      	bhi.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ddc:	d01a      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de2:	d822      	bhi.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dec:	d007      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007dee:	e01c      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4b4b      	ldr	r3, [pc, #300]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a4a      	ldr	r2, [pc, #296]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007dfc:	e01c      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e02:	3308      	adds	r3, #8
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f002 f940 	bl	800a08c <RCCEx_PLL2_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e12:	e011      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e18:	3328      	adds	r3, #40	; 0x28
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f002 f9e7 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007e22:	4603      	mov	r3, r0
 8007e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e28:	e006      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e30:	e002      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e32:	bf00      	nop
 8007e34:	e000      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e40:	4b37      	ldr	r3, [pc, #220]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4e:	4a34      	ldr	r2, [pc, #208]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6513      	str	r3, [r2, #80]	; 0x50
 8007e54:	e003      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	d056      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e88:	d033      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8e:	d82c      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e94:	d02f      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007e96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e9a:	d826      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ea0:	d02b      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ea6:	d820      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eac:	d012      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb2:	d81a      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d022      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ebc:	d115      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f002 f8e0 	bl	800a08c <RCCEx_PLL2_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e015      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed8:	3328      	adds	r3, #40	; 0x28
 8007eda:	2101      	movs	r1, #1
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 f987 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ee8:	e00a      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e004      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10d      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f16:	4a02      	ldr	r2, [pc, #8]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6513      	str	r3, [r2, #80]	; 0x50
 8007f1c:	e006      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f1e:	bf00      	nop
 8007f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	d055      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f58:	d033      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f5e:	d82c      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f64:	d02f      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d826      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f70:	d02b      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f76:	d820      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7c:	d012      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f82:	d81a      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d022      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f8c:	d115      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f92:	3308      	adds	r3, #8
 8007f94:	2101      	movs	r1, #1
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f878 	bl	800a08c <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fa2:	e015      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa8:	3328      	adds	r3, #40	; 0x28
 8007faa:	2101      	movs	r1, #1
 8007fac:	4618      	mov	r0, r3
 8007fae:	f002 f91f 	bl	800a1f0 <RCCEx_PLL3_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fb8:	e00a      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fc0:	e006      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fc2:	bf00      	nop
 8007fc4:	e004      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fc6:	bf00      	nop
 8007fc8:	e002      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10b      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fd8:	4ba3      	ldr	r3, [pc, #652]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fdc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fe8:	4a9f      	ldr	r2, [pc, #636]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fea:	430b      	orrs	r3, r1
 8007fec:	6593      	str	r3, [r2, #88]	; 0x58
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800800e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d037      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008022:	d00e      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008028:	d816      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800802e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008032:	d111      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008034:	4b8c      	ldr	r3, [pc, #560]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4a8b      	ldr	r2, [pc, #556]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008040:	e00f      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008046:	3308      	adds	r3, #8
 8008048:	2101      	movs	r1, #1
 800804a:	4618      	mov	r0, r3
 800804c:	f002 f81e 	bl	800a08c <RCCEx_PLL2_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008056:	e004      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800806a:	4b7f      	ldr	r3, [pc, #508]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800806c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	4a7b      	ldr	r2, [pc, #492]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800807a:	430b      	orrs	r3, r1
 800807c:	6513      	str	r3, [r2, #80]	; 0x50
 800807e:	e003      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008098:	2300      	movs	r3, #0
 800809a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800809e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4313      	orrs	r3, r2
 80080a6:	d039      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d81c      	bhi.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080f5 	.word	0x080080f5
 80080bc:	080080c9 	.word	0x080080c9
 80080c0:	080080d7 	.word	0x080080d7
 80080c4:	080080f5 	.word	0x080080f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c8:	4b67      	ldr	r3, [pc, #412]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a66      	ldr	r2, [pc, #408]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080d4:	e00f      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080da:	3308      	adds	r3, #8
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 ffd4 	bl	800a08c <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080ea:	e004      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080f2:	e000      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80080f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080fe:	4b5a      	ldr	r3, [pc, #360]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008102:	f023 0103 	bic.w	r1, r3, #3
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800810c:	4a56      	ldr	r2, [pc, #344]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800810e:	430b      	orrs	r3, r1
 8008110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008112:	e003      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800812c:	2300      	movs	r3, #0
 800812e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	f000 809f 	beq.w	800827c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800813e:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a4a      	ldr	r2, [pc, #296]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800814a:	f7fa f9b7 	bl	80024bc <HAL_GetTick>
 800814e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008152:	e00b      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008154:	f7fa f9b2 	bl	80024bc <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b64      	cmp	r3, #100	; 0x64
 8008162:	d903      	bls.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800816a:	e005      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800816c:	4b3f      	ldr	r3, [pc, #252]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0ed      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800817c:	2b00      	cmp	r3, #0
 800817e:	d179      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008180:	4b39      	ldr	r3, [pc, #228]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800818c:	4053      	eors	r3, r2
 800818e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008192:	2b00      	cmp	r3, #0
 8008194:	d015      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008196:	4b34      	ldr	r3, [pc, #208]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081a2:	4b31      	ldr	r3, [pc, #196]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a6:	4a30      	ldr	r2, [pc, #192]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081ae:	4b2e      	ldr	r3, [pc, #184]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b2:	4a2d      	ldr	r2, [pc, #180]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081ba:	4a2b      	ldr	r2, [pc, #172]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ce:	d118      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d0:	f7fa f974 	bl	80024bc <HAL_GetTick>
 80081d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081d8:	e00d      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081da:	f7fa f96f 	bl	80024bc <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80081e4:	1ad2      	subs	r2, r2, r3
 80081e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d903      	bls.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80081f4:	e005      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081f6:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0eb      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008206:	2b00      	cmp	r3, #0
 8008208:	d129      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800821a:	d10e      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800821c:	4b12      	ldr	r3, [pc, #72]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800822c:	091a      	lsrs	r2, r3, #4
 800822e:	4b10      	ldr	r3, [pc, #64]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008230:	4013      	ands	r3, r2
 8008232:	4a0d      	ldr	r2, [pc, #52]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008234:	430b      	orrs	r3, r1
 8008236:	6113      	str	r3, [r2, #16]
 8008238:	e005      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800823a:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008244:	6113      	str	r3, [r2, #16]
 8008246:	4b08      	ldr	r3, [pc, #32]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008248:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008256:	4a04      	ldr	r2, [pc, #16]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6713      	str	r3, [r2, #112]	; 0x70
 800825c:	e00e      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800825e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008266:	e009      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008268:	58024400 	.word	0x58024400
 800826c:	58024800 	.word	0x58024800
 8008270:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f002 0301 	and.w	r3, r2, #1
 8008288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008292:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	f000 8089 	beq.w	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a4:	2b28      	cmp	r3, #40	; 0x28
 80082a6:	d86b      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	08008389 	.word	0x08008389
 80082b4:	08008381 	.word	0x08008381
 80082b8:	08008381 	.word	0x08008381
 80082bc:	08008381 	.word	0x08008381
 80082c0:	08008381 	.word	0x08008381
 80082c4:	08008381 	.word	0x08008381
 80082c8:	08008381 	.word	0x08008381
 80082cc:	08008381 	.word	0x08008381
 80082d0:	08008355 	.word	0x08008355
 80082d4:	08008381 	.word	0x08008381
 80082d8:	08008381 	.word	0x08008381
 80082dc:	08008381 	.word	0x08008381
 80082e0:	08008381 	.word	0x08008381
 80082e4:	08008381 	.word	0x08008381
 80082e8:	08008381 	.word	0x08008381
 80082ec:	08008381 	.word	0x08008381
 80082f0:	0800836b 	.word	0x0800836b
 80082f4:	08008381 	.word	0x08008381
 80082f8:	08008381 	.word	0x08008381
 80082fc:	08008381 	.word	0x08008381
 8008300:	08008381 	.word	0x08008381
 8008304:	08008381 	.word	0x08008381
 8008308:	08008381 	.word	0x08008381
 800830c:	08008381 	.word	0x08008381
 8008310:	08008389 	.word	0x08008389
 8008314:	08008381 	.word	0x08008381
 8008318:	08008381 	.word	0x08008381
 800831c:	08008381 	.word	0x08008381
 8008320:	08008381 	.word	0x08008381
 8008324:	08008381 	.word	0x08008381
 8008328:	08008381 	.word	0x08008381
 800832c:	08008381 	.word	0x08008381
 8008330:	08008389 	.word	0x08008389
 8008334:	08008381 	.word	0x08008381
 8008338:	08008381 	.word	0x08008381
 800833c:	08008381 	.word	0x08008381
 8008340:	08008381 	.word	0x08008381
 8008344:	08008381 	.word	0x08008381
 8008348:	08008381 	.word	0x08008381
 800834c:	08008381 	.word	0x08008381
 8008350:	08008389 	.word	0x08008389
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008358:	3308      	adds	r3, #8
 800835a:	2101      	movs	r1, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fe95 	bl	800a08c <RCCEx_PLL2_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008368:	e00f      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	3328      	adds	r3, #40	; 0x28
 8008370:	2101      	movs	r1, #1
 8008372:	4618      	mov	r0, r3
 8008374:	f001 ff3c 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800837e:	e004      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008386:	e000      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008392:	4bbf      	ldr	r3, [pc, #764]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800839a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a0:	4abb      	ldr	r2, [pc, #748]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083a2:	430b      	orrs	r3, r1
 80083a4:	6553      	str	r3, [r2, #84]	; 0x54
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f002 0302 	and.w	r3, r2, #2
 80083bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083c0:	2300      	movs	r3, #0
 80083c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80083ca:	460b      	mov	r3, r1
 80083cc:	4313      	orrs	r3, r2
 80083ce:	d041      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d824      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	0800842d 	.word	0x0800842d
 80083e4:	080083f9 	.word	0x080083f9
 80083e8:	0800840f 	.word	0x0800840f
 80083ec:	0800842d 	.word	0x0800842d
 80083f0:	0800842d 	.word	0x0800842d
 80083f4:	0800842d 	.word	0x0800842d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	3308      	adds	r3, #8
 80083fe:	2101      	movs	r1, #1
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fe43 	bl	800a08c <RCCEx_PLL2_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800840c:	e00f      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008412:	3328      	adds	r3, #40	; 0x28
 8008414:	2101      	movs	r1, #1
 8008416:	4618      	mov	r0, r3
 8008418:	f001 feea 	bl	800a1f0 <RCCEx_PLL3_Config>
 800841c:	4603      	mov	r3, r0
 800841e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008422:	e004      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800842a:	e000      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800842c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800842e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008436:	4b96      	ldr	r3, [pc, #600]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	f023 0107 	bic.w	r1, r3, #7
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008444:	4a92      	ldr	r2, [pc, #584]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008446:	430b      	orrs	r3, r1
 8008448:	6553      	str	r3, [r2, #84]	; 0x54
 800844a:	e003      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008450:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f002 0304 	and.w	r3, r2, #4
 8008460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008464:	2300      	movs	r3, #0
 8008466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800846a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800846e:	460b      	mov	r3, r1
 8008470:	4313      	orrs	r3, r2
 8008472:	d044      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800847c:	2b05      	cmp	r3, #5
 800847e:	d825      	bhi.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084d5 	.word	0x080084d5
 800848c:	080084a1 	.word	0x080084a1
 8008490:	080084b7 	.word	0x080084b7
 8008494:	080084d5 	.word	0x080084d5
 8008498:	080084d5 	.word	0x080084d5
 800849c:	080084d5 	.word	0x080084d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a4:	3308      	adds	r3, #8
 80084a6:	2101      	movs	r1, #1
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 fdef 	bl	800a08c <RCCEx_PLL2_Config>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084b4:	e00f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ba:	3328      	adds	r3, #40	; 0x28
 80084bc:	2101      	movs	r1, #1
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 fe96 	bl	800a1f0 <RCCEx_PLL3_Config>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084ca:	e004      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80084d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084de:	4b6c      	ldr	r3, [pc, #432]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	f023 0107 	bic.w	r1, r3, #7
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ee:	4a68      	ldr	r2, [pc, #416]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	6593      	str	r3, [r2, #88]	; 0x58
 80084f4:	e003      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f002 0320 	and.w	r3, r2, #32
 800850a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800850e:	2300      	movs	r3, #0
 8008510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008518:	460b      	mov	r3, r1
 800851a:	4313      	orrs	r3, r2
 800851c:	d055      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800852a:	d033      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800852c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008530:	d82c      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008536:	d02f      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853c:	d826      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800853e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008542:	d02b      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008548:	d820      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800854e:	d012      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008554:	d81a      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d022      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800855a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800855e:	d115      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008564:	3308      	adds	r3, #8
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f001 fd8f 	bl	800a08c <RCCEx_PLL2_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008574:	e015      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857a:	3328      	adds	r3, #40	; 0x28
 800857c:	2102      	movs	r1, #2
 800857e:	4618      	mov	r0, r3
 8008580:	f001 fe36 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800858a:	e00a      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008592:	e006      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008594:	bf00      	nop
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008598:	bf00      	nop
 800859a:	e002      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085aa:	4b39      	ldr	r3, [pc, #228]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ba:	4a35      	ldr	r2, [pc, #212]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6553      	str	r3, [r2, #84]	; 0x54
 80085c0:	e003      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80085d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085da:	2300      	movs	r3, #0
 80085dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4313      	orrs	r3, r2
 80085e8:	d058      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085f6:	d033      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80085f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085fc:	d82c      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008602:	d02f      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008608:	d826      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800860a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800860e:	d02b      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008614:	d820      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800861a:	d012      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008620:	d81a      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862a:	d115      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008630:	3308      	adds	r3, #8
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fd29 	bl	800a08c <RCCEx_PLL2_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008640:	e015      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008646:	3328      	adds	r3, #40	; 0x28
 8008648:	2102      	movs	r1, #2
 800864a:	4618      	mov	r0, r3
 800864c:	f001 fdd0 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008656:	e00a      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800865e:	e006      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008660:	bf00      	nop
 8008662:	e004      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008664:	bf00      	nop
 8008666:	e002      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800866c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10e      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008686:	4a02      	ldr	r2, [pc, #8]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008688:	430b      	orrs	r3, r1
 800868a:	6593      	str	r3, [r2, #88]	; 0x58
 800868c:	e006      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800868e:	bf00      	nop
 8008690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800869c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80086a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086ac:	2300      	movs	r3, #0
 80086ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80086b6:	460b      	mov	r3, r1
 80086b8:	4313      	orrs	r3, r2
 80086ba:	d055      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80086bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086c8:	d033      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80086ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086ce:	d82c      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d4:	d02f      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80086d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086da:	d826      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086e0:	d02b      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80086e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086e6:	d820      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ec:	d012      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80086ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f2:	d81a      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d022      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80086f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fc:	d115      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008702:	3308      	adds	r3, #8
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fcc0 	bl	800a08c <RCCEx_PLL2_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008712:	e015      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008718:	3328      	adds	r3, #40	; 0x28
 800871a:	2102      	movs	r1, #2
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fd67 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008728:	e00a      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008730:	e006      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008732:	bf00      	nop
 8008734:	e004      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008736:	bf00      	nop
 8008738:	e002      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800873a:	bf00      	nop
 800873c:	e000      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800873e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10b      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008748:	4ba1      	ldr	r3, [pc, #644]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800874a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008758:	4a9d      	ldr	r2, [pc, #628]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800875a:	430b      	orrs	r3, r1
 800875c:	6593      	str	r3, [r2, #88]	; 0x58
 800875e:	e003      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f002 0308 	and.w	r3, r2, #8
 8008774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800877e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008782:	460b      	mov	r3, r1
 8008784:	4313      	orrs	r3, r2
 8008786:	d01e      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800878c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008794:	d10c      	bne.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879a:	3328      	adds	r3, #40	; 0x28
 800879c:	2102      	movs	r1, #2
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 fd26 	bl	800a1f0 <RCCEx_PLL3_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087b0:	4b87      	ldr	r3, [pc, #540]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c0:	4a83      	ldr	r2, [pc, #524]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c2:	430b      	orrs	r3, r1
 80087c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f002 0310 	and.w	r3, r2, #16
 80087d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d01e      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f2:	d10c      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f8:	3328      	adds	r3, #40	; 0x28
 80087fa:	2102      	movs	r1, #2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fcf7 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800880e:	4b70      	ldr	r3, [pc, #448]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800881e:	4a6c      	ldr	r2, [pc, #432]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008820:	430b      	orrs	r3, r1
 8008822:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008834:	2300      	movs	r3, #0
 8008836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800883a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800883e:	460b      	mov	r3, r1
 8008840:	4313      	orrs	r3, r2
 8008842:	d03e      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800884c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008850:	d022      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008856:	d81b      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008860:	d00b      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008862:	e015      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008868:	3308      	adds	r3, #8
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f001 fc0d 	bl	800a08c <RCCEx_PLL2_Config>
 8008872:	4603      	mov	r3, r0
 8008874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008878:	e00f      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887e:	3328      	adds	r3, #40	; 0x28
 8008880:	2102      	movs	r1, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fcb4 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800888e:	e004      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008896:	e000      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10b      	bne.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088a2:	4b4b      	ldr	r3, [pc, #300]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088b2:	4a47      	ldr	r2, [pc, #284]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6593      	str	r3, [r2, #88]	; 0x58
 80088b8:	e003      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80088ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80088d0:	2300      	movs	r3, #0
 80088d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80088d8:	460b      	mov	r3, r1
 80088da:	4313      	orrs	r3, r2
 80088dc:	d03b      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088ea:	d01f      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80088ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088f0:	d818      	bhi.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80088f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f6:	d003      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80088f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088fc:	d007      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80088fe:	e011      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008900:	4b33      	ldr	r3, [pc, #204]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	4a32      	ldr	r2, [pc, #200]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800890c:	e00f      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008912:	3328      	adds	r3, #40	; 0x28
 8008914:	2101      	movs	r1, #1
 8008916:	4618      	mov	r0, r3
 8008918:	f001 fc6a 	bl	800a1f0 <RCCEx_PLL3_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008922:	e004      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800892a:	e000      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800892c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008936:	4b26      	ldr	r3, [pc, #152]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008946:	4a22      	ldr	r2, [pc, #136]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008948:	430b      	orrs	r3, r1
 800894a:	6553      	str	r3, [r2, #84]	; 0x54
 800894c:	e003      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008962:	673b      	str	r3, [r7, #112]	; 0x70
 8008964:	2300      	movs	r3, #0
 8008966:	677b      	str	r3, [r7, #116]	; 0x74
 8008968:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800896c:	460b      	mov	r3, r1
 800896e:	4313      	orrs	r3, r2
 8008970:	d034      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800897c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008980:	d007      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008982:	e011      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008984:	4b12      	ldr	r3, [pc, #72]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a11      	ldr	r2, [pc, #68]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008990:	e00e      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008996:	3308      	adds	r3, #8
 8008998:	2102      	movs	r1, #2
 800899a:	4618      	mov	r0, r3
 800899c:	f001 fb76 	bl	800a08c <RCCEx_PLL2_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089a6:	e003      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10d      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089b8:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c6:	4a02      	ldr	r2, [pc, #8]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089c8:	430b      	orrs	r3, r1
 80089ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089cc:	e006      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80089ce:	bf00      	nop
 80089d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80089e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80089ea:	2300      	movs	r3, #0
 80089ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80089f2:	460b      	mov	r3, r1
 80089f4:	4313      	orrs	r3, r2
 80089f6:	d00c      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fc:	3328      	adds	r3, #40	; 0x28
 80089fe:	2102      	movs	r1, #2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 fbf5 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8008a20:	2300      	movs	r3, #0
 8008a22:	667b      	str	r3, [r7, #100]	; 0x64
 8008a24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	d038      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a3a:	d018      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a40:	d811      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a46:	d014      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4c:	d80b      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d011      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	d106      	bne.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a58:	4bc3      	ldr	r3, [pc, #780]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4ac2      	ldr	r2, [pc, #776]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a64:	e008      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a6c:	e004      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a6e:	bf00      	nop
 8008a70:	e002      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a72:	bf00      	nop
 8008a74:	e000      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10b      	bne.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a80:	4bb9      	ldr	r3, [pc, #740]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a90:	4ab5      	ldr	r2, [pc, #724]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a92:	430b      	orrs	r3, r1
 8008a94:	6553      	str	r3, [r2, #84]	; 0x54
 8008a96:	e003      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aae:	2300      	movs	r3, #0
 8008ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008abc:	4baa      	ldr	r3, [pc, #680]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aca:	4aa7      	ldr	r2, [pc, #668]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008adc:	653b      	str	r3, [r7, #80]	; 0x50
 8008ade:	2300      	movs	r3, #0
 8008ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	d00a      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008aec:	4b9e      	ldr	r3, [pc, #632]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008afc:	4a9a      	ldr	r2, [pc, #616]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008afe:	430b      	orrs	r3, r1
 8008b00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b10:	2300      	movs	r3, #0
 8008b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b1e:	4b92      	ldr	r3, [pc, #584]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b22:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b2c:	4a8e      	ldr	r2, [pc, #568]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b40:	2300      	movs	r3, #0
 8008b42:	647b      	str	r3, [r7, #68]	; 0x44
 8008b44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	d00e      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b4e:	4b86      	ldr	r3, [pc, #536]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	4a85      	ldr	r2, [pc, #532]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b58:	6113      	str	r3, [r2, #16]
 8008b5a:	4b83      	ldr	r3, [pc, #524]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5c:	6919      	ldr	r1, [r3, #16]
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b66:	4a80      	ldr	r2, [pc, #512]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d009      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b88:	4b77      	ldr	r3, [pc, #476]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b96:	4a74      	ldr	r2, [pc, #464]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8008baa:	2300      	movs	r3, #0
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34
 8008bae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	d00a      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bb8:	4b6b      	ldr	r3, [pc, #428]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bc8:	4a67      	ldr	r2, [pc, #412]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d011      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bee:	3308      	adds	r3, #8
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fa4a 	bl	800a08c <RCCEx_PLL2_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	2100      	movs	r1, #0
 8008c18:	6239      	str	r1, [r7, #32]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c24:	460b      	mov	r3, r1
 8008c26:	4313      	orrs	r3, r2
 8008c28:	d011      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2e:	3308      	adds	r3, #8
 8008c30:	2101      	movs	r1, #1
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 fa2a 	bl	800a08c <RCCEx_PLL2_Config>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	2100      	movs	r1, #0
 8008c58:	61b9      	str	r1, [r7, #24]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c64:	460b      	mov	r3, r1
 8008c66:	4313      	orrs	r3, r2
 8008c68:	d011      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6e:	3308      	adds	r3, #8
 8008c70:	2102      	movs	r1, #2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 fa0a 	bl	800a08c <RCCEx_PLL2_Config>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	2100      	movs	r1, #0
 8008c98:	6139      	str	r1, [r7, #16]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	d011      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cae:	3328      	adds	r3, #40	; 0x28
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 fa9c 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	d011      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	3328      	adds	r3, #40	; 0x28
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 fa7c 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	2100      	movs	r1, #0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	607b      	str	r3, [r7, #4]
 8008d20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d24:	460b      	mov	r3, r1
 8008d26:	4313      	orrs	r3, r2
 8008d28:	d011      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2e:	3328      	adds	r3, #40	; 0x28
 8008d30:	2102      	movs	r1, #2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 fa5c 	bl	800a1f0 <RCCEx_PLL3_Config>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008d4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008d62:	46bd      	mov	sp, r7
 8008d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d68:	58024400 	.word	0x58024400

08008d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b090      	sub	sp, #64	; 0x40
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	f040 8094 	bne.w	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d84:	4b9e      	ldr	r3, [pc, #632]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	f200 8087 	bhi.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008db1 	.word	0x08008db1
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008e01 	.word	0x08008e01
 8008da8:	08008e9d 	.word	0x08008e9d
 8008dac:	08008e29 	.word	0x08008e29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008db0:	4b93      	ldr	r3, [pc, #588]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dbc:	d108      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f810 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dcc:	f000 bd45 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd4:	f000 bd41 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dd8:	4b89      	ldr	r3, [pc, #548]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008de4:	d108      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de6:	f107 0318 	add.w	r3, r7, #24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fd54 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df4:	f000 bd31 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dfc:	f000 bd2d 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e00:	4b7f      	ldr	r3, [pc, #508]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0c:	d108      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0e:	f107 030c 	add.w	r3, r7, #12
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fe94 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1c:	f000 bd1d 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e24:	f000 bd19 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e28:	4b75      	ldr	r3, [pc, #468]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e32:	4b73      	ldr	r3, [pc, #460]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d10c      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e44:	4b6e      	ldr	r3, [pc, #440]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	08db      	lsrs	r3, r3, #3
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	4a6d      	ldr	r2, [pc, #436]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e56:	e01f      	b.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e58:	4b69      	ldr	r3, [pc, #420]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e64:	d106      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e6c:	d102      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e6e:	4b66      	ldr	r3, [pc, #408]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e72:	e011      	b.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e74:	4b62      	ldr	r3, [pc, #392]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e80:	d106      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e88:	d102      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e8a:	4b60      	ldr	r3, [pc, #384]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e8e:	e003      	b.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008e94:	f000 bce1 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e98:	f000 bcdf 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e9c:	4b5c      	ldr	r3, [pc, #368]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea0:	f000 bcdb 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea8:	f000 bcd7 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	f040 80ad 	bne.w	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008eba:	4b51      	ldr	r3, [pc, #324]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008ec2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eca:	d056      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed2:	f200 8090 	bhi.w	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	2bc0      	cmp	r3, #192	; 0xc0
 8008eda:	f000 8088 	beq.w	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ee2:	f200 8088 	bhi.w	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	2b80      	cmp	r3, #128	; 0x80
 8008eea:	d032      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	2b80      	cmp	r3, #128	; 0x80
 8008ef0:	f200 8081 	bhi.w	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	2b40      	cmp	r3, #64	; 0x40
 8008efe:	d014      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008f00:	e079      	b.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f02:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0e:	d108      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 ff67 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f1e:	f000 bc9c 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f26:	f000 bc98 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f2a:	4b35      	ldr	r3, [pc, #212]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f36:	d108      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f38:	f107 0318 	add.w	r3, r7, #24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fcab 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f46:	f000 bc88 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f4e:	f000 bc84 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f52:	4b2b      	ldr	r3, [pc, #172]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5e:	d108      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fdeb 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6e:	f000 bc74 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f76:	f000 bc70 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f7a:	4b21      	ldr	r3, [pc, #132]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f84:	4b1e      	ldr	r3, [pc, #120]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d10c      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f96:	4b1a      	ldr	r3, [pc, #104]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	08db      	lsrs	r3, r3, #3
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	4a18      	ldr	r2, [pc, #96]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e01f      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008faa:	4b15      	ldr	r3, [pc, #84]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb6:	d106      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc4:	e011      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc6:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fda:	d102      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fdc:	4b0b      	ldr	r3, [pc, #44]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe0:	e003      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fe6:	f000 bc38 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fea:	f000 bc36 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff2:	f000 bc32 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ffa:	f000 bc2e 	b.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ffe:	bf00      	nop
 8009000:	58024400 	.word	0x58024400
 8009004:	03d09000 	.word	0x03d09000
 8009008:	003d0900 	.word	0x003d0900
 800900c:	007a1200 	.word	0x007a1200
 8009010:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009018:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800901c:	430b      	orrs	r3, r1
 800901e:	f040 809c 	bne.w	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009022:	4b9e      	ldr	r3, [pc, #632]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009026:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800902a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009032:	d054      	beq.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800903a:	f200 808b 	bhi.w	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009044:	f000 8083 	beq.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800904e:	f200 8081 	bhi.w	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009058:	d02f      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009060:	d878      	bhi.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800906e:	d012      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009070:	e070      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009072:	4b8a      	ldr	r3, [pc, #552]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800907a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800907e:	d107      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009084:	4618      	mov	r0, r3
 8009086:	f000 feaf 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908e:	e3e4      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009094:	e3e1      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009096:	4b81      	ldr	r3, [pc, #516]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a2:	d107      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a4:	f107 0318 	add.w	r3, r7, #24
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fbf5 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b2:	e3d2      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b8:	e3cf      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090ba:	4b78      	ldr	r3, [pc, #480]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c6:	d107      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c8:	f107 030c 	add.w	r3, r7, #12
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fd37 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d6:	e3c0      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090dc:	e3bd      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090de:	4b6f      	ldr	r3, [pc, #444]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090e8:	4b6c      	ldr	r3, [pc, #432]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d10c      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80090f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090fa:	4b68      	ldr	r3, [pc, #416]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	08db      	lsrs	r3, r3, #3
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	4a66      	ldr	r2, [pc, #408]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009106:	fa22 f303 	lsr.w	r3, r2, r3
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800910c:	e01e      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800910e:	4b63      	ldr	r3, [pc, #396]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911a:	d106      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800911c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009122:	d102      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009124:	4b5f      	ldr	r3, [pc, #380]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009128:	e010      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800912a:	4b5c      	ldr	r3, [pc, #368]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009136:	d106      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913e:	d102      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009140:	4b59      	ldr	r3, [pc, #356]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009144:	e002      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800914a:	e386      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800914c:	e385      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800914e:	4b57      	ldr	r3, [pc, #348]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009152:	e382      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009158:	e37f      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800915a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800915e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009162:	430b      	orrs	r3, r1
 8009164:	f040 80a7 	bne.w	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009168:	4b4c      	ldr	r3, [pc, #304]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800916a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009170:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009178:	d055      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009180:	f200 8096 	bhi.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800918a:	f000 8084 	beq.w	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009194:	f200 808c 	bhi.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919e:	d030      	beq.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a6:	f200 8083 	bhi.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091b6:	d012      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80091b8:	e07a      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ba:	4b38      	ldr	r3, [pc, #224]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fe0b 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d6:	e340      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091dc:	e33d      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091de:	4b2f      	ldr	r3, [pc, #188]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ea:	d107      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ec:	f107 0318 	add.w	r3, r7, #24
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fb51 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091fa:	e32e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009200:	e32b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009202:	4b26      	ldr	r3, [pc, #152]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800920a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800920e:	d107      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009210:	f107 030c 	add.w	r3, r7, #12
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fc93 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921e:	e31c      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009224:	e319      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009226:	4b1d      	ldr	r3, [pc, #116]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800922e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009230:	4b1a      	ldr	r3, [pc, #104]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b04      	cmp	r3, #4
 800923a:	d10c      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009242:	4b16      	ldr	r3, [pc, #88]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	4a14      	ldr	r2, [pc, #80]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009254:	e01e      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009256:	4b11      	ldr	r3, [pc, #68]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009262:	d106      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800926a:	d102      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800926c:	4b0d      	ldr	r3, [pc, #52]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009270:	e010      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800927e:	d106      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009286:	d102      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009288:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800928a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800928c:	e002      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009292:	e2e2      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009294:	e2e1      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009296:	4b05      	ldr	r3, [pc, #20]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800929a:	e2de      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	003d0900 	.word	0x003d0900
 80092a8:	007a1200 	.word	0x007a1200
 80092ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b4:	e2d1      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80092b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80092be:	430b      	orrs	r3, r1
 80092c0:	f040 809c 	bne.w	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80092c4:	4b93      	ldr	r3, [pc, #588]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80092cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092d4:	d054      	beq.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092dc:	f200 808b 	bhi.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092e6:	f000 8083 	beq.w	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092f0:	f200 8081 	bhi.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092fa:	d02f      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009302:	d878      	bhi.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009310:	d012      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009312:	e070      	b.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009314:	4b7f      	ldr	r3, [pc, #508]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009320:	d107      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fd5e 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009330:	e293      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009336:	e290      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009338:	4b76      	ldr	r3, [pc, #472]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009344:	d107      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009346:	f107 0318 	add.w	r3, r7, #24
 800934a:	4618      	mov	r0, r3
 800934c:	f000 faa4 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009354:	e281      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800935a:	e27e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800935c:	4b6d      	ldr	r3, [pc, #436]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009368:	d107      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936a:	f107 030c 	add.w	r3, r7, #12
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fbe6 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009378:	e26f      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800937e:	e26c      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009380:	4b64      	ldr	r3, [pc, #400]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009388:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800938a:	4b62      	ldr	r3, [pc, #392]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d10c      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800939c:	4b5d      	ldr	r3, [pc, #372]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	4a5c      	ldr	r2, [pc, #368]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	e01e      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b0:	4b58      	ldr	r3, [pc, #352]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093bc:	d106      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c4:	d102      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093c6:	4b55      	ldr	r3, [pc, #340]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ca:	e010      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093cc:	4b51      	ldr	r3, [pc, #324]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d8:	d106      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80093da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e0:	d102      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093e2:	4b4f      	ldr	r3, [pc, #316]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e6:	e002      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093ec:	e235      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093ee:	e234      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093f0:	4b4c      	ldr	r3, [pc, #304]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f4:	e231      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fa:	e22e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80093fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009400:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009404:	430b      	orrs	r3, r1
 8009406:	f040 808f 	bne.w	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800940a:	4b42      	ldr	r3, [pc, #264]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800940c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009412:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800941a:	d06b      	beq.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009422:	d874      	bhi.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800942a:	d056      	beq.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009432:	d86c      	bhi.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800943a:	d03b      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009442:	d864      	bhi.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800944a:	d021      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009452:	d85c      	bhi.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009460:	d004      	beq.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009462:	e054      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009464:	f7fe fa0a 	bl	800787c <HAL_RCC_GetPCLK1Freq>
 8009468:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800946a:	e1f6      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800946c:	4b29      	ldr	r3, [pc, #164]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009478:	d107      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947a:	f107 0318 	add.w	r3, r7, #24
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fa0a 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009488:	e1e7      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800948e:	e1e4      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009490:	4b20      	ldr	r3, [pc, #128]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800949c:	d107      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800949e:	f107 030c 	add.w	r3, r7, #12
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fb4c 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ac:	e1d5      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b2:	e1d2      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094b4:	4b17      	ldr	r3, [pc, #92]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d109      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094c0:	4b14      	ldr	r3, [pc, #80]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	08db      	lsrs	r3, r3, #3
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	4a13      	ldr	r2, [pc, #76]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094cc:	fa22 f303 	lsr.w	r3, r2, r3
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d2:	e1c2      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d8:	e1bf      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094da:	4b0e      	ldr	r3, [pc, #56]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e6:	d102      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ec:	e1b5      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f2:	e1b2      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094f4:	4b07      	ldr	r3, [pc, #28]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009500:	d102      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009506:	e1a8      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800950c:	e1a5      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009512:	e1a2      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009514:	58024400 	.word	0x58024400
 8009518:	03d09000 	.word	0x03d09000
 800951c:	003d0900 	.word	0x003d0900
 8009520:	007a1200 	.word	0x007a1200
 8009524:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009530:	430b      	orrs	r3, r1
 8009532:	d173      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009534:	4b9c      	ldr	r3, [pc, #624]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800953c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009544:	d02f      	beq.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800954c:	d863      	bhi.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800955a:	d012      	beq.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800955c:	e05b      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800955e:	4b92      	ldr	r3, [pc, #584]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800956a:	d107      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800956c:	f107 0318 	add.w	r3, r7, #24
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f991 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800957a:	e16e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009580:	e16b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009582:	4b89      	ldr	r3, [pc, #548]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800958a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800958e:	d107      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009590:	f107 030c 	add.w	r3, r7, #12
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fad3 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959e:	e15c      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a4:	e159      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095a6:	4b80      	ldr	r3, [pc, #512]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095b0:	4b7d      	ldr	r3, [pc, #500]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d10c      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80095bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c2:	4b79      	ldr	r3, [pc, #484]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	08db      	lsrs	r3, r3, #3
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	4a77      	ldr	r2, [pc, #476]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80095ce:	fa22 f303 	lsr.w	r3, r2, r3
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d4:	e01e      	b.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095d6:	4b74      	ldr	r3, [pc, #464]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e2:	d106      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80095e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ea:	d102      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095ec:	4b70      	ldr	r3, [pc, #448]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095f0:	e010      	b.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095f2:	4b6d      	ldr	r3, [pc, #436]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095fe:	d106      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009606:	d102      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009608:	4b6a      	ldr	r3, [pc, #424]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960c:	e002      	b.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009612:	e122      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009614:	e121      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800961a:	e11e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800961c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009620:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009624:	430b      	orrs	r3, r1
 8009626:	d133      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009628:	4b5f      	ldr	r3, [pc, #380]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800962a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009630:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800963e:	d012      	beq.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009640:	e023      	b.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009642:	4b59      	ldr	r3, [pc, #356]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800964e:	d107      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fbc7 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800965e:	e0fc      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009664:	e0f9      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009666:	4b50      	ldr	r3, [pc, #320]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800966e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009672:	d107      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009674:	f107 0318 	add.w	r3, r7, #24
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f90d 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009682:	e0ea      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009688:	e0e7      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800968e:	e0e4      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009694:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009698:	430b      	orrs	r3, r1
 800969a:	f040 808d 	bne.w	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800969e:	4b42      	ldr	r3, [pc, #264]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ae:	d06b      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096b6:	d874      	bhi.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096be:	d056      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c6:	d86c      	bhi.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096ce:	d03b      	beq.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096d6:	d864      	bhi.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096de:	d021      	beq.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e6:	d85c      	bhi.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096f4:	d004      	beq.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80096f6:	e054      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80096f8:	f000 f8b8 	bl	800986c <HAL_RCCEx_GetD3PCLK1Freq>
 80096fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80096fe:	e0ac      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009700:	4b29      	ldr	r3, [pc, #164]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800970c:	d107      	bne.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800970e:	f107 0318 	add.w	r3, r7, #24
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f8c0 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800971c:	e09d      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009722:	e09a      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009724:	4b20      	ldr	r3, [pc, #128]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800972c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009730:	d107      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fa02 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009740:	e08b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009746:	e088      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009748:	4b17      	ldr	r3, [pc, #92]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b04      	cmp	r3, #4
 8009752:	d109      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009754:	4b14      	ldr	r3, [pc, #80]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	08db      	lsrs	r3, r3, #3
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	4a13      	ldr	r2, [pc, #76]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009760:	fa22 f303 	lsr.w	r3, r2, r3
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009766:	e078      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976c:	e075      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800976e:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800977a:	d102      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800977c:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009780:	e06b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009786:	e068      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009788:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009794:	d102      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009796:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800979a:	e05e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a0:	e05b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a6:	e058      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097a8:	58024400 	.word	0x58024400
 80097ac:	03d09000 	.word	0x03d09000
 80097b0:	003d0900 	.word	0x003d0900
 80097b4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80097c0:	430b      	orrs	r3, r1
 80097c2:	d148      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097c4:	4b27      	ldr	r3, [pc, #156]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d4:	d02a      	beq.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097dc:	d838      	bhi.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ea:	d00d      	beq.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80097ec:	e030      	b.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097fa:	d102      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009800:	e02b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009806:	e028      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009808:	4b16      	ldr	r3, [pc, #88]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009814:	d107      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fae4 	bl	8009de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009824:	e019      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800982a:	e016      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009838:	d107      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983a:	f107 0318 	add.w	r3, r7, #24
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f82a 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009848:	e007      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800984e:	e004      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009854:	e001      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800985a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800985c:	4618      	mov	r0, r3
 800985e:	3740      	adds	r7, #64	; 0x40
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	58024400 	.word	0x58024400
 8009868:	007a1200 	.word	0x007a1200

0800986c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009870:	f7fd ffd4 	bl	800781c <HAL_RCC_GetHCLKFreq>
 8009874:	4602      	mov	r2, r0
 8009876:	4b06      	ldr	r3, [pc, #24]	; (8009890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	091b      	lsrs	r3, r3, #4
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	4904      	ldr	r1, [pc, #16]	; (8009894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009882:	5ccb      	ldrb	r3, [r1, r3]
 8009884:	f003 031f 	and.w	r3, r3, #31
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800988c:	4618      	mov	r0, r3
 800988e:	bd80      	pop	{r7, pc}
 8009890:	58024400 	.word	0x58024400
 8009894:	08014ed4 	.word	0x08014ed4

08009898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009898:	b480      	push	{r7}
 800989a:	b089      	sub	sp, #36	; 0x24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098a0:	4ba1      	ldr	r3, [pc, #644]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	f003 0303 	and.w	r3, r3, #3
 80098a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80098aa:	4b9f      	ldr	r3, [pc, #636]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	0b1b      	lsrs	r3, r3, #12
 80098b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098b6:	4b9c      	ldr	r3, [pc, #624]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ba:	091b      	lsrs	r3, r3, #4
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80098c2:	4b99      	ldr	r3, [pc, #612]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c6:	08db      	lsrs	r3, r3, #3
 80098c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	fb02 f303 	mul.w	r3, r2, r3
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8111 	beq.w	8009b08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	f000 8083 	beq.w	80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	f200 80a1 	bhi.w	8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d056      	beq.n	80099b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009902:	e099      	b.n	8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009904:	4b88      	ldr	r3, [pc, #544]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0320 	and.w	r3, r3, #32
 800990c:	2b00      	cmp	r3, #0
 800990e:	d02d      	beq.n	800996c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009910:	4b85      	ldr	r3, [pc, #532]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	08db      	lsrs	r3, r3, #3
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	4a84      	ldr	r2, [pc, #528]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993a:	4b7b      	ldr	r3, [pc, #492]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994a:	ed97 6a03 	vldr	s12, [r7, #12]
 800994e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800996a:	e087      	b.n	8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997e:	4b6a      	ldr	r3, [pc, #424]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ae:	e065      	b.n	8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c2:	4b59      	ldr	r3, [pc, #356]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f2:	e043      	b.n	8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a06:	4b48      	ldr	r3, [pc, #288]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a36:	e021      	b.n	8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4a:	4b37      	ldr	r3, [pc, #220]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a7c:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a80:	0a5b      	lsrs	r3, r3, #9
 8009a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa2:	ee17 2a90 	vmov	r2, s15
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009aaa:	4b1f      	ldr	r3, [pc, #124]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	0c1b      	lsrs	r3, r3, #16
 8009ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad0:	ee17 2a90 	vmov	r2, s15
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ad8:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	0e1b      	lsrs	r3, r3, #24
 8009ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009afe:	ee17 2a90 	vmov	r2, s15
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b06:	e008      	b.n	8009b1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	609a      	str	r2, [r3, #8]
}
 8009b1a:	bf00      	nop
 8009b1c:	3724      	adds	r7, #36	; 0x24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	58024400 	.word	0x58024400
 8009b2c:	03d09000 	.word	0x03d09000
 8009b30:	46000000 	.word	0x46000000
 8009b34:	4c742400 	.word	0x4c742400
 8009b38:	4a742400 	.word	0x4a742400
 8009b3c:	4af42400 	.word	0x4af42400

08009b40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b089      	sub	sp, #36	; 0x24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b48:	4ba1      	ldr	r3, [pc, #644]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009b52:	4b9f      	ldr	r3, [pc, #636]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	0d1b      	lsrs	r3, r3, #20
 8009b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b5e:	4b9c      	ldr	r3, [pc, #624]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b6a:	4b99      	ldr	r3, [pc, #612]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	08db      	lsrs	r3, r3, #3
 8009b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	fb02 f303 	mul.w	r3, r2, r3
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 8111 	beq.w	8009db0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	f000 8083 	beq.w	8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	f200 80a1 	bhi.w	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d056      	beq.n	8009c58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009baa:	e099      	b.n	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bac:	4b88      	ldr	r3, [pc, #544]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0320 	and.w	r3, r3, #32
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d02d      	beq.n	8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bb8:	4b85      	ldr	r3, [pc, #532]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	08db      	lsrs	r3, r3, #3
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	4a84      	ldr	r2, [pc, #528]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	ee07 3a90 	vmov	s15, r3
 8009bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be2:	4b7b      	ldr	r3, [pc, #492]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c12:	e087      	b.n	8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c26:	4b6a      	ldr	r3, [pc, #424]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c56:	e065      	b.n	8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6a:	4b59      	ldr	r3, [pc, #356]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c9a:	e043      	b.n	8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cae:	4b48      	ldr	r3, [pc, #288]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cde:	e021      	b.n	8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf2:	4b37      	ldr	r3, [pc, #220]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009d24:	4b2a      	ldr	r3, [pc, #168]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	0a5b      	lsrs	r3, r3, #9
 8009d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	ee17 2a90 	vmov	r2, s15
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009d52:	4b1f      	ldr	r3, [pc, #124]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	0c1b      	lsrs	r3, r3, #16
 8009d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5c:	ee07 3a90 	vmov	s15, r3
 8009d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d78:	ee17 2a90 	vmov	r2, s15
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d80:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d84:	0e1b      	lsrs	r3, r3, #24
 8009d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da6:	ee17 2a90 	vmov	r2, s15
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009dae:	e008      	b.n	8009dc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	609a      	str	r2, [r3, #8]
}
 8009dc2:	bf00      	nop
 8009dc4:	3724      	adds	r7, #36	; 0x24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	03d09000 	.word	0x03d09000
 8009dd8:	46000000 	.word	0x46000000
 8009ddc:	4c742400 	.word	0x4c742400
 8009de0:	4a742400 	.word	0x4a742400
 8009de4:	4af42400 	.word	0x4af42400

08009de8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b089      	sub	sp, #36	; 0x24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009df0:	4ba0      	ldr	r3, [pc, #640]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	f003 0303 	and.w	r3, r3, #3
 8009df8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009dfa:	4b9e      	ldr	r3, [pc, #632]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	091b      	lsrs	r3, r3, #4
 8009e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009e06:	4b9b      	ldr	r3, [pc, #620]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e10:	4b98      	ldr	r3, [pc, #608]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	08db      	lsrs	r3, r3, #3
 8009e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	fb02 f303 	mul.w	r3, r2, r3
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8111 	beq.w	800a056 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	f000 8083 	beq.w	8009f42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	f200 80a1 	bhi.w	8009f86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d056      	beq.n	8009efe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e50:	e099      	b.n	8009f86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e52:	4b88      	ldr	r3, [pc, #544]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02d      	beq.n	8009eba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e5e:	4b85      	ldr	r3, [pc, #532]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	08db      	lsrs	r3, r3, #3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	4a83      	ldr	r2, [pc, #524]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	ee07 3a90 	vmov	s15, r3
 8009e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e88:	4b7a      	ldr	r3, [pc, #488]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e90:	ee07 3a90 	vmov	s15, r3
 8009e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009eb8:	e087      	b.n	8009fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ecc:	4b69      	ldr	r3, [pc, #420]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed4:	ee07 3a90 	vmov	s15, r3
 8009ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009edc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009efc:	e065      	b.n	8009fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a084 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f10:	4b58      	ldr	r3, [pc, #352]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f18:	ee07 3a90 	vmov	s15, r3
 8009f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f20:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f40:	e043      	b.n	8009fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a088 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f54:	4b47      	ldr	r3, [pc, #284]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f84:	e021      	b.n	8009fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f98:	4b36      	ldr	r3, [pc, #216]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa0:	ee07 3a90 	vmov	s15, r3
 8009fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	0a5b      	lsrs	r3, r3, #9
 8009fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd4:	ee07 3a90 	vmov	s15, r3
 8009fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff0:	ee17 2a90 	vmov	r2, s15
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009ff8:	4b1e      	ldr	r3, [pc, #120]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffc:	0c1b      	lsrs	r3, r3, #16
 8009ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a002:	ee07 3a90 	vmov	s15, r3
 800a006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a012:	edd7 6a07 	vldr	s13, [r7, #28]
 800a016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a01e:	ee17 2a90 	vmov	r2, s15
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a026:	4b13      	ldr	r3, [pc, #76]	; (800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	0e1b      	lsrs	r3, r3, #24
 800a02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a030:	ee07 3a90 	vmov	s15, r3
 800a034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a03c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a040:	edd7 6a07 	vldr	s13, [r7, #28]
 800a044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a04c:	ee17 2a90 	vmov	r2, s15
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a054:	e008      	b.n	800a068 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	609a      	str	r2, [r3, #8]
}
 800a068:	bf00      	nop
 800a06a:	3724      	adds	r7, #36	; 0x24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	58024400 	.word	0x58024400
 800a078:	03d09000 	.word	0x03d09000
 800a07c:	46000000 	.word	0x46000000
 800a080:	4c742400 	.word	0x4c742400
 800a084:	4a742400 	.word	0x4a742400
 800a088:	4af42400 	.word	0x4af42400

0800a08c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a09a:	4b53      	ldr	r3, [pc, #332]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	f003 0303 	and.w	r3, r3, #3
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d101      	bne.n	800a0aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e099      	b.n	800a1de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0aa:	4b4f      	ldr	r3, [pc, #316]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a4e      	ldr	r2, [pc, #312]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a0b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b6:	f7f8 fa01 	bl	80024bc <HAL_GetTick>
 800a0ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0bc:	e008      	b.n	800a0d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0be:	f7f8 f9fd 	bl	80024bc <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e086      	b.n	800a1de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0d0:	4b45      	ldr	r3, [pc, #276]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f0      	bne.n	800a0be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0dc:	4b42      	ldr	r3, [pc, #264]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	031b      	lsls	r3, r3, #12
 800a0ea:	493f      	ldr	r1, [pc, #252]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	628b      	str	r3, [r1, #40]	; 0x28
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	025b      	lsls	r3, r3, #9
 800a102:	b29b      	uxth	r3, r3
 800a104:	431a      	orrs	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	3b01      	subs	r3, #1
 800a11a:	061b      	lsls	r3, r3, #24
 800a11c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a120:	4931      	ldr	r1, [pc, #196]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a122:	4313      	orrs	r3, r2
 800a124:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a126:	4b30      	ldr	r3, [pc, #192]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	492d      	ldr	r1, [pc, #180]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a134:	4313      	orrs	r3, r2
 800a136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a138:	4b2b      	ldr	r3, [pc, #172]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	f023 0220 	bic.w	r2, r3, #32
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	4928      	ldr	r1, [pc, #160]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a146:	4313      	orrs	r3, r2
 800a148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a14a:	4b27      	ldr	r3, [pc, #156]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	4a26      	ldr	r2, [pc, #152]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a150:	f023 0310 	bic.w	r3, r3, #16
 800a154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a156:	4b24      	ldr	r3, [pc, #144]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <RCCEx_PLL2_Config+0x160>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	69d2      	ldr	r2, [r2, #28]
 800a162:	00d2      	lsls	r2, r2, #3
 800a164:	4920      	ldr	r1, [pc, #128]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a166:	4313      	orrs	r3, r2
 800a168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a16a:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	4a1e      	ldr	r2, [pc, #120]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a170:	f043 0310 	orr.w	r3, r3, #16
 800a174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d106      	bne.n	800a18a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a17c:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a180:	4a19      	ldr	r2, [pc, #100]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a186:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a188:	e00f      	b.n	800a1aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d106      	bne.n	800a19e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a190:	4b15      	ldr	r3, [pc, #84]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	4a14      	ldr	r2, [pc, #80]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a19c:	e005      	b.n	800a1aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a19e:	4b12      	ldr	r3, [pc, #72]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	4a11      	ldr	r2, [pc, #68]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a1a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1aa:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a0e      	ldr	r2, [pc, #56]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a1b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b6:	f7f8 f981 	bl	80024bc <HAL_GetTick>
 800a1ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1bc:	e008      	b.n	800a1d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1be:	f7f8 f97d 	bl	80024bc <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d901      	bls.n	800a1d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e006      	b.n	800a1de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <RCCEx_PLL2_Config+0x15c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0f0      	beq.n	800a1be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	ffff0007 	.word	0xffff0007

0800a1f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1fe:	4b53      	ldr	r3, [pc, #332]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	2b03      	cmp	r3, #3
 800a208:	d101      	bne.n	800a20e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e099      	b.n	800a342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a20e:	4b4f      	ldr	r3, [pc, #316]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a4e      	ldr	r2, [pc, #312]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a21a:	f7f8 f94f 	bl	80024bc <HAL_GetTick>
 800a21e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a220:	e008      	b.n	800a234 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a222:	f7f8 f94b 	bl	80024bc <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e086      	b.n	800a342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a234:	4b45      	ldr	r3, [pc, #276]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1f0      	bne.n	800a222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a240:	4b42      	ldr	r3, [pc, #264]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a244:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	051b      	lsls	r3, r3, #20
 800a24e:	493f      	ldr	r1, [pc, #252]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a250:	4313      	orrs	r3, r2
 800a252:	628b      	str	r3, [r1, #40]	; 0x28
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	3b01      	subs	r3, #1
 800a25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	3b01      	subs	r3, #1
 800a264:	025b      	lsls	r3, r3, #9
 800a266:	b29b      	uxth	r3, r3
 800a268:	431a      	orrs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	3b01      	subs	r3, #1
 800a270:	041b      	lsls	r3, r3, #16
 800a272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	061b      	lsls	r3, r3, #24
 800a280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a284:	4931      	ldr	r1, [pc, #196]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a286:	4313      	orrs	r3, r2
 800a288:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a28a:	4b30      	ldr	r3, [pc, #192]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	492d      	ldr	r1, [pc, #180]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a29c:	4b2b      	ldr	r3, [pc, #172]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	4928      	ldr	r1, [pc, #160]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2ae:	4b27      	ldr	r3, [pc, #156]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b2:	4a26      	ldr	r2, [pc, #152]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2ba:	4b24      	ldr	r3, [pc, #144]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2be:	4b24      	ldr	r3, [pc, #144]	; (800a350 <RCCEx_PLL3_Config+0x160>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	69d2      	ldr	r2, [r2, #28]
 800a2c6:	00d2      	lsls	r2, r2, #3
 800a2c8:	4920      	ldr	r1, [pc, #128]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2ce:	4b1f      	ldr	r3, [pc, #124]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	4a1e      	ldr	r2, [pc, #120]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d106      	bne.n	800a2ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2e0:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	4a19      	ldr	r2, [pc, #100]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2ec:	e00f      	b.n	800a30e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d106      	bne.n	800a302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2f4:	4b15      	ldr	r3, [pc, #84]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	4a14      	ldr	r2, [pc, #80]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a2fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a300:	e005      	b.n	800a30e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	4a11      	ldr	r2, [pc, #68]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a30c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a0e      	ldr	r2, [pc, #56]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31a:	f7f8 f8cf 	bl	80024bc <HAL_GetTick>
 800a31e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a320:	e008      	b.n	800a334 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a322:	f7f8 f8cb 	bl	80024bc <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d901      	bls.n	800a334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e006      	b.n	800a342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <RCCEx_PLL3_Config+0x15c>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0f0      	beq.n	800a322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	58024400 	.word	0x58024400
 800a350:	ffff0007 	.word	0xffff0007

0800a354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e049      	b.n	800a3fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7f7 fc1c 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f000 fd0a 	bl	800adac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b01      	cmp	r3, #1
 800a416:	d001      	beq.n	800a41c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e054      	b.n	800a4c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0201 	orr.w	r2, r2, #1
 800a432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a26      	ldr	r2, [pc, #152]	; (800a4d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d022      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a446:	d01d      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a22      	ldr	r2, [pc, #136]	; (800a4d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d018      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a21      	ldr	r2, [pc, #132]	; (800a4dc <HAL_TIM_Base_Start_IT+0xd8>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d013      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00e      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1e      	ldr	r2, [pc, #120]	; (800a4e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d009      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a1c      	ldr	r2, [pc, #112]	; (800a4e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d004      	beq.n	800a484 <HAL_TIM_Base_Start_IT+0x80>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a1b      	ldr	r2, [pc, #108]	; (800a4ec <HAL_TIM_Base_Start_IT+0xe8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d115      	bne.n	800a4b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	4b19      	ldr	r3, [pc, #100]	; (800a4f0 <HAL_TIM_Base_Start_IT+0xec>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b06      	cmp	r3, #6
 800a494:	d015      	beq.n	800a4c2 <HAL_TIM_Base_Start_IT+0xbe>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a49c:	d011      	beq.n	800a4c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f042 0201 	orr.w	r2, r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ae:	e008      	b.n	800a4c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0201 	orr.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	e000      	b.n	800a4c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	40010000 	.word	0x40010000
 800a4d8:	40000400 	.word	0x40000400
 800a4dc:	40000800 	.word	0x40000800
 800a4e0:	40000c00 	.word	0x40000c00
 800a4e4:	40010400 	.word	0x40010400
 800a4e8:	40001800 	.word	0x40001800
 800a4ec:	40014000 	.word	0x40014000
 800a4f0:	00010007 	.word	0x00010007

0800a4f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e049      	b.n	800a59a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f841 	bl	800a5a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3304      	adds	r3, #4
 800a530:	4619      	mov	r1, r3
 800a532:	4610      	mov	r0, r2
 800a534:	f000 fc3a 	bl	800adac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5aa:	bf00      	nop
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e08f      	b.n	800a6ec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d106      	bne.n	800a5e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7f7 fb3d 	bl	8001c60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6899      	ldr	r1, [r3, #8]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	4b3e      	ldr	r3, [pc, #248]	; (800a6f4 <HAL_TIM_Encoder_Init+0x13c>)
 800a5fa:	400b      	ands	r3, r1
 800a5fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f000 fbcf 	bl	800adac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	4b31      	ldr	r3, [pc, #196]	; (800a6f8 <HAL_TIM_Encoder_Init+0x140>)
 800a634:	4013      	ands	r3, r2
 800a636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	4313      	orrs	r3, r2
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	4313      	orrs	r3, r2
 800a648:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4b2b      	ldr	r3, [pc, #172]	; (800a6fc <HAL_TIM_Encoder_Init+0x144>)
 800a64e:	4013      	ands	r3, r2
 800a650:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4b2a      	ldr	r3, [pc, #168]	; (800a700 <HAL_TIM_Encoder_Init+0x148>)
 800a656:	4013      	ands	r3, r2
 800a658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	4313      	orrs	r3, r2
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	4313      	orrs	r3, r2
 800a66a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	011a      	lsls	r2, r3, #4
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	031b      	lsls	r3, r3, #12
 800a678:	4313      	orrs	r3, r2
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a686:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a68e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	4313      	orrs	r3, r2
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	fffebff8 	.word	0xfffebff8
 800a6f8:	fffffcfc 	.word	0xfffffcfc
 800a6fc:	fffff3f3 	.word	0xfffff3f3
 800a700:	ffff0f0f 	.word	0xffff0f0f

0800a704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b02      	cmp	r3, #2
 800a718:	d122      	bne.n	800a760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f003 0302 	and.w	r3, r3, #2
 800a724:	2b02      	cmp	r3, #2
 800a726:	d11b      	bne.n	800a760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f06f 0202 	mvn.w	r2, #2
 800a730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fb12 	bl	800ad70 <HAL_TIM_IC_CaptureCallback>
 800a74c:	e005      	b.n	800a75a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fb04 	bl	800ad5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fb15 	bl	800ad84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d122      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d11b      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0204 	mvn.w	r2, #4
 800a784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2202      	movs	r2, #2
 800a78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fae8 	bl	800ad70 <HAL_TIM_IC_CaptureCallback>
 800a7a0:	e005      	b.n	800a7ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fada 	bl	800ad5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 faeb 	bl	800ad84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d122      	bne.n	800a808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0308 	and.w	r3, r3, #8
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d11b      	bne.n	800a808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0208 	mvn.w	r2, #8
 800a7d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2204      	movs	r2, #4
 800a7de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	f003 0303 	and.w	r3, r3, #3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fabe 	bl	800ad70 <HAL_TIM_IC_CaptureCallback>
 800a7f4:	e005      	b.n	800a802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fab0 	bl	800ad5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fac1 	bl	800ad84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	f003 0310 	and.w	r3, r3, #16
 800a812:	2b10      	cmp	r3, #16
 800a814:	d122      	bne.n	800a85c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b10      	cmp	r3, #16
 800a822:	d11b      	bne.n	800a85c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f06f 0210 	mvn.w	r2, #16
 800a82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2208      	movs	r2, #8
 800a832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa94 	bl	800ad70 <HAL_TIM_IC_CaptureCallback>
 800a848:	e005      	b.n	800a856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa86 	bl	800ad5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fa97 	bl	800ad84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10e      	bne.n	800a888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b01      	cmp	r3, #1
 800a876:	d107      	bne.n	800a888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0201 	mvn.w	r2, #1
 800a880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7f7 f8d6 	bl	8001a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a892:	2b80      	cmp	r3, #128	; 0x80
 800a894:	d10e      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a0:	2b80      	cmp	r3, #128	; 0x80
 800a8a2:	d107      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 ff22 	bl	800b6f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8c2:	d10e      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ce:	2b80      	cmp	r3, #128	; 0x80
 800a8d0:	d107      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 ff15 	bl	800b70c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b40      	cmp	r3, #64	; 0x40
 800a8ee:	d10e      	bne.n	800a90e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fa:	2b40      	cmp	r3, #64	; 0x40
 800a8fc:	d107      	bne.n	800a90e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fa45 	bl	800ad98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	f003 0320 	and.w	r3, r3, #32
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d10e      	bne.n	800a93a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b20      	cmp	r3, #32
 800a928:	d107      	bne.n	800a93a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f06f 0220 	mvn.w	r2, #32
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fed5 	bl	800b6e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a95e:	2302      	movs	r3, #2
 800a960:	e0ff      	b.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b14      	cmp	r3, #20
 800a96e:	f200 80f0 	bhi.w	800ab52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a972:	a201      	add	r2, pc, #4	; (adr r2, 800a978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a9cd 	.word	0x0800a9cd
 800a97c:	0800ab53 	.word	0x0800ab53
 800a980:	0800ab53 	.word	0x0800ab53
 800a984:	0800ab53 	.word	0x0800ab53
 800a988:	0800aa0d 	.word	0x0800aa0d
 800a98c:	0800ab53 	.word	0x0800ab53
 800a990:	0800ab53 	.word	0x0800ab53
 800a994:	0800ab53 	.word	0x0800ab53
 800a998:	0800aa4f 	.word	0x0800aa4f
 800a99c:	0800ab53 	.word	0x0800ab53
 800a9a0:	0800ab53 	.word	0x0800ab53
 800a9a4:	0800ab53 	.word	0x0800ab53
 800a9a8:	0800aa8f 	.word	0x0800aa8f
 800a9ac:	0800ab53 	.word	0x0800ab53
 800a9b0:	0800ab53 	.word	0x0800ab53
 800a9b4:	0800ab53 	.word	0x0800ab53
 800a9b8:	0800aad1 	.word	0x0800aad1
 800a9bc:	0800ab53 	.word	0x0800ab53
 800a9c0:	0800ab53 	.word	0x0800ab53
 800a9c4:	0800ab53 	.word	0x0800ab53
 800a9c8:	0800ab11 	.word	0x0800ab11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68b9      	ldr	r1, [r7, #8]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fa84 	bl	800aee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	699a      	ldr	r2, [r3, #24]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0208 	orr.w	r2, r2, #8
 800a9e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	699a      	ldr	r2, [r3, #24]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 0204 	bic.w	r2, r2, #4
 800a9f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6999      	ldr	r1, [r3, #24]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	691a      	ldr	r2, [r3, #16]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	619a      	str	r2, [r3, #24]
      break;
 800aa0a:	e0a5      	b.n	800ab58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 faf4 	bl	800b000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699a      	ldr	r2, [r3, #24]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6999      	ldr	r1, [r3, #24]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	021a      	lsls	r2, r3, #8
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	619a      	str	r2, [r3, #24]
      break;
 800aa4c:	e084      	b.n	800ab58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 fb5d 	bl	800b114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69da      	ldr	r2, [r3, #28]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f042 0208 	orr.w	r2, r2, #8
 800aa68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	69da      	ldr	r2, [r3, #28]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0204 	bic.w	r2, r2, #4
 800aa78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	69d9      	ldr	r1, [r3, #28]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	691a      	ldr	r2, [r3, #16]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	61da      	str	r2, [r3, #28]
      break;
 800aa8c:	e064      	b.n	800ab58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fbc5 	bl	800b224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69da      	ldr	r2, [r3, #28]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	69da      	ldr	r2, [r3, #28]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69d9      	ldr	r1, [r3, #28]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	021a      	lsls	r2, r3, #8
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	61da      	str	r2, [r3, #28]
      break;
 800aace:	e043      	b.n	800ab58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fc0e 	bl	800b2f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f042 0208 	orr.w	r2, r2, #8
 800aaea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f022 0204 	bic.w	r2, r2, #4
 800aafa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	691a      	ldr	r2, [r3, #16]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	430a      	orrs	r2, r1
 800ab0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab0e:	e023      	b.n	800ab58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fc52 	bl	800b3c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	021a      	lsls	r2, r3, #8
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	430a      	orrs	r2, r1
 800ab4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab50:	e002      	b.n	800ab58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	75fb      	strb	r3, [r7, #23]
      break;
 800ab56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop

0800ab6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d101      	bne.n	800ab88 <HAL_TIM_ConfigClockSource+0x1c>
 800ab84:	2302      	movs	r3, #2
 800ab86:	e0dc      	b.n	800ad42 <HAL_TIM_ConfigClockSource+0x1d6>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2202      	movs	r2, #2
 800ab94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	4b6a      	ldr	r3, [pc, #424]	; (800ad4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800aba4:	4013      	ands	r3, r2
 800aba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a64      	ldr	r2, [pc, #400]	; (800ad50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	f000 80a9 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800abc4:	4a62      	ldr	r2, [pc, #392]	; (800ad50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	f200 80ae 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800abcc:	4a61      	ldr	r2, [pc, #388]	; (800ad54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	f000 80a1 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800abd4:	4a5f      	ldr	r2, [pc, #380]	; (800ad54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	f200 80a6 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800abdc:	4a5e      	ldr	r2, [pc, #376]	; (800ad58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	f000 8099 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800abe4:	4a5c      	ldr	r2, [pc, #368]	; (800ad58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	f200 809e 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800abec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abf0:	f000 8091 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800abf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abf8:	f200 8096 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800abfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac00:	f000 8089 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac08:	f200 808e 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac10:	d03e      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x124>
 800ac12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac16:	f200 8087 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac1e:	f000 8086 	beq.w	800ad2e <HAL_TIM_ConfigClockSource+0x1c2>
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	d87f      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac28:	2b70      	cmp	r3, #112	; 0x70
 800ac2a:	d01a      	beq.n	800ac62 <HAL_TIM_ConfigClockSource+0xf6>
 800ac2c:	2b70      	cmp	r3, #112	; 0x70
 800ac2e:	d87b      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac30:	2b60      	cmp	r3, #96	; 0x60
 800ac32:	d050      	beq.n	800acd6 <HAL_TIM_ConfigClockSource+0x16a>
 800ac34:	2b60      	cmp	r3, #96	; 0x60
 800ac36:	d877      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac38:	2b50      	cmp	r3, #80	; 0x50
 800ac3a:	d03c      	beq.n	800acb6 <HAL_TIM_ConfigClockSource+0x14a>
 800ac3c:	2b50      	cmp	r3, #80	; 0x50
 800ac3e:	d873      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac40:	2b40      	cmp	r3, #64	; 0x40
 800ac42:	d058      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x18a>
 800ac44:	2b40      	cmp	r3, #64	; 0x40
 800ac46:	d86f      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac48:	2b30      	cmp	r3, #48	; 0x30
 800ac4a:	d064      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac4c:	2b30      	cmp	r3, #48	; 0x30
 800ac4e:	d86b      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d060      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d867      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d05c      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d05a      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac60:	e062      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac72:	f000 fc89 	bl	800b588 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	609a      	str	r2, [r3, #8]
      break;
 800ac8e:	e04f      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aca0:	f000 fc72 	bl	800b588 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689a      	ldr	r2, [r3, #8]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acb2:	609a      	str	r2, [r3, #8]
      break;
 800acb4:	e03c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acc2:	461a      	mov	r2, r3
 800acc4:	f000 fbe2 	bl	800b48c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2150      	movs	r1, #80	; 0x50
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 fc3c 	bl	800b54c <TIM_ITRx_SetConfig>
      break;
 800acd4:	e02c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ace2:	461a      	mov	r2, r3
 800ace4:	f000 fc01 	bl	800b4ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2160      	movs	r1, #96	; 0x60
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fc2c 	bl	800b54c <TIM_ITRx_SetConfig>
      break;
 800acf4:	e01c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad02:	461a      	mov	r2, r3
 800ad04:	f000 fbc2 	bl	800b48c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2140      	movs	r1, #64	; 0x40
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fc1c 	bl	800b54c <TIM_ITRx_SetConfig>
      break;
 800ad14:	e00c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f000 fc13 	bl	800b54c <TIM_ITRx_SetConfig>
      break;
 800ad26:	e003      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	ffceff88 	.word	0xffceff88
 800ad50:	00100040 	.word	0x00100040
 800ad54:	00100030 	.word	0x00100030
 800ad58:	00100020 	.word	0x00100020

0800ad5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a40      	ldr	r2, [pc, #256]	; (800aec0 <TIM_Base_SetConfig+0x114>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d013      	beq.n	800adec <TIM_Base_SetConfig+0x40>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adca:	d00f      	beq.n	800adec <TIM_Base_SetConfig+0x40>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a3d      	ldr	r2, [pc, #244]	; (800aec4 <TIM_Base_SetConfig+0x118>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d00b      	beq.n	800adec <TIM_Base_SetConfig+0x40>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a3c      	ldr	r2, [pc, #240]	; (800aec8 <TIM_Base_SetConfig+0x11c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d007      	beq.n	800adec <TIM_Base_SetConfig+0x40>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a3b      	ldr	r2, [pc, #236]	; (800aecc <TIM_Base_SetConfig+0x120>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d003      	beq.n	800adec <TIM_Base_SetConfig+0x40>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a3a      	ldr	r2, [pc, #232]	; (800aed0 <TIM_Base_SetConfig+0x124>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d108      	bne.n	800adfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a2f      	ldr	r2, [pc, #188]	; (800aec0 <TIM_Base_SetConfig+0x114>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d01f      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae0c:	d01b      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a2c      	ldr	r2, [pc, #176]	; (800aec4 <TIM_Base_SetConfig+0x118>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d017      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a2b      	ldr	r2, [pc, #172]	; (800aec8 <TIM_Base_SetConfig+0x11c>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d013      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a2a      	ldr	r2, [pc, #168]	; (800aecc <TIM_Base_SetConfig+0x120>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d00f      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a29      	ldr	r2, [pc, #164]	; (800aed0 <TIM_Base_SetConfig+0x124>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00b      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a28      	ldr	r2, [pc, #160]	; (800aed4 <TIM_Base_SetConfig+0x128>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d007      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a27      	ldr	r2, [pc, #156]	; (800aed8 <TIM_Base_SetConfig+0x12c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d003      	beq.n	800ae46 <TIM_Base_SetConfig+0x9a>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a26      	ldr	r2, [pc, #152]	; (800aedc <TIM_Base_SetConfig+0x130>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d108      	bne.n	800ae58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	689a      	ldr	r2, [r3, #8]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a10      	ldr	r2, [pc, #64]	; (800aec0 <TIM_Base_SetConfig+0x114>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d00f      	beq.n	800aea4 <TIM_Base_SetConfig+0xf8>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a12      	ldr	r2, [pc, #72]	; (800aed0 <TIM_Base_SetConfig+0x124>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d00b      	beq.n	800aea4 <TIM_Base_SetConfig+0xf8>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a11      	ldr	r2, [pc, #68]	; (800aed4 <TIM_Base_SetConfig+0x128>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d007      	beq.n	800aea4 <TIM_Base_SetConfig+0xf8>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a10      	ldr	r2, [pc, #64]	; (800aed8 <TIM_Base_SetConfig+0x12c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d003      	beq.n	800aea4 <TIM_Base_SetConfig+0xf8>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a0f      	ldr	r2, [pc, #60]	; (800aedc <TIM_Base_SetConfig+0x130>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d103      	bne.n	800aeac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	691a      	ldr	r2, [r3, #16]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	615a      	str	r2, [r3, #20]
}
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40010000 	.word	0x40010000
 800aec4:	40000400 	.word	0x40000400
 800aec8:	40000800 	.word	0x40000800
 800aecc:	40000c00 	.word	0x40000c00
 800aed0:	40010400 	.word	0x40010400
 800aed4:	40014000 	.word	0x40014000
 800aed8:	40014400 	.word	0x40014400
 800aedc:	40014800 	.word	0x40014800

0800aee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	f023 0201 	bic.w	r2, r3, #1
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4b37      	ldr	r3, [pc, #220]	; (800afe8 <TIM_OC1_SetConfig+0x108>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f023 0303 	bic.w	r3, r3, #3
 800af16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f023 0302 	bic.w	r3, r3, #2
 800af28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	4313      	orrs	r3, r2
 800af32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a2d      	ldr	r2, [pc, #180]	; (800afec <TIM_OC1_SetConfig+0x10c>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d00f      	beq.n	800af5c <TIM_OC1_SetConfig+0x7c>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a2c      	ldr	r2, [pc, #176]	; (800aff0 <TIM_OC1_SetConfig+0x110>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00b      	beq.n	800af5c <TIM_OC1_SetConfig+0x7c>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a2b      	ldr	r2, [pc, #172]	; (800aff4 <TIM_OC1_SetConfig+0x114>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d007      	beq.n	800af5c <TIM_OC1_SetConfig+0x7c>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a2a      	ldr	r2, [pc, #168]	; (800aff8 <TIM_OC1_SetConfig+0x118>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d003      	beq.n	800af5c <TIM_OC1_SetConfig+0x7c>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a29      	ldr	r2, [pc, #164]	; (800affc <TIM_OC1_SetConfig+0x11c>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d10c      	bne.n	800af76 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f023 0308 	bic.w	r3, r3, #8
 800af62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f023 0304 	bic.w	r3, r3, #4
 800af74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a1c      	ldr	r2, [pc, #112]	; (800afec <TIM_OC1_SetConfig+0x10c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d00f      	beq.n	800af9e <TIM_OC1_SetConfig+0xbe>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a1b      	ldr	r2, [pc, #108]	; (800aff0 <TIM_OC1_SetConfig+0x110>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00b      	beq.n	800af9e <TIM_OC1_SetConfig+0xbe>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a1a      	ldr	r2, [pc, #104]	; (800aff4 <TIM_OC1_SetConfig+0x114>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d007      	beq.n	800af9e <TIM_OC1_SetConfig+0xbe>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a19      	ldr	r2, [pc, #100]	; (800aff8 <TIM_OC1_SetConfig+0x118>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d003      	beq.n	800af9e <TIM_OC1_SetConfig+0xbe>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a18      	ldr	r2, [pc, #96]	; (800affc <TIM_OC1_SetConfig+0x11c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d111      	bne.n	800afc2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	621a      	str	r2, [r3, #32]
}
 800afdc:	bf00      	nop
 800afde:	371c      	adds	r7, #28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	fffeff8f 	.word	0xfffeff8f
 800afec:	40010000 	.word	0x40010000
 800aff0:	40010400 	.word	0x40010400
 800aff4:	40014000 	.word	0x40014000
 800aff8:	40014400 	.word	0x40014400
 800affc:	40014800 	.word	0x40014800

0800b000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f023 0210 	bic.w	r2, r3, #16
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	4b34      	ldr	r3, [pc, #208]	; (800b0fc <TIM_OC2_SetConfig+0xfc>)
 800b02c:	4013      	ands	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f023 0320 	bic.w	r3, r3, #32
 800b04a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a29      	ldr	r2, [pc, #164]	; (800b100 <TIM_OC2_SetConfig+0x100>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d003      	beq.n	800b068 <TIM_OC2_SetConfig+0x68>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a28      	ldr	r2, [pc, #160]	; (800b104 <TIM_OC2_SetConfig+0x104>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d10d      	bne.n	800b084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a1e      	ldr	r2, [pc, #120]	; (800b100 <TIM_OC2_SetConfig+0x100>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d00f      	beq.n	800b0ac <TIM_OC2_SetConfig+0xac>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <TIM_OC2_SetConfig+0x104>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00b      	beq.n	800b0ac <TIM_OC2_SetConfig+0xac>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a1c      	ldr	r2, [pc, #112]	; (800b108 <TIM_OC2_SetConfig+0x108>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d007      	beq.n	800b0ac <TIM_OC2_SetConfig+0xac>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a1b      	ldr	r2, [pc, #108]	; (800b10c <TIM_OC2_SetConfig+0x10c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d003      	beq.n	800b0ac <TIM_OC2_SetConfig+0xac>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a1a      	ldr	r2, [pc, #104]	; (800b110 <TIM_OC2_SetConfig+0x110>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d113      	bne.n	800b0d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	feff8fff 	.word	0xfeff8fff
 800b100:	40010000 	.word	0x40010000
 800b104:	40010400 	.word	0x40010400
 800b108:	40014000 	.word	0x40014000
 800b10c:	40014400 	.word	0x40014400
 800b110:	40014800 	.word	0x40014800

0800b114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4b33      	ldr	r3, [pc, #204]	; (800b20c <TIM_OC3_SetConfig+0xf8>)
 800b140:	4013      	ands	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a28      	ldr	r2, [pc, #160]	; (800b210 <TIM_OC3_SetConfig+0xfc>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d003      	beq.n	800b17a <TIM_OC3_SetConfig+0x66>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a27      	ldr	r2, [pc, #156]	; (800b214 <TIM_OC3_SetConfig+0x100>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d10d      	bne.n	800b196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	021b      	lsls	r3, r3, #8
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a1d      	ldr	r2, [pc, #116]	; (800b210 <TIM_OC3_SetConfig+0xfc>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d00f      	beq.n	800b1be <TIM_OC3_SetConfig+0xaa>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a1c      	ldr	r2, [pc, #112]	; (800b214 <TIM_OC3_SetConfig+0x100>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00b      	beq.n	800b1be <TIM_OC3_SetConfig+0xaa>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a1b      	ldr	r2, [pc, #108]	; (800b218 <TIM_OC3_SetConfig+0x104>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d007      	beq.n	800b1be <TIM_OC3_SetConfig+0xaa>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a1a      	ldr	r2, [pc, #104]	; (800b21c <TIM_OC3_SetConfig+0x108>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d003      	beq.n	800b1be <TIM_OC3_SetConfig+0xaa>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a19      	ldr	r2, [pc, #100]	; (800b220 <TIM_OC3_SetConfig+0x10c>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d113      	bne.n	800b1e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	011b      	lsls	r3, r3, #4
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	621a      	str	r2, [r3, #32]
}
 800b200:	bf00      	nop
 800b202:	371c      	adds	r7, #28
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	fffeff8f 	.word	0xfffeff8f
 800b210:	40010000 	.word	0x40010000
 800b214:	40010400 	.word	0x40010400
 800b218:	40014000 	.word	0x40014000
 800b21c:	40014400 	.word	0x40014400
 800b220:	40014800 	.word	0x40014800

0800b224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4b24      	ldr	r3, [pc, #144]	; (800b2e0 <TIM_OC4_SetConfig+0xbc>)
 800b250:	4013      	ands	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b26e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	031b      	lsls	r3, r3, #12
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	4313      	orrs	r3, r2
 800b27a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a19      	ldr	r2, [pc, #100]	; (800b2e4 <TIM_OC4_SetConfig+0xc0>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00f      	beq.n	800b2a4 <TIM_OC4_SetConfig+0x80>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a18      	ldr	r2, [pc, #96]	; (800b2e8 <TIM_OC4_SetConfig+0xc4>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d00b      	beq.n	800b2a4 <TIM_OC4_SetConfig+0x80>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a17      	ldr	r2, [pc, #92]	; (800b2ec <TIM_OC4_SetConfig+0xc8>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d007      	beq.n	800b2a4 <TIM_OC4_SetConfig+0x80>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a16      	ldr	r2, [pc, #88]	; (800b2f0 <TIM_OC4_SetConfig+0xcc>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d003      	beq.n	800b2a4 <TIM_OC4_SetConfig+0x80>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a15      	ldr	r2, [pc, #84]	; (800b2f4 <TIM_OC4_SetConfig+0xd0>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d109      	bne.n	800b2b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	019b      	lsls	r3, r3, #6
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	621a      	str	r2, [r3, #32]
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	feff8fff 	.word	0xfeff8fff
 800b2e4:	40010000 	.word	0x40010000
 800b2e8:	40010400 	.word	0x40010400
 800b2ec:	40014000 	.word	0x40014000
 800b2f0:	40014400 	.word	0x40014400
 800b2f4:	40014800 	.word	0x40014800

0800b2f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4b21      	ldr	r3, [pc, #132]	; (800b3a8 <TIM_OC5_SetConfig+0xb0>)
 800b324:	4013      	ands	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	041b      	lsls	r3, r3, #16
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	4313      	orrs	r3, r2
 800b344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a18      	ldr	r2, [pc, #96]	; (800b3ac <TIM_OC5_SetConfig+0xb4>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00f      	beq.n	800b36e <TIM_OC5_SetConfig+0x76>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a17      	ldr	r2, [pc, #92]	; (800b3b0 <TIM_OC5_SetConfig+0xb8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00b      	beq.n	800b36e <TIM_OC5_SetConfig+0x76>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a16      	ldr	r2, [pc, #88]	; (800b3b4 <TIM_OC5_SetConfig+0xbc>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d007      	beq.n	800b36e <TIM_OC5_SetConfig+0x76>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a15      	ldr	r2, [pc, #84]	; (800b3b8 <TIM_OC5_SetConfig+0xc0>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d003      	beq.n	800b36e <TIM_OC5_SetConfig+0x76>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a14      	ldr	r2, [pc, #80]	; (800b3bc <TIM_OC5_SetConfig+0xc4>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d109      	bne.n	800b382 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	021b      	lsls	r3, r3, #8
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	4313      	orrs	r3, r2
 800b380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	621a      	str	r2, [r3, #32]
}
 800b39c:	bf00      	nop
 800b39e:	371c      	adds	r7, #28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	fffeff8f 	.word	0xfffeff8f
 800b3ac:	40010000 	.word	0x40010000
 800b3b0:	40010400 	.word	0x40010400
 800b3b4:	40014000 	.word	0x40014000
 800b3b8:	40014400 	.word	0x40014400
 800b3bc:	40014800 	.word	0x40014800

0800b3c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4b22      	ldr	r3, [pc, #136]	; (800b474 <TIM_OC6_SetConfig+0xb4>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	021b      	lsls	r3, r3, #8
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	051b      	lsls	r3, r3, #20
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a19      	ldr	r2, [pc, #100]	; (800b478 <TIM_OC6_SetConfig+0xb8>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d00f      	beq.n	800b438 <TIM_OC6_SetConfig+0x78>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a18      	ldr	r2, [pc, #96]	; (800b47c <TIM_OC6_SetConfig+0xbc>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d00b      	beq.n	800b438 <TIM_OC6_SetConfig+0x78>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a17      	ldr	r2, [pc, #92]	; (800b480 <TIM_OC6_SetConfig+0xc0>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d007      	beq.n	800b438 <TIM_OC6_SetConfig+0x78>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a16      	ldr	r2, [pc, #88]	; (800b484 <TIM_OC6_SetConfig+0xc4>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d003      	beq.n	800b438 <TIM_OC6_SetConfig+0x78>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a15      	ldr	r2, [pc, #84]	; (800b488 <TIM_OC6_SetConfig+0xc8>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d109      	bne.n	800b44c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b43e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	029b      	lsls	r3, r3, #10
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	621a      	str	r2, [r3, #32]
}
 800b466:	bf00      	nop
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	feff8fff 	.word	0xfeff8fff
 800b478:	40010000 	.word	0x40010000
 800b47c:	40010400 	.word	0x40010400
 800b480:	40014000 	.word	0x40014000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800

0800b48c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f023 0201 	bic.w	r2, r3, #1
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	011b      	lsls	r3, r3, #4
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f023 030a 	bic.w	r3, r3, #10
 800b4c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	621a      	str	r2, [r3, #32]
}
 800b4de:	bf00      	nop
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b087      	sub	sp, #28
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	f023 0210 	bic.w	r2, r3, #16
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	031b      	lsls	r3, r3, #12
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	011b      	lsls	r3, r3, #4
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4313      	orrs	r3, r2
 800b530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	621a      	str	r2, [r3, #32]
}
 800b53e:	bf00      	nop
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	4b09      	ldr	r3, [pc, #36]	; (800b584 <TIM_ITRx_SetConfig+0x38>)
 800b560:	4013      	ands	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	4313      	orrs	r3, r2
 800b56a:	f043 0307 	orr.w	r3, r3, #7
 800b56e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	609a      	str	r2, [r3, #8]
}
 800b576:	bf00      	nop
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	ffcfff8f 	.word	0xffcfff8f

0800b588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	021a      	lsls	r2, r3, #8
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	609a      	str	r2, [r3, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d101      	bne.n	800b5e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5dc:	2302      	movs	r3, #2
 800b5de:	e06d      	b.n	800b6bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a30      	ldr	r2, [pc, #192]	; (800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d004      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a2f      	ldr	r2, [pc, #188]	; (800b6cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d108      	bne.n	800b626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b61a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b62c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	4313      	orrs	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a20      	ldr	r2, [pc, #128]	; (800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d022      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b652:	d01d      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d018      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a1c      	ldr	r2, [pc, #112]	; (800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d013      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a1a      	ldr	r2, [pc, #104]	; (800b6d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d00e      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a15      	ldr	r2, [pc, #84]	; (800b6cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d009      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a16      	ldr	r2, [pc, #88]	; (800b6dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d004      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a15      	ldr	r2, [pc, #84]	; (800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d10c      	bne.n	800b6aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b696:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	40010000 	.word	0x40010000
 800b6cc:	40010400 	.word	0x40010400
 800b6d0:	40000400 	.word	0x40000400
 800b6d4:	40000800 	.word	0x40000800
 800b6d8:	40000c00 	.word	0x40000c00
 800b6dc:	40001800 	.word	0x40001800
 800b6e0:	40014000 	.word	0x40014000

0800b6e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e042      	b.n	800b7b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d106      	bne.n	800b74a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7f6 fb6d 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2224      	movs	r2, #36	; 0x24
 800b74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f022 0201 	bic.w	r2, r2, #1
 800b760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fc94 	bl	800c090 <UART_SetConfig>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d101      	bne.n	800b772 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e022      	b.n	800b7b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 f9f0 	bl	800cb60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b78e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b79e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f042 0201 	orr.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f001 fa77 	bl	800cca4 <UART_CheckIdleState>
 800b7b6:	4603      	mov	r3, r0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	; 0x28
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d17b      	bne.n	800b8d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <HAL_UART_Transmit+0x26>
 800b7e0:	88fb      	ldrh	r3, [r7, #6]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e074      	b.n	800b8d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2221      	movs	r2, #33	; 0x21
 800b7f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b7fa:	f7f6 fe5f 	bl	80024bc <HAL_GetTick>
 800b7fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	88fa      	ldrh	r2, [r7, #6]
 800b804:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	88fa      	ldrh	r2, [r7, #6]
 800b80c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b818:	d108      	bne.n	800b82c <HAL_UART_Transmit+0x6c>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d104      	bne.n	800b82c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	e003      	b.n	800b834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b830:	2300      	movs	r3, #0
 800b832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b834:	e030      	b.n	800b898 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2200      	movs	r2, #0
 800b83e:	2180      	movs	r1, #128	; 0x80
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 fad9 	bl	800cdf8 <UART_WaitOnFlagUntilTimeout>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2220      	movs	r2, #32
 800b850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b854:	2303      	movs	r3, #3
 800b856:	e03d      	b.n	800b8d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10b      	bne.n	800b876 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b86c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	3302      	adds	r3, #2
 800b872:	61bb      	str	r3, [r7, #24]
 800b874:	e007      	b.n	800b886 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	781a      	ldrb	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	3301      	adds	r3, #1
 800b884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	b29a      	uxth	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1c8      	bne.n	800b836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2140      	movs	r1, #64	; 0x40
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f001 faa2 	bl	800cdf8 <UART_WaitOnFlagUntilTimeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d005      	beq.n	800b8c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2220      	movs	r2, #32
 800b8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e006      	b.n	800b8d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e000      	b.n	800b8d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b8d2:	2302      	movs	r3, #2
  }
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b0ba      	sub	sp, #232	; 0xe8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b906:	f640 030f 	movw	r3, #2063	; 0x80f
 800b90a:	4013      	ands	r3, r2
 800b90c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b914:	2b00      	cmp	r3, #0
 800b916:	d11b      	bne.n	800b950 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b00      	cmp	r3, #0
 800b922:	d015      	beq.n	800b950 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d105      	bne.n	800b93c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d009      	beq.n	800b950 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 8377 	beq.w	800c034 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	4798      	blx	r3
      }
      return;
 800b94e:	e371      	b.n	800c034 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 8123 	beq.w	800bba0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b95a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b95e:	4b8d      	ldr	r3, [pc, #564]	; (800bb94 <HAL_UART_IRQHandler+0x2b8>)
 800b960:	4013      	ands	r3, r2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b96a:	4b8b      	ldr	r3, [pc, #556]	; (800bb98 <HAL_UART_IRQHandler+0x2bc>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 8116 	beq.w	800bba0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d011      	beq.n	800b9a4 <HAL_UART_IRQHandler+0xc8>
 800b980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00b      	beq.n	800b9a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2201      	movs	r2, #1
 800b992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b99a:	f043 0201 	orr.w	r2, r3, #1
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d011      	beq.n	800b9d4 <HAL_UART_IRQHandler+0xf8>
 800b9b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ca:	f043 0204 	orr.w	r2, r3, #4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d8:	f003 0304 	and.w	r3, r3, #4
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d011      	beq.n	800ba04 <HAL_UART_IRQHandler+0x128>
 800b9e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00b      	beq.n	800ba04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2204      	movs	r2, #4
 800b9f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fa:	f043 0202 	orr.w	r2, r3, #2
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba08:	f003 0308 	and.w	r3, r3, #8
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d017      	beq.n	800ba40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d105      	bne.n	800ba28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba20:	4b5c      	ldr	r3, [pc, #368]	; (800bb94 <HAL_UART_IRQHandler+0x2b8>)
 800ba22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00b      	beq.n	800ba40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba36:	f043 0208 	orr.w	r2, r3, #8
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d012      	beq.n	800ba72 <HAL_UART_IRQHandler+0x196>
 800ba4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00c      	beq.n	800ba72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba68:	f043 0220 	orr.w	r2, r3, #32
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 82dd 	beq.w	800c038 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba82:	f003 0320 	and.w	r3, r3, #32
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d013      	beq.n	800bab2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d007      	beq.n	800bab2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac6:	2b40      	cmp	r3, #64	; 0x40
 800bac8:	d005      	beq.n	800bad6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800baca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bace:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d054      	beq.n	800bb80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 f9f6 	bl	800cec8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae6:	2b40      	cmp	r3, #64	; 0x40
 800bae8:	d146      	bne.n	800bb78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3308      	adds	r3, #8
 800baf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3308      	adds	r3, #8
 800bb12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1d9      	bne.n	800baea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d017      	beq.n	800bb70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb46:	4a15      	ldr	r2, [pc, #84]	; (800bb9c <HAL_UART_IRQHandler+0x2c0>)
 800bb48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f8 ff83 	bl	8004a5c <HAL_DMA_Abort_IT>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d019      	beq.n	800bb90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6e:	e00f      	b.n	800bb90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fa77 	bl	800c064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb76:	e00b      	b.n	800bb90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fa73 	bl	800c064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb7e:	e007      	b.n	800bb90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fa6f 	bl	800c064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bb8e:	e253      	b.n	800c038 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb90:	bf00      	nop
    return;
 800bb92:	e251      	b.n	800c038 <HAL_UART_IRQHandler+0x75c>
 800bb94:	10000001 	.word	0x10000001
 800bb98:	04000120 	.word	0x04000120
 800bb9c:	0800cf95 	.word	0x0800cf95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	f040 81e7 	bne.w	800bf78 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbae:	f003 0310 	and.w	r3, r3, #16
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 81e0 	beq.w	800bf78 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbbc:	f003 0310 	and.w	r3, r3, #16
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 81d9 	beq.w	800bf78 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2210      	movs	r2, #16
 800bbcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd8:	2b40      	cmp	r3, #64	; 0x40
 800bbda:	f040 8151 	bne.w	800be80 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a96      	ldr	r2, [pc, #600]	; (800be40 <HAL_UART_IRQHandler+0x564>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d068      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a93      	ldr	r2, [pc, #588]	; (800be44 <HAL_UART_IRQHandler+0x568>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d061      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a91      	ldr	r2, [pc, #580]	; (800be48 <HAL_UART_IRQHandler+0x56c>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d05a      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a8e      	ldr	r2, [pc, #568]	; (800be4c <HAL_UART_IRQHandler+0x570>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d053      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a8c      	ldr	r2, [pc, #560]	; (800be50 <HAL_UART_IRQHandler+0x574>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d04c      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a89      	ldr	r2, [pc, #548]	; (800be54 <HAL_UART_IRQHandler+0x578>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d045      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a87      	ldr	r2, [pc, #540]	; (800be58 <HAL_UART_IRQHandler+0x57c>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d03e      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a84      	ldr	r2, [pc, #528]	; (800be5c <HAL_UART_IRQHandler+0x580>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d037      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a82      	ldr	r2, [pc, #520]	; (800be60 <HAL_UART_IRQHandler+0x584>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d030      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a7f      	ldr	r2, [pc, #508]	; (800be64 <HAL_UART_IRQHandler+0x588>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d029      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a7d      	ldr	r2, [pc, #500]	; (800be68 <HAL_UART_IRQHandler+0x58c>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d022      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a7a      	ldr	r2, [pc, #488]	; (800be6c <HAL_UART_IRQHandler+0x590>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d01b      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a78      	ldr	r2, [pc, #480]	; (800be70 <HAL_UART_IRQHandler+0x594>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d014      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a75      	ldr	r2, [pc, #468]	; (800be74 <HAL_UART_IRQHandler+0x598>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d00d      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a73      	ldr	r2, [pc, #460]	; (800be78 <HAL_UART_IRQHandler+0x59c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d006      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3e2>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a70      	ldr	r2, [pc, #448]	; (800be7c <HAL_UART_IRQHandler+0x5a0>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d106      	bne.n	800bccc <HAL_UART_IRQHandler+0x3f0>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	e005      	b.n	800bcd8 <HAL_UART_IRQHandler+0x3fc>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 81ab 	beq.w	800c03c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bcec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	f080 81a3 	bcs.w	800c03c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0c:	f000 8087 	beq.w	800be1e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	461a      	mov	r2, r3
 800bd36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1da      	bne.n	800bd10 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd6c:	f023 0301 	bic.w	r3, r3, #1
 800bd70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3308      	adds	r3, #8
 800bd7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd8a:	e841 2300 	strex	r3, r2, [r1]
 800bd8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1e1      	bne.n	800bd5a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bda0:	e853 3f00 	ldrex	r3, [r3]
 800bda4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bda6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bdc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bdc2:	e841 2300 	strex	r3, r2, [r1]
 800bdc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1e3      	bne.n	800bd96 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde4:	e853 3f00 	ldrex	r3, [r3]
 800bde8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdec:	f023 0310 	bic.w	r3, r3, #16
 800bdf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800be00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be06:	e841 2300 	strex	r3, r2, [r1]
 800be0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1e4      	bne.n	800bddc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be18:	4618      	mov	r0, r3
 800be1a:	f7f8 fb01 	bl	8004420 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2202      	movs	r2, #2
 800be22:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be30:	b29b      	uxth	r3, r3
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	b29b      	uxth	r3, r3
 800be36:	4619      	mov	r1, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f91d 	bl	800c078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be3e:	e0fd      	b.n	800c03c <HAL_UART_IRQHandler+0x760>
 800be40:	40020010 	.word	0x40020010
 800be44:	40020028 	.word	0x40020028
 800be48:	40020040 	.word	0x40020040
 800be4c:	40020058 	.word	0x40020058
 800be50:	40020070 	.word	0x40020070
 800be54:	40020088 	.word	0x40020088
 800be58:	400200a0 	.word	0x400200a0
 800be5c:	400200b8 	.word	0x400200b8
 800be60:	40020410 	.word	0x40020410
 800be64:	40020428 	.word	0x40020428
 800be68:	40020440 	.word	0x40020440
 800be6c:	40020458 	.word	0x40020458
 800be70:	40020470 	.word	0x40020470
 800be74:	40020488 	.word	0x40020488
 800be78:	400204a0 	.word	0x400204a0
 800be7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 80cf 	beq.w	800c040 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f000 80ca 	beq.w	800c040 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	e853 3f00 	ldrex	r3, [r3]
 800beb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bece:	647b      	str	r3, [r7, #68]	; 0x44
 800bed0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e4      	bne.n	800beac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3308      	adds	r3, #8
 800bee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	623b      	str	r3, [r7, #32]
   return(result);
 800bef2:	6a3a      	ldr	r2, [r7, #32]
 800bef4:	4b55      	ldr	r3, [pc, #340]	; (800c04c <HAL_UART_IRQHandler+0x770>)
 800bef6:	4013      	ands	r3, r2
 800bef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3308      	adds	r3, #8
 800bf02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf06:	633a      	str	r2, [r7, #48]	; 0x30
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0e:	e841 2300 	strex	r3, r2, [r1]
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1e3      	bne.n	800bee2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	e853 3f00 	ldrex	r3, [r3]
 800bf3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0310 	bic.w	r3, r3, #16
 800bf42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf50:	61fb      	str	r3, [r7, #28]
 800bf52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	69b9      	ldr	r1, [r7, #24]
 800bf56:	69fa      	ldr	r2, [r7, #28]
 800bf58:	e841 2300 	strex	r3, r2, [r1]
 800bf5c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e4      	bne.n	800bf2e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2202      	movs	r2, #2
 800bf68:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 f881 	bl	800c078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf76:	e063      	b.n	800c040 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00e      	beq.n	800bfa2 <HAL_UART_IRQHandler+0x6c6>
 800bf84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d008      	beq.n	800bfa2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bf98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 f83b 	bl	800d016 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfa0:	e051      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d014      	beq.n	800bfd8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bfba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d008      	beq.n	800bfd8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d03a      	beq.n	800c044 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
    }
    return;
 800bfd6:	e035      	b.n	800c044 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bfd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d009      	beq.n	800bff8 <HAL_UART_IRQHandler+0x71c>
 800bfe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 ffe5 	bl	800cfc0 <UART_EndTransmit_IT>
    return;
 800bff6:	e026      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <HAL_UART_IRQHandler+0x73c>
 800c004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f001 f814 	bl	800d03e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c016:	e016      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d010      	beq.n	800c046 <HAL_UART_IRQHandler+0x76a>
 800c024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	da0c      	bge.n	800c046 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fffc 	bl	800d02a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c032:	e008      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
      return;
 800c034:	bf00      	nop
 800c036:	e006      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
    return;
 800c038:	bf00      	nop
 800c03a:	e004      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
      return;
 800c03c:	bf00      	nop
 800c03e:	e002      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
      return;
 800c040:	bf00      	nop
 800c042:	e000      	b.n	800c046 <HAL_UART_IRQHandler+0x76a>
    return;
 800c044:	bf00      	nop
  }
}
 800c046:	37e8      	adds	r7, #232	; 0xe8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	effffffe 	.word	0xeffffffe

0800c050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c094:	b092      	sub	sp, #72	; 0x48
 800c096:	af00      	add	r7, sp, #0
 800c098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	689a      	ldr	r2, [r3, #8]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	4bbe      	ldr	r3, [pc, #760]	; (800c3b8 <UART_SetConfig+0x328>)
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	6812      	ldr	r2, [r2, #0]
 800c0c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0c8:	430b      	orrs	r3, r1
 800c0ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	68da      	ldr	r2, [r3, #12]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4ab3      	ldr	r2, [pc, #716]	; (800c3bc <UART_SetConfig+0x32c>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d004      	beq.n	800c0fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	689a      	ldr	r2, [r3, #8]
 800c102:	4baf      	ldr	r3, [pc, #700]	; (800c3c0 <UART_SetConfig+0x330>)
 800c104:	4013      	ands	r3, r2
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c10c:	430b      	orrs	r3, r1
 800c10e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c116:	f023 010f 	bic.w	r1, r3, #15
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	430a      	orrs	r2, r1
 800c124:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4aa6      	ldr	r2, [pc, #664]	; (800c3c4 <UART_SetConfig+0x334>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d177      	bne.n	800c220 <UART_SetConfig+0x190>
 800c130:	4ba5      	ldr	r3, [pc, #660]	; (800c3c8 <UART_SetConfig+0x338>)
 800c132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c138:	2b28      	cmp	r3, #40	; 0x28
 800c13a:	d86d      	bhi.n	800c218 <UART_SetConfig+0x188>
 800c13c:	a201      	add	r2, pc, #4	; (adr r2, 800c144 <UART_SetConfig+0xb4>)
 800c13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c142:	bf00      	nop
 800c144:	0800c1e9 	.word	0x0800c1e9
 800c148:	0800c219 	.word	0x0800c219
 800c14c:	0800c219 	.word	0x0800c219
 800c150:	0800c219 	.word	0x0800c219
 800c154:	0800c219 	.word	0x0800c219
 800c158:	0800c219 	.word	0x0800c219
 800c15c:	0800c219 	.word	0x0800c219
 800c160:	0800c219 	.word	0x0800c219
 800c164:	0800c1f1 	.word	0x0800c1f1
 800c168:	0800c219 	.word	0x0800c219
 800c16c:	0800c219 	.word	0x0800c219
 800c170:	0800c219 	.word	0x0800c219
 800c174:	0800c219 	.word	0x0800c219
 800c178:	0800c219 	.word	0x0800c219
 800c17c:	0800c219 	.word	0x0800c219
 800c180:	0800c219 	.word	0x0800c219
 800c184:	0800c1f9 	.word	0x0800c1f9
 800c188:	0800c219 	.word	0x0800c219
 800c18c:	0800c219 	.word	0x0800c219
 800c190:	0800c219 	.word	0x0800c219
 800c194:	0800c219 	.word	0x0800c219
 800c198:	0800c219 	.word	0x0800c219
 800c19c:	0800c219 	.word	0x0800c219
 800c1a0:	0800c219 	.word	0x0800c219
 800c1a4:	0800c201 	.word	0x0800c201
 800c1a8:	0800c219 	.word	0x0800c219
 800c1ac:	0800c219 	.word	0x0800c219
 800c1b0:	0800c219 	.word	0x0800c219
 800c1b4:	0800c219 	.word	0x0800c219
 800c1b8:	0800c219 	.word	0x0800c219
 800c1bc:	0800c219 	.word	0x0800c219
 800c1c0:	0800c219 	.word	0x0800c219
 800c1c4:	0800c209 	.word	0x0800c209
 800c1c8:	0800c219 	.word	0x0800c219
 800c1cc:	0800c219 	.word	0x0800c219
 800c1d0:	0800c219 	.word	0x0800c219
 800c1d4:	0800c219 	.word	0x0800c219
 800c1d8:	0800c219 	.word	0x0800c219
 800c1dc:	0800c219 	.word	0x0800c219
 800c1e0:	0800c219 	.word	0x0800c219
 800c1e4:	0800c211 	.word	0x0800c211
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e222      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c1f0:	2304      	movs	r3, #4
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e21e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c1f8:	2308      	movs	r3, #8
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e21a      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c200:	2310      	movs	r3, #16
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e216      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c208:	2320      	movs	r3, #32
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e212      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c210:	2340      	movs	r3, #64	; 0x40
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c216:	e20e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c218:	2380      	movs	r3, #128	; 0x80
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21e:	e20a      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a69      	ldr	r2, [pc, #420]	; (800c3cc <UART_SetConfig+0x33c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d130      	bne.n	800c28c <UART_SetConfig+0x1fc>
 800c22a:	4b67      	ldr	r3, [pc, #412]	; (800c3c8 <UART_SetConfig+0x338>)
 800c22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22e:	f003 0307 	and.w	r3, r3, #7
 800c232:	2b05      	cmp	r3, #5
 800c234:	d826      	bhi.n	800c284 <UART_SetConfig+0x1f4>
 800c236:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <UART_SetConfig+0x1ac>)
 800c238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23c:	0800c255 	.word	0x0800c255
 800c240:	0800c25d 	.word	0x0800c25d
 800c244:	0800c265 	.word	0x0800c265
 800c248:	0800c26d 	.word	0x0800c26d
 800c24c:	0800c275 	.word	0x0800c275
 800c250:	0800c27d 	.word	0x0800c27d
 800c254:	2300      	movs	r3, #0
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e1ec      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c25c:	2304      	movs	r3, #4
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e1e8      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c264:	2308      	movs	r3, #8
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e1e4      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c26c:	2310      	movs	r3, #16
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e1e0      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c274:	2320      	movs	r3, #32
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e1dc      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c27c:	2340      	movs	r3, #64	; 0x40
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e1d8      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c284:	2380      	movs	r3, #128	; 0x80
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28a:	e1d4      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a4f      	ldr	r2, [pc, #316]	; (800c3d0 <UART_SetConfig+0x340>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d130      	bne.n	800c2f8 <UART_SetConfig+0x268>
 800c296:	4b4c      	ldr	r3, [pc, #304]	; (800c3c8 <UART_SetConfig+0x338>)
 800c298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29a:	f003 0307 	and.w	r3, r3, #7
 800c29e:	2b05      	cmp	r3, #5
 800c2a0:	d826      	bhi.n	800c2f0 <UART_SetConfig+0x260>
 800c2a2:	a201      	add	r2, pc, #4	; (adr r2, 800c2a8 <UART_SetConfig+0x218>)
 800c2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a8:	0800c2c1 	.word	0x0800c2c1
 800c2ac:	0800c2c9 	.word	0x0800c2c9
 800c2b0:	0800c2d1 	.word	0x0800c2d1
 800c2b4:	0800c2d9 	.word	0x0800c2d9
 800c2b8:	0800c2e1 	.word	0x0800c2e1
 800c2bc:	0800c2e9 	.word	0x0800c2e9
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e1b6      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2c8:	2304      	movs	r3, #4
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e1b2      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2d0:	2308      	movs	r3, #8
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e1ae      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2d8:	2310      	movs	r3, #16
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2de:	e1aa      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2e0:	2320      	movs	r3, #32
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e1a6      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2e8:	2340      	movs	r3, #64	; 0x40
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e1a2      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2f0:	2380      	movs	r3, #128	; 0x80
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f6:	e19e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a35      	ldr	r2, [pc, #212]	; (800c3d4 <UART_SetConfig+0x344>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d130      	bne.n	800c364 <UART_SetConfig+0x2d4>
 800c302:	4b31      	ldr	r3, [pc, #196]	; (800c3c8 <UART_SetConfig+0x338>)
 800c304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c306:	f003 0307 	and.w	r3, r3, #7
 800c30a:	2b05      	cmp	r3, #5
 800c30c:	d826      	bhi.n	800c35c <UART_SetConfig+0x2cc>
 800c30e:	a201      	add	r2, pc, #4	; (adr r2, 800c314 <UART_SetConfig+0x284>)
 800c310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c314:	0800c32d 	.word	0x0800c32d
 800c318:	0800c335 	.word	0x0800c335
 800c31c:	0800c33d 	.word	0x0800c33d
 800c320:	0800c345 	.word	0x0800c345
 800c324:	0800c34d 	.word	0x0800c34d
 800c328:	0800c355 	.word	0x0800c355
 800c32c:	2300      	movs	r3, #0
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e180      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c334:	2304      	movs	r3, #4
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e17c      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c33c:	2308      	movs	r3, #8
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c342:	e178      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c344:	2310      	movs	r3, #16
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34a:	e174      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c34c:	2320      	movs	r3, #32
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c352:	e170      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c354:	2340      	movs	r3, #64	; 0x40
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35a:	e16c      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c35c:	2380      	movs	r3, #128	; 0x80
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c362:	e168      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a1b      	ldr	r2, [pc, #108]	; (800c3d8 <UART_SetConfig+0x348>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d142      	bne.n	800c3f4 <UART_SetConfig+0x364>
 800c36e:	4b16      	ldr	r3, [pc, #88]	; (800c3c8 <UART_SetConfig+0x338>)
 800c370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c372:	f003 0307 	and.w	r3, r3, #7
 800c376:	2b05      	cmp	r3, #5
 800c378:	d838      	bhi.n	800c3ec <UART_SetConfig+0x35c>
 800c37a:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <UART_SetConfig+0x2f0>)
 800c37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c380:	0800c399 	.word	0x0800c399
 800c384:	0800c3a1 	.word	0x0800c3a1
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c3b1 	.word	0x0800c3b1
 800c390:	0800c3dd 	.word	0x0800c3dd
 800c394:	0800c3e5 	.word	0x0800c3e5
 800c398:	2300      	movs	r3, #0
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e14a      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3a0:	2304      	movs	r3, #4
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a6:	e146      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ae:	e142      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3b0:	2310      	movs	r3, #16
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b6:	e13e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3b8:	cfff69f3 	.word	0xcfff69f3
 800c3bc:	58000c00 	.word	0x58000c00
 800c3c0:	11fff4ff 	.word	0x11fff4ff
 800c3c4:	40011000 	.word	0x40011000
 800c3c8:	58024400 	.word	0x58024400
 800c3cc:	40004400 	.word	0x40004400
 800c3d0:	40004800 	.word	0x40004800
 800c3d4:	40004c00 	.word	0x40004c00
 800c3d8:	40005000 	.word	0x40005000
 800c3dc:	2320      	movs	r3, #32
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e128      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3e4:	2340      	movs	r3, #64	; 0x40
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ea:	e124      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3ec:	2380      	movs	r3, #128	; 0x80
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f2:	e120      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4acb      	ldr	r2, [pc, #812]	; (800c728 <UART_SetConfig+0x698>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d176      	bne.n	800c4ec <UART_SetConfig+0x45c>
 800c3fe:	4bcb      	ldr	r3, [pc, #812]	; (800c72c <UART_SetConfig+0x69c>)
 800c400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c406:	2b28      	cmp	r3, #40	; 0x28
 800c408:	d86c      	bhi.n	800c4e4 <UART_SetConfig+0x454>
 800c40a:	a201      	add	r2, pc, #4	; (adr r2, 800c410 <UART_SetConfig+0x380>)
 800c40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c410:	0800c4b5 	.word	0x0800c4b5
 800c414:	0800c4e5 	.word	0x0800c4e5
 800c418:	0800c4e5 	.word	0x0800c4e5
 800c41c:	0800c4e5 	.word	0x0800c4e5
 800c420:	0800c4e5 	.word	0x0800c4e5
 800c424:	0800c4e5 	.word	0x0800c4e5
 800c428:	0800c4e5 	.word	0x0800c4e5
 800c42c:	0800c4e5 	.word	0x0800c4e5
 800c430:	0800c4bd 	.word	0x0800c4bd
 800c434:	0800c4e5 	.word	0x0800c4e5
 800c438:	0800c4e5 	.word	0x0800c4e5
 800c43c:	0800c4e5 	.word	0x0800c4e5
 800c440:	0800c4e5 	.word	0x0800c4e5
 800c444:	0800c4e5 	.word	0x0800c4e5
 800c448:	0800c4e5 	.word	0x0800c4e5
 800c44c:	0800c4e5 	.word	0x0800c4e5
 800c450:	0800c4c5 	.word	0x0800c4c5
 800c454:	0800c4e5 	.word	0x0800c4e5
 800c458:	0800c4e5 	.word	0x0800c4e5
 800c45c:	0800c4e5 	.word	0x0800c4e5
 800c460:	0800c4e5 	.word	0x0800c4e5
 800c464:	0800c4e5 	.word	0x0800c4e5
 800c468:	0800c4e5 	.word	0x0800c4e5
 800c46c:	0800c4e5 	.word	0x0800c4e5
 800c470:	0800c4cd 	.word	0x0800c4cd
 800c474:	0800c4e5 	.word	0x0800c4e5
 800c478:	0800c4e5 	.word	0x0800c4e5
 800c47c:	0800c4e5 	.word	0x0800c4e5
 800c480:	0800c4e5 	.word	0x0800c4e5
 800c484:	0800c4e5 	.word	0x0800c4e5
 800c488:	0800c4e5 	.word	0x0800c4e5
 800c48c:	0800c4e5 	.word	0x0800c4e5
 800c490:	0800c4d5 	.word	0x0800c4d5
 800c494:	0800c4e5 	.word	0x0800c4e5
 800c498:	0800c4e5 	.word	0x0800c4e5
 800c49c:	0800c4e5 	.word	0x0800c4e5
 800c4a0:	0800c4e5 	.word	0x0800c4e5
 800c4a4:	0800c4e5 	.word	0x0800c4e5
 800c4a8:	0800c4e5 	.word	0x0800c4e5
 800c4ac:	0800c4e5 	.word	0x0800c4e5
 800c4b0:	0800c4dd 	.word	0x0800c4dd
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ba:	e0bc      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4bc:	2304      	movs	r3, #4
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c2:	e0b8      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4c4:	2308      	movs	r3, #8
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ca:	e0b4      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4cc:	2310      	movs	r3, #16
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d2:	e0b0      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4d4:	2320      	movs	r3, #32
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e0ac      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4dc:	2340      	movs	r3, #64	; 0x40
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e2:	e0a8      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ea:	e0a4      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a8f      	ldr	r2, [pc, #572]	; (800c730 <UART_SetConfig+0x6a0>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d130      	bne.n	800c558 <UART_SetConfig+0x4c8>
 800c4f6:	4b8d      	ldr	r3, [pc, #564]	; (800c72c <UART_SetConfig+0x69c>)
 800c4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fa:	f003 0307 	and.w	r3, r3, #7
 800c4fe:	2b05      	cmp	r3, #5
 800c500:	d826      	bhi.n	800c550 <UART_SetConfig+0x4c0>
 800c502:	a201      	add	r2, pc, #4	; (adr r2, 800c508 <UART_SetConfig+0x478>)
 800c504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c508:	0800c521 	.word	0x0800c521
 800c50c:	0800c529 	.word	0x0800c529
 800c510:	0800c531 	.word	0x0800c531
 800c514:	0800c539 	.word	0x0800c539
 800c518:	0800c541 	.word	0x0800c541
 800c51c:	0800c549 	.word	0x0800c549
 800c520:	2300      	movs	r3, #0
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c526:	e086      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c528:	2304      	movs	r3, #4
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52e:	e082      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c530:	2308      	movs	r3, #8
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c536:	e07e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c538:	2310      	movs	r3, #16
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53e:	e07a      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c540:	2320      	movs	r3, #32
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c546:	e076      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c548:	2340      	movs	r3, #64	; 0x40
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54e:	e072      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c550:	2380      	movs	r3, #128	; 0x80
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c556:	e06e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a75      	ldr	r2, [pc, #468]	; (800c734 <UART_SetConfig+0x6a4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d130      	bne.n	800c5c4 <UART_SetConfig+0x534>
 800c562:	4b72      	ldr	r3, [pc, #456]	; (800c72c <UART_SetConfig+0x69c>)
 800c564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b05      	cmp	r3, #5
 800c56c:	d826      	bhi.n	800c5bc <UART_SetConfig+0x52c>
 800c56e:	a201      	add	r2, pc, #4	; (adr r2, 800c574 <UART_SetConfig+0x4e4>)
 800c570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c574:	0800c58d 	.word	0x0800c58d
 800c578:	0800c595 	.word	0x0800c595
 800c57c:	0800c59d 	.word	0x0800c59d
 800c580:	0800c5a5 	.word	0x0800c5a5
 800c584:	0800c5ad 	.word	0x0800c5ad
 800c588:	0800c5b5 	.word	0x0800c5b5
 800c58c:	2300      	movs	r3, #0
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c592:	e050      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c594:	2304      	movs	r3, #4
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59a:	e04c      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c59c:	2308      	movs	r3, #8
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a2:	e048      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c5a4:	2310      	movs	r3, #16
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5aa:	e044      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c5ac:	2320      	movs	r3, #32
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e040      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e03c      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c5bc:	2380      	movs	r3, #128	; 0x80
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e038      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a5b      	ldr	r2, [pc, #364]	; (800c738 <UART_SetConfig+0x6a8>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d130      	bne.n	800c630 <UART_SetConfig+0x5a0>
 800c5ce:	4b57      	ldr	r3, [pc, #348]	; (800c72c <UART_SetConfig+0x69c>)
 800c5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d2:	f003 0307 	and.w	r3, r3, #7
 800c5d6:	2b05      	cmp	r3, #5
 800c5d8:	d826      	bhi.n	800c628 <UART_SetConfig+0x598>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <UART_SetConfig+0x550>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c5f9 	.word	0x0800c5f9
 800c5e4:	0800c601 	.word	0x0800c601
 800c5e8:	0800c609 	.word	0x0800c609
 800c5ec:	0800c611 	.word	0x0800c611
 800c5f0:	0800c619 	.word	0x0800c619
 800c5f4:	0800c621 	.word	0x0800c621
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e01a      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c600:	2304      	movs	r3, #4
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e016      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c608:	2308      	movs	r3, #8
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e012      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c610:	2310      	movs	r3, #16
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e00e      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c618:	2320      	movs	r3, #32
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e00a      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c620:	2340      	movs	r3, #64	; 0x40
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c626:	e006      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c628:	2380      	movs	r3, #128	; 0x80
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62e:	e002      	b.n	800c636 <UART_SetConfig+0x5a6>
 800c630:	2380      	movs	r3, #128	; 0x80
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a3f      	ldr	r2, [pc, #252]	; (800c738 <UART_SetConfig+0x6a8>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	f040 80f8 	bne.w	800c832 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c642:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c646:	2b20      	cmp	r3, #32
 800c648:	dc46      	bgt.n	800c6d8 <UART_SetConfig+0x648>
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	f2c0 8082 	blt.w	800c754 <UART_SetConfig+0x6c4>
 800c650:	3b02      	subs	r3, #2
 800c652:	2b1e      	cmp	r3, #30
 800c654:	d87e      	bhi.n	800c754 <UART_SetConfig+0x6c4>
 800c656:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <UART_SetConfig+0x5cc>)
 800c658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65c:	0800c6df 	.word	0x0800c6df
 800c660:	0800c755 	.word	0x0800c755
 800c664:	0800c6e7 	.word	0x0800c6e7
 800c668:	0800c755 	.word	0x0800c755
 800c66c:	0800c755 	.word	0x0800c755
 800c670:	0800c755 	.word	0x0800c755
 800c674:	0800c6f7 	.word	0x0800c6f7
 800c678:	0800c755 	.word	0x0800c755
 800c67c:	0800c755 	.word	0x0800c755
 800c680:	0800c755 	.word	0x0800c755
 800c684:	0800c755 	.word	0x0800c755
 800c688:	0800c755 	.word	0x0800c755
 800c68c:	0800c755 	.word	0x0800c755
 800c690:	0800c755 	.word	0x0800c755
 800c694:	0800c707 	.word	0x0800c707
 800c698:	0800c755 	.word	0x0800c755
 800c69c:	0800c755 	.word	0x0800c755
 800c6a0:	0800c755 	.word	0x0800c755
 800c6a4:	0800c755 	.word	0x0800c755
 800c6a8:	0800c755 	.word	0x0800c755
 800c6ac:	0800c755 	.word	0x0800c755
 800c6b0:	0800c755 	.word	0x0800c755
 800c6b4:	0800c755 	.word	0x0800c755
 800c6b8:	0800c755 	.word	0x0800c755
 800c6bc:	0800c755 	.word	0x0800c755
 800c6c0:	0800c755 	.word	0x0800c755
 800c6c4:	0800c755 	.word	0x0800c755
 800c6c8:	0800c755 	.word	0x0800c755
 800c6cc:	0800c755 	.word	0x0800c755
 800c6d0:	0800c755 	.word	0x0800c755
 800c6d4:	0800c747 	.word	0x0800c747
 800c6d8:	2b40      	cmp	r3, #64	; 0x40
 800c6da:	d037      	beq.n	800c74c <UART_SetConfig+0x6bc>
 800c6dc:	e03a      	b.n	800c754 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c6de:	f7fd f8c5 	bl	800986c <HAL_RCCEx_GetD3PCLK1Freq>
 800c6e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6e4:	e03c      	b.n	800c760 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd f8d4 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f4:	e034      	b.n	800c760 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f6:	f107 0318 	add.w	r3, r7, #24
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fd fa20 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c704:	e02c      	b.n	800c760 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c706:	4b09      	ldr	r3, [pc, #36]	; (800c72c <UART_SetConfig+0x69c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0320 	and.w	r3, r3, #32
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d016      	beq.n	800c740 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c712:	4b06      	ldr	r3, [pc, #24]	; (800c72c <UART_SetConfig+0x69c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	08db      	lsrs	r3, r3, #3
 800c718:	f003 0303 	and.w	r3, r3, #3
 800c71c:	4a07      	ldr	r2, [pc, #28]	; (800c73c <UART_SetConfig+0x6ac>)
 800c71e:	fa22 f303 	lsr.w	r3, r2, r3
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c724:	e01c      	b.n	800c760 <UART_SetConfig+0x6d0>
 800c726:	bf00      	nop
 800c728:	40011400 	.word	0x40011400
 800c72c:	58024400 	.word	0x58024400
 800c730:	40007800 	.word	0x40007800
 800c734:	40007c00 	.word	0x40007c00
 800c738:	58000c00 	.word	0x58000c00
 800c73c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c740:	4b9d      	ldr	r3, [pc, #628]	; (800c9b8 <UART_SetConfig+0x928>)
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c744:	e00c      	b.n	800c760 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c746:	4b9d      	ldr	r3, [pc, #628]	; (800c9bc <UART_SetConfig+0x92c>)
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74a:	e009      	b.n	800c760 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c74c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c752:	e005      	b.n	800c760 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c75e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 81de 	beq.w	800cb24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76c:	4a94      	ldr	r2, [pc, #592]	; (800c9c0 <UART_SetConfig+0x930>)
 800c76e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c772:	461a      	mov	r2, r3
 800c774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c776:	fbb3 f3f2 	udiv	r3, r3, r2
 800c77a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	4613      	mov	r3, r2
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	4413      	add	r3, r2
 800c786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c788:	429a      	cmp	r2, r3
 800c78a:	d305      	bcc.n	800c798 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c794:	429a      	cmp	r2, r3
 800c796:	d903      	bls.n	800c7a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c79e:	e1c1      	b.n	800cb24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	60bb      	str	r3, [r7, #8]
 800c7a6:	60fa      	str	r2, [r7, #12]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ac:	4a84      	ldr	r2, [pc, #528]	; (800c9c0 <UART_SetConfig+0x930>)
 800c7ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	603b      	str	r3, [r7, #0]
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c7c2:	f7f3 ffa1 	bl	8000708 <__aeabi_uldivmod>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f04f 0200 	mov.w	r2, #0
 800c7d2:	f04f 0300 	mov.w	r3, #0
 800c7d6:	020b      	lsls	r3, r1, #8
 800c7d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7dc:	0202      	lsls	r2, r0, #8
 800c7de:	6979      	ldr	r1, [r7, #20]
 800c7e0:	6849      	ldr	r1, [r1, #4]
 800c7e2:	0849      	lsrs	r1, r1, #1
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	eb12 0804 	adds.w	r8, r2, r4
 800c7ee:	eb43 0905 	adc.w	r9, r3, r5
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	469a      	mov	sl, r3
 800c7fa:	4693      	mov	fp, r2
 800c7fc:	4652      	mov	r2, sl
 800c7fe:	465b      	mov	r3, fp
 800c800:	4640      	mov	r0, r8
 800c802:	4649      	mov	r1, r9
 800c804:	f7f3 ff80 	bl	8000708 <__aeabi_uldivmod>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4613      	mov	r3, r2
 800c80e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c816:	d308      	bcc.n	800c82a <UART_SetConfig+0x79a>
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c81e:	d204      	bcs.n	800c82a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c826:	60da      	str	r2, [r3, #12]
 800c828:	e17c      	b.n	800cb24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c830:	e178      	b.n	800cb24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c83a:	f040 80c5 	bne.w	800c9c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c83e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c842:	2b20      	cmp	r3, #32
 800c844:	dc48      	bgt.n	800c8d8 <UART_SetConfig+0x848>
 800c846:	2b00      	cmp	r3, #0
 800c848:	db7b      	blt.n	800c942 <UART_SetConfig+0x8b2>
 800c84a:	2b20      	cmp	r3, #32
 800c84c:	d879      	bhi.n	800c942 <UART_SetConfig+0x8b2>
 800c84e:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <UART_SetConfig+0x7c4>)
 800c850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c854:	0800c8df 	.word	0x0800c8df
 800c858:	0800c8e7 	.word	0x0800c8e7
 800c85c:	0800c943 	.word	0x0800c943
 800c860:	0800c943 	.word	0x0800c943
 800c864:	0800c8ef 	.word	0x0800c8ef
 800c868:	0800c943 	.word	0x0800c943
 800c86c:	0800c943 	.word	0x0800c943
 800c870:	0800c943 	.word	0x0800c943
 800c874:	0800c8ff 	.word	0x0800c8ff
 800c878:	0800c943 	.word	0x0800c943
 800c87c:	0800c943 	.word	0x0800c943
 800c880:	0800c943 	.word	0x0800c943
 800c884:	0800c943 	.word	0x0800c943
 800c888:	0800c943 	.word	0x0800c943
 800c88c:	0800c943 	.word	0x0800c943
 800c890:	0800c943 	.word	0x0800c943
 800c894:	0800c90f 	.word	0x0800c90f
 800c898:	0800c943 	.word	0x0800c943
 800c89c:	0800c943 	.word	0x0800c943
 800c8a0:	0800c943 	.word	0x0800c943
 800c8a4:	0800c943 	.word	0x0800c943
 800c8a8:	0800c943 	.word	0x0800c943
 800c8ac:	0800c943 	.word	0x0800c943
 800c8b0:	0800c943 	.word	0x0800c943
 800c8b4:	0800c943 	.word	0x0800c943
 800c8b8:	0800c943 	.word	0x0800c943
 800c8bc:	0800c943 	.word	0x0800c943
 800c8c0:	0800c943 	.word	0x0800c943
 800c8c4:	0800c943 	.word	0x0800c943
 800c8c8:	0800c943 	.word	0x0800c943
 800c8cc:	0800c943 	.word	0x0800c943
 800c8d0:	0800c943 	.word	0x0800c943
 800c8d4:	0800c935 	.word	0x0800c935
 800c8d8:	2b40      	cmp	r3, #64	; 0x40
 800c8da:	d02e      	beq.n	800c93a <UART_SetConfig+0x8aa>
 800c8dc:	e031      	b.n	800c942 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8de:	f7fa ffcd 	bl	800787c <HAL_RCC_GetPCLK1Freq>
 800c8e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8e4:	e033      	b.n	800c94e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8e6:	f7fa ffdf 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800c8ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8ec:	e02f      	b.n	800c94e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fc ffd0 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8fc:	e027      	b.n	800c94e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8fe:	f107 0318 	add.w	r3, r7, #24
 800c902:	4618      	mov	r0, r3
 800c904:	f7fd f91c 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90c:	e01f      	b.n	800c94e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c90e:	4b2d      	ldr	r3, [pc, #180]	; (800c9c4 <UART_SetConfig+0x934>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 0320 	and.w	r3, r3, #32
 800c916:	2b00      	cmp	r3, #0
 800c918:	d009      	beq.n	800c92e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c91a:	4b2a      	ldr	r3, [pc, #168]	; (800c9c4 <UART_SetConfig+0x934>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	08db      	lsrs	r3, r3, #3
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	4a24      	ldr	r2, [pc, #144]	; (800c9b8 <UART_SetConfig+0x928>)
 800c926:	fa22 f303 	lsr.w	r3, r2, r3
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c92c:	e00f      	b.n	800c94e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c92e:	4b22      	ldr	r3, [pc, #136]	; (800c9b8 <UART_SetConfig+0x928>)
 800c930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c932:	e00c      	b.n	800c94e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c934:	4b21      	ldr	r3, [pc, #132]	; (800c9bc <UART_SetConfig+0x92c>)
 800c936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c938:	e009      	b.n	800c94e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c93a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e005      	b.n	800c94e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c94c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 80e7 	beq.w	800cb24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95a:	4a19      	ldr	r2, [pc, #100]	; (800c9c0 <UART_SetConfig+0x930>)
 800c95c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c960:	461a      	mov	r2, r3
 800c962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c964:	fbb3 f3f2 	udiv	r3, r3, r2
 800c968:	005a      	lsls	r2, r3, #1
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	085b      	lsrs	r3, r3, #1
 800c970:	441a      	add	r2, r3
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	fbb2 f3f3 	udiv	r3, r2, r3
 800c97a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	2b0f      	cmp	r3, #15
 800c980:	d916      	bls.n	800c9b0 <UART_SetConfig+0x920>
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c988:	d212      	bcs.n	800c9b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	f023 030f 	bic.w	r3, r3, #15
 800c992:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	085b      	lsrs	r3, r3, #1
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f003 0307 	and.w	r3, r3, #7
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c9ac:	60da      	str	r2, [r3, #12]
 800c9ae:	e0b9      	b.n	800cb24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c9b6:	e0b5      	b.n	800cb24 <UART_SetConfig+0xa94>
 800c9b8:	03d09000 	.word	0x03d09000
 800c9bc:	003d0900 	.word	0x003d0900
 800c9c0:	08014f70 	.word	0x08014f70
 800c9c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c9cc:	2b20      	cmp	r3, #32
 800c9ce:	dc49      	bgt.n	800ca64 <UART_SetConfig+0x9d4>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	db7c      	blt.n	800cace <UART_SetConfig+0xa3e>
 800c9d4:	2b20      	cmp	r3, #32
 800c9d6:	d87a      	bhi.n	800cace <UART_SetConfig+0xa3e>
 800c9d8:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0x950>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800ca6b 	.word	0x0800ca6b
 800c9e4:	0800ca73 	.word	0x0800ca73
 800c9e8:	0800cacf 	.word	0x0800cacf
 800c9ec:	0800cacf 	.word	0x0800cacf
 800c9f0:	0800ca7b 	.word	0x0800ca7b
 800c9f4:	0800cacf 	.word	0x0800cacf
 800c9f8:	0800cacf 	.word	0x0800cacf
 800c9fc:	0800cacf 	.word	0x0800cacf
 800ca00:	0800ca8b 	.word	0x0800ca8b
 800ca04:	0800cacf 	.word	0x0800cacf
 800ca08:	0800cacf 	.word	0x0800cacf
 800ca0c:	0800cacf 	.word	0x0800cacf
 800ca10:	0800cacf 	.word	0x0800cacf
 800ca14:	0800cacf 	.word	0x0800cacf
 800ca18:	0800cacf 	.word	0x0800cacf
 800ca1c:	0800cacf 	.word	0x0800cacf
 800ca20:	0800ca9b 	.word	0x0800ca9b
 800ca24:	0800cacf 	.word	0x0800cacf
 800ca28:	0800cacf 	.word	0x0800cacf
 800ca2c:	0800cacf 	.word	0x0800cacf
 800ca30:	0800cacf 	.word	0x0800cacf
 800ca34:	0800cacf 	.word	0x0800cacf
 800ca38:	0800cacf 	.word	0x0800cacf
 800ca3c:	0800cacf 	.word	0x0800cacf
 800ca40:	0800cacf 	.word	0x0800cacf
 800ca44:	0800cacf 	.word	0x0800cacf
 800ca48:	0800cacf 	.word	0x0800cacf
 800ca4c:	0800cacf 	.word	0x0800cacf
 800ca50:	0800cacf 	.word	0x0800cacf
 800ca54:	0800cacf 	.word	0x0800cacf
 800ca58:	0800cacf 	.word	0x0800cacf
 800ca5c:	0800cacf 	.word	0x0800cacf
 800ca60:	0800cac1 	.word	0x0800cac1
 800ca64:	2b40      	cmp	r3, #64	; 0x40
 800ca66:	d02e      	beq.n	800cac6 <UART_SetConfig+0xa36>
 800ca68:	e031      	b.n	800cace <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca6a:	f7fa ff07 	bl	800787c <HAL_RCC_GetPCLK1Freq>
 800ca6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca70:	e033      	b.n	800cada <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca72:	f7fa ff19 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800ca76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca78:	e02f      	b.n	800cada <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fc ff0a 	bl	8009898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca88:	e027      	b.n	800cada <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca8a:	f107 0318 	add.w	r3, r7, #24
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fd f856 	bl	8009b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca98:	e01f      	b.n	800cada <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca9a:	4b2d      	ldr	r3, [pc, #180]	; (800cb50 <UART_SetConfig+0xac0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0320 	and.w	r3, r3, #32
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d009      	beq.n	800caba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caa6:	4b2a      	ldr	r3, [pc, #168]	; (800cb50 <UART_SetConfig+0xac0>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	08db      	lsrs	r3, r3, #3
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	4a28      	ldr	r2, [pc, #160]	; (800cb54 <UART_SetConfig+0xac4>)
 800cab2:	fa22 f303 	lsr.w	r3, r2, r3
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cab8:	e00f      	b.n	800cada <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800caba:	4b26      	ldr	r3, [pc, #152]	; (800cb54 <UART_SetConfig+0xac4>)
 800cabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cabe:	e00c      	b.n	800cada <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cac0:	4b25      	ldr	r3, [pc, #148]	; (800cb58 <UART_SetConfig+0xac8>)
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac4:	e009      	b.n	800cada <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cacc:	e005      	b.n	800cada <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cad8:	bf00      	nop
    }

    if (pclk != 0U)
 800cada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d021      	beq.n	800cb24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae4:	4a1d      	ldr	r2, [pc, #116]	; (800cb5c <UART_SetConfig+0xacc>)
 800cae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caea:	461a      	mov	r2, r3
 800caec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caee:	fbb3 f2f2 	udiv	r2, r3, r2
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	085b      	lsrs	r3, r3, #1
 800caf8:	441a      	add	r2, r3
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	2b0f      	cmp	r3, #15
 800cb08:	d909      	bls.n	800cb1e <UART_SetConfig+0xa8e>
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb10:	d205      	bcs.n	800cb1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	60da      	str	r2, [r3, #12]
 800cb1c:	e002      	b.n	800cb24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2200      	movs	r2, #0
 800cb38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cb40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3748      	adds	r7, #72	; 0x48
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb4e:	bf00      	nop
 800cb50:	58024400 	.word	0x58024400
 800cb54:	03d09000 	.word	0x03d09000
 800cb58:	003d0900 	.word	0x003d0900
 800cb5c:	08014f70 	.word	0x08014f70

0800cb60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00a      	beq.n	800cb8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	430a      	orrs	r2, r1
 800cb88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8e:	f003 0302 	and.w	r3, r3, #2
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00a      	beq.n	800cbac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00a      	beq.n	800cbce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	430a      	orrs	r2, r1
 800cbcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd2:	f003 0308 	and.w	r3, r3, #8
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00a      	beq.n	800cbf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	430a      	orrs	r2, r1
 800cbee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf4:	f003 0310 	and.w	r3, r3, #16
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00a      	beq.n	800cc12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc16:	f003 0320 	and.w	r3, r3, #32
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	430a      	orrs	r2, r1
 800cc32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d01a      	beq.n	800cc76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc5e:	d10a      	bne.n	800cc76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	430a      	orrs	r2, r1
 800cc96:	605a      	str	r2, [r3, #4]
  }
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b098      	sub	sp, #96	; 0x60
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ccb4:	f7f5 fc02 	bl	80024bc <HAL_GetTick>
 800ccb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f003 0308 	and.w	r3, r3, #8
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	d12f      	bne.n	800cd28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f88e 	bl	800cdf8 <UART_WaitOnFlagUntilTimeout>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d022      	beq.n	800cd28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	e853 3f00 	ldrex	r3, [r3]
 800ccee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ccf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccf6:	653b      	str	r3, [r7, #80]	; 0x50
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd00:	647b      	str	r3, [r7, #68]	; 0x44
 800cd02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd08:	e841 2300 	strex	r3, r2, [r1]
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e6      	bne.n	800cce2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2220      	movs	r2, #32
 800cd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e063      	b.n	800cdf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f003 0304 	and.w	r3, r3, #4
 800cd32:	2b04      	cmp	r3, #4
 800cd34:	d149      	bne.n	800cdca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f857 	bl	800cdf8 <UART_WaitOnFlagUntilTimeout>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d03c      	beq.n	800cdca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	e853 3f00 	ldrex	r3, [r3]
 800cd5c:	623b      	str	r3, [r7, #32]
   return(result);
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd6e:	633b      	str	r3, [r7, #48]	; 0x30
 800cd70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd76:	e841 2300 	strex	r3, r2, [r1]
 800cd7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1e6      	bne.n	800cd50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3308      	adds	r3, #8
 800cd88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	e853 3f00 	ldrex	r3, [r3]
 800cd90:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f023 0301 	bic.w	r3, r3, #1
 800cd98:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3308      	adds	r3, #8
 800cda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cda2:	61fa      	str	r2, [r7, #28]
 800cda4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda6:	69b9      	ldr	r1, [r7, #24]
 800cda8:	69fa      	ldr	r2, [r7, #28]
 800cdaa:	e841 2300 	strex	r3, r2, [r1]
 800cdae:	617b      	str	r3, [r7, #20]
   return(result);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1e5      	bne.n	800cd82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2220      	movs	r2, #32
 800cdba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e012      	b.n	800cdf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3758      	adds	r7, #88	; 0x58
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	603b      	str	r3, [r7, #0]
 800ce04:	4613      	mov	r3, r2
 800ce06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce08:	e049      	b.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce10:	d045      	beq.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce12:	f7f5 fb53 	bl	80024bc <HAL_GetTick>
 800ce16:	4602      	mov	r2, r0
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	69ba      	ldr	r2, [r7, #24]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d302      	bcc.n	800ce28 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e048      	b.n	800cebe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0304 	and.w	r3, r3, #4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d031      	beq.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	f003 0308 	and.w	r3, r3, #8
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d110      	bne.n	800ce6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2208      	movs	r2, #8
 800ce4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f000 f839 	bl	800cec8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2208      	movs	r2, #8
 800ce5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e029      	b.n	800cebe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce78:	d111      	bne.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 f81f 	bl	800cec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e00f      	b.n	800cebe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	69da      	ldr	r2, [r3, #28]
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4013      	ands	r3, r2
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	bf0c      	ite	eq
 800ceae:	2301      	moveq	r3, #1
 800ceb0:	2300      	movne	r3, #0
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	79fb      	ldrb	r3, [r7, #7]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d0a6      	beq.n	800ce0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b095      	sub	sp, #84	; 0x54
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	e853 3f00 	ldrex	r3, [r3]
 800cedc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceee:	643b      	str	r3, [r7, #64]	; 0x40
 800cef0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cef6:	e841 2300 	strex	r3, r2, [r1]
 800cefa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1e6      	bne.n	800ced0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3308      	adds	r3, #8
 800cf08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	e853 3f00 	ldrex	r3, [r3]
 800cf10:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf12:	69fa      	ldr	r2, [r7, #28]
 800cf14:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <UART_EndRxTransfer+0xc8>)
 800cf16:	4013      	ands	r3, r2
 800cf18:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3308      	adds	r3, #8
 800cf20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2a:	e841 2300 	strex	r3, r2, [r1]
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1e5      	bne.n	800cf02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d118      	bne.n	800cf70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	e853 3f00 	ldrex	r3, [r3]
 800cf4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	f023 0310 	bic.w	r3, r3, #16
 800cf52:	647b      	str	r3, [r7, #68]	; 0x44
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf5c:	61bb      	str	r3, [r7, #24]
 800cf5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf60:	6979      	ldr	r1, [r7, #20]
 800cf62:	69ba      	ldr	r2, [r7, #24]
 800cf64:	e841 2300 	strex	r3, r2, [r1]
 800cf68:	613b      	str	r3, [r7, #16]
   return(result);
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1e6      	bne.n	800cf3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2220      	movs	r2, #32
 800cf74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf84:	bf00      	nop
 800cf86:	3754      	adds	r7, #84	; 0x54
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	effffffe 	.word	0xeffffffe

0800cf94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f7ff f856 	bl	800c064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb8:	bf00      	nop
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b088      	sub	sp, #32
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfdc:	61fb      	str	r3, [r7, #28]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	61bb      	str	r3, [r7, #24]
 800cfe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	6979      	ldr	r1, [r7, #20]
 800cfec:	69ba      	ldr	r2, [r7, #24]
 800cfee:	e841 2300 	strex	r3, r2, [r1]
 800cff2:	613b      	str	r3, [r7, #16]
   return(result);
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1e6      	bne.n	800cfc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff f821 	bl	800c050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d00e:	bf00      	nop
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d01e:	bf00      	nop
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d032:	bf00      	nop
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr

0800d03e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d03e:	b480      	push	{r7}
 800d040:	b083      	sub	sp, #12
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d052:	b480      	push	{r7}
 800d054:	b085      	sub	sp, #20
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d060:	2b01      	cmp	r3, #1
 800d062:	d101      	bne.n	800d068 <HAL_UARTEx_DisableFifoMode+0x16>
 800d064:	2302      	movs	r3, #2
 800d066:	e027      	b.n	800d0b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2224      	movs	r2, #36	; 0x24
 800d074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f022 0201 	bic.w	r2, r2, #1
 800d08e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d101      	bne.n	800d0dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e02d      	b.n	800d138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2224      	movs	r2, #36	; 0x24
 800d0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f022 0201 	bic.w	r2, r2, #1
 800d102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	430a      	orrs	r2, r1
 800d116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f84f 	bl	800d1bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2220      	movs	r2, #32
 800d12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d150:	2b01      	cmp	r3, #1
 800d152:	d101      	bne.n	800d158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d154:	2302      	movs	r3, #2
 800d156:	e02d      	b.n	800d1b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2224      	movs	r2, #36	; 0x24
 800d164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f022 0201 	bic.w	r2, r2, #1
 800d17e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	430a      	orrs	r2, r1
 800d192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f811 	bl	800d1bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2220      	movs	r2, #32
 800d1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d108      	bne.n	800d1de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1dc:	e031      	b.n	800d242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1de:	2310      	movs	r3, #16
 800d1e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1e2:	2310      	movs	r3, #16
 800d1e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	0e5b      	lsrs	r3, r3, #25
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	f003 0307 	and.w	r3, r3, #7
 800d1f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	0f5b      	lsrs	r3, r3, #29
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	f003 0307 	and.w	r3, r3, #7
 800d204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d206:	7bbb      	ldrb	r3, [r7, #14]
 800d208:	7b3a      	ldrb	r2, [r7, #12]
 800d20a:	4911      	ldr	r1, [pc, #68]	; (800d250 <UARTEx_SetNbDataToProcess+0x94>)
 800d20c:	5c8a      	ldrb	r2, [r1, r2]
 800d20e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d212:	7b3a      	ldrb	r2, [r7, #12]
 800d214:	490f      	ldr	r1, [pc, #60]	; (800d254 <UARTEx_SetNbDataToProcess+0x98>)
 800d216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d218:	fb93 f3f2 	sdiv	r3, r3, r2
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	7b7a      	ldrb	r2, [r7, #13]
 800d228:	4909      	ldr	r1, [pc, #36]	; (800d250 <UARTEx_SetNbDataToProcess+0x94>)
 800d22a:	5c8a      	ldrb	r2, [r1, r2]
 800d22c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d230:	7b7a      	ldrb	r2, [r7, #13]
 800d232:	4908      	ldr	r1, [pc, #32]	; (800d254 <UARTEx_SetNbDataToProcess+0x98>)
 800d234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d236:	fb93 f3f2 	sdiv	r3, r3, r2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d242:	bf00      	nop
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	08014f88 	.word	0x08014f88
 800d254:	08014f90 	.word	0x08014f90

0800d258 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d258:	b084      	sub	sp, #16
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b084      	sub	sp, #16
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	f107 001c 	add.w	r0, r7, #28
 800d266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d120      	bne.n	800d2b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	68da      	ldr	r2, [r3, #12]
 800d280:	4b2a      	ldr	r3, [pc, #168]	; (800d32c <USB_CoreInit+0xd4>)
 800d282:	4013      	ands	r3, r2
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d296:	2b01      	cmp	r3, #1
 800d298:	d105      	bne.n	800d2a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 faac 	bl	800d804 <USB_CoreReset>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]
 800d2b0:	e01a      	b.n	800d2e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 faa0 	bl	800d804 <USB_CoreReset>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d106      	bne.n	800d2dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	639a      	str	r2, [r3, #56]	; 0x38
 800d2da:	e005      	b.n	800d2e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d116      	bne.n	800d31c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2fc:	4b0c      	ldr	r3, [pc, #48]	; (800d330 <USB_CoreInit+0xd8>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	f043 0206 	orr.w	r2, r3, #6
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	f043 0220 	orr.w	r2, r3, #32
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d328:	b004      	add	sp, #16
 800d32a:	4770      	bx	lr
 800d32c:	ffbdffbf 	.word	0xffbdffbf
 800d330:	03ee0000 	.word	0x03ee0000

0800d334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f023 0201 	bic.w	r2, r3, #1
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d372:	78fb      	ldrb	r3, [r7, #3]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d115      	bne.n	800d3a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d384:	2001      	movs	r0, #1
 800d386:	f7f5 f8a5 	bl	80024d4 <HAL_Delay>
      ms++;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3301      	adds	r3, #1
 800d38e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fa29 	bl	800d7e8 <USB_GetMode>
 800d396:	4603      	mov	r3, r0
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d01e      	beq.n	800d3da <USB_SetCurrentMode+0x84>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b31      	cmp	r3, #49	; 0x31
 800d3a0:	d9f0      	bls.n	800d384 <USB_SetCurrentMode+0x2e>
 800d3a2:	e01a      	b.n	800d3da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d3a4:	78fb      	ldrb	r3, [r7, #3]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d115      	bne.n	800d3d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	f7f5 f88c 	bl	80024d4 <HAL_Delay>
      ms++;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fa10 	bl	800d7e8 <USB_GetMode>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d005      	beq.n	800d3da <USB_SetCurrentMode+0x84>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b31      	cmp	r3, #49	; 0x31
 800d3d2:	d9f0      	bls.n	800d3b6 <USB_SetCurrentMode+0x60>
 800d3d4:	e001      	b.n	800d3da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e005      	b.n	800d3e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b32      	cmp	r3, #50	; 0x32
 800d3de:	d101      	bne.n	800d3e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e000      	b.n	800d3e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3f0:	b084      	sub	sp, #16
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b086      	sub	sp, #24
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d3fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d40a:	2300      	movs	r3, #0
 800d40c:	613b      	str	r3, [r7, #16]
 800d40e:	e009      	b.n	800d424 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	3340      	adds	r3, #64	; 0x40
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	2200      	movs	r2, #0
 800d41c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	3301      	adds	r3, #1
 800d422:	613b      	str	r3, [r7, #16]
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b0e      	cmp	r3, #14
 800d428:	d9f2      	bls.n	800d410 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d11c      	bne.n	800d46a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d43e:	f043 0302 	orr.w	r3, r3, #2
 800d442:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d448:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	601a      	str	r2, [r3, #0]
 800d468:	e005      	b.n	800d476 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d47c:	461a      	mov	r2, r3
 800d47e:	2300      	movs	r3, #0
 800d480:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d488:	4619      	mov	r1, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d490:	461a      	mov	r2, r3
 800d492:	680b      	ldr	r3, [r1, #0]
 800d494:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d10c      	bne.n	800d4b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f965 	bl	800d774 <USB_SetDevSpeed>
 800d4aa:	e008      	b.n	800d4be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d4ac:	2101      	movs	r1, #1
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f960 	bl	800d774 <USB_SetDevSpeed>
 800d4b4:	e003      	b.n	800d4be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d4b6:	2103      	movs	r1, #3
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f95b 	bl	800d774 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d4be:	2110      	movs	r1, #16
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f8f3 	bl	800d6ac <USB_FlushTxFifo>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 f91f 	bl	800d714 <USB_FlushRxFifo>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4fe:	461a      	mov	r2, r3
 800d500:	2300      	movs	r3, #0
 800d502:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d504:	2300      	movs	r3, #0
 800d506:	613b      	str	r3, [r7, #16]
 800d508:	e043      	b.n	800d592 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4413      	add	r3, r2
 800d512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d51c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d520:	d118      	bne.n	800d554 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	015a      	lsls	r2, r3, #5
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	4413      	add	r3, r2
 800d530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d534:	461a      	mov	r2, r3
 800d536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	e013      	b.n	800d566 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	015a      	lsls	r2, r3, #5
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	4413      	add	r3, r2
 800d546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d54a:	461a      	mov	r2, r3
 800d54c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	e008      	b.n	800d566 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	015a      	lsls	r2, r3, #5
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4413      	add	r3, r2
 800d55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d560:	461a      	mov	r2, r3
 800d562:	2300      	movs	r3, #0
 800d564:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	015a      	lsls	r2, r3, #5
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	4413      	add	r3, r2
 800d56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d572:	461a      	mov	r2, r3
 800d574:	2300      	movs	r3, #0
 800d576:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	015a      	lsls	r2, r3, #5
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d584:	461a      	mov	r2, r3
 800d586:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d58a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	3301      	adds	r3, #1
 800d590:	613b      	str	r3, [r7, #16]
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	429a      	cmp	r2, r3
 800d598:	d3b7      	bcc.n	800d50a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d59a:	2300      	movs	r3, #0
 800d59c:	613b      	str	r3, [r7, #16]
 800d59e:	e043      	b.n	800d628 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	015a      	lsls	r2, r3, #5
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5b6:	d118      	bne.n	800d5ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10a      	bne.n	800d5d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	e013      	b.n	800d5fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	015a      	lsls	r2, r3, #5
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4413      	add	r3, r2
 800d5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d5e6:	6013      	str	r3, [r2, #0]
 800d5e8:	e008      	b.n	800d5fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	015a      	lsls	r2, r3, #5
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d608:	461a      	mov	r2, r3
 800d60a:	2300      	movs	r3, #0
 800d60c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	015a      	lsls	r2, r3, #5
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	4413      	add	r3, r2
 800d616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61a:	461a      	mov	r2, r3
 800d61c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d620:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3301      	adds	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	693a      	ldr	r2, [r7, #16]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d3b7      	bcc.n	800d5a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d63e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d642:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d650:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d105      	bne.n	800d664 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	f043 0210 	orr.w	r2, r3, #16
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	699a      	ldr	r2, [r3, #24]
 800d668:	4b0e      	ldr	r3, [pc, #56]	; (800d6a4 <USB_DevInit+0x2b4>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	f043 0208 	orr.w	r2, r3, #8
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d684:	2b01      	cmp	r3, #1
 800d686:	d105      	bne.n	800d694 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	699a      	ldr	r2, [r3, #24]
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <USB_DevInit+0x2b8>)
 800d68e:	4313      	orrs	r3, r2
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d694:	7dfb      	ldrb	r3, [r7, #23]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6a0:	b004      	add	sp, #16
 800d6a2:	4770      	bx	lr
 800d6a4:	803c3800 	.word	0x803c3800
 800d6a8:	40000004 	.word	0x40000004

0800d6ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4a13      	ldr	r2, [pc, #76]	; (800d710 <USB_FlushTxFifo+0x64>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d901      	bls.n	800d6cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	e01b      	b.n	800d704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	daf2      	bge.n	800d6ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	019b      	lsls	r3, r3, #6
 800d6dc:	f043 0220 	orr.w	r2, r3, #32
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	4a08      	ldr	r2, [pc, #32]	; (800d710 <USB_FlushTxFifo+0x64>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d901      	bls.n	800d6f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	e006      	b.n	800d704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	f003 0320 	and.w	r3, r3, #32
 800d6fe:	2b20      	cmp	r3, #32
 800d700:	d0f0      	beq.n	800d6e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	00030d40 	.word	0x00030d40

0800d714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d71c:	2300      	movs	r3, #0
 800d71e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3301      	adds	r3, #1
 800d724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	4a11      	ldr	r2, [pc, #68]	; (800d770 <USB_FlushRxFifo+0x5c>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d901      	bls.n	800d732 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d72e:	2303      	movs	r3, #3
 800d730:	e018      	b.n	800d764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	2b00      	cmp	r3, #0
 800d738:	daf2      	bge.n	800d720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2210      	movs	r2, #16
 800d742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	3301      	adds	r3, #1
 800d748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4a08      	ldr	r2, [pc, #32]	; (800d770 <USB_FlushRxFifo+0x5c>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d901      	bls.n	800d756 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d752:	2303      	movs	r3, #3
 800d754:	e006      	b.n	800d764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	f003 0310 	and.w	r3, r3, #16
 800d75e:	2b10      	cmp	r3, #16
 800d760:	d0f0      	beq.n	800d744 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	00030d40 	.word	0x00030d40

0800d774 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	460b      	mov	r3, r1
 800d77e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	78fb      	ldrb	r3, [r7, #3]
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d794:	4313      	orrs	r3, r2
 800d796:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b085      	sub	sp, #20
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7c0:	f023 0303 	bic.w	r3, r3, #3
 800d7c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7d4:	f043 0302 	orr.w	r3, r3, #2
 800d7d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	695b      	ldr	r3, [r3, #20]
 800d7f4:	f003 0301 	and.w	r3, r3, #1
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	3301      	adds	r3, #1
 800d814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	4a13      	ldr	r2, [pc, #76]	; (800d868 <USB_CoreReset+0x64>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d901      	bls.n	800d822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d81e:	2303      	movs	r3, #3
 800d820:	e01b      	b.n	800d85a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	2b00      	cmp	r3, #0
 800d828:	daf2      	bge.n	800d810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d82a:	2300      	movs	r3, #0
 800d82c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	f043 0201 	orr.w	r2, r3, #1
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	3301      	adds	r3, #1
 800d83e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a09      	ldr	r2, [pc, #36]	; (800d868 <USB_CoreReset+0x64>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d901      	bls.n	800d84c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d848:	2303      	movs	r3, #3
 800d84a:	e006      	b.n	800d85a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b01      	cmp	r3, #1
 800d856:	d0f0      	beq.n	800d83a <USB_CoreReset+0x36>

  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	00030d40 	.word	0x00030d40

0800d86c <__NVIC_SetPriority>:
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	6039      	str	r1, [r7, #0]
 800d876:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	db0a      	blt.n	800d896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	b2da      	uxtb	r2, r3
 800d884:	490c      	ldr	r1, [pc, #48]	; (800d8b8 <__NVIC_SetPriority+0x4c>)
 800d886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d88a:	0112      	lsls	r2, r2, #4
 800d88c:	b2d2      	uxtb	r2, r2
 800d88e:	440b      	add	r3, r1
 800d890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d894:	e00a      	b.n	800d8ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	4908      	ldr	r1, [pc, #32]	; (800d8bc <__NVIC_SetPriority+0x50>)
 800d89c:	88fb      	ldrh	r3, [r7, #6]
 800d89e:	f003 030f 	and.w	r3, r3, #15
 800d8a2:	3b04      	subs	r3, #4
 800d8a4:	0112      	lsls	r2, r2, #4
 800d8a6:	b2d2      	uxtb	r2, r2
 800d8a8:	440b      	add	r3, r1
 800d8aa:	761a      	strb	r2, [r3, #24]
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	e000e100 	.word	0xe000e100
 800d8bc:	e000ed00 	.word	0xe000ed00

0800d8c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d8c4:	4b05      	ldr	r3, [pc, #20]	; (800d8dc <SysTick_Handler+0x1c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d8c8:	f002 fb4c 	bl	800ff64 <xTaskGetSchedulerState>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d001      	beq.n	800d8d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d8d2:	f000 fec9 	bl	800e668 <xPortSysTickHandler>
  }
}
 800d8d6:	bf00      	nop
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	e000e010 	.word	0xe000e010

0800d8e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	f06f 0004 	mvn.w	r0, #4
 800d8ea:	f7ff ffbf 	bl	800d86c <__NVIC_SetPriority>
#endif
}
 800d8ee:	bf00      	nop
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8fa:	f3ef 8305 	mrs	r3, IPSR
 800d8fe:	603b      	str	r3, [r7, #0]
  return(result);
 800d900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d906:	f06f 0305 	mvn.w	r3, #5
 800d90a:	607b      	str	r3, [r7, #4]
 800d90c:	e00c      	b.n	800d928 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d90e:	4b0a      	ldr	r3, [pc, #40]	; (800d938 <osKernelInitialize+0x44>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d105      	bne.n	800d922 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d916:	4b08      	ldr	r3, [pc, #32]	; (800d938 <osKernelInitialize+0x44>)
 800d918:	2201      	movs	r2, #1
 800d91a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	607b      	str	r3, [r7, #4]
 800d920:	e002      	b.n	800d928 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d922:	f04f 33ff 	mov.w	r3, #4294967295
 800d926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d928:	687b      	ldr	r3, [r7, #4]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	24000b68 	.word	0x24000b68

0800d93c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d942:	f3ef 8305 	mrs	r3, IPSR
 800d946:	603b      	str	r3, [r7, #0]
  return(result);
 800d948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d94e:	f06f 0305 	mvn.w	r3, #5
 800d952:	607b      	str	r3, [r7, #4]
 800d954:	e010      	b.n	800d978 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d956:	4b0b      	ldr	r3, [pc, #44]	; (800d984 <osKernelStart+0x48>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d109      	bne.n	800d972 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d95e:	f7ff ffbf 	bl	800d8e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d962:	4b08      	ldr	r3, [pc, #32]	; (800d984 <osKernelStart+0x48>)
 800d964:	2202      	movs	r2, #2
 800d966:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d968:	f001 fea0 	bl	800f6ac <vTaskStartScheduler>
      stat = osOK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	607b      	str	r3, [r7, #4]
 800d970:	e002      	b.n	800d978 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d972:	f04f 33ff 	mov.w	r3, #4294967295
 800d976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d978:	687b      	ldr	r3, [r7, #4]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	24000b68 	.word	0x24000b68

0800d988 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08e      	sub	sp, #56	; 0x38
 800d98c:	af04      	add	r7, sp, #16
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d994:	2300      	movs	r3, #0
 800d996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d998:	f3ef 8305 	mrs	r3, IPSR
 800d99c:	617b      	str	r3, [r7, #20]
  return(result);
 800d99e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d17e      	bne.n	800daa2 <osThreadNew+0x11a>
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d07b      	beq.n	800daa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d9aa:	2380      	movs	r3, #128	; 0x80
 800d9ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d9ae:	2318      	movs	r3, #24
 800d9b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d045      	beq.n	800da4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d002      	beq.n	800d9d0 <osThreadNew+0x48>
        name = attr->name;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d008      	beq.n	800d9f6 <osThreadNew+0x6e>
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	2b38      	cmp	r3, #56	; 0x38
 800d9e8:	d805      	bhi.n	800d9f6 <osThreadNew+0x6e>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <osThreadNew+0x72>
        return (NULL);
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e054      	b.n	800daa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	089b      	lsrs	r3, r3, #2
 800da08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00e      	beq.n	800da30 <osThreadNew+0xa8>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	2ba7      	cmp	r3, #167	; 0xa7
 800da18:	d90a      	bls.n	800da30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d006      	beq.n	800da30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d002      	beq.n	800da30 <osThreadNew+0xa8>
        mem = 1;
 800da2a:	2301      	movs	r3, #1
 800da2c:	61bb      	str	r3, [r7, #24]
 800da2e:	e010      	b.n	800da52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d10c      	bne.n	800da52 <osThreadNew+0xca>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d108      	bne.n	800da52 <osThreadNew+0xca>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d104      	bne.n	800da52 <osThreadNew+0xca>
          mem = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	61bb      	str	r3, [r7, #24]
 800da4c:	e001      	b.n	800da52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d110      	bne.n	800da7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da60:	9202      	str	r2, [sp, #8]
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	6a3a      	ldr	r2, [r7, #32]
 800da6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f001 fc30 	bl	800f2d4 <xTaskCreateStatic>
 800da74:	4603      	mov	r3, r0
 800da76:	613b      	str	r3, [r7, #16]
 800da78:	e013      	b.n	800daa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d110      	bne.n	800daa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	b29a      	uxth	r2, r3
 800da84:	f107 0310 	add.w	r3, r7, #16
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f001 fc7b 	bl	800f38e <xTaskCreate>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d001      	beq.n	800daa2 <osThreadNew+0x11a>
            hTask = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800daa2:	693b      	ldr	r3, [r7, #16]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3728      	adds	r7, #40	; 0x28
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dab4:	f3ef 8305 	mrs	r3, IPSR
 800dab8:	60bb      	str	r3, [r7, #8]
  return(result);
 800daba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <osDelay+0x1c>
    stat = osErrorISR;
 800dac0:	f06f 0305 	mvn.w	r3, #5
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	e007      	b.n	800dad8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dac8:	2300      	movs	r3, #0
 800daca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f001 fdb6 	bl	800f644 <vTaskDelay>
    }
  }

  return (stat);
 800dad8:	68fb      	ldr	r3, [r7, #12]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b08a      	sub	sp, #40	; 0x28
 800dae6:	af02      	add	r7, sp, #8
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daf2:	f3ef 8305 	mrs	r3, IPSR
 800daf6:	613b      	str	r3, [r7, #16]
  return(result);
 800daf8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d15f      	bne.n	800dbbe <osMessageQueueNew+0xdc>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d05c      	beq.n	800dbbe <osMessageQueueNew+0xdc>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d059      	beq.n	800dbbe <osMessageQueueNew+0xdc>
    mem = -1;
 800db0a:	f04f 33ff 	mov.w	r3, #4294967295
 800db0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d029      	beq.n	800db6a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d012      	beq.n	800db44 <osMessageQueueNew+0x62>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	2b4f      	cmp	r3, #79	; 0x4f
 800db24:	d90e      	bls.n	800db44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00a      	beq.n	800db44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	695a      	ldr	r2, [r3, #20]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	68b9      	ldr	r1, [r7, #8]
 800db36:	fb01 f303 	mul.w	r3, r1, r3
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d302      	bcc.n	800db44 <osMessageQueueNew+0x62>
        mem = 1;
 800db3e:	2301      	movs	r3, #1
 800db40:	61bb      	str	r3, [r7, #24]
 800db42:	e014      	b.n	800db6e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d110      	bne.n	800db6e <osMessageQueueNew+0x8c>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10c      	bne.n	800db6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d108      	bne.n	800db6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d104      	bne.n	800db6e <osMessageQueueNew+0x8c>
          mem = 0;
 800db64:	2300      	movs	r3, #0
 800db66:	61bb      	str	r3, [r7, #24]
 800db68:	e001      	b.n	800db6e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d10b      	bne.n	800db8c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	691a      	ldr	r2, [r3, #16]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	2100      	movs	r1, #0
 800db7e:	9100      	str	r1, [sp, #0]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 fe68 	bl	800e858 <xQueueGenericCreateStatic>
 800db88:	61f8      	str	r0, [r7, #28]
 800db8a:	e008      	b.n	800db9e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d105      	bne.n	800db9e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800db92:	2200      	movs	r2, #0
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 fed6 	bl	800e948 <xQueueGenericCreate>
 800db9c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00c      	beq.n	800dbbe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	617b      	str	r3, [r7, #20]
 800dbb0:	e001      	b.n	800dbb6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dbb6:	6979      	ldr	r1, [r7, #20]
 800dbb8:	69f8      	ldr	r0, [r7, #28]
 800dbba:	f001 fb2d 	bl	800f218 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dbbe:	69fb      	ldr	r3, [r7, #28]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3720      	adds	r7, #32
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b088      	sub	sp, #32
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	603b      	str	r3, [r7, #0]
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe0:	f3ef 8305 	mrs	r3, IPSR
 800dbe4:	617b      	str	r3, [r7, #20]
  return(result);
 800dbe6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d028      	beq.n	800dc3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <osMessageQueuePut+0x36>
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <osMessageQueuePut+0x36>
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dbfe:	f06f 0303 	mvn.w	r3, #3
 800dc02:	61fb      	str	r3, [r7, #28]
 800dc04:	e038      	b.n	800dc78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dc06:	2300      	movs	r3, #0
 800dc08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dc0a:	f107 0210 	add.w	r2, r7, #16
 800dc0e:	2300      	movs	r3, #0
 800dc10:	68b9      	ldr	r1, [r7, #8]
 800dc12:	69b8      	ldr	r0, [r7, #24]
 800dc14:	f000 fff4 	bl	800ec00 <xQueueGenericSendFromISR>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d003      	beq.n	800dc26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dc1e:	f06f 0302 	mvn.w	r3, #2
 800dc22:	61fb      	str	r3, [r7, #28]
 800dc24:	e028      	b.n	800dc78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d025      	beq.n	800dc78 <osMessageQueuePut+0xb0>
 800dc2c:	4b15      	ldr	r3, [pc, #84]	; (800dc84 <osMessageQueuePut+0xbc>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	e01c      	b.n	800dc78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <osMessageQueuePut+0x82>
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d103      	bne.n	800dc52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dc4a:	f06f 0303 	mvn.w	r3, #3
 800dc4e:	61fb      	str	r3, [r7, #28]
 800dc50:	e012      	b.n	800dc78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc52:	2300      	movs	r3, #0
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	68b9      	ldr	r1, [r7, #8]
 800dc58:	69b8      	ldr	r0, [r7, #24]
 800dc5a:	f000 fed3 	bl	800ea04 <xQueueGenericSend>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d009      	beq.n	800dc78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dc6a:	f06f 0301 	mvn.w	r3, #1
 800dc6e:	61fb      	str	r3, [r7, #28]
 800dc70:	e002      	b.n	800dc78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dc72:	f06f 0302 	mvn.w	r3, #2
 800dc76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dc78:	69fb      	ldr	r3, [r7, #28]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3720      	adds	r7, #32
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	e000ed04 	.word	0xe000ed04

0800dc88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc9e:	f3ef 8305 	mrs	r3, IPSR
 800dca2:	617b      	str	r3, [r7, #20]
  return(result);
 800dca4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d028      	beq.n	800dcfc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d005      	beq.n	800dcbc <osMessageQueueGet+0x34>
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <osMessageQueueGet+0x34>
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dcbc:	f06f 0303 	mvn.w	r3, #3
 800dcc0:	61fb      	str	r3, [r7, #28]
 800dcc2:	e037      	b.n	800dd34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dcc8:	f107 0310 	add.w	r3, r7, #16
 800dccc:	461a      	mov	r2, r3
 800dcce:	68b9      	ldr	r1, [r7, #8]
 800dcd0:	69b8      	ldr	r0, [r7, #24]
 800dcd2:	f001 f911 	bl	800eef8 <xQueueReceiveFromISR>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d003      	beq.n	800dce4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dcdc:	f06f 0302 	mvn.w	r3, #2
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	e027      	b.n	800dd34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d024      	beq.n	800dd34 <osMessageQueueGet+0xac>
 800dcea:	4b15      	ldr	r3, [pc, #84]	; (800dd40 <osMessageQueueGet+0xb8>)
 800dcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	e01b      	b.n	800dd34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <osMessageQueueGet+0x80>
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dd08:	f06f 0303 	mvn.w	r3, #3
 800dd0c:	61fb      	str	r3, [r7, #28]
 800dd0e:	e011      	b.n	800dd34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	69b8      	ldr	r0, [r7, #24]
 800dd16:	f001 f80f 	bl	800ed38 <xQueueReceive>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d009      	beq.n	800dd34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d003      	beq.n	800dd2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dd26:	f06f 0301 	mvn.w	r3, #1
 800dd2a:	61fb      	str	r3, [r7, #28]
 800dd2c:	e002      	b.n	800dd34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dd2e:	f06f 0302 	mvn.w	r3, #2
 800dd32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd34:	69fb      	ldr	r3, [r7, #28]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3720      	adds	r7, #32
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	4a07      	ldr	r2, [pc, #28]	; (800dd70 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	4a06      	ldr	r2, [pc, #24]	; (800dd74 <vApplicationGetIdleTaskMemory+0x30>)
 800dd5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2280      	movs	r2, #128	; 0x80
 800dd60:	601a      	str	r2, [r3, #0]
}
 800dd62:	bf00      	nop
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	24000b6c 	.word	0x24000b6c
 800dd74:	24000c14 	.word	0x24000c14

0800dd78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	4a07      	ldr	r2, [pc, #28]	; (800dda4 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	4a06      	ldr	r2, [pc, #24]	; (800dda8 <vApplicationGetTimerTaskMemory+0x30>)
 800dd8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd96:	601a      	str	r2, [r3, #0]
}
 800dd98:	bf00      	nop
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	24000e14 	.word	0x24000e14
 800dda8:	24000ebc 	.word	0x24000ebc

0800ddac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b08a      	sub	sp, #40	; 0x28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ddb8:	f001 fce8 	bl	800f78c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ddbc:	4b5b      	ldr	r3, [pc, #364]	; (800df2c <pvPortMalloc+0x180>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddc4:	f000 f920 	bl	800e008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddc8:	4b59      	ldr	r3, [pc, #356]	; (800df30 <pvPortMalloc+0x184>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4013      	ands	r3, r2
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f040 8093 	bne.w	800defc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d01d      	beq.n	800de18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dddc:	2208      	movs	r2, #8
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4413      	add	r3, r2
 800dde2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f003 0307 	and.w	r3, r3, #7
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d014      	beq.n	800de18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f023 0307 	bic.w	r3, r3, #7
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f003 0307 	and.w	r3, r3, #7
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de14:	bf00      	nop
 800de16:	e7fe      	b.n	800de16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d06e      	beq.n	800defc <pvPortMalloc+0x150>
 800de1e:	4b45      	ldr	r3, [pc, #276]	; (800df34 <pvPortMalloc+0x188>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	429a      	cmp	r2, r3
 800de26:	d869      	bhi.n	800defc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de28:	4b43      	ldr	r3, [pc, #268]	; (800df38 <pvPortMalloc+0x18c>)
 800de2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de2c:	4b42      	ldr	r3, [pc, #264]	; (800df38 <pvPortMalloc+0x18c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de32:	e004      	b.n	800de3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	429a      	cmp	r2, r3
 800de46:	d903      	bls.n	800de50 <pvPortMalloc+0xa4>
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1f1      	bne.n	800de34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de50:	4b36      	ldr	r3, [pc, #216]	; (800df2c <pvPortMalloc+0x180>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de56:	429a      	cmp	r2, r3
 800de58:	d050      	beq.n	800defc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2208      	movs	r2, #8
 800de60:	4413      	add	r3, r2
 800de62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	6a3b      	ldr	r3, [r7, #32]
 800de6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	1ad2      	subs	r2, r2, r3
 800de74:	2308      	movs	r3, #8
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	429a      	cmp	r2, r3
 800de7a:	d91f      	bls.n	800debc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	f003 0307 	and.w	r3, r3, #7
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00a      	beq.n	800dea4 <pvPortMalloc+0xf8>
	__asm volatile
 800de8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de92:	f383 8811 	msr	BASEPRI, r3
 800de96:	f3bf 8f6f 	isb	sy
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	613b      	str	r3, [r7, #16]
}
 800dea0:	bf00      	nop
 800dea2:	e7fe      	b.n	800dea2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	1ad2      	subs	r2, r2, r3
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800deb6:	69b8      	ldr	r0, [r7, #24]
 800deb8:	f000 f908 	bl	800e0cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800debc:	4b1d      	ldr	r3, [pc, #116]	; (800df34 <pvPortMalloc+0x188>)
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	4a1b      	ldr	r2, [pc, #108]	; (800df34 <pvPortMalloc+0x188>)
 800dec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800deca:	4b1a      	ldr	r3, [pc, #104]	; (800df34 <pvPortMalloc+0x188>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	4b1b      	ldr	r3, [pc, #108]	; (800df3c <pvPortMalloc+0x190>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d203      	bcs.n	800dede <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ded6:	4b17      	ldr	r3, [pc, #92]	; (800df34 <pvPortMalloc+0x188>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a18      	ldr	r2, [pc, #96]	; (800df3c <pvPortMalloc+0x190>)
 800dedc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	4b13      	ldr	r3, [pc, #76]	; (800df30 <pvPortMalloc+0x184>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	431a      	orrs	r2, r3
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800def2:	4b13      	ldr	r3, [pc, #76]	; (800df40 <pvPortMalloc+0x194>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3301      	adds	r3, #1
 800def8:	4a11      	ldr	r2, [pc, #68]	; (800df40 <pvPortMalloc+0x194>)
 800defa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800defc:	f001 fc54 	bl	800f7a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00a      	beq.n	800df20 <pvPortMalloc+0x174>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	60fb      	str	r3, [r7, #12]
}
 800df1c:	bf00      	nop
 800df1e:	e7fe      	b.n	800df1e <pvPortMalloc+0x172>
	return pvReturn;
 800df20:	69fb      	ldr	r3, [r7, #28]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3728      	adds	r7, #40	; 0x28
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	24004ec4 	.word	0x24004ec4
 800df30:	24004ed8 	.word	0x24004ed8
 800df34:	24004ec8 	.word	0x24004ec8
 800df38:	24004ebc 	.word	0x24004ebc
 800df3c:	24004ecc 	.word	0x24004ecc
 800df40:	24004ed0 	.word	0x24004ed0

0800df44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d04d      	beq.n	800dff2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df56:	2308      	movs	r3, #8
 800df58:	425b      	negs	r3, r3
 800df5a:	697a      	ldr	r2, [r7, #20]
 800df5c:	4413      	add	r3, r2
 800df5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	4b24      	ldr	r3, [pc, #144]	; (800dffc <vPortFree+0xb8>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4013      	ands	r3, r2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d10a      	bne.n	800df88 <vPortFree+0x44>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	60fb      	str	r3, [r7, #12]
}
 800df84:	bf00      	nop
 800df86:	e7fe      	b.n	800df86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00a      	beq.n	800dfa6 <vPortFree+0x62>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	60bb      	str	r3, [r7, #8]
}
 800dfa2:	bf00      	nop
 800dfa4:	e7fe      	b.n	800dfa4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	685a      	ldr	r2, [r3, #4]
 800dfaa:	4b14      	ldr	r3, [pc, #80]	; (800dffc <vPortFree+0xb8>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4013      	ands	r3, r2
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d01e      	beq.n	800dff2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d11a      	bne.n	800dff2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	685a      	ldr	r2, [r3, #4]
 800dfc0:	4b0e      	ldr	r3, [pc, #56]	; (800dffc <vPortFree+0xb8>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	43db      	mvns	r3, r3
 800dfc6:	401a      	ands	r2, r3
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dfcc:	f001 fbde 	bl	800f78c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	; (800e000 <vPortFree+0xbc>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4413      	add	r3, r2
 800dfda:	4a09      	ldr	r2, [pc, #36]	; (800e000 <vPortFree+0xbc>)
 800dfdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dfde:	6938      	ldr	r0, [r7, #16]
 800dfe0:	f000 f874 	bl	800e0cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dfe4:	4b07      	ldr	r3, [pc, #28]	; (800e004 <vPortFree+0xc0>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	4a06      	ldr	r2, [pc, #24]	; (800e004 <vPortFree+0xc0>)
 800dfec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dfee:	f001 fbdb 	bl	800f7a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dff2:	bf00      	nop
 800dff4:	3718      	adds	r7, #24
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	24004ed8 	.word	0x24004ed8
 800e000:	24004ec8 	.word	0x24004ec8
 800e004:	24004ed4 	.word	0x24004ed4

0800e008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e00e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e014:	4b27      	ldr	r3, [pc, #156]	; (800e0b4 <prvHeapInit+0xac>)
 800e016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f003 0307 	and.w	r3, r3, #7
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00c      	beq.n	800e03c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3307      	adds	r3, #7
 800e026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f023 0307 	bic.w	r3, r3, #7
 800e02e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	4a1f      	ldr	r2, [pc, #124]	; (800e0b4 <prvHeapInit+0xac>)
 800e038:	4413      	add	r3, r2
 800e03a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e040:	4a1d      	ldr	r2, [pc, #116]	; (800e0b8 <prvHeapInit+0xb0>)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e046:	4b1c      	ldr	r3, [pc, #112]	; (800e0b8 <prvHeapInit+0xb0>)
 800e048:	2200      	movs	r2, #0
 800e04a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	4413      	add	r3, r2
 800e052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e054:	2208      	movs	r2, #8
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	1a9b      	subs	r3, r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f023 0307 	bic.w	r3, r3, #7
 800e062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4a15      	ldr	r2, [pc, #84]	; (800e0bc <prvHeapInit+0xb4>)
 800e068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e06a:	4b14      	ldr	r3, [pc, #80]	; (800e0bc <prvHeapInit+0xb4>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2200      	movs	r2, #0
 800e070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e072:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <prvHeapInit+0xb4>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2200      	movs	r2, #0
 800e078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	1ad2      	subs	r2, r2, r3
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e088:	4b0c      	ldr	r3, [pc, #48]	; (800e0bc <prvHeapInit+0xb4>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	4a0a      	ldr	r2, [pc, #40]	; (800e0c0 <prvHeapInit+0xb8>)
 800e096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	4a09      	ldr	r2, [pc, #36]	; (800e0c4 <prvHeapInit+0xbc>)
 800e09e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0a0:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <prvHeapInit+0xc0>)
 800e0a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0a6:	601a      	str	r2, [r3, #0]
}
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	240012bc 	.word	0x240012bc
 800e0b8:	24004ebc 	.word	0x24004ebc
 800e0bc:	24004ec4 	.word	0x24004ec4
 800e0c0:	24004ecc 	.word	0x24004ecc
 800e0c4:	24004ec8 	.word	0x24004ec8
 800e0c8:	24004ed8 	.word	0x24004ed8

0800e0cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e0d4:	4b28      	ldr	r3, [pc, #160]	; (800e178 <prvInsertBlockIntoFreeList+0xac>)
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	e002      	b.n	800e0e0 <prvInsertBlockIntoFreeList+0x14>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d8f7      	bhi.n	800e0da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d108      	bne.n	800e10e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	441a      	add	r2, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	441a      	add	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d118      	bne.n	800e154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4b15      	ldr	r3, [pc, #84]	; (800e17c <prvInsertBlockIntoFreeList+0xb0>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d00d      	beq.n	800e14a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	441a      	add	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	601a      	str	r2, [r3, #0]
 800e148:	e008      	b.n	800e15c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e14a:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <prvInsertBlockIntoFreeList+0xb0>)
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	e003      	b.n	800e15c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d002      	beq.n	800e16a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e16a:	bf00      	nop
 800e16c:	3714      	adds	r7, #20
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	24004ebc 	.word	0x24004ebc
 800e17c:	24004ec4 	.word	0x24004ec4

0800e180 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f103 0208 	add.w	r2, r3, #8
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f04f 32ff 	mov.w	r2, #4294967295
 800e198:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f103 0208 	add.w	r2, r3, #8
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f103 0208 	add.w	r2, r3, #8
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1ce:	bf00      	nop
 800e1d0:	370c      	adds	r7, #12
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b085      	sub	sp, #20
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	689a      	ldr	r2, [r3, #8]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	683a      	ldr	r2, [r7, #0]
 800e204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	601a      	str	r2, [r3, #0]
}
 800e216:	bf00      	nop
 800e218:	3714      	adds	r7, #20
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e222:	b480      	push	{r7}
 800e224:	b085      	sub	sp, #20
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e238:	d103      	bne.n	800e242 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e00c      	b.n	800e25c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3308      	adds	r3, #8
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e002      	b.n	800e250 <vListInsert+0x2e>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d2f6      	bcs.n	800e24a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	601a      	str	r2, [r3, #0]
}
 800e288:	bf00      	nop
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	6892      	ldr	r2, [r2, #8]
 800e2aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	6852      	ldr	r2, [r2, #4]
 800e2b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d103      	bne.n	800e2c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	1e5a      	subs	r2, r3, #1
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3b04      	subs	r3, #4
 800e2f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3b04      	subs	r3, #4
 800e306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f023 0201 	bic.w	r2, r3, #1
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3b04      	subs	r3, #4
 800e316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e318:	4a0c      	ldr	r2, [pc, #48]	; (800e34c <pxPortInitialiseStack+0x64>)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3b14      	subs	r3, #20
 800e322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f06f 0202 	mvn.w	r2, #2
 800e336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3b20      	subs	r3, #32
 800e33c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e33e:	68fb      	ldr	r3, [r7, #12]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	0800e351 	.word	0x0800e351

0800e350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e35a:	4b12      	ldr	r3, [pc, #72]	; (800e3a4 <prvTaskExitError+0x54>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e362:	d00a      	beq.n	800e37a <prvTaskExitError+0x2a>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	60fb      	str	r3, [r7, #12]
}
 800e376:	bf00      	nop
 800e378:	e7fe      	b.n	800e378 <prvTaskExitError+0x28>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
 800e38a:	60bb      	str	r3, [r7, #8]
}
 800e38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e38e:	bf00      	nop
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0fc      	beq.n	800e390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e396:	bf00      	nop
 800e398:	bf00      	nop
 800e39a:	3714      	adds	r7, #20
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	24000010 	.word	0x24000010
	...

0800e3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3b0:	4b07      	ldr	r3, [pc, #28]	; (800e3d0 <pxCurrentTCBConst2>)
 800e3b2:	6819      	ldr	r1, [r3, #0]
 800e3b4:	6808      	ldr	r0, [r1, #0]
 800e3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ba:	f380 8809 	msr	PSP, r0
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f04f 0000 	mov.w	r0, #0
 800e3c6:	f380 8811 	msr	BASEPRI, r0
 800e3ca:	4770      	bx	lr
 800e3cc:	f3af 8000 	nop.w

0800e3d0 <pxCurrentTCBConst2>:
 800e3d0:	24004f24 	.word	0x24004f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop

0800e3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3d8:	4808      	ldr	r0, [pc, #32]	; (800e3fc <prvPortStartFirstTask+0x24>)
 800e3da:	6800      	ldr	r0, [r0, #0]
 800e3dc:	6800      	ldr	r0, [r0, #0]
 800e3de:	f380 8808 	msr	MSP, r0
 800e3e2:	f04f 0000 	mov.w	r0, #0
 800e3e6:	f380 8814 	msr	CONTROL, r0
 800e3ea:	b662      	cpsie	i
 800e3ec:	b661      	cpsie	f
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	df00      	svc	0
 800e3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e3fa:	bf00      	nop
 800e3fc:	e000ed08 	.word	0xe000ed08

0800e400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e406:	4b46      	ldr	r3, [pc, #280]	; (800e520 <xPortStartScheduler+0x120>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a46      	ldr	r2, [pc, #280]	; (800e524 <xPortStartScheduler+0x124>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d10a      	bne.n	800e426 <xPortStartScheduler+0x26>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	613b      	str	r3, [r7, #16]
}
 800e422:	bf00      	nop
 800e424:	e7fe      	b.n	800e424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e426:	4b3e      	ldr	r3, [pc, #248]	; (800e520 <xPortStartScheduler+0x120>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a3f      	ldr	r2, [pc, #252]	; (800e528 <xPortStartScheduler+0x128>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d10a      	bne.n	800e446 <xPortStartScheduler+0x46>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	60fb      	str	r3, [r7, #12]
}
 800e442:	bf00      	nop
 800e444:	e7fe      	b.n	800e444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e446:	4b39      	ldr	r3, [pc, #228]	; (800e52c <xPortStartScheduler+0x12c>)
 800e448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	22ff      	movs	r2, #255	; 0xff
 800e456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e460:	78fb      	ldrb	r3, [r7, #3]
 800e462:	b2db      	uxtb	r3, r3
 800e464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	4b31      	ldr	r3, [pc, #196]	; (800e530 <xPortStartScheduler+0x130>)
 800e46c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e46e:	4b31      	ldr	r3, [pc, #196]	; (800e534 <xPortStartScheduler+0x134>)
 800e470:	2207      	movs	r2, #7
 800e472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e474:	e009      	b.n	800e48a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e476:	4b2f      	ldr	r3, [pc, #188]	; (800e534 <xPortStartScheduler+0x134>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	3b01      	subs	r3, #1
 800e47c:	4a2d      	ldr	r2, [pc, #180]	; (800e534 <xPortStartScheduler+0x134>)
 800e47e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e480:	78fb      	ldrb	r3, [r7, #3]
 800e482:	b2db      	uxtb	r3, r3
 800e484:	005b      	lsls	r3, r3, #1
 800e486:	b2db      	uxtb	r3, r3
 800e488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e48a:	78fb      	ldrb	r3, [r7, #3]
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e492:	2b80      	cmp	r3, #128	; 0x80
 800e494:	d0ef      	beq.n	800e476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e496:	4b27      	ldr	r3, [pc, #156]	; (800e534 <xPortStartScheduler+0x134>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f1c3 0307 	rsb	r3, r3, #7
 800e49e:	2b04      	cmp	r3, #4
 800e4a0:	d00a      	beq.n	800e4b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	60bb      	str	r3, [r7, #8]
}
 800e4b4:	bf00      	nop
 800e4b6:	e7fe      	b.n	800e4b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4b8:	4b1e      	ldr	r3, [pc, #120]	; (800e534 <xPortStartScheduler+0x134>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	021b      	lsls	r3, r3, #8
 800e4be:	4a1d      	ldr	r2, [pc, #116]	; (800e534 <xPortStartScheduler+0x134>)
 800e4c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4c2:	4b1c      	ldr	r3, [pc, #112]	; (800e534 <xPortStartScheduler+0x134>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4ca:	4a1a      	ldr	r2, [pc, #104]	; (800e534 <xPortStartScheduler+0x134>)
 800e4cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	b2da      	uxtb	r2, r3
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4d6:	4b18      	ldr	r3, [pc, #96]	; (800e538 <xPortStartScheduler+0x138>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a17      	ldr	r2, [pc, #92]	; (800e538 <xPortStartScheduler+0x138>)
 800e4dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e4e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e4e2:	4b15      	ldr	r3, [pc, #84]	; (800e538 <xPortStartScheduler+0x138>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a14      	ldr	r2, [pc, #80]	; (800e538 <xPortStartScheduler+0x138>)
 800e4e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e4ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e4ee:	f000 f8dd 	bl	800e6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e4f2:	4b12      	ldr	r3, [pc, #72]	; (800e53c <xPortStartScheduler+0x13c>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e4f8:	f000 f8fc 	bl	800e6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e4fc:	4b10      	ldr	r3, [pc, #64]	; (800e540 <xPortStartScheduler+0x140>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a0f      	ldr	r2, [pc, #60]	; (800e540 <xPortStartScheduler+0x140>)
 800e502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e508:	f7ff ff66 	bl	800e3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e50c:	f001 fab4 	bl	800fa78 <vTaskSwitchContext>
	prvTaskExitError();
 800e510:	f7ff ff1e 	bl	800e350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	e000ed00 	.word	0xe000ed00
 800e524:	410fc271 	.word	0x410fc271
 800e528:	410fc270 	.word	0x410fc270
 800e52c:	e000e400 	.word	0xe000e400
 800e530:	24004edc 	.word	0x24004edc
 800e534:	24004ee0 	.word	0x24004ee0
 800e538:	e000ed20 	.word	0xe000ed20
 800e53c:	24000010 	.word	0x24000010
 800e540:	e000ef34 	.word	0xe000ef34

0800e544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	607b      	str	r3, [r7, #4]
}
 800e55c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e55e:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <vPortEnterCritical+0x58>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	4a0d      	ldr	r2, [pc, #52]	; (800e59c <vPortEnterCritical+0x58>)
 800e566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e568:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <vPortEnterCritical+0x58>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d10f      	bne.n	800e590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e570:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <vPortEnterCritical+0x5c>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	b2db      	uxtb	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00a      	beq.n	800e590 <vPortEnterCritical+0x4c>
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	603b      	str	r3, [r7, #0]
}
 800e58c:	bf00      	nop
 800e58e:	e7fe      	b.n	800e58e <vPortEnterCritical+0x4a>
	}
}
 800e590:	bf00      	nop
 800e592:	370c      	adds	r7, #12
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	24000010 	.word	0x24000010
 800e5a0:	e000ed04 	.word	0xe000ed04

0800e5a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5aa:	4b12      	ldr	r3, [pc, #72]	; (800e5f4 <vPortExitCritical+0x50>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10a      	bne.n	800e5c8 <vPortExitCritical+0x24>
	__asm volatile
 800e5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	607b      	str	r3, [r7, #4]
}
 800e5c4:	bf00      	nop
 800e5c6:	e7fe      	b.n	800e5c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5c8:	4b0a      	ldr	r3, [pc, #40]	; (800e5f4 <vPortExitCritical+0x50>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	4a09      	ldr	r2, [pc, #36]	; (800e5f4 <vPortExitCritical+0x50>)
 800e5d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5d2:	4b08      	ldr	r3, [pc, #32]	; (800e5f4 <vPortExitCritical+0x50>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <vPortExitCritical+0x42>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e5e6:	bf00      	nop
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	24000010 	.word	0x24000010
	...

0800e600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e600:	f3ef 8009 	mrs	r0, PSP
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	4b15      	ldr	r3, [pc, #84]	; (800e660 <pxCurrentTCBConst>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	f01e 0f10 	tst.w	lr, #16
 800e610:	bf08      	it	eq
 800e612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61a:	6010      	str	r0, [r2, #0]
 800e61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e624:	f380 8811 	msr	BASEPRI, r0
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f001 fa22 	bl	800fa78 <vTaskSwitchContext>
 800e634:	f04f 0000 	mov.w	r0, #0
 800e638:	f380 8811 	msr	BASEPRI, r0
 800e63c:	bc09      	pop	{r0, r3}
 800e63e:	6819      	ldr	r1, [r3, #0]
 800e640:	6808      	ldr	r0, [r1, #0]
 800e642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e646:	f01e 0f10 	tst.w	lr, #16
 800e64a:	bf08      	it	eq
 800e64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e650:	f380 8809 	msr	PSP, r0
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	f3af 8000 	nop.w

0800e660 <pxCurrentTCBConst>:
 800e660:	24004f24 	.word	0x24004f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop

0800e668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	607b      	str	r3, [r7, #4]
}
 800e680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e682:	f001 f93f 	bl	800f904 <xTaskIncrementTick>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d003      	beq.n	800e694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e68c:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <xPortSysTickHandler+0x40>)
 800e68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e692:	601a      	str	r2, [r3, #0]
 800e694:	2300      	movs	r3, #0
 800e696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	f383 8811 	msr	BASEPRI, r3
}
 800e69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6a0:	bf00      	nop
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	e000ed04 	.word	0xe000ed04

0800e6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6b0:	4b0b      	ldr	r3, [pc, #44]	; (800e6e0 <vPortSetupTimerInterrupt+0x34>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6b6:	4b0b      	ldr	r3, [pc, #44]	; (800e6e4 <vPortSetupTimerInterrupt+0x38>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6bc:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <vPortSetupTimerInterrupt+0x3c>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a0a      	ldr	r2, [pc, #40]	; (800e6ec <vPortSetupTimerInterrupt+0x40>)
 800e6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c6:	099b      	lsrs	r3, r3, #6
 800e6c8:	4a09      	ldr	r2, [pc, #36]	; (800e6f0 <vPortSetupTimerInterrupt+0x44>)
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ce:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <vPortSetupTimerInterrupt+0x34>)
 800e6d0:	2207      	movs	r2, #7
 800e6d2:	601a      	str	r2, [r3, #0]
}
 800e6d4:	bf00      	nop
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	e000e010 	.word	0xe000e010
 800e6e4:	e000e018 	.word	0xe000e018
 800e6e8:	24000000 	.word	0x24000000
 800e6ec:	10624dd3 	.word	0x10624dd3
 800e6f0:	e000e014 	.word	0xe000e014

0800e6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e704 <vPortEnableVFP+0x10>
 800e6f8:	6801      	ldr	r1, [r0, #0]
 800e6fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e6fe:	6001      	str	r1, [r0, #0]
 800e700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e702:	bf00      	nop
 800e704:	e000ed88 	.word	0xe000ed88

0800e708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e70e:	f3ef 8305 	mrs	r3, IPSR
 800e712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b0f      	cmp	r3, #15
 800e718:	d914      	bls.n	800e744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e71a:	4a17      	ldr	r2, [pc, #92]	; (800e778 <vPortValidateInterruptPriority+0x70>)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4413      	add	r3, r2
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e724:	4b15      	ldr	r3, [pc, #84]	; (800e77c <vPortValidateInterruptPriority+0x74>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	7afa      	ldrb	r2, [r7, #11]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d20a      	bcs.n	800e744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	607b      	str	r3, [r7, #4]
}
 800e740:	bf00      	nop
 800e742:	e7fe      	b.n	800e742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e744:	4b0e      	ldr	r3, [pc, #56]	; (800e780 <vPortValidateInterruptPriority+0x78>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e74c:	4b0d      	ldr	r3, [pc, #52]	; (800e784 <vPortValidateInterruptPriority+0x7c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d90a      	bls.n	800e76a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	603b      	str	r3, [r7, #0]
}
 800e766:	bf00      	nop
 800e768:	e7fe      	b.n	800e768 <vPortValidateInterruptPriority+0x60>
	}
 800e76a:	bf00      	nop
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	e000e3f0 	.word	0xe000e3f0
 800e77c:	24004edc 	.word	0x24004edc
 800e780:	e000ed0c 	.word	0xe000ed0c
 800e784:	24004ee0 	.word	0x24004ee0

0800e788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10a      	bne.n	800e7b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800e79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a0:	f383 8811 	msr	BASEPRI, r3
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	60bb      	str	r3, [r7, #8]
}
 800e7ae:	bf00      	nop
 800e7b0:	e7fe      	b.n	800e7b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e7b2:	f7ff fec7 	bl	800e544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e7c2:	fb01 f303 	mul.w	r3, r1, r3
 800e7c6:	441a      	add	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	68f9      	ldr	r1, [r7, #12]
 800e7e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e7e8:	fb01 f303 	mul.w	r3, r1, r3
 800e7ec:	441a      	add	r2, r3
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	22ff      	movs	r2, #255	; 0xff
 800e7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	22ff      	movs	r2, #255	; 0xff
 800e7fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d114      	bne.n	800e832 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01a      	beq.n	800e846 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	3310      	adds	r3, #16
 800e814:	4618      	mov	r0, r3
 800e816:	f001 f9e3 	bl	800fbe0 <xTaskRemoveFromEventList>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d012      	beq.n	800e846 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e820:	4b0c      	ldr	r3, [pc, #48]	; (800e854 <xQueueGenericReset+0xcc>)
 800e822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	e009      	b.n	800e846 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3310      	adds	r3, #16
 800e836:	4618      	mov	r0, r3
 800e838:	f7ff fca2 	bl	800e180 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	3324      	adds	r3, #36	; 0x24
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff fc9d 	bl	800e180 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e846:	f7ff fead 	bl	800e5a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e84a:	2301      	movs	r3, #1
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	e000ed04 	.word	0xe000ed04

0800e858 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b08e      	sub	sp, #56	; 0x38
 800e85c:	af02      	add	r7, sp, #8
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
 800e864:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10a      	bne.n	800e89e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88c:	f383 8811 	msr	BASEPRI, r3
 800e890:	f3bf 8f6f 	isb	sy
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e89a:	bf00      	nop
 800e89c:	e7fe      	b.n	800e89c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <xQueueGenericCreateStatic+0x52>
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <xQueueGenericCreateStatic+0x56>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e000      	b.n	800e8b0 <xQueueGenericCreateStatic+0x58>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	623b      	str	r3, [r7, #32]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d102      	bne.n	800e8d6 <xQueueGenericCreateStatic+0x7e>
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d101      	bne.n	800e8da <xQueueGenericCreateStatic+0x82>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e000      	b.n	800e8dc <xQueueGenericCreateStatic+0x84>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10a      	bne.n	800e8f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	61fb      	str	r3, [r7, #28]
}
 800e8f2:	bf00      	nop
 800e8f4:	e7fe      	b.n	800e8f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e8f6:	2350      	movs	r3, #80	; 0x50
 800e8f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2b50      	cmp	r3, #80	; 0x50
 800e8fe:	d00a      	beq.n	800e916 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	61bb      	str	r3, [r7, #24]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e916:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e92a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	4613      	mov	r3, r2
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	68b9      	ldr	r1, [r7, #8]
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 f83f 	bl	800e9bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e940:	4618      	mov	r0, r3
 800e942:	3730      	adds	r7, #48	; 0x30
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08a      	sub	sp, #40	; 0x28
 800e94c:	af02      	add	r7, sp, #8
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	4613      	mov	r3, r2
 800e954:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10a      	bne.n	800e972 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	613b      	str	r3, [r7, #16]
}
 800e96e:	bf00      	nop
 800e970:	e7fe      	b.n	800e970 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	fb02 f303 	mul.w	r3, r2, r3
 800e97a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	3350      	adds	r3, #80	; 0x50
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff fa13 	bl	800ddac <pvPortMalloc>
 800e986:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d011      	beq.n	800e9b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	3350      	adds	r3, #80	; 0x50
 800e996:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9a0:	79fa      	ldrb	r2, [r7, #7]
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	9300      	str	r3, [sp, #0]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	68b9      	ldr	r1, [r7, #8]
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f000 f805 	bl	800e9bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9b2:	69bb      	ldr	r3, [r7, #24]
	}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3720      	adds	r7, #32
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d103      	bne.n	800e9d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	e002      	b.n	800e9de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	69b8      	ldr	r0, [r7, #24]
 800e9ee:	f7ff fecb 	bl	800e788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	78fa      	ldrb	r2, [r7, #3]
 800e9f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e9fa:	bf00      	nop
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
	...

0800ea04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b08e      	sub	sp, #56	; 0x38
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
 800ea10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea12:	2300      	movs	r3, #0
 800ea14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10a      	bne.n	800ea36 <xQueueGenericSend+0x32>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ea32:	bf00      	nop
 800ea34:	e7fe      	b.n	800ea34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d103      	bne.n	800ea44 <xQueueGenericSend+0x40>
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d101      	bne.n	800ea48 <xQueueGenericSend+0x44>
 800ea44:	2301      	movs	r3, #1
 800ea46:	e000      	b.n	800ea4a <xQueueGenericSend+0x46>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d10a      	bne.n	800ea64 <xQueueGenericSend+0x60>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea60:	bf00      	nop
 800ea62:	e7fe      	b.n	800ea62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d103      	bne.n	800ea72 <xQueueGenericSend+0x6e>
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d101      	bne.n	800ea76 <xQueueGenericSend+0x72>
 800ea72:	2301      	movs	r3, #1
 800ea74:	e000      	b.n	800ea78 <xQueueGenericSend+0x74>
 800ea76:	2300      	movs	r3, #0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <xQueueGenericSend+0x8e>
	__asm volatile
 800ea7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	623b      	str	r3, [r7, #32]
}
 800ea8e:	bf00      	nop
 800ea90:	e7fe      	b.n	800ea90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea92:	f001 fa67 	bl	800ff64 <xTaskGetSchedulerState>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d102      	bne.n	800eaa2 <xQueueGenericSend+0x9e>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d101      	bne.n	800eaa6 <xQueueGenericSend+0xa2>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e000      	b.n	800eaa8 <xQueueGenericSend+0xa4>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10a      	bne.n	800eac2 <xQueueGenericSend+0xbe>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	61fb      	str	r3, [r7, #28]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eac2:	f7ff fd3f 	bl	800e544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eace:	429a      	cmp	r2, r3
 800ead0:	d302      	bcc.n	800ead8 <xQueueGenericSend+0xd4>
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d129      	bne.n	800eb2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ead8:	683a      	ldr	r2, [r7, #0]
 800eada:	68b9      	ldr	r1, [r7, #8]
 800eadc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eade:	f000 fa8b 	bl	800eff8 <prvCopyDataToQueue>
 800eae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d010      	beq.n	800eb0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	3324      	adds	r3, #36	; 0x24
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f001 f875 	bl	800fbe0 <xTaskRemoveFromEventList>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d013      	beq.n	800eb24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eafc:	4b3f      	ldr	r3, [pc, #252]	; (800ebfc <xQueueGenericSend+0x1f8>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	e00a      	b.n	800eb24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb14:	4b39      	ldr	r3, [pc, #228]	; (800ebfc <xQueueGenericSend+0x1f8>)
 800eb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb1a:	601a      	str	r2, [r3, #0]
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb24:	f7ff fd3e 	bl	800e5a4 <vPortExitCritical>
				return pdPASS;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e063      	b.n	800ebf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d103      	bne.n	800eb3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb32:	f7ff fd37 	bl	800e5a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e05c      	b.n	800ebf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d106      	bne.n	800eb4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb40:	f107 0314 	add.w	r3, r7, #20
 800eb44:	4618      	mov	r0, r3
 800eb46:	f001 f8af 	bl	800fca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb4e:	f7ff fd29 	bl	800e5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb52:	f000 fe1b 	bl	800f78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb56:	f7ff fcf5 	bl	800e544 <vPortEnterCritical>
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb60:	b25b      	sxtb	r3, r3
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d103      	bne.n	800eb70 <xQueueGenericSend+0x16c>
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb76:	b25b      	sxtb	r3, r3
 800eb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7c:	d103      	bne.n	800eb86 <xQueueGenericSend+0x182>
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	2200      	movs	r2, #0
 800eb82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb86:	f7ff fd0d 	bl	800e5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb8a:	1d3a      	adds	r2, r7, #4
 800eb8c:	f107 0314 	add.w	r3, r7, #20
 800eb90:	4611      	mov	r1, r2
 800eb92:	4618      	mov	r0, r3
 800eb94:	f001 f89e 	bl	800fcd4 <xTaskCheckForTimeOut>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d124      	bne.n	800ebe8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eba0:	f000 fb22 	bl	800f1e8 <prvIsQueueFull>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d018      	beq.n	800ebdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	3310      	adds	r3, #16
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 ffc4 	bl	800fb40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ebb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebba:	f000 faad 	bl	800f118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ebbe:	f000 fdf3 	bl	800f7a8 <xTaskResumeAll>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f47f af7c 	bne.w	800eac2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ebca:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <xQueueGenericSend+0x1f8>)
 800ebcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	e772      	b.n	800eac2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ebdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebde:	f000 fa9b 	bl	800f118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebe2:	f000 fde1 	bl	800f7a8 <xTaskResumeAll>
 800ebe6:	e76c      	b.n	800eac2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ebe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebea:	f000 fa95 	bl	800f118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebee:	f000 fddb 	bl	800f7a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ebf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3738      	adds	r7, #56	; 0x38
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	e000ed04 	.word	0xe000ed04

0800ec00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b090      	sub	sp, #64	; 0x40
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
 800ec0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ec12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10a      	bne.n	800ec2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ec18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1c:	f383 8811 	msr	BASEPRI, r3
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec2a:	bf00      	nop
 800ec2c:	e7fe      	b.n	800ec2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d103      	bne.n	800ec3c <xQueueGenericSendFromISR+0x3c>
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d101      	bne.n	800ec40 <xQueueGenericSendFromISR+0x40>
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e000      	b.n	800ec42 <xQueueGenericSendFromISR+0x42>
 800ec40:	2300      	movs	r3, #0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10a      	bne.n	800ec5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec58:	bf00      	nop
 800ec5a:	e7fe      	b.n	800ec5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d103      	bne.n	800ec6a <xQueueGenericSendFromISR+0x6a>
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d101      	bne.n	800ec6e <xQueueGenericSendFromISR+0x6e>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e000      	b.n	800ec70 <xQueueGenericSendFromISR+0x70>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10a      	bne.n	800ec8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	623b      	str	r3, [r7, #32]
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec8a:	f7ff fd3d 	bl	800e708 <vPortValidateInterruptPriority>
	__asm volatile
 800ec8e:	f3ef 8211 	mrs	r2, BASEPRI
 800ec92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	61fa      	str	r2, [r7, #28]
 800eca4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800eca6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eca8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d302      	bcc.n	800ecbc <xQueueGenericSendFromISR+0xbc>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d12f      	bne.n	800ed1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	68b9      	ldr	r1, [r7, #8]
 800ecd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecd2:	f000 f991 	bl	800eff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ecda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecde:	d112      	bne.n	800ed06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d016      	beq.n	800ed16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ece8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecea:	3324      	adds	r3, #36	; 0x24
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 ff77 	bl	800fbe0 <xTaskRemoveFromEventList>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00e      	beq.n	800ed16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00b      	beq.n	800ed16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2201      	movs	r2, #1
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	e007      	b.n	800ed16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	b25a      	sxtb	r2, r3
 800ed10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed16:	2301      	movs	r3, #1
 800ed18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ed1a:	e001      	b.n	800ed20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed22:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	f383 8811 	msr	BASEPRI, r3
}
 800ed2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3740      	adds	r7, #64	; 0x40
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b08c      	sub	sp, #48	; 0x30
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed44:	2300      	movs	r3, #0
 800ed46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d10a      	bne.n	800ed68 <xQueueReceive+0x30>
	__asm volatile
 800ed52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	623b      	str	r3, [r7, #32]
}
 800ed64:	bf00      	nop
 800ed66:	e7fe      	b.n	800ed66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d103      	bne.n	800ed76 <xQueueReceive+0x3e>
 800ed6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d101      	bne.n	800ed7a <xQueueReceive+0x42>
 800ed76:	2301      	movs	r3, #1
 800ed78:	e000      	b.n	800ed7c <xQueueReceive+0x44>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d10a      	bne.n	800ed96 <xQueueReceive+0x5e>
	__asm volatile
 800ed80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	61fb      	str	r3, [r7, #28]
}
 800ed92:	bf00      	nop
 800ed94:	e7fe      	b.n	800ed94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed96:	f001 f8e5 	bl	800ff64 <xTaskGetSchedulerState>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d102      	bne.n	800eda6 <xQueueReceive+0x6e>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d101      	bne.n	800edaa <xQueueReceive+0x72>
 800eda6:	2301      	movs	r3, #1
 800eda8:	e000      	b.n	800edac <xQueueReceive+0x74>
 800edaa:	2300      	movs	r3, #0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10a      	bne.n	800edc6 <xQueueReceive+0x8e>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	61bb      	str	r3, [r7, #24]
}
 800edc2:	bf00      	nop
 800edc4:	e7fe      	b.n	800edc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edc6:	f7ff fbbd 	bl	800e544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d01f      	beq.n	800ee16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800edd6:	68b9      	ldr	r1, [r7, #8]
 800edd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edda:	f000 f977 	bl	800f0cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800edde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede0:	1e5a      	subs	r2, r3, #1
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00f      	beq.n	800ee0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf0:	3310      	adds	r3, #16
 800edf2:	4618      	mov	r0, r3
 800edf4:	f000 fef4 	bl	800fbe0 <xTaskRemoveFromEventList>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d007      	beq.n	800ee0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800edfe:	4b3d      	ldr	r3, [pc, #244]	; (800eef4 <xQueueReceive+0x1bc>)
 800ee00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee0e:	f7ff fbc9 	bl	800e5a4 <vPortExitCritical>
				return pdPASS;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e069      	b.n	800eeea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d103      	bne.n	800ee24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee1c:	f7ff fbc2 	bl	800e5a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee20:	2300      	movs	r3, #0
 800ee22:	e062      	b.n	800eeea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d106      	bne.n	800ee38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee2a:	f107 0310 	add.w	r3, r7, #16
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f000 ff3a 	bl	800fca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee34:	2301      	movs	r3, #1
 800ee36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee38:	f7ff fbb4 	bl	800e5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee3c:	f000 fca6 	bl	800f78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee40:	f7ff fb80 	bl	800e544 <vPortEnterCritical>
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee4a:	b25b      	sxtb	r3, r3
 800ee4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee50:	d103      	bne.n	800ee5a <xQueueReceive+0x122>
 800ee52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee60:	b25b      	sxtb	r3, r3
 800ee62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee66:	d103      	bne.n	800ee70 <xQueueReceive+0x138>
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee70:	f7ff fb98 	bl	800e5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee74:	1d3a      	adds	r2, r7, #4
 800ee76:	f107 0310 	add.w	r3, r7, #16
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f000 ff29 	bl	800fcd4 <xTaskCheckForTimeOut>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d123      	bne.n	800eed0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee8a:	f000 f997 	bl	800f1bc <prvIsQueueEmpty>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d017      	beq.n	800eec4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee96:	3324      	adds	r3, #36	; 0x24
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 fe4f 	bl	800fb40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eea4:	f000 f938 	bl	800f118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eea8:	f000 fc7e 	bl	800f7a8 <xTaskResumeAll>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d189      	bne.n	800edc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eeb2:	4b10      	ldr	r3, [pc, #64]	; (800eef4 <xQueueReceive+0x1bc>)
 800eeb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	e780      	b.n	800edc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec6:	f000 f927 	bl	800f118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eeca:	f000 fc6d 	bl	800f7a8 <xTaskResumeAll>
 800eece:	e77a      	b.n	800edc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eed2:	f000 f921 	bl	800f118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eed6:	f000 fc67 	bl	800f7a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eeda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eedc:	f000 f96e 	bl	800f1bc <prvIsQueueEmpty>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f43f af6f 	beq.w	800edc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3730      	adds	r7, #48	; 0x30
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	e000ed04 	.word	0xe000ed04

0800eef8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08e      	sub	sp, #56	; 0x38
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10a      	bne.n	800ef24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	623b      	str	r3, [r7, #32]
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <xQueueReceiveFromISR+0x3a>
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d101      	bne.n	800ef36 <xQueueReceiveFromISR+0x3e>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <xQueueReceiveFromISR+0x40>
 800ef36:	2300      	movs	r3, #0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10a      	bne.n	800ef52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	61fb      	str	r3, [r7, #28]
}
 800ef4e:	bf00      	nop
 800ef50:	e7fe      	b.n	800ef50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef52:	f7ff fbd9 	bl	800e708 <vPortValidateInterruptPriority>
	__asm volatile
 800ef56:	f3ef 8211 	mrs	r2, BASEPRI
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	61ba      	str	r2, [r7, #24]
 800ef6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ef6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d02f      	beq.n	800efde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef88:	68b9      	ldr	r1, [r7, #8]
 800ef8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef8c:	f000 f89e 	bl	800f0cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	1e5a      	subs	r2, r3, #1
 800ef94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa0:	d112      	bne.n	800efc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	691b      	ldr	r3, [r3, #16]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d016      	beq.n	800efd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	3310      	adds	r3, #16
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 fe16 	bl	800fbe0 <xTaskRemoveFromEventList>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00e      	beq.n	800efd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00b      	beq.n	800efd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2201      	movs	r2, #1
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	e007      	b.n	800efd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800efc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efcc:	3301      	adds	r3, #1
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	b25a      	sxtb	r2, r3
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800efd8:	2301      	movs	r3, #1
 800efda:	637b      	str	r3, [r7, #52]	; 0x34
 800efdc:	e001      	b.n	800efe2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800efde:	2300      	movs	r3, #0
 800efe0:	637b      	str	r3, [r7, #52]	; 0x34
 800efe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	f383 8811 	msr	BASEPRI, r3
}
 800efec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800efee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3738      	adds	r7, #56	; 0x38
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f004:	2300      	movs	r3, #0
 800f006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10d      	bne.n	800f032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d14d      	bne.n	800f0ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	4618      	mov	r0, r3
 800f024:	f000 ffbc 	bl	800ffa0 <xTaskPriorityDisinherit>
 800f028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	609a      	str	r2, [r3, #8]
 800f030:	e043      	b.n	800f0ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d119      	bne.n	800f06c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6858      	ldr	r0, [r3, #4]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f040:	461a      	mov	r2, r3
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	f002 fcda 	bl	80119fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f050:	441a      	add	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d32b      	bcc.n	800f0ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	605a      	str	r2, [r3, #4]
 800f06a:	e026      	b.n	800f0ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	68d8      	ldr	r0, [r3, #12]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f074:	461a      	mov	r2, r3
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	f002 fcc0 	bl	80119fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	68da      	ldr	r2, [r3, #12]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f084:	425b      	negs	r3, r3
 800f086:	441a      	add	r2, r3
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	68da      	ldr	r2, [r3, #12]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	d207      	bcs.n	800f0a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	689a      	ldr	r2, [r3, #8]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a0:	425b      	negs	r3, r3
 800f0a2:	441a      	add	r2, r3
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d105      	bne.n	800f0ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d002      	beq.n	800f0ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f0c2:	697b      	ldr	r3, [r7, #20]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d018      	beq.n	800f110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68da      	ldr	r2, [r3, #12]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0e6:	441a      	add	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	68da      	ldr	r2, [r3, #12]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d303      	bcc.n	800f100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	68d9      	ldr	r1, [r3, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f108:	461a      	mov	r2, r3
 800f10a:	6838      	ldr	r0, [r7, #0]
 800f10c:	f002 fc76 	bl	80119fc <memcpy>
	}
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f120:	f7ff fa10 	bl	800e544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f12a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f12c:	e011      	b.n	800f152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f132:	2b00      	cmp	r3, #0
 800f134:	d012      	beq.n	800f15c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	3324      	adds	r3, #36	; 0x24
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 fd50 	bl	800fbe0 <xTaskRemoveFromEventList>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f146:	f000 fe27 	bl	800fd98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f156:	2b00      	cmp	r3, #0
 800f158:	dce9      	bgt.n	800f12e <prvUnlockQueue+0x16>
 800f15a:	e000      	b.n	800f15e <prvUnlockQueue+0x46>
					break;
 800f15c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	22ff      	movs	r2, #255	; 0xff
 800f162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f166:	f7ff fa1d 	bl	800e5a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f16a:	f7ff f9eb 	bl	800e544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f176:	e011      	b.n	800f19c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d012      	beq.n	800f1a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3310      	adds	r3, #16
 800f184:	4618      	mov	r0, r3
 800f186:	f000 fd2b 	bl	800fbe0 <xTaskRemoveFromEventList>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f190:	f000 fe02 	bl	800fd98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f194:	7bbb      	ldrb	r3, [r7, #14]
 800f196:	3b01      	subs	r3, #1
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f19c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	dce9      	bgt.n	800f178 <prvUnlockQueue+0x60>
 800f1a4:	e000      	b.n	800f1a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f1a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	22ff      	movs	r2, #255	; 0xff
 800f1ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f1b0:	f7ff f9f8 	bl	800e5a4 <vPortExitCritical>
}
 800f1b4:	bf00      	nop
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1c4:	f7ff f9be 	bl	800e544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d102      	bne.n	800f1d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	60fb      	str	r3, [r7, #12]
 800f1d4:	e001      	b.n	800f1da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f1da:	f7ff f9e3 	bl	800e5a4 <vPortExitCritical>

	return xReturn;
 800f1de:	68fb      	ldr	r3, [r7, #12]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1f0:	f7ff f9a8 	bl	800e544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d102      	bne.n	800f206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f200:	2301      	movs	r3, #1
 800f202:	60fb      	str	r3, [r7, #12]
 800f204:	e001      	b.n	800f20a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f206:	2300      	movs	r3, #0
 800f208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f20a:	f7ff f9cb 	bl	800e5a4 <vPortExitCritical>

	return xReturn;
 800f20e:	68fb      	ldr	r3, [r7, #12]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3710      	adds	r7, #16
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f222:	2300      	movs	r3, #0
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	e014      	b.n	800f252 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f228:	4a0f      	ldr	r2, [pc, #60]	; (800f268 <vQueueAddToRegistry+0x50>)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d10b      	bne.n	800f24c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f234:	490c      	ldr	r1, [pc, #48]	; (800f268 <vQueueAddToRegistry+0x50>)
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f23e:	4a0a      	ldr	r2, [pc, #40]	; (800f268 <vQueueAddToRegistry+0x50>)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	4413      	add	r3, r2
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f24a:	e006      	b.n	800f25a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	3301      	adds	r3, #1
 800f250:	60fb      	str	r3, [r7, #12]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2b07      	cmp	r3, #7
 800f256:	d9e7      	bls.n	800f228 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f258:	bf00      	nop
 800f25a:	bf00      	nop
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	24004ee4 	.word	0x24004ee4

0800f26c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b086      	sub	sp, #24
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f27c:	f7ff f962 	bl	800e544 <vPortEnterCritical>
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f286:	b25b      	sxtb	r3, r3
 800f288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28c:	d103      	bne.n	800f296 <vQueueWaitForMessageRestricted+0x2a>
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	2200      	movs	r2, #0
 800f292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f29c:	b25b      	sxtb	r3, r3
 800f29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a2:	d103      	bne.n	800f2ac <vQueueWaitForMessageRestricted+0x40>
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2ac:	f7ff f97a 	bl	800e5a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d106      	bne.n	800f2c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	3324      	adds	r3, #36	; 0x24
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 fc61 	bl	800fb88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f2c6:	6978      	ldr	r0, [r7, #20]
 800f2c8:	f7ff ff26 	bl	800f118 <prvUnlockQueue>
	}
 800f2cc:	bf00      	nop
 800f2ce:	3718      	adds	r7, #24
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08e      	sub	sp, #56	; 0x38
 800f2d8:	af04      	add	r7, sp, #16
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
 800f2e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10a      	bne.n	800f2fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800f2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ec:	f383 8811 	msr	BASEPRI, r3
 800f2f0:	f3bf 8f6f 	isb	sy
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	623b      	str	r3, [r7, #32]
}
 800f2fa:	bf00      	nop
 800f2fc:	e7fe      	b.n	800f2fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <xTaskCreateStatic+0x46>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	61fb      	str	r3, [r7, #28]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f31a:	23a8      	movs	r3, #168	; 0xa8
 800f31c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	2ba8      	cmp	r3, #168	; 0xa8
 800f322:	d00a      	beq.n	800f33a <xTaskCreateStatic+0x66>
	__asm volatile
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	61bb      	str	r3, [r7, #24]
}
 800f336:	bf00      	nop
 800f338:	e7fe      	b.n	800f338 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f33a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d01e      	beq.n	800f380 <xTaskCreateStatic+0xac>
 800f342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f344:	2b00      	cmp	r3, #0
 800f346:	d01b      	beq.n	800f380 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	2202      	movs	r2, #2
 800f356:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f35a:	2300      	movs	r3, #0
 800f35c:	9303      	str	r3, [sp, #12]
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	9302      	str	r3, [sp, #8]
 800f362:	f107 0314 	add.w	r3, r7, #20
 800f366:	9301      	str	r3, [sp, #4]
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	68b9      	ldr	r1, [r7, #8]
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f000 f850 	bl	800f418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f37a:	f000 f8f3 	bl	800f564 <prvAddNewTaskToReadyList>
 800f37e:	e001      	b.n	800f384 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f380:	2300      	movs	r3, #0
 800f382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f384:	697b      	ldr	r3, [r7, #20]
	}
 800f386:	4618      	mov	r0, r3
 800f388:	3728      	adds	r7, #40	; 0x28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f38e:	b580      	push	{r7, lr}
 800f390:	b08c      	sub	sp, #48	; 0x30
 800f392:	af04      	add	r7, sp, #16
 800f394:	60f8      	str	r0, [r7, #12]
 800f396:	60b9      	str	r1, [r7, #8]
 800f398:	603b      	str	r3, [r7, #0]
 800f39a:	4613      	mov	r3, r2
 800f39c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f39e:	88fb      	ldrh	r3, [r7, #6]
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fe fd02 	bl	800ddac <pvPortMalloc>
 800f3a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00e      	beq.n	800f3ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f3b0:	20a8      	movs	r0, #168	; 0xa8
 800f3b2:	f7fe fcfb 	bl	800ddac <pvPortMalloc>
 800f3b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	631a      	str	r2, [r3, #48]	; 0x30
 800f3c4:	e005      	b.n	800f3d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f3c6:	6978      	ldr	r0, [r7, #20]
 800f3c8:	f7fe fdbc 	bl	800df44 <vPortFree>
 800f3cc:	e001      	b.n	800f3d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d017      	beq.n	800f408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f3e0:	88fa      	ldrh	r2, [r7, #6]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	9303      	str	r3, [sp, #12]
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	9302      	str	r3, [sp, #8]
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	68b9      	ldr	r1, [r7, #8]
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f000 f80e 	bl	800f418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3fc:	69f8      	ldr	r0, [r7, #28]
 800f3fe:	f000 f8b1 	bl	800f564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f402:	2301      	movs	r3, #1
 800f404:	61bb      	str	r3, [r7, #24]
 800f406:	e002      	b.n	800f40e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f408:	f04f 33ff 	mov.w	r3, #4294967295
 800f40c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f40e:	69bb      	ldr	r3, [r7, #24]
	}
 800f410:	4618      	mov	r0, r3
 800f412:	3720      	adds	r7, #32
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b088      	sub	sp, #32
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
 800f424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	461a      	mov	r2, r3
 800f430:	21a5      	movs	r1, #165	; 0xa5
 800f432:	f002 f9fe 	bl	8011832 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f43a:	6879      	ldr	r1, [r7, #4]
 800f43c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f440:	440b      	add	r3, r1
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	f023 0307 	bic.w	r3, r3, #7
 800f44e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	f003 0307 	and.w	r3, r3, #7
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00a      	beq.n	800f470 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f45e:	f383 8811 	msr	BASEPRI, r3
 800f462:	f3bf 8f6f 	isb	sy
 800f466:	f3bf 8f4f 	dsb	sy
 800f46a:	617b      	str	r3, [r7, #20]
}
 800f46c:	bf00      	nop
 800f46e:	e7fe      	b.n	800f46e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d01f      	beq.n	800f4b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f476:	2300      	movs	r3, #0
 800f478:	61fb      	str	r3, [r7, #28]
 800f47a:	e012      	b.n	800f4a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	4413      	add	r3, r2
 800f482:	7819      	ldrb	r1, [r3, #0]
 800f484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	4413      	add	r3, r2
 800f48a:	3334      	adds	r3, #52	; 0x34
 800f48c:	460a      	mov	r2, r1
 800f48e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	4413      	add	r3, r2
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d006      	beq.n	800f4aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	61fb      	str	r3, [r7, #28]
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	2b0f      	cmp	r3, #15
 800f4a6:	d9e9      	bls.n	800f47c <prvInitialiseNewTask+0x64>
 800f4a8:	e000      	b.n	800f4ac <prvInitialiseNewTask+0x94>
			{
				break;
 800f4aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4b4:	e003      	b.n	800f4be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c0:	2b37      	cmp	r3, #55	; 0x37
 800f4c2:	d901      	bls.n	800f4c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f4c4:	2337      	movs	r3, #55	; 0x37
 800f4c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4dc:	3304      	adds	r3, #4
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fe fe6e 	bl	800e1c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	3318      	adds	r3, #24
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fe fe69 	bl	800e1c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f502:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f506:	2200      	movs	r2, #0
 800f508:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f516:	3354      	adds	r3, #84	; 0x54
 800f518:	224c      	movs	r2, #76	; 0x4c
 800f51a:	2100      	movs	r1, #0
 800f51c:	4618      	mov	r0, r3
 800f51e:	f002 f988 	bl	8011832 <memset>
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	4a0c      	ldr	r2, [pc, #48]	; (800f558 <prvInitialiseNewTask+0x140>)
 800f526:	659a      	str	r2, [r3, #88]	; 0x58
 800f528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52a:	4a0c      	ldr	r2, [pc, #48]	; (800f55c <prvInitialiseNewTask+0x144>)
 800f52c:	65da      	str	r2, [r3, #92]	; 0x5c
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	4a0b      	ldr	r2, [pc, #44]	; (800f560 <prvInitialiseNewTask+0x148>)
 800f532:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	68f9      	ldr	r1, [r7, #12]
 800f538:	69b8      	ldr	r0, [r7, #24]
 800f53a:	f7fe fed5 	bl	800e2e8 <pxPortInitialiseStack>
 800f53e:	4602      	mov	r2, r0
 800f540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f542:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f54e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f550:	bf00      	nop
 800f552:	3720      	adds	r7, #32
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	24005558 	.word	0x24005558
 800f55c:	240055c0 	.word	0x240055c0
 800f560:	24005628 	.word	0x24005628

0800f564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f56c:	f7fe ffea 	bl	800e544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f570:	4b2d      	ldr	r3, [pc, #180]	; (800f628 <prvAddNewTaskToReadyList+0xc4>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3301      	adds	r3, #1
 800f576:	4a2c      	ldr	r2, [pc, #176]	; (800f628 <prvAddNewTaskToReadyList+0xc4>)
 800f578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f57a:	4b2c      	ldr	r3, [pc, #176]	; (800f62c <prvAddNewTaskToReadyList+0xc8>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d109      	bne.n	800f596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f582:	4a2a      	ldr	r2, [pc, #168]	; (800f62c <prvAddNewTaskToReadyList+0xc8>)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f588:	4b27      	ldr	r3, [pc, #156]	; (800f628 <prvAddNewTaskToReadyList+0xc4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d110      	bne.n	800f5b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f590:	f000 fc26 	bl	800fde0 <prvInitialiseTaskLists>
 800f594:	e00d      	b.n	800f5b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f596:	4b26      	ldr	r3, [pc, #152]	; (800f630 <prvAddNewTaskToReadyList+0xcc>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d109      	bne.n	800f5b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f59e:	4b23      	ldr	r3, [pc, #140]	; (800f62c <prvAddNewTaskToReadyList+0xc8>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d802      	bhi.n	800f5b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f5ac:	4a1f      	ldr	r2, [pc, #124]	; (800f62c <prvAddNewTaskToReadyList+0xc8>)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f5b2:	4b20      	ldr	r3, [pc, #128]	; (800f634 <prvAddNewTaskToReadyList+0xd0>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	4a1e      	ldr	r2, [pc, #120]	; (800f634 <prvAddNewTaskToReadyList+0xd0>)
 800f5ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f5bc:	4b1d      	ldr	r3, [pc, #116]	; (800f634 <prvAddNewTaskToReadyList+0xd0>)
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5c8:	4b1b      	ldr	r3, [pc, #108]	; (800f638 <prvAddNewTaskToReadyList+0xd4>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d903      	bls.n	800f5d8 <prvAddNewTaskToReadyList+0x74>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d4:	4a18      	ldr	r2, [pc, #96]	; (800f638 <prvAddNewTaskToReadyList+0xd4>)
 800f5d6:	6013      	str	r3, [r2, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5dc:	4613      	mov	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	4413      	add	r3, r2
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	4a15      	ldr	r2, [pc, #84]	; (800f63c <prvAddNewTaskToReadyList+0xd8>)
 800f5e6:	441a      	add	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	4610      	mov	r0, r2
 800f5f0:	f7fe fdf3 	bl	800e1da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f5f4:	f7fe ffd6 	bl	800e5a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f5f8:	4b0d      	ldr	r3, [pc, #52]	; (800f630 <prvAddNewTaskToReadyList+0xcc>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d00e      	beq.n	800f61e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f600:	4b0a      	ldr	r3, [pc, #40]	; (800f62c <prvAddNewTaskToReadyList+0xc8>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d207      	bcs.n	800f61e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f60e:	4b0c      	ldr	r3, [pc, #48]	; (800f640 <prvAddNewTaskToReadyList+0xdc>)
 800f610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f61e:	bf00      	nop
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	240053f8 	.word	0x240053f8
 800f62c:	24004f24 	.word	0x24004f24
 800f630:	24005404 	.word	0x24005404
 800f634:	24005414 	.word	0x24005414
 800f638:	24005400 	.word	0x24005400
 800f63c:	24004f28 	.word	0x24004f28
 800f640:	e000ed04 	.word	0xe000ed04

0800f644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f64c:	2300      	movs	r3, #0
 800f64e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d017      	beq.n	800f686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f656:	4b13      	ldr	r3, [pc, #76]	; (800f6a4 <vTaskDelay+0x60>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00a      	beq.n	800f674 <vTaskDelay+0x30>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	60bb      	str	r3, [r7, #8]
}
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f674:	f000 f88a 	bl	800f78c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f678:	2100      	movs	r1, #0
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 fcfe 	bl	801007c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f680:	f000 f892 	bl	800f7a8 <xTaskResumeAll>
 800f684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d107      	bne.n	800f69c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f68c:	4b06      	ldr	r3, [pc, #24]	; (800f6a8 <vTaskDelay+0x64>)
 800f68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f692:	601a      	str	r2, [r3, #0]
 800f694:	f3bf 8f4f 	dsb	sy
 800f698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f69c:	bf00      	nop
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	24005420 	.word	0x24005420
 800f6a8:	e000ed04 	.word	0xe000ed04

0800f6ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08a      	sub	sp, #40	; 0x28
 800f6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6ba:	463a      	mov	r2, r7
 800f6bc:	1d39      	adds	r1, r7, #4
 800f6be:	f107 0308 	add.w	r3, r7, #8
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fe fb3e 	bl	800dd44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	9202      	str	r2, [sp, #8]
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9300      	str	r3, [sp, #0]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	460a      	mov	r2, r1
 800f6da:	4924      	ldr	r1, [pc, #144]	; (800f76c <vTaskStartScheduler+0xc0>)
 800f6dc:	4824      	ldr	r0, [pc, #144]	; (800f770 <vTaskStartScheduler+0xc4>)
 800f6de:	f7ff fdf9 	bl	800f2d4 <xTaskCreateStatic>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	4a23      	ldr	r2, [pc, #140]	; (800f774 <vTaskStartScheduler+0xc8>)
 800f6e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6e8:	4b22      	ldr	r3, [pc, #136]	; (800f774 <vTaskStartScheduler+0xc8>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d002      	beq.n	800f6f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	617b      	str	r3, [r7, #20]
 800f6f4:	e001      	b.n	800f6fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d102      	bne.n	800f706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f700:	f000 fd10 	bl	8010124 <xTimerCreateTimerTask>
 800f704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d11b      	bne.n	800f744 <vTaskStartScheduler+0x98>
	__asm volatile
 800f70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	613b      	str	r3, [r7, #16]
}
 800f71e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f720:	4b15      	ldr	r3, [pc, #84]	; (800f778 <vTaskStartScheduler+0xcc>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3354      	adds	r3, #84	; 0x54
 800f726:	4a15      	ldr	r2, [pc, #84]	; (800f77c <vTaskStartScheduler+0xd0>)
 800f728:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f72a:	4b15      	ldr	r3, [pc, #84]	; (800f780 <vTaskStartScheduler+0xd4>)
 800f72c:	f04f 32ff 	mov.w	r2, #4294967295
 800f730:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f732:	4b14      	ldr	r3, [pc, #80]	; (800f784 <vTaskStartScheduler+0xd8>)
 800f734:	2201      	movs	r2, #1
 800f736:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f738:	4b13      	ldr	r3, [pc, #76]	; (800f788 <vTaskStartScheduler+0xdc>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f73e:	f7fe fe5f 	bl	800e400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f742:	e00e      	b.n	800f762 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f74a:	d10a      	bne.n	800f762 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f750:	f383 8811 	msr	BASEPRI, r3
 800f754:	f3bf 8f6f 	isb	sy
 800f758:	f3bf 8f4f 	dsb	sy
 800f75c:	60fb      	str	r3, [r7, #12]
}
 800f75e:	bf00      	nop
 800f760:	e7fe      	b.n	800f760 <vTaskStartScheduler+0xb4>
}
 800f762:	bf00      	nop
 800f764:	3718      	adds	r7, #24
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	08014ebc 	.word	0x08014ebc
 800f770:	0800fdb1 	.word	0x0800fdb1
 800f774:	2400541c 	.word	0x2400541c
 800f778:	24004f24 	.word	0x24004f24
 800f77c:	2400006c 	.word	0x2400006c
 800f780:	24005418 	.word	0x24005418
 800f784:	24005404 	.word	0x24005404
 800f788:	240053fc 	.word	0x240053fc

0800f78c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f78c:	b480      	push	{r7}
 800f78e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f790:	4b04      	ldr	r3, [pc, #16]	; (800f7a4 <vTaskSuspendAll+0x18>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3301      	adds	r3, #1
 800f796:	4a03      	ldr	r2, [pc, #12]	; (800f7a4 <vTaskSuspendAll+0x18>)
 800f798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f79a:	bf00      	nop
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr
 800f7a4:	24005420 	.word	0x24005420

0800f7a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7b6:	4b42      	ldr	r3, [pc, #264]	; (800f8c0 <xTaskResumeAll+0x118>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d10a      	bne.n	800f7d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	603b      	str	r3, [r7, #0]
}
 800f7d0:	bf00      	nop
 800f7d2:	e7fe      	b.n	800f7d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7d4:	f7fe feb6 	bl	800e544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7d8:	4b39      	ldr	r3, [pc, #228]	; (800f8c0 <xTaskResumeAll+0x118>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	4a38      	ldr	r2, [pc, #224]	; (800f8c0 <xTaskResumeAll+0x118>)
 800f7e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7e2:	4b37      	ldr	r3, [pc, #220]	; (800f8c0 <xTaskResumeAll+0x118>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d162      	bne.n	800f8b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7ea:	4b36      	ldr	r3, [pc, #216]	; (800f8c4 <xTaskResumeAll+0x11c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d05e      	beq.n	800f8b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7f2:	e02f      	b.n	800f854 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7f4:	4b34      	ldr	r3, [pc, #208]	; (800f8c8 <xTaskResumeAll+0x120>)
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	3318      	adds	r3, #24
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe fd47 	bl	800e294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	3304      	adds	r3, #4
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fe fd42 	bl	800e294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f814:	4b2d      	ldr	r3, [pc, #180]	; (800f8cc <xTaskResumeAll+0x124>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d903      	bls.n	800f824 <xTaskResumeAll+0x7c>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f820:	4a2a      	ldr	r2, [pc, #168]	; (800f8cc <xTaskResumeAll+0x124>)
 800f822:	6013      	str	r3, [r2, #0]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f828:	4613      	mov	r3, r2
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	4413      	add	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4a27      	ldr	r2, [pc, #156]	; (800f8d0 <xTaskResumeAll+0x128>)
 800f832:	441a      	add	r2, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	3304      	adds	r3, #4
 800f838:	4619      	mov	r1, r3
 800f83a:	4610      	mov	r0, r2
 800f83c:	f7fe fccd 	bl	800e1da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f844:	4b23      	ldr	r3, [pc, #140]	; (800f8d4 <xTaskResumeAll+0x12c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d302      	bcc.n	800f854 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f84e:	4b22      	ldr	r3, [pc, #136]	; (800f8d8 <xTaskResumeAll+0x130>)
 800f850:	2201      	movs	r2, #1
 800f852:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f854:	4b1c      	ldr	r3, [pc, #112]	; (800f8c8 <xTaskResumeAll+0x120>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1cb      	bne.n	800f7f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f862:	f000 fb5f 	bl	800ff24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f866:	4b1d      	ldr	r3, [pc, #116]	; (800f8dc <xTaskResumeAll+0x134>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d010      	beq.n	800f894 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f872:	f000 f847 	bl	800f904 <xTaskIncrementTick>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f87c:	4b16      	ldr	r3, [pc, #88]	; (800f8d8 <xTaskResumeAll+0x130>)
 800f87e:	2201      	movs	r2, #1
 800f880:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	3b01      	subs	r3, #1
 800f886:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1f1      	bne.n	800f872 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f88e:	4b13      	ldr	r3, [pc, #76]	; (800f8dc <xTaskResumeAll+0x134>)
 800f890:	2200      	movs	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f894:	4b10      	ldr	r3, [pc, #64]	; (800f8d8 <xTaskResumeAll+0x130>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d009      	beq.n	800f8b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f89c:	2301      	movs	r3, #1
 800f89e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f8a0:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <xTaskResumeAll+0x138>)
 800f8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8a6:	601a      	str	r2, [r3, #0]
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8b0:	f7fe fe78 	bl	800e5a4 <vPortExitCritical>

	return xAlreadyYielded;
 800f8b4:	68bb      	ldr	r3, [r7, #8]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	24005420 	.word	0x24005420
 800f8c4:	240053f8 	.word	0x240053f8
 800f8c8:	240053b8 	.word	0x240053b8
 800f8cc:	24005400 	.word	0x24005400
 800f8d0:	24004f28 	.word	0x24004f28
 800f8d4:	24004f24 	.word	0x24004f24
 800f8d8:	2400540c 	.word	0x2400540c
 800f8dc:	24005408 	.word	0x24005408
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f8ea:	4b05      	ldr	r3, [pc, #20]	; (800f900 <xTaskGetTickCount+0x1c>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f8f0:	687b      	ldr	r3, [r7, #4]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	370c      	adds	r7, #12
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	240053fc 	.word	0x240053fc

0800f904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b086      	sub	sp, #24
 800f908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f90a:	2300      	movs	r3, #0
 800f90c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f90e:	4b4f      	ldr	r3, [pc, #316]	; (800fa4c <xTaskIncrementTick+0x148>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	f040 808f 	bne.w	800fa36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f918:	4b4d      	ldr	r3, [pc, #308]	; (800fa50 <xTaskIncrementTick+0x14c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3301      	adds	r3, #1
 800f91e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f920:	4a4b      	ldr	r2, [pc, #300]	; (800fa50 <xTaskIncrementTick+0x14c>)
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d120      	bne.n	800f96e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f92c:	4b49      	ldr	r3, [pc, #292]	; (800fa54 <xTaskIncrementTick+0x150>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00a      	beq.n	800f94c <xTaskIncrementTick+0x48>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	603b      	str	r3, [r7, #0]
}
 800f948:	bf00      	nop
 800f94a:	e7fe      	b.n	800f94a <xTaskIncrementTick+0x46>
 800f94c:	4b41      	ldr	r3, [pc, #260]	; (800fa54 <xTaskIncrementTick+0x150>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	60fb      	str	r3, [r7, #12]
 800f952:	4b41      	ldr	r3, [pc, #260]	; (800fa58 <xTaskIncrementTick+0x154>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a3f      	ldr	r2, [pc, #252]	; (800fa54 <xTaskIncrementTick+0x150>)
 800f958:	6013      	str	r3, [r2, #0]
 800f95a:	4a3f      	ldr	r2, [pc, #252]	; (800fa58 <xTaskIncrementTick+0x154>)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	4b3e      	ldr	r3, [pc, #248]	; (800fa5c <xTaskIncrementTick+0x158>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	4a3d      	ldr	r2, [pc, #244]	; (800fa5c <xTaskIncrementTick+0x158>)
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	f000 fadb 	bl	800ff24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f96e:	4b3c      	ldr	r3, [pc, #240]	; (800fa60 <xTaskIncrementTick+0x15c>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	693a      	ldr	r2, [r7, #16]
 800f974:	429a      	cmp	r2, r3
 800f976:	d349      	bcc.n	800fa0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f978:	4b36      	ldr	r3, [pc, #216]	; (800fa54 <xTaskIncrementTick+0x150>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d104      	bne.n	800f98c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f982:	4b37      	ldr	r3, [pc, #220]	; (800fa60 <xTaskIncrementTick+0x15c>)
 800f984:	f04f 32ff 	mov.w	r2, #4294967295
 800f988:	601a      	str	r2, [r3, #0]
					break;
 800f98a:	e03f      	b.n	800fa0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f98c:	4b31      	ldr	r3, [pc, #196]	; (800fa54 <xTaskIncrementTick+0x150>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d203      	bcs.n	800f9ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9a4:	4a2e      	ldr	r2, [pc, #184]	; (800fa60 <xTaskIncrementTick+0x15c>)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9aa:	e02f      	b.n	800fa0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7fe fc6f 	bl	800e294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d004      	beq.n	800f9c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	3318      	adds	r3, #24
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe fc66 	bl	800e294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9cc:	4b25      	ldr	r3, [pc, #148]	; (800fa64 <xTaskIncrementTick+0x160>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d903      	bls.n	800f9dc <xTaskIncrementTick+0xd8>
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	4a22      	ldr	r2, [pc, #136]	; (800fa64 <xTaskIncrementTick+0x160>)
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	4413      	add	r3, r2
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	4a1f      	ldr	r2, [pc, #124]	; (800fa68 <xTaskIncrementTick+0x164>)
 800f9ea:	441a      	add	r2, r3
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	3304      	adds	r3, #4
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	f7fe fbf1 	bl	800e1da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9fc:	4b1b      	ldr	r3, [pc, #108]	; (800fa6c <xTaskIncrementTick+0x168>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d3b8      	bcc.n	800f978 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fa06:	2301      	movs	r3, #1
 800fa08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa0a:	e7b5      	b.n	800f978 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa0c:	4b17      	ldr	r3, [pc, #92]	; (800fa6c <xTaskIncrementTick+0x168>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa12:	4915      	ldr	r1, [pc, #84]	; (800fa68 <xTaskIncrementTick+0x164>)
 800fa14:	4613      	mov	r3, r2
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	4413      	add	r3, r2
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	440b      	add	r3, r1
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d901      	bls.n	800fa28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fa24:	2301      	movs	r3, #1
 800fa26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fa28:	4b11      	ldr	r3, [pc, #68]	; (800fa70 <xTaskIncrementTick+0x16c>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d007      	beq.n	800fa40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fa30:	2301      	movs	r3, #1
 800fa32:	617b      	str	r3, [r7, #20]
 800fa34:	e004      	b.n	800fa40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa36:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <xTaskIncrementTick+0x170>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	4a0d      	ldr	r2, [pc, #52]	; (800fa74 <xTaskIncrementTick+0x170>)
 800fa3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa40:	697b      	ldr	r3, [r7, #20]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3718      	adds	r7, #24
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	24005420 	.word	0x24005420
 800fa50:	240053fc 	.word	0x240053fc
 800fa54:	240053b0 	.word	0x240053b0
 800fa58:	240053b4 	.word	0x240053b4
 800fa5c:	24005410 	.word	0x24005410
 800fa60:	24005418 	.word	0x24005418
 800fa64:	24005400 	.word	0x24005400
 800fa68:	24004f28 	.word	0x24004f28
 800fa6c:	24004f24 	.word	0x24004f24
 800fa70:	2400540c 	.word	0x2400540c
 800fa74:	24005408 	.word	0x24005408

0800fa78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa7e:	4b2a      	ldr	r3, [pc, #168]	; (800fb28 <vTaskSwitchContext+0xb0>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d003      	beq.n	800fa8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa86:	4b29      	ldr	r3, [pc, #164]	; (800fb2c <vTaskSwitchContext+0xb4>)
 800fa88:	2201      	movs	r2, #1
 800fa8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa8c:	e046      	b.n	800fb1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fa8e:	4b27      	ldr	r3, [pc, #156]	; (800fb2c <vTaskSwitchContext+0xb4>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa94:	4b26      	ldr	r3, [pc, #152]	; (800fb30 <vTaskSwitchContext+0xb8>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	60fb      	str	r3, [r7, #12]
 800fa9a:	e010      	b.n	800fabe <vTaskSwitchContext+0x46>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d10a      	bne.n	800fab8 <vTaskSwitchContext+0x40>
	__asm volatile
 800faa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa6:	f383 8811 	msr	BASEPRI, r3
 800faaa:	f3bf 8f6f 	isb	sy
 800faae:	f3bf 8f4f 	dsb	sy
 800fab2:	607b      	str	r3, [r7, #4]
}
 800fab4:	bf00      	nop
 800fab6:	e7fe      	b.n	800fab6 <vTaskSwitchContext+0x3e>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	3b01      	subs	r3, #1
 800fabc:	60fb      	str	r3, [r7, #12]
 800fabe:	491d      	ldr	r1, [pc, #116]	; (800fb34 <vTaskSwitchContext+0xbc>)
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	4613      	mov	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	440b      	add	r3, r1
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d0e4      	beq.n	800fa9c <vTaskSwitchContext+0x24>
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	4613      	mov	r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	4413      	add	r3, r2
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	4a15      	ldr	r2, [pc, #84]	; (800fb34 <vTaskSwitchContext+0xbc>)
 800fade:	4413      	add	r3, r2
 800fae0:	60bb      	str	r3, [r7, #8]
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	685a      	ldr	r2, [r3, #4]
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	605a      	str	r2, [r3, #4]
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	3308      	adds	r3, #8
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d104      	bne.n	800fb02 <vTaskSwitchContext+0x8a>
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	685a      	ldr	r2, [r3, #4]
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	605a      	str	r2, [r3, #4]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	4a0b      	ldr	r2, [pc, #44]	; (800fb38 <vTaskSwitchContext+0xc0>)
 800fb0a:	6013      	str	r3, [r2, #0]
 800fb0c:	4a08      	ldr	r2, [pc, #32]	; (800fb30 <vTaskSwitchContext+0xb8>)
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb12:	4b09      	ldr	r3, [pc, #36]	; (800fb38 <vTaskSwitchContext+0xc0>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3354      	adds	r3, #84	; 0x54
 800fb18:	4a08      	ldr	r2, [pc, #32]	; (800fb3c <vTaskSwitchContext+0xc4>)
 800fb1a:	6013      	str	r3, [r2, #0]
}
 800fb1c:	bf00      	nop
 800fb1e:	3714      	adds	r7, #20
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	24005420 	.word	0x24005420
 800fb2c:	2400540c 	.word	0x2400540c
 800fb30:	24005400 	.word	0x24005400
 800fb34:	24004f28 	.word	0x24004f28
 800fb38:	24004f24 	.word	0x24004f24
 800fb3c:	2400006c 	.word	0x2400006c

0800fb40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10a      	bne.n	800fb66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	60fb      	str	r3, [r7, #12]
}
 800fb62:	bf00      	nop
 800fb64:	e7fe      	b.n	800fb64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb66:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <vTaskPlaceOnEventList+0x44>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3318      	adds	r3, #24
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7fe fb57 	bl	800e222 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb74:	2101      	movs	r1, #1
 800fb76:	6838      	ldr	r0, [r7, #0]
 800fb78:	f000 fa80 	bl	801007c <prvAddCurrentTaskToDelayedList>
}
 800fb7c:	bf00      	nop
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	24004f24 	.word	0x24004f24

0800fb88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10a      	bne.n	800fbb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	f383 8811 	msr	BASEPRI, r3
 800fba2:	f3bf 8f6f 	isb	sy
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	617b      	str	r3, [r7, #20]
}
 800fbac:	bf00      	nop
 800fbae:	e7fe      	b.n	800fbae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbb0:	4b0a      	ldr	r3, [pc, #40]	; (800fbdc <vTaskPlaceOnEventListRestricted+0x54>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3318      	adds	r3, #24
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f7fe fb0e 	bl	800e1da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fbca:	6879      	ldr	r1, [r7, #4]
 800fbcc:	68b8      	ldr	r0, [r7, #8]
 800fbce:	f000 fa55 	bl	801007c <prvAddCurrentTaskToDelayedList>
	}
 800fbd2:	bf00      	nop
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	24004f24 	.word	0x24004f24

0800fbe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d10a      	bne.n	800fc0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfa:	f383 8811 	msr	BASEPRI, r3
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f3bf 8f4f 	dsb	sy
 800fc06:	60fb      	str	r3, [r7, #12]
}
 800fc08:	bf00      	nop
 800fc0a:	e7fe      	b.n	800fc0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	3318      	adds	r3, #24
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fe fb3f 	bl	800e294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc16:	4b1e      	ldr	r3, [pc, #120]	; (800fc90 <xTaskRemoveFromEventList+0xb0>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d11d      	bne.n	800fc5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	3304      	adds	r3, #4
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe fb36 	bl	800e294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2c:	4b19      	ldr	r3, [pc, #100]	; (800fc94 <xTaskRemoveFromEventList+0xb4>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d903      	bls.n	800fc3c <xTaskRemoveFromEventList+0x5c>
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc38:	4a16      	ldr	r2, [pc, #88]	; (800fc94 <xTaskRemoveFromEventList+0xb4>)
 800fc3a:	6013      	str	r3, [r2, #0]
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc40:	4613      	mov	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4413      	add	r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4a13      	ldr	r2, [pc, #76]	; (800fc98 <xTaskRemoveFromEventList+0xb8>)
 800fc4a:	441a      	add	r2, r3
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	3304      	adds	r3, #4
 800fc50:	4619      	mov	r1, r3
 800fc52:	4610      	mov	r0, r2
 800fc54:	f7fe fac1 	bl	800e1da <vListInsertEnd>
 800fc58:	e005      	b.n	800fc66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	3318      	adds	r3, #24
 800fc5e:	4619      	mov	r1, r3
 800fc60:	480e      	ldr	r0, [pc, #56]	; (800fc9c <xTaskRemoveFromEventList+0xbc>)
 800fc62:	f7fe faba 	bl	800e1da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6a:	4b0d      	ldr	r3, [pc, #52]	; (800fca0 <xTaskRemoveFromEventList+0xc0>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d905      	bls.n	800fc80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc74:	2301      	movs	r3, #1
 800fc76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc78:	4b0a      	ldr	r3, [pc, #40]	; (800fca4 <xTaskRemoveFromEventList+0xc4>)
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	e001      	b.n	800fc84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc80:	2300      	movs	r3, #0
 800fc82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc84:	697b      	ldr	r3, [r7, #20]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	24005420 	.word	0x24005420
 800fc94:	24005400 	.word	0x24005400
 800fc98:	24004f28 	.word	0x24004f28
 800fc9c:	240053b8 	.word	0x240053b8
 800fca0:	24004f24 	.word	0x24004f24
 800fca4:	2400540c 	.word	0x2400540c

0800fca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fcb0:	4b06      	ldr	r3, [pc, #24]	; (800fccc <vTaskInternalSetTimeOutState+0x24>)
 800fcb2:	681a      	ldr	r2, [r3, #0]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fcb8:	4b05      	ldr	r3, [pc, #20]	; (800fcd0 <vTaskInternalSetTimeOutState+0x28>)
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	605a      	str	r2, [r3, #4]
}
 800fcc0:	bf00      	nop
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	24005410 	.word	0x24005410
 800fcd0:	240053fc 	.word	0x240053fc

0800fcd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b088      	sub	sp, #32
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d10a      	bne.n	800fcfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	613b      	str	r3, [r7, #16]
}
 800fcf6:	bf00      	nop
 800fcf8:	e7fe      	b.n	800fcf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d10a      	bne.n	800fd16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd04:	f383 8811 	msr	BASEPRI, r3
 800fd08:	f3bf 8f6f 	isb	sy
 800fd0c:	f3bf 8f4f 	dsb	sy
 800fd10:	60fb      	str	r3, [r7, #12]
}
 800fd12:	bf00      	nop
 800fd14:	e7fe      	b.n	800fd14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fd16:	f7fe fc15 	bl	800e544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fd1a:	4b1d      	ldr	r3, [pc, #116]	; (800fd90 <xTaskCheckForTimeOut+0xbc>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	69ba      	ldr	r2, [r7, #24]
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd32:	d102      	bne.n	800fd3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fd34:	2300      	movs	r3, #0
 800fd36:	61fb      	str	r3, [r7, #28]
 800fd38:	e023      	b.n	800fd82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	4b15      	ldr	r3, [pc, #84]	; (800fd94 <xTaskCheckForTimeOut+0xc0>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d007      	beq.n	800fd56 <xTaskCheckForTimeOut+0x82>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	69ba      	ldr	r2, [r7, #24]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d302      	bcc.n	800fd56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd50:	2301      	movs	r3, #1
 800fd52:	61fb      	str	r3, [r7, #28]
 800fd54:	e015      	b.n	800fd82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d20b      	bcs.n	800fd78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	1ad2      	subs	r2, r2, r3
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f7ff ff9b 	bl	800fca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd72:	2300      	movs	r3, #0
 800fd74:	61fb      	str	r3, [r7, #28]
 800fd76:	e004      	b.n	800fd82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd82:	f7fe fc0f 	bl	800e5a4 <vPortExitCritical>

	return xReturn;
 800fd86:	69fb      	ldr	r3, [r7, #28]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3720      	adds	r7, #32
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	240053fc 	.word	0x240053fc
 800fd94:	24005410 	.word	0x24005410

0800fd98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd9c:	4b03      	ldr	r3, [pc, #12]	; (800fdac <vTaskMissedYield+0x14>)
 800fd9e:	2201      	movs	r2, #1
 800fda0:	601a      	str	r2, [r3, #0]
}
 800fda2:	bf00      	nop
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	2400540c 	.word	0x2400540c

0800fdb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fdb8:	f000 f852 	bl	800fe60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <prvIdleTask+0x28>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d9f9      	bls.n	800fdb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fdc4:	4b05      	ldr	r3, [pc, #20]	; (800fddc <prvIdleTask+0x2c>)
 800fdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fdd4:	e7f0      	b.n	800fdb8 <prvIdleTask+0x8>
 800fdd6:	bf00      	nop
 800fdd8:	24004f28 	.word	0x24004f28
 800fddc:	e000ed04 	.word	0xe000ed04

0800fde0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fde6:	2300      	movs	r3, #0
 800fde8:	607b      	str	r3, [r7, #4]
 800fdea:	e00c      	b.n	800fe06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4413      	add	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4a12      	ldr	r2, [pc, #72]	; (800fe40 <prvInitialiseTaskLists+0x60>)
 800fdf8:	4413      	add	r3, r2
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fe f9c0 	bl	800e180 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	3301      	adds	r3, #1
 800fe04:	607b      	str	r3, [r7, #4]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b37      	cmp	r3, #55	; 0x37
 800fe0a:	d9ef      	bls.n	800fdec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fe0c:	480d      	ldr	r0, [pc, #52]	; (800fe44 <prvInitialiseTaskLists+0x64>)
 800fe0e:	f7fe f9b7 	bl	800e180 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe12:	480d      	ldr	r0, [pc, #52]	; (800fe48 <prvInitialiseTaskLists+0x68>)
 800fe14:	f7fe f9b4 	bl	800e180 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe18:	480c      	ldr	r0, [pc, #48]	; (800fe4c <prvInitialiseTaskLists+0x6c>)
 800fe1a:	f7fe f9b1 	bl	800e180 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fe1e:	480c      	ldr	r0, [pc, #48]	; (800fe50 <prvInitialiseTaskLists+0x70>)
 800fe20:	f7fe f9ae 	bl	800e180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fe24:	480b      	ldr	r0, [pc, #44]	; (800fe54 <prvInitialiseTaskLists+0x74>)
 800fe26:	f7fe f9ab 	bl	800e180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fe2a:	4b0b      	ldr	r3, [pc, #44]	; (800fe58 <prvInitialiseTaskLists+0x78>)
 800fe2c:	4a05      	ldr	r2, [pc, #20]	; (800fe44 <prvInitialiseTaskLists+0x64>)
 800fe2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe30:	4b0a      	ldr	r3, [pc, #40]	; (800fe5c <prvInitialiseTaskLists+0x7c>)
 800fe32:	4a05      	ldr	r2, [pc, #20]	; (800fe48 <prvInitialiseTaskLists+0x68>)
 800fe34:	601a      	str	r2, [r3, #0]
}
 800fe36:	bf00      	nop
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	24004f28 	.word	0x24004f28
 800fe44:	24005388 	.word	0x24005388
 800fe48:	2400539c 	.word	0x2400539c
 800fe4c:	240053b8 	.word	0x240053b8
 800fe50:	240053cc 	.word	0x240053cc
 800fe54:	240053e4 	.word	0x240053e4
 800fe58:	240053b0 	.word	0x240053b0
 800fe5c:	240053b4 	.word	0x240053b4

0800fe60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe66:	e019      	b.n	800fe9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe68:	f7fe fb6c 	bl	800e544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe6c:	4b10      	ldr	r3, [pc, #64]	; (800feb0 <prvCheckTasksWaitingTermination+0x50>)
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	3304      	adds	r3, #4
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fe fa0b 	bl	800e294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <prvCheckTasksWaitingTermination+0x54>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3b01      	subs	r3, #1
 800fe84:	4a0b      	ldr	r2, [pc, #44]	; (800feb4 <prvCheckTasksWaitingTermination+0x54>)
 800fe86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe88:	4b0b      	ldr	r3, [pc, #44]	; (800feb8 <prvCheckTasksWaitingTermination+0x58>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	4a0a      	ldr	r2, [pc, #40]	; (800feb8 <prvCheckTasksWaitingTermination+0x58>)
 800fe90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe92:	f7fe fb87 	bl	800e5a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f810 	bl	800febc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe9c:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <prvCheckTasksWaitingTermination+0x58>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1e1      	bne.n	800fe68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fea4:	bf00      	nop
 800fea6:	bf00      	nop
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	240053cc 	.word	0x240053cc
 800feb4:	240053f8 	.word	0x240053f8
 800feb8:	240053e0 	.word	0x240053e0

0800febc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	3354      	adds	r3, #84	; 0x54
 800fec8:	4618      	mov	r0, r3
 800feca:	f001 fccf 	bl	801186c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d108      	bne.n	800feea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fedc:	4618      	mov	r0, r3
 800fede:	f7fe f831 	bl	800df44 <vPortFree>
				vPortFree( pxTCB );
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7fe f82e 	bl	800df44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fee8:	e018      	b.n	800ff1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d103      	bne.n	800fefc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7fe f825 	bl	800df44 <vPortFree>
	}
 800fefa:	e00f      	b.n	800ff1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ff02:	2b02      	cmp	r3, #2
 800ff04:	d00a      	beq.n	800ff1c <prvDeleteTCB+0x60>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	60fb      	str	r3, [r7, #12]
}
 800ff18:	bf00      	nop
 800ff1a:	e7fe      	b.n	800ff1a <prvDeleteTCB+0x5e>
	}
 800ff1c:	bf00      	nop
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff2a:	4b0c      	ldr	r3, [pc, #48]	; (800ff5c <prvResetNextTaskUnblockTime+0x38>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d104      	bne.n	800ff3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff34:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <prvResetNextTaskUnblockTime+0x3c>)
 800ff36:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff3c:	e008      	b.n	800ff50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff3e:	4b07      	ldr	r3, [pc, #28]	; (800ff5c <prvResetNextTaskUnblockTime+0x38>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	4a04      	ldr	r2, [pc, #16]	; (800ff60 <prvResetNextTaskUnblockTime+0x3c>)
 800ff4e:	6013      	str	r3, [r2, #0]
}
 800ff50:	bf00      	nop
 800ff52:	370c      	adds	r7, #12
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr
 800ff5c:	240053b0 	.word	0x240053b0
 800ff60:	24005418 	.word	0x24005418

0800ff64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff6a:	4b0b      	ldr	r3, [pc, #44]	; (800ff98 <xTaskGetSchedulerState+0x34>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d102      	bne.n	800ff78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff72:	2301      	movs	r3, #1
 800ff74:	607b      	str	r3, [r7, #4]
 800ff76:	e008      	b.n	800ff8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff78:	4b08      	ldr	r3, [pc, #32]	; (800ff9c <xTaskGetSchedulerState+0x38>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d102      	bne.n	800ff86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff80:	2302      	movs	r3, #2
 800ff82:	607b      	str	r3, [r7, #4]
 800ff84:	e001      	b.n	800ff8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff86:	2300      	movs	r3, #0
 800ff88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff8a:	687b      	ldr	r3, [r7, #4]
	}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	370c      	adds	r7, #12
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	24005404 	.word	0x24005404
 800ff9c:	24005420 	.word	0x24005420

0800ffa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ffac:	2300      	movs	r3, #0
 800ffae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d056      	beq.n	8010064 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ffb6:	4b2e      	ldr	r3, [pc, #184]	; (8010070 <xTaskPriorityDisinherit+0xd0>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	693a      	ldr	r2, [r7, #16]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d00a      	beq.n	800ffd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ffc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc4:	f383 8811 	msr	BASEPRI, r3
 800ffc8:	f3bf 8f6f 	isb	sy
 800ffcc:	f3bf 8f4f 	dsb	sy
 800ffd0:	60fb      	str	r3, [r7, #12]
}
 800ffd2:	bf00      	nop
 800ffd4:	e7fe      	b.n	800ffd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d10a      	bne.n	800fff4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ffde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe2:	f383 8811 	msr	BASEPRI, r3
 800ffe6:	f3bf 8f6f 	isb	sy
 800ffea:	f3bf 8f4f 	dsb	sy
 800ffee:	60bb      	str	r3, [r7, #8]
}
 800fff0:	bf00      	nop
 800fff2:	e7fe      	b.n	800fff2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fff8:	1e5a      	subs	r2, r3, #1
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010006:	429a      	cmp	r2, r3
 8010008:	d02c      	beq.n	8010064 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801000e:	2b00      	cmp	r3, #0
 8010010:	d128      	bne.n	8010064 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	3304      	adds	r3, #4
 8010016:	4618      	mov	r0, r3
 8010018:	f7fe f93c 	bl	800e294 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010028:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010034:	4b0f      	ldr	r3, [pc, #60]	; (8010074 <xTaskPriorityDisinherit+0xd4>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	d903      	bls.n	8010044 <xTaskPriorityDisinherit+0xa4>
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010040:	4a0c      	ldr	r2, [pc, #48]	; (8010074 <xTaskPriorityDisinherit+0xd4>)
 8010042:	6013      	str	r3, [r2, #0]
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010048:	4613      	mov	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4413      	add	r3, r2
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	4a09      	ldr	r2, [pc, #36]	; (8010078 <xTaskPriorityDisinherit+0xd8>)
 8010052:	441a      	add	r2, r3
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	3304      	adds	r3, #4
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fe f8bd 	bl	800e1da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010060:	2301      	movs	r3, #1
 8010062:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010064:	697b      	ldr	r3, [r7, #20]
	}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	24004f24 	.word	0x24004f24
 8010074:	24005400 	.word	0x24005400
 8010078:	24004f28 	.word	0x24004f28

0801007c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010086:	4b21      	ldr	r3, [pc, #132]	; (801010c <prvAddCurrentTaskToDelayedList+0x90>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801008c:	4b20      	ldr	r3, [pc, #128]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3304      	adds	r3, #4
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe f8fe 	bl	800e294 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801009e:	d10a      	bne.n	80100b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d007      	beq.n	80100b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100a6:	4b1a      	ldr	r3, [pc, #104]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3304      	adds	r3, #4
 80100ac:	4619      	mov	r1, r3
 80100ae:	4819      	ldr	r0, [pc, #100]	; (8010114 <prvAddCurrentTaskToDelayedList+0x98>)
 80100b0:	f7fe f893 	bl	800e1da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80100b4:	e026      	b.n	8010104 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4413      	add	r3, r2
 80100bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80100be:	4b14      	ldr	r3, [pc, #80]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d209      	bcs.n	80100e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100ce:	4b12      	ldr	r3, [pc, #72]	; (8010118 <prvAddCurrentTaskToDelayedList+0x9c>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	4b0f      	ldr	r3, [pc, #60]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3304      	adds	r3, #4
 80100d8:	4619      	mov	r1, r3
 80100da:	4610      	mov	r0, r2
 80100dc:	f7fe f8a1 	bl	800e222 <vListInsert>
}
 80100e0:	e010      	b.n	8010104 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100e2:	4b0e      	ldr	r3, [pc, #56]	; (801011c <prvAddCurrentTaskToDelayedList+0xa0>)
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3304      	adds	r3, #4
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	f7fe f897 	bl	800e222 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100f4:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <prvAddCurrentTaskToDelayedList+0xa4>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d202      	bcs.n	8010104 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80100fe:	4a08      	ldr	r2, [pc, #32]	; (8010120 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	6013      	str	r3, [r2, #0]
}
 8010104:	bf00      	nop
 8010106:	3710      	adds	r7, #16
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}
 801010c:	240053fc 	.word	0x240053fc
 8010110:	24004f24 	.word	0x24004f24
 8010114:	240053e4 	.word	0x240053e4
 8010118:	240053b4 	.word	0x240053b4
 801011c:	240053b0 	.word	0x240053b0
 8010120:	24005418 	.word	0x24005418

08010124 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08a      	sub	sp, #40	; 0x28
 8010128:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801012a:	2300      	movs	r3, #0
 801012c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801012e:	f000 fb07 	bl	8010740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010132:	4b1c      	ldr	r3, [pc, #112]	; (80101a4 <xTimerCreateTimerTask+0x80>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d021      	beq.n	801017e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801013a:	2300      	movs	r3, #0
 801013c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010142:	1d3a      	adds	r2, r7, #4
 8010144:	f107 0108 	add.w	r1, r7, #8
 8010148:	f107 030c 	add.w	r3, r7, #12
 801014c:	4618      	mov	r0, r3
 801014e:	f7fd fe13 	bl	800dd78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010152:	6879      	ldr	r1, [r7, #4]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	9202      	str	r2, [sp, #8]
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	2302      	movs	r3, #2
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	2300      	movs	r3, #0
 8010162:	460a      	mov	r2, r1
 8010164:	4910      	ldr	r1, [pc, #64]	; (80101a8 <xTimerCreateTimerTask+0x84>)
 8010166:	4811      	ldr	r0, [pc, #68]	; (80101ac <xTimerCreateTimerTask+0x88>)
 8010168:	f7ff f8b4 	bl	800f2d4 <xTaskCreateStatic>
 801016c:	4603      	mov	r3, r0
 801016e:	4a10      	ldr	r2, [pc, #64]	; (80101b0 <xTimerCreateTimerTask+0x8c>)
 8010170:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010172:	4b0f      	ldr	r3, [pc, #60]	; (80101b0 <xTimerCreateTimerTask+0x8c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801017a:	2301      	movs	r3, #1
 801017c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10a      	bne.n	801019a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	613b      	str	r3, [r7, #16]
}
 8010196:	bf00      	nop
 8010198:	e7fe      	b.n	8010198 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801019a:	697b      	ldr	r3, [r7, #20]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	24005454 	.word	0x24005454
 80101a8:	08014ec4 	.word	0x08014ec4
 80101ac:	080102e9 	.word	0x080102e9
 80101b0:	24005458 	.word	0x24005458

080101b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b08a      	sub	sp, #40	; 0x28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d10a      	bne.n	80101e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80101cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d0:	f383 8811 	msr	BASEPRI, r3
 80101d4:	f3bf 8f6f 	isb	sy
 80101d8:	f3bf 8f4f 	dsb	sy
 80101dc:	623b      	str	r3, [r7, #32]
}
 80101de:	bf00      	nop
 80101e0:	e7fe      	b.n	80101e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80101e2:	4b1a      	ldr	r3, [pc, #104]	; (801024c <xTimerGenericCommand+0x98>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d02a      	beq.n	8010240 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	2b05      	cmp	r3, #5
 80101fa:	dc18      	bgt.n	801022e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80101fc:	f7ff feb2 	bl	800ff64 <xTaskGetSchedulerState>
 8010200:	4603      	mov	r3, r0
 8010202:	2b02      	cmp	r3, #2
 8010204:	d109      	bne.n	801021a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010206:	4b11      	ldr	r3, [pc, #68]	; (801024c <xTimerGenericCommand+0x98>)
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	f107 0110 	add.w	r1, r7, #16
 801020e:	2300      	movs	r3, #0
 8010210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010212:	f7fe fbf7 	bl	800ea04 <xQueueGenericSend>
 8010216:	6278      	str	r0, [r7, #36]	; 0x24
 8010218:	e012      	b.n	8010240 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801021a:	4b0c      	ldr	r3, [pc, #48]	; (801024c <xTimerGenericCommand+0x98>)
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	f107 0110 	add.w	r1, r7, #16
 8010222:	2300      	movs	r3, #0
 8010224:	2200      	movs	r2, #0
 8010226:	f7fe fbed 	bl	800ea04 <xQueueGenericSend>
 801022a:	6278      	str	r0, [r7, #36]	; 0x24
 801022c:	e008      	b.n	8010240 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801022e:	4b07      	ldr	r3, [pc, #28]	; (801024c <xTimerGenericCommand+0x98>)
 8010230:	6818      	ldr	r0, [r3, #0]
 8010232:	f107 0110 	add.w	r1, r7, #16
 8010236:	2300      	movs	r3, #0
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	f7fe fce1 	bl	800ec00 <xQueueGenericSendFromISR>
 801023e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010242:	4618      	mov	r0, r3
 8010244:	3728      	adds	r7, #40	; 0x28
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	24005454 	.word	0x24005454

08010250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af02      	add	r7, sp, #8
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801025a:	4b22      	ldr	r3, [pc, #136]	; (80102e4 <prvProcessExpiredTimer+0x94>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe f813 	bl	800e294 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010274:	f003 0304 	and.w	r3, r3, #4
 8010278:	2b00      	cmp	r3, #0
 801027a:	d022      	beq.n	80102c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	699a      	ldr	r2, [r3, #24]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	18d1      	adds	r1, r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	683a      	ldr	r2, [r7, #0]
 8010288:	6978      	ldr	r0, [r7, #20]
 801028a:	f000 f8d1 	bl	8010430 <prvInsertTimerInActiveList>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d01f      	beq.n	80102d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010294:	2300      	movs	r3, #0
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	2300      	movs	r3, #0
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	2100      	movs	r1, #0
 801029e:	6978      	ldr	r0, [r7, #20]
 80102a0:	f7ff ff88 	bl	80101b4 <xTimerGenericCommand>
 80102a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d113      	bne.n	80102d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80102ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b0:	f383 8811 	msr	BASEPRI, r3
 80102b4:	f3bf 8f6f 	isb	sy
 80102b8:	f3bf 8f4f 	dsb	sy
 80102bc:	60fb      	str	r3, [r7, #12]
}
 80102be:	bf00      	nop
 80102c0:	e7fe      	b.n	80102c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102c8:	f023 0301 	bic.w	r3, r3, #1
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	6978      	ldr	r0, [r7, #20]
 80102da:	4798      	blx	r3
}
 80102dc:	bf00      	nop
 80102de:	3718      	adds	r7, #24
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	2400544c 	.word	0x2400544c

080102e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80102f0:	f107 0308 	add.w	r3, r7, #8
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 f857 	bl	80103a8 <prvGetNextExpireTime>
 80102fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	4619      	mov	r1, r3
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f000 f803 	bl	801030c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010306:	f000 f8d5 	bl	80104b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801030a:	e7f1      	b.n	80102f0 <prvTimerTask+0x8>

0801030c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010316:	f7ff fa39 	bl	800f78c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	4618      	mov	r0, r3
 8010320:	f000 f866 	bl	80103f0 <prvSampleTimeNow>
 8010324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d130      	bne.n	801038e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10a      	bne.n	8010348 <prvProcessTimerOrBlockTask+0x3c>
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	429a      	cmp	r2, r3
 8010338:	d806      	bhi.n	8010348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801033a:	f7ff fa35 	bl	800f7a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801033e:	68f9      	ldr	r1, [r7, #12]
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f7ff ff85 	bl	8010250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010346:	e024      	b.n	8010392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d008      	beq.n	8010360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801034e:	4b13      	ldr	r3, [pc, #76]	; (801039c <prvProcessTimerOrBlockTask+0x90>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d101      	bne.n	801035c <prvProcessTimerOrBlockTask+0x50>
 8010358:	2301      	movs	r3, #1
 801035a:	e000      	b.n	801035e <prvProcessTimerOrBlockTask+0x52>
 801035c:	2300      	movs	r3, #0
 801035e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010360:	4b0f      	ldr	r3, [pc, #60]	; (80103a0 <prvProcessTimerOrBlockTask+0x94>)
 8010362:	6818      	ldr	r0, [r3, #0]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	4619      	mov	r1, r3
 801036e:	f7fe ff7d 	bl	800f26c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010372:	f7ff fa19 	bl	800f7a8 <xTaskResumeAll>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801037c:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <prvProcessTimerOrBlockTask+0x98>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
}
 801038c:	e001      	b.n	8010392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801038e:	f7ff fa0b 	bl	800f7a8 <xTaskResumeAll>
}
 8010392:	bf00      	nop
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	24005450 	.word	0x24005450
 80103a0:	24005454 	.word	0x24005454
 80103a4:	e000ed04 	.word	0xe000ed04

080103a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103b0:	4b0e      	ldr	r3, [pc, #56]	; (80103ec <prvGetNextExpireTime+0x44>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d101      	bne.n	80103be <prvGetNextExpireTime+0x16>
 80103ba:	2201      	movs	r2, #1
 80103bc:	e000      	b.n	80103c0 <prvGetNextExpireTime+0x18>
 80103be:	2200      	movs	r2, #0
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d105      	bne.n	80103d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103cc:	4b07      	ldr	r3, [pc, #28]	; (80103ec <prvGetNextExpireTime+0x44>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	60fb      	str	r3, [r7, #12]
 80103d6:	e001      	b.n	80103dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80103d8:	2300      	movs	r3, #0
 80103da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80103dc:	68fb      	ldr	r3, [r7, #12]
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	2400544c 	.word	0x2400544c

080103f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80103f8:	f7ff fa74 	bl	800f8e4 <xTaskGetTickCount>
 80103fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80103fe:	4b0b      	ldr	r3, [pc, #44]	; (801042c <prvSampleTimeNow+0x3c>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	429a      	cmp	r2, r3
 8010406:	d205      	bcs.n	8010414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010408:	f000 f936 	bl	8010678 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	601a      	str	r2, [r3, #0]
 8010412:	e002      	b.n	801041a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801041a:	4a04      	ldr	r2, [pc, #16]	; (801042c <prvSampleTimeNow+0x3c>)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010420:	68fb      	ldr	r3, [r7, #12]
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	2400545c 	.word	0x2400545c

08010430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
 801043c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801043e:	2300      	movs	r3, #0
 8010440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	429a      	cmp	r2, r3
 8010454:	d812      	bhi.n	801047c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	1ad2      	subs	r2, r2, r3
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	429a      	cmp	r2, r3
 8010462:	d302      	bcc.n	801046a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010464:	2301      	movs	r3, #1
 8010466:	617b      	str	r3, [r7, #20]
 8010468:	e01b      	b.n	80104a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <prvInsertTimerInActiveList+0x7c>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	3304      	adds	r3, #4
 8010472:	4619      	mov	r1, r3
 8010474:	4610      	mov	r0, r2
 8010476:	f7fd fed4 	bl	800e222 <vListInsert>
 801047a:	e012      	b.n	80104a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	429a      	cmp	r2, r3
 8010482:	d206      	bcs.n	8010492 <prvInsertTimerInActiveList+0x62>
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d302      	bcc.n	8010492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801048c:	2301      	movs	r3, #1
 801048e:	617b      	str	r3, [r7, #20]
 8010490:	e007      	b.n	80104a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010492:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <prvInsertTimerInActiveList+0x80>)
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3304      	adds	r3, #4
 801049a:	4619      	mov	r1, r3
 801049c:	4610      	mov	r0, r2
 801049e:	f7fd fec0 	bl	800e222 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80104a2:	697b      	ldr	r3, [r7, #20]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	24005450 	.word	0x24005450
 80104b0:	2400544c 	.word	0x2400544c

080104b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08e      	sub	sp, #56	; 0x38
 80104b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80104ba:	e0ca      	b.n	8010652 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	da18      	bge.n	80104f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80104c2:	1d3b      	adds	r3, r7, #4
 80104c4:	3304      	adds	r3, #4
 80104c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10a      	bne.n	80104e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	61fb      	str	r3, [r7, #28]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ea:	6850      	ldr	r0, [r2, #4]
 80104ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ee:	6892      	ldr	r2, [r2, #8]
 80104f0:	4611      	mov	r1, r2
 80104f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f2c0 80ab 	blt.w	8010652 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d004      	beq.n	8010512 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	3304      	adds	r3, #4
 801050c:	4618      	mov	r0, r3
 801050e:	f7fd fec1 	bl	800e294 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010512:	463b      	mov	r3, r7
 8010514:	4618      	mov	r0, r3
 8010516:	f7ff ff6b 	bl	80103f0 <prvSampleTimeNow>
 801051a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b09      	cmp	r3, #9
 8010520:	f200 8096 	bhi.w	8010650 <prvProcessReceivedCommands+0x19c>
 8010524:	a201      	add	r2, pc, #4	; (adr r2, 801052c <prvProcessReceivedCommands+0x78>)
 8010526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801052a:	bf00      	nop
 801052c:	08010555 	.word	0x08010555
 8010530:	08010555 	.word	0x08010555
 8010534:	08010555 	.word	0x08010555
 8010538:	080105c9 	.word	0x080105c9
 801053c:	080105dd 	.word	0x080105dd
 8010540:	08010627 	.word	0x08010627
 8010544:	08010555 	.word	0x08010555
 8010548:	08010555 	.word	0x08010555
 801054c:	080105c9 	.word	0x080105c9
 8010550:	080105dd 	.word	0x080105dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801055a:	f043 0301 	orr.w	r3, r3, #1
 801055e:	b2da      	uxtb	r2, r3
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	699b      	ldr	r3, [r3, #24]
 801056c:	18d1      	adds	r1, r2, r3
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010574:	f7ff ff5c 	bl	8010430 <prvInsertTimerInActiveList>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d069      	beq.n	8010652 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010584:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801058c:	f003 0304 	and.w	r3, r3, #4
 8010590:	2b00      	cmp	r3, #0
 8010592:	d05e      	beq.n	8010652 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	699b      	ldr	r3, [r3, #24]
 801059a:	441a      	add	r2, r3
 801059c:	2300      	movs	r3, #0
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	2300      	movs	r3, #0
 80105a2:	2100      	movs	r1, #0
 80105a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105a6:	f7ff fe05 	bl	80101b4 <xTimerGenericCommand>
 80105aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d14f      	bne.n	8010652 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	61bb      	str	r3, [r7, #24]
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105ce:	f023 0301 	bic.w	r3, r3, #1
 80105d2:	b2da      	uxtb	r2, r3
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80105da:	e03a      	b.n	8010652 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105e2:	f043 0301 	orr.w	r3, r3, #1
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	617b      	str	r3, [r7, #20]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	699a      	ldr	r2, [r3, #24]
 8010616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010618:	18d1      	adds	r1, r2, r3
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801061e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010620:	f7ff ff06 	bl	8010430 <prvInsertTimerInActiveList>
					break;
 8010624:	e015      	b.n	8010652 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801062c:	f003 0302 	and.w	r3, r3, #2
 8010630:	2b00      	cmp	r3, #0
 8010632:	d103      	bne.n	801063c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010636:	f7fd fc85 	bl	800df44 <vPortFree>
 801063a:	e00a      	b.n	8010652 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010642:	f023 0301 	bic.w	r3, r3, #1
 8010646:	b2da      	uxtb	r2, r3
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801064e:	e000      	b.n	8010652 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010650:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010652:	4b08      	ldr	r3, [pc, #32]	; (8010674 <prvProcessReceivedCommands+0x1c0>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	1d39      	adds	r1, r7, #4
 8010658:	2200      	movs	r2, #0
 801065a:	4618      	mov	r0, r3
 801065c:	f7fe fb6c 	bl	800ed38 <xQueueReceive>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	f47f af2a 	bne.w	80104bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	3730      	adds	r7, #48	; 0x30
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	24005454 	.word	0x24005454

08010678 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b088      	sub	sp, #32
 801067c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801067e:	e048      	b.n	8010712 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010680:	4b2d      	ldr	r3, [pc, #180]	; (8010738 <prvSwitchTimerLists+0xc0>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801068a:	4b2b      	ldr	r3, [pc, #172]	; (8010738 <prvSwitchTimerLists+0xc0>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	3304      	adds	r3, #4
 8010698:	4618      	mov	r0, r3
 801069a:	f7fd fdfb 	bl	800e294 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6a1b      	ldr	r3, [r3, #32]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106ac:	f003 0304 	and.w	r3, r3, #4
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d02e      	beq.n	8010712 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	4413      	add	r3, r2
 80106bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d90e      	bls.n	80106e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	68fa      	ldr	r2, [r7, #12]
 80106d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106d2:	4b19      	ldr	r3, [pc, #100]	; (8010738 <prvSwitchTimerLists+0xc0>)
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	3304      	adds	r3, #4
 80106da:	4619      	mov	r1, r3
 80106dc:	4610      	mov	r0, r2
 80106de:	f7fd fda0 	bl	800e222 <vListInsert>
 80106e2:	e016      	b.n	8010712 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80106e4:	2300      	movs	r3, #0
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	2300      	movs	r3, #0
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	2100      	movs	r1, #0
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7ff fd60 	bl	80101b4 <xTimerGenericCommand>
 80106f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d10a      	bne.n	8010712 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80106fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	603b      	str	r3, [r7, #0]
}
 801070e:	bf00      	nop
 8010710:	e7fe      	b.n	8010710 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010712:	4b09      	ldr	r3, [pc, #36]	; (8010738 <prvSwitchTimerLists+0xc0>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1b1      	bne.n	8010680 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801071c:	4b06      	ldr	r3, [pc, #24]	; (8010738 <prvSwitchTimerLists+0xc0>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010722:	4b06      	ldr	r3, [pc, #24]	; (801073c <prvSwitchTimerLists+0xc4>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a04      	ldr	r2, [pc, #16]	; (8010738 <prvSwitchTimerLists+0xc0>)
 8010728:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801072a:	4a04      	ldr	r2, [pc, #16]	; (801073c <prvSwitchTimerLists+0xc4>)
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	6013      	str	r3, [r2, #0]
}
 8010730:	bf00      	nop
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	2400544c 	.word	0x2400544c
 801073c:	24005450 	.word	0x24005450

08010740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010746:	f7fd fefd 	bl	800e544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801074a:	4b15      	ldr	r3, [pc, #84]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d120      	bne.n	8010794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010752:	4814      	ldr	r0, [pc, #80]	; (80107a4 <prvCheckForValidListAndQueue+0x64>)
 8010754:	f7fd fd14 	bl	800e180 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010758:	4813      	ldr	r0, [pc, #76]	; (80107a8 <prvCheckForValidListAndQueue+0x68>)
 801075a:	f7fd fd11 	bl	800e180 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801075e:	4b13      	ldr	r3, [pc, #76]	; (80107ac <prvCheckForValidListAndQueue+0x6c>)
 8010760:	4a10      	ldr	r2, [pc, #64]	; (80107a4 <prvCheckForValidListAndQueue+0x64>)
 8010762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010764:	4b12      	ldr	r3, [pc, #72]	; (80107b0 <prvCheckForValidListAndQueue+0x70>)
 8010766:	4a10      	ldr	r2, [pc, #64]	; (80107a8 <prvCheckForValidListAndQueue+0x68>)
 8010768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801076a:	2300      	movs	r3, #0
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	4b11      	ldr	r3, [pc, #68]	; (80107b4 <prvCheckForValidListAndQueue+0x74>)
 8010770:	4a11      	ldr	r2, [pc, #68]	; (80107b8 <prvCheckForValidListAndQueue+0x78>)
 8010772:	2110      	movs	r1, #16
 8010774:	200a      	movs	r0, #10
 8010776:	f7fe f86f 	bl	800e858 <xQueueGenericCreateStatic>
 801077a:	4603      	mov	r3, r0
 801077c:	4a08      	ldr	r2, [pc, #32]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 801077e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010780:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d005      	beq.n	8010794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010788:	4b05      	ldr	r3, [pc, #20]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	490b      	ldr	r1, [pc, #44]	; (80107bc <prvCheckForValidListAndQueue+0x7c>)
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fd42 	bl	800f218 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010794:	f7fd ff06 	bl	800e5a4 <vPortExitCritical>
}
 8010798:	bf00      	nop
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	24005454 	.word	0x24005454
 80107a4:	24005424 	.word	0x24005424
 80107a8:	24005438 	.word	0x24005438
 80107ac:	2400544c 	.word	0x2400544c
 80107b0:	24005450 	.word	0x24005450
 80107b4:	24005500 	.word	0x24005500
 80107b8:	24005460 	.word	0x24005460
 80107bc:	08014ecc 	.word	0x08014ecc

080107c0 <malloc>:
 80107c0:	4b02      	ldr	r3, [pc, #8]	; (80107cc <malloc+0xc>)
 80107c2:	4601      	mov	r1, r0
 80107c4:	6818      	ldr	r0, [r3, #0]
 80107c6:	f000 b823 	b.w	8010810 <_malloc_r>
 80107ca:	bf00      	nop
 80107cc:	2400006c 	.word	0x2400006c

080107d0 <sbrk_aligned>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	4e0e      	ldr	r6, [pc, #56]	; (801080c <sbrk_aligned+0x3c>)
 80107d4:	460c      	mov	r4, r1
 80107d6:	6831      	ldr	r1, [r6, #0]
 80107d8:	4605      	mov	r5, r0
 80107da:	b911      	cbnz	r1, 80107e2 <sbrk_aligned+0x12>
 80107dc:	f001 f8c0 	bl	8011960 <_sbrk_r>
 80107e0:	6030      	str	r0, [r6, #0]
 80107e2:	4621      	mov	r1, r4
 80107e4:	4628      	mov	r0, r5
 80107e6:	f001 f8bb 	bl	8011960 <_sbrk_r>
 80107ea:	1c43      	adds	r3, r0, #1
 80107ec:	d00a      	beq.n	8010804 <sbrk_aligned+0x34>
 80107ee:	1cc4      	adds	r4, r0, #3
 80107f0:	f024 0403 	bic.w	r4, r4, #3
 80107f4:	42a0      	cmp	r0, r4
 80107f6:	d007      	beq.n	8010808 <sbrk_aligned+0x38>
 80107f8:	1a21      	subs	r1, r4, r0
 80107fa:	4628      	mov	r0, r5
 80107fc:	f001 f8b0 	bl	8011960 <_sbrk_r>
 8010800:	3001      	adds	r0, #1
 8010802:	d101      	bne.n	8010808 <sbrk_aligned+0x38>
 8010804:	f04f 34ff 	mov.w	r4, #4294967295
 8010808:	4620      	mov	r0, r4
 801080a:	bd70      	pop	{r4, r5, r6, pc}
 801080c:	24005554 	.word	0x24005554

08010810 <_malloc_r>:
 8010810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010814:	1ccd      	adds	r5, r1, #3
 8010816:	f025 0503 	bic.w	r5, r5, #3
 801081a:	3508      	adds	r5, #8
 801081c:	2d0c      	cmp	r5, #12
 801081e:	bf38      	it	cc
 8010820:	250c      	movcc	r5, #12
 8010822:	2d00      	cmp	r5, #0
 8010824:	4607      	mov	r7, r0
 8010826:	db01      	blt.n	801082c <_malloc_r+0x1c>
 8010828:	42a9      	cmp	r1, r5
 801082a:	d905      	bls.n	8010838 <_malloc_r+0x28>
 801082c:	230c      	movs	r3, #12
 801082e:	603b      	str	r3, [r7, #0]
 8010830:	2600      	movs	r6, #0
 8010832:	4630      	mov	r0, r6
 8010834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010838:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801090c <_malloc_r+0xfc>
 801083c:	f000 f868 	bl	8010910 <__malloc_lock>
 8010840:	f8d8 3000 	ldr.w	r3, [r8]
 8010844:	461c      	mov	r4, r3
 8010846:	bb5c      	cbnz	r4, 80108a0 <_malloc_r+0x90>
 8010848:	4629      	mov	r1, r5
 801084a:	4638      	mov	r0, r7
 801084c:	f7ff ffc0 	bl	80107d0 <sbrk_aligned>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	4604      	mov	r4, r0
 8010854:	d155      	bne.n	8010902 <_malloc_r+0xf2>
 8010856:	f8d8 4000 	ldr.w	r4, [r8]
 801085a:	4626      	mov	r6, r4
 801085c:	2e00      	cmp	r6, #0
 801085e:	d145      	bne.n	80108ec <_malloc_r+0xdc>
 8010860:	2c00      	cmp	r4, #0
 8010862:	d048      	beq.n	80108f6 <_malloc_r+0xe6>
 8010864:	6823      	ldr	r3, [r4, #0]
 8010866:	4631      	mov	r1, r6
 8010868:	4638      	mov	r0, r7
 801086a:	eb04 0903 	add.w	r9, r4, r3
 801086e:	f001 f877 	bl	8011960 <_sbrk_r>
 8010872:	4581      	cmp	r9, r0
 8010874:	d13f      	bne.n	80108f6 <_malloc_r+0xe6>
 8010876:	6821      	ldr	r1, [r4, #0]
 8010878:	1a6d      	subs	r5, r5, r1
 801087a:	4629      	mov	r1, r5
 801087c:	4638      	mov	r0, r7
 801087e:	f7ff ffa7 	bl	80107d0 <sbrk_aligned>
 8010882:	3001      	adds	r0, #1
 8010884:	d037      	beq.n	80108f6 <_malloc_r+0xe6>
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	442b      	add	r3, r5
 801088a:	6023      	str	r3, [r4, #0]
 801088c:	f8d8 3000 	ldr.w	r3, [r8]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d038      	beq.n	8010906 <_malloc_r+0xf6>
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	42a2      	cmp	r2, r4
 8010898:	d12b      	bne.n	80108f2 <_malloc_r+0xe2>
 801089a:	2200      	movs	r2, #0
 801089c:	605a      	str	r2, [r3, #4]
 801089e:	e00f      	b.n	80108c0 <_malloc_r+0xb0>
 80108a0:	6822      	ldr	r2, [r4, #0]
 80108a2:	1b52      	subs	r2, r2, r5
 80108a4:	d41f      	bmi.n	80108e6 <_malloc_r+0xd6>
 80108a6:	2a0b      	cmp	r2, #11
 80108a8:	d917      	bls.n	80108da <_malloc_r+0xca>
 80108aa:	1961      	adds	r1, r4, r5
 80108ac:	42a3      	cmp	r3, r4
 80108ae:	6025      	str	r5, [r4, #0]
 80108b0:	bf18      	it	ne
 80108b2:	6059      	strne	r1, [r3, #4]
 80108b4:	6863      	ldr	r3, [r4, #4]
 80108b6:	bf08      	it	eq
 80108b8:	f8c8 1000 	streq.w	r1, [r8]
 80108bc:	5162      	str	r2, [r4, r5]
 80108be:	604b      	str	r3, [r1, #4]
 80108c0:	4638      	mov	r0, r7
 80108c2:	f104 060b 	add.w	r6, r4, #11
 80108c6:	f000 f829 	bl	801091c <__malloc_unlock>
 80108ca:	f026 0607 	bic.w	r6, r6, #7
 80108ce:	1d23      	adds	r3, r4, #4
 80108d0:	1af2      	subs	r2, r6, r3
 80108d2:	d0ae      	beq.n	8010832 <_malloc_r+0x22>
 80108d4:	1b9b      	subs	r3, r3, r6
 80108d6:	50a3      	str	r3, [r4, r2]
 80108d8:	e7ab      	b.n	8010832 <_malloc_r+0x22>
 80108da:	42a3      	cmp	r3, r4
 80108dc:	6862      	ldr	r2, [r4, #4]
 80108de:	d1dd      	bne.n	801089c <_malloc_r+0x8c>
 80108e0:	f8c8 2000 	str.w	r2, [r8]
 80108e4:	e7ec      	b.n	80108c0 <_malloc_r+0xb0>
 80108e6:	4623      	mov	r3, r4
 80108e8:	6864      	ldr	r4, [r4, #4]
 80108ea:	e7ac      	b.n	8010846 <_malloc_r+0x36>
 80108ec:	4634      	mov	r4, r6
 80108ee:	6876      	ldr	r6, [r6, #4]
 80108f0:	e7b4      	b.n	801085c <_malloc_r+0x4c>
 80108f2:	4613      	mov	r3, r2
 80108f4:	e7cc      	b.n	8010890 <_malloc_r+0x80>
 80108f6:	230c      	movs	r3, #12
 80108f8:	603b      	str	r3, [r7, #0]
 80108fa:	4638      	mov	r0, r7
 80108fc:	f000 f80e 	bl	801091c <__malloc_unlock>
 8010900:	e797      	b.n	8010832 <_malloc_r+0x22>
 8010902:	6025      	str	r5, [r4, #0]
 8010904:	e7dc      	b.n	80108c0 <_malloc_r+0xb0>
 8010906:	605b      	str	r3, [r3, #4]
 8010908:	deff      	udf	#255	; 0xff
 801090a:	bf00      	nop
 801090c:	24005550 	.word	0x24005550

08010910 <__malloc_lock>:
 8010910:	4801      	ldr	r0, [pc, #4]	; (8010918 <__malloc_lock+0x8>)
 8010912:	f001 b871 	b.w	80119f8 <__retarget_lock_acquire_recursive>
 8010916:	bf00      	nop
 8010918:	24005698 	.word	0x24005698

0801091c <__malloc_unlock>:
 801091c:	4801      	ldr	r0, [pc, #4]	; (8010924 <__malloc_unlock+0x8>)
 801091e:	f001 b86c 	b.w	80119fa <__retarget_lock_release_recursive>
 8010922:	bf00      	nop
 8010924:	24005698 	.word	0x24005698

08010928 <__cvt>:
 8010928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801092a:	ed2d 8b02 	vpush	{d8}
 801092e:	eeb0 8b40 	vmov.f64	d8, d0
 8010932:	b085      	sub	sp, #20
 8010934:	4617      	mov	r7, r2
 8010936:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010938:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801093a:	ee18 2a90 	vmov	r2, s17
 801093e:	f025 0520 	bic.w	r5, r5, #32
 8010942:	2a00      	cmp	r2, #0
 8010944:	bfb6      	itet	lt
 8010946:	222d      	movlt	r2, #45	; 0x2d
 8010948:	2200      	movge	r2, #0
 801094a:	eeb1 8b40 	vneglt.f64	d8, d0
 801094e:	2d46      	cmp	r5, #70	; 0x46
 8010950:	460c      	mov	r4, r1
 8010952:	701a      	strb	r2, [r3, #0]
 8010954:	d004      	beq.n	8010960 <__cvt+0x38>
 8010956:	2d45      	cmp	r5, #69	; 0x45
 8010958:	d100      	bne.n	801095c <__cvt+0x34>
 801095a:	3401      	adds	r4, #1
 801095c:	2102      	movs	r1, #2
 801095e:	e000      	b.n	8010962 <__cvt+0x3a>
 8010960:	2103      	movs	r1, #3
 8010962:	ab03      	add	r3, sp, #12
 8010964:	9301      	str	r3, [sp, #4]
 8010966:	ab02      	add	r3, sp, #8
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	4622      	mov	r2, r4
 801096c:	4633      	mov	r3, r6
 801096e:	eeb0 0b48 	vmov.f64	d0, d8
 8010972:	f001 f8e1 	bl	8011b38 <_dtoa_r>
 8010976:	2d47      	cmp	r5, #71	; 0x47
 8010978:	d101      	bne.n	801097e <__cvt+0x56>
 801097a:	07fb      	lsls	r3, r7, #31
 801097c:	d51a      	bpl.n	80109b4 <__cvt+0x8c>
 801097e:	2d46      	cmp	r5, #70	; 0x46
 8010980:	eb00 0204 	add.w	r2, r0, r4
 8010984:	d10c      	bne.n	80109a0 <__cvt+0x78>
 8010986:	7803      	ldrb	r3, [r0, #0]
 8010988:	2b30      	cmp	r3, #48	; 0x30
 801098a:	d107      	bne.n	801099c <__cvt+0x74>
 801098c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010994:	bf1c      	itt	ne
 8010996:	f1c4 0401 	rsbne	r4, r4, #1
 801099a:	6034      	strne	r4, [r6, #0]
 801099c:	6833      	ldr	r3, [r6, #0]
 801099e:	441a      	add	r2, r3
 80109a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80109a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a8:	bf08      	it	eq
 80109aa:	9203      	streq	r2, [sp, #12]
 80109ac:	2130      	movs	r1, #48	; 0x30
 80109ae:	9b03      	ldr	r3, [sp, #12]
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d307      	bcc.n	80109c4 <__cvt+0x9c>
 80109b4:	9b03      	ldr	r3, [sp, #12]
 80109b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109b8:	1a1b      	subs	r3, r3, r0
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	b005      	add	sp, #20
 80109be:	ecbd 8b02 	vpop	{d8}
 80109c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109c4:	1c5c      	adds	r4, r3, #1
 80109c6:	9403      	str	r4, [sp, #12]
 80109c8:	7019      	strb	r1, [r3, #0]
 80109ca:	e7f0      	b.n	80109ae <__cvt+0x86>

080109cc <__exponent>:
 80109cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109ce:	4603      	mov	r3, r0
 80109d0:	2900      	cmp	r1, #0
 80109d2:	bfb8      	it	lt
 80109d4:	4249      	neglt	r1, r1
 80109d6:	f803 2b02 	strb.w	r2, [r3], #2
 80109da:	bfb4      	ite	lt
 80109dc:	222d      	movlt	r2, #45	; 0x2d
 80109de:	222b      	movge	r2, #43	; 0x2b
 80109e0:	2909      	cmp	r1, #9
 80109e2:	7042      	strb	r2, [r0, #1]
 80109e4:	dd2a      	ble.n	8010a3c <__exponent+0x70>
 80109e6:	f10d 0207 	add.w	r2, sp, #7
 80109ea:	4617      	mov	r7, r2
 80109ec:	260a      	movs	r6, #10
 80109ee:	4694      	mov	ip, r2
 80109f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80109f4:	fb06 1415 	mls	r4, r6, r5, r1
 80109f8:	3430      	adds	r4, #48	; 0x30
 80109fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80109fe:	460c      	mov	r4, r1
 8010a00:	2c63      	cmp	r4, #99	; 0x63
 8010a02:	f102 32ff 	add.w	r2, r2, #4294967295
 8010a06:	4629      	mov	r1, r5
 8010a08:	dcf1      	bgt.n	80109ee <__exponent+0x22>
 8010a0a:	3130      	adds	r1, #48	; 0x30
 8010a0c:	f1ac 0402 	sub.w	r4, ip, #2
 8010a10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010a14:	1c41      	adds	r1, r0, #1
 8010a16:	4622      	mov	r2, r4
 8010a18:	42ba      	cmp	r2, r7
 8010a1a:	d30a      	bcc.n	8010a32 <__exponent+0x66>
 8010a1c:	f10d 0209 	add.w	r2, sp, #9
 8010a20:	eba2 020c 	sub.w	r2, r2, ip
 8010a24:	42bc      	cmp	r4, r7
 8010a26:	bf88      	it	hi
 8010a28:	2200      	movhi	r2, #0
 8010a2a:	4413      	add	r3, r2
 8010a2c:	1a18      	subs	r0, r3, r0
 8010a2e:	b003      	add	sp, #12
 8010a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010a36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010a3a:	e7ed      	b.n	8010a18 <__exponent+0x4c>
 8010a3c:	2330      	movs	r3, #48	; 0x30
 8010a3e:	3130      	adds	r1, #48	; 0x30
 8010a40:	7083      	strb	r3, [r0, #2]
 8010a42:	70c1      	strb	r1, [r0, #3]
 8010a44:	1d03      	adds	r3, r0, #4
 8010a46:	e7f1      	b.n	8010a2c <__exponent+0x60>

08010a48 <_printf_float>:
 8010a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	b08b      	sub	sp, #44	; 0x2c
 8010a4e:	460c      	mov	r4, r1
 8010a50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010a54:	4616      	mov	r6, r2
 8010a56:	461f      	mov	r7, r3
 8010a58:	4605      	mov	r5, r0
 8010a5a:	f000 fef3 	bl	8011844 <_localeconv_r>
 8010a5e:	f8d0 b000 	ldr.w	fp, [r0]
 8010a62:	4658      	mov	r0, fp
 8010a64:	f7ef fc8c 	bl	8000380 <strlen>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	9308      	str	r3, [sp, #32]
 8010a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8010a70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010a74:	6822      	ldr	r2, [r4, #0]
 8010a76:	3307      	adds	r3, #7
 8010a78:	f023 0307 	bic.w	r3, r3, #7
 8010a7c:	f103 0108 	add.w	r1, r3, #8
 8010a80:	f8c8 1000 	str.w	r1, [r8]
 8010a84:	ed93 0b00 	vldr	d0, [r3]
 8010a88:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010ce8 <_printf_float+0x2a0>
 8010a8c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010a90:	eeb4 7b46 	vcmp.f64	d7, d6
 8010a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a98:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8010a9c:	4682      	mov	sl, r0
 8010a9e:	dd24      	ble.n	8010aea <_printf_float+0xa2>
 8010aa0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa8:	d502      	bpl.n	8010ab0 <_printf_float+0x68>
 8010aaa:	232d      	movs	r3, #45	; 0x2d
 8010aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ab0:	498f      	ldr	r1, [pc, #572]	; (8010cf0 <_printf_float+0x2a8>)
 8010ab2:	4b90      	ldr	r3, [pc, #576]	; (8010cf4 <_printf_float+0x2ac>)
 8010ab4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010ab8:	bf94      	ite	ls
 8010aba:	4688      	movls	r8, r1
 8010abc:	4698      	movhi	r8, r3
 8010abe:	2303      	movs	r3, #3
 8010ac0:	6123      	str	r3, [r4, #16]
 8010ac2:	f022 0204 	bic.w	r2, r2, #4
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	6022      	str	r2, [r4, #0]
 8010aca:	9304      	str	r3, [sp, #16]
 8010acc:	9700      	str	r7, [sp, #0]
 8010ace:	4633      	mov	r3, r6
 8010ad0:	aa09      	add	r2, sp, #36	; 0x24
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	f000 f9d1 	bl	8010e7c <_printf_common>
 8010ada:	3001      	adds	r0, #1
 8010adc:	f040 808a 	bne.w	8010bf4 <_printf_float+0x1ac>
 8010ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae4:	b00b      	add	sp, #44	; 0x2c
 8010ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aea:	eeb4 0b40 	vcmp.f64	d0, d0
 8010aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af2:	d709      	bvc.n	8010b08 <_printf_float+0xc0>
 8010af4:	ee10 3a90 	vmov	r3, s1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	bfbc      	itt	lt
 8010afc:	232d      	movlt	r3, #45	; 0x2d
 8010afe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010b02:	497d      	ldr	r1, [pc, #500]	; (8010cf8 <_printf_float+0x2b0>)
 8010b04:	4b7d      	ldr	r3, [pc, #500]	; (8010cfc <_printf_float+0x2b4>)
 8010b06:	e7d5      	b.n	8010ab4 <_printf_float+0x6c>
 8010b08:	6863      	ldr	r3, [r4, #4]
 8010b0a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010b0e:	9104      	str	r1, [sp, #16]
 8010b10:	1c59      	adds	r1, r3, #1
 8010b12:	d13c      	bne.n	8010b8e <_printf_float+0x146>
 8010b14:	2306      	movs	r3, #6
 8010b16:	6063      	str	r3, [r4, #4]
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9303      	str	r3, [sp, #12]
 8010b1c:	ab08      	add	r3, sp, #32
 8010b1e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010b22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010b26:	ab07      	add	r3, sp, #28
 8010b28:	6861      	ldr	r1, [r4, #4]
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	6022      	str	r2, [r4, #0]
 8010b2e:	f10d 031b 	add.w	r3, sp, #27
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7ff fef8 	bl	8010928 <__cvt>
 8010b38:	9b04      	ldr	r3, [sp, #16]
 8010b3a:	9907      	ldr	r1, [sp, #28]
 8010b3c:	2b47      	cmp	r3, #71	; 0x47
 8010b3e:	4680      	mov	r8, r0
 8010b40:	d108      	bne.n	8010b54 <_printf_float+0x10c>
 8010b42:	1cc8      	adds	r0, r1, #3
 8010b44:	db02      	blt.n	8010b4c <_printf_float+0x104>
 8010b46:	6863      	ldr	r3, [r4, #4]
 8010b48:	4299      	cmp	r1, r3
 8010b4a:	dd41      	ble.n	8010bd0 <_printf_float+0x188>
 8010b4c:	f1a9 0902 	sub.w	r9, r9, #2
 8010b50:	fa5f f989 	uxtb.w	r9, r9
 8010b54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010b58:	d820      	bhi.n	8010b9c <_printf_float+0x154>
 8010b5a:	3901      	subs	r1, #1
 8010b5c:	464a      	mov	r2, r9
 8010b5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b62:	9107      	str	r1, [sp, #28]
 8010b64:	f7ff ff32 	bl	80109cc <__exponent>
 8010b68:	9a08      	ldr	r2, [sp, #32]
 8010b6a:	9004      	str	r0, [sp, #16]
 8010b6c:	1813      	adds	r3, r2, r0
 8010b6e:	2a01      	cmp	r2, #1
 8010b70:	6123      	str	r3, [r4, #16]
 8010b72:	dc02      	bgt.n	8010b7a <_printf_float+0x132>
 8010b74:	6822      	ldr	r2, [r4, #0]
 8010b76:	07d2      	lsls	r2, r2, #31
 8010b78:	d501      	bpl.n	8010b7e <_printf_float+0x136>
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	6123      	str	r3, [r4, #16]
 8010b7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d0a2      	beq.n	8010acc <_printf_float+0x84>
 8010b86:	232d      	movs	r3, #45	; 0x2d
 8010b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b8c:	e79e      	b.n	8010acc <_printf_float+0x84>
 8010b8e:	9904      	ldr	r1, [sp, #16]
 8010b90:	2947      	cmp	r1, #71	; 0x47
 8010b92:	d1c1      	bne.n	8010b18 <_printf_float+0xd0>
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1bf      	bne.n	8010b18 <_printf_float+0xd0>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e7bc      	b.n	8010b16 <_printf_float+0xce>
 8010b9c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010ba0:	d118      	bne.n	8010bd4 <_printf_float+0x18c>
 8010ba2:	2900      	cmp	r1, #0
 8010ba4:	6863      	ldr	r3, [r4, #4]
 8010ba6:	dd0b      	ble.n	8010bc0 <_printf_float+0x178>
 8010ba8:	6121      	str	r1, [r4, #16]
 8010baa:	b913      	cbnz	r3, 8010bb2 <_printf_float+0x16a>
 8010bac:	6822      	ldr	r2, [r4, #0]
 8010bae:	07d0      	lsls	r0, r2, #31
 8010bb0:	d502      	bpl.n	8010bb8 <_printf_float+0x170>
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	440b      	add	r3, r1
 8010bb6:	6123      	str	r3, [r4, #16]
 8010bb8:	2300      	movs	r3, #0
 8010bba:	65a1      	str	r1, [r4, #88]	; 0x58
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	e7de      	b.n	8010b7e <_printf_float+0x136>
 8010bc0:	b913      	cbnz	r3, 8010bc8 <_printf_float+0x180>
 8010bc2:	6822      	ldr	r2, [r4, #0]
 8010bc4:	07d2      	lsls	r2, r2, #31
 8010bc6:	d501      	bpl.n	8010bcc <_printf_float+0x184>
 8010bc8:	3302      	adds	r3, #2
 8010bca:	e7f4      	b.n	8010bb6 <_printf_float+0x16e>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	e7f2      	b.n	8010bb6 <_printf_float+0x16e>
 8010bd0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010bd4:	9b08      	ldr	r3, [sp, #32]
 8010bd6:	4299      	cmp	r1, r3
 8010bd8:	db05      	blt.n	8010be6 <_printf_float+0x19e>
 8010bda:	6823      	ldr	r3, [r4, #0]
 8010bdc:	6121      	str	r1, [r4, #16]
 8010bde:	07d8      	lsls	r0, r3, #31
 8010be0:	d5ea      	bpl.n	8010bb8 <_printf_float+0x170>
 8010be2:	1c4b      	adds	r3, r1, #1
 8010be4:	e7e7      	b.n	8010bb6 <_printf_float+0x16e>
 8010be6:	2900      	cmp	r1, #0
 8010be8:	bfd4      	ite	le
 8010bea:	f1c1 0202 	rsble	r2, r1, #2
 8010bee:	2201      	movgt	r2, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	e7e0      	b.n	8010bb6 <_printf_float+0x16e>
 8010bf4:	6823      	ldr	r3, [r4, #0]
 8010bf6:	055a      	lsls	r2, r3, #21
 8010bf8:	d407      	bmi.n	8010c0a <_printf_float+0x1c2>
 8010bfa:	6923      	ldr	r3, [r4, #16]
 8010bfc:	4642      	mov	r2, r8
 8010bfe:	4631      	mov	r1, r6
 8010c00:	4628      	mov	r0, r5
 8010c02:	47b8      	blx	r7
 8010c04:	3001      	adds	r0, #1
 8010c06:	d12a      	bne.n	8010c5e <_printf_float+0x216>
 8010c08:	e76a      	b.n	8010ae0 <_printf_float+0x98>
 8010c0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010c0e:	f240 80e0 	bls.w	8010dd2 <_printf_float+0x38a>
 8010c12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010c16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	d133      	bne.n	8010c88 <_printf_float+0x240>
 8010c20:	4a37      	ldr	r2, [pc, #220]	; (8010d00 <_printf_float+0x2b8>)
 8010c22:	2301      	movs	r3, #1
 8010c24:	4631      	mov	r1, r6
 8010c26:	4628      	mov	r0, r5
 8010c28:	47b8      	blx	r7
 8010c2a:	3001      	adds	r0, #1
 8010c2c:	f43f af58 	beq.w	8010ae0 <_printf_float+0x98>
 8010c30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	db02      	blt.n	8010c3e <_printf_float+0x1f6>
 8010c38:	6823      	ldr	r3, [r4, #0]
 8010c3a:	07d8      	lsls	r0, r3, #31
 8010c3c:	d50f      	bpl.n	8010c5e <_printf_float+0x216>
 8010c3e:	4653      	mov	r3, sl
 8010c40:	465a      	mov	r2, fp
 8010c42:	4631      	mov	r1, r6
 8010c44:	4628      	mov	r0, r5
 8010c46:	47b8      	blx	r7
 8010c48:	3001      	adds	r0, #1
 8010c4a:	f43f af49 	beq.w	8010ae0 <_printf_float+0x98>
 8010c4e:	f04f 0800 	mov.w	r8, #0
 8010c52:	f104 091a 	add.w	r9, r4, #26
 8010c56:	9b08      	ldr	r3, [sp, #32]
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	4543      	cmp	r3, r8
 8010c5c:	dc09      	bgt.n	8010c72 <_printf_float+0x22a>
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	079b      	lsls	r3, r3, #30
 8010c62:	f100 8106 	bmi.w	8010e72 <_printf_float+0x42a>
 8010c66:	68e0      	ldr	r0, [r4, #12]
 8010c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c6a:	4298      	cmp	r0, r3
 8010c6c:	bfb8      	it	lt
 8010c6e:	4618      	movlt	r0, r3
 8010c70:	e738      	b.n	8010ae4 <_printf_float+0x9c>
 8010c72:	2301      	movs	r3, #1
 8010c74:	464a      	mov	r2, r9
 8010c76:	4631      	mov	r1, r6
 8010c78:	4628      	mov	r0, r5
 8010c7a:	47b8      	blx	r7
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	f43f af2f 	beq.w	8010ae0 <_printf_float+0x98>
 8010c82:	f108 0801 	add.w	r8, r8, #1
 8010c86:	e7e6      	b.n	8010c56 <_printf_float+0x20e>
 8010c88:	9b07      	ldr	r3, [sp, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	dc3a      	bgt.n	8010d04 <_printf_float+0x2bc>
 8010c8e:	4a1c      	ldr	r2, [pc, #112]	; (8010d00 <_printf_float+0x2b8>)
 8010c90:	2301      	movs	r3, #1
 8010c92:	4631      	mov	r1, r6
 8010c94:	4628      	mov	r0, r5
 8010c96:	47b8      	blx	r7
 8010c98:	3001      	adds	r0, #1
 8010c9a:	f43f af21 	beq.w	8010ae0 <_printf_float+0x98>
 8010c9e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	d102      	bne.n	8010cac <_printf_float+0x264>
 8010ca6:	6823      	ldr	r3, [r4, #0]
 8010ca8:	07d9      	lsls	r1, r3, #31
 8010caa:	d5d8      	bpl.n	8010c5e <_printf_float+0x216>
 8010cac:	4653      	mov	r3, sl
 8010cae:	465a      	mov	r2, fp
 8010cb0:	4631      	mov	r1, r6
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	47b8      	blx	r7
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	f43f af12 	beq.w	8010ae0 <_printf_float+0x98>
 8010cbc:	f04f 0900 	mov.w	r9, #0
 8010cc0:	f104 0a1a 	add.w	sl, r4, #26
 8010cc4:	9b07      	ldr	r3, [sp, #28]
 8010cc6:	425b      	negs	r3, r3
 8010cc8:	454b      	cmp	r3, r9
 8010cca:	dc01      	bgt.n	8010cd0 <_printf_float+0x288>
 8010ccc:	9b08      	ldr	r3, [sp, #32]
 8010cce:	e795      	b.n	8010bfc <_printf_float+0x1b4>
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	4652      	mov	r2, sl
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	47b8      	blx	r7
 8010cda:	3001      	adds	r0, #1
 8010cdc:	f43f af00 	beq.w	8010ae0 <_printf_float+0x98>
 8010ce0:	f109 0901 	add.w	r9, r9, #1
 8010ce4:	e7ee      	b.n	8010cc4 <_printf_float+0x27c>
 8010ce6:	bf00      	nop
 8010ce8:	ffffffff 	.word	0xffffffff
 8010cec:	7fefffff 	.word	0x7fefffff
 8010cf0:	08014f98 	.word	0x08014f98
 8010cf4:	08014f9c 	.word	0x08014f9c
 8010cf8:	08014fa0 	.word	0x08014fa0
 8010cfc:	08014fa4 	.word	0x08014fa4
 8010d00:	08014fa8 	.word	0x08014fa8
 8010d04:	9a08      	ldr	r2, [sp, #32]
 8010d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	bfa8      	it	ge
 8010d0c:	461a      	movge	r2, r3
 8010d0e:	2a00      	cmp	r2, #0
 8010d10:	4691      	mov	r9, r2
 8010d12:	dc38      	bgt.n	8010d86 <_printf_float+0x33e>
 8010d14:	2300      	movs	r3, #0
 8010d16:	9305      	str	r3, [sp, #20]
 8010d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d1c:	f104 021a 	add.w	r2, r4, #26
 8010d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d22:	9905      	ldr	r1, [sp, #20]
 8010d24:	9304      	str	r3, [sp, #16]
 8010d26:	eba3 0309 	sub.w	r3, r3, r9
 8010d2a:	428b      	cmp	r3, r1
 8010d2c:	dc33      	bgt.n	8010d96 <_printf_float+0x34e>
 8010d2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	db3c      	blt.n	8010db0 <_printf_float+0x368>
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	07da      	lsls	r2, r3, #31
 8010d3a:	d439      	bmi.n	8010db0 <_printf_float+0x368>
 8010d3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010d40:	eba2 0903 	sub.w	r9, r2, r3
 8010d44:	9b04      	ldr	r3, [sp, #16]
 8010d46:	1ad2      	subs	r2, r2, r3
 8010d48:	4591      	cmp	r9, r2
 8010d4a:	bfa8      	it	ge
 8010d4c:	4691      	movge	r9, r2
 8010d4e:	f1b9 0f00 	cmp.w	r9, #0
 8010d52:	dc35      	bgt.n	8010dc0 <_printf_float+0x378>
 8010d54:	f04f 0800 	mov.w	r8, #0
 8010d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d5c:	f104 0a1a 	add.w	sl, r4, #26
 8010d60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d64:	1a9b      	subs	r3, r3, r2
 8010d66:	eba3 0309 	sub.w	r3, r3, r9
 8010d6a:	4543      	cmp	r3, r8
 8010d6c:	f77f af77 	ble.w	8010c5e <_printf_float+0x216>
 8010d70:	2301      	movs	r3, #1
 8010d72:	4652      	mov	r2, sl
 8010d74:	4631      	mov	r1, r6
 8010d76:	4628      	mov	r0, r5
 8010d78:	47b8      	blx	r7
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	f43f aeb0 	beq.w	8010ae0 <_printf_float+0x98>
 8010d80:	f108 0801 	add.w	r8, r8, #1
 8010d84:	e7ec      	b.n	8010d60 <_printf_float+0x318>
 8010d86:	4613      	mov	r3, r2
 8010d88:	4631      	mov	r1, r6
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	47b8      	blx	r7
 8010d90:	3001      	adds	r0, #1
 8010d92:	d1bf      	bne.n	8010d14 <_printf_float+0x2cc>
 8010d94:	e6a4      	b.n	8010ae0 <_printf_float+0x98>
 8010d96:	2301      	movs	r3, #1
 8010d98:	4631      	mov	r1, r6
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	9204      	str	r2, [sp, #16]
 8010d9e:	47b8      	blx	r7
 8010da0:	3001      	adds	r0, #1
 8010da2:	f43f ae9d 	beq.w	8010ae0 <_printf_float+0x98>
 8010da6:	9b05      	ldr	r3, [sp, #20]
 8010da8:	9a04      	ldr	r2, [sp, #16]
 8010daa:	3301      	adds	r3, #1
 8010dac:	9305      	str	r3, [sp, #20]
 8010dae:	e7b7      	b.n	8010d20 <_printf_float+0x2d8>
 8010db0:	4653      	mov	r3, sl
 8010db2:	465a      	mov	r2, fp
 8010db4:	4631      	mov	r1, r6
 8010db6:	4628      	mov	r0, r5
 8010db8:	47b8      	blx	r7
 8010dba:	3001      	adds	r0, #1
 8010dbc:	d1be      	bne.n	8010d3c <_printf_float+0x2f4>
 8010dbe:	e68f      	b.n	8010ae0 <_printf_float+0x98>
 8010dc0:	9a04      	ldr	r2, [sp, #16]
 8010dc2:	464b      	mov	r3, r9
 8010dc4:	4442      	add	r2, r8
 8010dc6:	4631      	mov	r1, r6
 8010dc8:	4628      	mov	r0, r5
 8010dca:	47b8      	blx	r7
 8010dcc:	3001      	adds	r0, #1
 8010dce:	d1c1      	bne.n	8010d54 <_printf_float+0x30c>
 8010dd0:	e686      	b.n	8010ae0 <_printf_float+0x98>
 8010dd2:	9a08      	ldr	r2, [sp, #32]
 8010dd4:	2a01      	cmp	r2, #1
 8010dd6:	dc01      	bgt.n	8010ddc <_printf_float+0x394>
 8010dd8:	07db      	lsls	r3, r3, #31
 8010dda:	d537      	bpl.n	8010e4c <_printf_float+0x404>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4642      	mov	r2, r8
 8010de0:	4631      	mov	r1, r6
 8010de2:	4628      	mov	r0, r5
 8010de4:	47b8      	blx	r7
 8010de6:	3001      	adds	r0, #1
 8010de8:	f43f ae7a 	beq.w	8010ae0 <_printf_float+0x98>
 8010dec:	4653      	mov	r3, sl
 8010dee:	465a      	mov	r2, fp
 8010df0:	4631      	mov	r1, r6
 8010df2:	4628      	mov	r0, r5
 8010df4:	47b8      	blx	r7
 8010df6:	3001      	adds	r0, #1
 8010df8:	f43f ae72 	beq.w	8010ae0 <_printf_float+0x98>
 8010dfc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010e00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e08:	9b08      	ldr	r3, [sp, #32]
 8010e0a:	d01a      	beq.n	8010e42 <_printf_float+0x3fa>
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	f108 0201 	add.w	r2, r8, #1
 8010e12:	4631      	mov	r1, r6
 8010e14:	4628      	mov	r0, r5
 8010e16:	47b8      	blx	r7
 8010e18:	3001      	adds	r0, #1
 8010e1a:	d10e      	bne.n	8010e3a <_printf_float+0x3f2>
 8010e1c:	e660      	b.n	8010ae0 <_printf_float+0x98>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	464a      	mov	r2, r9
 8010e22:	4631      	mov	r1, r6
 8010e24:	4628      	mov	r0, r5
 8010e26:	47b8      	blx	r7
 8010e28:	3001      	adds	r0, #1
 8010e2a:	f43f ae59 	beq.w	8010ae0 <_printf_float+0x98>
 8010e2e:	f108 0801 	add.w	r8, r8, #1
 8010e32:	9b08      	ldr	r3, [sp, #32]
 8010e34:	3b01      	subs	r3, #1
 8010e36:	4543      	cmp	r3, r8
 8010e38:	dcf1      	bgt.n	8010e1e <_printf_float+0x3d6>
 8010e3a:	9b04      	ldr	r3, [sp, #16]
 8010e3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e40:	e6dd      	b.n	8010bfe <_printf_float+0x1b6>
 8010e42:	f04f 0800 	mov.w	r8, #0
 8010e46:	f104 091a 	add.w	r9, r4, #26
 8010e4a:	e7f2      	b.n	8010e32 <_printf_float+0x3ea>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	4642      	mov	r2, r8
 8010e50:	e7df      	b.n	8010e12 <_printf_float+0x3ca>
 8010e52:	2301      	movs	r3, #1
 8010e54:	464a      	mov	r2, r9
 8010e56:	4631      	mov	r1, r6
 8010e58:	4628      	mov	r0, r5
 8010e5a:	47b8      	blx	r7
 8010e5c:	3001      	adds	r0, #1
 8010e5e:	f43f ae3f 	beq.w	8010ae0 <_printf_float+0x98>
 8010e62:	f108 0801 	add.w	r8, r8, #1
 8010e66:	68e3      	ldr	r3, [r4, #12]
 8010e68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e6a:	1a5b      	subs	r3, r3, r1
 8010e6c:	4543      	cmp	r3, r8
 8010e6e:	dcf0      	bgt.n	8010e52 <_printf_float+0x40a>
 8010e70:	e6f9      	b.n	8010c66 <_printf_float+0x21e>
 8010e72:	f04f 0800 	mov.w	r8, #0
 8010e76:	f104 0919 	add.w	r9, r4, #25
 8010e7a:	e7f4      	b.n	8010e66 <_printf_float+0x41e>

08010e7c <_printf_common>:
 8010e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e80:	4616      	mov	r6, r2
 8010e82:	4699      	mov	r9, r3
 8010e84:	688a      	ldr	r2, [r1, #8]
 8010e86:	690b      	ldr	r3, [r1, #16]
 8010e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	bfb8      	it	lt
 8010e90:	4613      	movlt	r3, r2
 8010e92:	6033      	str	r3, [r6, #0]
 8010e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e98:	4607      	mov	r7, r0
 8010e9a:	460c      	mov	r4, r1
 8010e9c:	b10a      	cbz	r2, 8010ea2 <_printf_common+0x26>
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	6033      	str	r3, [r6, #0]
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	0699      	lsls	r1, r3, #26
 8010ea6:	bf42      	ittt	mi
 8010ea8:	6833      	ldrmi	r3, [r6, #0]
 8010eaa:	3302      	addmi	r3, #2
 8010eac:	6033      	strmi	r3, [r6, #0]
 8010eae:	6825      	ldr	r5, [r4, #0]
 8010eb0:	f015 0506 	ands.w	r5, r5, #6
 8010eb4:	d106      	bne.n	8010ec4 <_printf_common+0x48>
 8010eb6:	f104 0a19 	add.w	sl, r4, #25
 8010eba:	68e3      	ldr	r3, [r4, #12]
 8010ebc:	6832      	ldr	r2, [r6, #0]
 8010ebe:	1a9b      	subs	r3, r3, r2
 8010ec0:	42ab      	cmp	r3, r5
 8010ec2:	dc26      	bgt.n	8010f12 <_printf_common+0x96>
 8010ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ec8:	1e13      	subs	r3, r2, #0
 8010eca:	6822      	ldr	r2, [r4, #0]
 8010ecc:	bf18      	it	ne
 8010ece:	2301      	movne	r3, #1
 8010ed0:	0692      	lsls	r2, r2, #26
 8010ed2:	d42b      	bmi.n	8010f2c <_printf_common+0xb0>
 8010ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ed8:	4649      	mov	r1, r9
 8010eda:	4638      	mov	r0, r7
 8010edc:	47c0      	blx	r8
 8010ede:	3001      	adds	r0, #1
 8010ee0:	d01e      	beq.n	8010f20 <_printf_common+0xa4>
 8010ee2:	6823      	ldr	r3, [r4, #0]
 8010ee4:	6922      	ldr	r2, [r4, #16]
 8010ee6:	f003 0306 	and.w	r3, r3, #6
 8010eea:	2b04      	cmp	r3, #4
 8010eec:	bf02      	ittt	eq
 8010eee:	68e5      	ldreq	r5, [r4, #12]
 8010ef0:	6833      	ldreq	r3, [r6, #0]
 8010ef2:	1aed      	subeq	r5, r5, r3
 8010ef4:	68a3      	ldr	r3, [r4, #8]
 8010ef6:	bf0c      	ite	eq
 8010ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010efc:	2500      	movne	r5, #0
 8010efe:	4293      	cmp	r3, r2
 8010f00:	bfc4      	itt	gt
 8010f02:	1a9b      	subgt	r3, r3, r2
 8010f04:	18ed      	addgt	r5, r5, r3
 8010f06:	2600      	movs	r6, #0
 8010f08:	341a      	adds	r4, #26
 8010f0a:	42b5      	cmp	r5, r6
 8010f0c:	d11a      	bne.n	8010f44 <_printf_common+0xc8>
 8010f0e:	2000      	movs	r0, #0
 8010f10:	e008      	b.n	8010f24 <_printf_common+0xa8>
 8010f12:	2301      	movs	r3, #1
 8010f14:	4652      	mov	r2, sl
 8010f16:	4649      	mov	r1, r9
 8010f18:	4638      	mov	r0, r7
 8010f1a:	47c0      	blx	r8
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	d103      	bne.n	8010f28 <_printf_common+0xac>
 8010f20:	f04f 30ff 	mov.w	r0, #4294967295
 8010f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f28:	3501      	adds	r5, #1
 8010f2a:	e7c6      	b.n	8010eba <_printf_common+0x3e>
 8010f2c:	18e1      	adds	r1, r4, r3
 8010f2e:	1c5a      	adds	r2, r3, #1
 8010f30:	2030      	movs	r0, #48	; 0x30
 8010f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f36:	4422      	add	r2, r4
 8010f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f40:	3302      	adds	r3, #2
 8010f42:	e7c7      	b.n	8010ed4 <_printf_common+0x58>
 8010f44:	2301      	movs	r3, #1
 8010f46:	4622      	mov	r2, r4
 8010f48:	4649      	mov	r1, r9
 8010f4a:	4638      	mov	r0, r7
 8010f4c:	47c0      	blx	r8
 8010f4e:	3001      	adds	r0, #1
 8010f50:	d0e6      	beq.n	8010f20 <_printf_common+0xa4>
 8010f52:	3601      	adds	r6, #1
 8010f54:	e7d9      	b.n	8010f0a <_printf_common+0x8e>
	...

08010f58 <_printf_i>:
 8010f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f5c:	7e0f      	ldrb	r7, [r1, #24]
 8010f5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f60:	2f78      	cmp	r7, #120	; 0x78
 8010f62:	4691      	mov	r9, r2
 8010f64:	4680      	mov	r8, r0
 8010f66:	460c      	mov	r4, r1
 8010f68:	469a      	mov	sl, r3
 8010f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f6e:	d807      	bhi.n	8010f80 <_printf_i+0x28>
 8010f70:	2f62      	cmp	r7, #98	; 0x62
 8010f72:	d80a      	bhi.n	8010f8a <_printf_i+0x32>
 8010f74:	2f00      	cmp	r7, #0
 8010f76:	f000 80d4 	beq.w	8011122 <_printf_i+0x1ca>
 8010f7a:	2f58      	cmp	r7, #88	; 0x58
 8010f7c:	f000 80c0 	beq.w	8011100 <_printf_i+0x1a8>
 8010f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f88:	e03a      	b.n	8011000 <_printf_i+0xa8>
 8010f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f8e:	2b15      	cmp	r3, #21
 8010f90:	d8f6      	bhi.n	8010f80 <_printf_i+0x28>
 8010f92:	a101      	add	r1, pc, #4	; (adr r1, 8010f98 <_printf_i+0x40>)
 8010f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f98:	08010ff1 	.word	0x08010ff1
 8010f9c:	08011005 	.word	0x08011005
 8010fa0:	08010f81 	.word	0x08010f81
 8010fa4:	08010f81 	.word	0x08010f81
 8010fa8:	08010f81 	.word	0x08010f81
 8010fac:	08010f81 	.word	0x08010f81
 8010fb0:	08011005 	.word	0x08011005
 8010fb4:	08010f81 	.word	0x08010f81
 8010fb8:	08010f81 	.word	0x08010f81
 8010fbc:	08010f81 	.word	0x08010f81
 8010fc0:	08010f81 	.word	0x08010f81
 8010fc4:	08011109 	.word	0x08011109
 8010fc8:	08011031 	.word	0x08011031
 8010fcc:	080110c3 	.word	0x080110c3
 8010fd0:	08010f81 	.word	0x08010f81
 8010fd4:	08010f81 	.word	0x08010f81
 8010fd8:	0801112b 	.word	0x0801112b
 8010fdc:	08010f81 	.word	0x08010f81
 8010fe0:	08011031 	.word	0x08011031
 8010fe4:	08010f81 	.word	0x08010f81
 8010fe8:	08010f81 	.word	0x08010f81
 8010fec:	080110cb 	.word	0x080110cb
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	1d1a      	adds	r2, r3, #4
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	602a      	str	r2, [r5, #0]
 8010ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011000:	2301      	movs	r3, #1
 8011002:	e09f      	b.n	8011144 <_printf_i+0x1ec>
 8011004:	6820      	ldr	r0, [r4, #0]
 8011006:	682b      	ldr	r3, [r5, #0]
 8011008:	0607      	lsls	r7, r0, #24
 801100a:	f103 0104 	add.w	r1, r3, #4
 801100e:	6029      	str	r1, [r5, #0]
 8011010:	d501      	bpl.n	8011016 <_printf_i+0xbe>
 8011012:	681e      	ldr	r6, [r3, #0]
 8011014:	e003      	b.n	801101e <_printf_i+0xc6>
 8011016:	0646      	lsls	r6, r0, #25
 8011018:	d5fb      	bpl.n	8011012 <_printf_i+0xba>
 801101a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801101e:	2e00      	cmp	r6, #0
 8011020:	da03      	bge.n	801102a <_printf_i+0xd2>
 8011022:	232d      	movs	r3, #45	; 0x2d
 8011024:	4276      	negs	r6, r6
 8011026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801102a:	485a      	ldr	r0, [pc, #360]	; (8011194 <_printf_i+0x23c>)
 801102c:	230a      	movs	r3, #10
 801102e:	e012      	b.n	8011056 <_printf_i+0xfe>
 8011030:	682b      	ldr	r3, [r5, #0]
 8011032:	6820      	ldr	r0, [r4, #0]
 8011034:	1d19      	adds	r1, r3, #4
 8011036:	6029      	str	r1, [r5, #0]
 8011038:	0605      	lsls	r5, r0, #24
 801103a:	d501      	bpl.n	8011040 <_printf_i+0xe8>
 801103c:	681e      	ldr	r6, [r3, #0]
 801103e:	e002      	b.n	8011046 <_printf_i+0xee>
 8011040:	0641      	lsls	r1, r0, #25
 8011042:	d5fb      	bpl.n	801103c <_printf_i+0xe4>
 8011044:	881e      	ldrh	r6, [r3, #0]
 8011046:	4853      	ldr	r0, [pc, #332]	; (8011194 <_printf_i+0x23c>)
 8011048:	2f6f      	cmp	r7, #111	; 0x6f
 801104a:	bf0c      	ite	eq
 801104c:	2308      	moveq	r3, #8
 801104e:	230a      	movne	r3, #10
 8011050:	2100      	movs	r1, #0
 8011052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011056:	6865      	ldr	r5, [r4, #4]
 8011058:	60a5      	str	r5, [r4, #8]
 801105a:	2d00      	cmp	r5, #0
 801105c:	bfa2      	ittt	ge
 801105e:	6821      	ldrge	r1, [r4, #0]
 8011060:	f021 0104 	bicge.w	r1, r1, #4
 8011064:	6021      	strge	r1, [r4, #0]
 8011066:	b90e      	cbnz	r6, 801106c <_printf_i+0x114>
 8011068:	2d00      	cmp	r5, #0
 801106a:	d04b      	beq.n	8011104 <_printf_i+0x1ac>
 801106c:	4615      	mov	r5, r2
 801106e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011072:	fb03 6711 	mls	r7, r3, r1, r6
 8011076:	5dc7      	ldrb	r7, [r0, r7]
 8011078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801107c:	4637      	mov	r7, r6
 801107e:	42bb      	cmp	r3, r7
 8011080:	460e      	mov	r6, r1
 8011082:	d9f4      	bls.n	801106e <_printf_i+0x116>
 8011084:	2b08      	cmp	r3, #8
 8011086:	d10b      	bne.n	80110a0 <_printf_i+0x148>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	07de      	lsls	r6, r3, #31
 801108c:	d508      	bpl.n	80110a0 <_printf_i+0x148>
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	6861      	ldr	r1, [r4, #4]
 8011092:	4299      	cmp	r1, r3
 8011094:	bfde      	ittt	le
 8011096:	2330      	movle	r3, #48	; 0x30
 8011098:	f805 3c01 	strble.w	r3, [r5, #-1]
 801109c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110a0:	1b52      	subs	r2, r2, r5
 80110a2:	6122      	str	r2, [r4, #16]
 80110a4:	f8cd a000 	str.w	sl, [sp]
 80110a8:	464b      	mov	r3, r9
 80110aa:	aa03      	add	r2, sp, #12
 80110ac:	4621      	mov	r1, r4
 80110ae:	4640      	mov	r0, r8
 80110b0:	f7ff fee4 	bl	8010e7c <_printf_common>
 80110b4:	3001      	adds	r0, #1
 80110b6:	d14a      	bne.n	801114e <_printf_i+0x1f6>
 80110b8:	f04f 30ff 	mov.w	r0, #4294967295
 80110bc:	b004      	add	sp, #16
 80110be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	f043 0320 	orr.w	r3, r3, #32
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	4833      	ldr	r0, [pc, #204]	; (8011198 <_printf_i+0x240>)
 80110cc:	2778      	movs	r7, #120	; 0x78
 80110ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80110d2:	6823      	ldr	r3, [r4, #0]
 80110d4:	6829      	ldr	r1, [r5, #0]
 80110d6:	061f      	lsls	r7, r3, #24
 80110d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80110dc:	d402      	bmi.n	80110e4 <_printf_i+0x18c>
 80110de:	065f      	lsls	r7, r3, #25
 80110e0:	bf48      	it	mi
 80110e2:	b2b6      	uxthmi	r6, r6
 80110e4:	07df      	lsls	r7, r3, #31
 80110e6:	bf48      	it	mi
 80110e8:	f043 0320 	orrmi.w	r3, r3, #32
 80110ec:	6029      	str	r1, [r5, #0]
 80110ee:	bf48      	it	mi
 80110f0:	6023      	strmi	r3, [r4, #0]
 80110f2:	b91e      	cbnz	r6, 80110fc <_printf_i+0x1a4>
 80110f4:	6823      	ldr	r3, [r4, #0]
 80110f6:	f023 0320 	bic.w	r3, r3, #32
 80110fa:	6023      	str	r3, [r4, #0]
 80110fc:	2310      	movs	r3, #16
 80110fe:	e7a7      	b.n	8011050 <_printf_i+0xf8>
 8011100:	4824      	ldr	r0, [pc, #144]	; (8011194 <_printf_i+0x23c>)
 8011102:	e7e4      	b.n	80110ce <_printf_i+0x176>
 8011104:	4615      	mov	r5, r2
 8011106:	e7bd      	b.n	8011084 <_printf_i+0x12c>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	6826      	ldr	r6, [r4, #0]
 801110c:	6961      	ldr	r1, [r4, #20]
 801110e:	1d18      	adds	r0, r3, #4
 8011110:	6028      	str	r0, [r5, #0]
 8011112:	0635      	lsls	r5, r6, #24
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	d501      	bpl.n	801111c <_printf_i+0x1c4>
 8011118:	6019      	str	r1, [r3, #0]
 801111a:	e002      	b.n	8011122 <_printf_i+0x1ca>
 801111c:	0670      	lsls	r0, r6, #25
 801111e:	d5fb      	bpl.n	8011118 <_printf_i+0x1c0>
 8011120:	8019      	strh	r1, [r3, #0]
 8011122:	2300      	movs	r3, #0
 8011124:	6123      	str	r3, [r4, #16]
 8011126:	4615      	mov	r5, r2
 8011128:	e7bc      	b.n	80110a4 <_printf_i+0x14c>
 801112a:	682b      	ldr	r3, [r5, #0]
 801112c:	1d1a      	adds	r2, r3, #4
 801112e:	602a      	str	r2, [r5, #0]
 8011130:	681d      	ldr	r5, [r3, #0]
 8011132:	6862      	ldr	r2, [r4, #4]
 8011134:	2100      	movs	r1, #0
 8011136:	4628      	mov	r0, r5
 8011138:	f7ef f8d2 	bl	80002e0 <memchr>
 801113c:	b108      	cbz	r0, 8011142 <_printf_i+0x1ea>
 801113e:	1b40      	subs	r0, r0, r5
 8011140:	6060      	str	r0, [r4, #4]
 8011142:	6863      	ldr	r3, [r4, #4]
 8011144:	6123      	str	r3, [r4, #16]
 8011146:	2300      	movs	r3, #0
 8011148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801114c:	e7aa      	b.n	80110a4 <_printf_i+0x14c>
 801114e:	6923      	ldr	r3, [r4, #16]
 8011150:	462a      	mov	r2, r5
 8011152:	4649      	mov	r1, r9
 8011154:	4640      	mov	r0, r8
 8011156:	47d0      	blx	sl
 8011158:	3001      	adds	r0, #1
 801115a:	d0ad      	beq.n	80110b8 <_printf_i+0x160>
 801115c:	6823      	ldr	r3, [r4, #0]
 801115e:	079b      	lsls	r3, r3, #30
 8011160:	d413      	bmi.n	801118a <_printf_i+0x232>
 8011162:	68e0      	ldr	r0, [r4, #12]
 8011164:	9b03      	ldr	r3, [sp, #12]
 8011166:	4298      	cmp	r0, r3
 8011168:	bfb8      	it	lt
 801116a:	4618      	movlt	r0, r3
 801116c:	e7a6      	b.n	80110bc <_printf_i+0x164>
 801116e:	2301      	movs	r3, #1
 8011170:	4632      	mov	r2, r6
 8011172:	4649      	mov	r1, r9
 8011174:	4640      	mov	r0, r8
 8011176:	47d0      	blx	sl
 8011178:	3001      	adds	r0, #1
 801117a:	d09d      	beq.n	80110b8 <_printf_i+0x160>
 801117c:	3501      	adds	r5, #1
 801117e:	68e3      	ldr	r3, [r4, #12]
 8011180:	9903      	ldr	r1, [sp, #12]
 8011182:	1a5b      	subs	r3, r3, r1
 8011184:	42ab      	cmp	r3, r5
 8011186:	dcf2      	bgt.n	801116e <_printf_i+0x216>
 8011188:	e7eb      	b.n	8011162 <_printf_i+0x20a>
 801118a:	2500      	movs	r5, #0
 801118c:	f104 0619 	add.w	r6, r4, #25
 8011190:	e7f5      	b.n	801117e <_printf_i+0x226>
 8011192:	bf00      	nop
 8011194:	08014faa 	.word	0x08014faa
 8011198:	08014fbb 	.word	0x08014fbb

0801119c <_scanf_float>:
 801119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a0:	b087      	sub	sp, #28
 80111a2:	4617      	mov	r7, r2
 80111a4:	9303      	str	r3, [sp, #12]
 80111a6:	688b      	ldr	r3, [r1, #8]
 80111a8:	1e5a      	subs	r2, r3, #1
 80111aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80111ae:	bf83      	ittte	hi
 80111b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80111b4:	195b      	addhi	r3, r3, r5
 80111b6:	9302      	strhi	r3, [sp, #8]
 80111b8:	2300      	movls	r3, #0
 80111ba:	bf86      	itte	hi
 80111bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80111c0:	608b      	strhi	r3, [r1, #8]
 80111c2:	9302      	strls	r3, [sp, #8]
 80111c4:	680b      	ldr	r3, [r1, #0]
 80111c6:	468b      	mov	fp, r1
 80111c8:	2500      	movs	r5, #0
 80111ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80111ce:	f84b 3b1c 	str.w	r3, [fp], #28
 80111d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80111d6:	4680      	mov	r8, r0
 80111d8:	460c      	mov	r4, r1
 80111da:	465e      	mov	r6, fp
 80111dc:	46aa      	mov	sl, r5
 80111de:	46a9      	mov	r9, r5
 80111e0:	9501      	str	r5, [sp, #4]
 80111e2:	68a2      	ldr	r2, [r4, #8]
 80111e4:	b152      	cbz	r2, 80111fc <_scanf_float+0x60>
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b4e      	cmp	r3, #78	; 0x4e
 80111ec:	d864      	bhi.n	80112b8 <_scanf_float+0x11c>
 80111ee:	2b40      	cmp	r3, #64	; 0x40
 80111f0:	d83c      	bhi.n	801126c <_scanf_float+0xd0>
 80111f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80111f6:	b2c8      	uxtb	r0, r1
 80111f8:	280e      	cmp	r0, #14
 80111fa:	d93a      	bls.n	8011272 <_scanf_float+0xd6>
 80111fc:	f1b9 0f00 	cmp.w	r9, #0
 8011200:	d003      	beq.n	801120a <_scanf_float+0x6e>
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011208:	6023      	str	r3, [r4, #0]
 801120a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801120e:	f1ba 0f01 	cmp.w	sl, #1
 8011212:	f200 8113 	bhi.w	801143c <_scanf_float+0x2a0>
 8011216:	455e      	cmp	r6, fp
 8011218:	f200 8105 	bhi.w	8011426 <_scanf_float+0x28a>
 801121c:	2501      	movs	r5, #1
 801121e:	4628      	mov	r0, r5
 8011220:	b007      	add	sp, #28
 8011222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801122a:	2a0d      	cmp	r2, #13
 801122c:	d8e6      	bhi.n	80111fc <_scanf_float+0x60>
 801122e:	a101      	add	r1, pc, #4	; (adr r1, 8011234 <_scanf_float+0x98>)
 8011230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011234:	08011373 	.word	0x08011373
 8011238:	080111fd 	.word	0x080111fd
 801123c:	080111fd 	.word	0x080111fd
 8011240:	080111fd 	.word	0x080111fd
 8011244:	080113d3 	.word	0x080113d3
 8011248:	080113ab 	.word	0x080113ab
 801124c:	080111fd 	.word	0x080111fd
 8011250:	080111fd 	.word	0x080111fd
 8011254:	08011381 	.word	0x08011381
 8011258:	080111fd 	.word	0x080111fd
 801125c:	080111fd 	.word	0x080111fd
 8011260:	080111fd 	.word	0x080111fd
 8011264:	080111fd 	.word	0x080111fd
 8011268:	08011339 	.word	0x08011339
 801126c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011270:	e7db      	b.n	801122a <_scanf_float+0x8e>
 8011272:	290e      	cmp	r1, #14
 8011274:	d8c2      	bhi.n	80111fc <_scanf_float+0x60>
 8011276:	a001      	add	r0, pc, #4	; (adr r0, 801127c <_scanf_float+0xe0>)
 8011278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801127c:	0801132b 	.word	0x0801132b
 8011280:	080111fd 	.word	0x080111fd
 8011284:	0801132b 	.word	0x0801132b
 8011288:	080113bf 	.word	0x080113bf
 801128c:	080111fd 	.word	0x080111fd
 8011290:	080112d9 	.word	0x080112d9
 8011294:	08011315 	.word	0x08011315
 8011298:	08011315 	.word	0x08011315
 801129c:	08011315 	.word	0x08011315
 80112a0:	08011315 	.word	0x08011315
 80112a4:	08011315 	.word	0x08011315
 80112a8:	08011315 	.word	0x08011315
 80112ac:	08011315 	.word	0x08011315
 80112b0:	08011315 	.word	0x08011315
 80112b4:	08011315 	.word	0x08011315
 80112b8:	2b6e      	cmp	r3, #110	; 0x6e
 80112ba:	d809      	bhi.n	80112d0 <_scanf_float+0x134>
 80112bc:	2b60      	cmp	r3, #96	; 0x60
 80112be:	d8b2      	bhi.n	8011226 <_scanf_float+0x8a>
 80112c0:	2b54      	cmp	r3, #84	; 0x54
 80112c2:	d077      	beq.n	80113b4 <_scanf_float+0x218>
 80112c4:	2b59      	cmp	r3, #89	; 0x59
 80112c6:	d199      	bne.n	80111fc <_scanf_float+0x60>
 80112c8:	2d07      	cmp	r5, #7
 80112ca:	d197      	bne.n	80111fc <_scanf_float+0x60>
 80112cc:	2508      	movs	r5, #8
 80112ce:	e029      	b.n	8011324 <_scanf_float+0x188>
 80112d0:	2b74      	cmp	r3, #116	; 0x74
 80112d2:	d06f      	beq.n	80113b4 <_scanf_float+0x218>
 80112d4:	2b79      	cmp	r3, #121	; 0x79
 80112d6:	e7f6      	b.n	80112c6 <_scanf_float+0x12a>
 80112d8:	6821      	ldr	r1, [r4, #0]
 80112da:	05c8      	lsls	r0, r1, #23
 80112dc:	d51a      	bpl.n	8011314 <_scanf_float+0x178>
 80112de:	9b02      	ldr	r3, [sp, #8]
 80112e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80112e4:	6021      	str	r1, [r4, #0]
 80112e6:	f109 0901 	add.w	r9, r9, #1
 80112ea:	b11b      	cbz	r3, 80112f4 <_scanf_float+0x158>
 80112ec:	3b01      	subs	r3, #1
 80112ee:	3201      	adds	r2, #1
 80112f0:	9302      	str	r3, [sp, #8]
 80112f2:	60a2      	str	r2, [r4, #8]
 80112f4:	68a3      	ldr	r3, [r4, #8]
 80112f6:	3b01      	subs	r3, #1
 80112f8:	60a3      	str	r3, [r4, #8]
 80112fa:	6923      	ldr	r3, [r4, #16]
 80112fc:	3301      	adds	r3, #1
 80112fe:	6123      	str	r3, [r4, #16]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	3b01      	subs	r3, #1
 8011304:	2b00      	cmp	r3, #0
 8011306:	607b      	str	r3, [r7, #4]
 8011308:	f340 8084 	ble.w	8011414 <_scanf_float+0x278>
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	3301      	adds	r3, #1
 8011310:	603b      	str	r3, [r7, #0]
 8011312:	e766      	b.n	80111e2 <_scanf_float+0x46>
 8011314:	eb1a 0f05 	cmn.w	sl, r5
 8011318:	f47f af70 	bne.w	80111fc <_scanf_float+0x60>
 801131c:	6822      	ldr	r2, [r4, #0]
 801131e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011322:	6022      	str	r2, [r4, #0]
 8011324:	f806 3b01 	strb.w	r3, [r6], #1
 8011328:	e7e4      	b.n	80112f4 <_scanf_float+0x158>
 801132a:	6822      	ldr	r2, [r4, #0]
 801132c:	0610      	lsls	r0, r2, #24
 801132e:	f57f af65 	bpl.w	80111fc <_scanf_float+0x60>
 8011332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011336:	e7f4      	b.n	8011322 <_scanf_float+0x186>
 8011338:	f1ba 0f00 	cmp.w	sl, #0
 801133c:	d10e      	bne.n	801135c <_scanf_float+0x1c0>
 801133e:	f1b9 0f00 	cmp.w	r9, #0
 8011342:	d10e      	bne.n	8011362 <_scanf_float+0x1c6>
 8011344:	6822      	ldr	r2, [r4, #0]
 8011346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801134a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801134e:	d108      	bne.n	8011362 <_scanf_float+0x1c6>
 8011350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011354:	6022      	str	r2, [r4, #0]
 8011356:	f04f 0a01 	mov.w	sl, #1
 801135a:	e7e3      	b.n	8011324 <_scanf_float+0x188>
 801135c:	f1ba 0f02 	cmp.w	sl, #2
 8011360:	d055      	beq.n	801140e <_scanf_float+0x272>
 8011362:	2d01      	cmp	r5, #1
 8011364:	d002      	beq.n	801136c <_scanf_float+0x1d0>
 8011366:	2d04      	cmp	r5, #4
 8011368:	f47f af48 	bne.w	80111fc <_scanf_float+0x60>
 801136c:	3501      	adds	r5, #1
 801136e:	b2ed      	uxtb	r5, r5
 8011370:	e7d8      	b.n	8011324 <_scanf_float+0x188>
 8011372:	f1ba 0f01 	cmp.w	sl, #1
 8011376:	f47f af41 	bne.w	80111fc <_scanf_float+0x60>
 801137a:	f04f 0a02 	mov.w	sl, #2
 801137e:	e7d1      	b.n	8011324 <_scanf_float+0x188>
 8011380:	b97d      	cbnz	r5, 80113a2 <_scanf_float+0x206>
 8011382:	f1b9 0f00 	cmp.w	r9, #0
 8011386:	f47f af3c 	bne.w	8011202 <_scanf_float+0x66>
 801138a:	6822      	ldr	r2, [r4, #0]
 801138c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011394:	f47f af39 	bne.w	801120a <_scanf_float+0x6e>
 8011398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801139c:	6022      	str	r2, [r4, #0]
 801139e:	2501      	movs	r5, #1
 80113a0:	e7c0      	b.n	8011324 <_scanf_float+0x188>
 80113a2:	2d03      	cmp	r5, #3
 80113a4:	d0e2      	beq.n	801136c <_scanf_float+0x1d0>
 80113a6:	2d05      	cmp	r5, #5
 80113a8:	e7de      	b.n	8011368 <_scanf_float+0x1cc>
 80113aa:	2d02      	cmp	r5, #2
 80113ac:	f47f af26 	bne.w	80111fc <_scanf_float+0x60>
 80113b0:	2503      	movs	r5, #3
 80113b2:	e7b7      	b.n	8011324 <_scanf_float+0x188>
 80113b4:	2d06      	cmp	r5, #6
 80113b6:	f47f af21 	bne.w	80111fc <_scanf_float+0x60>
 80113ba:	2507      	movs	r5, #7
 80113bc:	e7b2      	b.n	8011324 <_scanf_float+0x188>
 80113be:	6822      	ldr	r2, [r4, #0]
 80113c0:	0591      	lsls	r1, r2, #22
 80113c2:	f57f af1b 	bpl.w	80111fc <_scanf_float+0x60>
 80113c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80113ca:	6022      	str	r2, [r4, #0]
 80113cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80113d0:	e7a8      	b.n	8011324 <_scanf_float+0x188>
 80113d2:	6822      	ldr	r2, [r4, #0]
 80113d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80113d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80113dc:	d006      	beq.n	80113ec <_scanf_float+0x250>
 80113de:	0550      	lsls	r0, r2, #21
 80113e0:	f57f af0c 	bpl.w	80111fc <_scanf_float+0x60>
 80113e4:	f1b9 0f00 	cmp.w	r9, #0
 80113e8:	f43f af0f 	beq.w	801120a <_scanf_float+0x6e>
 80113ec:	0591      	lsls	r1, r2, #22
 80113ee:	bf58      	it	pl
 80113f0:	9901      	ldrpl	r1, [sp, #4]
 80113f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80113f6:	bf58      	it	pl
 80113f8:	eba9 0101 	subpl.w	r1, r9, r1
 80113fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011400:	bf58      	it	pl
 8011402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011406:	6022      	str	r2, [r4, #0]
 8011408:	f04f 0900 	mov.w	r9, #0
 801140c:	e78a      	b.n	8011324 <_scanf_float+0x188>
 801140e:	f04f 0a03 	mov.w	sl, #3
 8011412:	e787      	b.n	8011324 <_scanf_float+0x188>
 8011414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011418:	4639      	mov	r1, r7
 801141a:	4640      	mov	r0, r8
 801141c:	4798      	blx	r3
 801141e:	2800      	cmp	r0, #0
 8011420:	f43f aedf 	beq.w	80111e2 <_scanf_float+0x46>
 8011424:	e6ea      	b.n	80111fc <_scanf_float+0x60>
 8011426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801142a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801142e:	463a      	mov	r2, r7
 8011430:	4640      	mov	r0, r8
 8011432:	4798      	blx	r3
 8011434:	6923      	ldr	r3, [r4, #16]
 8011436:	3b01      	subs	r3, #1
 8011438:	6123      	str	r3, [r4, #16]
 801143a:	e6ec      	b.n	8011216 <_scanf_float+0x7a>
 801143c:	1e6b      	subs	r3, r5, #1
 801143e:	2b06      	cmp	r3, #6
 8011440:	d825      	bhi.n	801148e <_scanf_float+0x2f2>
 8011442:	2d02      	cmp	r5, #2
 8011444:	d836      	bhi.n	80114b4 <_scanf_float+0x318>
 8011446:	455e      	cmp	r6, fp
 8011448:	f67f aee8 	bls.w	801121c <_scanf_float+0x80>
 801144c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011454:	463a      	mov	r2, r7
 8011456:	4640      	mov	r0, r8
 8011458:	4798      	blx	r3
 801145a:	6923      	ldr	r3, [r4, #16]
 801145c:	3b01      	subs	r3, #1
 801145e:	6123      	str	r3, [r4, #16]
 8011460:	e7f1      	b.n	8011446 <_scanf_float+0x2aa>
 8011462:	9802      	ldr	r0, [sp, #8]
 8011464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801146c:	9002      	str	r0, [sp, #8]
 801146e:	463a      	mov	r2, r7
 8011470:	4640      	mov	r0, r8
 8011472:	4798      	blx	r3
 8011474:	6923      	ldr	r3, [r4, #16]
 8011476:	3b01      	subs	r3, #1
 8011478:	6123      	str	r3, [r4, #16]
 801147a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801147e:	fa5f fa8a 	uxtb.w	sl, sl
 8011482:	f1ba 0f02 	cmp.w	sl, #2
 8011486:	d1ec      	bne.n	8011462 <_scanf_float+0x2c6>
 8011488:	3d03      	subs	r5, #3
 801148a:	b2ed      	uxtb	r5, r5
 801148c:	1b76      	subs	r6, r6, r5
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	05da      	lsls	r2, r3, #23
 8011492:	d52f      	bpl.n	80114f4 <_scanf_float+0x358>
 8011494:	055b      	lsls	r3, r3, #21
 8011496:	d510      	bpl.n	80114ba <_scanf_float+0x31e>
 8011498:	455e      	cmp	r6, fp
 801149a:	f67f aebf 	bls.w	801121c <_scanf_float+0x80>
 801149e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114a6:	463a      	mov	r2, r7
 80114a8:	4640      	mov	r0, r8
 80114aa:	4798      	blx	r3
 80114ac:	6923      	ldr	r3, [r4, #16]
 80114ae:	3b01      	subs	r3, #1
 80114b0:	6123      	str	r3, [r4, #16]
 80114b2:	e7f1      	b.n	8011498 <_scanf_float+0x2fc>
 80114b4:	46aa      	mov	sl, r5
 80114b6:	9602      	str	r6, [sp, #8]
 80114b8:	e7df      	b.n	801147a <_scanf_float+0x2de>
 80114ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80114be:	6923      	ldr	r3, [r4, #16]
 80114c0:	2965      	cmp	r1, #101	; 0x65
 80114c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80114c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80114ca:	6123      	str	r3, [r4, #16]
 80114cc:	d00c      	beq.n	80114e8 <_scanf_float+0x34c>
 80114ce:	2945      	cmp	r1, #69	; 0x45
 80114d0:	d00a      	beq.n	80114e8 <_scanf_float+0x34c>
 80114d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114d6:	463a      	mov	r2, r7
 80114d8:	4640      	mov	r0, r8
 80114da:	4798      	blx	r3
 80114dc:	6923      	ldr	r3, [r4, #16]
 80114de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	1eb5      	subs	r5, r6, #2
 80114e6:	6123      	str	r3, [r4, #16]
 80114e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114ec:	463a      	mov	r2, r7
 80114ee:	4640      	mov	r0, r8
 80114f0:	4798      	blx	r3
 80114f2:	462e      	mov	r6, r5
 80114f4:	6825      	ldr	r5, [r4, #0]
 80114f6:	f015 0510 	ands.w	r5, r5, #16
 80114fa:	d14d      	bne.n	8011598 <_scanf_float+0x3fc>
 80114fc:	7035      	strb	r5, [r6, #0]
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011508:	d11a      	bne.n	8011540 <_scanf_float+0x3a4>
 801150a:	9b01      	ldr	r3, [sp, #4]
 801150c:	454b      	cmp	r3, r9
 801150e:	eba3 0209 	sub.w	r2, r3, r9
 8011512:	d122      	bne.n	801155a <_scanf_float+0x3be>
 8011514:	2200      	movs	r2, #0
 8011516:	4659      	mov	r1, fp
 8011518:	4640      	mov	r0, r8
 801151a:	f002 fb3b 	bl	8013b94 <_strtod_r>
 801151e:	9b03      	ldr	r3, [sp, #12]
 8011520:	6821      	ldr	r1, [r4, #0]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f011 0f02 	tst.w	r1, #2
 8011528:	f103 0204 	add.w	r2, r3, #4
 801152c:	d020      	beq.n	8011570 <_scanf_float+0x3d4>
 801152e:	9903      	ldr	r1, [sp, #12]
 8011530:	600a      	str	r2, [r1, #0]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	ed83 0b00 	vstr	d0, [r3]
 8011538:	68e3      	ldr	r3, [r4, #12]
 801153a:	3301      	adds	r3, #1
 801153c:	60e3      	str	r3, [r4, #12]
 801153e:	e66e      	b.n	801121e <_scanf_float+0x82>
 8011540:	9b04      	ldr	r3, [sp, #16]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d0e6      	beq.n	8011514 <_scanf_float+0x378>
 8011546:	9905      	ldr	r1, [sp, #20]
 8011548:	230a      	movs	r3, #10
 801154a:	462a      	mov	r2, r5
 801154c:	3101      	adds	r1, #1
 801154e:	4640      	mov	r0, r8
 8011550:	f002 fba8 	bl	8013ca4 <_strtol_r>
 8011554:	9b04      	ldr	r3, [sp, #16]
 8011556:	9e05      	ldr	r6, [sp, #20]
 8011558:	1ac2      	subs	r2, r0, r3
 801155a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801155e:	429e      	cmp	r6, r3
 8011560:	bf28      	it	cs
 8011562:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011566:	490d      	ldr	r1, [pc, #52]	; (801159c <_scanf_float+0x400>)
 8011568:	4630      	mov	r0, r6
 801156a:	f000 f8ff 	bl	801176c <siprintf>
 801156e:	e7d1      	b.n	8011514 <_scanf_float+0x378>
 8011570:	f011 0f04 	tst.w	r1, #4
 8011574:	9903      	ldr	r1, [sp, #12]
 8011576:	600a      	str	r2, [r1, #0]
 8011578:	d1db      	bne.n	8011532 <_scanf_float+0x396>
 801157a:	eeb4 0b40 	vcmp.f64	d0, d0
 801157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011582:	681e      	ldr	r6, [r3, #0]
 8011584:	d705      	bvc.n	8011592 <_scanf_float+0x3f6>
 8011586:	4806      	ldr	r0, [pc, #24]	; (80115a0 <_scanf_float+0x404>)
 8011588:	f000 fa46 	bl	8011a18 <nanf>
 801158c:	ed86 0a00 	vstr	s0, [r6]
 8011590:	e7d2      	b.n	8011538 <_scanf_float+0x39c>
 8011592:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011596:	e7f9      	b.n	801158c <_scanf_float+0x3f0>
 8011598:	2500      	movs	r5, #0
 801159a:	e640      	b.n	801121e <_scanf_float+0x82>
 801159c:	08014fcc 	.word	0x08014fcc
 80115a0:	0801535d 	.word	0x0801535d

080115a4 <std>:
 80115a4:	2300      	movs	r3, #0
 80115a6:	b510      	push	{r4, lr}
 80115a8:	4604      	mov	r4, r0
 80115aa:	e9c0 3300 	strd	r3, r3, [r0]
 80115ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115b2:	6083      	str	r3, [r0, #8]
 80115b4:	8181      	strh	r1, [r0, #12]
 80115b6:	6643      	str	r3, [r0, #100]	; 0x64
 80115b8:	81c2      	strh	r2, [r0, #14]
 80115ba:	6183      	str	r3, [r0, #24]
 80115bc:	4619      	mov	r1, r3
 80115be:	2208      	movs	r2, #8
 80115c0:	305c      	adds	r0, #92	; 0x5c
 80115c2:	f000 f936 	bl	8011832 <memset>
 80115c6:	4b05      	ldr	r3, [pc, #20]	; (80115dc <std+0x38>)
 80115c8:	6263      	str	r3, [r4, #36]	; 0x24
 80115ca:	4b05      	ldr	r3, [pc, #20]	; (80115e0 <std+0x3c>)
 80115cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80115ce:	4b05      	ldr	r3, [pc, #20]	; (80115e4 <std+0x40>)
 80115d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115d2:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <std+0x44>)
 80115d4:	6224      	str	r4, [r4, #32]
 80115d6:	6323      	str	r3, [r4, #48]	; 0x30
 80115d8:	bd10      	pop	{r4, pc}
 80115da:	bf00      	nop
 80115dc:	080117ad 	.word	0x080117ad
 80115e0:	080117cf 	.word	0x080117cf
 80115e4:	08011807 	.word	0x08011807
 80115e8:	0801182b 	.word	0x0801182b

080115ec <stdio_exit_handler>:
 80115ec:	4a02      	ldr	r2, [pc, #8]	; (80115f8 <stdio_exit_handler+0xc>)
 80115ee:	4903      	ldr	r1, [pc, #12]	; (80115fc <stdio_exit_handler+0x10>)
 80115f0:	4803      	ldr	r0, [pc, #12]	; (8011600 <stdio_exit_handler+0x14>)
 80115f2:	f000 b869 	b.w	80116c8 <_fwalk_sglue>
 80115f6:	bf00      	nop
 80115f8:	24000014 	.word	0x24000014
 80115fc:	08014065 	.word	0x08014065
 8011600:	24000020 	.word	0x24000020

08011604 <cleanup_stdio>:
 8011604:	6841      	ldr	r1, [r0, #4]
 8011606:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <cleanup_stdio+0x34>)
 8011608:	4299      	cmp	r1, r3
 801160a:	b510      	push	{r4, lr}
 801160c:	4604      	mov	r4, r0
 801160e:	d001      	beq.n	8011614 <cleanup_stdio+0x10>
 8011610:	f002 fd28 	bl	8014064 <_fflush_r>
 8011614:	68a1      	ldr	r1, [r4, #8]
 8011616:	4b09      	ldr	r3, [pc, #36]	; (801163c <cleanup_stdio+0x38>)
 8011618:	4299      	cmp	r1, r3
 801161a:	d002      	beq.n	8011622 <cleanup_stdio+0x1e>
 801161c:	4620      	mov	r0, r4
 801161e:	f002 fd21 	bl	8014064 <_fflush_r>
 8011622:	68e1      	ldr	r1, [r4, #12]
 8011624:	4b06      	ldr	r3, [pc, #24]	; (8011640 <cleanup_stdio+0x3c>)
 8011626:	4299      	cmp	r1, r3
 8011628:	d004      	beq.n	8011634 <cleanup_stdio+0x30>
 801162a:	4620      	mov	r0, r4
 801162c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011630:	f002 bd18 	b.w	8014064 <_fflush_r>
 8011634:	bd10      	pop	{r4, pc}
 8011636:	bf00      	nop
 8011638:	24005558 	.word	0x24005558
 801163c:	240055c0 	.word	0x240055c0
 8011640:	24005628 	.word	0x24005628

08011644 <global_stdio_init.part.0>:
 8011644:	b510      	push	{r4, lr}
 8011646:	4b0b      	ldr	r3, [pc, #44]	; (8011674 <global_stdio_init.part.0+0x30>)
 8011648:	4c0b      	ldr	r4, [pc, #44]	; (8011678 <global_stdio_init.part.0+0x34>)
 801164a:	4a0c      	ldr	r2, [pc, #48]	; (801167c <global_stdio_init.part.0+0x38>)
 801164c:	601a      	str	r2, [r3, #0]
 801164e:	4620      	mov	r0, r4
 8011650:	2200      	movs	r2, #0
 8011652:	2104      	movs	r1, #4
 8011654:	f7ff ffa6 	bl	80115a4 <std>
 8011658:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801165c:	2201      	movs	r2, #1
 801165e:	2109      	movs	r1, #9
 8011660:	f7ff ffa0 	bl	80115a4 <std>
 8011664:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011668:	2202      	movs	r2, #2
 801166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801166e:	2112      	movs	r1, #18
 8011670:	f7ff bf98 	b.w	80115a4 <std>
 8011674:	24005690 	.word	0x24005690
 8011678:	24005558 	.word	0x24005558
 801167c:	080115ed 	.word	0x080115ed

08011680 <__sfp_lock_acquire>:
 8011680:	4801      	ldr	r0, [pc, #4]	; (8011688 <__sfp_lock_acquire+0x8>)
 8011682:	f000 b9b9 	b.w	80119f8 <__retarget_lock_acquire_recursive>
 8011686:	bf00      	nop
 8011688:	24005699 	.word	0x24005699

0801168c <__sfp_lock_release>:
 801168c:	4801      	ldr	r0, [pc, #4]	; (8011694 <__sfp_lock_release+0x8>)
 801168e:	f000 b9b4 	b.w	80119fa <__retarget_lock_release_recursive>
 8011692:	bf00      	nop
 8011694:	24005699 	.word	0x24005699

08011698 <__sinit>:
 8011698:	b510      	push	{r4, lr}
 801169a:	4604      	mov	r4, r0
 801169c:	f7ff fff0 	bl	8011680 <__sfp_lock_acquire>
 80116a0:	6a23      	ldr	r3, [r4, #32]
 80116a2:	b11b      	cbz	r3, 80116ac <__sinit+0x14>
 80116a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116a8:	f7ff bff0 	b.w	801168c <__sfp_lock_release>
 80116ac:	4b04      	ldr	r3, [pc, #16]	; (80116c0 <__sinit+0x28>)
 80116ae:	6223      	str	r3, [r4, #32]
 80116b0:	4b04      	ldr	r3, [pc, #16]	; (80116c4 <__sinit+0x2c>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1f5      	bne.n	80116a4 <__sinit+0xc>
 80116b8:	f7ff ffc4 	bl	8011644 <global_stdio_init.part.0>
 80116bc:	e7f2      	b.n	80116a4 <__sinit+0xc>
 80116be:	bf00      	nop
 80116c0:	08011605 	.word	0x08011605
 80116c4:	24005690 	.word	0x24005690

080116c8 <_fwalk_sglue>:
 80116c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116cc:	4607      	mov	r7, r0
 80116ce:	4688      	mov	r8, r1
 80116d0:	4614      	mov	r4, r2
 80116d2:	2600      	movs	r6, #0
 80116d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116d8:	f1b9 0901 	subs.w	r9, r9, #1
 80116dc:	d505      	bpl.n	80116ea <_fwalk_sglue+0x22>
 80116de:	6824      	ldr	r4, [r4, #0]
 80116e0:	2c00      	cmp	r4, #0
 80116e2:	d1f7      	bne.n	80116d4 <_fwalk_sglue+0xc>
 80116e4:	4630      	mov	r0, r6
 80116e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ea:	89ab      	ldrh	r3, [r5, #12]
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d907      	bls.n	8011700 <_fwalk_sglue+0x38>
 80116f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116f4:	3301      	adds	r3, #1
 80116f6:	d003      	beq.n	8011700 <_fwalk_sglue+0x38>
 80116f8:	4629      	mov	r1, r5
 80116fa:	4638      	mov	r0, r7
 80116fc:	47c0      	blx	r8
 80116fe:	4306      	orrs	r6, r0
 8011700:	3568      	adds	r5, #104	; 0x68
 8011702:	e7e9      	b.n	80116d8 <_fwalk_sglue+0x10>

08011704 <sniprintf>:
 8011704:	b40c      	push	{r2, r3}
 8011706:	b530      	push	{r4, r5, lr}
 8011708:	4b17      	ldr	r3, [pc, #92]	; (8011768 <sniprintf+0x64>)
 801170a:	1e0c      	subs	r4, r1, #0
 801170c:	681d      	ldr	r5, [r3, #0]
 801170e:	b09d      	sub	sp, #116	; 0x74
 8011710:	da08      	bge.n	8011724 <sniprintf+0x20>
 8011712:	238b      	movs	r3, #139	; 0x8b
 8011714:	602b      	str	r3, [r5, #0]
 8011716:	f04f 30ff 	mov.w	r0, #4294967295
 801171a:	b01d      	add	sp, #116	; 0x74
 801171c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011720:	b002      	add	sp, #8
 8011722:	4770      	bx	lr
 8011724:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011728:	f8ad 3014 	strh.w	r3, [sp, #20]
 801172c:	bf14      	ite	ne
 801172e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011732:	4623      	moveq	r3, r4
 8011734:	9304      	str	r3, [sp, #16]
 8011736:	9307      	str	r3, [sp, #28]
 8011738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801173c:	9002      	str	r0, [sp, #8]
 801173e:	9006      	str	r0, [sp, #24]
 8011740:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011746:	ab21      	add	r3, sp, #132	; 0x84
 8011748:	a902      	add	r1, sp, #8
 801174a:	4628      	mov	r0, r5
 801174c:	9301      	str	r3, [sp, #4]
 801174e:	f002 fb05 	bl	8013d5c <_svfiprintf_r>
 8011752:	1c43      	adds	r3, r0, #1
 8011754:	bfbc      	itt	lt
 8011756:	238b      	movlt	r3, #139	; 0x8b
 8011758:	602b      	strlt	r3, [r5, #0]
 801175a:	2c00      	cmp	r4, #0
 801175c:	d0dd      	beq.n	801171a <sniprintf+0x16>
 801175e:	9b02      	ldr	r3, [sp, #8]
 8011760:	2200      	movs	r2, #0
 8011762:	701a      	strb	r2, [r3, #0]
 8011764:	e7d9      	b.n	801171a <sniprintf+0x16>
 8011766:	bf00      	nop
 8011768:	2400006c 	.word	0x2400006c

0801176c <siprintf>:
 801176c:	b40e      	push	{r1, r2, r3}
 801176e:	b500      	push	{lr}
 8011770:	b09c      	sub	sp, #112	; 0x70
 8011772:	ab1d      	add	r3, sp, #116	; 0x74
 8011774:	9002      	str	r0, [sp, #8]
 8011776:	9006      	str	r0, [sp, #24]
 8011778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801177c:	4809      	ldr	r0, [pc, #36]	; (80117a4 <siprintf+0x38>)
 801177e:	9107      	str	r1, [sp, #28]
 8011780:	9104      	str	r1, [sp, #16]
 8011782:	4909      	ldr	r1, [pc, #36]	; (80117a8 <siprintf+0x3c>)
 8011784:	f853 2b04 	ldr.w	r2, [r3], #4
 8011788:	9105      	str	r1, [sp, #20]
 801178a:	6800      	ldr	r0, [r0, #0]
 801178c:	9301      	str	r3, [sp, #4]
 801178e:	a902      	add	r1, sp, #8
 8011790:	f002 fae4 	bl	8013d5c <_svfiprintf_r>
 8011794:	9b02      	ldr	r3, [sp, #8]
 8011796:	2200      	movs	r2, #0
 8011798:	701a      	strb	r2, [r3, #0]
 801179a:	b01c      	add	sp, #112	; 0x70
 801179c:	f85d eb04 	ldr.w	lr, [sp], #4
 80117a0:	b003      	add	sp, #12
 80117a2:	4770      	bx	lr
 80117a4:	2400006c 	.word	0x2400006c
 80117a8:	ffff0208 	.word	0xffff0208

080117ac <__sread>:
 80117ac:	b510      	push	{r4, lr}
 80117ae:	460c      	mov	r4, r1
 80117b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b4:	f000 f8c2 	bl	801193c <_read_r>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	bfab      	itete	ge
 80117bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117be:	89a3      	ldrhlt	r3, [r4, #12]
 80117c0:	181b      	addge	r3, r3, r0
 80117c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117c6:	bfac      	ite	ge
 80117c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80117ca:	81a3      	strhlt	r3, [r4, #12]
 80117cc:	bd10      	pop	{r4, pc}

080117ce <__swrite>:
 80117ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d2:	461f      	mov	r7, r3
 80117d4:	898b      	ldrh	r3, [r1, #12]
 80117d6:	05db      	lsls	r3, r3, #23
 80117d8:	4605      	mov	r5, r0
 80117da:	460c      	mov	r4, r1
 80117dc:	4616      	mov	r6, r2
 80117de:	d505      	bpl.n	80117ec <__swrite+0x1e>
 80117e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117e4:	2302      	movs	r3, #2
 80117e6:	2200      	movs	r2, #0
 80117e8:	f000 f896 	bl	8011918 <_lseek_r>
 80117ec:	89a3      	ldrh	r3, [r4, #12]
 80117ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117f6:	81a3      	strh	r3, [r4, #12]
 80117f8:	4632      	mov	r2, r6
 80117fa:	463b      	mov	r3, r7
 80117fc:	4628      	mov	r0, r5
 80117fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011802:	f000 b8bd 	b.w	8011980 <_write_r>

08011806 <__sseek>:
 8011806:	b510      	push	{r4, lr}
 8011808:	460c      	mov	r4, r1
 801180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180e:	f000 f883 	bl	8011918 <_lseek_r>
 8011812:	1c43      	adds	r3, r0, #1
 8011814:	89a3      	ldrh	r3, [r4, #12]
 8011816:	bf15      	itete	ne
 8011818:	6560      	strne	r0, [r4, #84]	; 0x54
 801181a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801181e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011822:	81a3      	strheq	r3, [r4, #12]
 8011824:	bf18      	it	ne
 8011826:	81a3      	strhne	r3, [r4, #12]
 8011828:	bd10      	pop	{r4, pc}

0801182a <__sclose>:
 801182a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801182e:	f000 b80d 	b.w	801184c <_close_r>

08011832 <memset>:
 8011832:	4402      	add	r2, r0
 8011834:	4603      	mov	r3, r0
 8011836:	4293      	cmp	r3, r2
 8011838:	d100      	bne.n	801183c <memset+0xa>
 801183a:	4770      	bx	lr
 801183c:	f803 1b01 	strb.w	r1, [r3], #1
 8011840:	e7f9      	b.n	8011836 <memset+0x4>
	...

08011844 <_localeconv_r>:
 8011844:	4800      	ldr	r0, [pc, #0]	; (8011848 <_localeconv_r+0x4>)
 8011846:	4770      	bx	lr
 8011848:	24000160 	.word	0x24000160

0801184c <_close_r>:
 801184c:	b538      	push	{r3, r4, r5, lr}
 801184e:	4d06      	ldr	r5, [pc, #24]	; (8011868 <_close_r+0x1c>)
 8011850:	2300      	movs	r3, #0
 8011852:	4604      	mov	r4, r0
 8011854:	4608      	mov	r0, r1
 8011856:	602b      	str	r3, [r5, #0]
 8011858:	f7f0 fd4b 	bl	80022f2 <_close>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	d102      	bne.n	8011866 <_close_r+0x1a>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	b103      	cbz	r3, 8011866 <_close_r+0x1a>
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	24005694 	.word	0x24005694

0801186c <_reclaim_reent>:
 801186c:	4b29      	ldr	r3, [pc, #164]	; (8011914 <_reclaim_reent+0xa8>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4283      	cmp	r3, r0
 8011872:	b570      	push	{r4, r5, r6, lr}
 8011874:	4604      	mov	r4, r0
 8011876:	d04b      	beq.n	8011910 <_reclaim_reent+0xa4>
 8011878:	69c3      	ldr	r3, [r0, #28]
 801187a:	b143      	cbz	r3, 801188e <_reclaim_reent+0x22>
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d144      	bne.n	801190c <_reclaim_reent+0xa0>
 8011882:	69e3      	ldr	r3, [r4, #28]
 8011884:	6819      	ldr	r1, [r3, #0]
 8011886:	b111      	cbz	r1, 801188e <_reclaim_reent+0x22>
 8011888:	4620      	mov	r0, r4
 801188a:	f000 fec1 	bl	8012610 <_free_r>
 801188e:	6961      	ldr	r1, [r4, #20]
 8011890:	b111      	cbz	r1, 8011898 <_reclaim_reent+0x2c>
 8011892:	4620      	mov	r0, r4
 8011894:	f000 febc 	bl	8012610 <_free_r>
 8011898:	69e1      	ldr	r1, [r4, #28]
 801189a:	b111      	cbz	r1, 80118a2 <_reclaim_reent+0x36>
 801189c:	4620      	mov	r0, r4
 801189e:	f000 feb7 	bl	8012610 <_free_r>
 80118a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80118a4:	b111      	cbz	r1, 80118ac <_reclaim_reent+0x40>
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 feb2 	bl	8012610 <_free_r>
 80118ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118ae:	b111      	cbz	r1, 80118b6 <_reclaim_reent+0x4a>
 80118b0:	4620      	mov	r0, r4
 80118b2:	f000 fead 	bl	8012610 <_free_r>
 80118b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80118b8:	b111      	cbz	r1, 80118c0 <_reclaim_reent+0x54>
 80118ba:	4620      	mov	r0, r4
 80118bc:	f000 fea8 	bl	8012610 <_free_r>
 80118c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80118c2:	b111      	cbz	r1, 80118ca <_reclaim_reent+0x5e>
 80118c4:	4620      	mov	r0, r4
 80118c6:	f000 fea3 	bl	8012610 <_free_r>
 80118ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80118cc:	b111      	cbz	r1, 80118d4 <_reclaim_reent+0x68>
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 fe9e 	bl	8012610 <_free_r>
 80118d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80118d6:	b111      	cbz	r1, 80118de <_reclaim_reent+0x72>
 80118d8:	4620      	mov	r0, r4
 80118da:	f000 fe99 	bl	8012610 <_free_r>
 80118de:	6a23      	ldr	r3, [r4, #32]
 80118e0:	b1b3      	cbz	r3, 8011910 <_reclaim_reent+0xa4>
 80118e2:	4620      	mov	r0, r4
 80118e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118e8:	4718      	bx	r3
 80118ea:	5949      	ldr	r1, [r1, r5]
 80118ec:	b941      	cbnz	r1, 8011900 <_reclaim_reent+0x94>
 80118ee:	3504      	adds	r5, #4
 80118f0:	69e3      	ldr	r3, [r4, #28]
 80118f2:	2d80      	cmp	r5, #128	; 0x80
 80118f4:	68d9      	ldr	r1, [r3, #12]
 80118f6:	d1f8      	bne.n	80118ea <_reclaim_reent+0x7e>
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 fe89 	bl	8012610 <_free_r>
 80118fe:	e7c0      	b.n	8011882 <_reclaim_reent+0x16>
 8011900:	680e      	ldr	r6, [r1, #0]
 8011902:	4620      	mov	r0, r4
 8011904:	f000 fe84 	bl	8012610 <_free_r>
 8011908:	4631      	mov	r1, r6
 801190a:	e7ef      	b.n	80118ec <_reclaim_reent+0x80>
 801190c:	2500      	movs	r5, #0
 801190e:	e7ef      	b.n	80118f0 <_reclaim_reent+0x84>
 8011910:	bd70      	pop	{r4, r5, r6, pc}
 8011912:	bf00      	nop
 8011914:	2400006c 	.word	0x2400006c

08011918 <_lseek_r>:
 8011918:	b538      	push	{r3, r4, r5, lr}
 801191a:	4d07      	ldr	r5, [pc, #28]	; (8011938 <_lseek_r+0x20>)
 801191c:	4604      	mov	r4, r0
 801191e:	4608      	mov	r0, r1
 8011920:	4611      	mov	r1, r2
 8011922:	2200      	movs	r2, #0
 8011924:	602a      	str	r2, [r5, #0]
 8011926:	461a      	mov	r2, r3
 8011928:	f7f0 fd0a 	bl	8002340 <_lseek>
 801192c:	1c43      	adds	r3, r0, #1
 801192e:	d102      	bne.n	8011936 <_lseek_r+0x1e>
 8011930:	682b      	ldr	r3, [r5, #0]
 8011932:	b103      	cbz	r3, 8011936 <_lseek_r+0x1e>
 8011934:	6023      	str	r3, [r4, #0]
 8011936:	bd38      	pop	{r3, r4, r5, pc}
 8011938:	24005694 	.word	0x24005694

0801193c <_read_r>:
 801193c:	b538      	push	{r3, r4, r5, lr}
 801193e:	4d07      	ldr	r5, [pc, #28]	; (801195c <_read_r+0x20>)
 8011940:	4604      	mov	r4, r0
 8011942:	4608      	mov	r0, r1
 8011944:	4611      	mov	r1, r2
 8011946:	2200      	movs	r2, #0
 8011948:	602a      	str	r2, [r5, #0]
 801194a:	461a      	mov	r2, r3
 801194c:	f7f0 fc98 	bl	8002280 <_read>
 8011950:	1c43      	adds	r3, r0, #1
 8011952:	d102      	bne.n	801195a <_read_r+0x1e>
 8011954:	682b      	ldr	r3, [r5, #0]
 8011956:	b103      	cbz	r3, 801195a <_read_r+0x1e>
 8011958:	6023      	str	r3, [r4, #0]
 801195a:	bd38      	pop	{r3, r4, r5, pc}
 801195c:	24005694 	.word	0x24005694

08011960 <_sbrk_r>:
 8011960:	b538      	push	{r3, r4, r5, lr}
 8011962:	4d06      	ldr	r5, [pc, #24]	; (801197c <_sbrk_r+0x1c>)
 8011964:	2300      	movs	r3, #0
 8011966:	4604      	mov	r4, r0
 8011968:	4608      	mov	r0, r1
 801196a:	602b      	str	r3, [r5, #0]
 801196c:	f7f0 fcf6 	bl	800235c <_sbrk>
 8011970:	1c43      	adds	r3, r0, #1
 8011972:	d102      	bne.n	801197a <_sbrk_r+0x1a>
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	b103      	cbz	r3, 801197a <_sbrk_r+0x1a>
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	bd38      	pop	{r3, r4, r5, pc}
 801197c:	24005694 	.word	0x24005694

08011980 <_write_r>:
 8011980:	b538      	push	{r3, r4, r5, lr}
 8011982:	4d07      	ldr	r5, [pc, #28]	; (80119a0 <_write_r+0x20>)
 8011984:	4604      	mov	r4, r0
 8011986:	4608      	mov	r0, r1
 8011988:	4611      	mov	r1, r2
 801198a:	2200      	movs	r2, #0
 801198c:	602a      	str	r2, [r5, #0]
 801198e:	461a      	mov	r2, r3
 8011990:	f7f0 fc93 	bl	80022ba <_write>
 8011994:	1c43      	adds	r3, r0, #1
 8011996:	d102      	bne.n	801199e <_write_r+0x1e>
 8011998:	682b      	ldr	r3, [r5, #0]
 801199a:	b103      	cbz	r3, 801199e <_write_r+0x1e>
 801199c:	6023      	str	r3, [r4, #0]
 801199e:	bd38      	pop	{r3, r4, r5, pc}
 80119a0:	24005694 	.word	0x24005694

080119a4 <__errno>:
 80119a4:	4b01      	ldr	r3, [pc, #4]	; (80119ac <__errno+0x8>)
 80119a6:	6818      	ldr	r0, [r3, #0]
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	2400006c 	.word	0x2400006c

080119b0 <__libc_init_array>:
 80119b0:	b570      	push	{r4, r5, r6, lr}
 80119b2:	4d0d      	ldr	r5, [pc, #52]	; (80119e8 <__libc_init_array+0x38>)
 80119b4:	4c0d      	ldr	r4, [pc, #52]	; (80119ec <__libc_init_array+0x3c>)
 80119b6:	1b64      	subs	r4, r4, r5
 80119b8:	10a4      	asrs	r4, r4, #2
 80119ba:	2600      	movs	r6, #0
 80119bc:	42a6      	cmp	r6, r4
 80119be:	d109      	bne.n	80119d4 <__libc_init_array+0x24>
 80119c0:	4d0b      	ldr	r5, [pc, #44]	; (80119f0 <__libc_init_array+0x40>)
 80119c2:	4c0c      	ldr	r4, [pc, #48]	; (80119f4 <__libc_init_array+0x44>)
 80119c4:	f003 fa48 	bl	8014e58 <_init>
 80119c8:	1b64      	subs	r4, r4, r5
 80119ca:	10a4      	asrs	r4, r4, #2
 80119cc:	2600      	movs	r6, #0
 80119ce:	42a6      	cmp	r6, r4
 80119d0:	d105      	bne.n	80119de <__libc_init_array+0x2e>
 80119d2:	bd70      	pop	{r4, r5, r6, pc}
 80119d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80119d8:	4798      	blx	r3
 80119da:	3601      	adds	r6, #1
 80119dc:	e7ee      	b.n	80119bc <__libc_init_array+0xc>
 80119de:	f855 3b04 	ldr.w	r3, [r5], #4
 80119e2:	4798      	blx	r3
 80119e4:	3601      	adds	r6, #1
 80119e6:	e7f2      	b.n	80119ce <__libc_init_array+0x1e>
 80119e8:	080153c8 	.word	0x080153c8
 80119ec:	080153c8 	.word	0x080153c8
 80119f0:	080153c8 	.word	0x080153c8
 80119f4:	080153cc 	.word	0x080153cc

080119f8 <__retarget_lock_acquire_recursive>:
 80119f8:	4770      	bx	lr

080119fa <__retarget_lock_release_recursive>:
 80119fa:	4770      	bx	lr

080119fc <memcpy>:
 80119fc:	440a      	add	r2, r1
 80119fe:	4291      	cmp	r1, r2
 8011a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a04:	d100      	bne.n	8011a08 <memcpy+0xc>
 8011a06:	4770      	bx	lr
 8011a08:	b510      	push	{r4, lr}
 8011a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a12:	4291      	cmp	r1, r2
 8011a14:	d1f9      	bne.n	8011a0a <memcpy+0xe>
 8011a16:	bd10      	pop	{r4, pc}

08011a18 <nanf>:
 8011a18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011a20 <nanf+0x8>
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	7fc00000 	.word	0x7fc00000

08011a24 <quorem>:
 8011a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a28:	6903      	ldr	r3, [r0, #16]
 8011a2a:	690c      	ldr	r4, [r1, #16]
 8011a2c:	42a3      	cmp	r3, r4
 8011a2e:	4607      	mov	r7, r0
 8011a30:	db7e      	blt.n	8011b30 <quorem+0x10c>
 8011a32:	3c01      	subs	r4, #1
 8011a34:	f101 0814 	add.w	r8, r1, #20
 8011a38:	f100 0514 	add.w	r5, r0, #20
 8011a3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a40:	9301      	str	r3, [sp, #4]
 8011a42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a56:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a5a:	d331      	bcc.n	8011ac0 <quorem+0x9c>
 8011a5c:	f04f 0e00 	mov.w	lr, #0
 8011a60:	4640      	mov	r0, r8
 8011a62:	46ac      	mov	ip, r5
 8011a64:	46f2      	mov	sl, lr
 8011a66:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a6a:	b293      	uxth	r3, r2
 8011a6c:	fb06 e303 	mla	r3, r6, r3, lr
 8011a70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a74:	0c1a      	lsrs	r2, r3, #16
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	ebaa 0303 	sub.w	r3, sl, r3
 8011a7c:	f8dc a000 	ldr.w	sl, [ip]
 8011a80:	fa13 f38a 	uxtah	r3, r3, sl
 8011a84:	fb06 220e 	mla	r2, r6, lr, r2
 8011a88:	9300      	str	r3, [sp, #0]
 8011a8a:	9b00      	ldr	r3, [sp, #0]
 8011a8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a90:	b292      	uxth	r2, r2
 8011a92:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a9a:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a9e:	4581      	cmp	r9, r0
 8011aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aa4:	f84c 3b04 	str.w	r3, [ip], #4
 8011aa8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011aac:	d2db      	bcs.n	8011a66 <quorem+0x42>
 8011aae:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ab2:	b92b      	cbnz	r3, 8011ac0 <quorem+0x9c>
 8011ab4:	9b01      	ldr	r3, [sp, #4]
 8011ab6:	3b04      	subs	r3, #4
 8011ab8:	429d      	cmp	r5, r3
 8011aba:	461a      	mov	r2, r3
 8011abc:	d32c      	bcc.n	8011b18 <quorem+0xf4>
 8011abe:	613c      	str	r4, [r7, #16]
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	f001 f8b7 	bl	8012c34 <__mcmp>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	db22      	blt.n	8011b10 <quorem+0xec>
 8011aca:	3601      	adds	r6, #1
 8011acc:	4629      	mov	r1, r5
 8011ace:	2000      	movs	r0, #0
 8011ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ad4:	f8d1 c000 	ldr.w	ip, [r1]
 8011ad8:	b293      	uxth	r3, r2
 8011ada:	1ac3      	subs	r3, r0, r3
 8011adc:	0c12      	lsrs	r2, r2, #16
 8011ade:	fa13 f38c 	uxtah	r3, r3, ip
 8011ae2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011ae6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011af0:	45c1      	cmp	r9, r8
 8011af2:	f841 3b04 	str.w	r3, [r1], #4
 8011af6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011afa:	d2e9      	bcs.n	8011ad0 <quorem+0xac>
 8011afc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b04:	b922      	cbnz	r2, 8011b10 <quorem+0xec>
 8011b06:	3b04      	subs	r3, #4
 8011b08:	429d      	cmp	r5, r3
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	d30a      	bcc.n	8011b24 <quorem+0x100>
 8011b0e:	613c      	str	r4, [r7, #16]
 8011b10:	4630      	mov	r0, r6
 8011b12:	b003      	add	sp, #12
 8011b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b18:	6812      	ldr	r2, [r2, #0]
 8011b1a:	3b04      	subs	r3, #4
 8011b1c:	2a00      	cmp	r2, #0
 8011b1e:	d1ce      	bne.n	8011abe <quorem+0x9a>
 8011b20:	3c01      	subs	r4, #1
 8011b22:	e7c9      	b.n	8011ab8 <quorem+0x94>
 8011b24:	6812      	ldr	r2, [r2, #0]
 8011b26:	3b04      	subs	r3, #4
 8011b28:	2a00      	cmp	r2, #0
 8011b2a:	d1f0      	bne.n	8011b0e <quorem+0xea>
 8011b2c:	3c01      	subs	r4, #1
 8011b2e:	e7eb      	b.n	8011b08 <quorem+0xe4>
 8011b30:	2000      	movs	r0, #0
 8011b32:	e7ee      	b.n	8011b12 <quorem+0xee>
 8011b34:	0000      	movs	r0, r0
	...

08011b38 <_dtoa_r>:
 8011b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	ed2d 8b02 	vpush	{d8}
 8011b40:	69c5      	ldr	r5, [r0, #28]
 8011b42:	b091      	sub	sp, #68	; 0x44
 8011b44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011b48:	ec59 8b10 	vmov	r8, r9, d0
 8011b4c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011b4e:	9106      	str	r1, [sp, #24]
 8011b50:	4606      	mov	r6, r0
 8011b52:	9208      	str	r2, [sp, #32]
 8011b54:	930c      	str	r3, [sp, #48]	; 0x30
 8011b56:	b975      	cbnz	r5, 8011b76 <_dtoa_r+0x3e>
 8011b58:	2010      	movs	r0, #16
 8011b5a:	f7fe fe31 	bl	80107c0 <malloc>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	61f0      	str	r0, [r6, #28]
 8011b62:	b920      	cbnz	r0, 8011b6e <_dtoa_r+0x36>
 8011b64:	4ba6      	ldr	r3, [pc, #664]	; (8011e00 <_dtoa_r+0x2c8>)
 8011b66:	21ef      	movs	r1, #239	; 0xef
 8011b68:	48a6      	ldr	r0, [pc, #664]	; (8011e04 <_dtoa_r+0x2cc>)
 8011b6a:	f002 fad9 	bl	8014120 <__assert_func>
 8011b6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b72:	6005      	str	r5, [r0, #0]
 8011b74:	60c5      	str	r5, [r0, #12]
 8011b76:	69f3      	ldr	r3, [r6, #28]
 8011b78:	6819      	ldr	r1, [r3, #0]
 8011b7a:	b151      	cbz	r1, 8011b92 <_dtoa_r+0x5a>
 8011b7c:	685a      	ldr	r2, [r3, #4]
 8011b7e:	604a      	str	r2, [r1, #4]
 8011b80:	2301      	movs	r3, #1
 8011b82:	4093      	lsls	r3, r2
 8011b84:	608b      	str	r3, [r1, #8]
 8011b86:	4630      	mov	r0, r6
 8011b88:	f000 fdce 	bl	8012728 <_Bfree>
 8011b8c:	69f3      	ldr	r3, [r6, #28]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	601a      	str	r2, [r3, #0]
 8011b92:	f1b9 0300 	subs.w	r3, r9, #0
 8011b96:	bfbb      	ittet	lt
 8011b98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011b9c:	9303      	strlt	r3, [sp, #12]
 8011b9e:	2300      	movge	r3, #0
 8011ba0:	2201      	movlt	r2, #1
 8011ba2:	bfac      	ite	ge
 8011ba4:	6023      	strge	r3, [r4, #0]
 8011ba6:	6022      	strlt	r2, [r4, #0]
 8011ba8:	4b97      	ldr	r3, [pc, #604]	; (8011e08 <_dtoa_r+0x2d0>)
 8011baa:	9c03      	ldr	r4, [sp, #12]
 8011bac:	43a3      	bics	r3, r4
 8011bae:	d11c      	bne.n	8011bea <_dtoa_r+0xb2>
 8011bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8011bb6:	6013      	str	r3, [r2, #0]
 8011bb8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011bbc:	ea53 0308 	orrs.w	r3, r3, r8
 8011bc0:	f000 84fb 	beq.w	80125ba <_dtoa_r+0xa82>
 8011bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bc6:	b963      	cbnz	r3, 8011be2 <_dtoa_r+0xaa>
 8011bc8:	4b90      	ldr	r3, [pc, #576]	; (8011e0c <_dtoa_r+0x2d4>)
 8011bca:	e020      	b.n	8011c0e <_dtoa_r+0xd6>
 8011bcc:	4b90      	ldr	r3, [pc, #576]	; (8011e10 <_dtoa_r+0x2d8>)
 8011bce:	9301      	str	r3, [sp, #4]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011bd4:	6013      	str	r3, [r2, #0]
 8011bd6:	9801      	ldr	r0, [sp, #4]
 8011bd8:	b011      	add	sp, #68	; 0x44
 8011bda:	ecbd 8b02 	vpop	{d8}
 8011bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be2:	4b8a      	ldr	r3, [pc, #552]	; (8011e0c <_dtoa_r+0x2d4>)
 8011be4:	9301      	str	r3, [sp, #4]
 8011be6:	3303      	adds	r3, #3
 8011be8:	e7f3      	b.n	8011bd2 <_dtoa_r+0x9a>
 8011bea:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011bee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf6:	d10c      	bne.n	8011c12 <_dtoa_r+0xda>
 8011bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	6013      	str	r3, [r2, #0]
 8011bfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f000 84d7 	beq.w	80125b4 <_dtoa_r+0xa7c>
 8011c06:	4b83      	ldr	r3, [pc, #524]	; (8011e14 <_dtoa_r+0x2dc>)
 8011c08:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011c0a:	6013      	str	r3, [r2, #0]
 8011c0c:	3b01      	subs	r3, #1
 8011c0e:	9301      	str	r3, [sp, #4]
 8011c10:	e7e1      	b.n	8011bd6 <_dtoa_r+0x9e>
 8011c12:	aa0e      	add	r2, sp, #56	; 0x38
 8011c14:	a90f      	add	r1, sp, #60	; 0x3c
 8011c16:	4630      	mov	r0, r6
 8011c18:	eeb0 0b48 	vmov.f64	d0, d8
 8011c1c:	f001 f920 	bl	8012e60 <__d2b>
 8011c20:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011c24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c26:	4605      	mov	r5, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d046      	beq.n	8011cba <_dtoa_r+0x182>
 8011c2c:	eeb0 7b48 	vmov.f64	d7, d8
 8011c30:	ee18 1a90 	vmov	r1, s17
 8011c34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011c38:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011c3c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011c40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011c44:	2000      	movs	r0, #0
 8011c46:	ee07 1a90 	vmov	s15, r1
 8011c4a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8011c4e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011de8 <_dtoa_r+0x2b0>
 8011c52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c56:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011df0 <_dtoa_r+0x2b8>
 8011c5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011c5e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011df8 <_dtoa_r+0x2c0>
 8011c62:	ee07 3a90 	vmov	s15, r3
 8011c66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011c6a:	eeb0 7b46 	vmov.f64	d7, d6
 8011c6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011c72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011c76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7e:	ee16 ba90 	vmov	fp, s13
 8011c82:	9009      	str	r0, [sp, #36]	; 0x24
 8011c84:	d508      	bpl.n	8011c98 <_dtoa_r+0x160>
 8011c86:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011c8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c92:	bf18      	it	ne
 8011c94:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011c98:	f1bb 0f16 	cmp.w	fp, #22
 8011c9c:	d82b      	bhi.n	8011cf6 <_dtoa_r+0x1be>
 8011c9e:	495e      	ldr	r1, [pc, #376]	; (8011e18 <_dtoa_r+0x2e0>)
 8011ca0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8011ca4:	ed91 7b00 	vldr	d7, [r1]
 8011ca8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb0:	d501      	bpl.n	8011cb6 <_dtoa_r+0x17e>
 8011cb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	e01e      	b.n	8011cf8 <_dtoa_r+0x1c0>
 8011cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cbc:	4413      	add	r3, r2
 8011cbe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8011cc2:	2920      	cmp	r1, #32
 8011cc4:	bfc1      	itttt	gt
 8011cc6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8011cca:	408c      	lslgt	r4, r1
 8011ccc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8011cd0:	fa28 f101 	lsrgt.w	r1, r8, r1
 8011cd4:	bfd6      	itet	le
 8011cd6:	f1c1 0120 	rsble	r1, r1, #32
 8011cda:	4321      	orrgt	r1, r4
 8011cdc:	fa08 f101 	lslle.w	r1, r8, r1
 8011ce0:	ee07 1a90 	vmov	s15, r1
 8011ce4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	ee17 1a90 	vmov	r1, s15
 8011cee:	2001      	movs	r0, #1
 8011cf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011cf4:	e7a7      	b.n	8011c46 <_dtoa_r+0x10e>
 8011cf6:	2101      	movs	r1, #1
 8011cf8:	1ad2      	subs	r2, r2, r3
 8011cfa:	1e53      	subs	r3, r2, #1
 8011cfc:	9305      	str	r3, [sp, #20]
 8011cfe:	bf45      	ittet	mi
 8011d00:	f1c2 0301 	rsbmi	r3, r2, #1
 8011d04:	9304      	strmi	r3, [sp, #16]
 8011d06:	2300      	movpl	r3, #0
 8011d08:	2300      	movmi	r3, #0
 8011d0a:	bf4c      	ite	mi
 8011d0c:	9305      	strmi	r3, [sp, #20]
 8011d0e:	9304      	strpl	r3, [sp, #16]
 8011d10:	f1bb 0f00 	cmp.w	fp, #0
 8011d14:	910b      	str	r1, [sp, #44]	; 0x2c
 8011d16:	db18      	blt.n	8011d4a <_dtoa_r+0x212>
 8011d18:	9b05      	ldr	r3, [sp, #20]
 8011d1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011d1e:	445b      	add	r3, fp
 8011d20:	9305      	str	r3, [sp, #20]
 8011d22:	2300      	movs	r3, #0
 8011d24:	9a06      	ldr	r2, [sp, #24]
 8011d26:	2a09      	cmp	r2, #9
 8011d28:	d848      	bhi.n	8011dbc <_dtoa_r+0x284>
 8011d2a:	2a05      	cmp	r2, #5
 8011d2c:	bfc4      	itt	gt
 8011d2e:	3a04      	subgt	r2, #4
 8011d30:	9206      	strgt	r2, [sp, #24]
 8011d32:	9a06      	ldr	r2, [sp, #24]
 8011d34:	f1a2 0202 	sub.w	r2, r2, #2
 8011d38:	bfcc      	ite	gt
 8011d3a:	2400      	movgt	r4, #0
 8011d3c:	2401      	movle	r4, #1
 8011d3e:	2a03      	cmp	r2, #3
 8011d40:	d847      	bhi.n	8011dd2 <_dtoa_r+0x29a>
 8011d42:	e8df f002 	tbb	[pc, r2]
 8011d46:	2d0b      	.short	0x2d0b
 8011d48:	392b      	.short	0x392b
 8011d4a:	9b04      	ldr	r3, [sp, #16]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	eba3 030b 	sub.w	r3, r3, fp
 8011d52:	9304      	str	r3, [sp, #16]
 8011d54:	920a      	str	r2, [sp, #40]	; 0x28
 8011d56:	f1cb 0300 	rsb	r3, fp, #0
 8011d5a:	e7e3      	b.n	8011d24 <_dtoa_r+0x1ec>
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	9207      	str	r2, [sp, #28]
 8011d60:	9a08      	ldr	r2, [sp, #32]
 8011d62:	2a00      	cmp	r2, #0
 8011d64:	dc38      	bgt.n	8011dd8 <_dtoa_r+0x2a0>
 8011d66:	f04f 0a01 	mov.w	sl, #1
 8011d6a:	46d1      	mov	r9, sl
 8011d6c:	4652      	mov	r2, sl
 8011d6e:	f8cd a020 	str.w	sl, [sp, #32]
 8011d72:	69f7      	ldr	r7, [r6, #28]
 8011d74:	2100      	movs	r1, #0
 8011d76:	2004      	movs	r0, #4
 8011d78:	f100 0c14 	add.w	ip, r0, #20
 8011d7c:	4594      	cmp	ip, r2
 8011d7e:	d930      	bls.n	8011de2 <_dtoa_r+0x2aa>
 8011d80:	6079      	str	r1, [r7, #4]
 8011d82:	4630      	mov	r0, r6
 8011d84:	930d      	str	r3, [sp, #52]	; 0x34
 8011d86:	f000 fc8f 	bl	80126a8 <_Balloc>
 8011d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d8c:	9001      	str	r0, [sp, #4]
 8011d8e:	4602      	mov	r2, r0
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d145      	bne.n	8011e20 <_dtoa_r+0x2e8>
 8011d94:	4b21      	ldr	r3, [pc, #132]	; (8011e1c <_dtoa_r+0x2e4>)
 8011d96:	f240 11af 	movw	r1, #431	; 0x1af
 8011d9a:	e6e5      	b.n	8011b68 <_dtoa_r+0x30>
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	e7de      	b.n	8011d5e <_dtoa_r+0x226>
 8011da0:	2200      	movs	r2, #0
 8011da2:	9207      	str	r2, [sp, #28]
 8011da4:	9a08      	ldr	r2, [sp, #32]
 8011da6:	eb0b 0a02 	add.w	sl, fp, r2
 8011daa:	f10a 0901 	add.w	r9, sl, #1
 8011dae:	464a      	mov	r2, r9
 8011db0:	2a01      	cmp	r2, #1
 8011db2:	bfb8      	it	lt
 8011db4:	2201      	movlt	r2, #1
 8011db6:	e7dc      	b.n	8011d72 <_dtoa_r+0x23a>
 8011db8:	2201      	movs	r2, #1
 8011dba:	e7f2      	b.n	8011da2 <_dtoa_r+0x26a>
 8011dbc:	2401      	movs	r4, #1
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011dc4:	f04f 3aff 	mov.w	sl, #4294967295
 8011dc8:	2100      	movs	r1, #0
 8011dca:	46d1      	mov	r9, sl
 8011dcc:	2212      	movs	r2, #18
 8011dce:	9108      	str	r1, [sp, #32]
 8011dd0:	e7cf      	b.n	8011d72 <_dtoa_r+0x23a>
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	9207      	str	r2, [sp, #28]
 8011dd6:	e7f5      	b.n	8011dc4 <_dtoa_r+0x28c>
 8011dd8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011ddc:	46d1      	mov	r9, sl
 8011dde:	4652      	mov	r2, sl
 8011de0:	e7c7      	b.n	8011d72 <_dtoa_r+0x23a>
 8011de2:	3101      	adds	r1, #1
 8011de4:	0040      	lsls	r0, r0, #1
 8011de6:	e7c7      	b.n	8011d78 <_dtoa_r+0x240>
 8011de8:	636f4361 	.word	0x636f4361
 8011dec:	3fd287a7 	.word	0x3fd287a7
 8011df0:	8b60c8b3 	.word	0x8b60c8b3
 8011df4:	3fc68a28 	.word	0x3fc68a28
 8011df8:	509f79fb 	.word	0x509f79fb
 8011dfc:	3fd34413 	.word	0x3fd34413
 8011e00:	08014fde 	.word	0x08014fde
 8011e04:	08014ff5 	.word	0x08014ff5
 8011e08:	7ff00000 	.word	0x7ff00000
 8011e0c:	08014fda 	.word	0x08014fda
 8011e10:	08014fd1 	.word	0x08014fd1
 8011e14:	08014fa9 	.word	0x08014fa9
 8011e18:	080150e0 	.word	0x080150e0
 8011e1c:	0801504d 	.word	0x0801504d
 8011e20:	69f2      	ldr	r2, [r6, #28]
 8011e22:	9901      	ldr	r1, [sp, #4]
 8011e24:	6011      	str	r1, [r2, #0]
 8011e26:	f1b9 0f0e 	cmp.w	r9, #14
 8011e2a:	d86c      	bhi.n	8011f06 <_dtoa_r+0x3ce>
 8011e2c:	2c00      	cmp	r4, #0
 8011e2e:	d06a      	beq.n	8011f06 <_dtoa_r+0x3ce>
 8011e30:	f1bb 0f00 	cmp.w	fp, #0
 8011e34:	f340 80a0 	ble.w	8011f78 <_dtoa_r+0x440>
 8011e38:	4ac1      	ldr	r2, [pc, #772]	; (8012140 <_dtoa_r+0x608>)
 8011e3a:	f00b 010f 	and.w	r1, fp, #15
 8011e3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011e42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011e46:	ed92 7b00 	vldr	d7, [r2]
 8011e4a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8011e4e:	f000 8087 	beq.w	8011f60 <_dtoa_r+0x428>
 8011e52:	49bc      	ldr	r1, [pc, #752]	; (8012144 <_dtoa_r+0x60c>)
 8011e54:	ed91 6b08 	vldr	d6, [r1, #32]
 8011e58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011e5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011e60:	f002 020f 	and.w	r2, r2, #15
 8011e64:	2103      	movs	r1, #3
 8011e66:	48b7      	ldr	r0, [pc, #732]	; (8012144 <_dtoa_r+0x60c>)
 8011e68:	2a00      	cmp	r2, #0
 8011e6a:	d17b      	bne.n	8011f64 <_dtoa_r+0x42c>
 8011e6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011e74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	f000 80a0 	beq.w	8011fc4 <_dtoa_r+0x48c>
 8011e84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011e88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e90:	f140 8098 	bpl.w	8011fc4 <_dtoa_r+0x48c>
 8011e94:	f1b9 0f00 	cmp.w	r9, #0
 8011e98:	f000 8094 	beq.w	8011fc4 <_dtoa_r+0x48c>
 8011e9c:	f1ba 0f00 	cmp.w	sl, #0
 8011ea0:	dd2f      	ble.n	8011f02 <_dtoa_r+0x3ca>
 8011ea2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011eaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011eae:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011eb2:	3101      	adds	r1, #1
 8011eb4:	4654      	mov	r4, sl
 8011eb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011eba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011ebe:	ee07 1a90 	vmov	s15, r1
 8011ec2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011ec6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011eca:	ee15 7a90 	vmov	r7, s11
 8011ece:	ec51 0b15 	vmov	r0, r1, d5
 8011ed2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8011ed6:	2c00      	cmp	r4, #0
 8011ed8:	d177      	bne.n	8011fca <_dtoa_r+0x492>
 8011eda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011ede:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011ee2:	ec41 0b17 	vmov	d7, r0, r1
 8011ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eee:	f300 826a 	bgt.w	80123c6 <_dtoa_r+0x88e>
 8011ef2:	eeb1 7b47 	vneg.f64	d7, d7
 8011ef6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efe:	f100 8260 	bmi.w	80123c2 <_dtoa_r+0x88a>
 8011f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011f06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f08:	2a00      	cmp	r2, #0
 8011f0a:	f2c0 811d 	blt.w	8012148 <_dtoa_r+0x610>
 8011f0e:	f1bb 0f0e 	cmp.w	fp, #14
 8011f12:	f300 8119 	bgt.w	8012148 <_dtoa_r+0x610>
 8011f16:	4b8a      	ldr	r3, [pc, #552]	; (8012140 <_dtoa_r+0x608>)
 8011f18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011f1c:	ed93 6b00 	vldr	d6, [r3]
 8011f20:	9b08      	ldr	r3, [sp, #32]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f280 80b7 	bge.w	8012096 <_dtoa_r+0x55e>
 8011f28:	f1b9 0f00 	cmp.w	r9, #0
 8011f2c:	f300 80b3 	bgt.w	8012096 <_dtoa_r+0x55e>
 8011f30:	f040 8246 	bne.w	80123c0 <_dtoa_r+0x888>
 8011f34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011f38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011f3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f48:	464c      	mov	r4, r9
 8011f4a:	464f      	mov	r7, r9
 8011f4c:	f280 821c 	bge.w	8012388 <_dtoa_r+0x850>
 8011f50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f54:	2331      	movs	r3, #49	; 0x31
 8011f56:	f808 3b01 	strb.w	r3, [r8], #1
 8011f5a:	f10b 0b01 	add.w	fp, fp, #1
 8011f5e:	e218      	b.n	8012392 <_dtoa_r+0x85a>
 8011f60:	2102      	movs	r1, #2
 8011f62:	e780      	b.n	8011e66 <_dtoa_r+0x32e>
 8011f64:	07d4      	lsls	r4, r2, #31
 8011f66:	d504      	bpl.n	8011f72 <_dtoa_r+0x43a>
 8011f68:	ed90 6b00 	vldr	d6, [r0]
 8011f6c:	3101      	adds	r1, #1
 8011f6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f72:	1052      	asrs	r2, r2, #1
 8011f74:	3008      	adds	r0, #8
 8011f76:	e777      	b.n	8011e68 <_dtoa_r+0x330>
 8011f78:	d022      	beq.n	8011fc0 <_dtoa_r+0x488>
 8011f7a:	f1cb 0200 	rsb	r2, fp, #0
 8011f7e:	4970      	ldr	r1, [pc, #448]	; (8012140 <_dtoa_r+0x608>)
 8011f80:	f002 000f 	and.w	r0, r2, #15
 8011f84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011f88:	ed91 7b00 	vldr	d7, [r1]
 8011f8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f94:	486b      	ldr	r0, [pc, #428]	; (8012144 <_dtoa_r+0x60c>)
 8011f96:	1112      	asrs	r2, r2, #4
 8011f98:	2400      	movs	r4, #0
 8011f9a:	2102      	movs	r1, #2
 8011f9c:	b92a      	cbnz	r2, 8011faa <_dtoa_r+0x472>
 8011f9e:	2c00      	cmp	r4, #0
 8011fa0:	f43f af6a 	beq.w	8011e78 <_dtoa_r+0x340>
 8011fa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011fa8:	e766      	b.n	8011e78 <_dtoa_r+0x340>
 8011faa:	07d7      	lsls	r7, r2, #31
 8011fac:	d505      	bpl.n	8011fba <_dtoa_r+0x482>
 8011fae:	ed90 6b00 	vldr	d6, [r0]
 8011fb2:	3101      	adds	r1, #1
 8011fb4:	2401      	movs	r4, #1
 8011fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011fba:	1052      	asrs	r2, r2, #1
 8011fbc:	3008      	adds	r0, #8
 8011fbe:	e7ed      	b.n	8011f9c <_dtoa_r+0x464>
 8011fc0:	2102      	movs	r1, #2
 8011fc2:	e759      	b.n	8011e78 <_dtoa_r+0x340>
 8011fc4:	465a      	mov	r2, fp
 8011fc6:	464c      	mov	r4, r9
 8011fc8:	e775      	b.n	8011eb6 <_dtoa_r+0x37e>
 8011fca:	ec41 0b17 	vmov	d7, r0, r1
 8011fce:	495c      	ldr	r1, [pc, #368]	; (8012140 <_dtoa_r+0x608>)
 8011fd0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8011fd4:	ed11 4b02 	vldr	d4, [r1, #-8]
 8011fd8:	9901      	ldr	r1, [sp, #4]
 8011fda:	440c      	add	r4, r1
 8011fdc:	9907      	ldr	r1, [sp, #28]
 8011fde:	b351      	cbz	r1, 8012036 <_dtoa_r+0x4fe>
 8011fe0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011fe4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011fe8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011fec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011ff0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ff4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011ff8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ffc:	ee14 1a90 	vmov	r1, s9
 8012000:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012004:	3130      	adds	r1, #48	; 0x30
 8012006:	ee36 6b45 	vsub.f64	d6, d6, d5
 801200a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012012:	f808 1b01 	strb.w	r1, [r8], #1
 8012016:	d439      	bmi.n	801208c <_dtoa_r+0x554>
 8012018:	ee32 5b46 	vsub.f64	d5, d2, d6
 801201c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012024:	d472      	bmi.n	801210c <_dtoa_r+0x5d4>
 8012026:	45a0      	cmp	r8, r4
 8012028:	f43f af6b 	beq.w	8011f02 <_dtoa_r+0x3ca>
 801202c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012030:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012034:	e7e0      	b.n	8011ff8 <_dtoa_r+0x4c0>
 8012036:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801203a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801203e:	4620      	mov	r0, r4
 8012040:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012044:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012048:	ee14 1a90 	vmov	r1, s9
 801204c:	3130      	adds	r1, #48	; 0x30
 801204e:	f808 1b01 	strb.w	r1, [r8], #1
 8012052:	45a0      	cmp	r8, r4
 8012054:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012058:	ee36 6b45 	vsub.f64	d6, d6, d5
 801205c:	d118      	bne.n	8012090 <_dtoa_r+0x558>
 801205e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012062:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012066:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	dc4d      	bgt.n	801210c <_dtoa_r+0x5d4>
 8012070:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012074:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801207c:	f57f af41 	bpl.w	8011f02 <_dtoa_r+0x3ca>
 8012080:	4680      	mov	r8, r0
 8012082:	3801      	subs	r0, #1
 8012084:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012088:	2b30      	cmp	r3, #48	; 0x30
 801208a:	d0f9      	beq.n	8012080 <_dtoa_r+0x548>
 801208c:	4693      	mov	fp, r2
 801208e:	e02a      	b.n	80120e6 <_dtoa_r+0x5ae>
 8012090:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012094:	e7d6      	b.n	8012044 <_dtoa_r+0x50c>
 8012096:	ed9d 7b02 	vldr	d7, [sp, #8]
 801209a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801209e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80120a2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80120a6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80120aa:	ee15 3a10 	vmov	r3, s10
 80120ae:	3330      	adds	r3, #48	; 0x30
 80120b0:	f808 3b01 	strb.w	r3, [r8], #1
 80120b4:	9b01      	ldr	r3, [sp, #4]
 80120b6:	eba8 0303 	sub.w	r3, r8, r3
 80120ba:	4599      	cmp	r9, r3
 80120bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80120c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80120c4:	d133      	bne.n	801212e <_dtoa_r+0x5f6>
 80120c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80120ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80120ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d2:	dc1a      	bgt.n	801210a <_dtoa_r+0x5d2>
 80120d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80120d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120dc:	d103      	bne.n	80120e6 <_dtoa_r+0x5ae>
 80120de:	ee15 3a10 	vmov	r3, s10
 80120e2:	07d9      	lsls	r1, r3, #31
 80120e4:	d411      	bmi.n	801210a <_dtoa_r+0x5d2>
 80120e6:	4629      	mov	r1, r5
 80120e8:	4630      	mov	r0, r6
 80120ea:	f000 fb1d 	bl	8012728 <_Bfree>
 80120ee:	2300      	movs	r3, #0
 80120f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120f2:	f888 3000 	strb.w	r3, [r8]
 80120f6:	f10b 0301 	add.w	r3, fp, #1
 80120fa:	6013      	str	r3, [r2, #0]
 80120fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f43f ad69 	beq.w	8011bd6 <_dtoa_r+0x9e>
 8012104:	f8c3 8000 	str.w	r8, [r3]
 8012108:	e565      	b.n	8011bd6 <_dtoa_r+0x9e>
 801210a:	465a      	mov	r2, fp
 801210c:	4643      	mov	r3, r8
 801210e:	4698      	mov	r8, r3
 8012110:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8012114:	2939      	cmp	r1, #57	; 0x39
 8012116:	d106      	bne.n	8012126 <_dtoa_r+0x5ee>
 8012118:	9901      	ldr	r1, [sp, #4]
 801211a:	4299      	cmp	r1, r3
 801211c:	d1f7      	bne.n	801210e <_dtoa_r+0x5d6>
 801211e:	9801      	ldr	r0, [sp, #4]
 8012120:	2130      	movs	r1, #48	; 0x30
 8012122:	3201      	adds	r2, #1
 8012124:	7001      	strb	r1, [r0, #0]
 8012126:	7819      	ldrb	r1, [r3, #0]
 8012128:	3101      	adds	r1, #1
 801212a:	7019      	strb	r1, [r3, #0]
 801212c:	e7ae      	b.n	801208c <_dtoa_r+0x554>
 801212e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213a:	d1b2      	bne.n	80120a2 <_dtoa_r+0x56a>
 801213c:	e7d3      	b.n	80120e6 <_dtoa_r+0x5ae>
 801213e:	bf00      	nop
 8012140:	080150e0 	.word	0x080150e0
 8012144:	080150b8 	.word	0x080150b8
 8012148:	9907      	ldr	r1, [sp, #28]
 801214a:	2900      	cmp	r1, #0
 801214c:	f000 80d0 	beq.w	80122f0 <_dtoa_r+0x7b8>
 8012150:	9906      	ldr	r1, [sp, #24]
 8012152:	2901      	cmp	r1, #1
 8012154:	f300 80b4 	bgt.w	80122c0 <_dtoa_r+0x788>
 8012158:	9909      	ldr	r1, [sp, #36]	; 0x24
 801215a:	2900      	cmp	r1, #0
 801215c:	f000 80ac 	beq.w	80122b8 <_dtoa_r+0x780>
 8012160:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012164:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012168:	461c      	mov	r4, r3
 801216a:	9309      	str	r3, [sp, #36]	; 0x24
 801216c:	9b04      	ldr	r3, [sp, #16]
 801216e:	4413      	add	r3, r2
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	9b05      	ldr	r3, [sp, #20]
 8012174:	2101      	movs	r1, #1
 8012176:	4413      	add	r3, r2
 8012178:	4630      	mov	r0, r6
 801217a:	9305      	str	r3, [sp, #20]
 801217c:	f000 fbd4 	bl	8012928 <__i2b>
 8012180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012182:	4607      	mov	r7, r0
 8012184:	f1b8 0f00 	cmp.w	r8, #0
 8012188:	d00d      	beq.n	80121a6 <_dtoa_r+0x66e>
 801218a:	9a05      	ldr	r2, [sp, #20]
 801218c:	2a00      	cmp	r2, #0
 801218e:	dd0a      	ble.n	80121a6 <_dtoa_r+0x66e>
 8012190:	4542      	cmp	r2, r8
 8012192:	9904      	ldr	r1, [sp, #16]
 8012194:	bfa8      	it	ge
 8012196:	4642      	movge	r2, r8
 8012198:	1a89      	subs	r1, r1, r2
 801219a:	9104      	str	r1, [sp, #16]
 801219c:	9905      	ldr	r1, [sp, #20]
 801219e:	eba8 0802 	sub.w	r8, r8, r2
 80121a2:	1a8a      	subs	r2, r1, r2
 80121a4:	9205      	str	r2, [sp, #20]
 80121a6:	b303      	cbz	r3, 80121ea <_dtoa_r+0x6b2>
 80121a8:	9a07      	ldr	r2, [sp, #28]
 80121aa:	2a00      	cmp	r2, #0
 80121ac:	f000 80a5 	beq.w	80122fa <_dtoa_r+0x7c2>
 80121b0:	2c00      	cmp	r4, #0
 80121b2:	dd13      	ble.n	80121dc <_dtoa_r+0x6a4>
 80121b4:	4639      	mov	r1, r7
 80121b6:	4622      	mov	r2, r4
 80121b8:	4630      	mov	r0, r6
 80121ba:	930d      	str	r3, [sp, #52]	; 0x34
 80121bc:	f000 fc74 	bl	8012aa8 <__pow5mult>
 80121c0:	462a      	mov	r2, r5
 80121c2:	4601      	mov	r1, r0
 80121c4:	4607      	mov	r7, r0
 80121c6:	4630      	mov	r0, r6
 80121c8:	f000 fbc4 	bl	8012954 <__multiply>
 80121cc:	4629      	mov	r1, r5
 80121ce:	9009      	str	r0, [sp, #36]	; 0x24
 80121d0:	4630      	mov	r0, r6
 80121d2:	f000 faa9 	bl	8012728 <_Bfree>
 80121d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121da:	4615      	mov	r5, r2
 80121dc:	1b1a      	subs	r2, r3, r4
 80121de:	d004      	beq.n	80121ea <_dtoa_r+0x6b2>
 80121e0:	4629      	mov	r1, r5
 80121e2:	4630      	mov	r0, r6
 80121e4:	f000 fc60 	bl	8012aa8 <__pow5mult>
 80121e8:	4605      	mov	r5, r0
 80121ea:	2101      	movs	r1, #1
 80121ec:	4630      	mov	r0, r6
 80121ee:	f000 fb9b 	bl	8012928 <__i2b>
 80121f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	4604      	mov	r4, r0
 80121f8:	f340 8081 	ble.w	80122fe <_dtoa_r+0x7c6>
 80121fc:	461a      	mov	r2, r3
 80121fe:	4601      	mov	r1, r0
 8012200:	4630      	mov	r0, r6
 8012202:	f000 fc51 	bl	8012aa8 <__pow5mult>
 8012206:	9b06      	ldr	r3, [sp, #24]
 8012208:	2b01      	cmp	r3, #1
 801220a:	4604      	mov	r4, r0
 801220c:	dd7a      	ble.n	8012304 <_dtoa_r+0x7cc>
 801220e:	2300      	movs	r3, #0
 8012210:	9309      	str	r3, [sp, #36]	; 0x24
 8012212:	6922      	ldr	r2, [r4, #16]
 8012214:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012218:	6910      	ldr	r0, [r2, #16]
 801221a:	f000 fb37 	bl	801288c <__hi0bits>
 801221e:	f1c0 0020 	rsb	r0, r0, #32
 8012222:	9b05      	ldr	r3, [sp, #20]
 8012224:	4418      	add	r0, r3
 8012226:	f010 001f 	ands.w	r0, r0, #31
 801222a:	f000 8093 	beq.w	8012354 <_dtoa_r+0x81c>
 801222e:	f1c0 0220 	rsb	r2, r0, #32
 8012232:	2a04      	cmp	r2, #4
 8012234:	f340 8085 	ble.w	8012342 <_dtoa_r+0x80a>
 8012238:	9b04      	ldr	r3, [sp, #16]
 801223a:	f1c0 001c 	rsb	r0, r0, #28
 801223e:	4403      	add	r3, r0
 8012240:	9304      	str	r3, [sp, #16]
 8012242:	9b05      	ldr	r3, [sp, #20]
 8012244:	4480      	add	r8, r0
 8012246:	4403      	add	r3, r0
 8012248:	9305      	str	r3, [sp, #20]
 801224a:	9b04      	ldr	r3, [sp, #16]
 801224c:	2b00      	cmp	r3, #0
 801224e:	dd05      	ble.n	801225c <_dtoa_r+0x724>
 8012250:	4629      	mov	r1, r5
 8012252:	461a      	mov	r2, r3
 8012254:	4630      	mov	r0, r6
 8012256:	f000 fc81 	bl	8012b5c <__lshift>
 801225a:	4605      	mov	r5, r0
 801225c:	9b05      	ldr	r3, [sp, #20]
 801225e:	2b00      	cmp	r3, #0
 8012260:	dd05      	ble.n	801226e <_dtoa_r+0x736>
 8012262:	4621      	mov	r1, r4
 8012264:	461a      	mov	r2, r3
 8012266:	4630      	mov	r0, r6
 8012268:	f000 fc78 	bl	8012b5c <__lshift>
 801226c:	4604      	mov	r4, r0
 801226e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012270:	2b00      	cmp	r3, #0
 8012272:	d071      	beq.n	8012358 <_dtoa_r+0x820>
 8012274:	4621      	mov	r1, r4
 8012276:	4628      	mov	r0, r5
 8012278:	f000 fcdc 	bl	8012c34 <__mcmp>
 801227c:	2800      	cmp	r0, #0
 801227e:	da6b      	bge.n	8012358 <_dtoa_r+0x820>
 8012280:	2300      	movs	r3, #0
 8012282:	4629      	mov	r1, r5
 8012284:	220a      	movs	r2, #10
 8012286:	4630      	mov	r0, r6
 8012288:	f000 fa70 	bl	801276c <__multadd>
 801228c:	9b07      	ldr	r3, [sp, #28]
 801228e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012292:	4605      	mov	r5, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	f000 8197 	beq.w	80125c8 <_dtoa_r+0xa90>
 801229a:	4639      	mov	r1, r7
 801229c:	2300      	movs	r3, #0
 801229e:	220a      	movs	r2, #10
 80122a0:	4630      	mov	r0, r6
 80122a2:	f000 fa63 	bl	801276c <__multadd>
 80122a6:	f1ba 0f00 	cmp.w	sl, #0
 80122aa:	4607      	mov	r7, r0
 80122ac:	f300 8093 	bgt.w	80123d6 <_dtoa_r+0x89e>
 80122b0:	9b06      	ldr	r3, [sp, #24]
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	dc57      	bgt.n	8012366 <_dtoa_r+0x82e>
 80122b6:	e08e      	b.n	80123d6 <_dtoa_r+0x89e>
 80122b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80122be:	e751      	b.n	8012164 <_dtoa_r+0x62c>
 80122c0:	f109 34ff 	add.w	r4, r9, #4294967295
 80122c4:	42a3      	cmp	r3, r4
 80122c6:	bfbf      	itttt	lt
 80122c8:	1ae2      	sublt	r2, r4, r3
 80122ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80122cc:	189b      	addlt	r3, r3, r2
 80122ce:	930a      	strlt	r3, [sp, #40]	; 0x28
 80122d0:	bfae      	itee	ge
 80122d2:	1b1c      	subge	r4, r3, r4
 80122d4:	4623      	movlt	r3, r4
 80122d6:	2400      	movlt	r4, #0
 80122d8:	f1b9 0f00 	cmp.w	r9, #0
 80122dc:	bfb5      	itete	lt
 80122de:	9a04      	ldrlt	r2, [sp, #16]
 80122e0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80122e4:	eba2 0809 	sublt.w	r8, r2, r9
 80122e8:	464a      	movge	r2, r9
 80122ea:	bfb8      	it	lt
 80122ec:	2200      	movlt	r2, #0
 80122ee:	e73c      	b.n	801216a <_dtoa_r+0x632>
 80122f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80122f4:	9f07      	ldr	r7, [sp, #28]
 80122f6:	461c      	mov	r4, r3
 80122f8:	e744      	b.n	8012184 <_dtoa_r+0x64c>
 80122fa:	461a      	mov	r2, r3
 80122fc:	e770      	b.n	80121e0 <_dtoa_r+0x6a8>
 80122fe:	9b06      	ldr	r3, [sp, #24]
 8012300:	2b01      	cmp	r3, #1
 8012302:	dc18      	bgt.n	8012336 <_dtoa_r+0x7fe>
 8012304:	9b02      	ldr	r3, [sp, #8]
 8012306:	b9b3      	cbnz	r3, 8012336 <_dtoa_r+0x7fe>
 8012308:	9b03      	ldr	r3, [sp, #12]
 801230a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801230e:	b9a2      	cbnz	r2, 801233a <_dtoa_r+0x802>
 8012310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012314:	0d12      	lsrs	r2, r2, #20
 8012316:	0512      	lsls	r2, r2, #20
 8012318:	b18a      	cbz	r2, 801233e <_dtoa_r+0x806>
 801231a:	9b04      	ldr	r3, [sp, #16]
 801231c:	3301      	adds	r3, #1
 801231e:	9304      	str	r3, [sp, #16]
 8012320:	9b05      	ldr	r3, [sp, #20]
 8012322:	3301      	adds	r3, #1
 8012324:	9305      	str	r3, [sp, #20]
 8012326:	2301      	movs	r3, #1
 8012328:	9309      	str	r3, [sp, #36]	; 0x24
 801232a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801232c:	2b00      	cmp	r3, #0
 801232e:	f47f af70 	bne.w	8012212 <_dtoa_r+0x6da>
 8012332:	2001      	movs	r0, #1
 8012334:	e775      	b.n	8012222 <_dtoa_r+0x6ea>
 8012336:	2300      	movs	r3, #0
 8012338:	e7f6      	b.n	8012328 <_dtoa_r+0x7f0>
 801233a:	9b02      	ldr	r3, [sp, #8]
 801233c:	e7f4      	b.n	8012328 <_dtoa_r+0x7f0>
 801233e:	9209      	str	r2, [sp, #36]	; 0x24
 8012340:	e7f3      	b.n	801232a <_dtoa_r+0x7f2>
 8012342:	d082      	beq.n	801224a <_dtoa_r+0x712>
 8012344:	9b04      	ldr	r3, [sp, #16]
 8012346:	321c      	adds	r2, #28
 8012348:	4413      	add	r3, r2
 801234a:	9304      	str	r3, [sp, #16]
 801234c:	9b05      	ldr	r3, [sp, #20]
 801234e:	4490      	add	r8, r2
 8012350:	4413      	add	r3, r2
 8012352:	e779      	b.n	8012248 <_dtoa_r+0x710>
 8012354:	4602      	mov	r2, r0
 8012356:	e7f5      	b.n	8012344 <_dtoa_r+0x80c>
 8012358:	f1b9 0f00 	cmp.w	r9, #0
 801235c:	dc36      	bgt.n	80123cc <_dtoa_r+0x894>
 801235e:	9b06      	ldr	r3, [sp, #24]
 8012360:	2b02      	cmp	r3, #2
 8012362:	dd33      	ble.n	80123cc <_dtoa_r+0x894>
 8012364:	46ca      	mov	sl, r9
 8012366:	f1ba 0f00 	cmp.w	sl, #0
 801236a:	d10d      	bne.n	8012388 <_dtoa_r+0x850>
 801236c:	4621      	mov	r1, r4
 801236e:	4653      	mov	r3, sl
 8012370:	2205      	movs	r2, #5
 8012372:	4630      	mov	r0, r6
 8012374:	f000 f9fa 	bl	801276c <__multadd>
 8012378:	4601      	mov	r1, r0
 801237a:	4604      	mov	r4, r0
 801237c:	4628      	mov	r0, r5
 801237e:	f000 fc59 	bl	8012c34 <__mcmp>
 8012382:	2800      	cmp	r0, #0
 8012384:	f73f ade4 	bgt.w	8011f50 <_dtoa_r+0x418>
 8012388:	9b08      	ldr	r3, [sp, #32]
 801238a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801238e:	ea6f 0b03 	mvn.w	fp, r3
 8012392:	f04f 0900 	mov.w	r9, #0
 8012396:	4621      	mov	r1, r4
 8012398:	4630      	mov	r0, r6
 801239a:	f000 f9c5 	bl	8012728 <_Bfree>
 801239e:	2f00      	cmp	r7, #0
 80123a0:	f43f aea1 	beq.w	80120e6 <_dtoa_r+0x5ae>
 80123a4:	f1b9 0f00 	cmp.w	r9, #0
 80123a8:	d005      	beq.n	80123b6 <_dtoa_r+0x87e>
 80123aa:	45b9      	cmp	r9, r7
 80123ac:	d003      	beq.n	80123b6 <_dtoa_r+0x87e>
 80123ae:	4649      	mov	r1, r9
 80123b0:	4630      	mov	r0, r6
 80123b2:	f000 f9b9 	bl	8012728 <_Bfree>
 80123b6:	4639      	mov	r1, r7
 80123b8:	4630      	mov	r0, r6
 80123ba:	f000 f9b5 	bl	8012728 <_Bfree>
 80123be:	e692      	b.n	80120e6 <_dtoa_r+0x5ae>
 80123c0:	2400      	movs	r4, #0
 80123c2:	4627      	mov	r7, r4
 80123c4:	e7e0      	b.n	8012388 <_dtoa_r+0x850>
 80123c6:	4693      	mov	fp, r2
 80123c8:	4627      	mov	r7, r4
 80123ca:	e5c1      	b.n	8011f50 <_dtoa_r+0x418>
 80123cc:	9b07      	ldr	r3, [sp, #28]
 80123ce:	46ca      	mov	sl, r9
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f000 8100 	beq.w	80125d6 <_dtoa_r+0xa9e>
 80123d6:	f1b8 0f00 	cmp.w	r8, #0
 80123da:	dd05      	ble.n	80123e8 <_dtoa_r+0x8b0>
 80123dc:	4639      	mov	r1, r7
 80123de:	4642      	mov	r2, r8
 80123e0:	4630      	mov	r0, r6
 80123e2:	f000 fbbb 	bl	8012b5c <__lshift>
 80123e6:	4607      	mov	r7, r0
 80123e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d05d      	beq.n	80124aa <_dtoa_r+0x972>
 80123ee:	6879      	ldr	r1, [r7, #4]
 80123f0:	4630      	mov	r0, r6
 80123f2:	f000 f959 	bl	80126a8 <_Balloc>
 80123f6:	4680      	mov	r8, r0
 80123f8:	b928      	cbnz	r0, 8012406 <_dtoa_r+0x8ce>
 80123fa:	4b82      	ldr	r3, [pc, #520]	; (8012604 <_dtoa_r+0xacc>)
 80123fc:	4602      	mov	r2, r0
 80123fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012402:	f7ff bbb1 	b.w	8011b68 <_dtoa_r+0x30>
 8012406:	693a      	ldr	r2, [r7, #16]
 8012408:	3202      	adds	r2, #2
 801240a:	0092      	lsls	r2, r2, #2
 801240c:	f107 010c 	add.w	r1, r7, #12
 8012410:	300c      	adds	r0, #12
 8012412:	f7ff faf3 	bl	80119fc <memcpy>
 8012416:	2201      	movs	r2, #1
 8012418:	4641      	mov	r1, r8
 801241a:	4630      	mov	r0, r6
 801241c:	f000 fb9e 	bl	8012b5c <__lshift>
 8012420:	9b01      	ldr	r3, [sp, #4]
 8012422:	3301      	adds	r3, #1
 8012424:	9304      	str	r3, [sp, #16]
 8012426:	9b01      	ldr	r3, [sp, #4]
 8012428:	4453      	add	r3, sl
 801242a:	9308      	str	r3, [sp, #32]
 801242c:	9b02      	ldr	r3, [sp, #8]
 801242e:	f003 0301 	and.w	r3, r3, #1
 8012432:	46b9      	mov	r9, r7
 8012434:	9307      	str	r3, [sp, #28]
 8012436:	4607      	mov	r7, r0
 8012438:	9b04      	ldr	r3, [sp, #16]
 801243a:	4621      	mov	r1, r4
 801243c:	3b01      	subs	r3, #1
 801243e:	4628      	mov	r0, r5
 8012440:	9302      	str	r3, [sp, #8]
 8012442:	f7ff faef 	bl	8011a24 <quorem>
 8012446:	4603      	mov	r3, r0
 8012448:	3330      	adds	r3, #48	; 0x30
 801244a:	9005      	str	r0, [sp, #20]
 801244c:	4649      	mov	r1, r9
 801244e:	4628      	mov	r0, r5
 8012450:	9309      	str	r3, [sp, #36]	; 0x24
 8012452:	f000 fbef 	bl	8012c34 <__mcmp>
 8012456:	463a      	mov	r2, r7
 8012458:	4682      	mov	sl, r0
 801245a:	4621      	mov	r1, r4
 801245c:	4630      	mov	r0, r6
 801245e:	f000 fc05 	bl	8012c6c <__mdiff>
 8012462:	68c2      	ldr	r2, [r0, #12]
 8012464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012466:	4680      	mov	r8, r0
 8012468:	bb0a      	cbnz	r2, 80124ae <_dtoa_r+0x976>
 801246a:	4601      	mov	r1, r0
 801246c:	4628      	mov	r0, r5
 801246e:	f000 fbe1 	bl	8012c34 <__mcmp>
 8012472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012474:	4602      	mov	r2, r0
 8012476:	4641      	mov	r1, r8
 8012478:	4630      	mov	r0, r6
 801247a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801247e:	f000 f953 	bl	8012728 <_Bfree>
 8012482:	9b06      	ldr	r3, [sp, #24]
 8012484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012486:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801248a:	ea43 0102 	orr.w	r1, r3, r2
 801248e:	9b07      	ldr	r3, [sp, #28]
 8012490:	4319      	orrs	r1, r3
 8012492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012494:	d10d      	bne.n	80124b2 <_dtoa_r+0x97a>
 8012496:	2b39      	cmp	r3, #57	; 0x39
 8012498:	d029      	beq.n	80124ee <_dtoa_r+0x9b6>
 801249a:	f1ba 0f00 	cmp.w	sl, #0
 801249e:	dd01      	ble.n	80124a4 <_dtoa_r+0x96c>
 80124a0:	9b05      	ldr	r3, [sp, #20]
 80124a2:	3331      	adds	r3, #49	; 0x31
 80124a4:	9a02      	ldr	r2, [sp, #8]
 80124a6:	7013      	strb	r3, [r2, #0]
 80124a8:	e775      	b.n	8012396 <_dtoa_r+0x85e>
 80124aa:	4638      	mov	r0, r7
 80124ac:	e7b8      	b.n	8012420 <_dtoa_r+0x8e8>
 80124ae:	2201      	movs	r2, #1
 80124b0:	e7e1      	b.n	8012476 <_dtoa_r+0x93e>
 80124b2:	f1ba 0f00 	cmp.w	sl, #0
 80124b6:	db06      	blt.n	80124c6 <_dtoa_r+0x98e>
 80124b8:	9906      	ldr	r1, [sp, #24]
 80124ba:	ea41 0a0a 	orr.w	sl, r1, sl
 80124be:	9907      	ldr	r1, [sp, #28]
 80124c0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80124c4:	d120      	bne.n	8012508 <_dtoa_r+0x9d0>
 80124c6:	2a00      	cmp	r2, #0
 80124c8:	ddec      	ble.n	80124a4 <_dtoa_r+0x96c>
 80124ca:	4629      	mov	r1, r5
 80124cc:	2201      	movs	r2, #1
 80124ce:	4630      	mov	r0, r6
 80124d0:	9304      	str	r3, [sp, #16]
 80124d2:	f000 fb43 	bl	8012b5c <__lshift>
 80124d6:	4621      	mov	r1, r4
 80124d8:	4605      	mov	r5, r0
 80124da:	f000 fbab 	bl	8012c34 <__mcmp>
 80124de:	2800      	cmp	r0, #0
 80124e0:	9b04      	ldr	r3, [sp, #16]
 80124e2:	dc02      	bgt.n	80124ea <_dtoa_r+0x9b2>
 80124e4:	d1de      	bne.n	80124a4 <_dtoa_r+0x96c>
 80124e6:	07da      	lsls	r2, r3, #31
 80124e8:	d5dc      	bpl.n	80124a4 <_dtoa_r+0x96c>
 80124ea:	2b39      	cmp	r3, #57	; 0x39
 80124ec:	d1d8      	bne.n	80124a0 <_dtoa_r+0x968>
 80124ee:	9a02      	ldr	r2, [sp, #8]
 80124f0:	2339      	movs	r3, #57	; 0x39
 80124f2:	7013      	strb	r3, [r2, #0]
 80124f4:	4643      	mov	r3, r8
 80124f6:	4698      	mov	r8, r3
 80124f8:	3b01      	subs	r3, #1
 80124fa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80124fe:	2a39      	cmp	r2, #57	; 0x39
 8012500:	d051      	beq.n	80125a6 <_dtoa_r+0xa6e>
 8012502:	3201      	adds	r2, #1
 8012504:	701a      	strb	r2, [r3, #0]
 8012506:	e746      	b.n	8012396 <_dtoa_r+0x85e>
 8012508:	2a00      	cmp	r2, #0
 801250a:	dd03      	ble.n	8012514 <_dtoa_r+0x9dc>
 801250c:	2b39      	cmp	r3, #57	; 0x39
 801250e:	d0ee      	beq.n	80124ee <_dtoa_r+0x9b6>
 8012510:	3301      	adds	r3, #1
 8012512:	e7c7      	b.n	80124a4 <_dtoa_r+0x96c>
 8012514:	9a04      	ldr	r2, [sp, #16]
 8012516:	9908      	ldr	r1, [sp, #32]
 8012518:	f802 3c01 	strb.w	r3, [r2, #-1]
 801251c:	428a      	cmp	r2, r1
 801251e:	d02b      	beq.n	8012578 <_dtoa_r+0xa40>
 8012520:	4629      	mov	r1, r5
 8012522:	2300      	movs	r3, #0
 8012524:	220a      	movs	r2, #10
 8012526:	4630      	mov	r0, r6
 8012528:	f000 f920 	bl	801276c <__multadd>
 801252c:	45b9      	cmp	r9, r7
 801252e:	4605      	mov	r5, r0
 8012530:	f04f 0300 	mov.w	r3, #0
 8012534:	f04f 020a 	mov.w	r2, #10
 8012538:	4649      	mov	r1, r9
 801253a:	4630      	mov	r0, r6
 801253c:	d107      	bne.n	801254e <_dtoa_r+0xa16>
 801253e:	f000 f915 	bl	801276c <__multadd>
 8012542:	4681      	mov	r9, r0
 8012544:	4607      	mov	r7, r0
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	3301      	adds	r3, #1
 801254a:	9304      	str	r3, [sp, #16]
 801254c:	e774      	b.n	8012438 <_dtoa_r+0x900>
 801254e:	f000 f90d 	bl	801276c <__multadd>
 8012552:	4639      	mov	r1, r7
 8012554:	4681      	mov	r9, r0
 8012556:	2300      	movs	r3, #0
 8012558:	220a      	movs	r2, #10
 801255a:	4630      	mov	r0, r6
 801255c:	f000 f906 	bl	801276c <__multadd>
 8012560:	4607      	mov	r7, r0
 8012562:	e7f0      	b.n	8012546 <_dtoa_r+0xa0e>
 8012564:	f1ba 0f00 	cmp.w	sl, #0
 8012568:	9a01      	ldr	r2, [sp, #4]
 801256a:	bfcc      	ite	gt
 801256c:	46d0      	movgt	r8, sl
 801256e:	f04f 0801 	movle.w	r8, #1
 8012572:	4490      	add	r8, r2
 8012574:	f04f 0900 	mov.w	r9, #0
 8012578:	4629      	mov	r1, r5
 801257a:	2201      	movs	r2, #1
 801257c:	4630      	mov	r0, r6
 801257e:	9302      	str	r3, [sp, #8]
 8012580:	f000 faec 	bl	8012b5c <__lshift>
 8012584:	4621      	mov	r1, r4
 8012586:	4605      	mov	r5, r0
 8012588:	f000 fb54 	bl	8012c34 <__mcmp>
 801258c:	2800      	cmp	r0, #0
 801258e:	dcb1      	bgt.n	80124f4 <_dtoa_r+0x9bc>
 8012590:	d102      	bne.n	8012598 <_dtoa_r+0xa60>
 8012592:	9b02      	ldr	r3, [sp, #8]
 8012594:	07db      	lsls	r3, r3, #31
 8012596:	d4ad      	bmi.n	80124f4 <_dtoa_r+0x9bc>
 8012598:	4643      	mov	r3, r8
 801259a:	4698      	mov	r8, r3
 801259c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125a0:	2a30      	cmp	r2, #48	; 0x30
 80125a2:	d0fa      	beq.n	801259a <_dtoa_r+0xa62>
 80125a4:	e6f7      	b.n	8012396 <_dtoa_r+0x85e>
 80125a6:	9a01      	ldr	r2, [sp, #4]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d1a4      	bne.n	80124f6 <_dtoa_r+0x9be>
 80125ac:	f10b 0b01 	add.w	fp, fp, #1
 80125b0:	2331      	movs	r3, #49	; 0x31
 80125b2:	e778      	b.n	80124a6 <_dtoa_r+0x96e>
 80125b4:	4b14      	ldr	r3, [pc, #80]	; (8012608 <_dtoa_r+0xad0>)
 80125b6:	f7ff bb2a 	b.w	8011c0e <_dtoa_r+0xd6>
 80125ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f47f ab05 	bne.w	8011bcc <_dtoa_r+0x94>
 80125c2:	4b12      	ldr	r3, [pc, #72]	; (801260c <_dtoa_r+0xad4>)
 80125c4:	f7ff bb23 	b.w	8011c0e <_dtoa_r+0xd6>
 80125c8:	f1ba 0f00 	cmp.w	sl, #0
 80125cc:	dc03      	bgt.n	80125d6 <_dtoa_r+0xa9e>
 80125ce:	9b06      	ldr	r3, [sp, #24]
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	f73f aec8 	bgt.w	8012366 <_dtoa_r+0x82e>
 80125d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80125da:	4621      	mov	r1, r4
 80125dc:	4628      	mov	r0, r5
 80125de:	f7ff fa21 	bl	8011a24 <quorem>
 80125e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80125e6:	f808 3b01 	strb.w	r3, [r8], #1
 80125ea:	9a01      	ldr	r2, [sp, #4]
 80125ec:	eba8 0202 	sub.w	r2, r8, r2
 80125f0:	4592      	cmp	sl, r2
 80125f2:	ddb7      	ble.n	8012564 <_dtoa_r+0xa2c>
 80125f4:	4629      	mov	r1, r5
 80125f6:	2300      	movs	r3, #0
 80125f8:	220a      	movs	r2, #10
 80125fa:	4630      	mov	r0, r6
 80125fc:	f000 f8b6 	bl	801276c <__multadd>
 8012600:	4605      	mov	r5, r0
 8012602:	e7ea      	b.n	80125da <_dtoa_r+0xaa2>
 8012604:	0801504d 	.word	0x0801504d
 8012608:	08014fa8 	.word	0x08014fa8
 801260c:	08014fd1 	.word	0x08014fd1

08012610 <_free_r>:
 8012610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012612:	2900      	cmp	r1, #0
 8012614:	d044      	beq.n	80126a0 <_free_r+0x90>
 8012616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801261a:	9001      	str	r0, [sp, #4]
 801261c:	2b00      	cmp	r3, #0
 801261e:	f1a1 0404 	sub.w	r4, r1, #4
 8012622:	bfb8      	it	lt
 8012624:	18e4      	addlt	r4, r4, r3
 8012626:	f7fe f973 	bl	8010910 <__malloc_lock>
 801262a:	4a1e      	ldr	r2, [pc, #120]	; (80126a4 <_free_r+0x94>)
 801262c:	9801      	ldr	r0, [sp, #4]
 801262e:	6813      	ldr	r3, [r2, #0]
 8012630:	b933      	cbnz	r3, 8012640 <_free_r+0x30>
 8012632:	6063      	str	r3, [r4, #4]
 8012634:	6014      	str	r4, [r2, #0]
 8012636:	b003      	add	sp, #12
 8012638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801263c:	f7fe b96e 	b.w	801091c <__malloc_unlock>
 8012640:	42a3      	cmp	r3, r4
 8012642:	d908      	bls.n	8012656 <_free_r+0x46>
 8012644:	6825      	ldr	r5, [r4, #0]
 8012646:	1961      	adds	r1, r4, r5
 8012648:	428b      	cmp	r3, r1
 801264a:	bf01      	itttt	eq
 801264c:	6819      	ldreq	r1, [r3, #0]
 801264e:	685b      	ldreq	r3, [r3, #4]
 8012650:	1949      	addeq	r1, r1, r5
 8012652:	6021      	streq	r1, [r4, #0]
 8012654:	e7ed      	b.n	8012632 <_free_r+0x22>
 8012656:	461a      	mov	r2, r3
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	b10b      	cbz	r3, 8012660 <_free_r+0x50>
 801265c:	42a3      	cmp	r3, r4
 801265e:	d9fa      	bls.n	8012656 <_free_r+0x46>
 8012660:	6811      	ldr	r1, [r2, #0]
 8012662:	1855      	adds	r5, r2, r1
 8012664:	42a5      	cmp	r5, r4
 8012666:	d10b      	bne.n	8012680 <_free_r+0x70>
 8012668:	6824      	ldr	r4, [r4, #0]
 801266a:	4421      	add	r1, r4
 801266c:	1854      	adds	r4, r2, r1
 801266e:	42a3      	cmp	r3, r4
 8012670:	6011      	str	r1, [r2, #0]
 8012672:	d1e0      	bne.n	8012636 <_free_r+0x26>
 8012674:	681c      	ldr	r4, [r3, #0]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	6053      	str	r3, [r2, #4]
 801267a:	440c      	add	r4, r1
 801267c:	6014      	str	r4, [r2, #0]
 801267e:	e7da      	b.n	8012636 <_free_r+0x26>
 8012680:	d902      	bls.n	8012688 <_free_r+0x78>
 8012682:	230c      	movs	r3, #12
 8012684:	6003      	str	r3, [r0, #0]
 8012686:	e7d6      	b.n	8012636 <_free_r+0x26>
 8012688:	6825      	ldr	r5, [r4, #0]
 801268a:	1961      	adds	r1, r4, r5
 801268c:	428b      	cmp	r3, r1
 801268e:	bf04      	itt	eq
 8012690:	6819      	ldreq	r1, [r3, #0]
 8012692:	685b      	ldreq	r3, [r3, #4]
 8012694:	6063      	str	r3, [r4, #4]
 8012696:	bf04      	itt	eq
 8012698:	1949      	addeq	r1, r1, r5
 801269a:	6021      	streq	r1, [r4, #0]
 801269c:	6054      	str	r4, [r2, #4]
 801269e:	e7ca      	b.n	8012636 <_free_r+0x26>
 80126a0:	b003      	add	sp, #12
 80126a2:	bd30      	pop	{r4, r5, pc}
 80126a4:	24005550 	.word	0x24005550

080126a8 <_Balloc>:
 80126a8:	b570      	push	{r4, r5, r6, lr}
 80126aa:	69c6      	ldr	r6, [r0, #28]
 80126ac:	4604      	mov	r4, r0
 80126ae:	460d      	mov	r5, r1
 80126b0:	b976      	cbnz	r6, 80126d0 <_Balloc+0x28>
 80126b2:	2010      	movs	r0, #16
 80126b4:	f7fe f884 	bl	80107c0 <malloc>
 80126b8:	4602      	mov	r2, r0
 80126ba:	61e0      	str	r0, [r4, #28]
 80126bc:	b920      	cbnz	r0, 80126c8 <_Balloc+0x20>
 80126be:	4b18      	ldr	r3, [pc, #96]	; (8012720 <_Balloc+0x78>)
 80126c0:	4818      	ldr	r0, [pc, #96]	; (8012724 <_Balloc+0x7c>)
 80126c2:	216b      	movs	r1, #107	; 0x6b
 80126c4:	f001 fd2c 	bl	8014120 <__assert_func>
 80126c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126cc:	6006      	str	r6, [r0, #0]
 80126ce:	60c6      	str	r6, [r0, #12]
 80126d0:	69e6      	ldr	r6, [r4, #28]
 80126d2:	68f3      	ldr	r3, [r6, #12]
 80126d4:	b183      	cbz	r3, 80126f8 <_Balloc+0x50>
 80126d6:	69e3      	ldr	r3, [r4, #28]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80126de:	b9b8      	cbnz	r0, 8012710 <_Balloc+0x68>
 80126e0:	2101      	movs	r1, #1
 80126e2:	fa01 f605 	lsl.w	r6, r1, r5
 80126e6:	1d72      	adds	r2, r6, #5
 80126e8:	0092      	lsls	r2, r2, #2
 80126ea:	4620      	mov	r0, r4
 80126ec:	f001 fd36 	bl	801415c <_calloc_r>
 80126f0:	b160      	cbz	r0, 801270c <_Balloc+0x64>
 80126f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80126f6:	e00e      	b.n	8012716 <_Balloc+0x6e>
 80126f8:	2221      	movs	r2, #33	; 0x21
 80126fa:	2104      	movs	r1, #4
 80126fc:	4620      	mov	r0, r4
 80126fe:	f001 fd2d 	bl	801415c <_calloc_r>
 8012702:	69e3      	ldr	r3, [r4, #28]
 8012704:	60f0      	str	r0, [r6, #12]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1e4      	bne.n	80126d6 <_Balloc+0x2e>
 801270c:	2000      	movs	r0, #0
 801270e:	bd70      	pop	{r4, r5, r6, pc}
 8012710:	6802      	ldr	r2, [r0, #0]
 8012712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012716:	2300      	movs	r3, #0
 8012718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801271c:	e7f7      	b.n	801270e <_Balloc+0x66>
 801271e:	bf00      	nop
 8012720:	08014fde 	.word	0x08014fde
 8012724:	0801505e 	.word	0x0801505e

08012728 <_Bfree>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	69c6      	ldr	r6, [r0, #28]
 801272c:	4605      	mov	r5, r0
 801272e:	460c      	mov	r4, r1
 8012730:	b976      	cbnz	r6, 8012750 <_Bfree+0x28>
 8012732:	2010      	movs	r0, #16
 8012734:	f7fe f844 	bl	80107c0 <malloc>
 8012738:	4602      	mov	r2, r0
 801273a:	61e8      	str	r0, [r5, #28]
 801273c:	b920      	cbnz	r0, 8012748 <_Bfree+0x20>
 801273e:	4b09      	ldr	r3, [pc, #36]	; (8012764 <_Bfree+0x3c>)
 8012740:	4809      	ldr	r0, [pc, #36]	; (8012768 <_Bfree+0x40>)
 8012742:	218f      	movs	r1, #143	; 0x8f
 8012744:	f001 fcec 	bl	8014120 <__assert_func>
 8012748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801274c:	6006      	str	r6, [r0, #0]
 801274e:	60c6      	str	r6, [r0, #12]
 8012750:	b13c      	cbz	r4, 8012762 <_Bfree+0x3a>
 8012752:	69eb      	ldr	r3, [r5, #28]
 8012754:	6862      	ldr	r2, [r4, #4]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801275c:	6021      	str	r1, [r4, #0]
 801275e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012762:	bd70      	pop	{r4, r5, r6, pc}
 8012764:	08014fde 	.word	0x08014fde
 8012768:	0801505e 	.word	0x0801505e

0801276c <__multadd>:
 801276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012770:	690d      	ldr	r5, [r1, #16]
 8012772:	4607      	mov	r7, r0
 8012774:	460c      	mov	r4, r1
 8012776:	461e      	mov	r6, r3
 8012778:	f101 0c14 	add.w	ip, r1, #20
 801277c:	2000      	movs	r0, #0
 801277e:	f8dc 3000 	ldr.w	r3, [ip]
 8012782:	b299      	uxth	r1, r3
 8012784:	fb02 6101 	mla	r1, r2, r1, r6
 8012788:	0c1e      	lsrs	r6, r3, #16
 801278a:	0c0b      	lsrs	r3, r1, #16
 801278c:	fb02 3306 	mla	r3, r2, r6, r3
 8012790:	b289      	uxth	r1, r1
 8012792:	3001      	adds	r0, #1
 8012794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012798:	4285      	cmp	r5, r0
 801279a:	f84c 1b04 	str.w	r1, [ip], #4
 801279e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80127a2:	dcec      	bgt.n	801277e <__multadd+0x12>
 80127a4:	b30e      	cbz	r6, 80127ea <__multadd+0x7e>
 80127a6:	68a3      	ldr	r3, [r4, #8]
 80127a8:	42ab      	cmp	r3, r5
 80127aa:	dc19      	bgt.n	80127e0 <__multadd+0x74>
 80127ac:	6861      	ldr	r1, [r4, #4]
 80127ae:	4638      	mov	r0, r7
 80127b0:	3101      	adds	r1, #1
 80127b2:	f7ff ff79 	bl	80126a8 <_Balloc>
 80127b6:	4680      	mov	r8, r0
 80127b8:	b928      	cbnz	r0, 80127c6 <__multadd+0x5a>
 80127ba:	4602      	mov	r2, r0
 80127bc:	4b0c      	ldr	r3, [pc, #48]	; (80127f0 <__multadd+0x84>)
 80127be:	480d      	ldr	r0, [pc, #52]	; (80127f4 <__multadd+0x88>)
 80127c0:	21ba      	movs	r1, #186	; 0xba
 80127c2:	f001 fcad 	bl	8014120 <__assert_func>
 80127c6:	6922      	ldr	r2, [r4, #16]
 80127c8:	3202      	adds	r2, #2
 80127ca:	f104 010c 	add.w	r1, r4, #12
 80127ce:	0092      	lsls	r2, r2, #2
 80127d0:	300c      	adds	r0, #12
 80127d2:	f7ff f913 	bl	80119fc <memcpy>
 80127d6:	4621      	mov	r1, r4
 80127d8:	4638      	mov	r0, r7
 80127da:	f7ff ffa5 	bl	8012728 <_Bfree>
 80127de:	4644      	mov	r4, r8
 80127e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80127e4:	3501      	adds	r5, #1
 80127e6:	615e      	str	r6, [r3, #20]
 80127e8:	6125      	str	r5, [r4, #16]
 80127ea:	4620      	mov	r0, r4
 80127ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f0:	0801504d 	.word	0x0801504d
 80127f4:	0801505e 	.word	0x0801505e

080127f8 <__s2b>:
 80127f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127fc:	460c      	mov	r4, r1
 80127fe:	4615      	mov	r5, r2
 8012800:	461f      	mov	r7, r3
 8012802:	2209      	movs	r2, #9
 8012804:	3308      	adds	r3, #8
 8012806:	4606      	mov	r6, r0
 8012808:	fb93 f3f2 	sdiv	r3, r3, r2
 801280c:	2100      	movs	r1, #0
 801280e:	2201      	movs	r2, #1
 8012810:	429a      	cmp	r2, r3
 8012812:	db09      	blt.n	8012828 <__s2b+0x30>
 8012814:	4630      	mov	r0, r6
 8012816:	f7ff ff47 	bl	80126a8 <_Balloc>
 801281a:	b940      	cbnz	r0, 801282e <__s2b+0x36>
 801281c:	4602      	mov	r2, r0
 801281e:	4b19      	ldr	r3, [pc, #100]	; (8012884 <__s2b+0x8c>)
 8012820:	4819      	ldr	r0, [pc, #100]	; (8012888 <__s2b+0x90>)
 8012822:	21d3      	movs	r1, #211	; 0xd3
 8012824:	f001 fc7c 	bl	8014120 <__assert_func>
 8012828:	0052      	lsls	r2, r2, #1
 801282a:	3101      	adds	r1, #1
 801282c:	e7f0      	b.n	8012810 <__s2b+0x18>
 801282e:	9b08      	ldr	r3, [sp, #32]
 8012830:	6143      	str	r3, [r0, #20]
 8012832:	2d09      	cmp	r5, #9
 8012834:	f04f 0301 	mov.w	r3, #1
 8012838:	6103      	str	r3, [r0, #16]
 801283a:	dd16      	ble.n	801286a <__s2b+0x72>
 801283c:	f104 0909 	add.w	r9, r4, #9
 8012840:	46c8      	mov	r8, r9
 8012842:	442c      	add	r4, r5
 8012844:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012848:	4601      	mov	r1, r0
 801284a:	3b30      	subs	r3, #48	; 0x30
 801284c:	220a      	movs	r2, #10
 801284e:	4630      	mov	r0, r6
 8012850:	f7ff ff8c 	bl	801276c <__multadd>
 8012854:	45a0      	cmp	r8, r4
 8012856:	d1f5      	bne.n	8012844 <__s2b+0x4c>
 8012858:	f1a5 0408 	sub.w	r4, r5, #8
 801285c:	444c      	add	r4, r9
 801285e:	1b2d      	subs	r5, r5, r4
 8012860:	1963      	adds	r3, r4, r5
 8012862:	42bb      	cmp	r3, r7
 8012864:	db04      	blt.n	8012870 <__s2b+0x78>
 8012866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801286a:	340a      	adds	r4, #10
 801286c:	2509      	movs	r5, #9
 801286e:	e7f6      	b.n	801285e <__s2b+0x66>
 8012870:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012874:	4601      	mov	r1, r0
 8012876:	3b30      	subs	r3, #48	; 0x30
 8012878:	220a      	movs	r2, #10
 801287a:	4630      	mov	r0, r6
 801287c:	f7ff ff76 	bl	801276c <__multadd>
 8012880:	e7ee      	b.n	8012860 <__s2b+0x68>
 8012882:	bf00      	nop
 8012884:	0801504d 	.word	0x0801504d
 8012888:	0801505e 	.word	0x0801505e

0801288c <__hi0bits>:
 801288c:	0c03      	lsrs	r3, r0, #16
 801288e:	041b      	lsls	r3, r3, #16
 8012890:	b9d3      	cbnz	r3, 80128c8 <__hi0bits+0x3c>
 8012892:	0400      	lsls	r0, r0, #16
 8012894:	2310      	movs	r3, #16
 8012896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801289a:	bf04      	itt	eq
 801289c:	0200      	lsleq	r0, r0, #8
 801289e:	3308      	addeq	r3, #8
 80128a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80128a4:	bf04      	itt	eq
 80128a6:	0100      	lsleq	r0, r0, #4
 80128a8:	3304      	addeq	r3, #4
 80128aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80128ae:	bf04      	itt	eq
 80128b0:	0080      	lsleq	r0, r0, #2
 80128b2:	3302      	addeq	r3, #2
 80128b4:	2800      	cmp	r0, #0
 80128b6:	db05      	blt.n	80128c4 <__hi0bits+0x38>
 80128b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80128bc:	f103 0301 	add.w	r3, r3, #1
 80128c0:	bf08      	it	eq
 80128c2:	2320      	moveq	r3, #32
 80128c4:	4618      	mov	r0, r3
 80128c6:	4770      	bx	lr
 80128c8:	2300      	movs	r3, #0
 80128ca:	e7e4      	b.n	8012896 <__hi0bits+0xa>

080128cc <__lo0bits>:
 80128cc:	6803      	ldr	r3, [r0, #0]
 80128ce:	f013 0207 	ands.w	r2, r3, #7
 80128d2:	d00c      	beq.n	80128ee <__lo0bits+0x22>
 80128d4:	07d9      	lsls	r1, r3, #31
 80128d6:	d422      	bmi.n	801291e <__lo0bits+0x52>
 80128d8:	079a      	lsls	r2, r3, #30
 80128da:	bf49      	itett	mi
 80128dc:	085b      	lsrmi	r3, r3, #1
 80128de:	089b      	lsrpl	r3, r3, #2
 80128e0:	6003      	strmi	r3, [r0, #0]
 80128e2:	2201      	movmi	r2, #1
 80128e4:	bf5c      	itt	pl
 80128e6:	6003      	strpl	r3, [r0, #0]
 80128e8:	2202      	movpl	r2, #2
 80128ea:	4610      	mov	r0, r2
 80128ec:	4770      	bx	lr
 80128ee:	b299      	uxth	r1, r3
 80128f0:	b909      	cbnz	r1, 80128f6 <__lo0bits+0x2a>
 80128f2:	0c1b      	lsrs	r3, r3, #16
 80128f4:	2210      	movs	r2, #16
 80128f6:	b2d9      	uxtb	r1, r3
 80128f8:	b909      	cbnz	r1, 80128fe <__lo0bits+0x32>
 80128fa:	3208      	adds	r2, #8
 80128fc:	0a1b      	lsrs	r3, r3, #8
 80128fe:	0719      	lsls	r1, r3, #28
 8012900:	bf04      	itt	eq
 8012902:	091b      	lsreq	r3, r3, #4
 8012904:	3204      	addeq	r2, #4
 8012906:	0799      	lsls	r1, r3, #30
 8012908:	bf04      	itt	eq
 801290a:	089b      	lsreq	r3, r3, #2
 801290c:	3202      	addeq	r2, #2
 801290e:	07d9      	lsls	r1, r3, #31
 8012910:	d403      	bmi.n	801291a <__lo0bits+0x4e>
 8012912:	085b      	lsrs	r3, r3, #1
 8012914:	f102 0201 	add.w	r2, r2, #1
 8012918:	d003      	beq.n	8012922 <__lo0bits+0x56>
 801291a:	6003      	str	r3, [r0, #0]
 801291c:	e7e5      	b.n	80128ea <__lo0bits+0x1e>
 801291e:	2200      	movs	r2, #0
 8012920:	e7e3      	b.n	80128ea <__lo0bits+0x1e>
 8012922:	2220      	movs	r2, #32
 8012924:	e7e1      	b.n	80128ea <__lo0bits+0x1e>
	...

08012928 <__i2b>:
 8012928:	b510      	push	{r4, lr}
 801292a:	460c      	mov	r4, r1
 801292c:	2101      	movs	r1, #1
 801292e:	f7ff febb 	bl	80126a8 <_Balloc>
 8012932:	4602      	mov	r2, r0
 8012934:	b928      	cbnz	r0, 8012942 <__i2b+0x1a>
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <__i2b+0x24>)
 8012938:	4805      	ldr	r0, [pc, #20]	; (8012950 <__i2b+0x28>)
 801293a:	f240 1145 	movw	r1, #325	; 0x145
 801293e:	f001 fbef 	bl	8014120 <__assert_func>
 8012942:	2301      	movs	r3, #1
 8012944:	6144      	str	r4, [r0, #20]
 8012946:	6103      	str	r3, [r0, #16]
 8012948:	bd10      	pop	{r4, pc}
 801294a:	bf00      	nop
 801294c:	0801504d 	.word	0x0801504d
 8012950:	0801505e 	.word	0x0801505e

08012954 <__multiply>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	4691      	mov	r9, r2
 801295a:	690a      	ldr	r2, [r1, #16]
 801295c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012960:	429a      	cmp	r2, r3
 8012962:	bfb8      	it	lt
 8012964:	460b      	movlt	r3, r1
 8012966:	460c      	mov	r4, r1
 8012968:	bfbc      	itt	lt
 801296a:	464c      	movlt	r4, r9
 801296c:	4699      	movlt	r9, r3
 801296e:	6927      	ldr	r7, [r4, #16]
 8012970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012974:	68a3      	ldr	r3, [r4, #8]
 8012976:	6861      	ldr	r1, [r4, #4]
 8012978:	eb07 060a 	add.w	r6, r7, sl
 801297c:	42b3      	cmp	r3, r6
 801297e:	b085      	sub	sp, #20
 8012980:	bfb8      	it	lt
 8012982:	3101      	addlt	r1, #1
 8012984:	f7ff fe90 	bl	80126a8 <_Balloc>
 8012988:	b930      	cbnz	r0, 8012998 <__multiply+0x44>
 801298a:	4602      	mov	r2, r0
 801298c:	4b44      	ldr	r3, [pc, #272]	; (8012aa0 <__multiply+0x14c>)
 801298e:	4845      	ldr	r0, [pc, #276]	; (8012aa4 <__multiply+0x150>)
 8012990:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012994:	f001 fbc4 	bl	8014120 <__assert_func>
 8012998:	f100 0514 	add.w	r5, r0, #20
 801299c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80129a0:	462b      	mov	r3, r5
 80129a2:	2200      	movs	r2, #0
 80129a4:	4543      	cmp	r3, r8
 80129a6:	d321      	bcc.n	80129ec <__multiply+0x98>
 80129a8:	f104 0314 	add.w	r3, r4, #20
 80129ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80129b0:	f109 0314 	add.w	r3, r9, #20
 80129b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80129b8:	9202      	str	r2, [sp, #8]
 80129ba:	1b3a      	subs	r2, r7, r4
 80129bc:	3a15      	subs	r2, #21
 80129be:	f022 0203 	bic.w	r2, r2, #3
 80129c2:	3204      	adds	r2, #4
 80129c4:	f104 0115 	add.w	r1, r4, #21
 80129c8:	428f      	cmp	r7, r1
 80129ca:	bf38      	it	cc
 80129cc:	2204      	movcc	r2, #4
 80129ce:	9201      	str	r2, [sp, #4]
 80129d0:	9a02      	ldr	r2, [sp, #8]
 80129d2:	9303      	str	r3, [sp, #12]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d80c      	bhi.n	80129f2 <__multiply+0x9e>
 80129d8:	2e00      	cmp	r6, #0
 80129da:	dd03      	ble.n	80129e4 <__multiply+0x90>
 80129dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d05b      	beq.n	8012a9c <__multiply+0x148>
 80129e4:	6106      	str	r6, [r0, #16]
 80129e6:	b005      	add	sp, #20
 80129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	f843 2b04 	str.w	r2, [r3], #4
 80129f0:	e7d8      	b.n	80129a4 <__multiply+0x50>
 80129f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80129f6:	f1ba 0f00 	cmp.w	sl, #0
 80129fa:	d024      	beq.n	8012a46 <__multiply+0xf2>
 80129fc:	f104 0e14 	add.w	lr, r4, #20
 8012a00:	46a9      	mov	r9, r5
 8012a02:	f04f 0c00 	mov.w	ip, #0
 8012a06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a0a:	f8d9 1000 	ldr.w	r1, [r9]
 8012a0e:	fa1f fb82 	uxth.w	fp, r2
 8012a12:	b289      	uxth	r1, r1
 8012a14:	fb0a 110b 	mla	r1, sl, fp, r1
 8012a18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8012a20:	4461      	add	r1, ip
 8012a22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a26:	fb0a c20b 	mla	r2, sl, fp, ip
 8012a2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012a2e:	b289      	uxth	r1, r1
 8012a30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012a34:	4577      	cmp	r7, lr
 8012a36:	f849 1b04 	str.w	r1, [r9], #4
 8012a3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a3e:	d8e2      	bhi.n	8012a06 <__multiply+0xb2>
 8012a40:	9a01      	ldr	r2, [sp, #4]
 8012a42:	f845 c002 	str.w	ip, [r5, r2]
 8012a46:	9a03      	ldr	r2, [sp, #12]
 8012a48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012a4c:	3304      	adds	r3, #4
 8012a4e:	f1b9 0f00 	cmp.w	r9, #0
 8012a52:	d021      	beq.n	8012a98 <__multiply+0x144>
 8012a54:	6829      	ldr	r1, [r5, #0]
 8012a56:	f104 0c14 	add.w	ip, r4, #20
 8012a5a:	46ae      	mov	lr, r5
 8012a5c:	f04f 0a00 	mov.w	sl, #0
 8012a60:	f8bc b000 	ldrh.w	fp, [ip]
 8012a64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012a68:	fb09 220b 	mla	r2, r9, fp, r2
 8012a6c:	4452      	add	r2, sl
 8012a6e:	b289      	uxth	r1, r1
 8012a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012a74:	f84e 1b04 	str.w	r1, [lr], #4
 8012a78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012a7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012a80:	f8be 1000 	ldrh.w	r1, [lr]
 8012a84:	fb09 110a 	mla	r1, r9, sl, r1
 8012a88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012a8c:	4567      	cmp	r7, ip
 8012a8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012a92:	d8e5      	bhi.n	8012a60 <__multiply+0x10c>
 8012a94:	9a01      	ldr	r2, [sp, #4]
 8012a96:	50a9      	str	r1, [r5, r2]
 8012a98:	3504      	adds	r5, #4
 8012a9a:	e799      	b.n	80129d0 <__multiply+0x7c>
 8012a9c:	3e01      	subs	r6, #1
 8012a9e:	e79b      	b.n	80129d8 <__multiply+0x84>
 8012aa0:	0801504d 	.word	0x0801504d
 8012aa4:	0801505e 	.word	0x0801505e

08012aa8 <__pow5mult>:
 8012aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aac:	4615      	mov	r5, r2
 8012aae:	f012 0203 	ands.w	r2, r2, #3
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	460f      	mov	r7, r1
 8012ab6:	d007      	beq.n	8012ac8 <__pow5mult+0x20>
 8012ab8:	4c25      	ldr	r4, [pc, #148]	; (8012b50 <__pow5mult+0xa8>)
 8012aba:	3a01      	subs	r2, #1
 8012abc:	2300      	movs	r3, #0
 8012abe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012ac2:	f7ff fe53 	bl	801276c <__multadd>
 8012ac6:	4607      	mov	r7, r0
 8012ac8:	10ad      	asrs	r5, r5, #2
 8012aca:	d03d      	beq.n	8012b48 <__pow5mult+0xa0>
 8012acc:	69f4      	ldr	r4, [r6, #28]
 8012ace:	b97c      	cbnz	r4, 8012af0 <__pow5mult+0x48>
 8012ad0:	2010      	movs	r0, #16
 8012ad2:	f7fd fe75 	bl	80107c0 <malloc>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	61f0      	str	r0, [r6, #28]
 8012ada:	b928      	cbnz	r0, 8012ae8 <__pow5mult+0x40>
 8012adc:	4b1d      	ldr	r3, [pc, #116]	; (8012b54 <__pow5mult+0xac>)
 8012ade:	481e      	ldr	r0, [pc, #120]	; (8012b58 <__pow5mult+0xb0>)
 8012ae0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012ae4:	f001 fb1c 	bl	8014120 <__assert_func>
 8012ae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012aec:	6004      	str	r4, [r0, #0]
 8012aee:	60c4      	str	r4, [r0, #12]
 8012af0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012af8:	b94c      	cbnz	r4, 8012b0e <__pow5mult+0x66>
 8012afa:	f240 2171 	movw	r1, #625	; 0x271
 8012afe:	4630      	mov	r0, r6
 8012b00:	f7ff ff12 	bl	8012928 <__i2b>
 8012b04:	2300      	movs	r3, #0
 8012b06:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	6003      	str	r3, [r0, #0]
 8012b0e:	f04f 0900 	mov.w	r9, #0
 8012b12:	07eb      	lsls	r3, r5, #31
 8012b14:	d50a      	bpl.n	8012b2c <__pow5mult+0x84>
 8012b16:	4639      	mov	r1, r7
 8012b18:	4622      	mov	r2, r4
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f7ff ff1a 	bl	8012954 <__multiply>
 8012b20:	4639      	mov	r1, r7
 8012b22:	4680      	mov	r8, r0
 8012b24:	4630      	mov	r0, r6
 8012b26:	f7ff fdff 	bl	8012728 <_Bfree>
 8012b2a:	4647      	mov	r7, r8
 8012b2c:	106d      	asrs	r5, r5, #1
 8012b2e:	d00b      	beq.n	8012b48 <__pow5mult+0xa0>
 8012b30:	6820      	ldr	r0, [r4, #0]
 8012b32:	b938      	cbnz	r0, 8012b44 <__pow5mult+0x9c>
 8012b34:	4622      	mov	r2, r4
 8012b36:	4621      	mov	r1, r4
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7ff ff0b 	bl	8012954 <__multiply>
 8012b3e:	6020      	str	r0, [r4, #0]
 8012b40:	f8c0 9000 	str.w	r9, [r0]
 8012b44:	4604      	mov	r4, r0
 8012b46:	e7e4      	b.n	8012b12 <__pow5mult+0x6a>
 8012b48:	4638      	mov	r0, r7
 8012b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b4e:	bf00      	nop
 8012b50:	080151a8 	.word	0x080151a8
 8012b54:	08014fde 	.word	0x08014fde
 8012b58:	0801505e 	.word	0x0801505e

08012b5c <__lshift>:
 8012b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b60:	460c      	mov	r4, r1
 8012b62:	6849      	ldr	r1, [r1, #4]
 8012b64:	6923      	ldr	r3, [r4, #16]
 8012b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b6a:	68a3      	ldr	r3, [r4, #8]
 8012b6c:	4607      	mov	r7, r0
 8012b6e:	4691      	mov	r9, r2
 8012b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b74:	f108 0601 	add.w	r6, r8, #1
 8012b78:	42b3      	cmp	r3, r6
 8012b7a:	db0b      	blt.n	8012b94 <__lshift+0x38>
 8012b7c:	4638      	mov	r0, r7
 8012b7e:	f7ff fd93 	bl	80126a8 <_Balloc>
 8012b82:	4605      	mov	r5, r0
 8012b84:	b948      	cbnz	r0, 8012b9a <__lshift+0x3e>
 8012b86:	4602      	mov	r2, r0
 8012b88:	4b28      	ldr	r3, [pc, #160]	; (8012c2c <__lshift+0xd0>)
 8012b8a:	4829      	ldr	r0, [pc, #164]	; (8012c30 <__lshift+0xd4>)
 8012b8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012b90:	f001 fac6 	bl	8014120 <__assert_func>
 8012b94:	3101      	adds	r1, #1
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	e7ee      	b.n	8012b78 <__lshift+0x1c>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	f100 0114 	add.w	r1, r0, #20
 8012ba0:	f100 0210 	add.w	r2, r0, #16
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	4553      	cmp	r3, sl
 8012ba8:	db33      	blt.n	8012c12 <__lshift+0xb6>
 8012baa:	6920      	ldr	r0, [r4, #16]
 8012bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012bb0:	f104 0314 	add.w	r3, r4, #20
 8012bb4:	f019 091f 	ands.w	r9, r9, #31
 8012bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012bbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012bc0:	d02b      	beq.n	8012c1a <__lshift+0xbe>
 8012bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8012bc6:	468a      	mov	sl, r1
 8012bc8:	2200      	movs	r2, #0
 8012bca:	6818      	ldr	r0, [r3, #0]
 8012bcc:	fa00 f009 	lsl.w	r0, r0, r9
 8012bd0:	4310      	orrs	r0, r2
 8012bd2:	f84a 0b04 	str.w	r0, [sl], #4
 8012bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bda:	459c      	cmp	ip, r3
 8012bdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8012be0:	d8f3      	bhi.n	8012bca <__lshift+0x6e>
 8012be2:	ebac 0304 	sub.w	r3, ip, r4
 8012be6:	3b15      	subs	r3, #21
 8012be8:	f023 0303 	bic.w	r3, r3, #3
 8012bec:	3304      	adds	r3, #4
 8012bee:	f104 0015 	add.w	r0, r4, #21
 8012bf2:	4584      	cmp	ip, r0
 8012bf4:	bf38      	it	cc
 8012bf6:	2304      	movcc	r3, #4
 8012bf8:	50ca      	str	r2, [r1, r3]
 8012bfa:	b10a      	cbz	r2, 8012c00 <__lshift+0xa4>
 8012bfc:	f108 0602 	add.w	r6, r8, #2
 8012c00:	3e01      	subs	r6, #1
 8012c02:	4638      	mov	r0, r7
 8012c04:	612e      	str	r6, [r5, #16]
 8012c06:	4621      	mov	r1, r4
 8012c08:	f7ff fd8e 	bl	8012728 <_Bfree>
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c16:	3301      	adds	r3, #1
 8012c18:	e7c5      	b.n	8012ba6 <__lshift+0x4a>
 8012c1a:	3904      	subs	r1, #4
 8012c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c20:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c24:	459c      	cmp	ip, r3
 8012c26:	d8f9      	bhi.n	8012c1c <__lshift+0xc0>
 8012c28:	e7ea      	b.n	8012c00 <__lshift+0xa4>
 8012c2a:	bf00      	nop
 8012c2c:	0801504d 	.word	0x0801504d
 8012c30:	0801505e 	.word	0x0801505e

08012c34 <__mcmp>:
 8012c34:	b530      	push	{r4, r5, lr}
 8012c36:	6902      	ldr	r2, [r0, #16]
 8012c38:	690c      	ldr	r4, [r1, #16]
 8012c3a:	1b12      	subs	r2, r2, r4
 8012c3c:	d10e      	bne.n	8012c5c <__mcmp+0x28>
 8012c3e:	f100 0314 	add.w	r3, r0, #20
 8012c42:	3114      	adds	r1, #20
 8012c44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012c48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012c4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012c50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012c54:	42a5      	cmp	r5, r4
 8012c56:	d003      	beq.n	8012c60 <__mcmp+0x2c>
 8012c58:	d305      	bcc.n	8012c66 <__mcmp+0x32>
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	bd30      	pop	{r4, r5, pc}
 8012c60:	4283      	cmp	r3, r0
 8012c62:	d3f3      	bcc.n	8012c4c <__mcmp+0x18>
 8012c64:	e7fa      	b.n	8012c5c <__mcmp+0x28>
 8012c66:	f04f 32ff 	mov.w	r2, #4294967295
 8012c6a:	e7f7      	b.n	8012c5c <__mcmp+0x28>

08012c6c <__mdiff>:
 8012c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c70:	460c      	mov	r4, r1
 8012c72:	4606      	mov	r6, r0
 8012c74:	4611      	mov	r1, r2
 8012c76:	4620      	mov	r0, r4
 8012c78:	4690      	mov	r8, r2
 8012c7a:	f7ff ffdb 	bl	8012c34 <__mcmp>
 8012c7e:	1e05      	subs	r5, r0, #0
 8012c80:	d110      	bne.n	8012ca4 <__mdiff+0x38>
 8012c82:	4629      	mov	r1, r5
 8012c84:	4630      	mov	r0, r6
 8012c86:	f7ff fd0f 	bl	80126a8 <_Balloc>
 8012c8a:	b930      	cbnz	r0, 8012c9a <__mdiff+0x2e>
 8012c8c:	4b3a      	ldr	r3, [pc, #232]	; (8012d78 <__mdiff+0x10c>)
 8012c8e:	4602      	mov	r2, r0
 8012c90:	f240 2137 	movw	r1, #567	; 0x237
 8012c94:	4839      	ldr	r0, [pc, #228]	; (8012d7c <__mdiff+0x110>)
 8012c96:	f001 fa43 	bl	8014120 <__assert_func>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca4:	bfa4      	itt	ge
 8012ca6:	4643      	movge	r3, r8
 8012ca8:	46a0      	movge	r8, r4
 8012caa:	4630      	mov	r0, r6
 8012cac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012cb0:	bfa6      	itte	ge
 8012cb2:	461c      	movge	r4, r3
 8012cb4:	2500      	movge	r5, #0
 8012cb6:	2501      	movlt	r5, #1
 8012cb8:	f7ff fcf6 	bl	80126a8 <_Balloc>
 8012cbc:	b920      	cbnz	r0, 8012cc8 <__mdiff+0x5c>
 8012cbe:	4b2e      	ldr	r3, [pc, #184]	; (8012d78 <__mdiff+0x10c>)
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	f240 2145 	movw	r1, #581	; 0x245
 8012cc6:	e7e5      	b.n	8012c94 <__mdiff+0x28>
 8012cc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012ccc:	6926      	ldr	r6, [r4, #16]
 8012cce:	60c5      	str	r5, [r0, #12]
 8012cd0:	f104 0914 	add.w	r9, r4, #20
 8012cd4:	f108 0514 	add.w	r5, r8, #20
 8012cd8:	f100 0e14 	add.w	lr, r0, #20
 8012cdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012ce0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012ce4:	f108 0210 	add.w	r2, r8, #16
 8012ce8:	46f2      	mov	sl, lr
 8012cea:	2100      	movs	r1, #0
 8012cec:	f859 3b04 	ldr.w	r3, [r9], #4
 8012cf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012cf4:	fa11 f88b 	uxtah	r8, r1, fp
 8012cf8:	b299      	uxth	r1, r3
 8012cfa:	0c1b      	lsrs	r3, r3, #16
 8012cfc:	eba8 0801 	sub.w	r8, r8, r1
 8012d00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d08:	fa1f f888 	uxth.w	r8, r8
 8012d0c:	1419      	asrs	r1, r3, #16
 8012d0e:	454e      	cmp	r6, r9
 8012d10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d14:	f84a 3b04 	str.w	r3, [sl], #4
 8012d18:	d8e8      	bhi.n	8012cec <__mdiff+0x80>
 8012d1a:	1b33      	subs	r3, r6, r4
 8012d1c:	3b15      	subs	r3, #21
 8012d1e:	f023 0303 	bic.w	r3, r3, #3
 8012d22:	3304      	adds	r3, #4
 8012d24:	3415      	adds	r4, #21
 8012d26:	42a6      	cmp	r6, r4
 8012d28:	bf38      	it	cc
 8012d2a:	2304      	movcc	r3, #4
 8012d2c:	441d      	add	r5, r3
 8012d2e:	4473      	add	r3, lr
 8012d30:	469e      	mov	lr, r3
 8012d32:	462e      	mov	r6, r5
 8012d34:	4566      	cmp	r6, ip
 8012d36:	d30e      	bcc.n	8012d56 <__mdiff+0xea>
 8012d38:	f10c 0203 	add.w	r2, ip, #3
 8012d3c:	1b52      	subs	r2, r2, r5
 8012d3e:	f022 0203 	bic.w	r2, r2, #3
 8012d42:	3d03      	subs	r5, #3
 8012d44:	45ac      	cmp	ip, r5
 8012d46:	bf38      	it	cc
 8012d48:	2200      	movcc	r2, #0
 8012d4a:	4413      	add	r3, r2
 8012d4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012d50:	b17a      	cbz	r2, 8012d72 <__mdiff+0x106>
 8012d52:	6107      	str	r7, [r0, #16]
 8012d54:	e7a4      	b.n	8012ca0 <__mdiff+0x34>
 8012d56:	f856 8b04 	ldr.w	r8, [r6], #4
 8012d5a:	fa11 f288 	uxtah	r2, r1, r8
 8012d5e:	1414      	asrs	r4, r2, #16
 8012d60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012d64:	b292      	uxth	r2, r2
 8012d66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012d6a:	f84e 2b04 	str.w	r2, [lr], #4
 8012d6e:	1421      	asrs	r1, r4, #16
 8012d70:	e7e0      	b.n	8012d34 <__mdiff+0xc8>
 8012d72:	3f01      	subs	r7, #1
 8012d74:	e7ea      	b.n	8012d4c <__mdiff+0xe0>
 8012d76:	bf00      	nop
 8012d78:	0801504d 	.word	0x0801504d
 8012d7c:	0801505e 	.word	0x0801505e

08012d80 <__ulp>:
 8012d80:	b082      	sub	sp, #8
 8012d82:	ed8d 0b00 	vstr	d0, [sp]
 8012d86:	9a01      	ldr	r2, [sp, #4]
 8012d88:	4b0f      	ldr	r3, [pc, #60]	; (8012dc8 <__ulp+0x48>)
 8012d8a:	4013      	ands	r3, r2
 8012d8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	dc08      	bgt.n	8012da6 <__ulp+0x26>
 8012d94:	425b      	negs	r3, r3
 8012d96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012d9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012d9e:	da04      	bge.n	8012daa <__ulp+0x2a>
 8012da0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012da4:	4113      	asrs	r3, r2
 8012da6:	2200      	movs	r2, #0
 8012da8:	e008      	b.n	8012dbc <__ulp+0x3c>
 8012daa:	f1a2 0314 	sub.w	r3, r2, #20
 8012dae:	2b1e      	cmp	r3, #30
 8012db0:	bfda      	itte	le
 8012db2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012db6:	40da      	lsrle	r2, r3
 8012db8:	2201      	movgt	r2, #1
 8012dba:	2300      	movs	r3, #0
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	4610      	mov	r0, r2
 8012dc0:	ec41 0b10 	vmov	d0, r0, r1
 8012dc4:	b002      	add	sp, #8
 8012dc6:	4770      	bx	lr
 8012dc8:	7ff00000 	.word	0x7ff00000

08012dcc <__b2d>:
 8012dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd0:	6906      	ldr	r6, [r0, #16]
 8012dd2:	f100 0814 	add.w	r8, r0, #20
 8012dd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012dda:	1f37      	subs	r7, r6, #4
 8012ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012de0:	4610      	mov	r0, r2
 8012de2:	f7ff fd53 	bl	801288c <__hi0bits>
 8012de6:	f1c0 0320 	rsb	r3, r0, #32
 8012dea:	280a      	cmp	r0, #10
 8012dec:	600b      	str	r3, [r1, #0]
 8012dee:	491b      	ldr	r1, [pc, #108]	; (8012e5c <__b2d+0x90>)
 8012df0:	dc15      	bgt.n	8012e1e <__b2d+0x52>
 8012df2:	f1c0 0c0b 	rsb	ip, r0, #11
 8012df6:	fa22 f30c 	lsr.w	r3, r2, ip
 8012dfa:	45b8      	cmp	r8, r7
 8012dfc:	ea43 0501 	orr.w	r5, r3, r1
 8012e00:	bf34      	ite	cc
 8012e02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e06:	2300      	movcs	r3, #0
 8012e08:	3015      	adds	r0, #21
 8012e0a:	fa02 f000 	lsl.w	r0, r2, r0
 8012e0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012e12:	4303      	orrs	r3, r0
 8012e14:	461c      	mov	r4, r3
 8012e16:	ec45 4b10 	vmov	d0, r4, r5
 8012e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e1e:	45b8      	cmp	r8, r7
 8012e20:	bf3a      	itte	cc
 8012e22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e26:	f1a6 0708 	subcc.w	r7, r6, #8
 8012e2a:	2300      	movcs	r3, #0
 8012e2c:	380b      	subs	r0, #11
 8012e2e:	d012      	beq.n	8012e56 <__b2d+0x8a>
 8012e30:	f1c0 0120 	rsb	r1, r0, #32
 8012e34:	fa23 f401 	lsr.w	r4, r3, r1
 8012e38:	4082      	lsls	r2, r0
 8012e3a:	4322      	orrs	r2, r4
 8012e3c:	4547      	cmp	r7, r8
 8012e3e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012e42:	bf8c      	ite	hi
 8012e44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012e48:	2200      	movls	r2, #0
 8012e4a:	4083      	lsls	r3, r0
 8012e4c:	40ca      	lsrs	r2, r1
 8012e4e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012e52:	4313      	orrs	r3, r2
 8012e54:	e7de      	b.n	8012e14 <__b2d+0x48>
 8012e56:	ea42 0501 	orr.w	r5, r2, r1
 8012e5a:	e7db      	b.n	8012e14 <__b2d+0x48>
 8012e5c:	3ff00000 	.word	0x3ff00000

08012e60 <__d2b>:
 8012e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e64:	460f      	mov	r7, r1
 8012e66:	2101      	movs	r1, #1
 8012e68:	ec59 8b10 	vmov	r8, r9, d0
 8012e6c:	4616      	mov	r6, r2
 8012e6e:	f7ff fc1b 	bl	80126a8 <_Balloc>
 8012e72:	4604      	mov	r4, r0
 8012e74:	b930      	cbnz	r0, 8012e84 <__d2b+0x24>
 8012e76:	4602      	mov	r2, r0
 8012e78:	4b24      	ldr	r3, [pc, #144]	; (8012f0c <__d2b+0xac>)
 8012e7a:	4825      	ldr	r0, [pc, #148]	; (8012f10 <__d2b+0xb0>)
 8012e7c:	f240 310f 	movw	r1, #783	; 0x30f
 8012e80:	f001 f94e 	bl	8014120 <__assert_func>
 8012e84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e8c:	bb2d      	cbnz	r5, 8012eda <__d2b+0x7a>
 8012e8e:	9301      	str	r3, [sp, #4]
 8012e90:	f1b8 0300 	subs.w	r3, r8, #0
 8012e94:	d026      	beq.n	8012ee4 <__d2b+0x84>
 8012e96:	4668      	mov	r0, sp
 8012e98:	9300      	str	r3, [sp, #0]
 8012e9a:	f7ff fd17 	bl	80128cc <__lo0bits>
 8012e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ea2:	b1e8      	cbz	r0, 8012ee0 <__d2b+0x80>
 8012ea4:	f1c0 0320 	rsb	r3, r0, #32
 8012ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8012eac:	430b      	orrs	r3, r1
 8012eae:	40c2      	lsrs	r2, r0
 8012eb0:	6163      	str	r3, [r4, #20]
 8012eb2:	9201      	str	r2, [sp, #4]
 8012eb4:	9b01      	ldr	r3, [sp, #4]
 8012eb6:	61a3      	str	r3, [r4, #24]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	bf14      	ite	ne
 8012ebc:	2202      	movne	r2, #2
 8012ebe:	2201      	moveq	r2, #1
 8012ec0:	6122      	str	r2, [r4, #16]
 8012ec2:	b1bd      	cbz	r5, 8012ef4 <__d2b+0x94>
 8012ec4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012ec8:	4405      	add	r5, r0
 8012eca:	603d      	str	r5, [r7, #0]
 8012ecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ed0:	6030      	str	r0, [r6, #0]
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	b003      	add	sp, #12
 8012ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ede:	e7d6      	b.n	8012e8e <__d2b+0x2e>
 8012ee0:	6161      	str	r1, [r4, #20]
 8012ee2:	e7e7      	b.n	8012eb4 <__d2b+0x54>
 8012ee4:	a801      	add	r0, sp, #4
 8012ee6:	f7ff fcf1 	bl	80128cc <__lo0bits>
 8012eea:	9b01      	ldr	r3, [sp, #4]
 8012eec:	6163      	str	r3, [r4, #20]
 8012eee:	3020      	adds	r0, #32
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	e7e5      	b.n	8012ec0 <__d2b+0x60>
 8012ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012efc:	6038      	str	r0, [r7, #0]
 8012efe:	6918      	ldr	r0, [r3, #16]
 8012f00:	f7ff fcc4 	bl	801288c <__hi0bits>
 8012f04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f08:	e7e2      	b.n	8012ed0 <__d2b+0x70>
 8012f0a:	bf00      	nop
 8012f0c:	0801504d 	.word	0x0801504d
 8012f10:	0801505e 	.word	0x0801505e

08012f14 <__ratio>:
 8012f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f18:	4688      	mov	r8, r1
 8012f1a:	4669      	mov	r1, sp
 8012f1c:	4681      	mov	r9, r0
 8012f1e:	f7ff ff55 	bl	8012dcc <__b2d>
 8012f22:	a901      	add	r1, sp, #4
 8012f24:	4640      	mov	r0, r8
 8012f26:	ec55 4b10 	vmov	r4, r5, d0
 8012f2a:	ee10 aa10 	vmov	sl, s0
 8012f2e:	f7ff ff4d 	bl	8012dcc <__b2d>
 8012f32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012f36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012f3a:	1ad2      	subs	r2, r2, r3
 8012f3c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012f40:	1a5b      	subs	r3, r3, r1
 8012f42:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012f46:	ec57 6b10 	vmov	r6, r7, d0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	bfd6      	itet	le
 8012f4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012f52:	462a      	movgt	r2, r5
 8012f54:	463a      	movle	r2, r7
 8012f56:	46ab      	mov	fp, r5
 8012f58:	bfd6      	itet	le
 8012f5a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012f5e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012f62:	ee00 3a90 	vmovle	s1, r3
 8012f66:	ec4b ab17 	vmov	d7, sl, fp
 8012f6a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8012f6e:	b003      	add	sp, #12
 8012f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f74 <__copybits>:
 8012f74:	3901      	subs	r1, #1
 8012f76:	b570      	push	{r4, r5, r6, lr}
 8012f78:	1149      	asrs	r1, r1, #5
 8012f7a:	6914      	ldr	r4, [r2, #16]
 8012f7c:	3101      	adds	r1, #1
 8012f7e:	f102 0314 	add.w	r3, r2, #20
 8012f82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f8a:	1f05      	subs	r5, r0, #4
 8012f8c:	42a3      	cmp	r3, r4
 8012f8e:	d30c      	bcc.n	8012faa <__copybits+0x36>
 8012f90:	1aa3      	subs	r3, r4, r2
 8012f92:	3b11      	subs	r3, #17
 8012f94:	f023 0303 	bic.w	r3, r3, #3
 8012f98:	3211      	adds	r2, #17
 8012f9a:	42a2      	cmp	r2, r4
 8012f9c:	bf88      	it	hi
 8012f9e:	2300      	movhi	r3, #0
 8012fa0:	4418      	add	r0, r3
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	4288      	cmp	r0, r1
 8012fa6:	d305      	bcc.n	8012fb4 <__copybits+0x40>
 8012fa8:	bd70      	pop	{r4, r5, r6, pc}
 8012faa:	f853 6b04 	ldr.w	r6, [r3], #4
 8012fae:	f845 6f04 	str.w	r6, [r5, #4]!
 8012fb2:	e7eb      	b.n	8012f8c <__copybits+0x18>
 8012fb4:	f840 3b04 	str.w	r3, [r0], #4
 8012fb8:	e7f4      	b.n	8012fa4 <__copybits+0x30>

08012fba <__any_on>:
 8012fba:	f100 0214 	add.w	r2, r0, #20
 8012fbe:	6900      	ldr	r0, [r0, #16]
 8012fc0:	114b      	asrs	r3, r1, #5
 8012fc2:	4298      	cmp	r0, r3
 8012fc4:	b510      	push	{r4, lr}
 8012fc6:	db11      	blt.n	8012fec <__any_on+0x32>
 8012fc8:	dd0a      	ble.n	8012fe0 <__any_on+0x26>
 8012fca:	f011 011f 	ands.w	r1, r1, #31
 8012fce:	d007      	beq.n	8012fe0 <__any_on+0x26>
 8012fd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012fd4:	fa24 f001 	lsr.w	r0, r4, r1
 8012fd8:	fa00 f101 	lsl.w	r1, r0, r1
 8012fdc:	428c      	cmp	r4, r1
 8012fde:	d10b      	bne.n	8012ff8 <__any_on+0x3e>
 8012fe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d803      	bhi.n	8012ff0 <__any_on+0x36>
 8012fe8:	2000      	movs	r0, #0
 8012fea:	bd10      	pop	{r4, pc}
 8012fec:	4603      	mov	r3, r0
 8012fee:	e7f7      	b.n	8012fe0 <__any_on+0x26>
 8012ff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ff4:	2900      	cmp	r1, #0
 8012ff6:	d0f5      	beq.n	8012fe4 <__any_on+0x2a>
 8012ff8:	2001      	movs	r0, #1
 8012ffa:	e7f6      	b.n	8012fea <__any_on+0x30>

08012ffc <sulp>:
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	4604      	mov	r4, r0
 8013000:	460d      	mov	r5, r1
 8013002:	4616      	mov	r6, r2
 8013004:	ec45 4b10 	vmov	d0, r4, r5
 8013008:	f7ff feba 	bl	8012d80 <__ulp>
 801300c:	b17e      	cbz	r6, 801302e <sulp+0x32>
 801300e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013012:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013016:	2b00      	cmp	r3, #0
 8013018:	dd09      	ble.n	801302e <sulp+0x32>
 801301a:	051b      	lsls	r3, r3, #20
 801301c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013020:	2000      	movs	r0, #0
 8013022:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013026:	ec41 0b17 	vmov	d7, r0, r1
 801302a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801302e:	bd70      	pop	{r4, r5, r6, pc}

08013030 <_strtod_l>:
 8013030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013034:	ed2d 8b0e 	vpush	{d8-d14}
 8013038:	b097      	sub	sp, #92	; 0x5c
 801303a:	4604      	mov	r4, r0
 801303c:	920d      	str	r2, [sp, #52]	; 0x34
 801303e:	2200      	movs	r2, #0
 8013040:	9212      	str	r2, [sp, #72]	; 0x48
 8013042:	468a      	mov	sl, r1
 8013044:	f04f 0800 	mov.w	r8, #0
 8013048:	f04f 0900 	mov.w	r9, #0
 801304c:	460a      	mov	r2, r1
 801304e:	9211      	str	r2, [sp, #68]	; 0x44
 8013050:	7811      	ldrb	r1, [r2, #0]
 8013052:	292b      	cmp	r1, #43	; 0x2b
 8013054:	d04c      	beq.n	80130f0 <_strtod_l+0xc0>
 8013056:	d839      	bhi.n	80130cc <_strtod_l+0x9c>
 8013058:	290d      	cmp	r1, #13
 801305a:	d833      	bhi.n	80130c4 <_strtod_l+0x94>
 801305c:	2908      	cmp	r1, #8
 801305e:	d833      	bhi.n	80130c8 <_strtod_l+0x98>
 8013060:	2900      	cmp	r1, #0
 8013062:	d03c      	beq.n	80130de <_strtod_l+0xae>
 8013064:	2200      	movs	r2, #0
 8013066:	9208      	str	r2, [sp, #32]
 8013068:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801306a:	7832      	ldrb	r2, [r6, #0]
 801306c:	2a30      	cmp	r2, #48	; 0x30
 801306e:	f040 80b8 	bne.w	80131e2 <_strtod_l+0x1b2>
 8013072:	7872      	ldrb	r2, [r6, #1]
 8013074:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013078:	2a58      	cmp	r2, #88	; 0x58
 801307a:	d170      	bne.n	801315e <_strtod_l+0x12e>
 801307c:	9302      	str	r3, [sp, #8]
 801307e:	9b08      	ldr	r3, [sp, #32]
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	ab12      	add	r3, sp, #72	; 0x48
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	4a91      	ldr	r2, [pc, #580]	; (80132cc <_strtod_l+0x29c>)
 8013088:	ab13      	add	r3, sp, #76	; 0x4c
 801308a:	a911      	add	r1, sp, #68	; 0x44
 801308c:	4620      	mov	r0, r4
 801308e:	f001 f8e3 	bl	8014258 <__gethex>
 8013092:	f010 070f 	ands.w	r7, r0, #15
 8013096:	4605      	mov	r5, r0
 8013098:	d005      	beq.n	80130a6 <_strtod_l+0x76>
 801309a:	2f06      	cmp	r7, #6
 801309c:	d12a      	bne.n	80130f4 <_strtod_l+0xc4>
 801309e:	3601      	adds	r6, #1
 80130a0:	2300      	movs	r3, #0
 80130a2:	9611      	str	r6, [sp, #68]	; 0x44
 80130a4:	9308      	str	r3, [sp, #32]
 80130a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	f040 8555 	bne.w	8013b58 <_strtod_l+0xb28>
 80130ae:	9b08      	ldr	r3, [sp, #32]
 80130b0:	ec49 8b10 	vmov	d0, r8, r9
 80130b4:	b1cb      	cbz	r3, 80130ea <_strtod_l+0xba>
 80130b6:	eeb1 0b40 	vneg.f64	d0, d0
 80130ba:	b017      	add	sp, #92	; 0x5c
 80130bc:	ecbd 8b0e 	vpop	{d8-d14}
 80130c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c4:	2920      	cmp	r1, #32
 80130c6:	d1cd      	bne.n	8013064 <_strtod_l+0x34>
 80130c8:	3201      	adds	r2, #1
 80130ca:	e7c0      	b.n	801304e <_strtod_l+0x1e>
 80130cc:	292d      	cmp	r1, #45	; 0x2d
 80130ce:	d1c9      	bne.n	8013064 <_strtod_l+0x34>
 80130d0:	2101      	movs	r1, #1
 80130d2:	9108      	str	r1, [sp, #32]
 80130d4:	1c51      	adds	r1, r2, #1
 80130d6:	9111      	str	r1, [sp, #68]	; 0x44
 80130d8:	7852      	ldrb	r2, [r2, #1]
 80130da:	2a00      	cmp	r2, #0
 80130dc:	d1c4      	bne.n	8013068 <_strtod_l+0x38>
 80130de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130e0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f040 8535 	bne.w	8013b54 <_strtod_l+0xb24>
 80130ea:	ec49 8b10 	vmov	d0, r8, r9
 80130ee:	e7e4      	b.n	80130ba <_strtod_l+0x8a>
 80130f0:	2100      	movs	r1, #0
 80130f2:	e7ee      	b.n	80130d2 <_strtod_l+0xa2>
 80130f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130f6:	b13a      	cbz	r2, 8013108 <_strtod_l+0xd8>
 80130f8:	2135      	movs	r1, #53	; 0x35
 80130fa:	a814      	add	r0, sp, #80	; 0x50
 80130fc:	f7ff ff3a 	bl	8012f74 <__copybits>
 8013100:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013102:	4620      	mov	r0, r4
 8013104:	f7ff fb10 	bl	8012728 <_Bfree>
 8013108:	1e7b      	subs	r3, r7, #1
 801310a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801310c:	2b04      	cmp	r3, #4
 801310e:	d806      	bhi.n	801311e <_strtod_l+0xee>
 8013110:	e8df f003 	tbb	[pc, r3]
 8013114:	201d0314 	.word	0x201d0314
 8013118:	14          	.byte	0x14
 8013119:	00          	.byte	0x00
 801311a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801311e:	05eb      	lsls	r3, r5, #23
 8013120:	bf48      	it	mi
 8013122:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013126:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801312a:	0d1b      	lsrs	r3, r3, #20
 801312c:	051b      	lsls	r3, r3, #20
 801312e:	2b00      	cmp	r3, #0
 8013130:	d1b9      	bne.n	80130a6 <_strtod_l+0x76>
 8013132:	f7fe fc37 	bl	80119a4 <__errno>
 8013136:	2322      	movs	r3, #34	; 0x22
 8013138:	6003      	str	r3, [r0, #0]
 801313a:	e7b4      	b.n	80130a6 <_strtod_l+0x76>
 801313c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8013140:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013144:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013148:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801314c:	e7e7      	b.n	801311e <_strtod_l+0xee>
 801314e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80132d4 <_strtod_l+0x2a4>
 8013152:	e7e4      	b.n	801311e <_strtod_l+0xee>
 8013154:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013158:	f04f 38ff 	mov.w	r8, #4294967295
 801315c:	e7df      	b.n	801311e <_strtod_l+0xee>
 801315e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013160:	1c5a      	adds	r2, r3, #1
 8013162:	9211      	str	r2, [sp, #68]	; 0x44
 8013164:	785b      	ldrb	r3, [r3, #1]
 8013166:	2b30      	cmp	r3, #48	; 0x30
 8013168:	d0f9      	beq.n	801315e <_strtod_l+0x12e>
 801316a:	2b00      	cmp	r3, #0
 801316c:	d09b      	beq.n	80130a6 <_strtod_l+0x76>
 801316e:	2301      	movs	r3, #1
 8013170:	9306      	str	r3, [sp, #24]
 8013172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013174:	9309      	str	r3, [sp, #36]	; 0x24
 8013176:	2300      	movs	r3, #0
 8013178:	9305      	str	r3, [sp, #20]
 801317a:	9307      	str	r3, [sp, #28]
 801317c:	461e      	mov	r6, r3
 801317e:	220a      	movs	r2, #10
 8013180:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013182:	7805      	ldrb	r5, [r0, #0]
 8013184:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8013188:	b2d9      	uxtb	r1, r3
 801318a:	2909      	cmp	r1, #9
 801318c:	d92b      	bls.n	80131e6 <_strtod_l+0x1b6>
 801318e:	4950      	ldr	r1, [pc, #320]	; (80132d0 <_strtod_l+0x2a0>)
 8013190:	2201      	movs	r2, #1
 8013192:	f000 ffa9 	bl	80140e8 <strncmp>
 8013196:	2800      	cmp	r0, #0
 8013198:	d035      	beq.n	8013206 <_strtod_l+0x1d6>
 801319a:	2000      	movs	r0, #0
 801319c:	462a      	mov	r2, r5
 801319e:	4633      	mov	r3, r6
 80131a0:	4683      	mov	fp, r0
 80131a2:	4601      	mov	r1, r0
 80131a4:	2a65      	cmp	r2, #101	; 0x65
 80131a6:	d001      	beq.n	80131ac <_strtod_l+0x17c>
 80131a8:	2a45      	cmp	r2, #69	; 0x45
 80131aa:	d118      	bne.n	80131de <_strtod_l+0x1ae>
 80131ac:	b91b      	cbnz	r3, 80131b6 <_strtod_l+0x186>
 80131ae:	9b06      	ldr	r3, [sp, #24]
 80131b0:	4303      	orrs	r3, r0
 80131b2:	d094      	beq.n	80130de <_strtod_l+0xae>
 80131b4:	2300      	movs	r3, #0
 80131b6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80131ba:	f10a 0201 	add.w	r2, sl, #1
 80131be:	9211      	str	r2, [sp, #68]	; 0x44
 80131c0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80131c4:	2a2b      	cmp	r2, #43	; 0x2b
 80131c6:	d075      	beq.n	80132b4 <_strtod_l+0x284>
 80131c8:	2a2d      	cmp	r2, #45	; 0x2d
 80131ca:	d07b      	beq.n	80132c4 <_strtod_l+0x294>
 80131cc:	f04f 0e00 	mov.w	lr, #0
 80131d0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80131d4:	2d09      	cmp	r5, #9
 80131d6:	f240 8083 	bls.w	80132e0 <_strtod_l+0x2b0>
 80131da:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80131de:	2500      	movs	r5, #0
 80131e0:	e09e      	b.n	8013320 <_strtod_l+0x2f0>
 80131e2:	2300      	movs	r3, #0
 80131e4:	e7c4      	b.n	8013170 <_strtod_l+0x140>
 80131e6:	2e08      	cmp	r6, #8
 80131e8:	bfd5      	itete	le
 80131ea:	9907      	ldrle	r1, [sp, #28]
 80131ec:	9905      	ldrgt	r1, [sp, #20]
 80131ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80131f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80131f6:	f100 0001 	add.w	r0, r0, #1
 80131fa:	bfd4      	ite	le
 80131fc:	9307      	strle	r3, [sp, #28]
 80131fe:	9305      	strgt	r3, [sp, #20]
 8013200:	3601      	adds	r6, #1
 8013202:	9011      	str	r0, [sp, #68]	; 0x44
 8013204:	e7bc      	b.n	8013180 <_strtod_l+0x150>
 8013206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013208:	1c5a      	adds	r2, r3, #1
 801320a:	9211      	str	r2, [sp, #68]	; 0x44
 801320c:	785a      	ldrb	r2, [r3, #1]
 801320e:	b3ae      	cbz	r6, 801327c <_strtod_l+0x24c>
 8013210:	4683      	mov	fp, r0
 8013212:	4633      	mov	r3, r6
 8013214:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013218:	2909      	cmp	r1, #9
 801321a:	d912      	bls.n	8013242 <_strtod_l+0x212>
 801321c:	2101      	movs	r1, #1
 801321e:	e7c1      	b.n	80131a4 <_strtod_l+0x174>
 8013220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013222:	1c5a      	adds	r2, r3, #1
 8013224:	9211      	str	r2, [sp, #68]	; 0x44
 8013226:	785a      	ldrb	r2, [r3, #1]
 8013228:	3001      	adds	r0, #1
 801322a:	2a30      	cmp	r2, #48	; 0x30
 801322c:	d0f8      	beq.n	8013220 <_strtod_l+0x1f0>
 801322e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013232:	2b08      	cmp	r3, #8
 8013234:	f200 8495 	bhi.w	8013b62 <_strtod_l+0xb32>
 8013238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801323a:	9309      	str	r3, [sp, #36]	; 0x24
 801323c:	4683      	mov	fp, r0
 801323e:	2000      	movs	r0, #0
 8013240:	4603      	mov	r3, r0
 8013242:	3a30      	subs	r2, #48	; 0x30
 8013244:	f100 0101 	add.w	r1, r0, #1
 8013248:	d012      	beq.n	8013270 <_strtod_l+0x240>
 801324a:	448b      	add	fp, r1
 801324c:	eb00 0c03 	add.w	ip, r0, r3
 8013250:	4619      	mov	r1, r3
 8013252:	250a      	movs	r5, #10
 8013254:	4561      	cmp	r1, ip
 8013256:	d113      	bne.n	8013280 <_strtod_l+0x250>
 8013258:	1819      	adds	r1, r3, r0
 801325a:	2908      	cmp	r1, #8
 801325c:	f103 0301 	add.w	r3, r3, #1
 8013260:	4403      	add	r3, r0
 8013262:	dc1b      	bgt.n	801329c <_strtod_l+0x26c>
 8013264:	9807      	ldr	r0, [sp, #28]
 8013266:	210a      	movs	r1, #10
 8013268:	fb01 2200 	mla	r2, r1, r0, r2
 801326c:	9207      	str	r2, [sp, #28]
 801326e:	2100      	movs	r1, #0
 8013270:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013272:	1c50      	adds	r0, r2, #1
 8013274:	9011      	str	r0, [sp, #68]	; 0x44
 8013276:	7852      	ldrb	r2, [r2, #1]
 8013278:	4608      	mov	r0, r1
 801327a:	e7cb      	b.n	8013214 <_strtod_l+0x1e4>
 801327c:	4630      	mov	r0, r6
 801327e:	e7d4      	b.n	801322a <_strtod_l+0x1fa>
 8013280:	2908      	cmp	r1, #8
 8013282:	f101 0101 	add.w	r1, r1, #1
 8013286:	dc03      	bgt.n	8013290 <_strtod_l+0x260>
 8013288:	9f07      	ldr	r7, [sp, #28]
 801328a:	436f      	muls	r7, r5
 801328c:	9707      	str	r7, [sp, #28]
 801328e:	e7e1      	b.n	8013254 <_strtod_l+0x224>
 8013290:	2910      	cmp	r1, #16
 8013292:	bfde      	ittt	le
 8013294:	9f05      	ldrle	r7, [sp, #20]
 8013296:	436f      	mulle	r7, r5
 8013298:	9705      	strle	r7, [sp, #20]
 801329a:	e7db      	b.n	8013254 <_strtod_l+0x224>
 801329c:	2b10      	cmp	r3, #16
 801329e:	bfdf      	itttt	le
 80132a0:	9805      	ldrle	r0, [sp, #20]
 80132a2:	210a      	movle	r1, #10
 80132a4:	fb01 2200 	mlale	r2, r1, r0, r2
 80132a8:	9205      	strle	r2, [sp, #20]
 80132aa:	e7e0      	b.n	801326e <_strtod_l+0x23e>
 80132ac:	f04f 0b00 	mov.w	fp, #0
 80132b0:	2101      	movs	r1, #1
 80132b2:	e77c      	b.n	80131ae <_strtod_l+0x17e>
 80132b4:	f04f 0e00 	mov.w	lr, #0
 80132b8:	f10a 0202 	add.w	r2, sl, #2
 80132bc:	9211      	str	r2, [sp, #68]	; 0x44
 80132be:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80132c2:	e785      	b.n	80131d0 <_strtod_l+0x1a0>
 80132c4:	f04f 0e01 	mov.w	lr, #1
 80132c8:	e7f6      	b.n	80132b8 <_strtod_l+0x288>
 80132ca:	bf00      	nop
 80132cc:	080151b8 	.word	0x080151b8
 80132d0:	080151b4 	.word	0x080151b4
 80132d4:	7ff00000 	.word	0x7ff00000
 80132d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80132da:	1c55      	adds	r5, r2, #1
 80132dc:	9511      	str	r5, [sp, #68]	; 0x44
 80132de:	7852      	ldrb	r2, [r2, #1]
 80132e0:	2a30      	cmp	r2, #48	; 0x30
 80132e2:	d0f9      	beq.n	80132d8 <_strtod_l+0x2a8>
 80132e4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80132e8:	2d08      	cmp	r5, #8
 80132ea:	f63f af78 	bhi.w	80131de <_strtod_l+0x1ae>
 80132ee:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80132f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80132f4:	920a      	str	r2, [sp, #40]	; 0x28
 80132f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80132f8:	1c55      	adds	r5, r2, #1
 80132fa:	9511      	str	r5, [sp, #68]	; 0x44
 80132fc:	7852      	ldrb	r2, [r2, #1]
 80132fe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8013302:	2f09      	cmp	r7, #9
 8013304:	d937      	bls.n	8013376 <_strtod_l+0x346>
 8013306:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013308:	1bed      	subs	r5, r5, r7
 801330a:	2d08      	cmp	r5, #8
 801330c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8013310:	dc02      	bgt.n	8013318 <_strtod_l+0x2e8>
 8013312:	4565      	cmp	r5, ip
 8013314:	bfa8      	it	ge
 8013316:	4665      	movge	r5, ip
 8013318:	f1be 0f00 	cmp.w	lr, #0
 801331c:	d000      	beq.n	8013320 <_strtod_l+0x2f0>
 801331e:	426d      	negs	r5, r5
 8013320:	2b00      	cmp	r3, #0
 8013322:	d14d      	bne.n	80133c0 <_strtod_l+0x390>
 8013324:	9b06      	ldr	r3, [sp, #24]
 8013326:	4303      	orrs	r3, r0
 8013328:	f47f aebd 	bne.w	80130a6 <_strtod_l+0x76>
 801332c:	2900      	cmp	r1, #0
 801332e:	f47f aed6 	bne.w	80130de <_strtod_l+0xae>
 8013332:	2a69      	cmp	r2, #105	; 0x69
 8013334:	d027      	beq.n	8013386 <_strtod_l+0x356>
 8013336:	dc24      	bgt.n	8013382 <_strtod_l+0x352>
 8013338:	2a49      	cmp	r2, #73	; 0x49
 801333a:	d024      	beq.n	8013386 <_strtod_l+0x356>
 801333c:	2a4e      	cmp	r2, #78	; 0x4e
 801333e:	f47f aece 	bne.w	80130de <_strtod_l+0xae>
 8013342:	4995      	ldr	r1, [pc, #596]	; (8013598 <_strtod_l+0x568>)
 8013344:	a811      	add	r0, sp, #68	; 0x44
 8013346:	f001 f9c7 	bl	80146d8 <__match>
 801334a:	2800      	cmp	r0, #0
 801334c:	f43f aec7 	beq.w	80130de <_strtod_l+0xae>
 8013350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	2b28      	cmp	r3, #40	; 0x28
 8013356:	d12d      	bne.n	80133b4 <_strtod_l+0x384>
 8013358:	4990      	ldr	r1, [pc, #576]	; (801359c <_strtod_l+0x56c>)
 801335a:	aa14      	add	r2, sp, #80	; 0x50
 801335c:	a811      	add	r0, sp, #68	; 0x44
 801335e:	f001 f9cf 	bl	8014700 <__hexnan>
 8013362:	2805      	cmp	r0, #5
 8013364:	d126      	bne.n	80133b4 <_strtod_l+0x384>
 8013366:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013368:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801336c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013370:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013374:	e697      	b.n	80130a6 <_strtod_l+0x76>
 8013376:	250a      	movs	r5, #10
 8013378:	fb05 2c0c 	mla	ip, r5, ip, r2
 801337c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013380:	e7b9      	b.n	80132f6 <_strtod_l+0x2c6>
 8013382:	2a6e      	cmp	r2, #110	; 0x6e
 8013384:	e7db      	b.n	801333e <_strtod_l+0x30e>
 8013386:	4986      	ldr	r1, [pc, #536]	; (80135a0 <_strtod_l+0x570>)
 8013388:	a811      	add	r0, sp, #68	; 0x44
 801338a:	f001 f9a5 	bl	80146d8 <__match>
 801338e:	2800      	cmp	r0, #0
 8013390:	f43f aea5 	beq.w	80130de <_strtod_l+0xae>
 8013394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013396:	4983      	ldr	r1, [pc, #524]	; (80135a4 <_strtod_l+0x574>)
 8013398:	3b01      	subs	r3, #1
 801339a:	a811      	add	r0, sp, #68	; 0x44
 801339c:	9311      	str	r3, [sp, #68]	; 0x44
 801339e:	f001 f99b 	bl	80146d8 <__match>
 80133a2:	b910      	cbnz	r0, 80133aa <_strtod_l+0x37a>
 80133a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133a6:	3301      	adds	r3, #1
 80133a8:	9311      	str	r3, [sp, #68]	; 0x44
 80133aa:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80135b8 <_strtod_l+0x588>
 80133ae:	f04f 0800 	mov.w	r8, #0
 80133b2:	e678      	b.n	80130a6 <_strtod_l+0x76>
 80133b4:	487c      	ldr	r0, [pc, #496]	; (80135a8 <_strtod_l+0x578>)
 80133b6:	f000 feab 	bl	8014110 <nan>
 80133ba:	ec59 8b10 	vmov	r8, r9, d0
 80133be:	e672      	b.n	80130a6 <_strtod_l+0x76>
 80133c0:	eddd 7a07 	vldr	s15, [sp, #28]
 80133c4:	eba5 020b 	sub.w	r2, r5, fp
 80133c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80133cc:	2e00      	cmp	r6, #0
 80133ce:	bf08      	it	eq
 80133d0:	461e      	moveq	r6, r3
 80133d2:	2b10      	cmp	r3, #16
 80133d4:	9206      	str	r2, [sp, #24]
 80133d6:	461a      	mov	r2, r3
 80133d8:	bfa8      	it	ge
 80133da:	2210      	movge	r2, #16
 80133dc:	2b09      	cmp	r3, #9
 80133de:	ec59 8b17 	vmov	r8, r9, d7
 80133e2:	dd0c      	ble.n	80133fe <_strtod_l+0x3ce>
 80133e4:	4971      	ldr	r1, [pc, #452]	; (80135ac <_strtod_l+0x57c>)
 80133e6:	eddd 6a05 	vldr	s13, [sp, #20]
 80133ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80133ee:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80133f2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80133f6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80133fa:	ec59 8b16 	vmov	r8, r9, d6
 80133fe:	2b0f      	cmp	r3, #15
 8013400:	dc37      	bgt.n	8013472 <_strtod_l+0x442>
 8013402:	9906      	ldr	r1, [sp, #24]
 8013404:	2900      	cmp	r1, #0
 8013406:	f43f ae4e 	beq.w	80130a6 <_strtod_l+0x76>
 801340a:	dd23      	ble.n	8013454 <_strtod_l+0x424>
 801340c:	2916      	cmp	r1, #22
 801340e:	dc0b      	bgt.n	8013428 <_strtod_l+0x3f8>
 8013410:	4b66      	ldr	r3, [pc, #408]	; (80135ac <_strtod_l+0x57c>)
 8013412:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013416:	ed93 7b00 	vldr	d7, [r3]
 801341a:	ec49 8b16 	vmov	d6, r8, r9
 801341e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013422:	ec59 8b17 	vmov	r8, r9, d7
 8013426:	e63e      	b.n	80130a6 <_strtod_l+0x76>
 8013428:	9806      	ldr	r0, [sp, #24]
 801342a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801342e:	4281      	cmp	r1, r0
 8013430:	db1f      	blt.n	8013472 <_strtod_l+0x442>
 8013432:	4a5e      	ldr	r2, [pc, #376]	; (80135ac <_strtod_l+0x57c>)
 8013434:	f1c3 030f 	rsb	r3, r3, #15
 8013438:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801343c:	ed91 7b00 	vldr	d7, [r1]
 8013440:	ec49 8b16 	vmov	d6, r8, r9
 8013444:	1ac3      	subs	r3, r0, r3
 8013446:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801344a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801344e:	ed92 6b00 	vldr	d6, [r2]
 8013452:	e7e4      	b.n	801341e <_strtod_l+0x3ee>
 8013454:	9906      	ldr	r1, [sp, #24]
 8013456:	3116      	adds	r1, #22
 8013458:	db0b      	blt.n	8013472 <_strtod_l+0x442>
 801345a:	4b54      	ldr	r3, [pc, #336]	; (80135ac <_strtod_l+0x57c>)
 801345c:	ebab 0505 	sub.w	r5, fp, r5
 8013460:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013464:	ed95 7b00 	vldr	d7, [r5]
 8013468:	ec49 8b16 	vmov	d6, r8, r9
 801346c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013470:	e7d7      	b.n	8013422 <_strtod_l+0x3f2>
 8013472:	9906      	ldr	r1, [sp, #24]
 8013474:	1a9a      	subs	r2, r3, r2
 8013476:	440a      	add	r2, r1
 8013478:	2a00      	cmp	r2, #0
 801347a:	dd6e      	ble.n	801355a <_strtod_l+0x52a>
 801347c:	f012 000f 	ands.w	r0, r2, #15
 8013480:	d00a      	beq.n	8013498 <_strtod_l+0x468>
 8013482:	494a      	ldr	r1, [pc, #296]	; (80135ac <_strtod_l+0x57c>)
 8013484:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013488:	ed91 7b00 	vldr	d7, [r1]
 801348c:	ec49 8b16 	vmov	d6, r8, r9
 8013490:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013494:	ec59 8b17 	vmov	r8, r9, d7
 8013498:	f032 020f 	bics.w	r2, r2, #15
 801349c:	d04e      	beq.n	801353c <_strtod_l+0x50c>
 801349e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80134a2:	dd22      	ble.n	80134ea <_strtod_l+0x4ba>
 80134a4:	2500      	movs	r5, #0
 80134a6:	462e      	mov	r6, r5
 80134a8:	9507      	str	r5, [sp, #28]
 80134aa:	462f      	mov	r7, r5
 80134ac:	2322      	movs	r3, #34	; 0x22
 80134ae:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80135b8 <_strtod_l+0x588>
 80134b2:	6023      	str	r3, [r4, #0]
 80134b4:	f04f 0800 	mov.w	r8, #0
 80134b8:	9b07      	ldr	r3, [sp, #28]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	f43f adf3 	beq.w	80130a6 <_strtod_l+0x76>
 80134c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80134c2:	4620      	mov	r0, r4
 80134c4:	f7ff f930 	bl	8012728 <_Bfree>
 80134c8:	4639      	mov	r1, r7
 80134ca:	4620      	mov	r0, r4
 80134cc:	f7ff f92c 	bl	8012728 <_Bfree>
 80134d0:	4631      	mov	r1, r6
 80134d2:	4620      	mov	r0, r4
 80134d4:	f7ff f928 	bl	8012728 <_Bfree>
 80134d8:	9907      	ldr	r1, [sp, #28]
 80134da:	4620      	mov	r0, r4
 80134dc:	f7ff f924 	bl	8012728 <_Bfree>
 80134e0:	4629      	mov	r1, r5
 80134e2:	4620      	mov	r0, r4
 80134e4:	f7ff f920 	bl	8012728 <_Bfree>
 80134e8:	e5dd      	b.n	80130a6 <_strtod_l+0x76>
 80134ea:	2000      	movs	r0, #0
 80134ec:	ec49 8b17 	vmov	d7, r8, r9
 80134f0:	4f2f      	ldr	r7, [pc, #188]	; (80135b0 <_strtod_l+0x580>)
 80134f2:	1112      	asrs	r2, r2, #4
 80134f4:	4601      	mov	r1, r0
 80134f6:	2a01      	cmp	r2, #1
 80134f8:	dc23      	bgt.n	8013542 <_strtod_l+0x512>
 80134fa:	b108      	cbz	r0, 8013500 <_strtod_l+0x4d0>
 80134fc:	ec59 8b17 	vmov	r8, r9, d7
 8013500:	4a2b      	ldr	r2, [pc, #172]	; (80135b0 <_strtod_l+0x580>)
 8013502:	482c      	ldr	r0, [pc, #176]	; (80135b4 <_strtod_l+0x584>)
 8013504:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013508:	ed92 7b00 	vldr	d7, [r2]
 801350c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013510:	ec49 8b16 	vmov	d6, r8, r9
 8013514:	4a28      	ldr	r2, [pc, #160]	; (80135b8 <_strtod_l+0x588>)
 8013516:	ee27 7b06 	vmul.f64	d7, d7, d6
 801351a:	ee17 1a90 	vmov	r1, s15
 801351e:	400a      	ands	r2, r1
 8013520:	4282      	cmp	r2, r0
 8013522:	ec59 8b17 	vmov	r8, r9, d7
 8013526:	d8bd      	bhi.n	80134a4 <_strtod_l+0x474>
 8013528:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801352c:	4282      	cmp	r2, r0
 801352e:	bf86      	itte	hi
 8013530:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80135bc <_strtod_l+0x58c>
 8013534:	f04f 38ff 	movhi.w	r8, #4294967295
 8013538:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801353c:	2200      	movs	r2, #0
 801353e:	9205      	str	r2, [sp, #20]
 8013540:	e076      	b.n	8013630 <_strtod_l+0x600>
 8013542:	f012 0f01 	tst.w	r2, #1
 8013546:	d004      	beq.n	8013552 <_strtod_l+0x522>
 8013548:	ed97 6b00 	vldr	d6, [r7]
 801354c:	2001      	movs	r0, #1
 801354e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013552:	3101      	adds	r1, #1
 8013554:	1052      	asrs	r2, r2, #1
 8013556:	3708      	adds	r7, #8
 8013558:	e7cd      	b.n	80134f6 <_strtod_l+0x4c6>
 801355a:	d0ef      	beq.n	801353c <_strtod_l+0x50c>
 801355c:	4252      	negs	r2, r2
 801355e:	f012 000f 	ands.w	r0, r2, #15
 8013562:	d00a      	beq.n	801357a <_strtod_l+0x54a>
 8013564:	4911      	ldr	r1, [pc, #68]	; (80135ac <_strtod_l+0x57c>)
 8013566:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801356a:	ed91 7b00 	vldr	d7, [r1]
 801356e:	ec49 8b16 	vmov	d6, r8, r9
 8013572:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013576:	ec59 8b17 	vmov	r8, r9, d7
 801357a:	1112      	asrs	r2, r2, #4
 801357c:	d0de      	beq.n	801353c <_strtod_l+0x50c>
 801357e:	2a1f      	cmp	r2, #31
 8013580:	dd1e      	ble.n	80135c0 <_strtod_l+0x590>
 8013582:	2500      	movs	r5, #0
 8013584:	462e      	mov	r6, r5
 8013586:	9507      	str	r5, [sp, #28]
 8013588:	462f      	mov	r7, r5
 801358a:	2322      	movs	r3, #34	; 0x22
 801358c:	f04f 0800 	mov.w	r8, #0
 8013590:	f04f 0900 	mov.w	r9, #0
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	e78f      	b.n	80134b8 <_strtod_l+0x488>
 8013598:	08014fa5 	.word	0x08014fa5
 801359c:	080151cc 	.word	0x080151cc
 80135a0:	08014f9d 	.word	0x08014f9d
 80135a4:	08014fd4 	.word	0x08014fd4
 80135a8:	0801535d 	.word	0x0801535d
 80135ac:	080150e0 	.word	0x080150e0
 80135b0:	080150b8 	.word	0x080150b8
 80135b4:	7ca00000 	.word	0x7ca00000
 80135b8:	7ff00000 	.word	0x7ff00000
 80135bc:	7fefffff 	.word	0x7fefffff
 80135c0:	f012 0110 	ands.w	r1, r2, #16
 80135c4:	bf18      	it	ne
 80135c6:	216a      	movne	r1, #106	; 0x6a
 80135c8:	9105      	str	r1, [sp, #20]
 80135ca:	ec49 8b17 	vmov	d7, r8, r9
 80135ce:	49be      	ldr	r1, [pc, #760]	; (80138c8 <_strtod_l+0x898>)
 80135d0:	2000      	movs	r0, #0
 80135d2:	07d7      	lsls	r7, r2, #31
 80135d4:	d504      	bpl.n	80135e0 <_strtod_l+0x5b0>
 80135d6:	ed91 6b00 	vldr	d6, [r1]
 80135da:	2001      	movs	r0, #1
 80135dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80135e0:	1052      	asrs	r2, r2, #1
 80135e2:	f101 0108 	add.w	r1, r1, #8
 80135e6:	d1f4      	bne.n	80135d2 <_strtod_l+0x5a2>
 80135e8:	b108      	cbz	r0, 80135ee <_strtod_l+0x5be>
 80135ea:	ec59 8b17 	vmov	r8, r9, d7
 80135ee:	9a05      	ldr	r2, [sp, #20]
 80135f0:	b1ba      	cbz	r2, 8013622 <_strtod_l+0x5f2>
 80135f2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80135f6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80135fa:	2a00      	cmp	r2, #0
 80135fc:	4648      	mov	r0, r9
 80135fe:	dd10      	ble.n	8013622 <_strtod_l+0x5f2>
 8013600:	2a1f      	cmp	r2, #31
 8013602:	f340 812c 	ble.w	801385e <_strtod_l+0x82e>
 8013606:	2a34      	cmp	r2, #52	; 0x34
 8013608:	bfde      	ittt	le
 801360a:	f04f 32ff 	movle.w	r2, #4294967295
 801360e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8013612:	408a      	lslle	r2, r1
 8013614:	f04f 0800 	mov.w	r8, #0
 8013618:	bfcc      	ite	gt
 801361a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801361e:	ea02 0900 	andle.w	r9, r2, r0
 8013622:	ec49 8b17 	vmov	d7, r8, r9
 8013626:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362e:	d0a8      	beq.n	8013582 <_strtod_l+0x552>
 8013630:	9a07      	ldr	r2, [sp, #28]
 8013632:	9200      	str	r2, [sp, #0]
 8013634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013636:	4632      	mov	r2, r6
 8013638:	4620      	mov	r0, r4
 801363a:	f7ff f8dd 	bl	80127f8 <__s2b>
 801363e:	9007      	str	r0, [sp, #28]
 8013640:	2800      	cmp	r0, #0
 8013642:	f43f af2f 	beq.w	80134a4 <_strtod_l+0x474>
 8013646:	9a06      	ldr	r2, [sp, #24]
 8013648:	2a00      	cmp	r2, #0
 801364a:	ebab 0305 	sub.w	r3, fp, r5
 801364e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80138a8 <_strtod_l+0x878>
 8013652:	bfa8      	it	ge
 8013654:	2300      	movge	r3, #0
 8013656:	ed9f ab96 	vldr	d10, [pc, #600]	; 80138b0 <_strtod_l+0x880>
 801365a:	ed9f bb97 	vldr	d11, [pc, #604]	; 80138b8 <_strtod_l+0x888>
 801365e:	9309      	str	r3, [sp, #36]	; 0x24
 8013660:	2500      	movs	r5, #0
 8013662:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013666:	930c      	str	r3, [sp, #48]	; 0x30
 8013668:	462e      	mov	r6, r5
 801366a:	9b07      	ldr	r3, [sp, #28]
 801366c:	4620      	mov	r0, r4
 801366e:	6859      	ldr	r1, [r3, #4]
 8013670:	f7ff f81a 	bl	80126a8 <_Balloc>
 8013674:	4607      	mov	r7, r0
 8013676:	2800      	cmp	r0, #0
 8013678:	f43f af18 	beq.w	80134ac <_strtod_l+0x47c>
 801367c:	9b07      	ldr	r3, [sp, #28]
 801367e:	691a      	ldr	r2, [r3, #16]
 8013680:	3202      	adds	r2, #2
 8013682:	f103 010c 	add.w	r1, r3, #12
 8013686:	0092      	lsls	r2, r2, #2
 8013688:	300c      	adds	r0, #12
 801368a:	f7fe f9b7 	bl	80119fc <memcpy>
 801368e:	ec49 8b10 	vmov	d0, r8, r9
 8013692:	aa14      	add	r2, sp, #80	; 0x50
 8013694:	a913      	add	r1, sp, #76	; 0x4c
 8013696:	4620      	mov	r0, r4
 8013698:	f7ff fbe2 	bl	8012e60 <__d2b>
 801369c:	ec49 8b18 	vmov	d8, r8, r9
 80136a0:	9012      	str	r0, [sp, #72]	; 0x48
 80136a2:	2800      	cmp	r0, #0
 80136a4:	f43f af02 	beq.w	80134ac <_strtod_l+0x47c>
 80136a8:	2101      	movs	r1, #1
 80136aa:	4620      	mov	r0, r4
 80136ac:	f7ff f93c 	bl	8012928 <__i2b>
 80136b0:	4606      	mov	r6, r0
 80136b2:	2800      	cmp	r0, #0
 80136b4:	f43f aefa 	beq.w	80134ac <_strtod_l+0x47c>
 80136b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80136ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 80136bc:	2b00      	cmp	r3, #0
 80136be:	bfab      	itete	ge
 80136c0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80136c2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80136c4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80136c8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80136cc:	bfac      	ite	ge
 80136ce:	eb03 0b02 	addge.w	fp, r3, r2
 80136d2:	eba2 0a03 	sublt.w	sl, r2, r3
 80136d6:	9a05      	ldr	r2, [sp, #20]
 80136d8:	1a9b      	subs	r3, r3, r2
 80136da:	440b      	add	r3, r1
 80136dc:	4a7b      	ldr	r2, [pc, #492]	; (80138cc <_strtod_l+0x89c>)
 80136de:	3b01      	subs	r3, #1
 80136e0:	4293      	cmp	r3, r2
 80136e2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80136e6:	f280 80cd 	bge.w	8013884 <_strtod_l+0x854>
 80136ea:	1ad2      	subs	r2, r2, r3
 80136ec:	2a1f      	cmp	r2, #31
 80136ee:	eba1 0102 	sub.w	r1, r1, r2
 80136f2:	f04f 0001 	mov.w	r0, #1
 80136f6:	f300 80b9 	bgt.w	801386c <_strtod_l+0x83c>
 80136fa:	fa00 f302 	lsl.w	r3, r0, r2
 80136fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013700:	2300      	movs	r3, #0
 8013702:	930a      	str	r3, [sp, #40]	; 0x28
 8013704:	eb0b 0301 	add.w	r3, fp, r1
 8013708:	9a05      	ldr	r2, [sp, #20]
 801370a:	459b      	cmp	fp, r3
 801370c:	448a      	add	sl, r1
 801370e:	4492      	add	sl, r2
 8013710:	465a      	mov	r2, fp
 8013712:	bfa8      	it	ge
 8013714:	461a      	movge	r2, r3
 8013716:	4552      	cmp	r2, sl
 8013718:	bfa8      	it	ge
 801371a:	4652      	movge	r2, sl
 801371c:	2a00      	cmp	r2, #0
 801371e:	bfc2      	ittt	gt
 8013720:	1a9b      	subgt	r3, r3, r2
 8013722:	ebaa 0a02 	subgt.w	sl, sl, r2
 8013726:	ebab 0b02 	subgt.w	fp, fp, r2
 801372a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801372c:	2a00      	cmp	r2, #0
 801372e:	dd18      	ble.n	8013762 <_strtod_l+0x732>
 8013730:	4631      	mov	r1, r6
 8013732:	4620      	mov	r0, r4
 8013734:	930f      	str	r3, [sp, #60]	; 0x3c
 8013736:	f7ff f9b7 	bl	8012aa8 <__pow5mult>
 801373a:	4606      	mov	r6, r0
 801373c:	2800      	cmp	r0, #0
 801373e:	f43f aeb5 	beq.w	80134ac <_strtod_l+0x47c>
 8013742:	4601      	mov	r1, r0
 8013744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013746:	4620      	mov	r0, r4
 8013748:	f7ff f904 	bl	8012954 <__multiply>
 801374c:	900e      	str	r0, [sp, #56]	; 0x38
 801374e:	2800      	cmp	r0, #0
 8013750:	f43f aeac 	beq.w	80134ac <_strtod_l+0x47c>
 8013754:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013756:	4620      	mov	r0, r4
 8013758:	f7fe ffe6 	bl	8012728 <_Bfree>
 801375c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801375e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013760:	9212      	str	r2, [sp, #72]	; 0x48
 8013762:	2b00      	cmp	r3, #0
 8013764:	f300 8093 	bgt.w	801388e <_strtod_l+0x85e>
 8013768:	9b06      	ldr	r3, [sp, #24]
 801376a:	2b00      	cmp	r3, #0
 801376c:	dd08      	ble.n	8013780 <_strtod_l+0x750>
 801376e:	4639      	mov	r1, r7
 8013770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013772:	4620      	mov	r0, r4
 8013774:	f7ff f998 	bl	8012aa8 <__pow5mult>
 8013778:	4607      	mov	r7, r0
 801377a:	2800      	cmp	r0, #0
 801377c:	f43f ae96 	beq.w	80134ac <_strtod_l+0x47c>
 8013780:	f1ba 0f00 	cmp.w	sl, #0
 8013784:	dd08      	ble.n	8013798 <_strtod_l+0x768>
 8013786:	4639      	mov	r1, r7
 8013788:	4652      	mov	r2, sl
 801378a:	4620      	mov	r0, r4
 801378c:	f7ff f9e6 	bl	8012b5c <__lshift>
 8013790:	4607      	mov	r7, r0
 8013792:	2800      	cmp	r0, #0
 8013794:	f43f ae8a 	beq.w	80134ac <_strtod_l+0x47c>
 8013798:	f1bb 0f00 	cmp.w	fp, #0
 801379c:	dd08      	ble.n	80137b0 <_strtod_l+0x780>
 801379e:	4631      	mov	r1, r6
 80137a0:	465a      	mov	r2, fp
 80137a2:	4620      	mov	r0, r4
 80137a4:	f7ff f9da 	bl	8012b5c <__lshift>
 80137a8:	4606      	mov	r6, r0
 80137aa:	2800      	cmp	r0, #0
 80137ac:	f43f ae7e 	beq.w	80134ac <_strtod_l+0x47c>
 80137b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80137b2:	463a      	mov	r2, r7
 80137b4:	4620      	mov	r0, r4
 80137b6:	f7ff fa59 	bl	8012c6c <__mdiff>
 80137ba:	4605      	mov	r5, r0
 80137bc:	2800      	cmp	r0, #0
 80137be:	f43f ae75 	beq.w	80134ac <_strtod_l+0x47c>
 80137c2:	2300      	movs	r3, #0
 80137c4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80137c8:	60c3      	str	r3, [r0, #12]
 80137ca:	4631      	mov	r1, r6
 80137cc:	f7ff fa32 	bl	8012c34 <__mcmp>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	da7f      	bge.n	80138d4 <_strtod_l+0x8a4>
 80137d4:	ea5a 0a08 	orrs.w	sl, sl, r8
 80137d8:	f040 80a5 	bne.w	8013926 <_strtod_l+0x8f6>
 80137dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	f040 80a0 	bne.w	8013926 <_strtod_l+0x8f6>
 80137e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80137ea:	0d1b      	lsrs	r3, r3, #20
 80137ec:	051b      	lsls	r3, r3, #20
 80137ee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80137f2:	f240 8098 	bls.w	8013926 <_strtod_l+0x8f6>
 80137f6:	696b      	ldr	r3, [r5, #20]
 80137f8:	b91b      	cbnz	r3, 8013802 <_strtod_l+0x7d2>
 80137fa:	692b      	ldr	r3, [r5, #16]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	f340 8092 	ble.w	8013926 <_strtod_l+0x8f6>
 8013802:	4629      	mov	r1, r5
 8013804:	2201      	movs	r2, #1
 8013806:	4620      	mov	r0, r4
 8013808:	f7ff f9a8 	bl	8012b5c <__lshift>
 801380c:	4631      	mov	r1, r6
 801380e:	4605      	mov	r5, r0
 8013810:	f7ff fa10 	bl	8012c34 <__mcmp>
 8013814:	2800      	cmp	r0, #0
 8013816:	f340 8086 	ble.w	8013926 <_strtod_l+0x8f6>
 801381a:	9905      	ldr	r1, [sp, #20]
 801381c:	4a2c      	ldr	r2, [pc, #176]	; (80138d0 <_strtod_l+0x8a0>)
 801381e:	464b      	mov	r3, r9
 8013820:	2900      	cmp	r1, #0
 8013822:	f000 809f 	beq.w	8013964 <_strtod_l+0x934>
 8013826:	ea02 0109 	and.w	r1, r2, r9
 801382a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801382e:	f300 8099 	bgt.w	8013964 <_strtod_l+0x934>
 8013832:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013836:	f77f aea8 	ble.w	801358a <_strtod_l+0x55a>
 801383a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80138c0 <_strtod_l+0x890>
 801383e:	ec49 8b16 	vmov	d6, r8, r9
 8013842:	4b23      	ldr	r3, [pc, #140]	; (80138d0 <_strtod_l+0x8a0>)
 8013844:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013848:	ee17 2a90 	vmov	r2, s15
 801384c:	4013      	ands	r3, r2
 801384e:	ec59 8b17 	vmov	r8, r9, d7
 8013852:	2b00      	cmp	r3, #0
 8013854:	f47f ae34 	bne.w	80134c0 <_strtod_l+0x490>
 8013858:	2322      	movs	r3, #34	; 0x22
 801385a:	6023      	str	r3, [r4, #0]
 801385c:	e630      	b.n	80134c0 <_strtod_l+0x490>
 801385e:	f04f 31ff 	mov.w	r1, #4294967295
 8013862:	fa01 f202 	lsl.w	r2, r1, r2
 8013866:	ea02 0808 	and.w	r8, r2, r8
 801386a:	e6da      	b.n	8013622 <_strtod_l+0x5f2>
 801386c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013870:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013874:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013878:	33e2      	adds	r3, #226	; 0xe2
 801387a:	fa00 f303 	lsl.w	r3, r0, r3
 801387e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8013882:	e73f      	b.n	8013704 <_strtod_l+0x6d4>
 8013884:	2200      	movs	r2, #0
 8013886:	2301      	movs	r3, #1
 8013888:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801388c:	e73a      	b.n	8013704 <_strtod_l+0x6d4>
 801388e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013890:	461a      	mov	r2, r3
 8013892:	4620      	mov	r0, r4
 8013894:	f7ff f962 	bl	8012b5c <__lshift>
 8013898:	9012      	str	r0, [sp, #72]	; 0x48
 801389a:	2800      	cmp	r0, #0
 801389c:	f47f af64 	bne.w	8013768 <_strtod_l+0x738>
 80138a0:	e604      	b.n	80134ac <_strtod_l+0x47c>
 80138a2:	bf00      	nop
 80138a4:	f3af 8000 	nop.w
 80138a8:	94a03595 	.word	0x94a03595
 80138ac:	3fcfffff 	.word	0x3fcfffff
 80138b0:	94a03595 	.word	0x94a03595
 80138b4:	3fdfffff 	.word	0x3fdfffff
 80138b8:	35afe535 	.word	0x35afe535
 80138bc:	3fe00000 	.word	0x3fe00000
 80138c0:	00000000 	.word	0x00000000
 80138c4:	39500000 	.word	0x39500000
 80138c8:	080151e0 	.word	0x080151e0
 80138cc:	fffffc02 	.word	0xfffffc02
 80138d0:	7ff00000 	.word	0x7ff00000
 80138d4:	46cb      	mov	fp, r9
 80138d6:	d15f      	bne.n	8013998 <_strtod_l+0x968>
 80138d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138dc:	f1ba 0f00 	cmp.w	sl, #0
 80138e0:	d02a      	beq.n	8013938 <_strtod_l+0x908>
 80138e2:	4aa7      	ldr	r2, [pc, #668]	; (8013b80 <_strtod_l+0xb50>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d12b      	bne.n	8013940 <_strtod_l+0x910>
 80138e8:	9b05      	ldr	r3, [sp, #20]
 80138ea:	4642      	mov	r2, r8
 80138ec:	b1fb      	cbz	r3, 801392e <_strtod_l+0x8fe>
 80138ee:	4ba5      	ldr	r3, [pc, #660]	; (8013b84 <_strtod_l+0xb54>)
 80138f0:	ea09 0303 	and.w	r3, r9, r3
 80138f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80138f8:	f04f 31ff 	mov.w	r1, #4294967295
 80138fc:	d81a      	bhi.n	8013934 <_strtod_l+0x904>
 80138fe:	0d1b      	lsrs	r3, r3, #20
 8013900:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013904:	fa01 f303 	lsl.w	r3, r1, r3
 8013908:	429a      	cmp	r2, r3
 801390a:	d119      	bne.n	8013940 <_strtod_l+0x910>
 801390c:	4b9e      	ldr	r3, [pc, #632]	; (8013b88 <_strtod_l+0xb58>)
 801390e:	459b      	cmp	fp, r3
 8013910:	d102      	bne.n	8013918 <_strtod_l+0x8e8>
 8013912:	3201      	adds	r2, #1
 8013914:	f43f adca 	beq.w	80134ac <_strtod_l+0x47c>
 8013918:	4b9a      	ldr	r3, [pc, #616]	; (8013b84 <_strtod_l+0xb54>)
 801391a:	ea0b 0303 	and.w	r3, fp, r3
 801391e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013922:	f04f 0800 	mov.w	r8, #0
 8013926:	9b05      	ldr	r3, [sp, #20]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d186      	bne.n	801383a <_strtod_l+0x80a>
 801392c:	e5c8      	b.n	80134c0 <_strtod_l+0x490>
 801392e:	f04f 33ff 	mov.w	r3, #4294967295
 8013932:	e7e9      	b.n	8013908 <_strtod_l+0x8d8>
 8013934:	460b      	mov	r3, r1
 8013936:	e7e7      	b.n	8013908 <_strtod_l+0x8d8>
 8013938:	ea53 0308 	orrs.w	r3, r3, r8
 801393c:	f43f af6d 	beq.w	801381a <_strtod_l+0x7ea>
 8013940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013942:	b1cb      	cbz	r3, 8013978 <_strtod_l+0x948>
 8013944:	ea13 0f0b 	tst.w	r3, fp
 8013948:	d0ed      	beq.n	8013926 <_strtod_l+0x8f6>
 801394a:	9a05      	ldr	r2, [sp, #20]
 801394c:	4640      	mov	r0, r8
 801394e:	4649      	mov	r1, r9
 8013950:	f1ba 0f00 	cmp.w	sl, #0
 8013954:	d014      	beq.n	8013980 <_strtod_l+0x950>
 8013956:	f7ff fb51 	bl	8012ffc <sulp>
 801395a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801395e:	ec59 8b17 	vmov	r8, r9, d7
 8013962:	e7e0      	b.n	8013926 <_strtod_l+0x8f6>
 8013964:	4013      	ands	r3, r2
 8013966:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801396a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801396e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013972:	f04f 38ff 	mov.w	r8, #4294967295
 8013976:	e7d6      	b.n	8013926 <_strtod_l+0x8f6>
 8013978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801397a:	ea13 0f08 	tst.w	r3, r8
 801397e:	e7e3      	b.n	8013948 <_strtod_l+0x918>
 8013980:	f7ff fb3c 	bl	8012ffc <sulp>
 8013984:	ee38 0b40 	vsub.f64	d0, d8, d0
 8013988:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013990:	ec59 8b10 	vmov	r8, r9, d0
 8013994:	d1c7      	bne.n	8013926 <_strtod_l+0x8f6>
 8013996:	e5f8      	b.n	801358a <_strtod_l+0x55a>
 8013998:	4631      	mov	r1, r6
 801399a:	4628      	mov	r0, r5
 801399c:	f7ff faba 	bl	8012f14 <__ratio>
 80139a0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80139a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	d85f      	bhi.n	8013a6e <_strtod_l+0xa3e>
 80139ae:	f1ba 0f00 	cmp.w	sl, #0
 80139b2:	d166      	bne.n	8013a82 <_strtod_l+0xa52>
 80139b4:	f1b8 0f00 	cmp.w	r8, #0
 80139b8:	d14d      	bne.n	8013a56 <_strtod_l+0xa26>
 80139ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139be:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d162      	bne.n	8013a8c <_strtod_l+0xa5c>
 80139c6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80139ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80139ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d2:	d401      	bmi.n	80139d8 <_strtod_l+0x9a8>
 80139d4:	ee20 db0d 	vmul.f64	d13, d0, d13
 80139d8:	eeb1 cb4d 	vneg.f64	d12, d13
 80139dc:	4869      	ldr	r0, [pc, #420]	; (8013b84 <_strtod_l+0xb54>)
 80139de:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8013b90 <_strtod_l+0xb60>
 80139e2:	ea0b 0100 	and.w	r1, fp, r0
 80139e6:	4561      	cmp	r1, ip
 80139e8:	ec53 2b1c 	vmov	r2, r3, d12
 80139ec:	d17a      	bne.n	8013ae4 <_strtod_l+0xab4>
 80139ee:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80139f2:	ec49 8b10 	vmov	d0, r8, r9
 80139f6:	910a      	str	r1, [sp, #40]	; 0x28
 80139f8:	f7ff f9c2 	bl	8012d80 <__ulp>
 80139fc:	ec49 8b1e 	vmov	d14, r8, r9
 8013a00:	4860      	ldr	r0, [pc, #384]	; (8013b84 <_strtod_l+0xb54>)
 8013a02:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8013a06:	ee1e 3a90 	vmov	r3, s29
 8013a0a:	4a60      	ldr	r2, [pc, #384]	; (8013b8c <_strtod_l+0xb5c>)
 8013a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a0e:	4018      	ands	r0, r3
 8013a10:	4290      	cmp	r0, r2
 8013a12:	ec59 8b1e 	vmov	r8, r9, d14
 8013a16:	d93c      	bls.n	8013a92 <_strtod_l+0xa62>
 8013a18:	ee18 2a90 	vmov	r2, s17
 8013a1c:	4b5a      	ldr	r3, [pc, #360]	; (8013b88 <_strtod_l+0xb58>)
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d104      	bne.n	8013a2c <_strtod_l+0x9fc>
 8013a22:	ee18 3a10 	vmov	r3, s16
 8013a26:	3301      	adds	r3, #1
 8013a28:	f43f ad40 	beq.w	80134ac <_strtod_l+0x47c>
 8013a2c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8013b88 <_strtod_l+0xb58>
 8013a30:	f04f 38ff 	mov.w	r8, #4294967295
 8013a34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013a36:	4620      	mov	r0, r4
 8013a38:	f7fe fe76 	bl	8012728 <_Bfree>
 8013a3c:	4639      	mov	r1, r7
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f7fe fe72 	bl	8012728 <_Bfree>
 8013a44:	4631      	mov	r1, r6
 8013a46:	4620      	mov	r0, r4
 8013a48:	f7fe fe6e 	bl	8012728 <_Bfree>
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f7fe fe6a 	bl	8012728 <_Bfree>
 8013a54:	e609      	b.n	801366a <_strtod_l+0x63a>
 8013a56:	f1b8 0f01 	cmp.w	r8, #1
 8013a5a:	d103      	bne.n	8013a64 <_strtod_l+0xa34>
 8013a5c:	f1b9 0f00 	cmp.w	r9, #0
 8013a60:	f43f ad93 	beq.w	801358a <_strtod_l+0x55a>
 8013a64:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8013a68:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8013a6c:	e7b6      	b.n	80139dc <_strtod_l+0x9ac>
 8013a6e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013a72:	ee20 db0d 	vmul.f64	d13, d0, d13
 8013a76:	f1ba 0f00 	cmp.w	sl, #0
 8013a7a:	d0ad      	beq.n	80139d8 <_strtod_l+0x9a8>
 8013a7c:	eeb0 cb4d 	vmov.f64	d12, d13
 8013a80:	e7ac      	b.n	80139dc <_strtod_l+0x9ac>
 8013a82:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8013a86:	eeb0 db4c 	vmov.f64	d13, d12
 8013a8a:	e7a7      	b.n	80139dc <_strtod_l+0x9ac>
 8013a8c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8013a90:	e7a4      	b.n	80139dc <_strtod_l+0x9ac>
 8013a92:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013a96:	9b05      	ldr	r3, [sp, #20]
 8013a98:	46cb      	mov	fp, r9
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d1ca      	bne.n	8013a34 <_strtod_l+0xa04>
 8013a9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013aa2:	0d1b      	lsrs	r3, r3, #20
 8013aa4:	051b      	lsls	r3, r3, #20
 8013aa6:	4299      	cmp	r1, r3
 8013aa8:	d1c4      	bne.n	8013a34 <_strtod_l+0xa04>
 8013aaa:	ec51 0b1d 	vmov	r0, r1, d13
 8013aae:	f7ec fe43 	bl	8000738 <__aeabi_d2lz>
 8013ab2:	f7ec fdfb 	bl	80006ac <__aeabi_l2d>
 8013ab6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8013aba:	ec41 0b17 	vmov	d7, r0, r1
 8013abe:	ea4b 0b08 	orr.w	fp, fp, r8
 8013ac2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8013ac6:	ee3d db47 	vsub.f64	d13, d13, d7
 8013aca:	d03c      	beq.n	8013b46 <_strtod_l+0xb16>
 8013acc:	eeb4 dbca 	vcmpe.f64	d13, d10
 8013ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad4:	f53f acf4 	bmi.w	80134c0 <_strtod_l+0x490>
 8013ad8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8013adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae0:	dda8      	ble.n	8013a34 <_strtod_l+0xa04>
 8013ae2:	e4ed      	b.n	80134c0 <_strtod_l+0x490>
 8013ae4:	9805      	ldr	r0, [sp, #20]
 8013ae6:	b1f0      	cbz	r0, 8013b26 <_strtod_l+0xaf6>
 8013ae8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8013aec:	d81b      	bhi.n	8013b26 <_strtod_l+0xaf6>
 8013aee:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8013b78 <_strtod_l+0xb48>
 8013af2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8013af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afa:	d811      	bhi.n	8013b20 <_strtod_l+0xaf0>
 8013afc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8013b00:	ee1d 3a10 	vmov	r3, s26
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	bf38      	it	cc
 8013b08:	2301      	movcc	r3, #1
 8013b0a:	ee0d 3a10 	vmov	s26, r3
 8013b0e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8013b12:	f1ba 0f00 	cmp.w	sl, #0
 8013b16:	d113      	bne.n	8013b40 <_strtod_l+0xb10>
 8013b18:	eeb1 7b4d 	vneg.f64	d7, d13
 8013b1c:	ec53 2b17 	vmov	r2, r3, d7
 8013b20:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8013b24:	1a43      	subs	r3, r0, r1
 8013b26:	eeb0 0b48 	vmov.f64	d0, d8
 8013b2a:	ec43 2b1c 	vmov	d12, r2, r3
 8013b2e:	910a      	str	r1, [sp, #40]	; 0x28
 8013b30:	f7ff f926 	bl	8012d80 <__ulp>
 8013b34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013b36:	eeac 8b00 	vfma.f64	d8, d12, d0
 8013b3a:	ec59 8b18 	vmov	r8, r9, d8
 8013b3e:	e7aa      	b.n	8013a96 <_strtod_l+0xa66>
 8013b40:	eeb0 7b4d 	vmov.f64	d7, d13
 8013b44:	e7ea      	b.n	8013b1c <_strtod_l+0xaec>
 8013b46:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8013b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4e:	f57f af71 	bpl.w	8013a34 <_strtod_l+0xa04>
 8013b52:	e4b5      	b.n	80134c0 <_strtod_l+0x490>
 8013b54:	2300      	movs	r3, #0
 8013b56:	9308      	str	r3, [sp, #32]
 8013b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b5c:	6013      	str	r3, [r2, #0]
 8013b5e:	f7ff baa6 	b.w	80130ae <_strtod_l+0x7e>
 8013b62:	2a65      	cmp	r2, #101	; 0x65
 8013b64:	f43f aba2 	beq.w	80132ac <_strtod_l+0x27c>
 8013b68:	2a45      	cmp	r2, #69	; 0x45
 8013b6a:	f43f ab9f 	beq.w	80132ac <_strtod_l+0x27c>
 8013b6e:	2101      	movs	r1, #1
 8013b70:	f7ff bbd8 	b.w	8013324 <_strtod_l+0x2f4>
 8013b74:	f3af 8000 	nop.w
 8013b78:	ffc00000 	.word	0xffc00000
 8013b7c:	41dfffff 	.word	0x41dfffff
 8013b80:	000fffff 	.word	0x000fffff
 8013b84:	7ff00000 	.word	0x7ff00000
 8013b88:	7fefffff 	.word	0x7fefffff
 8013b8c:	7c9fffff 	.word	0x7c9fffff
 8013b90:	7fe00000 	.word	0x7fe00000

08013b94 <_strtod_r>:
 8013b94:	4b01      	ldr	r3, [pc, #4]	; (8013b9c <_strtod_r+0x8>)
 8013b96:	f7ff ba4b 	b.w	8013030 <_strtod_l>
 8013b9a:	bf00      	nop
 8013b9c:	24000070 	.word	0x24000070

08013ba0 <_strtol_l.constprop.0>:
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba6:	d001      	beq.n	8013bac <_strtol_l.constprop.0+0xc>
 8013ba8:	2b24      	cmp	r3, #36	; 0x24
 8013baa:	d906      	bls.n	8013bba <_strtol_l.constprop.0+0x1a>
 8013bac:	f7fd fefa 	bl	80119a4 <__errno>
 8013bb0:	2316      	movs	r3, #22
 8013bb2:	6003      	str	r3, [r0, #0]
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013ca0 <_strtol_l.constprop.0+0x100>
 8013bbe:	460d      	mov	r5, r1
 8013bc0:	462e      	mov	r6, r5
 8013bc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bc6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013bca:	f017 0708 	ands.w	r7, r7, #8
 8013bce:	d1f7      	bne.n	8013bc0 <_strtol_l.constprop.0+0x20>
 8013bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8013bd2:	d132      	bne.n	8013c3a <_strtol_l.constprop.0+0x9a>
 8013bd4:	782c      	ldrb	r4, [r5, #0]
 8013bd6:	2701      	movs	r7, #1
 8013bd8:	1cb5      	adds	r5, r6, #2
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d05b      	beq.n	8013c96 <_strtol_l.constprop.0+0xf6>
 8013bde:	2b10      	cmp	r3, #16
 8013be0:	d109      	bne.n	8013bf6 <_strtol_l.constprop.0+0x56>
 8013be2:	2c30      	cmp	r4, #48	; 0x30
 8013be4:	d107      	bne.n	8013bf6 <_strtol_l.constprop.0+0x56>
 8013be6:	782c      	ldrb	r4, [r5, #0]
 8013be8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013bec:	2c58      	cmp	r4, #88	; 0x58
 8013bee:	d14d      	bne.n	8013c8c <_strtol_l.constprop.0+0xec>
 8013bf0:	786c      	ldrb	r4, [r5, #1]
 8013bf2:	2310      	movs	r3, #16
 8013bf4:	3502      	adds	r5, #2
 8013bf6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013bfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8013bfe:	f04f 0e00 	mov.w	lr, #0
 8013c02:	fbb8 f9f3 	udiv	r9, r8, r3
 8013c06:	4676      	mov	r6, lr
 8013c08:	fb03 8a19 	mls	sl, r3, r9, r8
 8013c0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013c10:	f1bc 0f09 	cmp.w	ip, #9
 8013c14:	d816      	bhi.n	8013c44 <_strtol_l.constprop.0+0xa4>
 8013c16:	4664      	mov	r4, ip
 8013c18:	42a3      	cmp	r3, r4
 8013c1a:	dd24      	ble.n	8013c66 <_strtol_l.constprop.0+0xc6>
 8013c1c:	f1be 3fff 	cmp.w	lr, #4294967295
 8013c20:	d008      	beq.n	8013c34 <_strtol_l.constprop.0+0x94>
 8013c22:	45b1      	cmp	r9, r6
 8013c24:	d31c      	bcc.n	8013c60 <_strtol_l.constprop.0+0xc0>
 8013c26:	d101      	bne.n	8013c2c <_strtol_l.constprop.0+0x8c>
 8013c28:	45a2      	cmp	sl, r4
 8013c2a:	db19      	blt.n	8013c60 <_strtol_l.constprop.0+0xc0>
 8013c2c:	fb06 4603 	mla	r6, r6, r3, r4
 8013c30:	f04f 0e01 	mov.w	lr, #1
 8013c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c38:	e7e8      	b.n	8013c0c <_strtol_l.constprop.0+0x6c>
 8013c3a:	2c2b      	cmp	r4, #43	; 0x2b
 8013c3c:	bf04      	itt	eq
 8013c3e:	782c      	ldrbeq	r4, [r5, #0]
 8013c40:	1cb5      	addeq	r5, r6, #2
 8013c42:	e7ca      	b.n	8013bda <_strtol_l.constprop.0+0x3a>
 8013c44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013c48:	f1bc 0f19 	cmp.w	ip, #25
 8013c4c:	d801      	bhi.n	8013c52 <_strtol_l.constprop.0+0xb2>
 8013c4e:	3c37      	subs	r4, #55	; 0x37
 8013c50:	e7e2      	b.n	8013c18 <_strtol_l.constprop.0+0x78>
 8013c52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013c56:	f1bc 0f19 	cmp.w	ip, #25
 8013c5a:	d804      	bhi.n	8013c66 <_strtol_l.constprop.0+0xc6>
 8013c5c:	3c57      	subs	r4, #87	; 0x57
 8013c5e:	e7db      	b.n	8013c18 <_strtol_l.constprop.0+0x78>
 8013c60:	f04f 3eff 	mov.w	lr, #4294967295
 8013c64:	e7e6      	b.n	8013c34 <_strtol_l.constprop.0+0x94>
 8013c66:	f1be 3fff 	cmp.w	lr, #4294967295
 8013c6a:	d105      	bne.n	8013c78 <_strtol_l.constprop.0+0xd8>
 8013c6c:	2322      	movs	r3, #34	; 0x22
 8013c6e:	6003      	str	r3, [r0, #0]
 8013c70:	4646      	mov	r6, r8
 8013c72:	b942      	cbnz	r2, 8013c86 <_strtol_l.constprop.0+0xe6>
 8013c74:	4630      	mov	r0, r6
 8013c76:	e79e      	b.n	8013bb6 <_strtol_l.constprop.0+0x16>
 8013c78:	b107      	cbz	r7, 8013c7c <_strtol_l.constprop.0+0xdc>
 8013c7a:	4276      	negs	r6, r6
 8013c7c:	2a00      	cmp	r2, #0
 8013c7e:	d0f9      	beq.n	8013c74 <_strtol_l.constprop.0+0xd4>
 8013c80:	f1be 0f00 	cmp.w	lr, #0
 8013c84:	d000      	beq.n	8013c88 <_strtol_l.constprop.0+0xe8>
 8013c86:	1e69      	subs	r1, r5, #1
 8013c88:	6011      	str	r1, [r2, #0]
 8013c8a:	e7f3      	b.n	8013c74 <_strtol_l.constprop.0+0xd4>
 8013c8c:	2430      	movs	r4, #48	; 0x30
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d1b1      	bne.n	8013bf6 <_strtol_l.constprop.0+0x56>
 8013c92:	2308      	movs	r3, #8
 8013c94:	e7af      	b.n	8013bf6 <_strtol_l.constprop.0+0x56>
 8013c96:	2c30      	cmp	r4, #48	; 0x30
 8013c98:	d0a5      	beq.n	8013be6 <_strtol_l.constprop.0+0x46>
 8013c9a:	230a      	movs	r3, #10
 8013c9c:	e7ab      	b.n	8013bf6 <_strtol_l.constprop.0+0x56>
 8013c9e:	bf00      	nop
 8013ca0:	08015209 	.word	0x08015209

08013ca4 <_strtol_r>:
 8013ca4:	f7ff bf7c 	b.w	8013ba0 <_strtol_l.constprop.0>

08013ca8 <__ssputs_r>:
 8013ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cac:	688e      	ldr	r6, [r1, #8]
 8013cae:	461f      	mov	r7, r3
 8013cb0:	42be      	cmp	r6, r7
 8013cb2:	680b      	ldr	r3, [r1, #0]
 8013cb4:	4682      	mov	sl, r0
 8013cb6:	460c      	mov	r4, r1
 8013cb8:	4690      	mov	r8, r2
 8013cba:	d82c      	bhi.n	8013d16 <__ssputs_r+0x6e>
 8013cbc:	898a      	ldrh	r2, [r1, #12]
 8013cbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013cc2:	d026      	beq.n	8013d12 <__ssputs_r+0x6a>
 8013cc4:	6965      	ldr	r5, [r4, #20]
 8013cc6:	6909      	ldr	r1, [r1, #16]
 8013cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ccc:	eba3 0901 	sub.w	r9, r3, r1
 8013cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013cd4:	1c7b      	adds	r3, r7, #1
 8013cd6:	444b      	add	r3, r9
 8013cd8:	106d      	asrs	r5, r5, #1
 8013cda:	429d      	cmp	r5, r3
 8013cdc:	bf38      	it	cc
 8013cde:	461d      	movcc	r5, r3
 8013ce0:	0553      	lsls	r3, r2, #21
 8013ce2:	d527      	bpl.n	8013d34 <__ssputs_r+0x8c>
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	f7fc fd93 	bl	8010810 <_malloc_r>
 8013cea:	4606      	mov	r6, r0
 8013cec:	b360      	cbz	r0, 8013d48 <__ssputs_r+0xa0>
 8013cee:	6921      	ldr	r1, [r4, #16]
 8013cf0:	464a      	mov	r2, r9
 8013cf2:	f7fd fe83 	bl	80119fc <memcpy>
 8013cf6:	89a3      	ldrh	r3, [r4, #12]
 8013cf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d00:	81a3      	strh	r3, [r4, #12]
 8013d02:	6126      	str	r6, [r4, #16]
 8013d04:	6165      	str	r5, [r4, #20]
 8013d06:	444e      	add	r6, r9
 8013d08:	eba5 0509 	sub.w	r5, r5, r9
 8013d0c:	6026      	str	r6, [r4, #0]
 8013d0e:	60a5      	str	r5, [r4, #8]
 8013d10:	463e      	mov	r6, r7
 8013d12:	42be      	cmp	r6, r7
 8013d14:	d900      	bls.n	8013d18 <__ssputs_r+0x70>
 8013d16:	463e      	mov	r6, r7
 8013d18:	6820      	ldr	r0, [r4, #0]
 8013d1a:	4632      	mov	r2, r6
 8013d1c:	4641      	mov	r1, r8
 8013d1e:	f000 f9c9 	bl	80140b4 <memmove>
 8013d22:	68a3      	ldr	r3, [r4, #8]
 8013d24:	1b9b      	subs	r3, r3, r6
 8013d26:	60a3      	str	r3, [r4, #8]
 8013d28:	6823      	ldr	r3, [r4, #0]
 8013d2a:	4433      	add	r3, r6
 8013d2c:	6023      	str	r3, [r4, #0]
 8013d2e:	2000      	movs	r0, #0
 8013d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d34:	462a      	mov	r2, r5
 8013d36:	f000 fd90 	bl	801485a <_realloc_r>
 8013d3a:	4606      	mov	r6, r0
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	d1e0      	bne.n	8013d02 <__ssputs_r+0x5a>
 8013d40:	6921      	ldr	r1, [r4, #16]
 8013d42:	4650      	mov	r0, sl
 8013d44:	f7fe fc64 	bl	8012610 <_free_r>
 8013d48:	230c      	movs	r3, #12
 8013d4a:	f8ca 3000 	str.w	r3, [sl]
 8013d4e:	89a3      	ldrh	r3, [r4, #12]
 8013d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d54:	81a3      	strh	r3, [r4, #12]
 8013d56:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5a:	e7e9      	b.n	8013d30 <__ssputs_r+0x88>

08013d5c <_svfiprintf_r>:
 8013d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d60:	4698      	mov	r8, r3
 8013d62:	898b      	ldrh	r3, [r1, #12]
 8013d64:	061b      	lsls	r3, r3, #24
 8013d66:	b09d      	sub	sp, #116	; 0x74
 8013d68:	4607      	mov	r7, r0
 8013d6a:	460d      	mov	r5, r1
 8013d6c:	4614      	mov	r4, r2
 8013d6e:	d50e      	bpl.n	8013d8e <_svfiprintf_r+0x32>
 8013d70:	690b      	ldr	r3, [r1, #16]
 8013d72:	b963      	cbnz	r3, 8013d8e <_svfiprintf_r+0x32>
 8013d74:	2140      	movs	r1, #64	; 0x40
 8013d76:	f7fc fd4b 	bl	8010810 <_malloc_r>
 8013d7a:	6028      	str	r0, [r5, #0]
 8013d7c:	6128      	str	r0, [r5, #16]
 8013d7e:	b920      	cbnz	r0, 8013d8a <_svfiprintf_r+0x2e>
 8013d80:	230c      	movs	r3, #12
 8013d82:	603b      	str	r3, [r7, #0]
 8013d84:	f04f 30ff 	mov.w	r0, #4294967295
 8013d88:	e0d0      	b.n	8013f2c <_svfiprintf_r+0x1d0>
 8013d8a:	2340      	movs	r3, #64	; 0x40
 8013d8c:	616b      	str	r3, [r5, #20]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	9309      	str	r3, [sp, #36]	; 0x24
 8013d92:	2320      	movs	r3, #32
 8013d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d9c:	2330      	movs	r3, #48	; 0x30
 8013d9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013f44 <_svfiprintf_r+0x1e8>
 8013da2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013da6:	f04f 0901 	mov.w	r9, #1
 8013daa:	4623      	mov	r3, r4
 8013dac:	469a      	mov	sl, r3
 8013dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013db2:	b10a      	cbz	r2, 8013db8 <_svfiprintf_r+0x5c>
 8013db4:	2a25      	cmp	r2, #37	; 0x25
 8013db6:	d1f9      	bne.n	8013dac <_svfiprintf_r+0x50>
 8013db8:	ebba 0b04 	subs.w	fp, sl, r4
 8013dbc:	d00b      	beq.n	8013dd6 <_svfiprintf_r+0x7a>
 8013dbe:	465b      	mov	r3, fp
 8013dc0:	4622      	mov	r2, r4
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	4638      	mov	r0, r7
 8013dc6:	f7ff ff6f 	bl	8013ca8 <__ssputs_r>
 8013dca:	3001      	adds	r0, #1
 8013dcc:	f000 80a9 	beq.w	8013f22 <_svfiprintf_r+0x1c6>
 8013dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dd2:	445a      	add	r2, fp
 8013dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8013dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	f000 80a1 	beq.w	8013f22 <_svfiprintf_r+0x1c6>
 8013de0:	2300      	movs	r3, #0
 8013de2:	f04f 32ff 	mov.w	r2, #4294967295
 8013de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dea:	f10a 0a01 	add.w	sl, sl, #1
 8013dee:	9304      	str	r3, [sp, #16]
 8013df0:	9307      	str	r3, [sp, #28]
 8013df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013df6:	931a      	str	r3, [sp, #104]	; 0x68
 8013df8:	4654      	mov	r4, sl
 8013dfa:	2205      	movs	r2, #5
 8013dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e00:	4850      	ldr	r0, [pc, #320]	; (8013f44 <_svfiprintf_r+0x1e8>)
 8013e02:	f7ec fa6d 	bl	80002e0 <memchr>
 8013e06:	9a04      	ldr	r2, [sp, #16]
 8013e08:	b9d8      	cbnz	r0, 8013e42 <_svfiprintf_r+0xe6>
 8013e0a:	06d0      	lsls	r0, r2, #27
 8013e0c:	bf44      	itt	mi
 8013e0e:	2320      	movmi	r3, #32
 8013e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e14:	0711      	lsls	r1, r2, #28
 8013e16:	bf44      	itt	mi
 8013e18:	232b      	movmi	r3, #43	; 0x2b
 8013e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8013e22:	2b2a      	cmp	r3, #42	; 0x2a
 8013e24:	d015      	beq.n	8013e52 <_svfiprintf_r+0xf6>
 8013e26:	9a07      	ldr	r2, [sp, #28]
 8013e28:	4654      	mov	r4, sl
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	f04f 0c0a 	mov.w	ip, #10
 8013e30:	4621      	mov	r1, r4
 8013e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e36:	3b30      	subs	r3, #48	; 0x30
 8013e38:	2b09      	cmp	r3, #9
 8013e3a:	d94d      	bls.n	8013ed8 <_svfiprintf_r+0x17c>
 8013e3c:	b1b0      	cbz	r0, 8013e6c <_svfiprintf_r+0x110>
 8013e3e:	9207      	str	r2, [sp, #28]
 8013e40:	e014      	b.n	8013e6c <_svfiprintf_r+0x110>
 8013e42:	eba0 0308 	sub.w	r3, r0, r8
 8013e46:	fa09 f303 	lsl.w	r3, r9, r3
 8013e4a:	4313      	orrs	r3, r2
 8013e4c:	9304      	str	r3, [sp, #16]
 8013e4e:	46a2      	mov	sl, r4
 8013e50:	e7d2      	b.n	8013df8 <_svfiprintf_r+0x9c>
 8013e52:	9b03      	ldr	r3, [sp, #12]
 8013e54:	1d19      	adds	r1, r3, #4
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	9103      	str	r1, [sp, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	bfbb      	ittet	lt
 8013e5e:	425b      	neglt	r3, r3
 8013e60:	f042 0202 	orrlt.w	r2, r2, #2
 8013e64:	9307      	strge	r3, [sp, #28]
 8013e66:	9307      	strlt	r3, [sp, #28]
 8013e68:	bfb8      	it	lt
 8013e6a:	9204      	strlt	r2, [sp, #16]
 8013e6c:	7823      	ldrb	r3, [r4, #0]
 8013e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8013e70:	d10c      	bne.n	8013e8c <_svfiprintf_r+0x130>
 8013e72:	7863      	ldrb	r3, [r4, #1]
 8013e74:	2b2a      	cmp	r3, #42	; 0x2a
 8013e76:	d134      	bne.n	8013ee2 <_svfiprintf_r+0x186>
 8013e78:	9b03      	ldr	r3, [sp, #12]
 8013e7a:	1d1a      	adds	r2, r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	9203      	str	r2, [sp, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	bfb8      	it	lt
 8013e84:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e88:	3402      	adds	r4, #2
 8013e8a:	9305      	str	r3, [sp, #20]
 8013e8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013f54 <_svfiprintf_r+0x1f8>
 8013e90:	7821      	ldrb	r1, [r4, #0]
 8013e92:	2203      	movs	r2, #3
 8013e94:	4650      	mov	r0, sl
 8013e96:	f7ec fa23 	bl	80002e0 <memchr>
 8013e9a:	b138      	cbz	r0, 8013eac <_svfiprintf_r+0x150>
 8013e9c:	9b04      	ldr	r3, [sp, #16]
 8013e9e:	eba0 000a 	sub.w	r0, r0, sl
 8013ea2:	2240      	movs	r2, #64	; 0x40
 8013ea4:	4082      	lsls	r2, r0
 8013ea6:	4313      	orrs	r3, r2
 8013ea8:	3401      	adds	r4, #1
 8013eaa:	9304      	str	r3, [sp, #16]
 8013eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eb0:	4825      	ldr	r0, [pc, #148]	; (8013f48 <_svfiprintf_r+0x1ec>)
 8013eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013eb6:	2206      	movs	r2, #6
 8013eb8:	f7ec fa12 	bl	80002e0 <memchr>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d038      	beq.n	8013f32 <_svfiprintf_r+0x1d6>
 8013ec0:	4b22      	ldr	r3, [pc, #136]	; (8013f4c <_svfiprintf_r+0x1f0>)
 8013ec2:	bb1b      	cbnz	r3, 8013f0c <_svfiprintf_r+0x1b0>
 8013ec4:	9b03      	ldr	r3, [sp, #12]
 8013ec6:	3307      	adds	r3, #7
 8013ec8:	f023 0307 	bic.w	r3, r3, #7
 8013ecc:	3308      	adds	r3, #8
 8013ece:	9303      	str	r3, [sp, #12]
 8013ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ed2:	4433      	add	r3, r6
 8013ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed6:	e768      	b.n	8013daa <_svfiprintf_r+0x4e>
 8013ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013edc:	460c      	mov	r4, r1
 8013ede:	2001      	movs	r0, #1
 8013ee0:	e7a6      	b.n	8013e30 <_svfiprintf_r+0xd4>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	3401      	adds	r4, #1
 8013ee6:	9305      	str	r3, [sp, #20]
 8013ee8:	4619      	mov	r1, r3
 8013eea:	f04f 0c0a 	mov.w	ip, #10
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ef4:	3a30      	subs	r2, #48	; 0x30
 8013ef6:	2a09      	cmp	r2, #9
 8013ef8:	d903      	bls.n	8013f02 <_svfiprintf_r+0x1a6>
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d0c6      	beq.n	8013e8c <_svfiprintf_r+0x130>
 8013efe:	9105      	str	r1, [sp, #20]
 8013f00:	e7c4      	b.n	8013e8c <_svfiprintf_r+0x130>
 8013f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f06:	4604      	mov	r4, r0
 8013f08:	2301      	movs	r3, #1
 8013f0a:	e7f0      	b.n	8013eee <_svfiprintf_r+0x192>
 8013f0c:	ab03      	add	r3, sp, #12
 8013f0e:	9300      	str	r3, [sp, #0]
 8013f10:	462a      	mov	r2, r5
 8013f12:	4b0f      	ldr	r3, [pc, #60]	; (8013f50 <_svfiprintf_r+0x1f4>)
 8013f14:	a904      	add	r1, sp, #16
 8013f16:	4638      	mov	r0, r7
 8013f18:	f7fc fd96 	bl	8010a48 <_printf_float>
 8013f1c:	1c42      	adds	r2, r0, #1
 8013f1e:	4606      	mov	r6, r0
 8013f20:	d1d6      	bne.n	8013ed0 <_svfiprintf_r+0x174>
 8013f22:	89ab      	ldrh	r3, [r5, #12]
 8013f24:	065b      	lsls	r3, r3, #25
 8013f26:	f53f af2d 	bmi.w	8013d84 <_svfiprintf_r+0x28>
 8013f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f2c:	b01d      	add	sp, #116	; 0x74
 8013f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f32:	ab03      	add	r3, sp, #12
 8013f34:	9300      	str	r3, [sp, #0]
 8013f36:	462a      	mov	r2, r5
 8013f38:	4b05      	ldr	r3, [pc, #20]	; (8013f50 <_svfiprintf_r+0x1f4>)
 8013f3a:	a904      	add	r1, sp, #16
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7fd f80b 	bl	8010f58 <_printf_i>
 8013f42:	e7eb      	b.n	8013f1c <_svfiprintf_r+0x1c0>
 8013f44:	08015309 	.word	0x08015309
 8013f48:	08015313 	.word	0x08015313
 8013f4c:	08010a49 	.word	0x08010a49
 8013f50:	08013ca9 	.word	0x08013ca9
 8013f54:	0801530f 	.word	0x0801530f

08013f58 <__sflush_r>:
 8013f58:	898a      	ldrh	r2, [r1, #12]
 8013f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5e:	4605      	mov	r5, r0
 8013f60:	0710      	lsls	r0, r2, #28
 8013f62:	460c      	mov	r4, r1
 8013f64:	d458      	bmi.n	8014018 <__sflush_r+0xc0>
 8013f66:	684b      	ldr	r3, [r1, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	dc05      	bgt.n	8013f78 <__sflush_r+0x20>
 8013f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	dc02      	bgt.n	8013f78 <__sflush_r+0x20>
 8013f72:	2000      	movs	r0, #0
 8013f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f7a:	2e00      	cmp	r6, #0
 8013f7c:	d0f9      	beq.n	8013f72 <__sflush_r+0x1a>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f84:	682f      	ldr	r7, [r5, #0]
 8013f86:	6a21      	ldr	r1, [r4, #32]
 8013f88:	602b      	str	r3, [r5, #0]
 8013f8a:	d032      	beq.n	8013ff2 <__sflush_r+0x9a>
 8013f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f8e:	89a3      	ldrh	r3, [r4, #12]
 8013f90:	075a      	lsls	r2, r3, #29
 8013f92:	d505      	bpl.n	8013fa0 <__sflush_r+0x48>
 8013f94:	6863      	ldr	r3, [r4, #4]
 8013f96:	1ac0      	subs	r0, r0, r3
 8013f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f9a:	b10b      	cbz	r3, 8013fa0 <__sflush_r+0x48>
 8013f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f9e:	1ac0      	subs	r0, r0, r3
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fa6:	6a21      	ldr	r1, [r4, #32]
 8013fa8:	4628      	mov	r0, r5
 8013faa:	47b0      	blx	r6
 8013fac:	1c43      	adds	r3, r0, #1
 8013fae:	89a3      	ldrh	r3, [r4, #12]
 8013fb0:	d106      	bne.n	8013fc0 <__sflush_r+0x68>
 8013fb2:	6829      	ldr	r1, [r5, #0]
 8013fb4:	291d      	cmp	r1, #29
 8013fb6:	d82b      	bhi.n	8014010 <__sflush_r+0xb8>
 8013fb8:	4a29      	ldr	r2, [pc, #164]	; (8014060 <__sflush_r+0x108>)
 8013fba:	410a      	asrs	r2, r1
 8013fbc:	07d6      	lsls	r6, r2, #31
 8013fbe:	d427      	bmi.n	8014010 <__sflush_r+0xb8>
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	6062      	str	r2, [r4, #4]
 8013fc4:	04d9      	lsls	r1, r3, #19
 8013fc6:	6922      	ldr	r2, [r4, #16]
 8013fc8:	6022      	str	r2, [r4, #0]
 8013fca:	d504      	bpl.n	8013fd6 <__sflush_r+0x7e>
 8013fcc:	1c42      	adds	r2, r0, #1
 8013fce:	d101      	bne.n	8013fd4 <__sflush_r+0x7c>
 8013fd0:	682b      	ldr	r3, [r5, #0]
 8013fd2:	b903      	cbnz	r3, 8013fd6 <__sflush_r+0x7e>
 8013fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8013fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fd8:	602f      	str	r7, [r5, #0]
 8013fda:	2900      	cmp	r1, #0
 8013fdc:	d0c9      	beq.n	8013f72 <__sflush_r+0x1a>
 8013fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fe2:	4299      	cmp	r1, r3
 8013fe4:	d002      	beq.n	8013fec <__sflush_r+0x94>
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	f7fe fb12 	bl	8012610 <_free_r>
 8013fec:	2000      	movs	r0, #0
 8013fee:	6360      	str	r0, [r4, #52]	; 0x34
 8013ff0:	e7c0      	b.n	8013f74 <__sflush_r+0x1c>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	47b0      	blx	r6
 8013ff8:	1c41      	adds	r1, r0, #1
 8013ffa:	d1c8      	bne.n	8013f8e <__sflush_r+0x36>
 8013ffc:	682b      	ldr	r3, [r5, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d0c5      	beq.n	8013f8e <__sflush_r+0x36>
 8014002:	2b1d      	cmp	r3, #29
 8014004:	d001      	beq.n	801400a <__sflush_r+0xb2>
 8014006:	2b16      	cmp	r3, #22
 8014008:	d101      	bne.n	801400e <__sflush_r+0xb6>
 801400a:	602f      	str	r7, [r5, #0]
 801400c:	e7b1      	b.n	8013f72 <__sflush_r+0x1a>
 801400e:	89a3      	ldrh	r3, [r4, #12]
 8014010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014014:	81a3      	strh	r3, [r4, #12]
 8014016:	e7ad      	b.n	8013f74 <__sflush_r+0x1c>
 8014018:	690f      	ldr	r7, [r1, #16]
 801401a:	2f00      	cmp	r7, #0
 801401c:	d0a9      	beq.n	8013f72 <__sflush_r+0x1a>
 801401e:	0793      	lsls	r3, r2, #30
 8014020:	680e      	ldr	r6, [r1, #0]
 8014022:	bf08      	it	eq
 8014024:	694b      	ldreq	r3, [r1, #20]
 8014026:	600f      	str	r7, [r1, #0]
 8014028:	bf18      	it	ne
 801402a:	2300      	movne	r3, #0
 801402c:	eba6 0807 	sub.w	r8, r6, r7
 8014030:	608b      	str	r3, [r1, #8]
 8014032:	f1b8 0f00 	cmp.w	r8, #0
 8014036:	dd9c      	ble.n	8013f72 <__sflush_r+0x1a>
 8014038:	6a21      	ldr	r1, [r4, #32]
 801403a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801403c:	4643      	mov	r3, r8
 801403e:	463a      	mov	r2, r7
 8014040:	4628      	mov	r0, r5
 8014042:	47b0      	blx	r6
 8014044:	2800      	cmp	r0, #0
 8014046:	dc06      	bgt.n	8014056 <__sflush_r+0xfe>
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801404e:	81a3      	strh	r3, [r4, #12]
 8014050:	f04f 30ff 	mov.w	r0, #4294967295
 8014054:	e78e      	b.n	8013f74 <__sflush_r+0x1c>
 8014056:	4407      	add	r7, r0
 8014058:	eba8 0800 	sub.w	r8, r8, r0
 801405c:	e7e9      	b.n	8014032 <__sflush_r+0xda>
 801405e:	bf00      	nop
 8014060:	dfbffffe 	.word	0xdfbffffe

08014064 <_fflush_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	690b      	ldr	r3, [r1, #16]
 8014068:	4605      	mov	r5, r0
 801406a:	460c      	mov	r4, r1
 801406c:	b913      	cbnz	r3, 8014074 <_fflush_r+0x10>
 801406e:	2500      	movs	r5, #0
 8014070:	4628      	mov	r0, r5
 8014072:	bd38      	pop	{r3, r4, r5, pc}
 8014074:	b118      	cbz	r0, 801407e <_fflush_r+0x1a>
 8014076:	6a03      	ldr	r3, [r0, #32]
 8014078:	b90b      	cbnz	r3, 801407e <_fflush_r+0x1a>
 801407a:	f7fd fb0d 	bl	8011698 <__sinit>
 801407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d0f3      	beq.n	801406e <_fflush_r+0xa>
 8014086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014088:	07d0      	lsls	r0, r2, #31
 801408a:	d404      	bmi.n	8014096 <_fflush_r+0x32>
 801408c:	0599      	lsls	r1, r3, #22
 801408e:	d402      	bmi.n	8014096 <_fflush_r+0x32>
 8014090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014092:	f7fd fcb1 	bl	80119f8 <__retarget_lock_acquire_recursive>
 8014096:	4628      	mov	r0, r5
 8014098:	4621      	mov	r1, r4
 801409a:	f7ff ff5d 	bl	8013f58 <__sflush_r>
 801409e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140a0:	07da      	lsls	r2, r3, #31
 80140a2:	4605      	mov	r5, r0
 80140a4:	d4e4      	bmi.n	8014070 <_fflush_r+0xc>
 80140a6:	89a3      	ldrh	r3, [r4, #12]
 80140a8:	059b      	lsls	r3, r3, #22
 80140aa:	d4e1      	bmi.n	8014070 <_fflush_r+0xc>
 80140ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140ae:	f7fd fca4 	bl	80119fa <__retarget_lock_release_recursive>
 80140b2:	e7dd      	b.n	8014070 <_fflush_r+0xc>

080140b4 <memmove>:
 80140b4:	4288      	cmp	r0, r1
 80140b6:	b510      	push	{r4, lr}
 80140b8:	eb01 0402 	add.w	r4, r1, r2
 80140bc:	d902      	bls.n	80140c4 <memmove+0x10>
 80140be:	4284      	cmp	r4, r0
 80140c0:	4623      	mov	r3, r4
 80140c2:	d807      	bhi.n	80140d4 <memmove+0x20>
 80140c4:	1e43      	subs	r3, r0, #1
 80140c6:	42a1      	cmp	r1, r4
 80140c8:	d008      	beq.n	80140dc <memmove+0x28>
 80140ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140d2:	e7f8      	b.n	80140c6 <memmove+0x12>
 80140d4:	4402      	add	r2, r0
 80140d6:	4601      	mov	r1, r0
 80140d8:	428a      	cmp	r2, r1
 80140da:	d100      	bne.n	80140de <memmove+0x2a>
 80140dc:	bd10      	pop	{r4, pc}
 80140de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140e6:	e7f7      	b.n	80140d8 <memmove+0x24>

080140e8 <strncmp>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	b16a      	cbz	r2, 8014108 <strncmp+0x20>
 80140ec:	3901      	subs	r1, #1
 80140ee:	1884      	adds	r4, r0, r2
 80140f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d103      	bne.n	8014104 <strncmp+0x1c>
 80140fc:	42a0      	cmp	r0, r4
 80140fe:	d001      	beq.n	8014104 <strncmp+0x1c>
 8014100:	2a00      	cmp	r2, #0
 8014102:	d1f5      	bne.n	80140f0 <strncmp+0x8>
 8014104:	1ad0      	subs	r0, r2, r3
 8014106:	bd10      	pop	{r4, pc}
 8014108:	4610      	mov	r0, r2
 801410a:	e7fc      	b.n	8014106 <strncmp+0x1e>
 801410c:	0000      	movs	r0, r0
	...

08014110 <nan>:
 8014110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014118 <nan+0x8>
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	00000000 	.word	0x00000000
 801411c:	7ff80000 	.word	0x7ff80000

08014120 <__assert_func>:
 8014120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014122:	4614      	mov	r4, r2
 8014124:	461a      	mov	r2, r3
 8014126:	4b09      	ldr	r3, [pc, #36]	; (801414c <__assert_func+0x2c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4605      	mov	r5, r0
 801412c:	68d8      	ldr	r0, [r3, #12]
 801412e:	b14c      	cbz	r4, 8014144 <__assert_func+0x24>
 8014130:	4b07      	ldr	r3, [pc, #28]	; (8014150 <__assert_func+0x30>)
 8014132:	9100      	str	r1, [sp, #0]
 8014134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014138:	4906      	ldr	r1, [pc, #24]	; (8014154 <__assert_func+0x34>)
 801413a:	462b      	mov	r3, r5
 801413c:	f000 fbca 	bl	80148d4 <fiprintf>
 8014140:	f000 fbda 	bl	80148f8 <abort>
 8014144:	4b04      	ldr	r3, [pc, #16]	; (8014158 <__assert_func+0x38>)
 8014146:	461c      	mov	r4, r3
 8014148:	e7f3      	b.n	8014132 <__assert_func+0x12>
 801414a:	bf00      	nop
 801414c:	2400006c 	.word	0x2400006c
 8014150:	08015322 	.word	0x08015322
 8014154:	0801532f 	.word	0x0801532f
 8014158:	0801535d 	.word	0x0801535d

0801415c <_calloc_r>:
 801415c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801415e:	fba1 2402 	umull	r2, r4, r1, r2
 8014162:	b94c      	cbnz	r4, 8014178 <_calloc_r+0x1c>
 8014164:	4611      	mov	r1, r2
 8014166:	9201      	str	r2, [sp, #4]
 8014168:	f7fc fb52 	bl	8010810 <_malloc_r>
 801416c:	9a01      	ldr	r2, [sp, #4]
 801416e:	4605      	mov	r5, r0
 8014170:	b930      	cbnz	r0, 8014180 <_calloc_r+0x24>
 8014172:	4628      	mov	r0, r5
 8014174:	b003      	add	sp, #12
 8014176:	bd30      	pop	{r4, r5, pc}
 8014178:	220c      	movs	r2, #12
 801417a:	6002      	str	r2, [r0, #0]
 801417c:	2500      	movs	r5, #0
 801417e:	e7f8      	b.n	8014172 <_calloc_r+0x16>
 8014180:	4621      	mov	r1, r4
 8014182:	f7fd fb56 	bl	8011832 <memset>
 8014186:	e7f4      	b.n	8014172 <_calloc_r+0x16>

08014188 <rshift>:
 8014188:	6903      	ldr	r3, [r0, #16]
 801418a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801418e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014192:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014196:	f100 0414 	add.w	r4, r0, #20
 801419a:	dd45      	ble.n	8014228 <rshift+0xa0>
 801419c:	f011 011f 	ands.w	r1, r1, #31
 80141a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80141a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80141a8:	d10c      	bne.n	80141c4 <rshift+0x3c>
 80141aa:	f100 0710 	add.w	r7, r0, #16
 80141ae:	4629      	mov	r1, r5
 80141b0:	42b1      	cmp	r1, r6
 80141b2:	d334      	bcc.n	801421e <rshift+0x96>
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	1eea      	subs	r2, r5, #3
 80141ba:	4296      	cmp	r6, r2
 80141bc:	bf38      	it	cc
 80141be:	2300      	movcc	r3, #0
 80141c0:	4423      	add	r3, r4
 80141c2:	e015      	b.n	80141f0 <rshift+0x68>
 80141c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80141c8:	f1c1 0820 	rsb	r8, r1, #32
 80141cc:	40cf      	lsrs	r7, r1
 80141ce:	f105 0e04 	add.w	lr, r5, #4
 80141d2:	46a1      	mov	r9, r4
 80141d4:	4576      	cmp	r6, lr
 80141d6:	46f4      	mov	ip, lr
 80141d8:	d815      	bhi.n	8014206 <rshift+0x7e>
 80141da:	1a9a      	subs	r2, r3, r2
 80141dc:	0092      	lsls	r2, r2, #2
 80141de:	3a04      	subs	r2, #4
 80141e0:	3501      	adds	r5, #1
 80141e2:	42ae      	cmp	r6, r5
 80141e4:	bf38      	it	cc
 80141e6:	2200      	movcc	r2, #0
 80141e8:	18a3      	adds	r3, r4, r2
 80141ea:	50a7      	str	r7, [r4, r2]
 80141ec:	b107      	cbz	r7, 80141f0 <rshift+0x68>
 80141ee:	3304      	adds	r3, #4
 80141f0:	1b1a      	subs	r2, r3, r4
 80141f2:	42a3      	cmp	r3, r4
 80141f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141f8:	bf08      	it	eq
 80141fa:	2300      	moveq	r3, #0
 80141fc:	6102      	str	r2, [r0, #16]
 80141fe:	bf08      	it	eq
 8014200:	6143      	streq	r3, [r0, #20]
 8014202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014206:	f8dc c000 	ldr.w	ip, [ip]
 801420a:	fa0c fc08 	lsl.w	ip, ip, r8
 801420e:	ea4c 0707 	orr.w	r7, ip, r7
 8014212:	f849 7b04 	str.w	r7, [r9], #4
 8014216:	f85e 7b04 	ldr.w	r7, [lr], #4
 801421a:	40cf      	lsrs	r7, r1
 801421c:	e7da      	b.n	80141d4 <rshift+0x4c>
 801421e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014222:	f847 cf04 	str.w	ip, [r7, #4]!
 8014226:	e7c3      	b.n	80141b0 <rshift+0x28>
 8014228:	4623      	mov	r3, r4
 801422a:	e7e1      	b.n	80141f0 <rshift+0x68>

0801422c <__hexdig_fun>:
 801422c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014230:	2b09      	cmp	r3, #9
 8014232:	d802      	bhi.n	801423a <__hexdig_fun+0xe>
 8014234:	3820      	subs	r0, #32
 8014236:	b2c0      	uxtb	r0, r0
 8014238:	4770      	bx	lr
 801423a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801423e:	2b05      	cmp	r3, #5
 8014240:	d801      	bhi.n	8014246 <__hexdig_fun+0x1a>
 8014242:	3847      	subs	r0, #71	; 0x47
 8014244:	e7f7      	b.n	8014236 <__hexdig_fun+0xa>
 8014246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801424a:	2b05      	cmp	r3, #5
 801424c:	d801      	bhi.n	8014252 <__hexdig_fun+0x26>
 801424e:	3827      	subs	r0, #39	; 0x27
 8014250:	e7f1      	b.n	8014236 <__hexdig_fun+0xa>
 8014252:	2000      	movs	r0, #0
 8014254:	4770      	bx	lr
	...

08014258 <__gethex>:
 8014258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425c:	4617      	mov	r7, r2
 801425e:	680a      	ldr	r2, [r1, #0]
 8014260:	b085      	sub	sp, #20
 8014262:	f102 0b02 	add.w	fp, r2, #2
 8014266:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801426a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801426e:	4681      	mov	r9, r0
 8014270:	468a      	mov	sl, r1
 8014272:	9302      	str	r3, [sp, #8]
 8014274:	32fe      	adds	r2, #254	; 0xfe
 8014276:	eb02 030b 	add.w	r3, r2, fp
 801427a:	46d8      	mov	r8, fp
 801427c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014280:	9301      	str	r3, [sp, #4]
 8014282:	2830      	cmp	r0, #48	; 0x30
 8014284:	d0f7      	beq.n	8014276 <__gethex+0x1e>
 8014286:	f7ff ffd1 	bl	801422c <__hexdig_fun>
 801428a:	4604      	mov	r4, r0
 801428c:	2800      	cmp	r0, #0
 801428e:	d138      	bne.n	8014302 <__gethex+0xaa>
 8014290:	49a7      	ldr	r1, [pc, #668]	; (8014530 <__gethex+0x2d8>)
 8014292:	2201      	movs	r2, #1
 8014294:	4640      	mov	r0, r8
 8014296:	f7ff ff27 	bl	80140e8 <strncmp>
 801429a:	4606      	mov	r6, r0
 801429c:	2800      	cmp	r0, #0
 801429e:	d169      	bne.n	8014374 <__gethex+0x11c>
 80142a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80142a4:	465d      	mov	r5, fp
 80142a6:	f7ff ffc1 	bl	801422c <__hexdig_fun>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d064      	beq.n	8014378 <__gethex+0x120>
 80142ae:	465a      	mov	r2, fp
 80142b0:	7810      	ldrb	r0, [r2, #0]
 80142b2:	2830      	cmp	r0, #48	; 0x30
 80142b4:	4690      	mov	r8, r2
 80142b6:	f102 0201 	add.w	r2, r2, #1
 80142ba:	d0f9      	beq.n	80142b0 <__gethex+0x58>
 80142bc:	f7ff ffb6 	bl	801422c <__hexdig_fun>
 80142c0:	2301      	movs	r3, #1
 80142c2:	fab0 f480 	clz	r4, r0
 80142c6:	0964      	lsrs	r4, r4, #5
 80142c8:	465e      	mov	r6, fp
 80142ca:	9301      	str	r3, [sp, #4]
 80142cc:	4642      	mov	r2, r8
 80142ce:	4615      	mov	r5, r2
 80142d0:	3201      	adds	r2, #1
 80142d2:	7828      	ldrb	r0, [r5, #0]
 80142d4:	f7ff ffaa 	bl	801422c <__hexdig_fun>
 80142d8:	2800      	cmp	r0, #0
 80142da:	d1f8      	bne.n	80142ce <__gethex+0x76>
 80142dc:	4994      	ldr	r1, [pc, #592]	; (8014530 <__gethex+0x2d8>)
 80142de:	2201      	movs	r2, #1
 80142e0:	4628      	mov	r0, r5
 80142e2:	f7ff ff01 	bl	80140e8 <strncmp>
 80142e6:	b978      	cbnz	r0, 8014308 <__gethex+0xb0>
 80142e8:	b946      	cbnz	r6, 80142fc <__gethex+0xa4>
 80142ea:	1c6e      	adds	r6, r5, #1
 80142ec:	4632      	mov	r2, r6
 80142ee:	4615      	mov	r5, r2
 80142f0:	3201      	adds	r2, #1
 80142f2:	7828      	ldrb	r0, [r5, #0]
 80142f4:	f7ff ff9a 	bl	801422c <__hexdig_fun>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	d1f8      	bne.n	80142ee <__gethex+0x96>
 80142fc:	1b73      	subs	r3, r6, r5
 80142fe:	009e      	lsls	r6, r3, #2
 8014300:	e004      	b.n	801430c <__gethex+0xb4>
 8014302:	2400      	movs	r4, #0
 8014304:	4626      	mov	r6, r4
 8014306:	e7e1      	b.n	80142cc <__gethex+0x74>
 8014308:	2e00      	cmp	r6, #0
 801430a:	d1f7      	bne.n	80142fc <__gethex+0xa4>
 801430c:	782b      	ldrb	r3, [r5, #0]
 801430e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014312:	2b50      	cmp	r3, #80	; 0x50
 8014314:	d13d      	bne.n	8014392 <__gethex+0x13a>
 8014316:	786b      	ldrb	r3, [r5, #1]
 8014318:	2b2b      	cmp	r3, #43	; 0x2b
 801431a:	d02f      	beq.n	801437c <__gethex+0x124>
 801431c:	2b2d      	cmp	r3, #45	; 0x2d
 801431e:	d031      	beq.n	8014384 <__gethex+0x12c>
 8014320:	1c69      	adds	r1, r5, #1
 8014322:	f04f 0b00 	mov.w	fp, #0
 8014326:	7808      	ldrb	r0, [r1, #0]
 8014328:	f7ff ff80 	bl	801422c <__hexdig_fun>
 801432c:	1e42      	subs	r2, r0, #1
 801432e:	b2d2      	uxtb	r2, r2
 8014330:	2a18      	cmp	r2, #24
 8014332:	d82e      	bhi.n	8014392 <__gethex+0x13a>
 8014334:	f1a0 0210 	sub.w	r2, r0, #16
 8014338:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801433c:	f7ff ff76 	bl	801422c <__hexdig_fun>
 8014340:	f100 3cff 	add.w	ip, r0, #4294967295
 8014344:	fa5f fc8c 	uxtb.w	ip, ip
 8014348:	f1bc 0f18 	cmp.w	ip, #24
 801434c:	d91d      	bls.n	801438a <__gethex+0x132>
 801434e:	f1bb 0f00 	cmp.w	fp, #0
 8014352:	d000      	beq.n	8014356 <__gethex+0xfe>
 8014354:	4252      	negs	r2, r2
 8014356:	4416      	add	r6, r2
 8014358:	f8ca 1000 	str.w	r1, [sl]
 801435c:	b1dc      	cbz	r4, 8014396 <__gethex+0x13e>
 801435e:	9b01      	ldr	r3, [sp, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	bf14      	ite	ne
 8014364:	f04f 0800 	movne.w	r8, #0
 8014368:	f04f 0806 	moveq.w	r8, #6
 801436c:	4640      	mov	r0, r8
 801436e:	b005      	add	sp, #20
 8014370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014374:	4645      	mov	r5, r8
 8014376:	4626      	mov	r6, r4
 8014378:	2401      	movs	r4, #1
 801437a:	e7c7      	b.n	801430c <__gethex+0xb4>
 801437c:	f04f 0b00 	mov.w	fp, #0
 8014380:	1ca9      	adds	r1, r5, #2
 8014382:	e7d0      	b.n	8014326 <__gethex+0xce>
 8014384:	f04f 0b01 	mov.w	fp, #1
 8014388:	e7fa      	b.n	8014380 <__gethex+0x128>
 801438a:	230a      	movs	r3, #10
 801438c:	fb03 0002 	mla	r0, r3, r2, r0
 8014390:	e7d0      	b.n	8014334 <__gethex+0xdc>
 8014392:	4629      	mov	r1, r5
 8014394:	e7e0      	b.n	8014358 <__gethex+0x100>
 8014396:	eba5 0308 	sub.w	r3, r5, r8
 801439a:	3b01      	subs	r3, #1
 801439c:	4621      	mov	r1, r4
 801439e:	2b07      	cmp	r3, #7
 80143a0:	dc0a      	bgt.n	80143b8 <__gethex+0x160>
 80143a2:	4648      	mov	r0, r9
 80143a4:	f7fe f980 	bl	80126a8 <_Balloc>
 80143a8:	4604      	mov	r4, r0
 80143aa:	b940      	cbnz	r0, 80143be <__gethex+0x166>
 80143ac:	4b61      	ldr	r3, [pc, #388]	; (8014534 <__gethex+0x2dc>)
 80143ae:	4602      	mov	r2, r0
 80143b0:	21e4      	movs	r1, #228	; 0xe4
 80143b2:	4861      	ldr	r0, [pc, #388]	; (8014538 <__gethex+0x2e0>)
 80143b4:	f7ff feb4 	bl	8014120 <__assert_func>
 80143b8:	3101      	adds	r1, #1
 80143ba:	105b      	asrs	r3, r3, #1
 80143bc:	e7ef      	b.n	801439e <__gethex+0x146>
 80143be:	f100 0a14 	add.w	sl, r0, #20
 80143c2:	2300      	movs	r3, #0
 80143c4:	495a      	ldr	r1, [pc, #360]	; (8014530 <__gethex+0x2d8>)
 80143c6:	f8cd a004 	str.w	sl, [sp, #4]
 80143ca:	469b      	mov	fp, r3
 80143cc:	45a8      	cmp	r8, r5
 80143ce:	d342      	bcc.n	8014456 <__gethex+0x1fe>
 80143d0:	9801      	ldr	r0, [sp, #4]
 80143d2:	f840 bb04 	str.w	fp, [r0], #4
 80143d6:	eba0 000a 	sub.w	r0, r0, sl
 80143da:	1080      	asrs	r0, r0, #2
 80143dc:	6120      	str	r0, [r4, #16]
 80143de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80143e2:	4658      	mov	r0, fp
 80143e4:	f7fe fa52 	bl	801288c <__hi0bits>
 80143e8:	683d      	ldr	r5, [r7, #0]
 80143ea:	eba8 0000 	sub.w	r0, r8, r0
 80143ee:	42a8      	cmp	r0, r5
 80143f0:	dd59      	ble.n	80144a6 <__gethex+0x24e>
 80143f2:	eba0 0805 	sub.w	r8, r0, r5
 80143f6:	4641      	mov	r1, r8
 80143f8:	4620      	mov	r0, r4
 80143fa:	f7fe fdde 	bl	8012fba <__any_on>
 80143fe:	4683      	mov	fp, r0
 8014400:	b1b8      	cbz	r0, 8014432 <__gethex+0x1da>
 8014402:	f108 33ff 	add.w	r3, r8, #4294967295
 8014406:	1159      	asrs	r1, r3, #5
 8014408:	f003 021f 	and.w	r2, r3, #31
 801440c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014410:	f04f 0b01 	mov.w	fp, #1
 8014414:	fa0b f202 	lsl.w	r2, fp, r2
 8014418:	420a      	tst	r2, r1
 801441a:	d00a      	beq.n	8014432 <__gethex+0x1da>
 801441c:	455b      	cmp	r3, fp
 801441e:	dd06      	ble.n	801442e <__gethex+0x1d6>
 8014420:	f1a8 0102 	sub.w	r1, r8, #2
 8014424:	4620      	mov	r0, r4
 8014426:	f7fe fdc8 	bl	8012fba <__any_on>
 801442a:	2800      	cmp	r0, #0
 801442c:	d138      	bne.n	80144a0 <__gethex+0x248>
 801442e:	f04f 0b02 	mov.w	fp, #2
 8014432:	4641      	mov	r1, r8
 8014434:	4620      	mov	r0, r4
 8014436:	f7ff fea7 	bl	8014188 <rshift>
 801443a:	4446      	add	r6, r8
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	42b3      	cmp	r3, r6
 8014440:	da41      	bge.n	80144c6 <__gethex+0x26e>
 8014442:	4621      	mov	r1, r4
 8014444:	4648      	mov	r0, r9
 8014446:	f7fe f96f 	bl	8012728 <_Bfree>
 801444a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801444c:	2300      	movs	r3, #0
 801444e:	6013      	str	r3, [r2, #0]
 8014450:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014454:	e78a      	b.n	801436c <__gethex+0x114>
 8014456:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801445a:	2a2e      	cmp	r2, #46	; 0x2e
 801445c:	d014      	beq.n	8014488 <__gethex+0x230>
 801445e:	2b20      	cmp	r3, #32
 8014460:	d106      	bne.n	8014470 <__gethex+0x218>
 8014462:	9b01      	ldr	r3, [sp, #4]
 8014464:	f843 bb04 	str.w	fp, [r3], #4
 8014468:	f04f 0b00 	mov.w	fp, #0
 801446c:	9301      	str	r3, [sp, #4]
 801446e:	465b      	mov	r3, fp
 8014470:	7828      	ldrb	r0, [r5, #0]
 8014472:	9303      	str	r3, [sp, #12]
 8014474:	f7ff feda 	bl	801422c <__hexdig_fun>
 8014478:	9b03      	ldr	r3, [sp, #12]
 801447a:	f000 000f 	and.w	r0, r0, #15
 801447e:	4098      	lsls	r0, r3
 8014480:	ea4b 0b00 	orr.w	fp, fp, r0
 8014484:	3304      	adds	r3, #4
 8014486:	e7a1      	b.n	80143cc <__gethex+0x174>
 8014488:	45a8      	cmp	r8, r5
 801448a:	d8e8      	bhi.n	801445e <__gethex+0x206>
 801448c:	2201      	movs	r2, #1
 801448e:	4628      	mov	r0, r5
 8014490:	9303      	str	r3, [sp, #12]
 8014492:	f7ff fe29 	bl	80140e8 <strncmp>
 8014496:	4926      	ldr	r1, [pc, #152]	; (8014530 <__gethex+0x2d8>)
 8014498:	9b03      	ldr	r3, [sp, #12]
 801449a:	2800      	cmp	r0, #0
 801449c:	d1df      	bne.n	801445e <__gethex+0x206>
 801449e:	e795      	b.n	80143cc <__gethex+0x174>
 80144a0:	f04f 0b03 	mov.w	fp, #3
 80144a4:	e7c5      	b.n	8014432 <__gethex+0x1da>
 80144a6:	da0b      	bge.n	80144c0 <__gethex+0x268>
 80144a8:	eba5 0800 	sub.w	r8, r5, r0
 80144ac:	4621      	mov	r1, r4
 80144ae:	4642      	mov	r2, r8
 80144b0:	4648      	mov	r0, r9
 80144b2:	f7fe fb53 	bl	8012b5c <__lshift>
 80144b6:	eba6 0608 	sub.w	r6, r6, r8
 80144ba:	4604      	mov	r4, r0
 80144bc:	f100 0a14 	add.w	sl, r0, #20
 80144c0:	f04f 0b00 	mov.w	fp, #0
 80144c4:	e7ba      	b.n	801443c <__gethex+0x1e4>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	42b3      	cmp	r3, r6
 80144ca:	dd73      	ble.n	80145b4 <__gethex+0x35c>
 80144cc:	1b9e      	subs	r6, r3, r6
 80144ce:	42b5      	cmp	r5, r6
 80144d0:	dc34      	bgt.n	801453c <__gethex+0x2e4>
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	2b02      	cmp	r3, #2
 80144d6:	d023      	beq.n	8014520 <__gethex+0x2c8>
 80144d8:	2b03      	cmp	r3, #3
 80144da:	d025      	beq.n	8014528 <__gethex+0x2d0>
 80144dc:	2b01      	cmp	r3, #1
 80144de:	d115      	bne.n	801450c <__gethex+0x2b4>
 80144e0:	42b5      	cmp	r5, r6
 80144e2:	d113      	bne.n	801450c <__gethex+0x2b4>
 80144e4:	2d01      	cmp	r5, #1
 80144e6:	d10b      	bne.n	8014500 <__gethex+0x2a8>
 80144e8:	9a02      	ldr	r2, [sp, #8]
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6013      	str	r3, [r2, #0]
 80144ee:	2301      	movs	r3, #1
 80144f0:	6123      	str	r3, [r4, #16]
 80144f2:	f8ca 3000 	str.w	r3, [sl]
 80144f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80144fc:	601c      	str	r4, [r3, #0]
 80144fe:	e735      	b.n	801436c <__gethex+0x114>
 8014500:	1e69      	subs	r1, r5, #1
 8014502:	4620      	mov	r0, r4
 8014504:	f7fe fd59 	bl	8012fba <__any_on>
 8014508:	2800      	cmp	r0, #0
 801450a:	d1ed      	bne.n	80144e8 <__gethex+0x290>
 801450c:	4621      	mov	r1, r4
 801450e:	4648      	mov	r0, r9
 8014510:	f7fe f90a 	bl	8012728 <_Bfree>
 8014514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014516:	2300      	movs	r3, #0
 8014518:	6013      	str	r3, [r2, #0]
 801451a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801451e:	e725      	b.n	801436c <__gethex+0x114>
 8014520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1f2      	bne.n	801450c <__gethex+0x2b4>
 8014526:	e7df      	b.n	80144e8 <__gethex+0x290>
 8014528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801452a:	2b00      	cmp	r3, #0
 801452c:	d1dc      	bne.n	80144e8 <__gethex+0x290>
 801452e:	e7ed      	b.n	801450c <__gethex+0x2b4>
 8014530:	080151b4 	.word	0x080151b4
 8014534:	0801504d 	.word	0x0801504d
 8014538:	0801535e 	.word	0x0801535e
 801453c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014540:	f1bb 0f00 	cmp.w	fp, #0
 8014544:	d133      	bne.n	80145ae <__gethex+0x356>
 8014546:	f1b8 0f00 	cmp.w	r8, #0
 801454a:	d004      	beq.n	8014556 <__gethex+0x2fe>
 801454c:	4641      	mov	r1, r8
 801454e:	4620      	mov	r0, r4
 8014550:	f7fe fd33 	bl	8012fba <__any_on>
 8014554:	4683      	mov	fp, r0
 8014556:	ea4f 1268 	mov.w	r2, r8, asr #5
 801455a:	2301      	movs	r3, #1
 801455c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014560:	f008 081f 	and.w	r8, r8, #31
 8014564:	fa03 f308 	lsl.w	r3, r3, r8
 8014568:	4213      	tst	r3, r2
 801456a:	4631      	mov	r1, r6
 801456c:	4620      	mov	r0, r4
 801456e:	bf18      	it	ne
 8014570:	f04b 0b02 	orrne.w	fp, fp, #2
 8014574:	1bad      	subs	r5, r5, r6
 8014576:	f7ff fe07 	bl	8014188 <rshift>
 801457a:	687e      	ldr	r6, [r7, #4]
 801457c:	f04f 0802 	mov.w	r8, #2
 8014580:	f1bb 0f00 	cmp.w	fp, #0
 8014584:	d04a      	beq.n	801461c <__gethex+0x3c4>
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2b02      	cmp	r3, #2
 801458a:	d016      	beq.n	80145ba <__gethex+0x362>
 801458c:	2b03      	cmp	r3, #3
 801458e:	d018      	beq.n	80145c2 <__gethex+0x36a>
 8014590:	2b01      	cmp	r3, #1
 8014592:	d109      	bne.n	80145a8 <__gethex+0x350>
 8014594:	f01b 0f02 	tst.w	fp, #2
 8014598:	d006      	beq.n	80145a8 <__gethex+0x350>
 801459a:	f8da 3000 	ldr.w	r3, [sl]
 801459e:	ea4b 0b03 	orr.w	fp, fp, r3
 80145a2:	f01b 0f01 	tst.w	fp, #1
 80145a6:	d10f      	bne.n	80145c8 <__gethex+0x370>
 80145a8:	f048 0810 	orr.w	r8, r8, #16
 80145ac:	e036      	b.n	801461c <__gethex+0x3c4>
 80145ae:	f04f 0b01 	mov.w	fp, #1
 80145b2:	e7d0      	b.n	8014556 <__gethex+0x2fe>
 80145b4:	f04f 0801 	mov.w	r8, #1
 80145b8:	e7e2      	b.n	8014580 <__gethex+0x328>
 80145ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145bc:	f1c3 0301 	rsb	r3, r3, #1
 80145c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80145c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d0ef      	beq.n	80145a8 <__gethex+0x350>
 80145c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80145cc:	f104 0214 	add.w	r2, r4, #20
 80145d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80145d4:	9301      	str	r3, [sp, #4]
 80145d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80145da:	2300      	movs	r3, #0
 80145dc:	4694      	mov	ip, r2
 80145de:	f852 1b04 	ldr.w	r1, [r2], #4
 80145e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80145e6:	d01e      	beq.n	8014626 <__gethex+0x3ce>
 80145e8:	3101      	adds	r1, #1
 80145ea:	f8cc 1000 	str.w	r1, [ip]
 80145ee:	f1b8 0f02 	cmp.w	r8, #2
 80145f2:	f104 0214 	add.w	r2, r4, #20
 80145f6:	d13d      	bne.n	8014674 <__gethex+0x41c>
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	3b01      	subs	r3, #1
 80145fc:	42ab      	cmp	r3, r5
 80145fe:	d10b      	bne.n	8014618 <__gethex+0x3c0>
 8014600:	1169      	asrs	r1, r5, #5
 8014602:	2301      	movs	r3, #1
 8014604:	f005 051f 	and.w	r5, r5, #31
 8014608:	fa03 f505 	lsl.w	r5, r3, r5
 801460c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014610:	421d      	tst	r5, r3
 8014612:	bf18      	it	ne
 8014614:	f04f 0801 	movne.w	r8, #1
 8014618:	f048 0820 	orr.w	r8, r8, #32
 801461c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801461e:	601c      	str	r4, [r3, #0]
 8014620:	9b02      	ldr	r3, [sp, #8]
 8014622:	601e      	str	r6, [r3, #0]
 8014624:	e6a2      	b.n	801436c <__gethex+0x114>
 8014626:	4290      	cmp	r0, r2
 8014628:	f842 3c04 	str.w	r3, [r2, #-4]
 801462c:	d8d6      	bhi.n	80145dc <__gethex+0x384>
 801462e:	68a2      	ldr	r2, [r4, #8]
 8014630:	4593      	cmp	fp, r2
 8014632:	db17      	blt.n	8014664 <__gethex+0x40c>
 8014634:	6861      	ldr	r1, [r4, #4]
 8014636:	4648      	mov	r0, r9
 8014638:	3101      	adds	r1, #1
 801463a:	f7fe f835 	bl	80126a8 <_Balloc>
 801463e:	4682      	mov	sl, r0
 8014640:	b918      	cbnz	r0, 801464a <__gethex+0x3f2>
 8014642:	4b1b      	ldr	r3, [pc, #108]	; (80146b0 <__gethex+0x458>)
 8014644:	4602      	mov	r2, r0
 8014646:	2184      	movs	r1, #132	; 0x84
 8014648:	e6b3      	b.n	80143b2 <__gethex+0x15a>
 801464a:	6922      	ldr	r2, [r4, #16]
 801464c:	3202      	adds	r2, #2
 801464e:	f104 010c 	add.w	r1, r4, #12
 8014652:	0092      	lsls	r2, r2, #2
 8014654:	300c      	adds	r0, #12
 8014656:	f7fd f9d1 	bl	80119fc <memcpy>
 801465a:	4621      	mov	r1, r4
 801465c:	4648      	mov	r0, r9
 801465e:	f7fe f863 	bl	8012728 <_Bfree>
 8014662:	4654      	mov	r4, sl
 8014664:	6922      	ldr	r2, [r4, #16]
 8014666:	1c51      	adds	r1, r2, #1
 8014668:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801466c:	6121      	str	r1, [r4, #16]
 801466e:	2101      	movs	r1, #1
 8014670:	6151      	str	r1, [r2, #20]
 8014672:	e7bc      	b.n	80145ee <__gethex+0x396>
 8014674:	6921      	ldr	r1, [r4, #16]
 8014676:	4559      	cmp	r1, fp
 8014678:	dd0b      	ble.n	8014692 <__gethex+0x43a>
 801467a:	2101      	movs	r1, #1
 801467c:	4620      	mov	r0, r4
 801467e:	f7ff fd83 	bl	8014188 <rshift>
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	3601      	adds	r6, #1
 8014686:	42b3      	cmp	r3, r6
 8014688:	f6ff aedb 	blt.w	8014442 <__gethex+0x1ea>
 801468c:	f04f 0801 	mov.w	r8, #1
 8014690:	e7c2      	b.n	8014618 <__gethex+0x3c0>
 8014692:	f015 051f 	ands.w	r5, r5, #31
 8014696:	d0f9      	beq.n	801468c <__gethex+0x434>
 8014698:	9b01      	ldr	r3, [sp, #4]
 801469a:	441a      	add	r2, r3
 801469c:	f1c5 0520 	rsb	r5, r5, #32
 80146a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80146a4:	f7fe f8f2 	bl	801288c <__hi0bits>
 80146a8:	42a8      	cmp	r0, r5
 80146aa:	dbe6      	blt.n	801467a <__gethex+0x422>
 80146ac:	e7ee      	b.n	801468c <__gethex+0x434>
 80146ae:	bf00      	nop
 80146b0:	0801504d 	.word	0x0801504d

080146b4 <L_shift>:
 80146b4:	f1c2 0208 	rsb	r2, r2, #8
 80146b8:	0092      	lsls	r2, r2, #2
 80146ba:	b570      	push	{r4, r5, r6, lr}
 80146bc:	f1c2 0620 	rsb	r6, r2, #32
 80146c0:	6843      	ldr	r3, [r0, #4]
 80146c2:	6804      	ldr	r4, [r0, #0]
 80146c4:	fa03 f506 	lsl.w	r5, r3, r6
 80146c8:	432c      	orrs	r4, r5
 80146ca:	40d3      	lsrs	r3, r2
 80146cc:	6004      	str	r4, [r0, #0]
 80146ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80146d2:	4288      	cmp	r0, r1
 80146d4:	d3f4      	bcc.n	80146c0 <L_shift+0xc>
 80146d6:	bd70      	pop	{r4, r5, r6, pc}

080146d8 <__match>:
 80146d8:	b530      	push	{r4, r5, lr}
 80146da:	6803      	ldr	r3, [r0, #0]
 80146dc:	3301      	adds	r3, #1
 80146de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146e2:	b914      	cbnz	r4, 80146ea <__match+0x12>
 80146e4:	6003      	str	r3, [r0, #0]
 80146e6:	2001      	movs	r0, #1
 80146e8:	bd30      	pop	{r4, r5, pc}
 80146ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80146f2:	2d19      	cmp	r5, #25
 80146f4:	bf98      	it	ls
 80146f6:	3220      	addls	r2, #32
 80146f8:	42a2      	cmp	r2, r4
 80146fa:	d0f0      	beq.n	80146de <__match+0x6>
 80146fc:	2000      	movs	r0, #0
 80146fe:	e7f3      	b.n	80146e8 <__match+0x10>

08014700 <__hexnan>:
 8014700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014704:	680b      	ldr	r3, [r1, #0]
 8014706:	6801      	ldr	r1, [r0, #0]
 8014708:	115e      	asrs	r6, r3, #5
 801470a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801470e:	f013 031f 	ands.w	r3, r3, #31
 8014712:	b087      	sub	sp, #28
 8014714:	bf18      	it	ne
 8014716:	3604      	addne	r6, #4
 8014718:	2500      	movs	r5, #0
 801471a:	1f37      	subs	r7, r6, #4
 801471c:	4682      	mov	sl, r0
 801471e:	4690      	mov	r8, r2
 8014720:	9301      	str	r3, [sp, #4]
 8014722:	f846 5c04 	str.w	r5, [r6, #-4]
 8014726:	46b9      	mov	r9, r7
 8014728:	463c      	mov	r4, r7
 801472a:	9502      	str	r5, [sp, #8]
 801472c:	46ab      	mov	fp, r5
 801472e:	784a      	ldrb	r2, [r1, #1]
 8014730:	1c4b      	adds	r3, r1, #1
 8014732:	9303      	str	r3, [sp, #12]
 8014734:	b342      	cbz	r2, 8014788 <__hexnan+0x88>
 8014736:	4610      	mov	r0, r2
 8014738:	9105      	str	r1, [sp, #20]
 801473a:	9204      	str	r2, [sp, #16]
 801473c:	f7ff fd76 	bl	801422c <__hexdig_fun>
 8014740:	2800      	cmp	r0, #0
 8014742:	d14f      	bne.n	80147e4 <__hexnan+0xe4>
 8014744:	9a04      	ldr	r2, [sp, #16]
 8014746:	9905      	ldr	r1, [sp, #20]
 8014748:	2a20      	cmp	r2, #32
 801474a:	d818      	bhi.n	801477e <__hexnan+0x7e>
 801474c:	9b02      	ldr	r3, [sp, #8]
 801474e:	459b      	cmp	fp, r3
 8014750:	dd13      	ble.n	801477a <__hexnan+0x7a>
 8014752:	454c      	cmp	r4, r9
 8014754:	d206      	bcs.n	8014764 <__hexnan+0x64>
 8014756:	2d07      	cmp	r5, #7
 8014758:	dc04      	bgt.n	8014764 <__hexnan+0x64>
 801475a:	462a      	mov	r2, r5
 801475c:	4649      	mov	r1, r9
 801475e:	4620      	mov	r0, r4
 8014760:	f7ff ffa8 	bl	80146b4 <L_shift>
 8014764:	4544      	cmp	r4, r8
 8014766:	d950      	bls.n	801480a <__hexnan+0x10a>
 8014768:	2300      	movs	r3, #0
 801476a:	f1a4 0904 	sub.w	r9, r4, #4
 801476e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014772:	f8cd b008 	str.w	fp, [sp, #8]
 8014776:	464c      	mov	r4, r9
 8014778:	461d      	mov	r5, r3
 801477a:	9903      	ldr	r1, [sp, #12]
 801477c:	e7d7      	b.n	801472e <__hexnan+0x2e>
 801477e:	2a29      	cmp	r2, #41	; 0x29
 8014780:	d155      	bne.n	801482e <__hexnan+0x12e>
 8014782:	3102      	adds	r1, #2
 8014784:	f8ca 1000 	str.w	r1, [sl]
 8014788:	f1bb 0f00 	cmp.w	fp, #0
 801478c:	d04f      	beq.n	801482e <__hexnan+0x12e>
 801478e:	454c      	cmp	r4, r9
 8014790:	d206      	bcs.n	80147a0 <__hexnan+0xa0>
 8014792:	2d07      	cmp	r5, #7
 8014794:	dc04      	bgt.n	80147a0 <__hexnan+0xa0>
 8014796:	462a      	mov	r2, r5
 8014798:	4649      	mov	r1, r9
 801479a:	4620      	mov	r0, r4
 801479c:	f7ff ff8a 	bl	80146b4 <L_shift>
 80147a0:	4544      	cmp	r4, r8
 80147a2:	d934      	bls.n	801480e <__hexnan+0x10e>
 80147a4:	f1a8 0204 	sub.w	r2, r8, #4
 80147a8:	4623      	mov	r3, r4
 80147aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80147ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80147b2:	429f      	cmp	r7, r3
 80147b4:	d2f9      	bcs.n	80147aa <__hexnan+0xaa>
 80147b6:	1b3b      	subs	r3, r7, r4
 80147b8:	f023 0303 	bic.w	r3, r3, #3
 80147bc:	3304      	adds	r3, #4
 80147be:	3e03      	subs	r6, #3
 80147c0:	3401      	adds	r4, #1
 80147c2:	42a6      	cmp	r6, r4
 80147c4:	bf38      	it	cc
 80147c6:	2304      	movcc	r3, #4
 80147c8:	4443      	add	r3, r8
 80147ca:	2200      	movs	r2, #0
 80147cc:	f843 2b04 	str.w	r2, [r3], #4
 80147d0:	429f      	cmp	r7, r3
 80147d2:	d2fb      	bcs.n	80147cc <__hexnan+0xcc>
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	b91b      	cbnz	r3, 80147e0 <__hexnan+0xe0>
 80147d8:	4547      	cmp	r7, r8
 80147da:	d126      	bne.n	801482a <__hexnan+0x12a>
 80147dc:	2301      	movs	r3, #1
 80147de:	603b      	str	r3, [r7, #0]
 80147e0:	2005      	movs	r0, #5
 80147e2:	e025      	b.n	8014830 <__hexnan+0x130>
 80147e4:	3501      	adds	r5, #1
 80147e6:	2d08      	cmp	r5, #8
 80147e8:	f10b 0b01 	add.w	fp, fp, #1
 80147ec:	dd06      	ble.n	80147fc <__hexnan+0xfc>
 80147ee:	4544      	cmp	r4, r8
 80147f0:	d9c3      	bls.n	801477a <__hexnan+0x7a>
 80147f2:	2300      	movs	r3, #0
 80147f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80147f8:	2501      	movs	r5, #1
 80147fa:	3c04      	subs	r4, #4
 80147fc:	6822      	ldr	r2, [r4, #0]
 80147fe:	f000 000f 	and.w	r0, r0, #15
 8014802:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014806:	6020      	str	r0, [r4, #0]
 8014808:	e7b7      	b.n	801477a <__hexnan+0x7a>
 801480a:	2508      	movs	r5, #8
 801480c:	e7b5      	b.n	801477a <__hexnan+0x7a>
 801480e:	9b01      	ldr	r3, [sp, #4]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d0df      	beq.n	80147d4 <__hexnan+0xd4>
 8014814:	f1c3 0320 	rsb	r3, r3, #32
 8014818:	f04f 32ff 	mov.w	r2, #4294967295
 801481c:	40da      	lsrs	r2, r3
 801481e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014822:	4013      	ands	r3, r2
 8014824:	f846 3c04 	str.w	r3, [r6, #-4]
 8014828:	e7d4      	b.n	80147d4 <__hexnan+0xd4>
 801482a:	3f04      	subs	r7, #4
 801482c:	e7d2      	b.n	80147d4 <__hexnan+0xd4>
 801482e:	2004      	movs	r0, #4
 8014830:	b007      	add	sp, #28
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014836 <__ascii_mbtowc>:
 8014836:	b082      	sub	sp, #8
 8014838:	b901      	cbnz	r1, 801483c <__ascii_mbtowc+0x6>
 801483a:	a901      	add	r1, sp, #4
 801483c:	b142      	cbz	r2, 8014850 <__ascii_mbtowc+0x1a>
 801483e:	b14b      	cbz	r3, 8014854 <__ascii_mbtowc+0x1e>
 8014840:	7813      	ldrb	r3, [r2, #0]
 8014842:	600b      	str	r3, [r1, #0]
 8014844:	7812      	ldrb	r2, [r2, #0]
 8014846:	1e10      	subs	r0, r2, #0
 8014848:	bf18      	it	ne
 801484a:	2001      	movne	r0, #1
 801484c:	b002      	add	sp, #8
 801484e:	4770      	bx	lr
 8014850:	4610      	mov	r0, r2
 8014852:	e7fb      	b.n	801484c <__ascii_mbtowc+0x16>
 8014854:	f06f 0001 	mvn.w	r0, #1
 8014858:	e7f8      	b.n	801484c <__ascii_mbtowc+0x16>

0801485a <_realloc_r>:
 801485a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801485e:	4680      	mov	r8, r0
 8014860:	4614      	mov	r4, r2
 8014862:	460e      	mov	r6, r1
 8014864:	b921      	cbnz	r1, 8014870 <_realloc_r+0x16>
 8014866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801486a:	4611      	mov	r1, r2
 801486c:	f7fb bfd0 	b.w	8010810 <_malloc_r>
 8014870:	b92a      	cbnz	r2, 801487e <_realloc_r+0x24>
 8014872:	f7fd fecd 	bl	8012610 <_free_r>
 8014876:	4625      	mov	r5, r4
 8014878:	4628      	mov	r0, r5
 801487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487e:	f000 f842 	bl	8014906 <_malloc_usable_size_r>
 8014882:	4284      	cmp	r4, r0
 8014884:	4607      	mov	r7, r0
 8014886:	d802      	bhi.n	801488e <_realloc_r+0x34>
 8014888:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801488c:	d812      	bhi.n	80148b4 <_realloc_r+0x5a>
 801488e:	4621      	mov	r1, r4
 8014890:	4640      	mov	r0, r8
 8014892:	f7fb ffbd 	bl	8010810 <_malloc_r>
 8014896:	4605      	mov	r5, r0
 8014898:	2800      	cmp	r0, #0
 801489a:	d0ed      	beq.n	8014878 <_realloc_r+0x1e>
 801489c:	42bc      	cmp	r4, r7
 801489e:	4622      	mov	r2, r4
 80148a0:	4631      	mov	r1, r6
 80148a2:	bf28      	it	cs
 80148a4:	463a      	movcs	r2, r7
 80148a6:	f7fd f8a9 	bl	80119fc <memcpy>
 80148aa:	4631      	mov	r1, r6
 80148ac:	4640      	mov	r0, r8
 80148ae:	f7fd feaf 	bl	8012610 <_free_r>
 80148b2:	e7e1      	b.n	8014878 <_realloc_r+0x1e>
 80148b4:	4635      	mov	r5, r6
 80148b6:	e7df      	b.n	8014878 <_realloc_r+0x1e>

080148b8 <__ascii_wctomb>:
 80148b8:	b149      	cbz	r1, 80148ce <__ascii_wctomb+0x16>
 80148ba:	2aff      	cmp	r2, #255	; 0xff
 80148bc:	bf85      	ittet	hi
 80148be:	238a      	movhi	r3, #138	; 0x8a
 80148c0:	6003      	strhi	r3, [r0, #0]
 80148c2:	700a      	strbls	r2, [r1, #0]
 80148c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80148c8:	bf98      	it	ls
 80148ca:	2001      	movls	r0, #1
 80148cc:	4770      	bx	lr
 80148ce:	4608      	mov	r0, r1
 80148d0:	4770      	bx	lr
	...

080148d4 <fiprintf>:
 80148d4:	b40e      	push	{r1, r2, r3}
 80148d6:	b503      	push	{r0, r1, lr}
 80148d8:	4601      	mov	r1, r0
 80148da:	ab03      	add	r3, sp, #12
 80148dc:	4805      	ldr	r0, [pc, #20]	; (80148f4 <fiprintf+0x20>)
 80148de:	f853 2b04 	ldr.w	r2, [r3], #4
 80148e2:	6800      	ldr	r0, [r0, #0]
 80148e4:	9301      	str	r3, [sp, #4]
 80148e6:	f000 f83f 	bl	8014968 <_vfiprintf_r>
 80148ea:	b002      	add	sp, #8
 80148ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80148f0:	b003      	add	sp, #12
 80148f2:	4770      	bx	lr
 80148f4:	2400006c 	.word	0x2400006c

080148f8 <abort>:
 80148f8:	b508      	push	{r3, lr}
 80148fa:	2006      	movs	r0, #6
 80148fc:	f000 fa0c 	bl	8014d18 <raise>
 8014900:	2001      	movs	r0, #1
 8014902:	f7ed fcb3 	bl	800226c <_exit>

08014906 <_malloc_usable_size_r>:
 8014906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801490a:	1f18      	subs	r0, r3, #4
 801490c:	2b00      	cmp	r3, #0
 801490e:	bfbc      	itt	lt
 8014910:	580b      	ldrlt	r3, [r1, r0]
 8014912:	18c0      	addlt	r0, r0, r3
 8014914:	4770      	bx	lr

08014916 <__sfputc_r>:
 8014916:	6893      	ldr	r3, [r2, #8]
 8014918:	3b01      	subs	r3, #1
 801491a:	2b00      	cmp	r3, #0
 801491c:	b410      	push	{r4}
 801491e:	6093      	str	r3, [r2, #8]
 8014920:	da08      	bge.n	8014934 <__sfputc_r+0x1e>
 8014922:	6994      	ldr	r4, [r2, #24]
 8014924:	42a3      	cmp	r3, r4
 8014926:	db01      	blt.n	801492c <__sfputc_r+0x16>
 8014928:	290a      	cmp	r1, #10
 801492a:	d103      	bne.n	8014934 <__sfputc_r+0x1e>
 801492c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014930:	f000 b934 	b.w	8014b9c <__swbuf_r>
 8014934:	6813      	ldr	r3, [r2, #0]
 8014936:	1c58      	adds	r0, r3, #1
 8014938:	6010      	str	r0, [r2, #0]
 801493a:	7019      	strb	r1, [r3, #0]
 801493c:	4608      	mov	r0, r1
 801493e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014942:	4770      	bx	lr

08014944 <__sfputs_r>:
 8014944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014946:	4606      	mov	r6, r0
 8014948:	460f      	mov	r7, r1
 801494a:	4614      	mov	r4, r2
 801494c:	18d5      	adds	r5, r2, r3
 801494e:	42ac      	cmp	r4, r5
 8014950:	d101      	bne.n	8014956 <__sfputs_r+0x12>
 8014952:	2000      	movs	r0, #0
 8014954:	e007      	b.n	8014966 <__sfputs_r+0x22>
 8014956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801495a:	463a      	mov	r2, r7
 801495c:	4630      	mov	r0, r6
 801495e:	f7ff ffda 	bl	8014916 <__sfputc_r>
 8014962:	1c43      	adds	r3, r0, #1
 8014964:	d1f3      	bne.n	801494e <__sfputs_r+0xa>
 8014966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014968 <_vfiprintf_r>:
 8014968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801496c:	460d      	mov	r5, r1
 801496e:	b09d      	sub	sp, #116	; 0x74
 8014970:	4614      	mov	r4, r2
 8014972:	4698      	mov	r8, r3
 8014974:	4606      	mov	r6, r0
 8014976:	b118      	cbz	r0, 8014980 <_vfiprintf_r+0x18>
 8014978:	6a03      	ldr	r3, [r0, #32]
 801497a:	b90b      	cbnz	r3, 8014980 <_vfiprintf_r+0x18>
 801497c:	f7fc fe8c 	bl	8011698 <__sinit>
 8014980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014982:	07d9      	lsls	r1, r3, #31
 8014984:	d405      	bmi.n	8014992 <_vfiprintf_r+0x2a>
 8014986:	89ab      	ldrh	r3, [r5, #12]
 8014988:	059a      	lsls	r2, r3, #22
 801498a:	d402      	bmi.n	8014992 <_vfiprintf_r+0x2a>
 801498c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801498e:	f7fd f833 	bl	80119f8 <__retarget_lock_acquire_recursive>
 8014992:	89ab      	ldrh	r3, [r5, #12]
 8014994:	071b      	lsls	r3, r3, #28
 8014996:	d501      	bpl.n	801499c <_vfiprintf_r+0x34>
 8014998:	692b      	ldr	r3, [r5, #16]
 801499a:	b99b      	cbnz	r3, 80149c4 <_vfiprintf_r+0x5c>
 801499c:	4629      	mov	r1, r5
 801499e:	4630      	mov	r0, r6
 80149a0:	f000 f93a 	bl	8014c18 <__swsetup_r>
 80149a4:	b170      	cbz	r0, 80149c4 <_vfiprintf_r+0x5c>
 80149a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149a8:	07dc      	lsls	r4, r3, #31
 80149aa:	d504      	bpl.n	80149b6 <_vfiprintf_r+0x4e>
 80149ac:	f04f 30ff 	mov.w	r0, #4294967295
 80149b0:	b01d      	add	sp, #116	; 0x74
 80149b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b6:	89ab      	ldrh	r3, [r5, #12]
 80149b8:	0598      	lsls	r0, r3, #22
 80149ba:	d4f7      	bmi.n	80149ac <_vfiprintf_r+0x44>
 80149bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149be:	f7fd f81c 	bl	80119fa <__retarget_lock_release_recursive>
 80149c2:	e7f3      	b.n	80149ac <_vfiprintf_r+0x44>
 80149c4:	2300      	movs	r3, #0
 80149c6:	9309      	str	r3, [sp, #36]	; 0x24
 80149c8:	2320      	movs	r3, #32
 80149ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80149d2:	2330      	movs	r3, #48	; 0x30
 80149d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014b88 <_vfiprintf_r+0x220>
 80149d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149dc:	f04f 0901 	mov.w	r9, #1
 80149e0:	4623      	mov	r3, r4
 80149e2:	469a      	mov	sl, r3
 80149e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149e8:	b10a      	cbz	r2, 80149ee <_vfiprintf_r+0x86>
 80149ea:	2a25      	cmp	r2, #37	; 0x25
 80149ec:	d1f9      	bne.n	80149e2 <_vfiprintf_r+0x7a>
 80149ee:	ebba 0b04 	subs.w	fp, sl, r4
 80149f2:	d00b      	beq.n	8014a0c <_vfiprintf_r+0xa4>
 80149f4:	465b      	mov	r3, fp
 80149f6:	4622      	mov	r2, r4
 80149f8:	4629      	mov	r1, r5
 80149fa:	4630      	mov	r0, r6
 80149fc:	f7ff ffa2 	bl	8014944 <__sfputs_r>
 8014a00:	3001      	adds	r0, #1
 8014a02:	f000 80a9 	beq.w	8014b58 <_vfiprintf_r+0x1f0>
 8014a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a08:	445a      	add	r2, fp
 8014a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8014a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	f000 80a1 	beq.w	8014b58 <_vfiprintf_r+0x1f0>
 8014a16:	2300      	movs	r3, #0
 8014a18:	f04f 32ff 	mov.w	r2, #4294967295
 8014a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a20:	f10a 0a01 	add.w	sl, sl, #1
 8014a24:	9304      	str	r3, [sp, #16]
 8014a26:	9307      	str	r3, [sp, #28]
 8014a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8014a2e:	4654      	mov	r4, sl
 8014a30:	2205      	movs	r2, #5
 8014a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a36:	4854      	ldr	r0, [pc, #336]	; (8014b88 <_vfiprintf_r+0x220>)
 8014a38:	f7eb fc52 	bl	80002e0 <memchr>
 8014a3c:	9a04      	ldr	r2, [sp, #16]
 8014a3e:	b9d8      	cbnz	r0, 8014a78 <_vfiprintf_r+0x110>
 8014a40:	06d1      	lsls	r1, r2, #27
 8014a42:	bf44      	itt	mi
 8014a44:	2320      	movmi	r3, #32
 8014a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a4a:	0713      	lsls	r3, r2, #28
 8014a4c:	bf44      	itt	mi
 8014a4e:	232b      	movmi	r3, #43	; 0x2b
 8014a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a54:	f89a 3000 	ldrb.w	r3, [sl]
 8014a58:	2b2a      	cmp	r3, #42	; 0x2a
 8014a5a:	d015      	beq.n	8014a88 <_vfiprintf_r+0x120>
 8014a5c:	9a07      	ldr	r2, [sp, #28]
 8014a5e:	4654      	mov	r4, sl
 8014a60:	2000      	movs	r0, #0
 8014a62:	f04f 0c0a 	mov.w	ip, #10
 8014a66:	4621      	mov	r1, r4
 8014a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a6c:	3b30      	subs	r3, #48	; 0x30
 8014a6e:	2b09      	cmp	r3, #9
 8014a70:	d94d      	bls.n	8014b0e <_vfiprintf_r+0x1a6>
 8014a72:	b1b0      	cbz	r0, 8014aa2 <_vfiprintf_r+0x13a>
 8014a74:	9207      	str	r2, [sp, #28]
 8014a76:	e014      	b.n	8014aa2 <_vfiprintf_r+0x13a>
 8014a78:	eba0 0308 	sub.w	r3, r0, r8
 8014a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8014a80:	4313      	orrs	r3, r2
 8014a82:	9304      	str	r3, [sp, #16]
 8014a84:	46a2      	mov	sl, r4
 8014a86:	e7d2      	b.n	8014a2e <_vfiprintf_r+0xc6>
 8014a88:	9b03      	ldr	r3, [sp, #12]
 8014a8a:	1d19      	adds	r1, r3, #4
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	9103      	str	r1, [sp, #12]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	bfbb      	ittet	lt
 8014a94:	425b      	neglt	r3, r3
 8014a96:	f042 0202 	orrlt.w	r2, r2, #2
 8014a9a:	9307      	strge	r3, [sp, #28]
 8014a9c:	9307      	strlt	r3, [sp, #28]
 8014a9e:	bfb8      	it	lt
 8014aa0:	9204      	strlt	r2, [sp, #16]
 8014aa2:	7823      	ldrb	r3, [r4, #0]
 8014aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8014aa6:	d10c      	bne.n	8014ac2 <_vfiprintf_r+0x15a>
 8014aa8:	7863      	ldrb	r3, [r4, #1]
 8014aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8014aac:	d134      	bne.n	8014b18 <_vfiprintf_r+0x1b0>
 8014aae:	9b03      	ldr	r3, [sp, #12]
 8014ab0:	1d1a      	adds	r2, r3, #4
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	9203      	str	r2, [sp, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	bfb8      	it	lt
 8014aba:	f04f 33ff 	movlt.w	r3, #4294967295
 8014abe:	3402      	adds	r4, #2
 8014ac0:	9305      	str	r3, [sp, #20]
 8014ac2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014b98 <_vfiprintf_r+0x230>
 8014ac6:	7821      	ldrb	r1, [r4, #0]
 8014ac8:	2203      	movs	r2, #3
 8014aca:	4650      	mov	r0, sl
 8014acc:	f7eb fc08 	bl	80002e0 <memchr>
 8014ad0:	b138      	cbz	r0, 8014ae2 <_vfiprintf_r+0x17a>
 8014ad2:	9b04      	ldr	r3, [sp, #16]
 8014ad4:	eba0 000a 	sub.w	r0, r0, sl
 8014ad8:	2240      	movs	r2, #64	; 0x40
 8014ada:	4082      	lsls	r2, r0
 8014adc:	4313      	orrs	r3, r2
 8014ade:	3401      	adds	r4, #1
 8014ae0:	9304      	str	r3, [sp, #16]
 8014ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ae6:	4829      	ldr	r0, [pc, #164]	; (8014b8c <_vfiprintf_r+0x224>)
 8014ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014aec:	2206      	movs	r2, #6
 8014aee:	f7eb fbf7 	bl	80002e0 <memchr>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d03f      	beq.n	8014b76 <_vfiprintf_r+0x20e>
 8014af6:	4b26      	ldr	r3, [pc, #152]	; (8014b90 <_vfiprintf_r+0x228>)
 8014af8:	bb1b      	cbnz	r3, 8014b42 <_vfiprintf_r+0x1da>
 8014afa:	9b03      	ldr	r3, [sp, #12]
 8014afc:	3307      	adds	r3, #7
 8014afe:	f023 0307 	bic.w	r3, r3, #7
 8014b02:	3308      	adds	r3, #8
 8014b04:	9303      	str	r3, [sp, #12]
 8014b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b08:	443b      	add	r3, r7
 8014b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014b0c:	e768      	b.n	80149e0 <_vfiprintf_r+0x78>
 8014b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b12:	460c      	mov	r4, r1
 8014b14:	2001      	movs	r0, #1
 8014b16:	e7a6      	b.n	8014a66 <_vfiprintf_r+0xfe>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	3401      	adds	r4, #1
 8014b1c:	9305      	str	r3, [sp, #20]
 8014b1e:	4619      	mov	r1, r3
 8014b20:	f04f 0c0a 	mov.w	ip, #10
 8014b24:	4620      	mov	r0, r4
 8014b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b2a:	3a30      	subs	r2, #48	; 0x30
 8014b2c:	2a09      	cmp	r2, #9
 8014b2e:	d903      	bls.n	8014b38 <_vfiprintf_r+0x1d0>
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d0c6      	beq.n	8014ac2 <_vfiprintf_r+0x15a>
 8014b34:	9105      	str	r1, [sp, #20]
 8014b36:	e7c4      	b.n	8014ac2 <_vfiprintf_r+0x15a>
 8014b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	2301      	movs	r3, #1
 8014b40:	e7f0      	b.n	8014b24 <_vfiprintf_r+0x1bc>
 8014b42:	ab03      	add	r3, sp, #12
 8014b44:	9300      	str	r3, [sp, #0]
 8014b46:	462a      	mov	r2, r5
 8014b48:	4b12      	ldr	r3, [pc, #72]	; (8014b94 <_vfiprintf_r+0x22c>)
 8014b4a:	a904      	add	r1, sp, #16
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f7fb ff7b 	bl	8010a48 <_printf_float>
 8014b52:	4607      	mov	r7, r0
 8014b54:	1c78      	adds	r0, r7, #1
 8014b56:	d1d6      	bne.n	8014b06 <_vfiprintf_r+0x19e>
 8014b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b5a:	07d9      	lsls	r1, r3, #31
 8014b5c:	d405      	bmi.n	8014b6a <_vfiprintf_r+0x202>
 8014b5e:	89ab      	ldrh	r3, [r5, #12]
 8014b60:	059a      	lsls	r2, r3, #22
 8014b62:	d402      	bmi.n	8014b6a <_vfiprintf_r+0x202>
 8014b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b66:	f7fc ff48 	bl	80119fa <__retarget_lock_release_recursive>
 8014b6a:	89ab      	ldrh	r3, [r5, #12]
 8014b6c:	065b      	lsls	r3, r3, #25
 8014b6e:	f53f af1d 	bmi.w	80149ac <_vfiprintf_r+0x44>
 8014b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b74:	e71c      	b.n	80149b0 <_vfiprintf_r+0x48>
 8014b76:	ab03      	add	r3, sp, #12
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	462a      	mov	r2, r5
 8014b7c:	4b05      	ldr	r3, [pc, #20]	; (8014b94 <_vfiprintf_r+0x22c>)
 8014b7e:	a904      	add	r1, sp, #16
 8014b80:	4630      	mov	r0, r6
 8014b82:	f7fc f9e9 	bl	8010f58 <_printf_i>
 8014b86:	e7e4      	b.n	8014b52 <_vfiprintf_r+0x1ea>
 8014b88:	08015309 	.word	0x08015309
 8014b8c:	08015313 	.word	0x08015313
 8014b90:	08010a49 	.word	0x08010a49
 8014b94:	08014945 	.word	0x08014945
 8014b98:	0801530f 	.word	0x0801530f

08014b9c <__swbuf_r>:
 8014b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b9e:	460e      	mov	r6, r1
 8014ba0:	4614      	mov	r4, r2
 8014ba2:	4605      	mov	r5, r0
 8014ba4:	b118      	cbz	r0, 8014bae <__swbuf_r+0x12>
 8014ba6:	6a03      	ldr	r3, [r0, #32]
 8014ba8:	b90b      	cbnz	r3, 8014bae <__swbuf_r+0x12>
 8014baa:	f7fc fd75 	bl	8011698 <__sinit>
 8014bae:	69a3      	ldr	r3, [r4, #24]
 8014bb0:	60a3      	str	r3, [r4, #8]
 8014bb2:	89a3      	ldrh	r3, [r4, #12]
 8014bb4:	071a      	lsls	r2, r3, #28
 8014bb6:	d525      	bpl.n	8014c04 <__swbuf_r+0x68>
 8014bb8:	6923      	ldr	r3, [r4, #16]
 8014bba:	b31b      	cbz	r3, 8014c04 <__swbuf_r+0x68>
 8014bbc:	6823      	ldr	r3, [r4, #0]
 8014bbe:	6922      	ldr	r2, [r4, #16]
 8014bc0:	1a98      	subs	r0, r3, r2
 8014bc2:	6963      	ldr	r3, [r4, #20]
 8014bc4:	b2f6      	uxtb	r6, r6
 8014bc6:	4283      	cmp	r3, r0
 8014bc8:	4637      	mov	r7, r6
 8014bca:	dc04      	bgt.n	8014bd6 <__swbuf_r+0x3a>
 8014bcc:	4621      	mov	r1, r4
 8014bce:	4628      	mov	r0, r5
 8014bd0:	f7ff fa48 	bl	8014064 <_fflush_r>
 8014bd4:	b9e0      	cbnz	r0, 8014c10 <__swbuf_r+0x74>
 8014bd6:	68a3      	ldr	r3, [r4, #8]
 8014bd8:	3b01      	subs	r3, #1
 8014bda:	60a3      	str	r3, [r4, #8]
 8014bdc:	6823      	ldr	r3, [r4, #0]
 8014bde:	1c5a      	adds	r2, r3, #1
 8014be0:	6022      	str	r2, [r4, #0]
 8014be2:	701e      	strb	r6, [r3, #0]
 8014be4:	6962      	ldr	r2, [r4, #20]
 8014be6:	1c43      	adds	r3, r0, #1
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d004      	beq.n	8014bf6 <__swbuf_r+0x5a>
 8014bec:	89a3      	ldrh	r3, [r4, #12]
 8014bee:	07db      	lsls	r3, r3, #31
 8014bf0:	d506      	bpl.n	8014c00 <__swbuf_r+0x64>
 8014bf2:	2e0a      	cmp	r6, #10
 8014bf4:	d104      	bne.n	8014c00 <__swbuf_r+0x64>
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f7ff fa33 	bl	8014064 <_fflush_r>
 8014bfe:	b938      	cbnz	r0, 8014c10 <__swbuf_r+0x74>
 8014c00:	4638      	mov	r0, r7
 8014c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c04:	4621      	mov	r1, r4
 8014c06:	4628      	mov	r0, r5
 8014c08:	f000 f806 	bl	8014c18 <__swsetup_r>
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	d0d5      	beq.n	8014bbc <__swbuf_r+0x20>
 8014c10:	f04f 37ff 	mov.w	r7, #4294967295
 8014c14:	e7f4      	b.n	8014c00 <__swbuf_r+0x64>
	...

08014c18 <__swsetup_r>:
 8014c18:	b538      	push	{r3, r4, r5, lr}
 8014c1a:	4b2a      	ldr	r3, [pc, #168]	; (8014cc4 <__swsetup_r+0xac>)
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	6818      	ldr	r0, [r3, #0]
 8014c20:	460c      	mov	r4, r1
 8014c22:	b118      	cbz	r0, 8014c2c <__swsetup_r+0x14>
 8014c24:	6a03      	ldr	r3, [r0, #32]
 8014c26:	b90b      	cbnz	r3, 8014c2c <__swsetup_r+0x14>
 8014c28:	f7fc fd36 	bl	8011698 <__sinit>
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c32:	0718      	lsls	r0, r3, #28
 8014c34:	d422      	bmi.n	8014c7c <__swsetup_r+0x64>
 8014c36:	06d9      	lsls	r1, r3, #27
 8014c38:	d407      	bmi.n	8014c4a <__swsetup_r+0x32>
 8014c3a:	2309      	movs	r3, #9
 8014c3c:	602b      	str	r3, [r5, #0]
 8014c3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014c42:	81a3      	strh	r3, [r4, #12]
 8014c44:	f04f 30ff 	mov.w	r0, #4294967295
 8014c48:	e034      	b.n	8014cb4 <__swsetup_r+0x9c>
 8014c4a:	0758      	lsls	r0, r3, #29
 8014c4c:	d512      	bpl.n	8014c74 <__swsetup_r+0x5c>
 8014c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c50:	b141      	cbz	r1, 8014c64 <__swsetup_r+0x4c>
 8014c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c56:	4299      	cmp	r1, r3
 8014c58:	d002      	beq.n	8014c60 <__swsetup_r+0x48>
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f7fd fcd8 	bl	8012610 <_free_r>
 8014c60:	2300      	movs	r3, #0
 8014c62:	6363      	str	r3, [r4, #52]	; 0x34
 8014c64:	89a3      	ldrh	r3, [r4, #12]
 8014c66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c6a:	81a3      	strh	r3, [r4, #12]
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	6063      	str	r3, [r4, #4]
 8014c70:	6923      	ldr	r3, [r4, #16]
 8014c72:	6023      	str	r3, [r4, #0]
 8014c74:	89a3      	ldrh	r3, [r4, #12]
 8014c76:	f043 0308 	orr.w	r3, r3, #8
 8014c7a:	81a3      	strh	r3, [r4, #12]
 8014c7c:	6923      	ldr	r3, [r4, #16]
 8014c7e:	b94b      	cbnz	r3, 8014c94 <__swsetup_r+0x7c>
 8014c80:	89a3      	ldrh	r3, [r4, #12]
 8014c82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c8a:	d003      	beq.n	8014c94 <__swsetup_r+0x7c>
 8014c8c:	4621      	mov	r1, r4
 8014c8e:	4628      	mov	r0, r5
 8014c90:	f000 f884 	bl	8014d9c <__smakebuf_r>
 8014c94:	89a0      	ldrh	r0, [r4, #12]
 8014c96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c9a:	f010 0301 	ands.w	r3, r0, #1
 8014c9e:	d00a      	beq.n	8014cb6 <__swsetup_r+0x9e>
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	60a3      	str	r3, [r4, #8]
 8014ca4:	6963      	ldr	r3, [r4, #20]
 8014ca6:	425b      	negs	r3, r3
 8014ca8:	61a3      	str	r3, [r4, #24]
 8014caa:	6923      	ldr	r3, [r4, #16]
 8014cac:	b943      	cbnz	r3, 8014cc0 <__swsetup_r+0xa8>
 8014cae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014cb2:	d1c4      	bne.n	8014c3e <__swsetup_r+0x26>
 8014cb4:	bd38      	pop	{r3, r4, r5, pc}
 8014cb6:	0781      	lsls	r1, r0, #30
 8014cb8:	bf58      	it	pl
 8014cba:	6963      	ldrpl	r3, [r4, #20]
 8014cbc:	60a3      	str	r3, [r4, #8]
 8014cbe:	e7f4      	b.n	8014caa <__swsetup_r+0x92>
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	e7f7      	b.n	8014cb4 <__swsetup_r+0x9c>
 8014cc4:	2400006c 	.word	0x2400006c

08014cc8 <_raise_r>:
 8014cc8:	291f      	cmp	r1, #31
 8014cca:	b538      	push	{r3, r4, r5, lr}
 8014ccc:	4604      	mov	r4, r0
 8014cce:	460d      	mov	r5, r1
 8014cd0:	d904      	bls.n	8014cdc <_raise_r+0x14>
 8014cd2:	2316      	movs	r3, #22
 8014cd4:	6003      	str	r3, [r0, #0]
 8014cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8014cda:	bd38      	pop	{r3, r4, r5, pc}
 8014cdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014cde:	b112      	cbz	r2, 8014ce6 <_raise_r+0x1e>
 8014ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ce4:	b94b      	cbnz	r3, 8014cfa <_raise_r+0x32>
 8014ce6:	4620      	mov	r0, r4
 8014ce8:	f000 f830 	bl	8014d4c <_getpid_r>
 8014cec:	462a      	mov	r2, r5
 8014cee:	4601      	mov	r1, r0
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cf6:	f000 b817 	b.w	8014d28 <_kill_r>
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d00a      	beq.n	8014d14 <_raise_r+0x4c>
 8014cfe:	1c59      	adds	r1, r3, #1
 8014d00:	d103      	bne.n	8014d0a <_raise_r+0x42>
 8014d02:	2316      	movs	r3, #22
 8014d04:	6003      	str	r3, [r0, #0]
 8014d06:	2001      	movs	r0, #1
 8014d08:	e7e7      	b.n	8014cda <_raise_r+0x12>
 8014d0a:	2400      	movs	r4, #0
 8014d0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014d10:	4628      	mov	r0, r5
 8014d12:	4798      	blx	r3
 8014d14:	2000      	movs	r0, #0
 8014d16:	e7e0      	b.n	8014cda <_raise_r+0x12>

08014d18 <raise>:
 8014d18:	4b02      	ldr	r3, [pc, #8]	; (8014d24 <raise+0xc>)
 8014d1a:	4601      	mov	r1, r0
 8014d1c:	6818      	ldr	r0, [r3, #0]
 8014d1e:	f7ff bfd3 	b.w	8014cc8 <_raise_r>
 8014d22:	bf00      	nop
 8014d24:	2400006c 	.word	0x2400006c

08014d28 <_kill_r>:
 8014d28:	b538      	push	{r3, r4, r5, lr}
 8014d2a:	4d07      	ldr	r5, [pc, #28]	; (8014d48 <_kill_r+0x20>)
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	4604      	mov	r4, r0
 8014d30:	4608      	mov	r0, r1
 8014d32:	4611      	mov	r1, r2
 8014d34:	602b      	str	r3, [r5, #0]
 8014d36:	f7ed fa89 	bl	800224c <_kill>
 8014d3a:	1c43      	adds	r3, r0, #1
 8014d3c:	d102      	bne.n	8014d44 <_kill_r+0x1c>
 8014d3e:	682b      	ldr	r3, [r5, #0]
 8014d40:	b103      	cbz	r3, 8014d44 <_kill_r+0x1c>
 8014d42:	6023      	str	r3, [r4, #0]
 8014d44:	bd38      	pop	{r3, r4, r5, pc}
 8014d46:	bf00      	nop
 8014d48:	24005694 	.word	0x24005694

08014d4c <_getpid_r>:
 8014d4c:	f7ed ba76 	b.w	800223c <_getpid>

08014d50 <__swhatbuf_r>:
 8014d50:	b570      	push	{r4, r5, r6, lr}
 8014d52:	460c      	mov	r4, r1
 8014d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d58:	2900      	cmp	r1, #0
 8014d5a:	b096      	sub	sp, #88	; 0x58
 8014d5c:	4615      	mov	r5, r2
 8014d5e:	461e      	mov	r6, r3
 8014d60:	da0d      	bge.n	8014d7e <__swhatbuf_r+0x2e>
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d68:	f04f 0100 	mov.w	r1, #0
 8014d6c:	bf0c      	ite	eq
 8014d6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014d72:	2340      	movne	r3, #64	; 0x40
 8014d74:	2000      	movs	r0, #0
 8014d76:	6031      	str	r1, [r6, #0]
 8014d78:	602b      	str	r3, [r5, #0]
 8014d7a:	b016      	add	sp, #88	; 0x58
 8014d7c:	bd70      	pop	{r4, r5, r6, pc}
 8014d7e:	466a      	mov	r2, sp
 8014d80:	f000 f848 	bl	8014e14 <_fstat_r>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	dbec      	blt.n	8014d62 <__swhatbuf_r+0x12>
 8014d88:	9901      	ldr	r1, [sp, #4]
 8014d8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014d8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014d92:	4259      	negs	r1, r3
 8014d94:	4159      	adcs	r1, r3
 8014d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d9a:	e7eb      	b.n	8014d74 <__swhatbuf_r+0x24>

08014d9c <__smakebuf_r>:
 8014d9c:	898b      	ldrh	r3, [r1, #12]
 8014d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014da0:	079d      	lsls	r5, r3, #30
 8014da2:	4606      	mov	r6, r0
 8014da4:	460c      	mov	r4, r1
 8014da6:	d507      	bpl.n	8014db8 <__smakebuf_r+0x1c>
 8014da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014dac:	6023      	str	r3, [r4, #0]
 8014dae:	6123      	str	r3, [r4, #16]
 8014db0:	2301      	movs	r3, #1
 8014db2:	6163      	str	r3, [r4, #20]
 8014db4:	b002      	add	sp, #8
 8014db6:	bd70      	pop	{r4, r5, r6, pc}
 8014db8:	ab01      	add	r3, sp, #4
 8014dba:	466a      	mov	r2, sp
 8014dbc:	f7ff ffc8 	bl	8014d50 <__swhatbuf_r>
 8014dc0:	9900      	ldr	r1, [sp, #0]
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	f7fb fd23 	bl	8010810 <_malloc_r>
 8014dca:	b948      	cbnz	r0, 8014de0 <__smakebuf_r+0x44>
 8014dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dd0:	059a      	lsls	r2, r3, #22
 8014dd2:	d4ef      	bmi.n	8014db4 <__smakebuf_r+0x18>
 8014dd4:	f023 0303 	bic.w	r3, r3, #3
 8014dd8:	f043 0302 	orr.w	r3, r3, #2
 8014ddc:	81a3      	strh	r3, [r4, #12]
 8014dde:	e7e3      	b.n	8014da8 <__smakebuf_r+0xc>
 8014de0:	89a3      	ldrh	r3, [r4, #12]
 8014de2:	6020      	str	r0, [r4, #0]
 8014de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014de8:	81a3      	strh	r3, [r4, #12]
 8014dea:	9b00      	ldr	r3, [sp, #0]
 8014dec:	6163      	str	r3, [r4, #20]
 8014dee:	9b01      	ldr	r3, [sp, #4]
 8014df0:	6120      	str	r0, [r4, #16]
 8014df2:	b15b      	cbz	r3, 8014e0c <__smakebuf_r+0x70>
 8014df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014df8:	4630      	mov	r0, r6
 8014dfa:	f000 f81d 	bl	8014e38 <_isatty_r>
 8014dfe:	b128      	cbz	r0, 8014e0c <__smakebuf_r+0x70>
 8014e00:	89a3      	ldrh	r3, [r4, #12]
 8014e02:	f023 0303 	bic.w	r3, r3, #3
 8014e06:	f043 0301 	orr.w	r3, r3, #1
 8014e0a:	81a3      	strh	r3, [r4, #12]
 8014e0c:	89a3      	ldrh	r3, [r4, #12]
 8014e0e:	431d      	orrs	r5, r3
 8014e10:	81a5      	strh	r5, [r4, #12]
 8014e12:	e7cf      	b.n	8014db4 <__smakebuf_r+0x18>

08014e14 <_fstat_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4d07      	ldr	r5, [pc, #28]	; (8014e34 <_fstat_r+0x20>)
 8014e18:	2300      	movs	r3, #0
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	4608      	mov	r0, r1
 8014e1e:	4611      	mov	r1, r2
 8014e20:	602b      	str	r3, [r5, #0]
 8014e22:	f7ed fa72 	bl	800230a <_fstat>
 8014e26:	1c43      	adds	r3, r0, #1
 8014e28:	d102      	bne.n	8014e30 <_fstat_r+0x1c>
 8014e2a:	682b      	ldr	r3, [r5, #0]
 8014e2c:	b103      	cbz	r3, 8014e30 <_fstat_r+0x1c>
 8014e2e:	6023      	str	r3, [r4, #0]
 8014e30:	bd38      	pop	{r3, r4, r5, pc}
 8014e32:	bf00      	nop
 8014e34:	24005694 	.word	0x24005694

08014e38 <_isatty_r>:
 8014e38:	b538      	push	{r3, r4, r5, lr}
 8014e3a:	4d06      	ldr	r5, [pc, #24]	; (8014e54 <_isatty_r+0x1c>)
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	4604      	mov	r4, r0
 8014e40:	4608      	mov	r0, r1
 8014e42:	602b      	str	r3, [r5, #0]
 8014e44:	f7ed fa71 	bl	800232a <_isatty>
 8014e48:	1c43      	adds	r3, r0, #1
 8014e4a:	d102      	bne.n	8014e52 <_isatty_r+0x1a>
 8014e4c:	682b      	ldr	r3, [r5, #0]
 8014e4e:	b103      	cbz	r3, 8014e52 <_isatty_r+0x1a>
 8014e50:	6023      	str	r3, [r4, #0]
 8014e52:	bd38      	pop	{r3, r4, r5, pc}
 8014e54:	24005694 	.word	0x24005694

08014e58 <_init>:
 8014e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e5a:	bf00      	nop
 8014e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e5e:	bc08      	pop	{r3}
 8014e60:	469e      	mov	lr, r3
 8014e62:	4770      	bx	lr

08014e64 <_fini>:
 8014e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e66:	bf00      	nop
 8014e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e6a:	bc08      	pop	{r3}
 8014e6c:	469e      	mov	lr, r3
 8014e6e:	4770      	bx	lr
