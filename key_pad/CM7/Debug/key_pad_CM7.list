
key_pad_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acdc  0800acdc  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace4  0800ace4  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  24000000  0800acec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000064  0800ad50  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c4  0800adb0  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005240  24000124  0800ae10  00020124  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24005364  0800ae10  00025364  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 15 .debug_info   00029e5b  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000490c  00000000  00000000  00049ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e10  00000000  00000000  0004e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001761  00000000  00000000  00050710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d753  00000000  00000000  00051e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00024d73  00000000  00000000  0008f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00196b36  00000000  00000000  000b4337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008648  00000000  00000000  0024ae70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  002534b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800abac 	.word	0x0800abac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800abac 	.word	0x0800abac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c4:	bf00      	nop
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <main+0xd4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d004      	beq.n	80007dc <main+0x24>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dcf4      	bgt.n	80007c6 <main+0xe>
  if ( timeout < 0 )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da01      	bge.n	80007e6 <main+0x2e>
  {
  Error_Handler();
 80007e2:	f000 fc9f 	bl	8001124 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 ff67 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f861 	bl	80008b0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <main+0xd4>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	4a25      	ldr	r2, [pc, #148]	; (800088c <main+0xd4>)
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <main+0xd4>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800080c:	2000      	movs	r0, #0
 800080e:	f001 fed9 	bl	80025c4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f001 feef 	bl	80025f8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000820:	bf00      	nop
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <main+0xd4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d104      	bne.n	8000838 <main+0x80>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	1e5a      	subs	r2, r3, #1
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dcf4      	bgt.n	8000822 <main+0x6a>
if ( timeout < 0 )
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da01      	bge.n	8000842 <main+0x8a>
{
Error_Handler();
 800083e:	f000 fc71 	bl	8001124 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000842:	f000 f97d 	bl	8000b40 <MX_GPIO_Init>
  MX_ETH_Init();
 8000846:	f000 f8b1 	bl	80009ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 800084a:	f000 f8fb 	bl	8000a44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800084e:	f000 f945 	bl	8000adc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000852:	f006 fe77 	bl	8007544 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueLcdMatriz */
  QueueLcdMatrizHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueLcdMatriz_attributes);
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <main+0xd8>)
 8000858:	2102      	movs	r1, #2
 800085a:	2010      	movs	r0, #16
 800085c:	f006 ff69 	bl	8007732 <osMessageQueueNew>
 8000860:	4603      	mov	r3, r0
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <main+0xdc>)
 8000864:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <main+0xe0>)
 8000868:	2100      	movs	r1, #0
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <main+0xe4>)
 800086c:	f006 feb4 	bl	80075d8 <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <main+0xe8>)
 8000874:	6013      	str	r3, [r2, #0]

  /* creation of keyPadTask */
  keyPadTaskHandle = osThreadNew(StartkeyPadTask, NULL, &keyPadTask_attributes);
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <main+0xec>)
 8000878:	2100      	movs	r1, #0
 800087a:	480b      	ldr	r0, [pc, #44]	; (80008a8 <main+0xf0>)
 800087c:	f006 feac 	bl	80075d8 <osThreadNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <main+0xf4>)
 8000884:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000886:	f006 fe81 	bl	800758c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0xd2>
 800088c:	58024400 	.word	0x58024400
 8000890:	0800ac68 	.word	0x0800ac68
 8000894:	240007d0 	.word	0x240007d0
 8000898:	0800ac20 	.word	0x0800ac20
 800089c:	08000c9d 	.word	0x08000c9d
 80008a0:	240007c8 	.word	0x240007c8
 80008a4:	0800ac44 	.word	0x0800ac44
 80008a8:	08000cad 	.word	0x08000cad
 80008ac:	240007cc 	.word	0x240007cc

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09c      	sub	sp, #112	; 0x70
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	224c      	movs	r2, #76	; 0x4c
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f009 fc9a 	bl	800a1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2220      	movs	r2, #32
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fc94 	bl	800a1f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d0:	2004      	movs	r0, #4
 80008d2:	f001 ffed 	bl	80028b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <SystemClock_Config+0xf4>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <SystemClock_Config+0xf4>)
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e6:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <SystemClock_Config+0xf4>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <SystemClock_Config+0xf8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <SystemClock_Config+0xf8>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <SystemClock_Config+0xf8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090c:	bf00      	nop
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <SystemClock_Config+0xf8>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091a:	d1f8      	bne.n	800090e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000932:	2312      	movs	r3, #18
 8000934:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000942:	230c      	movs	r3, #12
 8000944:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000946:	2302      	movs	r3, #2
 8000948:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800094a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800094e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f815 	bl	8002984 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000960:	f000 fbe0 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	233f      	movs	r3, #63	; 0x3f
 8000966:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2303      	movs	r3, #3
 800096a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2101      	movs	r1, #1
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fc54 	bl	8003238 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000996:	f000 fbc5 	bl	8001124 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3770      	adds	r7, #112	; 0x70
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	58000400 	.word	0x58000400
 80009a8:	58024800 	.word	0x58024800

080009ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_ETH_Init+0x80>)
 80009b2:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <MX_ETH_Init+0x84>)
 80009b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ETH_Init+0x88>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ETH_Init+0x88>)
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ETH_Init+0x88>)
 80009c4:	22e1      	movs	r2, #225	; 0xe1
 80009c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ETH_Init+0x88>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ETH_Init+0x88>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ETH_Init+0x88>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_ETH_Init+0x80>)
 80009dc:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_ETH_Init+0x88>)
 80009de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_ETH_Init+0x80>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_ETH_Init+0x80>)
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_ETH_Init+0x80>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_ETH_Init+0x90>)
 80009f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_ETH_Init+0x80>)
 80009f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_ETH_Init+0x80>)
 80009fc:	f000 ffdc 	bl	80019b8 <HAL_ETH_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a06:	f000 fb8d 	bl	8001124 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a0a:	2238      	movs	r2, #56	; 0x38
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_ETH_Init+0x94>)
 8000a10:	f009 fbf2 	bl	800a1f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_ETH_Init+0x94>)
 8000a16:	2221      	movs	r2, #33	; 0x21
 8000a18:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_ETH_Init+0x94>)
 8000a1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a20:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_ETH_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	24000178 	.word	0x24000178
 8000a30:	40028000 	.word	0x40028000
 8000a34:	240007d8 	.word	0x240007d8
 8000a38:	240000c4 	.word	0x240000c4
 8000a3c:	24000064 	.word	0x24000064
 8000a40:	24000140 	.word	0x24000140

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <MX_USART3_UART_Init+0x94>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f005 f8a7 	bl	8005be0 <HAL_UART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a98:	f000 fb44 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f006 f937 	bl	8006d12 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aaa:	f000 fb3b 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f006 f96c 	bl	8006d8e <HAL_UARTEx_SetRxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f000 fb32 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f006 f8ed 	bl	8006ca0 <HAL_UARTEx_DisableFifoMode>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f000 fb2a 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000228 	.word	0x24000228
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae8:	2209      	movs	r2, #9
 8000aea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	f001 fd7c 	bl	8002620 <HAL_PCD_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b2e:	f000 faf9 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240002bc 	.word	0x240002bc
 8000b3c:	40080000 	.word	0x40080000

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a4c      	ldr	r2, [pc, #304]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a45      	ldr	r2, [pc, #276]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb0:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_GPIO_Init+0x150>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f240 7182 	movw	r1, #1922	; 0x782
 8000c2e:	4819      	ldr	r0, [pc, #100]	; (8000c94 <MX_GPIO_Init+0x154>)
 8000c30:	f001 fcae 	bl	8002590 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8000c34:	f240 7382 	movw	r3, #1922	; 0x782
 8000c38:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_GPIO_Init+0x154>)
 8000c4e:	f001 fad7 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000c52:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_GPIO_Init+0x154>)
 8000c68:	f001 faca 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_GPIO_Init+0x158>)
 8000c82:	f001 fabd 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3730      	adds	r7, #48	; 0x30
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58021000 	.word	0x58021000
 8000c98:	58021800 	.word	0x58021800

08000c9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f006 fd29 	bl	80076fc <osDelay>
 8000caa:	e7fb      	b.n	8000ca4 <StartDefaultTask+0x8>

08000cac <StartkeyPadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartkeyPadTask */
void StartkeyPadTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartkeyPadTask */
	val_key = 0;
 8000cb4:	4bcb      	ldr	r3, [pc, #812]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
	char msg [50];
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f006 fd1e 	bl	80076fc <osDelay>

    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	48c8      	ldr	r0, [pc, #800]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000cc6:	f001 fc63 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	48c5      	ldr	r0, [pc, #788]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000cd2:	f001 fc5d 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	48c2      	ldr	r0, [pc, #776]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000cde:	f001 fc57 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	48bf      	ldr	r0, [pc, #764]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000cea:	f001 fc51 	bl	8002590 <HAL_GPIO_WritePin>

    	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	48bd      	ldr	r0, [pc, #756]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000cf4:	f001 fc34 	bl	8002560 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d111      	bne.n	8000d22 <StartkeyPadTask+0x76>
    		HAL_Delay(4);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f000 fd36 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 8000d04:	bf00      	nop
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	48b7      	ldr	r0, [pc, #732]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000d0c:	f001 fc28 	bl	8002560 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f7      	beq.n	8000d06 <StartkeyPadTask+0x5a>
    		HAL_Delay(4);
 8000d16:	2004      	movs	r0, #4
 8000d18:	f000 fd2a 	bl	8001770 <HAL_Delay>
    		val_key = keys[0][0];
 8000d1c:	2231      	movs	r2, #49	; 0x31
 8000d1e:	4bb1      	ldr	r3, [pc, #708]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000d20:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d26:	48b0      	ldr	r0, [pc, #704]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000d28:	f001 fc1a 	bl	8002560 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d111      	bne.n	8000d56 <StartkeyPadTask+0xaa>
    		HAL_Delay(4);
 8000d32:	2004      	movs	r0, #4
 8000d34:	f000 fd1c 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000d38:	bf00      	nop
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	48aa      	ldr	r0, [pc, #680]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000d40:	f001 fc0e 	bl	8002560 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f7      	beq.n	8000d3a <StartkeyPadTask+0x8e>
    		HAL_Delay(4);
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f000 fd10 	bl	8001770 <HAL_Delay>
    		val_key = keys[0][1];
 8000d50:	2232      	movs	r2, #50	; 0x32
 8000d52:	4ba4      	ldr	r3, [pc, #656]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000d54:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	48a3      	ldr	r0, [pc, #652]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000d5c:	f001 fc00 	bl	8002560 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d111      	bne.n	8000d8a <StartkeyPadTask+0xde>
    		HAL_Delay(4);
 8000d66:	2004      	movs	r0, #4
 8000d68:	f000 fd02 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000d6c:	bf00      	nop
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	489d      	ldr	r0, [pc, #628]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000d74:	f001 fbf4 	bl	8002560 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f7      	beq.n	8000d6e <StartkeyPadTask+0xc2>
    		HAL_Delay(4);
 8000d7e:	2004      	movs	r0, #4
 8000d80:	f000 fcf6 	bl	8001770 <HAL_Delay>
    		val_key = keys[0][2];
 8000d84:	2233      	movs	r2, #51	; 0x33
 8000d86:	4b97      	ldr	r3, [pc, #604]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000d88:	701a      	strb	r2, [r3, #0]
    	}
    	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	4896      	ldr	r0, [pc, #600]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000d90:	f001 fbe6 	bl	8002560 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d111      	bne.n	8000dbe <StartkeyPadTask+0x112>
    		HAL_Delay(4);
 8000d9a:	2004      	movs	r0, #4
 8000d9c:	f000 fce8 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000da0:	bf00      	nop
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	4890      	ldr	r0, [pc, #576]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000da8:	f001 fbda 	bl	8002560 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f7      	beq.n	8000da2 <StartkeyPadTask+0xf6>
    		HAL_Delay(4);
 8000db2:	2004      	movs	r0, #4
 8000db4:	f000 fcdc 	bl	8001770 <HAL_Delay>
    		val_key = keys[0][3];
 8000db8:	2241      	movs	r2, #65	; 0x41
 8000dba:	4b8a      	ldr	r3, [pc, #552]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000dbc:	701a      	strb	r2, [r3, #0]
    	}

    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4889      	ldr	r0, [pc, #548]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000dc4:	f001 fbe4 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dce:	4886      	ldr	r0, [pc, #536]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000dd0:	f001 fbde 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dda:	4883      	ldr	r0, [pc, #524]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000ddc:	f001 fbd8 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	4880      	ldr	r0, [pc, #512]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000de8:	f001 fbd2 	bl	8002590 <HAL_GPIO_WritePin>

    	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df0:	487d      	ldr	r0, [pc, #500]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000df2:	f001 fbb5 	bl	8002560 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d111      	bne.n	8000e20 <StartkeyPadTask+0x174>
    		HAL_Delay(4);
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f000 fcb7 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000e02:	bf00      	nop
 8000e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e08:	4877      	ldr	r0, [pc, #476]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000e0a:	f001 fba9 	bl	8002560 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f7      	beq.n	8000e04 <StartkeyPadTask+0x158>
    		HAL_Delay(4);
 8000e14:	2004      	movs	r0, #4
 8000e16:	f000 fcab 	bl	8001770 <HAL_Delay>
    		val_key = keys[1][0];
 8000e1a:	2234      	movs	r2, #52	; 0x34
 8000e1c:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000e1e:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000e20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e24:	4870      	ldr	r0, [pc, #448]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000e26:	f001 fb9b 	bl	8002560 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d111      	bne.n	8000e54 <StartkeyPadTask+0x1a8>
    		HAL_Delay(4);
 8000e30:	2004      	movs	r0, #4
 8000e32:	f000 fc9d 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000e36:	bf00      	nop
 8000e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3c:	486a      	ldr	r0, [pc, #424]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000e3e:	f001 fb8f 	bl	8002560 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f7      	beq.n	8000e38 <StartkeyPadTask+0x18c>
    		HAL_Delay(4);
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f000 fc91 	bl	8001770 <HAL_Delay>
    		val_key = keys[1][1];
 8000e4e:	2235      	movs	r2, #53	; 0x35
 8000e50:	4b64      	ldr	r3, [pc, #400]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000e52:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4863      	ldr	r0, [pc, #396]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000e5a:	f001 fb81 	bl	8002560 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d111      	bne.n	8000e88 <StartkeyPadTask+0x1dc>
    		HAL_Delay(4);
 8000e64:	2004      	movs	r0, #4
 8000e66:	f000 fc83 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000e6a:	bf00      	nop
 8000e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e70:	485d      	ldr	r0, [pc, #372]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000e72:	f001 fb75 	bl	8002560 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f7      	beq.n	8000e6c <StartkeyPadTask+0x1c0>
    		HAL_Delay(4);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f000 fc77 	bl	8001770 <HAL_Delay>
    		val_key = keys[1][2];
 8000e82:	2236      	movs	r2, #54	; 0x36
 8000e84:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000e86:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	4856      	ldr	r0, [pc, #344]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000e8e:	f001 fb67 	bl	8002560 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <StartkeyPadTask+0x210>
    		HAL_Delay(4);
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f000 fc69 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000e9e:	bf00      	nop
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	4850      	ldr	r0, [pc, #320]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000ea6:	f001 fb5b 	bl	8002560 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f7      	beq.n	8000ea0 <StartkeyPadTask+0x1f4>
    		HAL_Delay(4);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fc5d 	bl	8001770 <HAL_Delay>
    		val_key = keys[1][3];
 8000eb6:	2242      	movs	r2, #66	; 0x42
 8000eb8:	4b4a      	ldr	r3, [pc, #296]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000eba:	701a      	strb	r2, [r3, #0]
    	}

    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	4849      	ldr	r0, [pc, #292]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000ec2:	f001 fb65 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4846      	ldr	r0, [pc, #280]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000ece:	f001 fb5f 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed8:	4843      	ldr	r0, [pc, #268]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000eda:	f001 fb59 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee4:	4840      	ldr	r0, [pc, #256]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000ee6:	f001 fb53 	bl	8002590 <HAL_GPIO_WritePin>

    	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eee:	483e      	ldr	r0, [pc, #248]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000ef0:	f001 fb36 	bl	8002560 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <StartkeyPadTask+0x272>
    		HAL_Delay(4);
 8000efa:	2004      	movs	r0, #4
 8000efc:	f000 fc38 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000f00:	bf00      	nop
 8000f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f06:	4838      	ldr	r0, [pc, #224]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000f08:	f001 fb2a 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f7      	beq.n	8000f02 <StartkeyPadTask+0x256>
    		HAL_Delay(4);
 8000f12:	2004      	movs	r0, #4
 8000f14:	f000 fc2c 	bl	8001770 <HAL_Delay>
    		val_key = keys[2][0];
 8000f18:	2237      	movs	r2, #55	; 0x37
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000f1c:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000f24:	f001 fb1c 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d111      	bne.n	8000f52 <StartkeyPadTask+0x2a6>
    		HAL_Delay(4);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f000 fc1e 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000f34:	bf00      	nop
 8000f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3a:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000f3c:	f001 fb10 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f7      	beq.n	8000f36 <StartkeyPadTask+0x28a>
    		HAL_Delay(4);
 8000f46:	2004      	movs	r0, #4
 8000f48:	f000 fc12 	bl	8001770 <HAL_Delay>
    		val_key = keys[2][1];
 8000f4c:	2238      	movs	r2, #56	; 0x38
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000f50:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f56:	4824      	ldr	r0, [pc, #144]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000f58:	f001 fb02 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d111      	bne.n	8000f86 <StartkeyPadTask+0x2da>
    		HAL_Delay(4);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f000 fc04 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000f68:	bf00      	nop
 8000f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6e:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000f70:	f001 faf6 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f7      	beq.n	8000f6a <StartkeyPadTask+0x2be>
    		HAL_Delay(4);
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f000 fbf8 	bl	8001770 <HAL_Delay>
    		val_key = keys[2][2];
 8000f80:	2239      	movs	r2, #57	; 0x39
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000f84:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000f8c:	f001 fae8 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d111      	bne.n	8000fba <StartkeyPadTask+0x30e>
    		HAL_Delay(4);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f000 fbea 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000f9c:	bf00      	nop
 8000f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000fa4:	f001 fadc 	bl	8002560 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f7      	beq.n	8000f9e <StartkeyPadTask+0x2f2>
    		HAL_Delay(4);
 8000fae:	2004      	movs	r0, #4
 8000fb0:	f000 fbde 	bl	8001770 <HAL_Delay>
    		val_key = keys[2][3];
 8000fb4:	2243      	movs	r2, #67	; 0x43
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <StartkeyPadTask+0x338>)
 8000fb8:	701a      	strb	r2, [r3, #0]
    	}

    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000fc0:	f001 fae6 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000fcc:	f001 fae0 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <StartkeyPadTask+0x33c>)
 8000fd8:	f001 fada 	bl	8002590 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe2:	e003      	b.n	8000fec <StartkeyPadTask+0x340>
 8000fe4:	240007d4 	.word	0x240007d4
 8000fe8:	58021000 	.word	0x58021000
 8000fec:	4840      	ldr	r0, [pc, #256]	; (80010f0 <StartkeyPadTask+0x444>)
 8000fee:	f001 facf 	bl	8002590 <HAL_GPIO_WritePin>

    	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000ff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff6:	483e      	ldr	r0, [pc, #248]	; (80010f0 <StartkeyPadTask+0x444>)
 8000ff8:	f001 fab2 	bl	8002560 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d111      	bne.n	8001026 <StartkeyPadTask+0x37a>
    		HAL_Delay(4);
 8001002:	2004      	movs	r0, #4
 8001004:	f000 fbb4 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001008:	bf00      	nop
 800100a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100e:	4838      	ldr	r0, [pc, #224]	; (80010f0 <StartkeyPadTask+0x444>)
 8001010:	f001 faa6 	bl	8002560 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f7      	beq.n	800100a <StartkeyPadTask+0x35e>
    		HAL_Delay(4);
 800101a:	2004      	movs	r0, #4
 800101c:	f000 fba8 	bl	8001770 <HAL_Delay>
    		val_key = keys[3][0];
 8001020:	222a      	movs	r2, #42	; 0x2a
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <StartkeyPadTask+0x448>)
 8001024:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <StartkeyPadTask+0x444>)
 800102c:	f001 fa98 	bl	8002560 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d111      	bne.n	800105a <StartkeyPadTask+0x3ae>
    		HAL_Delay(4);
 8001036:	2004      	movs	r0, #4
 8001038:	f000 fb9a 	bl	8001770 <HAL_Delay>
    		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800103c:	bf00      	nop
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	482b      	ldr	r0, [pc, #172]	; (80010f0 <StartkeyPadTask+0x444>)
 8001044:	f001 fa8c 	bl	8002560 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f7      	beq.n	800103e <StartkeyPadTask+0x392>
    		HAL_Delay(4);
 800104e:	2004      	movs	r0, #4
 8001050:	f000 fb8e 	bl	8001770 <HAL_Delay>
    		val_key = keys[3][1];
 8001054:	2230      	movs	r2, #48	; 0x30
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <StartkeyPadTask+0x448>)
 8001058:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <StartkeyPadTask+0x444>)
 8001060:	f001 fa7e 	bl	8002560 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <StartkeyPadTask+0x3e2>
    		HAL_Delay(4);
 800106a:	2004      	movs	r0, #4
 800106c:	f000 fb80 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001070:	bf00      	nop
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <StartkeyPadTask+0x444>)
 8001078:	f001 fa72 	bl	8002560 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f7      	beq.n	8001072 <StartkeyPadTask+0x3c6>
    		HAL_Delay(4);
 8001082:	2004      	movs	r0, #4
 8001084:	f000 fb74 	bl	8001770 <HAL_Delay>
    		val_key = keys[3][2];
 8001088:	2223      	movs	r2, #35	; 0x23
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <StartkeyPadTask+0x448>)
 800108c:	701a      	strb	r2, [r3, #0]
    	}
    	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 800108e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001092:	4817      	ldr	r0, [pc, #92]	; (80010f0 <StartkeyPadTask+0x444>)
 8001094:	f001 fa64 	bl	8002560 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d111      	bne.n	80010c2 <StartkeyPadTask+0x416>
    		HAL_Delay(4);
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fb66 	bl	8001770 <HAL_Delay>
    		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80010a4:	bf00      	nop
 80010a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <StartkeyPadTask+0x444>)
 80010ac:	f001 fa58 	bl	8002560 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f7      	beq.n	80010a6 <StartkeyPadTask+0x3fa>
    		HAL_Delay(4);
 80010b6:	2004      	movs	r0, #4
 80010b8:	f000 fb5a 	bl	8001770 <HAL_Delay>
    		val_key = keys[3][3];
 80010bc:	2244      	movs	r2, #68	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <StartkeyPadTask+0x448>)
 80010c0:	701a      	strb	r2, [r3, #0]
    	}

    	snprintf(msg, sizeof(msg), "Dat: %c \r\n", val_key);
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <StartkeyPadTask+0x448>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f107 000c 	add.w	r0, r7, #12
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <StartkeyPadTask+0x44c>)
 80010cc:	2132      	movs	r1, #50	; 0x32
 80010ce:	f009 f85f 	bl	800a190 <sniprintf>
    	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 10);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f902 	bl	80002e0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f107 010c 	add.w	r1, r7, #12
 80010e4:	230a      	movs	r3, #10
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <StartkeyPadTask+0x450>)
 80010e8:	f004 fdca 	bl	8005c80 <HAL_UART_Transmit>
  {
 80010ec:	e5e5      	b.n	8000cba <StartkeyPadTask+0xe>
 80010ee:	bf00      	nop
 80010f0:	58021000 	.word	0x58021000
 80010f4:	240007d4 	.word	0x240007d4
 80010f8:	0800abec 	.word	0x0800abec
 80010fc:	24000228 	.word	0x24000228

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f000 fb0d 	bl	8001730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40014000 	.word	0x40014000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x38>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_MspInit+0x38>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x38>)
 8001148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	210f      	movs	r1, #15
 8001158:	f06f 0001 	mvn.w	r0, #1
 800115c:	f000 fc04 	bl	8001968 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400

0800116c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <HAL_ETH_MspInit+0x184>)
 800118a:	4293      	cmp	r3, r2
 800118c:	f040 80ab 	bne.w	80012e6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001190:	4b58      	ldr	r3, [pc, #352]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001196:	4a57      	ldr	r2, [pc, #348]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011a0:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011aa:	623b      	str	r3, [r7, #32]
 80011ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011ae:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011be:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011cc:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d2:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a2a      	ldr	r2, [pc, #168]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 800124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <HAL_ETH_MspInit+0x188>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001262:	2332      	movs	r3, #50	; 0x32
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001272:	230b      	movs	r3, #11
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	481e      	ldr	r0, [pc, #120]	; (80012f8 <HAL_ETH_MspInit+0x18c>)
 800127e:	f000 ffbf 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001282:	2386      	movs	r3, #134	; 0x86
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001292:	230b      	movs	r3, #11
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <HAL_ETH_MspInit+0x190>)
 800129e:	f000 ffaf 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b4:	230b      	movs	r3, #11
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <HAL_ETH_MspInit+0x194>)
 80012c0:	f000 ff9e 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80012c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d6:	230b      	movs	r3, #11
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <HAL_ETH_MspInit+0x198>)
 80012e2:	f000 ff8d 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40028000 	.word	0x40028000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020800 	.word	0x58020800
 80012fc:	58020000 	.word	0x58020000
 8001300:	58020400 	.word	0x58020400
 8001304:	58021800 	.word	0x58021800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ba      	sub	sp, #232	; 0xe8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	22c0      	movs	r2, #192	; 0xc0
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f008 ff65 	bl	800a1f8 <memset>
  if(huart->Instance==USART3)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_UART_MspInit+0xc8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d146      	bne.n	80013c6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001338:	f04f 0202 	mov.w	r2, #2
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fb40 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800135a:	f7ff fee3 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0xcc>)
 8001360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_UART_MspInit+0xcc>)
 8001366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0xcc>)
 8001370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_UART_MspInit+0xcc>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_UART_MspInit+0xcc>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_UART_MspInit+0xcc>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800139a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b4:	2307      	movs	r3, #7
 80013b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_UART_MspInit+0xd0>)
 80013c2:	f000 ff1d 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	37e8      	adds	r7, #232	; 0xe8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004800 	.word	0x40004800
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020c00 	.word	0x58020c00

080013dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0ba      	sub	sp, #232	; 0xe8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	22c0      	movs	r2, #192	; 0xc0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f008 fefb 	bl	800a1f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a38      	ldr	r2, [pc, #224]	; (80014e8 <HAL_PCD_MspInit+0x10c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d169      	bne.n	80014e0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800140c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800141c:	2312      	movs	r3, #18
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001424:	2303      	movs	r3, #3
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800142c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001430:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001432:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001436:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800143c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fac5 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001450:	f7ff fe68 	bl	8001124 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001454:	f001 fa86 	bl	8002964 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_PCD_MspInit+0x110>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_PCD_MspInit+0x110>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_PCD_MspInit+0x110>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001476:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800147a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001490:	230a      	movs	r3, #10
 8001492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800149a:	4619      	mov	r1, r3
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <HAL_PCD_MspInit+0x114>)
 800149e:	f000 feaf 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HAL_PCD_MspInit+0x114>)
 80014be:	f000 fe9f 	bl	8002200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_PCD_MspInit+0x110>)
 80014c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014c8:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_PCD_MspInit+0x110>)
 80014ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_PCD_MspInit+0x110>)
 80014d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	37e8      	adds	r7, #232	; 0xe8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40080000 	.word	0x40080000
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020000 	.word	0x58020000

080014f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM15 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d844      	bhi.n	800158c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM15_IRQn, TickPriority ,0U);
 8001502:	2200      	movs	r2, #0
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	2074      	movs	r0, #116	; 0x74
 8001508:	f000 fa2e 	bl	8001968 <HAL_NVIC_SetPriority>

  /* Enable the TIM15 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800150c:	2074      	movs	r0, #116	; 0x74
 800150e:	f000 fa45 	bl	800199c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <HAL_InitTick+0xb0>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_InitTick+0xb4>)
 800151a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151e:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <HAL_InitTick+0xb4>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_InitTick+0xb4>)
 800152a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800152e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fa05 	bl	8003950 <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001546:	f002 f9ed 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 800154a:	4603      	mov	r3, r0
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_InitTick+0xb8>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	3b01      	subs	r3, #1
 800155c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_InitTick+0xbc>)
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_InitTick+0xc0>)
 8001562:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0xbc>)
 8001566:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156a:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_InitTick+0xbc>)
 800156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001570:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_InitTick+0xbc>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_InitTick+0xbc>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim15) == HAL_OK)
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_InitTick+0xbc>)
 8001580:	f004 f854 	bl	800562c <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <HAL_InitTick+0xa6>
 800158a:	e001      	b.n	8001590 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e005      	b.n	800159c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim15);
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <HAL_InitTick+0xbc>)
 8001592:	f004 f8ad 	bl	80056f0 <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24000008 	.word	0x24000008
 80015a8:	58024400 	.word	0x58024400
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	240007e0 	.word	0x240007e0
 80015b4:	40014000 	.word	0x40014000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM15_IRQHandler+0x10>)
 80015ea:	f004 f8f9 	bl	80057e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	240007e0 	.word	0x240007e0

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f008 fe44 	bl	800a2b4 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24080000 	.word	0x24080000
 8001658:	00000400 	.word	0x00000400
 800165c:	2400082c 	.word	0x2400082c
 8001660:	24005368 	.word	0x24005368

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001668:	f7ff f810 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	; (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f008 fe15 	bl	800a2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff f88f 	bl	80007b8 <main>
  bx  lr
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016a4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80016a8:	0800acec 	.word	0x0800acec
  ldr r2, =_sbss
 80016ac:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80016b0:	24005364 	.word	0x24005364

080016b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC3_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f947 	bl	8001952 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c4:	f001 ff6e 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_Init+0x68>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	4913      	ldr	r1, [pc, #76]	; (8001724 <HAL_Init+0x6c>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_Init+0x6c>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_Init+0x70>)
 80016fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_Init+0x74>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001702:	200f      	movs	r0, #15
 8001704:	f7ff fef6 	bl	80014f4 <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e002      	b.n	8001718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001712:	f7ff fd0d 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	58024400 	.word	0x58024400
 8001724:	0800ac10 	.word	0x0800ac10
 8001728:	24000004 	.word	0x24000004
 800172c:	24000000 	.word	0x24000000

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400000c 	.word	0x2400000c
 8001754:	24000830 	.word	0x24000830

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	24000830 	.word	0x24000830

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2400000c 	.word	0x2400000c

080017b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetREVID+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0c1b      	lsrs	r3, r3, #16
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	5c001000 	.word	0x5c001000

080017d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017e0:	4904      	ldr	r1, [pc, #16]	; (80017f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	58000400 	.word	0x58000400

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <__NVIC_SetPriorityGrouping+0x40>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	4313      	orrs	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x40>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	05fa0000 	.word	0x05fa0000

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff4c 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001976:	f7ff ff63 	bl	8001840 <__NVIC_GetPriorityGrouping>
 800197a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	6978      	ldr	r0, [r7, #20]
 8001982:	f7ff ffb3 	bl	80018ec <NVIC_EncodePriority>
 8001986:	4602      	mov	r2, r0
 8001988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff82 	bl	8001898 <__NVIC_SetPriority>
}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff56 	bl	800185c <__NVIC_EnableIRQ>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0cf      	b.n	8001b6a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2223      	movs	r2, #35	; 0x23
 80019d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fbc5 	bl	800116c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_ETH_Init+0x1bc>)
 80019e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019e8:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <HAL_ETH_Init+0x1bc>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_ETH_Init+0x1bc>)
 80019f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7a1b      	ldrb	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fee1 	bl	80017d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a0e:	e003      	b.n	8001a18 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a14:	f7ff fedc 	bl	80017d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_ETH_Init+0x1c0>)
 8001a1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff fe90 	bl	8001758 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a3a:	e011      	b.n	8001a60 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a3c:	f7ff fe8c 	bl	8001758 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a4a:	d909      	bls.n	8001a60 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	22e0      	movs	r2, #224	; 0xe0
 8001a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e084      	b.n	8001b6a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e4      	bne.n	8001a3c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f886 	bl	8001b84 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a78:	f001 ff0e 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <HAL_ETH_Init+0x1c4>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	0c9a      	lsrs	r2, r3, #18
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fa71 	bl	8001f78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001aa2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	22e0      	movs	r2, #224	; 0xe0
 8001ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e049      	b.n	8001b6a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_ETH_Init+0x1c8>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6952      	ldr	r2, [r2, #20]
 8001aea:	0051      	lsls	r1, r2, #1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001af6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fad9 	bl	80020b2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb1f 	bl	8002144 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	021a      	lsls	r2, r3, #8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	3304      	adds	r3, #4
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	061a      	lsls	r2, r3, #24
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	3302      	adds	r3, #2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b52:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2210      	movs	r2, #16
 8001b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58000400 	.word	0x58000400
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	ffff8001 	.word	0xffff8001

08001b84 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b9e:	f001 fe7b 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 8001ba2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d908      	bls.n	8001bbe <HAL_ETH_SetMDIOClockRange+0x3a>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d804      	bhi.n	8001bbe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e027      	b.n	8001c0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d908      	bls.n	8001bd8 <HAL_ETH_SetMDIOClockRange+0x54>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d204      	bcs.n	8001bd8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e01a      	b.n	8001c0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d303      	bcc.n	8001be8 <HAL_ETH_SetMDIOClockRange+0x64>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d911      	bls.n	8001c0c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d908      	bls.n	8001c02 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d804      	bhi.n	8001c02 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e005      	b.n	8001c0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e000      	b.n	8001c0e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c0c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	01312cff 	.word	0x01312cff
 8001c24:	02160ebf 	.word	0x02160ebf
 8001c28:	03938700 	.word	0x03938700
 8001c2c:	05f5e0ff 	.word	0x05f5e0ff
 8001c30:	08f0d17f 	.word	0x08f0d17f

08001c34 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	7b1b      	ldrb	r3, [r3, #12]
 8001c54:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7b5b      	ldrb	r3, [r3, #13]
 8001c5c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	7b9b      	ldrb	r3, [r3, #14]
 8001c64:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	7bdb      	ldrb	r3, [r3, #15]
 8001c6c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	7c12      	ldrb	r2, [r2, #16]
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d102      	bne.n	8001c7e <ETH_SetMACConfig+0x4a>
 8001c78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c7c:	e000      	b.n	8001c80 <ETH_SetMACConfig+0x4c>
 8001c7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c80:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	7c52      	ldrb	r2, [r2, #17]
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d102      	bne.n	8001c90 <ETH_SetMACConfig+0x5c>
 8001c8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8e:	e000      	b.n	8001c92 <ETH_SetMACConfig+0x5e>
 8001c90:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7c9b      	ldrb	r3, [r3, #18]
 8001c98:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c9a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ca0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001ca6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7f1b      	ldrb	r3, [r3, #28]
 8001cac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001cae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7f5b      	ldrb	r3, [r3, #29]
 8001cb4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	7f92      	ldrb	r2, [r2, #30]
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d102      	bne.n	8001cc6 <ETH_SetMACConfig+0x92>
 8001cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc4:	e000      	b.n	8001cc8 <ETH_SetMACConfig+0x94>
 8001cc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cc8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7fdb      	ldrb	r3, [r3, #31]
 8001cce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cd0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d102      	bne.n	8001ce2 <ETH_SetMACConfig+0xae>
 8001cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce0:	e000      	b.n	8001ce4 <ETH_SetMACConfig+0xb0>
 8001ce2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001ce4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cf2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001cf4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <ETH_SetMACConfig+0x22c>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d32:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d102      	bne.n	8001d46 <ETH_SetMACConfig+0x112>
 8001d40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d44:	e000      	b.n	8001d48 <ETH_SetMACConfig+0x114>
 8001d46:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d48:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <ETH_SetMACConfig+0x230>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <ETH_SetMACConfig+0x234>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d101      	bne.n	8001da6 <ETH_SetMACConfig+0x172>
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	e000      	b.n	8001da8 <ETH_SetMACConfig+0x174>
 8001da6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001da8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001dd0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dd8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f023 0103 	bic.w	r1, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001dfe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	d101      	bne.n	8001e22 <ETH_SetMACConfig+0x1ee>
 8001e1e:	2240      	movs	r2, #64	; 0x40
 8001e20:	e000      	b.n	8001e24 <ETH_SetMACConfig+0x1f0>
 8001e22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	00048083 	.word	0x00048083
 8001e64:	c0f88000 	.word	0xc0f88000
 8001e68:	fffffef0 	.word	0xfffffef0

08001e6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <ETH_SetDMAConfig+0xf8>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e92:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <ETH_SetDMAConfig+0xfc>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ec4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7b5b      	ldrb	r3, [r3, #13]
 8001eca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <ETH_SetDMAConfig+0x100>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7d1b      	ldrb	r3, [r3, #20]
 8001efc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001efe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7f5b      	ldrb	r3, [r3, #29]
 8001f04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <ETH_SetDMAConfig+0x104>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f26:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	7f1b      	ldrb	r3, [r3, #28]
 8001f2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <ETH_SetDMAConfig+0x108>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	ffff87fd 	.word	0xffff87fd
 8001f68:	ffff2ffe 	.word	0xffff2ffe
 8001f6c:	fffec000 	.word	0xfffec000
 8001f70:	ffc0efef 	.word	0xffc0efef
 8001f74:	7fc0ffff 	.word	0x7fc0ffff

08001f78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0a4      	sub	sp, #144	; 0x90
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f86:	2300      	movs	r3, #0
 8001f88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fd0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002010:	2320      	movs	r3, #32
 8002012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002022:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800202c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002034:	2302      	movs	r3, #2
 8002036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002052:	2300      	movs	r3, #0
 8002054:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800205c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002060:	4619      	mov	r1, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fde6 	bl	8001c34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002068:	2301      	movs	r3, #1
 800206a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002082:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002086:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800208c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002090:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002098:	f44f 7306 	mov.w	r3, #536	; 0x218
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fee1 	bl	8001e6c <ETH_SetDMAConfig>
}
 80020aa:	bf00      	nop
 80020ac:	3790      	adds	r7, #144	; 0x90
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e01d      	b.n	80020fc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68d9      	ldr	r1, [r3, #12]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	3206      	adds	r2, #6
 80020f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d9de      	bls.n	80020c0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002110:	461a      	mov	r2, r3
 8002112:	2303      	movs	r3, #3
 8002114:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002134:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e023      	b.n	800219a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	3212      	adds	r2, #18
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d9d8      	bls.n	8002152 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	461a      	mov	r2, r3
 80021c8:	2303      	movs	r3, #3
 80021ca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021da:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800220e:	4b89      	ldr	r3, [pc, #548]	; (8002434 <HAL_GPIO_Init+0x234>)
 8002210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002212:	e194      	b.n	800253e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8186 	beq.w	8002538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d005      	beq.n	8002244 <HAL_GPIO_Init+0x44>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d130      	bne.n	80022a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227a:	2201      	movs	r2, #1
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0201 	and.w	r2, r3, #1
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d017      	beq.n	80022e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d123      	bne.n	8002336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	69b9      	ldr	r1, [r7, #24]
 8002332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0203 	and.w	r2, r3, #3
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80e0 	beq.w	8002538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x238>)
 800237a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800237e:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_GPIO_Init+0x238>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_GPIO_Init+0x238>)
 800238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a29      	ldr	r2, [pc, #164]	; (800243c <HAL_GPIO_Init+0x23c>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <HAL_GPIO_Init+0x240>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d052      	beq.n	8002468 <HAL_GPIO_Init+0x268>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x244>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_GPIO_Init+0x248>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d02b      	beq.n	800242a <HAL_GPIO_Init+0x22a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_GPIO_Init+0x24c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d025      	beq.n	8002426 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_GPIO_Init+0x250>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_GPIO_Init+0x254>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_GPIO_Init+0x258>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x21a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_GPIO_Init+0x25c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x216>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_GPIO_Init+0x260>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x212>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_GPIO_Init+0x264>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x20e>
 800240a:	2309      	movs	r3, #9
 800240c:	e02d      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800240e:	230a      	movs	r3, #10
 8002410:	e02b      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002412:	2308      	movs	r3, #8
 8002414:	e029      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002416:	2307      	movs	r3, #7
 8002418:	e027      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800241a:	2306      	movs	r3, #6
 800241c:	e025      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800241e:	2305      	movs	r3, #5
 8002420:	e023      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002422:	2304      	movs	r3, #4
 8002424:	e021      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002426:	2303      	movs	r3, #3
 8002428:	e01f      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800242a:	2302      	movs	r3, #2
 800242c:	e01d      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800242e:	2301      	movs	r3, #1
 8002430:	e01b      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002432:	bf00      	nop
 8002434:	58000080 	.word	0x58000080
 8002438:	58024400 	.word	0x58024400
 800243c:	58000400 	.word	0x58000400
 8002440:	58020000 	.word	0x58020000
 8002444:	58020400 	.word	0x58020400
 8002448:	58020800 	.word	0x58020800
 800244c:	58020c00 	.word	0x58020c00
 8002450:	58021000 	.word	0x58021000
 8002454:	58021400 	.word	0x58021400
 8002458:	58021800 	.word	0x58021800
 800245c:	58021c00 	.word	0x58021c00
 8002460:	58022000 	.word	0x58022000
 8002464:	58022400 	.word	0x58022400
 8002468:	2300      	movs	r3, #0
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f002 0203 	and.w	r2, r2, #3
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	4093      	lsls	r3, r2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247a:	4938      	ldr	r1, [pc, #224]	; (800255c <HAL_GPIO_Init+0x35c>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f ae63 	bne.w	8002214 <HAL_GPIO_Init+0x14>
  }
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	58000400 	.word	0x58000400

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025cc:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_HSEM_FastTake+0x2c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3320      	adds	r3, #32
 80025d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_HSEM_FastTake+0x30>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	58026400 	.word	0x58026400
 80025f4:	80000300 	.word	0x80000300

080025f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002602:	4906      	ldr	r1, [pc, #24]	; (800261c <HAL_HSEM_Release+0x24>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	58026400 	.word	0x58026400

08002620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b08f      	sub	sp, #60	; 0x3c
 8002624:	af0a      	add	r7, sp, #40	; 0x28
 8002626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e116      	b.n	8002860 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7fe fec5 	bl	80013dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fc87 	bl	8006f84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	687e      	ldr	r6, [r7, #4]
 800267e:	466d      	mov	r5, sp
 8002680:	f106 0410 	add.w	r4, r6, #16
 8002684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002690:	e885 0003 	stmia.w	r5, {r0, r1}
 8002694:	1d33      	adds	r3, r6, #4
 8002696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002698:	6838      	ldr	r0, [r7, #0]
 800269a:	f004 fc05 	bl	8006ea8 <USB_CoreInit>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d7      	b.n	8002860 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fc75 	bl	8006fa6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e04a      	b.n	8002758 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	333d      	adds	r3, #61	; 0x3d
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	333c      	adds	r3, #60	; 0x3c
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	b298      	uxth	r0, r3
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3356      	adds	r3, #86	; 0x56
 80026fe:	4602      	mov	r2, r0
 8002700:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3340      	adds	r3, #64	; 0x40
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3344      	adds	r3, #68	; 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3348      	adds	r3, #72	; 0x48
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	334c      	adds	r3, #76	; 0x4c
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3301      	adds	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d3af      	bcc.n	80026c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e044      	b.n	80027f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3301      	adds	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3b5      	bcc.n	8002768 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	687e      	ldr	r6, [r7, #4]
 8002804:	466d      	mov	r5, sp
 8002806:	f106 0410 	add.w	r4, r6, #16
 800280a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002816:	e885 0003 	stmia.w	r5, {r0, r1}
 800281a:	1d33      	adds	r3, r6, #4
 800281c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281e:	6838      	ldr	r0, [r7, #0]
 8002820:	f004 fc0e 	bl	8007040 <USB_DevInit>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e014      	b.n	8002860 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f80a 	bl	8002868 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f004 fdcc 	bl	80073f6 <USB_DevDisconnect>

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002868 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_PCDEx_ActivateLPM+0x44>)
 8002898:	4313      	orrs	r3, r2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	10000003 	.word	0x10000003

080028b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d00a      	beq.n	80028da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_PWREx_ConfigSupply+0xb0>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e040      	b.n	8002958 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e03e      	b.n	8002958 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_PWREx_ConfigSupply+0xb0>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028e2:	491f      	ldr	r1, [pc, #124]	; (8002960 <HAL_PWREx_ConfigSupply+0xb0>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ea:	f7fe ff35 	bl	8001758 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028f0:	e009      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028f2:	f7fe ff31 	bl	8001758 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002900:	d901      	bls.n	8002906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e028      	b.n	8002958 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_PWREx_ConfigSupply+0xb0>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002912:	d1ee      	bne.n	80028f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b1e      	cmp	r3, #30
 8002918:	d008      	beq.n	800292c <HAL_PWREx_ConfigSupply+0x7c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b2e      	cmp	r3, #46	; 0x2e
 800291e:	d005      	beq.n	800292c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b1d      	cmp	r3, #29
 8002924:	d002      	beq.n	800292c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b2d      	cmp	r3, #45	; 0x2d
 800292a:	d114      	bne.n	8002956 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800292c:	f7fe ff14 	bl	8001758 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002932:	e009      	b.n	8002948 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002934:	f7fe ff10 	bl	8001758 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002942:	d901      	bls.n	8002948 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_PWREx_ConfigSupply+0xb0>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d1ee      	bne.n	8002934 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58024800 	.word	0x58024800

08002964 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	58024800 	.word	0x58024800

08002984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	; 0x30
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f000 bc48 	b.w	8003228 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8088 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a6:	4b99      	ldr	r3, [pc, #612]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b0:	4b96      	ldr	r3, [pc, #600]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x48>
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	2b18      	cmp	r3, #24
 80029c0:	d111      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62>
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d10c      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4b8f      	ldr	r3, [pc, #572]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d06d      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x130>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d169      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f000 bc21 	b.w	8003228 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x7a>
 80029f0:	4b86      	ldr	r3, [pc, #536]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a85      	ldr	r2, [pc, #532]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e02e      	b.n	8002a5c <HAL_RCC_OscConfig+0xd8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x9c>
 8002a06:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a80      	ldr	r2, [pc, #512]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b7e      	ldr	r3, [pc, #504]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7d      	ldr	r2, [pc, #500]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e01d      	b.n	8002a5c <HAL_RCC_OscConfig+0xd8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0xc0>
 8002a2a:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a77      	ldr	r2, [pc, #476]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a74      	ldr	r2, [pc, #464]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xd8>
 8002a44:	4b71      	ldr	r3, [pc, #452]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a70      	ldr	r2, [pc, #448]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b6e      	ldr	r3, [pc, #440]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6d      	ldr	r2, [pc, #436]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fe78 	bl	8001758 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fe74 	bl	8001758 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e3d4      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0xe8>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fe64 	bl	8001758 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fe60 	bl	8001758 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e3c0      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x110>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80ca 	beq.w	8002c58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac4:	4b51      	ldr	r3, [pc, #324]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002acc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ace:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_RCC_OscConfig+0x166>
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2b18      	cmp	r3, #24
 8002ade:	d156      	bne.n	8002b8e <HAL_RCC_OscConfig+0x20a>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d151      	bne.n	8002b8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aea:	4b48      	ldr	r3, [pc, #288]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x17e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e392      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b02:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0219 	bic.w	r2, r3, #25
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	493f      	ldr	r1, [pc, #252]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fe20 	bl	8001758 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7fe fe1c 	bl	8001758 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e37c      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	f7fe fe3d 	bl	80017b8 <HAL_GetREVID>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d817      	bhi.n	8002b78 <HAL_RCC_OscConfig+0x1f4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d108      	bne.n	8002b62 <HAL_RCC_OscConfig+0x1de>
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b58:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b60:	e07a      	b.n	8002c58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	031b      	lsls	r3, r3, #12
 8002b70:	4926      	ldr	r1, [pc, #152]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b76:	e06f      	b.n	8002c58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4921      	ldr	r1, [pc, #132]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	e064      	b.n	8002c58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d047      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0219 	bic.w	r2, r3, #25
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	491a      	ldr	r1, [pc, #104]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fdd6 	bl	8001758 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fdd2 	bl	8001758 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e332      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	f7fe fdf3 	bl	80017b8 <HAL_GetREVID>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d819      	bhi.n	8002c10 <HAL_RCC_OscConfig+0x28c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d108      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x272>
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf2:	6053      	str	r3, [r2, #4]
 8002bf4:	e030      	b.n	8002c58 <HAL_RCC_OscConfig+0x2d4>
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	031b      	lsls	r3, r3, #12
 8002c04:	4901      	ldr	r1, [pc, #4]	; (8002c0c <HAL_RCC_OscConfig+0x288>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
 8002c0a:	e025      	b.n	8002c58 <HAL_RCC_OscConfig+0x2d4>
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	4b9a      	ldr	r3, [pc, #616]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	061b      	lsls	r3, r3, #24
 8002c1e:	4997      	ldr	r1, [pc, #604]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e018      	b.n	8002c58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	4b95      	ldr	r3, [pc, #596]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a94      	ldr	r2, [pc, #592]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fd91 	bl	8001758 <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fd8d 	bl	8001758 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e2ed      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c4c:	4b8b      	ldr	r3, [pc, #556]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a9 	beq.w	8002db8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4b85      	ldr	r3, [pc, #532]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c70:	4b82      	ldr	r3, [pc, #520]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d007      	beq.n	8002c8c <HAL_RCC_OscConfig+0x308>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b18      	cmp	r3, #24
 8002c80:	d13a      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x374>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d135      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c8c:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x320>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e2c1      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ca4:	f7fe fd88 	bl	80017b8 <HAL_GetREVID>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d817      	bhi.n	8002ce2 <HAL_RCC_OscConfig+0x35e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCC_OscConfig+0x348>
 8002cba:	4b70      	ldr	r3, [pc, #448]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cc2:	4a6e      	ldr	r2, [pc, #440]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cc8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cca:	e075      	b.n	8002db8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ccc:	4b6b      	ldr	r3, [pc, #428]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	069b      	lsls	r3, r3, #26
 8002cda:	4968      	ldr	r1, [pc, #416]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce0:	e06a      	b.n	8002db8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ce2:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	4962      	ldr	r1, [pc, #392]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cf6:	e05f      	b.n	8002db8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d042      	beq.n	8002d86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d00:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fd24 	bl	8001758 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d14:	f7fe fd20 	bl	8001758 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e280      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d32:	f7fe fd41 	bl	80017b8 <HAL_GetREVID>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d817      	bhi.n	8002d70 <HAL_RCC_OscConfig+0x3ec>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d108      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3d6>
 8002d48:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d56:	6053      	str	r3, [r2, #4]
 8002d58:	e02e      	b.n	8002db8 <HAL_RCC_OscConfig+0x434>
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	069b      	lsls	r3, r3, #26
 8002d68:	4944      	ldr	r1, [pc, #272]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 8002d6e:	e023      	b.n	8002db8 <HAL_RCC_OscConfig+0x434>
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	493f      	ldr	r1, [pc, #252]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
 8002d84:	e018      	b.n	8002db8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a3c      	ldr	r2, [pc, #240]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fce1 	bl	8001758 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fcdd 	bl	8001758 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e23d      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d036      	beq.n	8002e32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d019      	beq.n	8002e00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fcbe 	bl	8001758 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fcba 	bl	8001758 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e21a      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x45c>
 8002dfe:	e018      	b.n	8002e32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fca4 	bl	8001758 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fca0 	bl	8001758 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e200      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d039      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fc81 	bl	8001758 <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5a:	f7fe fc7d 	bl	8001758 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1dd      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_RCC_OscConfig+0x4f8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x4d6>
 8002e78:	e01b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
 8002e7a:	bf00      	nop
 8002e7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e80:	4b9b      	ldr	r3, [pc, #620]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a9a      	ldr	r2, [pc, #616]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fc64 	bl	8001758 <HAL_GetTick>
 8002e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e94:	f7fe fc60 	bl	8001758 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1c0      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ea6:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8081 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_RCC_OscConfig+0x770>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a8b      	ldr	r2, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x770>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fc44 	bl	8001758 <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7fe fc40 	bl	8001758 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1a0      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee6:	4b83      	ldr	r3, [pc, #524]	; (80030f4 <HAL_RCC_OscConfig+0x770>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x584>
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	e02d      	b.n	8002f64 <HAL_RCC_OscConfig+0x5e0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5a6>
 8002f10:	4b77      	ldr	r3, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a73      	ldr	r2, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f22:	f023 0304 	bic.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e01c      	b.n	8002f64 <HAL_RCC_OscConfig+0x5e0>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c8>
 8002f32:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0x5e0>
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a67      	ldr	r2, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a64      	ldr	r2, [pc, #400]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f5e:	f023 0304 	bic.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fbf4 	bl	8001758 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe fbf0 	bl	8001758 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e14e      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ee      	beq.n	8002f74 <HAL_RCC_OscConfig+0x5f0>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fbde 	bl	8001758 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fbda 	bl	8001758 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e138      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fb6:	4b4e      	ldr	r3, [pc, #312]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ee      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 812d 	beq.w	8003226 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fcc:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fd4:	2b18      	cmp	r3, #24
 8002fd6:	f000 80bd 	beq.w	8003154 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	f040 809e 	bne.w	8003120 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a41      	ldr	r2, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8002fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fbb2 	bl	8001758 <HAL_GetTick>
 8002ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe fbae 	bl	8001758 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e10e      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_OscConfig+0x774>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	430a      	orrs	r2, r1
 800302a:	4931      	ldr	r1, [pc, #196]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 800302c:	4313      	orrs	r3, r2
 800302e:	628b      	str	r3, [r1, #40]	; 0x28
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	3b01      	subs	r3, #1
 8003036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	3b01      	subs	r3, #1
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	b29b      	uxth	r3, r3
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	3b01      	subs	r3, #1
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	3b01      	subs	r3, #1
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003060:	4923      	ldr	r1, [pc, #140]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_RCC_OscConfig+0x778>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800307e:	00d2      	lsls	r2, r2, #3
 8003080:	491b      	ldr	r1, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f023 020c 	bic.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4917      	ldr	r1, [pc, #92]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f023 0202 	bic.w	r2, r3, #2
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	4912      	ldr	r1, [pc, #72]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe fb37 	bl	8001758 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030ec:	e011      	b.n	8003112 <HAL_RCC_OscConfig+0x78e>
 80030ee:	bf00      	nop
 80030f0:	58024400 	.word	0x58024400
 80030f4:	58024800 	.word	0x58024800
 80030f8:	fffffc0c 	.word	0xfffffc0c
 80030fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fb2a 	bl	8001758 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e08a      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x77c>
 800311e:	e082      	b.n	8003226 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a42      	ldr	r2, [pc, #264]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fb14 	bl	8001758 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fb10 	bl	8001758 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e070      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003146:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x7b0>
 8003152:	e068      	b.n	8003226 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b01      	cmp	r3, #1
 8003166:	d031      	beq.n	80031cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0203 	and.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d12a      	bne.n	80031cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d122      	bne.n	80031cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0a5b      	lsrs	r3, r3, #9
 800319a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d108      	bne.n	80031cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0e1b      	lsrs	r3, r3, #24
 80031be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e02b      	b.n	8003228 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	08db      	lsrs	r3, r3, #3
 80031d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d01f      	beq.n	8003226 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031f2:	f7fe fab1 	bl	8001758 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031f8:	bf00      	nop
 80031fa:	f7fe faad 	bl	8001758 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	4293      	cmp	r3, r2
 8003204:	d0f9      	beq.n	80031fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_OscConfig+0x8b0>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	4906      	ldr	r1, [pc, #24]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003216:	4313      	orrs	r3, r2
 8003218:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_RCC_OscConfig+0x8ac>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3730      	adds	r7, #48	; 0x30
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	58024400 	.word	0x58024400
 8003234:	ffff0007 	.word	0xffff0007

08003238 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e19c      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b8a      	ldr	r3, [pc, #552]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b87      	ldr	r3, [pc, #540]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 020f 	bic.w	r2, r3, #15
 8003262:	4985      	ldr	r1, [pc, #532]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b83      	ldr	r3, [pc, #524]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e184      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003294:	429a      	cmp	r2, r3
 8003296:	d908      	bls.n	80032aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003298:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	4975      	ldr	r1, [pc, #468]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	4b70      	ldr	r3, [pc, #448]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d908      	bls.n	80032d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032c6:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	496a      	ldr	r1, [pc, #424]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032f4:	4b61      	ldr	r3, [pc, #388]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	495e      	ldr	r1, [pc, #376]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003302:	4313      	orrs	r3, r2
 8003304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331e:	429a      	cmp	r2, r3
 8003320:	d908      	bls.n	8003334 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003322:	4b56      	ldr	r3, [pc, #344]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4953      	ldr	r1, [pc, #332]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003330:	4313      	orrs	r3, r2
 8003332:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	4b4d      	ldr	r3, [pc, #308]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	429a      	cmp	r2, r3
 800334e:	d908      	bls.n	8003362 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b4a      	ldr	r3, [pc, #296]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f023 020f 	bic.w	r2, r3, #15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4947      	ldr	r1, [pc, #284]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800335e:	4313      	orrs	r3, r2
 8003360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d055      	beq.n	800341a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4940      	ldr	r1, [pc, #256]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800337c:	4313      	orrs	r3, r2
 800337e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003388:	4b3c      	ldr	r3, [pc, #240]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d121      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0f6      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d115      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0ea      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0de      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d6      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4925      	ldr	r1, [pc, #148]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ea:	f7fe f9b5 	bl	8001758 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe f9b1 	bl	8001758 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0be      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	429a      	cmp	r2, r3
 8003418:	d1eb      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	429a      	cmp	r2, r3
 8003434:	d208      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	490e      	ldr	r1, [pc, #56]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003444:	4313      	orrs	r3, r2
 8003446:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d214      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 020f 	bic.w	r2, r3, #15
 800345e:	4906      	ldr	r1, [pc, #24]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e086      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
 8003478:	52002000 	.word	0x52002000
 800347c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003498:	429a      	cmp	r2, r3
 800349a:	d208      	bcs.n	80034ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800349c:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	4939      	ldr	r1, [pc, #228]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d208      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	492e      	ldr	r1, [pc, #184]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d208      	bcs.n	800350a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4922      	ldr	r1, [pc, #136]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003506:	4313      	orrs	r3, r2
 8003508:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003522:	429a      	cmp	r2, r3
 8003524:	d208      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4917      	ldr	r1, [pc, #92]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003534:	4313      	orrs	r3, r2
 8003536:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003538:	f000 f834 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	4912      	ldr	r1, [pc, #72]	; (8003594 <HAL_RCC_ClockConfig+0x35c>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_RCC_ClockConfig+0x35c>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x360>)
 800356e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x364>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x368>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd ffba 	bl	80014f4 <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	0800ac10 	.word	0x0800ac10
 8003598:	24000004 	.word	0x24000004
 800359c:	24000000 	.word	0x24000000
 80035a0:	24000008 	.word	0x24000008

080035a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035aa:	4bb3      	ldr	r3, [pc, #716]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b2:	2b18      	cmp	r3, #24
 80035b4:	f200 8155 	bhi.w	8003862 <HAL_RCC_GetSysClockFreq+0x2be>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	08003625 	.word	0x08003625
 80035c4:	08003863 	.word	0x08003863
 80035c8:	08003863 	.word	0x08003863
 80035cc:	08003863 	.word	0x08003863
 80035d0:	08003863 	.word	0x08003863
 80035d4:	08003863 	.word	0x08003863
 80035d8:	08003863 	.word	0x08003863
 80035dc:	08003863 	.word	0x08003863
 80035e0:	0800364b 	.word	0x0800364b
 80035e4:	08003863 	.word	0x08003863
 80035e8:	08003863 	.word	0x08003863
 80035ec:	08003863 	.word	0x08003863
 80035f0:	08003863 	.word	0x08003863
 80035f4:	08003863 	.word	0x08003863
 80035f8:	08003863 	.word	0x08003863
 80035fc:	08003863 	.word	0x08003863
 8003600:	08003651 	.word	0x08003651
 8003604:	08003863 	.word	0x08003863
 8003608:	08003863 	.word	0x08003863
 800360c:	08003863 	.word	0x08003863
 8003610:	08003863 	.word	0x08003863
 8003614:	08003863 	.word	0x08003863
 8003618:	08003863 	.word	0x08003863
 800361c:	08003863 	.word	0x08003863
 8003620:	08003657 	.word	0x08003657
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003624:	4b94      	ldr	r3, [pc, #592]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003630:	4b91      	ldr	r3, [pc, #580]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	08db      	lsrs	r3, r3, #3
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	4a90      	ldr	r2, [pc, #576]	; (800387c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003642:	e111      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003644:	4b8d      	ldr	r3, [pc, #564]	; (800387c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003646:	61bb      	str	r3, [r7, #24]
      break;
 8003648:	e10e      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800364a:	4b8d      	ldr	r3, [pc, #564]	; (8003880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800364c:	61bb      	str	r3, [r7, #24]
      break;
 800364e:	e10b      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003650:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003652:	61bb      	str	r3, [r7, #24]
      break;
 8003654:	e108      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003660:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800366c:	4b82      	ldr	r3, [pc, #520]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	08db      	lsrs	r3, r3, #3
 800367c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80e1 	beq.w	800385c <HAL_RCC_GetSysClockFreq+0x2b8>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b02      	cmp	r3, #2
 800369e:	f000 8083 	beq.w	80037a8 <HAL_RCC_GetSysClockFreq+0x204>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	f200 80a1 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x248>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x114>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d056      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036b6:	e099      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02d      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	4a6b      	ldr	r2, [pc, #428]	; (800387c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003702:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800371e:	e087      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800388c <HAL_RCC_GetSysClockFreq+0x2e8>
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a02 	vldr	s12, [r7, #8]
 8003746:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003762:	e065      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003890 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b40      	ldr	r3, [pc, #256]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a02 	vldr	s12, [r7, #8]
 800378a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037a6:	e043      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037ea:	e021      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003890 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003812:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800382e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	0a5b      	lsrs	r3, r3, #9
 8003836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383a:	3301      	adds	r3, #1
 800383c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003848:	edd7 6a07 	vldr	s13, [r7, #28]
 800384c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800385a:	e005      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
      break;
 8003860:	e002      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003864:	61bb      	str	r3, [r7, #24]
      break;
 8003866:	bf00      	nop
  }

  return sysclockfreq;
 8003868:	69bb      	ldr	r3, [r7, #24]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
 800387c:	03d09000 	.word	0x03d09000
 8003880:	003d0900 	.word	0x003d0900
 8003884:	007a1200 	.word	0x007a1200
 8003888:	46000000 	.word	0x46000000
 800388c:	4c742400 	.word	0x4c742400
 8003890:	4a742400 	.word	0x4a742400
 8003894:	4af42400 	.word	0x4af42400

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800389e:	f7ff fe81 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490f      	ldr	r1, [pc, #60]	; (80038ec <HAL_RCC_GetHCLKFreq+0x54>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_GetHCLKFreq+0x54>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58024400 	.word	0x58024400
 80038ec:	0800ac10 	.word	0x0800ac10
 80038f0:	24000004 	.word	0x24000004
 80038f4:	24000000 	.word	0x24000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038fc:	f7ff ffcc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	58024400 	.word	0x58024400
 8003920:	0800ac10 	.word	0x0800ac10

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003928:	f7ff ffb6 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4904      	ldr	r1, [pc, #16]	; (800394c <HAL_RCC_GetPCLK2Freq+0x28>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	58024400 	.word	0x58024400
 800394c:	0800ac10 	.word	0x0800ac10

08003950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	223f      	movs	r2, #63	; 0x3f
 800395e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f003 0207 	and.w	r2, r3, #7
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_RCC_GetClockConfig+0x7c>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_GetClockConfig+0x80>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	58024400 	.word	0x58024400
 80039d0:	52002000 	.word	0x52002000

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d8:	b0ca      	sub	sp, #296	; 0x128
 80039da:	af00      	add	r7, sp, #0
 80039dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80039f8:	2500      	movs	r5, #0
 80039fa:	ea54 0305 	orrs.w	r3, r4, r5
 80039fe:	d049      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a0a:	d02f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a10:	d828      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a16:	d01a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1c:	d822      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a26:	d007      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a28:	e01c      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2a:	4bb8      	ldr	r3, [pc, #736]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	4ab7      	ldr	r2, [pc, #732]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a36:	e01a      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fc8f 	bl	8005364 <RCCEx_PLL2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a4c:	e00f      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a52:	3328      	adds	r3, #40	; 0x28
 8003a54:	2102      	movs	r1, #2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fd36 	bl	80054c8 <RCCEx_PLL3_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a62:	e004      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a76:	4ba5      	ldr	r3, [pc, #660]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a84:	4aa1      	ldr	r2, [pc, #644]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6513      	str	r3, [r2, #80]	; 0x50
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003aa0:	f04f 0900 	mov.w	r9, #0
 8003aa4:	ea58 0309 	orrs.w	r3, r8, r9
 8003aa8:	d047      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d82a      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003ad1 	.word	0x08003ad1
 8003ac0:	08003adf 	.word	0x08003adf
 8003ac4:	08003af5 	.word	0x08003af5
 8003ac8:	08003b13 	.word	0x08003b13
 8003acc:	08003b13 	.word	0x08003b13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4b8e      	ldr	r3, [pc, #568]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a8d      	ldr	r2, [pc, #564]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003adc:	e01a      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fc3c 	bl	8005364 <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003af2:	e00f      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	3328      	adds	r3, #40	; 0x28
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fce3 	bl	80054c8 <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b08:	e004      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1c:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	f023 0107 	bic.w	r1, r3, #7
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	4a78      	ldr	r2, [pc, #480]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b30:	e003      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003b46:	f04f 0b00 	mov.w	fp, #0
 8003b4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b4e:	d04c      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5a:	d030      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d829      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b62:	2bc0      	cmp	r3, #192	; 0xc0
 8003b64:	d02d      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b66:	2bc0      	cmp	r3, #192	; 0xc0
 8003b68:	d825      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d018      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d821      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d007      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b7a:	e01c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7c:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4a62      	ldr	r2, [pc, #392]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8e:	3308      	adds	r3, #8
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fbe6 	bl	8005364 <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b9e:	e011      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba4:	3328      	adds	r3, #40	; 0x28
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fc8d 	bl	80054c8 <RCCEx_PLL3_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bcc:	4b4f      	ldr	r3, [pc, #316]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	4a4c      	ldr	r2, [pc, #304]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6513      	str	r3, [r2, #80]	; 0x50
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003bf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003c00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003c04:	460b      	mov	r3, r1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	d053      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c16:	d035      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c1c:	d82e      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c22:	d031      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c28:	d828      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2e:	d01a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c34:	d822      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c3e:	d007      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c40:	e01c      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c42:	4b32      	ldr	r3, [pc, #200]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a31      	ldr	r2, [pc, #196]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c54:	3308      	adds	r3, #8
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fb83 	bl	8005364 <RCCEx_PLL2_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c64:	e011      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	3328      	adds	r3, #40	; 0x28
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fc2a 	bl	80054c8 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c7a:	e006      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c82:	e002      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003cbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d056      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cde:	d038      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ce4:	d831      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ce6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cea:	d034      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003cec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cf0:	d82b      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf6:	d01d      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cfc:	d825      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d08:	e01f      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4ba2      	ldr	r3, [pc, #648]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4aa1      	ldr	r2, [pc, #644]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d22:	3308      	adds	r3, #8
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 fb1c 	bl	8005364 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d32:	e011      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	3328      	adds	r3, #40	; 0x28
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fbc3 	bl	80054c8 <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d60:	4b8e      	ldr	r3, [pc, #568]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d70:	4a8a      	ldr	r2, [pc, #552]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6593      	str	r3, [r2, #88]	; 0x58
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d03a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	2b30      	cmp	r3, #48	; 0x30
 8003da8:	d01f      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003daa:	2b30      	cmp	r3, #48	; 0x30
 8003dac:	d819      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d00c      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d815      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d111      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbe:	4b77      	ldr	r3, [pc, #476]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a76      	ldr	r2, [pc, #472]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dca:	e011      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 fac5 	bl	8005364 <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003de8:	e002      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e0c:	e003      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003e22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	d051      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e40:	d035      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e46:	d82e      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e4c:	d031      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e52:	d828      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d01a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	d822      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d007      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 fa6e 	bl	8005364 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e8e:	e011      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fb15 	bl	80054c8 <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eac:	e002      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6513      	str	r3, [r2, #80]	; 0x50
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ef0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d056      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d033      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0a:	d82c      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f10:	d02f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f16:	d826      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f1c:	d02b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f22:	d820      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f28:	d012      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f2e:	d81a      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d115      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3e:	3308      	adds	r3, #8
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fa0e 	bl	8005364 <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e015      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f54:	3328      	adds	r3, #40	; 0x28
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fab5 	bl	80054c8 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f64:	e00a      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f92:	4a02      	ldr	r2, [pc, #8]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6513      	str	r3, [r2, #80]	; 0x50
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d055      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd4:	d033      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fda:	d82c      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d02f      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d826      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fec:	d02b      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ff2:	d820      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff8:	d012      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffe:	d81a      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004008:	d115      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	3308      	adds	r3, #8
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f001 f9a6 	bl	8005364 <RCCEx_PLL2_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800401e:	e015      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	3328      	adds	r3, #40	; 0x28
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fa4d 	bl	80054c8 <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004034:	e00a      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800403e:	bf00      	nop
 8004040:	e004      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800404a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004054:	4ba3      	ldr	r3, [pc, #652]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004064:	4a9f      	ldr	r2, [pc, #636]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	430b      	orrs	r3, r1
 8004068:	6593      	str	r3, [r2, #88]	; 0x58
 800406a:	e003      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800408a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800408e:	460b      	mov	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	d037      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409e:	d00e      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d816      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ae:	d111      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b0:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4a8b      	ldr	r2, [pc, #556]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040bc:	e00f      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c2:	3308      	adds	r3, #8
 80040c4:	2101      	movs	r1, #1
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 f94c 	bl	8005364 <RCCEx_PLL2_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040d2:	e004      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040e6:	4b7f      	ldr	r3, [pc, #508]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a7b      	ldr	r2, [pc, #492]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6513      	str	r3, [r2, #80]	; 0x50
 80040fa:	e003      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800411a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d039      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	2b03      	cmp	r3, #3
 800412c:	d81c      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800412e:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004134:	08004171 	.word	0x08004171
 8004138:	08004145 	.word	0x08004145
 800413c:	08004153 	.word	0x08004153
 8004140:	08004171 	.word	0x08004171
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004144:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a66      	ldr	r2, [pc, #408]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004150:	e00f      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	3308      	adds	r3, #8
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f902 	bl	8005364 <RCCEx_PLL2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800417a:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	f023 0103 	bic.w	r1, r3, #3
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	4a56      	ldr	r2, [pc, #344]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418a:	430b      	orrs	r3, r1
 800418c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80041a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f000 809f 	beq.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ba:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a4a      	ldr	r2, [pc, #296]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c6:	f7fd fac7 	bl	8001758 <HAL_GetTick>
 80041ca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ce:	e00b      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d0:	f7fd fac2 	bl	8001758 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b64      	cmp	r3, #100	; 0x64
 80041de:	d903      	bls.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e6:	e005      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e8:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ed      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d179      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041fc:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004208:	4053      	eors	r3, r2
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d015      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004212:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a30      	ldr	r2, [pc, #192]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004236:	4a2b      	ldr	r2, [pc, #172]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004238:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424a:	d118      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fa84 	bl	8001758 <HAL_GetTick>
 8004250:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004254:	e00d      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd fa7f 	bl	8001758 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004260:	1ad2      	subs	r2, r2, r3
 8004262:	f241 3388 	movw	r3, #5000	; 0x1388
 8004266:	429a      	cmp	r2, r3
 8004268:	d903      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004270:	e005      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0eb      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004282:	2b00      	cmp	r3, #0
 8004284:	d129      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004296:	d10e      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004298:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042a8:	091a      	lsrs	r2, r3, #4
 80042aa:	4b10      	ldr	r3, [pc, #64]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	4a0d      	ldr	r2, [pc, #52]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6113      	str	r3, [r2, #16]
 80042b4:	e005      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042c0:	6113      	str	r3, [r2, #16]
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d2:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	e00e      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80042e2:	e009      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80042e4:	58024400 	.word	0x58024400
 80042e8:	58024800 	.word	0x58024800
 80042ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 0301 	and.w	r3, r2, #1
 8004304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800430e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	f000 8089 	beq.w	800442c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004320:	2b28      	cmp	r3, #40	; 0x28
 8004322:	d86b      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004405 	.word	0x08004405
 8004330:	080043fd 	.word	0x080043fd
 8004334:	080043fd 	.word	0x080043fd
 8004338:	080043fd 	.word	0x080043fd
 800433c:	080043fd 	.word	0x080043fd
 8004340:	080043fd 	.word	0x080043fd
 8004344:	080043fd 	.word	0x080043fd
 8004348:	080043fd 	.word	0x080043fd
 800434c:	080043d1 	.word	0x080043d1
 8004350:	080043fd 	.word	0x080043fd
 8004354:	080043fd 	.word	0x080043fd
 8004358:	080043fd 	.word	0x080043fd
 800435c:	080043fd 	.word	0x080043fd
 8004360:	080043fd 	.word	0x080043fd
 8004364:	080043fd 	.word	0x080043fd
 8004368:	080043fd 	.word	0x080043fd
 800436c:	080043e7 	.word	0x080043e7
 8004370:	080043fd 	.word	0x080043fd
 8004374:	080043fd 	.word	0x080043fd
 8004378:	080043fd 	.word	0x080043fd
 800437c:	080043fd 	.word	0x080043fd
 8004380:	080043fd 	.word	0x080043fd
 8004384:	080043fd 	.word	0x080043fd
 8004388:	080043fd 	.word	0x080043fd
 800438c:	08004405 	.word	0x08004405
 8004390:	080043fd 	.word	0x080043fd
 8004394:	080043fd 	.word	0x080043fd
 8004398:	080043fd 	.word	0x080043fd
 800439c:	080043fd 	.word	0x080043fd
 80043a0:	080043fd 	.word	0x080043fd
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	08004405 	.word	0x08004405
 80043b0:	080043fd 	.word	0x080043fd
 80043b4:	080043fd 	.word	0x080043fd
 80043b8:	080043fd 	.word	0x080043fd
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	080043fd 	.word	0x080043fd
 80043c4:	080043fd 	.word	0x080043fd
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004405 	.word	0x08004405
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	3308      	adds	r3, #8
 80043d6:	2101      	movs	r1, #1
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 ffc3 	bl	8005364 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043e4:	e00f      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ea:	3328      	adds	r3, #40	; 0x28
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 f86a 	bl	80054c8 <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800440e:	4bbf      	ldr	r3, [pc, #764]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441c:	4abb      	ldr	r2, [pc, #748]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6553      	str	r3, [r2, #84]	; 0x54
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f002 0302 	and.w	r3, r2, #2
 8004438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004442:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d041      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004452:	2b05      	cmp	r3, #5
 8004454:	d824      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004456:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	080044a9 	.word	0x080044a9
 8004460:	08004475 	.word	0x08004475
 8004464:	0800448b 	.word	0x0800448b
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004478:	3308      	adds	r3, #8
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 ff71 	bl	8005364 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448e:	3328      	adds	r3, #40	; 0x28
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f818 	bl	80054c8 <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044b2:	4b96      	ldr	r3, [pc, #600]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f023 0107 	bic.w	r1, r3, #7
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	4a92      	ldr	r2, [pc, #584]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6553      	str	r3, [r2, #84]	; 0x54
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f002 0304 	and.w	r3, r2, #4
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d044      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d825      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004551 	.word	0x08004551
 8004508:	0800451d 	.word	0x0800451d
 800450c:	08004533 	.word	0x08004533
 8004510:	08004551 	.word	0x08004551
 8004514:	08004551 	.word	0x08004551
 8004518:	08004551 	.word	0x08004551
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004520:	3308      	adds	r3, #8
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 ff1d 	bl	8005364 <RCCEx_PLL2_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004530:	e00f      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004536:	3328      	adds	r3, #40	; 0x28
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f000 ffc4 	bl	80054c8 <RCCEx_PLL3_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004546:	e004      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800454e:	e000      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800455a:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f023 0107 	bic.w	r1, r3, #7
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	4a68      	ldr	r2, [pc, #416]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800456c:	430b      	orrs	r3, r1
 800456e:	6593      	str	r3, [r2, #88]	; 0x58
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f002 0320 	and.w	r3, r2, #32
 8004586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d055      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a6:	d033      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ac:	d82c      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d02f      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d826      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045be:	d02b      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80045c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045c4:	d820      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ca:	d012      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d0:	d81a      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d022      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80045d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045da:	d115      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	3308      	adds	r3, #8
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 febd 	bl	8005364 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045f0:	e015      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	3328      	adds	r3, #40	; 0x28
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 ff64 	bl	80054c8 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004606:	e00a      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460e:	e006      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004610:	bf00      	nop
 8004612:	e004      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004614:	bf00      	nop
 8004616:	e002      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800461c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004626:	4b39      	ldr	r3, [pc, #228]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a35      	ldr	r2, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6553      	str	r3, [r2, #84]	; 0x54
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800465c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d058      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004672:	d033      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004674:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004678:	d82c      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d02f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d826      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004686:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800468a:	d02b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800468c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004690:	d820      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004696:	d012      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469c:	d81a      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d022      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d115      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ac:	3308      	adds	r3, #8
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fe57 	bl	8005364 <RCCEx_PLL2_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046bc:	e015      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	3328      	adds	r3, #40	; 0x28
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fefe 	bl	80054c8 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046d2:	e00a      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046da:	e006      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046dc:	bf00      	nop
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e0:	bf00      	nop
 80046e2:	e002      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10e      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004702:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6593      	str	r3, [r2, #88]	; 0x58
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800470a:	bf00      	nop
 800470c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800472e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d055      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004740:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004744:	d033      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004746:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800474a:	d82c      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	d02f      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004756:	d826      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004758:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800475c:	d02b      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800475e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004762:	d820      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004768:	d012      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800476a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476e:	d81a      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d022      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004778:	d115      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477e:	3308      	adds	r3, #8
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fdee 	bl	8005364 <RCCEx_PLL2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800478e:	e015      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004794:	3328      	adds	r3, #40	; 0x28
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fe95 	bl	80054c8 <RCCEx_PLL3_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047a4:	e00a      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ac:	e006      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047ae:	bf00      	nop
 80047b0:	e004      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047b2:	bf00      	nop
 80047b4:	e002      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047b6:	bf00      	nop
 80047b8:	e000      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047c4:	4ba1      	ldr	r3, [pc, #644]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d4:	4a9d      	ldr	r2, [pc, #628]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6593      	str	r3, [r2, #88]	; 0x58
 80047da:	e003      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 0308 	and.w	r3, r2, #8
 80047f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d01e      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004810:	d10c      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	3328      	adds	r3, #40	; 0x28
 8004818:	2102      	movs	r1, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fe54 	bl	80054c8 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800482c:	4b87      	ldr	r3, [pc, #540]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	4a83      	ldr	r2, [pc, #524]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800483e:	430b      	orrs	r3, r1
 8004840:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f002 0310 	and.w	r3, r2, #16
 800484e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004852:	2300      	movs	r3, #0
 8004854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004858:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d01e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	d10c      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	3328      	adds	r3, #40	; 0x28
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fe25 	bl	80054c8 <RCCEx_PLL3_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488a:	4b70      	ldr	r3, [pc, #448]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800489a:	4a6c      	ldr	r2, [pc, #432]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80048ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d03e      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048cc:	d022      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80048ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d2:	d81b      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d00b      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80048de:	e015      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	3308      	adds	r3, #8
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fd3b 	bl	8005364 <RCCEx_PLL2_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048f4:	e00f      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fa:	3328      	adds	r3, #40	; 0x28
 80048fc:	2102      	movs	r1, #2
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fde2 	bl	80054c8 <RCCEx_PLL3_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800491e:	4b4b      	ldr	r3, [pc, #300]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800492e:	4a47      	ldr	r2, [pc, #284]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004930:	430b      	orrs	r3, r1
 8004932:	6593      	str	r3, [r2, #88]	; 0x58
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800493a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800494a:	67bb      	str	r3, [r7, #120]	; 0x78
 800494c:	2300      	movs	r3, #0
 800494e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004950:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004954:	460b      	mov	r3, r1
 8004956:	4313      	orrs	r3, r2
 8004958:	d03b      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004966:	d01f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800496c:	d818      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d003      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004978:	d007      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800497a:	e011      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497c:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004988:	e00f      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498e:	3328      	adds	r3, #40	; 0x28
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fd98 	bl	80054c8 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10b      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b2:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6553      	str	r3, [r2, #84]	; 0x54
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80049de:	673b      	str	r3, [r7, #112]	; 0x70
 80049e0:	2300      	movs	r3, #0
 80049e2:	677b      	str	r3, [r7, #116]	; 0x74
 80049e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80049e8:	460b      	mov	r3, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	d034      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d007      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049fe:	e011      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a0c:	e00e      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a12:	3308      	adds	r3, #8
 8004a14:	2102      	movs	r1, #2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fca4 	bl	8005364 <RCCEx_PLL2_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a22:	e003      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	4a02      	ldr	r2, [pc, #8]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a48:	e006      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a66:	2300      	movs	r3, #0
 8004a68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d00c      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a78:	3328      	adds	r3, #40	; 0x28
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd23 	bl	80054c8 <RCCEx_PLL3_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004aa0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	d038      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab6:	d018      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004abc:	d811      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac2:	d014      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac8:	d80b      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d011      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad4:	4bc3      	ldr	r3, [pc, #780]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4ac2      	ldr	r2, [pc, #776]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae8:	e004      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004afc:	4bb9      	ldr	r3, [pc, #740]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0c:	4ab5      	ldr	r2, [pc, #724]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	6553      	str	r3, [r2, #84]	; 0x54
 8004b12:	e003      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004b32:	460b      	mov	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b38:	4baa      	ldr	r3, [pc, #680]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b46:	4aa7      	ldr	r2, [pc, #668]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004b58:	653b      	str	r3, [r7, #80]	; 0x50
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b68:	4b9e      	ldr	r3, [pc, #632]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b78:	4a9a      	ldr	r2, [pc, #616]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b9a:	4b92      	ldr	r3, [pc, #584]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba8:	4a8e      	ldr	r2, [pc, #568]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004bba:	643b      	str	r3, [r7, #64]	; 0x40
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bca:	4b86      	ldr	r3, [pc, #536]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	4a85      	ldr	r2, [pc, #532]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bd4:	6113      	str	r3, [r2, #16]
 8004bd6:	4b83      	ldr	r3, [pc, #524]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd8:	6919      	ldr	r1, [r3, #16]
 8004bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4313      	orrs	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c04:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c08:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	4a74      	ldr	r2, [pc, #464]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c14:	430b      	orrs	r3, r1
 8004c16:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30
 8004c26:	2300      	movs	r3, #0
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c34:	4b6b      	ldr	r3, [pc, #428]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c44:	4a67      	ldr	r2, [pc, #412]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c46:	430b      	orrs	r3, r1
 8004c48:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	2100      	movs	r1, #0
 8004c54:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004c60:	460b      	mov	r3, r1
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb78 	bl	8005364 <RCCEx_PLL2_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	2100      	movs	r1, #0
 8004c94:	6239      	str	r1, [r7, #32]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d011      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	3308      	adds	r3, #8
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fb58 	bl	8005364 <RCCEx_PLL2_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	61b9      	str	r1, [r7, #24]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	d011      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cea:	3308      	adds	r3, #8
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fb38 	bl	8005364 <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	2100      	movs	r1, #0
 8004d14:	6139      	str	r1, [r7, #16]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d011      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2a:	3328      	adds	r3, #40	; 0x28
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fbca 	bl	80054c8 <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	2100      	movs	r1, #0
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d011      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6a:	3328      	adds	r3, #40	; 0x28
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fbaa 	bl	80054c8 <RCCEx_PLL3_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	2100      	movs	r1, #0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004da0:	460b      	mov	r3, r1
 8004da2:	4313      	orrs	r3, r2
 8004da4:	d011      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004daa:	3328      	adds	r3, #40	; 0x28
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fb8a 	bl	80054c8 <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004dca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de4:	58024400 	.word	0x58024400

08004de8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004dec:	f7fe fd54 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4904      	ldr	r1, [pc, #16]	; (8004e10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	0800ac10 	.word	0x0800ac10

08004e14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e1c:	4ba1      	ldr	r3, [pc, #644]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e26:	4b9f      	ldr	r3, [pc, #636]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	0b1b      	lsrs	r3, r3, #12
 8004e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e32:	4b9c      	ldr	r3, [pc, #624]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e3e:	4b99      	ldr	r3, [pc, #612]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	08db      	lsrs	r3, r3, #3
 8004e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8111 	beq.w	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f000 8083 	beq.w	8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f200 80a1 	bhi.w	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d056      	beq.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e7e:	e099      	b.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e80:	4b88      	ldr	r3, [pc, #544]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02d      	beq.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e8c:	4b85      	ldr	r3, [pc, #532]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	08db      	lsrs	r3, r3, #3
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	4a84      	ldr	r2, [pc, #528]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b7b      	ldr	r3, [pc, #492]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ee6:	e087      	b.n	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b6a      	ldr	r3, [pc, #424]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2a:	e065      	b.n	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b59      	ldr	r3, [pc, #356]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f52:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6e:	e043      	b.n	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b48      	ldr	r3, [pc, #288]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f96:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb2:	e021      	b.n	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc6:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fda:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ff6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ff8:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800500e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005012:	edd7 6a07 	vldr	s13, [r7, #28]
 8005016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501e:	ee17 2a90 	vmov	r2, s15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800503c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005040:	edd7 6a07 	vldr	s13, [r7, #28]
 8005044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800504c:	ee17 2a90 	vmov	r2, s15
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800506a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800506e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507a:	ee17 2a90 	vmov	r2, s15
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005082:	e008      	b.n	8005096 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
}
 8005096:	bf00      	nop
 8005098:	3724      	adds	r7, #36	; 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	58024400 	.word	0x58024400
 80050a8:	03d09000 	.word	0x03d09000
 80050ac:	46000000 	.word	0x46000000
 80050b0:	4c742400 	.word	0x4c742400
 80050b4:	4a742400 	.word	0x4a742400
 80050b8:	4af42400 	.word	0x4af42400

080050bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050c4:	4ba1      	ldr	r3, [pc, #644]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80050ce:	4b9f      	ldr	r3, [pc, #636]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	0d1b      	lsrs	r3, r3, #20
 80050d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050da:	4b9c      	ldr	r3, [pc, #624]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80050e6:	4b99      	ldr	r3, [pc, #612]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8111 	beq.w	800532c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b02      	cmp	r3, #2
 800510e:	f000 8083 	beq.w	8005218 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b02      	cmp	r3, #2
 8005116:	f200 80a1 	bhi.w	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d056      	beq.n	80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005126:	e099      	b.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005128:	4b88      	ldr	r3, [pc, #544]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02d      	beq.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005134:	4b85      	ldr	r3, [pc, #532]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	08db      	lsrs	r3, r3, #3
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	4a84      	ldr	r2, [pc, #528]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b7b      	ldr	r3, [pc, #492]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800518e:	e087      	b.n	80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d2:	e065      	b.n	80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800535c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e6:	4b59      	ldr	r3, [pc, #356]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005216:	e043      	b.n	80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522a:	4b48      	ldr	r3, [pc, #288]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	ed97 6a03 	vldr	s12, [r7, #12]
 800523e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800525a:	e021      	b.n	80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800535c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	4b37      	ldr	r3, [pc, #220]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005282:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800529e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	0a5b      	lsrs	r3, r3, #9
 80052a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80052be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c6:	ee17 2a90 	vmov	r2, s15
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80052ce:	4b1f      	ldr	r3, [pc, #124]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f4:	ee17 2a90 	vmov	r2, s15
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	0e1b      	lsrs	r3, r3, #24
 8005302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005316:	edd7 6a07 	vldr	s13, [r7, #28]
 800531a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005322:	ee17 2a90 	vmov	r2, s15
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800532a:	e008      	b.n	800533e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	609a      	str	r2, [r3, #8]
}
 800533e:	bf00      	nop
 8005340:	3724      	adds	r7, #36	; 0x24
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	58024400 	.word	0x58024400
 8005350:	03d09000 	.word	0x03d09000
 8005354:	46000000 	.word	0x46000000
 8005358:	4c742400 	.word	0x4c742400
 800535c:	4a742400 	.word	0x4a742400
 8005360:	4af42400 	.word	0x4af42400

08005364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005372:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b03      	cmp	r3, #3
 800537c:	d101      	bne.n	8005382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e099      	b.n	80054b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005382:	4b4f      	ldr	r3, [pc, #316]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a4e      	ldr	r2, [pc, #312]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800538c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538e:	f7fc f9e3 	bl	8001758 <HAL_GetTick>
 8005392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005394:	e008      	b.n	80053a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005396:	f7fc f9df 	bl	8001758 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e086      	b.n	80054b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053a8:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f0      	bne.n	8005396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	031b      	lsls	r3, r3, #12
 80053c2:	493f      	ldr	r1, [pc, #252]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	628b      	str	r3, [r1, #40]	; 0x28
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	025b      	lsls	r3, r3, #9
 80053da:	b29b      	uxth	r3, r3
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	041b      	lsls	r3, r3, #16
 80053e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	061b      	lsls	r3, r3, #24
 80053f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053f8:	4931      	ldr	r1, [pc, #196]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053fe:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	492d      	ldr	r1, [pc, #180]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f023 0220 	bic.w	r2, r3, #32
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	4928      	ldr	r1, [pc, #160]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005422:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <RCCEx_PLL2_Config+0x160>)
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	69d2      	ldr	r2, [r2, #28]
 800543a:	00d2      	lsls	r2, r2, #3
 800543c:	4920      	ldr	r1, [pc, #128]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005448:	f043 0310 	orr.w	r3, r3, #16
 800544c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800545a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800545e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005460:	e00f      	b.n	8005482 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d106      	bne.n	8005476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a14      	ldr	r2, [pc, #80]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800546e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005474:	e005      	b.n	8005482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005476:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 800547c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005482:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a0e      	ldr	r2, [pc, #56]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 8005488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800548c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548e:	f7fc f963 	bl	8001758 <HAL_GetTick>
 8005492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005494:	e008      	b.n	80054a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005496:	f7fc f95f 	bl	8001758 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e006      	b.n	80054b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <RCCEx_PLL2_Config+0x15c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	58024400 	.word	0x58024400
 80054c4:	ffff0007 	.word	0xffff0007

080054c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054d6:	4b53      	ldr	r3, [pc, #332]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d101      	bne.n	80054e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e099      	b.n	800561a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054e6:	4b4f      	ldr	r3, [pc, #316]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a4e      	ldr	r2, [pc, #312]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f2:	f7fc f931 	bl	8001758 <HAL_GetTick>
 80054f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054f8:	e008      	b.n	800550c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054fa:	f7fc f92d 	bl	8001758 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e086      	b.n	800561a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800550c:	4b45      	ldr	r3, [pc, #276]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f0      	bne.n	80054fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	051b      	lsls	r3, r3, #20
 8005526:	493f      	ldr	r1, [pc, #252]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005528:	4313      	orrs	r3, r2
 800552a:	628b      	str	r3, [r1, #40]	; 0x28
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	3b01      	subs	r3, #1
 8005532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	3b01      	subs	r3, #1
 800553c:	025b      	lsls	r3, r3, #9
 800553e:	b29b      	uxth	r3, r3
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	3b01      	subs	r3, #1
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	3b01      	subs	r3, #1
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800555c:	4931      	ldr	r1, [pc, #196]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005562:	4b30      	ldr	r3, [pc, #192]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	492d      	ldr	r1, [pc, #180]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005574:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	4928      	ldr	r1, [pc, #160]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005582:	4313      	orrs	r3, r2
 8005584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005586:	4b27      	ldr	r3, [pc, #156]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	4a26      	ldr	r2, [pc, #152]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 8005594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <RCCEx_PLL3_Config+0x160>)
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	69d2      	ldr	r2, [r2, #28]
 800559e:	00d2      	lsls	r2, r2, #3
 80055a0:	4920      	ldr	r1, [pc, #128]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055b8:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055c4:	e00f      	b.n	80055e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d106      	bne.n	80055da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055cc:	4b15      	ldr	r3, [pc, #84]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a14      	ldr	r2, [pc, #80]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055d8:	e005      	b.n	80055e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4a11      	ldr	r2, [pc, #68]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055e6:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a0e      	ldr	r2, [pc, #56]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 80055ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f2:	f7fc f8b1 	bl	8001758 <HAL_GetTick>
 80055f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055f8:	e008      	b.n	800560c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055fa:	f7fc f8ad 	bl	8001758 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e006      	b.n	800561a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <RCCEx_PLL3_Config+0x15c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	ffff0007 	.word	0xffff0007

0800562c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e049      	b.n	80056d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f841 	bl	80056da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f000 fa00 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e054      	b.n	80057b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d022      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d01d      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a22      	ldr	r2, [pc, #136]	; (80057c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d018      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <HAL_TIM_Base_Start_IT+0xdc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00e      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d009      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d115      	bne.n	800579c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <HAL_TIM_Base_Start_IT+0xec>)
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b06      	cmp	r3, #6
 8005780:	d015      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0xbe>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d011      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	e008      	b.n	80057ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40001800 	.word	0x40001800
 80057d8:	40014000 	.word	0x40014000
 80057dc:	00010007 	.word	0x00010007

080057e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f905 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8f7 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f908 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0204 	mvn.w	r2, #4
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8db 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8cd 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8de 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b08      	cmp	r3, #8
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0208 	mvn.w	r2, #8
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f8b1 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8a3 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8b4 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2208      	movs	r2, #8
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f887 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f879 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f88a 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0201 	mvn.w	r2, #1
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb fbce 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f914 	bl	8005bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599e:	d10e      	bne.n	80059be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d107      	bne.n	80059be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f907 	bl	8005bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d10e      	bne.n	80059ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d107      	bne.n	80059ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f838 	bl	8005a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d10e      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d107      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f06f 0220 	mvn.w	r2, #32
 8005a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8c7 	bl	8005ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3d      	ldr	r2, [pc, #244]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3c      	ldr	r2, [pc, #240]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3b      	ldr	r2, [pc, #236]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01f      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d01b      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d017      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00f      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e042      	b.n	8005c78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fb fb7f 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	; 0x24
 8005c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f8ba 	bl	8005d9c <UART_SetConfig>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e022      	b.n	8005c78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fe16 	bl	800686c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fe9d 	bl	80069b0 <UART_CheckIdleState>
 8005c76:	4603      	mov	r3, r0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d17b      	bne.n	8005d92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_UART_Transmit+0x26>
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e074      	b.n	8005d94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2221      	movs	r2, #33	; 0x21
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cba:	f7fb fd4d 	bl	8001758 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd8:	d108      	bne.n	8005cec <HAL_UART_Transmit+0x6c>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e003      	b.n	8005cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cf4:	e030      	b.n	8005d58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2180      	movs	r1, #128	; 0x80
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 feff 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e03d      	b.n	8005d94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3302      	adds	r3, #2
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e007      	b.n	8005d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1c8      	bne.n	8005cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2140      	movs	r1, #64	; 0x40
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fec8 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e006      	b.n	8005d94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b092      	sub	sp, #72	; 0x48
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4bbe      	ldr	r3, [pc, #760]	; (80060c4 <UART_SetConfig+0x328>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4ab3      	ldr	r2, [pc, #716]	; (80060c8 <UART_SetConfig+0x32c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e04:	4313      	orrs	r3, r2
 8005e06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	4baf      	ldr	r3, [pc, #700]	; (80060cc <UART_SetConfig+0x330>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	f023 010f 	bic.w	r1, r3, #15
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4aa6      	ldr	r2, [pc, #664]	; (80060d0 <UART_SetConfig+0x334>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d177      	bne.n	8005f2c <UART_SetConfig+0x190>
 8005e3c:	4ba5      	ldr	r3, [pc, #660]	; (80060d4 <UART_SetConfig+0x338>)
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e44:	2b28      	cmp	r3, #40	; 0x28
 8005e46:	d86d      	bhi.n	8005f24 <UART_SetConfig+0x188>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0xb4>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005ef5 	.word	0x08005ef5
 8005e54:	08005f25 	.word	0x08005f25
 8005e58:	08005f25 	.word	0x08005f25
 8005e5c:	08005f25 	.word	0x08005f25
 8005e60:	08005f25 	.word	0x08005f25
 8005e64:	08005f25 	.word	0x08005f25
 8005e68:	08005f25 	.word	0x08005f25
 8005e6c:	08005f25 	.word	0x08005f25
 8005e70:	08005efd 	.word	0x08005efd
 8005e74:	08005f25 	.word	0x08005f25
 8005e78:	08005f25 	.word	0x08005f25
 8005e7c:	08005f25 	.word	0x08005f25
 8005e80:	08005f25 	.word	0x08005f25
 8005e84:	08005f25 	.word	0x08005f25
 8005e88:	08005f25 	.word	0x08005f25
 8005e8c:	08005f25 	.word	0x08005f25
 8005e90:	08005f05 	.word	0x08005f05
 8005e94:	08005f25 	.word	0x08005f25
 8005e98:	08005f25 	.word	0x08005f25
 8005e9c:	08005f25 	.word	0x08005f25
 8005ea0:	08005f25 	.word	0x08005f25
 8005ea4:	08005f25 	.word	0x08005f25
 8005ea8:	08005f25 	.word	0x08005f25
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f0d 	.word	0x08005f0d
 8005eb4:	08005f25 	.word	0x08005f25
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005f25 	.word	0x08005f25
 8005ec4:	08005f25 	.word	0x08005f25
 8005ec8:	08005f25 	.word	0x08005f25
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005f25 	.word	0x08005f25
 8005edc:	08005f25 	.word	0x08005f25
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f25 	.word	0x08005f25
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e222      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e21e      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e21a      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e216      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e212      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e20e      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e20a      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a69      	ldr	r2, [pc, #420]	; (80060d8 <UART_SetConfig+0x33c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d130      	bne.n	8005f98 <UART_SetConfig+0x1fc>
 8005f36:	4b67      	ldr	r3, [pc, #412]	; (80060d4 <UART_SetConfig+0x338>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d826      	bhi.n	8005f90 <UART_SetConfig+0x1f4>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x1ac>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f61 	.word	0x08005f61
 8005f4c:	08005f69 	.word	0x08005f69
 8005f50:	08005f71 	.word	0x08005f71
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f66:	e1ec      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e1e8      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e1e4      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e1e0      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f80:	2320      	movs	r3, #32
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e1dc      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e1d8      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e1d4      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a4f      	ldr	r2, [pc, #316]	; (80060dc <UART_SetConfig+0x340>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d130      	bne.n	8006004 <UART_SetConfig+0x268>
 8005fa2:	4b4c      	ldr	r3, [pc, #304]	; (80060d4 <UART_SetConfig+0x338>)
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d826      	bhi.n	8005ffc <UART_SetConfig+0x260>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x218>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fdd 	.word	0x08005fdd
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e1b6      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e1b2      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e1ae      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e1aa      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005fec:	2320      	movs	r3, #32
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e1a6      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e1a2      	b.n	8006342 <UART_SetConfig+0x5a6>
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e19e      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a35      	ldr	r2, [pc, #212]	; (80060e0 <UART_SetConfig+0x344>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d130      	bne.n	8006070 <UART_SetConfig+0x2d4>
 800600e:	4b31      	ldr	r3, [pc, #196]	; (80060d4 <UART_SetConfig+0x338>)
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b05      	cmp	r3, #5
 8006018:	d826      	bhi.n	8006068 <UART_SetConfig+0x2cc>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x284>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006039 	.word	0x08006039
 8006024:	08006041 	.word	0x08006041
 8006028:	08006049 	.word	0x08006049
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e180      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e17c      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e178      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e174      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006058:	2320      	movs	r3, #32
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e170      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e16c      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e168      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1b      	ldr	r2, [pc, #108]	; (80060e4 <UART_SetConfig+0x348>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d142      	bne.n	8006100 <UART_SetConfig+0x364>
 800607a:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <UART_SetConfig+0x338>)
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	2b05      	cmp	r3, #5
 8006084:	d838      	bhi.n	80060f8 <UART_SetConfig+0x35c>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <UART_SetConfig+0x2f0>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060a5 	.word	0x080060a5
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060b5 	.word	0x080060b5
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060e9 	.word	0x080060e9
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	2300      	movs	r3, #0
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e14a      	b.n	8006342 <UART_SetConfig+0x5a6>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e146      	b.n	8006342 <UART_SetConfig+0x5a6>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e142      	b.n	8006342 <UART_SetConfig+0x5a6>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e13e      	b.n	8006342 <UART_SetConfig+0x5a6>
 80060c4:	cfff69f3 	.word	0xcfff69f3
 80060c8:	58000c00 	.word	0x58000c00
 80060cc:	11fff4ff 	.word	0x11fff4ff
 80060d0:	40011000 	.word	0x40011000
 80060d4:	58024400 	.word	0x58024400
 80060d8:	40004400 	.word	0x40004400
 80060dc:	40004800 	.word	0x40004800
 80060e0:	40004c00 	.word	0x40004c00
 80060e4:	40005000 	.word	0x40005000
 80060e8:	2320      	movs	r3, #32
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ee:	e128      	b.n	8006342 <UART_SetConfig+0x5a6>
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e124      	b.n	8006342 <UART_SetConfig+0x5a6>
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e120      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4acb      	ldr	r2, [pc, #812]	; (8006434 <UART_SetConfig+0x698>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d176      	bne.n	80061f8 <UART_SetConfig+0x45c>
 800610a:	4bcb      	ldr	r3, [pc, #812]	; (8006438 <UART_SetConfig+0x69c>)
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006112:	2b28      	cmp	r3, #40	; 0x28
 8006114:	d86c      	bhi.n	80061f0 <UART_SetConfig+0x454>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <UART_SetConfig+0x380>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	080061c1 	.word	0x080061c1
 8006120:	080061f1 	.word	0x080061f1
 8006124:	080061f1 	.word	0x080061f1
 8006128:	080061f1 	.word	0x080061f1
 800612c:	080061f1 	.word	0x080061f1
 8006130:	080061f1 	.word	0x080061f1
 8006134:	080061f1 	.word	0x080061f1
 8006138:	080061f1 	.word	0x080061f1
 800613c:	080061c9 	.word	0x080061c9
 8006140:	080061f1 	.word	0x080061f1
 8006144:	080061f1 	.word	0x080061f1
 8006148:	080061f1 	.word	0x080061f1
 800614c:	080061f1 	.word	0x080061f1
 8006150:	080061f1 	.word	0x080061f1
 8006154:	080061f1 	.word	0x080061f1
 8006158:	080061f1 	.word	0x080061f1
 800615c:	080061d1 	.word	0x080061d1
 8006160:	080061f1 	.word	0x080061f1
 8006164:	080061f1 	.word	0x080061f1
 8006168:	080061f1 	.word	0x080061f1
 800616c:	080061f1 	.word	0x080061f1
 8006170:	080061f1 	.word	0x080061f1
 8006174:	080061f1 	.word	0x080061f1
 8006178:	080061f1 	.word	0x080061f1
 800617c:	080061d9 	.word	0x080061d9
 8006180:	080061f1 	.word	0x080061f1
 8006184:	080061f1 	.word	0x080061f1
 8006188:	080061f1 	.word	0x080061f1
 800618c:	080061f1 	.word	0x080061f1
 8006190:	080061f1 	.word	0x080061f1
 8006194:	080061f1 	.word	0x080061f1
 8006198:	080061f1 	.word	0x080061f1
 800619c:	080061e1 	.word	0x080061e1
 80061a0:	080061f1 	.word	0x080061f1
 80061a4:	080061f1 	.word	0x080061f1
 80061a8:	080061f1 	.word	0x080061f1
 80061ac:	080061f1 	.word	0x080061f1
 80061b0:	080061f1 	.word	0x080061f1
 80061b4:	080061f1 	.word	0x080061f1
 80061b8:	080061f1 	.word	0x080061f1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c6:	e0bc      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061c8:	2304      	movs	r3, #4
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ce:	e0b8      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061d0:	2308      	movs	r3, #8
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d6:	e0b4      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061d8:	2310      	movs	r3, #16
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e0b0      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061e0:	2320      	movs	r3, #32
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e0ac      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e0a8      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e0a4      	b.n	8006342 <UART_SetConfig+0x5a6>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a8f      	ldr	r2, [pc, #572]	; (800643c <UART_SetConfig+0x6a0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d130      	bne.n	8006264 <UART_SetConfig+0x4c8>
 8006202:	4b8d      	ldr	r3, [pc, #564]	; (8006438 <UART_SetConfig+0x69c>)
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b05      	cmp	r3, #5
 800620c:	d826      	bhi.n	800625c <UART_SetConfig+0x4c0>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <UART_SetConfig+0x478>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006235 	.word	0x08006235
 800621c:	0800623d 	.word	0x0800623d
 8006220:	08006245 	.word	0x08006245
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006255 	.word	0x08006255
 800622c:	2300      	movs	r3, #0
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e086      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e082      	b.n	8006342 <UART_SetConfig+0x5a6>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e07e      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e07a      	b.n	8006342 <UART_SetConfig+0x5a6>
 800624c:	2320      	movs	r3, #32
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006252:	e076      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006254:	2340      	movs	r3, #64	; 0x40
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625a:	e072      	b.n	8006342 <UART_SetConfig+0x5a6>
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006262:	e06e      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a75      	ldr	r2, [pc, #468]	; (8006440 <UART_SetConfig+0x6a4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d130      	bne.n	80062d0 <UART_SetConfig+0x534>
 800626e:	4b72      	ldr	r3, [pc, #456]	; (8006438 <UART_SetConfig+0x69c>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	2b05      	cmp	r3, #5
 8006278:	d826      	bhi.n	80062c8 <UART_SetConfig+0x52c>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <UART_SetConfig+0x4e4>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006299 	.word	0x08006299
 8006284:	080062a1 	.word	0x080062a1
 8006288:	080062a9 	.word	0x080062a9
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062c1 	.word	0x080062c1
 8006298:	2300      	movs	r3, #0
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e050      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062a0:	2304      	movs	r3, #4
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e04c      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062a8:	2308      	movs	r3, #8
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e048      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062b0:	2310      	movs	r3, #16
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e044      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062b8:	2320      	movs	r3, #32
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e040      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062c0:	2340      	movs	r3, #64	; 0x40
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e03c      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ce:	e038      	b.n	8006342 <UART_SetConfig+0x5a6>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a5b      	ldr	r2, [pc, #364]	; (8006444 <UART_SetConfig+0x6a8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d130      	bne.n	800633c <UART_SetConfig+0x5a0>
 80062da:	4b57      	ldr	r3, [pc, #348]	; (8006438 <UART_SetConfig+0x69c>)
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d826      	bhi.n	8006334 <UART_SetConfig+0x598>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <UART_SetConfig+0x550>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006305 	.word	0x08006305
 80062f0:	0800630d 	.word	0x0800630d
 80062f4:	08006315 	.word	0x08006315
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800632d 	.word	0x0800632d
 8006304:	2302      	movs	r3, #2
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e01a      	b.n	8006342 <UART_SetConfig+0x5a6>
 800630c:	2304      	movs	r3, #4
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e016      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006314:	2308      	movs	r3, #8
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e012      	b.n	8006342 <UART_SetConfig+0x5a6>
 800631c:	2310      	movs	r3, #16
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e00e      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006324:	2320      	movs	r3, #32
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e00a      	b.n	8006342 <UART_SetConfig+0x5a6>
 800632c:	2340      	movs	r3, #64	; 0x40
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e006      	b.n	8006342 <UART_SetConfig+0x5a6>
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e002      	b.n	8006342 <UART_SetConfig+0x5a6>
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a3f      	ldr	r2, [pc, #252]	; (8006444 <UART_SetConfig+0x6a8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	f040 80f8 	bne.w	800653e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800634e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006352:	2b20      	cmp	r3, #32
 8006354:	dc46      	bgt.n	80063e4 <UART_SetConfig+0x648>
 8006356:	2b02      	cmp	r3, #2
 8006358:	f2c0 8082 	blt.w	8006460 <UART_SetConfig+0x6c4>
 800635c:	3b02      	subs	r3, #2
 800635e:	2b1e      	cmp	r3, #30
 8006360:	d87e      	bhi.n	8006460 <UART_SetConfig+0x6c4>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x5cc>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063eb 	.word	0x080063eb
 800636c:	08006461 	.word	0x08006461
 8006370:	080063f3 	.word	0x080063f3
 8006374:	08006461 	.word	0x08006461
 8006378:	08006461 	.word	0x08006461
 800637c:	08006461 	.word	0x08006461
 8006380:	08006403 	.word	0x08006403
 8006384:	08006461 	.word	0x08006461
 8006388:	08006461 	.word	0x08006461
 800638c:	08006461 	.word	0x08006461
 8006390:	08006461 	.word	0x08006461
 8006394:	08006461 	.word	0x08006461
 8006398:	08006461 	.word	0x08006461
 800639c:	08006461 	.word	0x08006461
 80063a0:	08006413 	.word	0x08006413
 80063a4:	08006461 	.word	0x08006461
 80063a8:	08006461 	.word	0x08006461
 80063ac:	08006461 	.word	0x08006461
 80063b0:	08006461 	.word	0x08006461
 80063b4:	08006461 	.word	0x08006461
 80063b8:	08006461 	.word	0x08006461
 80063bc:	08006461 	.word	0x08006461
 80063c0:	08006461 	.word	0x08006461
 80063c4:	08006461 	.word	0x08006461
 80063c8:	08006461 	.word	0x08006461
 80063cc:	08006461 	.word	0x08006461
 80063d0:	08006461 	.word	0x08006461
 80063d4:	08006461 	.word	0x08006461
 80063d8:	08006461 	.word	0x08006461
 80063dc:	08006461 	.word	0x08006461
 80063e0:	08006453 	.word	0x08006453
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d037      	beq.n	8006458 <UART_SetConfig+0x6bc>
 80063e8:	e03a      	b.n	8006460 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063ea:	f7fe fcfd 	bl	8004de8 <HAL_RCCEx_GetD3PCLK1Freq>
 80063ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f0:	e03c      	b.n	800646c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fd0c 	bl	8004e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006400:	e034      	b.n	800646c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006402:	f107 0318 	add.w	r3, r7, #24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fe58 	bl	80050bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006410:	e02c      	b.n	800646c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <UART_SetConfig+0x69c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <UART_SetConfig+0x69c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	08db      	lsrs	r3, r3, #3
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	4a07      	ldr	r2, [pc, #28]	; (8006448 <UART_SetConfig+0x6ac>)
 800642a:	fa22 f303 	lsr.w	r3, r2, r3
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006430:	e01c      	b.n	800646c <UART_SetConfig+0x6d0>
 8006432:	bf00      	nop
 8006434:	40011400 	.word	0x40011400
 8006438:	58024400 	.word	0x58024400
 800643c:	40007800 	.word	0x40007800
 8006440:	40007c00 	.word	0x40007c00
 8006444:	58000c00 	.word	0x58000c00
 8006448:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800644c:	4b9d      	ldr	r3, [pc, #628]	; (80066c4 <UART_SetConfig+0x928>)
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006450:	e00c      	b.n	800646c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006452:	4b9d      	ldr	r3, [pc, #628]	; (80066c8 <UART_SetConfig+0x92c>)
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006456:	e009      	b.n	800646c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800645e:	e005      	b.n	800646c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800646a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800646c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 81de 	beq.w	8006830 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	4a94      	ldr	r2, [pc, #592]	; (80066cc <UART_SetConfig+0x930>)
 800647a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647e:	461a      	mov	r2, r3
 8006480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006482:	fbb3 f3f2 	udiv	r3, r3, r2
 8006486:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	4413      	add	r3, r2
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	429a      	cmp	r2, r3
 8006496:	d305      	bcc.n	80064a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800649e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064aa:	e1c1      	b.n	8006830 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ae:	2200      	movs	r2, #0
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	60fa      	str	r2, [r7, #12]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	4a84      	ldr	r2, [pc, #528]	; (80066cc <UART_SetConfig+0x930>)
 80064ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2200      	movs	r2, #0
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064ce:	f7f9 ff5f 	bl	8000390 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	020b      	lsls	r3, r1, #8
 80064e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064e8:	0202      	lsls	r2, r0, #8
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	6849      	ldr	r1, [r1, #4]
 80064ee:	0849      	lsrs	r1, r1, #1
 80064f0:	2000      	movs	r0, #0
 80064f2:	460c      	mov	r4, r1
 80064f4:	4605      	mov	r5, r0
 80064f6:	eb12 0804 	adds.w	r8, r2, r4
 80064fa:	eb43 0905 	adc.w	r9, r3, r5
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	469a      	mov	sl, r3
 8006506:	4693      	mov	fp, r2
 8006508:	4652      	mov	r2, sl
 800650a:	465b      	mov	r3, fp
 800650c:	4640      	mov	r0, r8
 800650e:	4649      	mov	r1, r9
 8006510:	f7f9 ff3e 	bl	8000390 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006522:	d308      	bcc.n	8006536 <UART_SetConfig+0x79a>
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652a:	d204      	bcs.n	8006536 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	e17c      	b.n	8006830 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800653c:	e178      	b.n	8006830 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006546:	f040 80c5 	bne.w	80066d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800654a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800654e:	2b20      	cmp	r3, #32
 8006550:	dc48      	bgt.n	80065e4 <UART_SetConfig+0x848>
 8006552:	2b00      	cmp	r3, #0
 8006554:	db7b      	blt.n	800664e <UART_SetConfig+0x8b2>
 8006556:	2b20      	cmp	r3, #32
 8006558:	d879      	bhi.n	800664e <UART_SetConfig+0x8b2>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x7c4>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	080065eb 	.word	0x080065eb
 8006564:	080065f3 	.word	0x080065f3
 8006568:	0800664f 	.word	0x0800664f
 800656c:	0800664f 	.word	0x0800664f
 8006570:	080065fb 	.word	0x080065fb
 8006574:	0800664f 	.word	0x0800664f
 8006578:	0800664f 	.word	0x0800664f
 800657c:	0800664f 	.word	0x0800664f
 8006580:	0800660b 	.word	0x0800660b
 8006584:	0800664f 	.word	0x0800664f
 8006588:	0800664f 	.word	0x0800664f
 800658c:	0800664f 	.word	0x0800664f
 8006590:	0800664f 	.word	0x0800664f
 8006594:	0800664f 	.word	0x0800664f
 8006598:	0800664f 	.word	0x0800664f
 800659c:	0800664f 	.word	0x0800664f
 80065a0:	0800661b 	.word	0x0800661b
 80065a4:	0800664f 	.word	0x0800664f
 80065a8:	0800664f 	.word	0x0800664f
 80065ac:	0800664f 	.word	0x0800664f
 80065b0:	0800664f 	.word	0x0800664f
 80065b4:	0800664f 	.word	0x0800664f
 80065b8:	0800664f 	.word	0x0800664f
 80065bc:	0800664f 	.word	0x0800664f
 80065c0:	0800664f 	.word	0x0800664f
 80065c4:	0800664f 	.word	0x0800664f
 80065c8:	0800664f 	.word	0x0800664f
 80065cc:	0800664f 	.word	0x0800664f
 80065d0:	0800664f 	.word	0x0800664f
 80065d4:	0800664f 	.word	0x0800664f
 80065d8:	0800664f 	.word	0x0800664f
 80065dc:	0800664f 	.word	0x0800664f
 80065e0:	08006641 	.word	0x08006641
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d02e      	beq.n	8006646 <UART_SetConfig+0x8aa>
 80065e8:	e031      	b.n	800664e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fd f985 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 80065ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065f0:	e033      	b.n	800665a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f2:	f7fd f997 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 80065f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065f8:	e02f      	b.n	800665a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fc08 	bl	8004e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006608:	e027      	b.n	800665a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660a:	f107 0318 	add.w	r3, r7, #24
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fd54 	bl	80050bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006618:	e01f      	b.n	800665a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800661a:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <UART_SetConfig+0x934>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006626:	4b2a      	ldr	r3, [pc, #168]	; (80066d0 <UART_SetConfig+0x934>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	08db      	lsrs	r3, r3, #3
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <UART_SetConfig+0x928>)
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006638:	e00f      	b.n	800665a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800663a:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <UART_SetConfig+0x928>)
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800663e:	e00c      	b.n	800665a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006640:	4b21      	ldr	r3, [pc, #132]	; (80066c8 <UART_SetConfig+0x92c>)
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006644:	e009      	b.n	800665a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664c:	e005      	b.n	800665a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800665a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80e7 	beq.w	8006830 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	4a19      	ldr	r2, [pc, #100]	; (80066cc <UART_SetConfig+0x930>)
 8006668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800666c:	461a      	mov	r2, r3
 800666e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006670:	fbb3 f3f2 	udiv	r3, r3, r2
 8006674:	005a      	lsls	r2, r3, #1
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	441a      	add	r2, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	fbb2 f3f3 	udiv	r3, r2, r3
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	2b0f      	cmp	r3, #15
 800668c:	d916      	bls.n	80066bc <UART_SetConfig+0x920>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006694:	d212      	bcs.n	80066bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	b29b      	uxth	r3, r3
 800669a:	f023 030f 	bic.w	r3, r3, #15
 800669e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066ae:	4313      	orrs	r3, r2
 80066b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066b8:	60da      	str	r2, [r3, #12]
 80066ba:	e0b9      	b.n	8006830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066c2:	e0b5      	b.n	8006830 <UART_SetConfig+0xa94>
 80066c4:	03d09000 	.word	0x03d09000
 80066c8:	003d0900 	.word	0x003d0900
 80066cc:	0800ac80 	.word	0x0800ac80
 80066d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066d8:	2b20      	cmp	r3, #32
 80066da:	dc49      	bgt.n	8006770 <UART_SetConfig+0x9d4>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db7c      	blt.n	80067da <UART_SetConfig+0xa3e>
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d87a      	bhi.n	80067da <UART_SetConfig+0xa3e>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x950>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006777 	.word	0x08006777
 80066f0:	0800677f 	.word	0x0800677f
 80066f4:	080067db 	.word	0x080067db
 80066f8:	080067db 	.word	0x080067db
 80066fc:	08006787 	.word	0x08006787
 8006700:	080067db 	.word	0x080067db
 8006704:	080067db 	.word	0x080067db
 8006708:	080067db 	.word	0x080067db
 800670c:	08006797 	.word	0x08006797
 8006710:	080067db 	.word	0x080067db
 8006714:	080067db 	.word	0x080067db
 8006718:	080067db 	.word	0x080067db
 800671c:	080067db 	.word	0x080067db
 8006720:	080067db 	.word	0x080067db
 8006724:	080067db 	.word	0x080067db
 8006728:	080067db 	.word	0x080067db
 800672c:	080067a7 	.word	0x080067a7
 8006730:	080067db 	.word	0x080067db
 8006734:	080067db 	.word	0x080067db
 8006738:	080067db 	.word	0x080067db
 800673c:	080067db 	.word	0x080067db
 8006740:	080067db 	.word	0x080067db
 8006744:	080067db 	.word	0x080067db
 8006748:	080067db 	.word	0x080067db
 800674c:	080067db 	.word	0x080067db
 8006750:	080067db 	.word	0x080067db
 8006754:	080067db 	.word	0x080067db
 8006758:	080067db 	.word	0x080067db
 800675c:	080067db 	.word	0x080067db
 8006760:	080067db 	.word	0x080067db
 8006764:	080067db 	.word	0x080067db
 8006768:	080067db 	.word	0x080067db
 800676c:	080067cd 	.word	0x080067cd
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d02e      	beq.n	80067d2 <UART_SetConfig+0xa36>
 8006774:	e031      	b.n	80067da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006776:	f7fd f8bf 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 800677a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800677c:	e033      	b.n	80067e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800677e:	f7fd f8d1 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8006782:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006784:	e02f      	b.n	80067e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fb42 	bl	8004e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006794:	e027      	b.n	80067e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006796:	f107 0318 	add.w	r3, r7, #24
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc8e 	bl	80050bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a4:	e01f      	b.n	80067e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a6:	4b2d      	ldr	r3, [pc, #180]	; (800685c <UART_SetConfig+0xac0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067b2:	4b2a      	ldr	r3, [pc, #168]	; (800685c <UART_SetConfig+0xac0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	08db      	lsrs	r3, r3, #3
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	4a28      	ldr	r2, [pc, #160]	; (8006860 <UART_SetConfig+0xac4>)
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067c4:	e00f      	b.n	80067e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067c6:	4b26      	ldr	r3, [pc, #152]	; (8006860 <UART_SetConfig+0xac4>)
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ca:	e00c      	b.n	80067e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067cc:	4b25      	ldr	r3, [pc, #148]	; (8006864 <UART_SetConfig+0xac8>)
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d0:	e009      	b.n	80067e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d8:	e005      	b.n	80067e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067e4:	bf00      	nop
    }

    if (pclk != 0U)
 80067e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d021      	beq.n	8006830 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <UART_SetConfig+0xacc>)
 80067f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f6:	461a      	mov	r2, r3
 80067f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	441a      	add	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d909      	bls.n	800682a <UART_SetConfig+0xa8e>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d205      	bcs.n	800682a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	b29a      	uxth	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60da      	str	r2, [r3, #12]
 8006828:	e002      	b.n	8006830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2201      	movs	r2, #1
 8006834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2201      	movs	r2, #1
 800683c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2200      	movs	r2, #0
 8006844:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800684c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006850:	4618      	mov	r0, r3
 8006852:	3748      	adds	r7, #72	; 0x48
 8006854:	46bd      	mov	sp, r7
 8006856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685a:	bf00      	nop
 800685c:	58024400 	.word	0x58024400
 8006860:	03d09000 	.word	0x03d09000
 8006864:	003d0900 	.word	0x003d0900
 8006868:	0800ac80 	.word	0x0800ac80

0800686c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01a      	beq.n	8006982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696a:	d10a      	bne.n	8006982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b098      	sub	sp, #96	; 0x60
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069c0:	f7fa feca 	bl	8001758 <HAL_GetTick>
 80069c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d12f      	bne.n	8006a34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f88e 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d022      	beq.n	8006a34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a02:	653b      	str	r3, [r7, #80]	; 0x50
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e6      	bne.n	80069ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e063      	b.n	8006afc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d149      	bne.n	8006ad6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f857 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d03c      	beq.n	8006ad6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e6      	bne.n	8006a5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aae:	61fa      	str	r2, [r7, #28]
 8006ab0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69b9      	ldr	r1, [r7, #24]
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	617b      	str	r3, [r7, #20]
   return(result);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e012      	b.n	8006afc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3758      	adds	r7, #88	; 0x58
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b14:	e049      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d045      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	f7fa fe1b 	bl	8001758 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e048      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d031      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d110      	bne.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f839 	bl	8006bd4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2208      	movs	r2, #8
 8006b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e029      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b84:	d111      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f81f 	bl	8006bd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e00f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d0a6      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b095      	sub	sp, #84	; 0x54
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8006bfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e6      	bne.n	8006bdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <UART_EndRxTransfer+0xc8>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e5      	bne.n	8006c0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d118      	bne.n	8006c7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f023 0310 	bic.w	r3, r3, #16
 8006c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6979      	ldr	r1, [r7, #20]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	613b      	str	r3, [r7, #16]
   return(result);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e6      	bne.n	8006c4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c90:	bf00      	nop
 8006c92:	3754      	adds	r7, #84	; 0x54
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	effffffe 	.word	0xeffffffe

08006ca0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e027      	b.n	8006d06 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ce4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e02d      	b.n	8006d86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2224      	movs	r2, #36	; 0x24
 8006d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0201 	bic.w	r2, r2, #1
 8006d50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f850 	bl	8006e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e02d      	b.n	8006e02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2224      	movs	r2, #36	; 0x24
 8006db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f812 	bl	8006e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e2c:	e031      	b.n	8006e92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e2e:	2310      	movs	r3, #16
 8006e30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e32:	2310      	movs	r3, #16
 8006e34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	0e5b      	lsrs	r3, r3, #25
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	0f5b      	lsrs	r3, r3, #29
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	7b3a      	ldrb	r2, [r7, #12]
 8006e5a:	4911      	ldr	r1, [pc, #68]	; (8006ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8006e5c:	5c8a      	ldrb	r2, [r1, r2]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e62:	7b3a      	ldrb	r2, [r7, #12]
 8006e64:	490f      	ldr	r1, [pc, #60]	; (8006ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8006e66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	7b7a      	ldrb	r2, [r7, #13]
 8006e78:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8006e7a:	5c8a      	ldrb	r2, [r1, r2]
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e80:	7b7a      	ldrb	r2, [r7, #13]
 8006e82:	4908      	ldr	r1, [pc, #32]	; (8006ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8006e84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	0800ac98 	.word	0x0800ac98
 8006ea4:	0800aca0 	.word	0x0800aca0

08006ea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	f107 001c 	add.w	r0, r7, #28
 8006eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d120      	bne.n	8006f02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	4b2a      	ldr	r3, [pc, #168]	; (8006f7c <USB_CoreInit+0xd4>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d105      	bne.n	8006ef6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 faac 	bl	8007454 <USB_CoreReset>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	e01a      	b.n	8006f38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 faa0 	bl	8007454 <USB_CoreReset>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
 8006f2a:	e005      	b.n	8006f38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d116      	bne.n	8006f6c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <USB_CoreInit+0xd8>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f043 0206 	orr.w	r2, r3, #6
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f043 0220 	orr.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f78:	b004      	add	sp, #16
 8006f7a:	4770      	bx	lr
 8006f7c:	ffbdffbf 	.word	0xffbdffbf
 8006f80:	03ee0000 	.word	0x03ee0000

08006f84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f023 0201 	bic.w	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d115      	bne.n	8006ff4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	f7fa fbcb 	bl	8001770 <HAL_Delay>
      ms++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa29 	bl	8007438 <USB_GetMode>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d01e      	beq.n	800702a <USB_SetCurrentMode+0x84>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b31      	cmp	r3, #49	; 0x31
 8006ff0:	d9f0      	bls.n	8006fd4 <USB_SetCurrentMode+0x2e>
 8006ff2:	e01a      	b.n	800702a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d115      	bne.n	8007026 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007006:	2001      	movs	r0, #1
 8007008:	f7fa fbb2 	bl	8001770 <HAL_Delay>
      ms++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa10 	bl	8007438 <USB_GetMode>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <USB_SetCurrentMode+0x84>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b31      	cmp	r3, #49	; 0x31
 8007022:	d9f0      	bls.n	8007006 <USB_SetCurrentMode+0x60>
 8007024:	e001      	b.n	800702a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e005      	b.n	8007036 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b32      	cmp	r3, #50	; 0x32
 800702e:	d101      	bne.n	8007034 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007040:	b084      	sub	sp, #16
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800704e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	e009      	b.n	8007074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	3340      	adds	r3, #64	; 0x40
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	2200      	movs	r2, #0
 800706c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	3301      	adds	r3, #1
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b0e      	cmp	r3, #14
 8007078:	d9f2      	bls.n	8007060 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800707a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d11c      	bne.n	80070ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800708e:	f043 0302 	orr.w	r3, r3, #2
 8007092:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e005      	b.n	80070c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070cc:	461a      	mov	r2, r3
 80070ce:	2300      	movs	r3, #0
 80070d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d8:	4619      	mov	r1, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e0:	461a      	mov	r2, r3
 80070e2:	680b      	ldr	r3, [r1, #0]
 80070e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10c      	bne.n	8007106 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070f2:	2100      	movs	r1, #0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f965 	bl	80073c4 <USB_SetDevSpeed>
 80070fa:	e008      	b.n	800710e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070fc:	2101      	movs	r1, #1
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f960 	bl	80073c4 <USB_SetDevSpeed>
 8007104:	e003      	b.n	800710e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007106:	2103      	movs	r1, #3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f95b 	bl	80073c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800710e:	2110      	movs	r1, #16
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f8f3 	bl	80072fc <USB_FlushTxFifo>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f91f 	bl	8007364 <USB_FlushRxFifo>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	461a      	mov	r2, r3
 8007138:	2300      	movs	r3, #0
 800713a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007142:	461a      	mov	r2, r3
 8007144:	2300      	movs	r3, #0
 8007146:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	461a      	mov	r2, r3
 8007150:	2300      	movs	r3, #0
 8007152:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	e043      	b.n	80071e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007170:	d118      	bne.n	80071a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	461a      	mov	r2, r3
 8007186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	e013      	b.n	80071b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719a:	461a      	mov	r2, r3
 800719c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e008      	b.n	80071b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	461a      	mov	r2, r3
 80071b2:	2300      	movs	r3, #0
 80071b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	461a      	mov	r2, r3
 80071c4:	2300      	movs	r3, #0
 80071c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	461a      	mov	r2, r3
 80071d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	3301      	adds	r3, #1
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d3b7      	bcc.n	800715a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	e043      	b.n	8007278 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007206:	d118      	bne.n	800723a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721a:	461a      	mov	r2, r3
 800721c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	e013      	b.n	800724c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	461a      	mov	r2, r3
 8007232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e008      	b.n	800724c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	461a      	mov	r2, r3
 8007248:	2300      	movs	r3, #0
 800724a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007258:	461a      	mov	r2, r3
 800725a:	2300      	movs	r3, #0
 800725c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726a:	461a      	mov	r2, r3
 800726c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3301      	adds	r3, #1
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	429a      	cmp	r2, r3
 800727e:	d3b7      	bcc.n	80071f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800728e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007292:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f043 0210 	orr.w	r2, r3, #16
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <USB_DevInit+0x2b4>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d105      	bne.n	80072e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699a      	ldr	r2, [r3, #24]
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <USB_DevInit+0x2b8>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072f0:	b004      	add	sp, #16
 80072f2:	4770      	bx	lr
 80072f4:	803c3800 	.word	0x803c3800
 80072f8:	40000004 	.word	0x40000004

080072fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4a13      	ldr	r2, [pc, #76]	; (8007360 <USB_FlushTxFifo+0x64>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d901      	bls.n	800731c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e01b      	b.n	8007354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	daf2      	bge.n	800730a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	019b      	lsls	r3, r3, #6
 800732c:	f043 0220 	orr.w	r2, r3, #32
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a08      	ldr	r2, [pc, #32]	; (8007360 <USB_FlushTxFifo+0x64>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d901      	bls.n	8007346 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e006      	b.n	8007354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b20      	cmp	r3, #32
 8007350:	d0f0      	beq.n	8007334 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	00030d40 	.word	0x00030d40

08007364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <USB_FlushRxFifo+0x5c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d901      	bls.n	8007382 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e018      	b.n	80073b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	daf2      	bge.n	8007370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2210      	movs	r2, #16
 8007392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a08      	ldr	r2, [pc, #32]	; (80073c0 <USB_FlushRxFifo+0x5c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d901      	bls.n	80073a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e006      	b.n	80073b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d0f0      	beq.n	8007394 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	00030d40 	.word	0x00030d40

080073c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073e4:	4313      	orrs	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007410:	f023 0303 	bic.w	r3, r3, #3
 8007414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007424:	f043 0302 	orr.w	r3, r3, #2
 8007428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0301 	and.w	r3, r3, #1
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4a13      	ldr	r2, [pc, #76]	; (80074b8 <USB_CoreReset+0x64>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e01b      	b.n	80074aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	daf2      	bge.n	8007460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f043 0201 	orr.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <USB_CoreReset+0x64>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e006      	b.n	80074aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d0f0      	beq.n	800748a <USB_CoreReset+0x36>

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	00030d40 	.word	0x00030d40

080074bc <__NVIC_SetPriority>:
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80074c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	db0a      	blt.n	80074e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	490c      	ldr	r1, [pc, #48]	; (8007508 <__NVIC_SetPriority+0x4c>)
 80074d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	440b      	add	r3, r1
 80074e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074e4:	e00a      	b.n	80074fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4908      	ldr	r1, [pc, #32]	; (800750c <__NVIC_SetPriority+0x50>)
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	3b04      	subs	r3, #4
 80074f4:	0112      	lsls	r2, r2, #4
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	440b      	add	r3, r1
 80074fa:	761a      	strb	r2, [r3, #24]
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	e000e100 	.word	0xe000e100
 800750c:	e000ed00 	.word	0xe000ed00

08007510 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <SysTick_Handler+0x1c>)
 8007516:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007518:	f002 fa0c 	bl	8009934 <xTaskGetSchedulerState>
 800751c:	4603      	mov	r3, r0
 800751e:	2b01      	cmp	r3, #1
 8007520:	d001      	beq.n	8007526 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007522:	f000 fe09 	bl	8008138 <xPortSysTickHandler>
  }
}
 8007526:	bf00      	nop
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000e010 	.word	0xe000e010

08007530 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007534:	2100      	movs	r1, #0
 8007536:	f06f 0004 	mvn.w	r0, #4
 800753a:	f7ff ffbf 	bl	80074bc <__NVIC_SetPriority>
#endif
}
 800753e:	bf00      	nop
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754a:	f3ef 8305 	mrs	r3, IPSR
 800754e:	603b      	str	r3, [r7, #0]
  return(result);
 8007550:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007556:	f06f 0305 	mvn.w	r3, #5
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	e00c      	b.n	8007578 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <osKernelInitialize+0x44>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007566:	4b08      	ldr	r3, [pc, #32]	; (8007588 <osKernelInitialize+0x44>)
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800756c:	2300      	movs	r3, #0
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	e002      	b.n	8007578 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007578:	687b      	ldr	r3, [r7, #4]
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	24000834 	.word	0x24000834

0800758c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007592:	f3ef 8305 	mrs	r3, IPSR
 8007596:	603b      	str	r3, [r7, #0]
  return(result);
 8007598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800759e:	f06f 0305 	mvn.w	r3, #5
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	e010      	b.n	80075c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <osKernelStart+0x48>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d109      	bne.n	80075c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80075ae:	f7ff ffbf 	bl	8007530 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80075b2:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <osKernelStart+0x48>)
 80075b4:	2202      	movs	r2, #2
 80075b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075b8:	f001 fd60 	bl	800907c <vTaskStartScheduler>
      stat = osOK;
 80075bc:	2300      	movs	r3, #0
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	e002      	b.n	80075c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295
 80075c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075c8:	687b      	ldr	r3, [r7, #4]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	24000834 	.word	0x24000834

080075d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08e      	sub	sp, #56	; 0x38
 80075dc:	af04      	add	r7, sp, #16
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e8:	f3ef 8305 	mrs	r3, IPSR
 80075ec:	617b      	str	r3, [r7, #20]
  return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d17e      	bne.n	80076f2 <osThreadNew+0x11a>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d07b      	beq.n	80076f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075fe:	2318      	movs	r3, #24
 8007600:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007606:	f04f 33ff 	mov.w	r3, #4294967295
 800760a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d045      	beq.n	800769e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <osThreadNew+0x48>
        name = attr->name;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <osThreadNew+0x6e>
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b38      	cmp	r3, #56	; 0x38
 8007638:	d805      	bhi.n	8007646 <osThreadNew+0x6e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <osThreadNew+0x72>
        return (NULL);
 8007646:	2300      	movs	r3, #0
 8007648:	e054      	b.n	80076f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	089b      	lsrs	r3, r3, #2
 8007658:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00e      	beq.n	8007680 <osThreadNew+0xa8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2ba7      	cmp	r3, #167	; 0xa7
 8007668:	d90a      	bls.n	8007680 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800766e:	2b00      	cmp	r3, #0
 8007670:	d006      	beq.n	8007680 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <osThreadNew+0xa8>
        mem = 1;
 800767a:	2301      	movs	r3, #1
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e010      	b.n	80076a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10c      	bne.n	80076a2 <osThreadNew+0xca>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d108      	bne.n	80076a2 <osThreadNew+0xca>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <osThreadNew+0xca>
          mem = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e001      	b.n	80076a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d110      	bne.n	80076ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6a3a      	ldr	r2, [r7, #32]
 80076bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f001 faf0 	bl	8008ca4 <xTaskCreateStatic>
 80076c4:	4603      	mov	r3, r0
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	e013      	b.n	80076f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d110      	bne.n	80076f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	f107 0310 	add.w	r3, r7, #16
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f001 fb3b 	bl	8008d5e <xTaskCreate>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d001      	beq.n	80076f2 <osThreadNew+0x11a>
            hTask = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076f2:	693b      	ldr	r3, [r7, #16]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3728      	adds	r7, #40	; 0x28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007704:	f3ef 8305 	mrs	r3, IPSR
 8007708:	60bb      	str	r3, [r7, #8]
  return(result);
 800770a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <osDelay+0x1c>
    stat = osErrorISR;
 8007710:	f06f 0305 	mvn.w	r3, #5
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e007      	b.n	8007728 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fc76 	bl	8009014 <vTaskDelay>
    }
  }

  return (stat);
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007732:	b580      	push	{r7, lr}
 8007734:	b08a      	sub	sp, #40	; 0x28
 8007736:	af02      	add	r7, sp, #8
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007742:	f3ef 8305 	mrs	r3, IPSR
 8007746:	613b      	str	r3, [r7, #16]
  return(result);
 8007748:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800774a:	2b00      	cmp	r3, #0
 800774c:	d15f      	bne.n	800780e <osMessageQueueNew+0xdc>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d05c      	beq.n	800780e <osMessageQueueNew+0xdc>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d059      	beq.n	800780e <osMessageQueueNew+0xdc>
    mem = -1;
 800775a:	f04f 33ff 	mov.w	r3, #4294967295
 800775e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d029      	beq.n	80077ba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d012      	beq.n	8007794 <osMessageQueueNew+0x62>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b4f      	cmp	r3, #79	; 0x4f
 8007774:	d90e      	bls.n	8007794 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695a      	ldr	r2, [r3, #20]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	fb01 f303 	mul.w	r3, r1, r3
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <osMessageQueueNew+0x62>
        mem = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	e014      	b.n	80077be <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d110      	bne.n	80077be <osMessageQueueNew+0x8c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10c      	bne.n	80077be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d108      	bne.n	80077be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <osMessageQueueNew+0x8c>
          mem = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61bb      	str	r3, [r7, #24]
 80077b8:	e001      	b.n	80077be <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d10b      	bne.n	80077dc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2100      	movs	r1, #0
 80077ce:	9100      	str	r1, [sp, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fda8 	bl	8008328 <xQueueGenericCreateStatic>
 80077d8:	61f8      	str	r0, [r7, #28]
 80077da:	e008      	b.n	80077ee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80077e2:	2200      	movs	r2, #0
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fe16 	bl	8008418 <xQueueGenericCreate>
 80077ec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00c      	beq.n	800780e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <osMessageQueueNew+0xd0>
        name = attr->name;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e001      	b.n	8007806 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007806:	6979      	ldr	r1, [r7, #20]
 8007808:	69f8      	ldr	r0, [r7, #28]
 800780a:	f001 f9ed 	bl	8008be8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800780e:	69fb      	ldr	r3, [r7, #28]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3720      	adds	r7, #32
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a07      	ldr	r2, [pc, #28]	; (8007844 <vApplicationGetIdleTaskMemory+0x2c>)
 8007828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4a06      	ldr	r2, [pc, #24]	; (8007848 <vApplicationGetIdleTaskMemory+0x30>)
 800782e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2280      	movs	r2, #128	; 0x80
 8007834:	601a      	str	r2, [r3, #0]
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	24000838 	.word	0x24000838
 8007848:	240008e0 	.word	0x240008e0

0800784c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a07      	ldr	r2, [pc, #28]	; (8007878 <vApplicationGetTimerTaskMemory+0x2c>)
 800785c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4a06      	ldr	r2, [pc, #24]	; (800787c <vApplicationGetTimerTaskMemory+0x30>)
 8007862:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800786a:	601a      	str	r2, [r3, #0]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	24000ae0 	.word	0x24000ae0
 800787c:	24000b88 	.word	0x24000b88

08007880 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	; 0x28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800788c:	f001 fc66 	bl	800915c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007890:	4b5b      	ldr	r3, [pc, #364]	; (8007a00 <pvPortMalloc+0x180>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007898:	f000 f920 	bl	8007adc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800789c:	4b59      	ldr	r3, [pc, #356]	; (8007a04 <pvPortMalloc+0x184>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f040 8093 	bne.w	80079d0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01d      	beq.n	80078ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078b0:	2208      	movs	r2, #8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d014      	beq.n	80078ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f023 0307 	bic.w	r3, r3, #7
 80078c8:	3308      	adds	r3, #8
 80078ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d06e      	beq.n	80079d0 <pvPortMalloc+0x150>
 80078f2:	4b45      	ldr	r3, [pc, #276]	; (8007a08 <pvPortMalloc+0x188>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d869      	bhi.n	80079d0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078fc:	4b43      	ldr	r3, [pc, #268]	; (8007a0c <pvPortMalloc+0x18c>)
 80078fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007900:	4b42      	ldr	r3, [pc, #264]	; (8007a0c <pvPortMalloc+0x18c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007906:	e004      	b.n	8007912 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d903      	bls.n	8007924 <pvPortMalloc+0xa4>
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f1      	bne.n	8007908 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007924:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <pvPortMalloc+0x180>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792a:	429a      	cmp	r2, r3
 800792c:	d050      	beq.n	80079d0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2208      	movs	r2, #8
 8007934:	4413      	add	r3, r2
 8007936:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	2308      	movs	r3, #8
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	429a      	cmp	r2, r3
 800794e:	d91f      	bls.n	8007990 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <pvPortMalloc+0xf8>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	613b      	str	r3, [r7, #16]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800798a:	69b8      	ldr	r0, [r7, #24]
 800798c:	f000 f908 	bl	8007ba0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007990:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <pvPortMalloc+0x188>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	4a1b      	ldr	r2, [pc, #108]	; (8007a08 <pvPortMalloc+0x188>)
 800799c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800799e:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <pvPortMalloc+0x188>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <pvPortMalloc+0x190>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d203      	bcs.n	80079b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079aa:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <pvPortMalloc+0x188>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <pvPortMalloc+0x190>)
 80079b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <pvPortMalloc+0x184>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <pvPortMalloc+0x194>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3301      	adds	r3, #1
 80079cc:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <pvPortMalloc+0x194>)
 80079ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079d0:	f001 fbd2 	bl	8009178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <pvPortMalloc+0x174>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60fb      	str	r3, [r7, #12]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <pvPortMalloc+0x172>
	return pvReturn;
 80079f4:	69fb      	ldr	r3, [r7, #28]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3728      	adds	r7, #40	; 0x28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	24004b90 	.word	0x24004b90
 8007a04:	24004ba4 	.word	0x24004ba4
 8007a08:	24004b94 	.word	0x24004b94
 8007a0c:	24004b88 	.word	0x24004b88
 8007a10:	24004b98 	.word	0x24004b98
 8007a14:	24004b9c 	.word	0x24004b9c

08007a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d04d      	beq.n	8007ac6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4413      	add	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <vPortFree+0xb8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <vPortFree+0x44>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60fb      	str	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <vPortFree+0x62>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	60bb      	str	r3, [r7, #8]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	4b14      	ldr	r3, [pc, #80]	; (8007ad0 <vPortFree+0xb8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01e      	beq.n	8007ac6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d11a      	bne.n	8007ac6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <vPortFree+0xb8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aa0:	f001 fb5c 	bl	800915c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <vPortFree+0xbc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <vPortFree+0xbc>)
 8007ab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ab2:	6938      	ldr	r0, [r7, #16]
 8007ab4:	f000 f874 	bl	8007ba0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ab8:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <vPortFree+0xc0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	4a06      	ldr	r2, [pc, #24]	; (8007ad8 <vPortFree+0xc0>)
 8007ac0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ac2:	f001 fb59 	bl	8009178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	24004ba4 	.word	0x24004ba4
 8007ad4:	24004b94 	.word	0x24004b94
 8007ad8:	24004ba0 	.word	0x24004ba0

08007adc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ae2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ae6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ae8:	4b27      	ldr	r3, [pc, #156]	; (8007b88 <prvHeapInit+0xac>)
 8007aea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3307      	adds	r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0307 	bic.w	r3, r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <prvHeapInit+0xac>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b14:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <prvHeapInit+0xb0>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b1a:	4b1c      	ldr	r3, [pc, #112]	; (8007b8c <prvHeapInit+0xb0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b28:	2208      	movs	r2, #8
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0307 	bic.w	r3, r3, #7
 8007b36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <prvHeapInit+0xb4>)
 8007b3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b3e:	4b14      	ldr	r3, [pc, #80]	; (8007b90 <prvHeapInit+0xb4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b46:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <prvHeapInit+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <prvHeapInit+0xb4>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <prvHeapInit+0xb8>)
 8007b6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a09      	ldr	r2, [pc, #36]	; (8007b98 <prvHeapInit+0xbc>)
 8007b72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b74:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <prvHeapInit+0xc0>)
 8007b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b7a:	601a      	str	r2, [r3, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	24000f88 	.word	0x24000f88
 8007b8c:	24004b88 	.word	0x24004b88
 8007b90:	24004b90 	.word	0x24004b90
 8007b94:	24004b98 	.word	0x24004b98
 8007b98:	24004b94 	.word	0x24004b94
 8007b9c:	24004ba4 	.word	0x24004ba4

08007ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba8:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <prvInsertBlockIntoFreeList+0xac>)
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e002      	b.n	8007bb4 <prvInsertBlockIntoFreeList+0x14>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d8f7      	bhi.n	8007bae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4413      	add	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d108      	bne.n	8007be2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	441a      	add	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	441a      	add	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d118      	bne.n	8007c28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <prvInsertBlockIntoFreeList+0xb0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d00d      	beq.n	8007c1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	e008      	b.n	8007c30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <prvInsertBlockIntoFreeList+0xb0>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e003      	b.n	8007c30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d002      	beq.n	8007c3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	24004b88 	.word	0x24004b88
 8007c50:	24004b90 	.word	0x24004b90

08007c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f103 0208 	add.w	r2, r3, #8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f103 0208 	add.w	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0208 	add.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
}
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d103      	bne.n	8007d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e00c      	b.n	8007d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e002      	b.n	8007d24 <vListInsert+0x2e>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d2f6      	bcs.n	8007d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6892      	ldr	r2, [r2, #8]
 8007d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6852      	ldr	r2, [r2, #4]
 8007d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d103      	bne.n	8007d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	1e5a      	subs	r2, r3, #1
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f023 0201 	bic.w	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b04      	subs	r3, #4
 8007dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dec:	4a0c      	ldr	r2, [pc, #48]	; (8007e20 <pxPortInitialiseStack+0x64>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b14      	subs	r3, #20
 8007df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f06f 0202 	mvn.w	r2, #2
 8007e0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3b20      	subs	r3, #32
 8007e10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e12:	68fb      	ldr	r3, [r7, #12]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	08007e25 	.word	0x08007e25

08007e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e2e:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <prvTaskExitError+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d00a      	beq.n	8007e4e <prvTaskExitError+0x2a>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <prvTaskExitError+0x28>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	60bb      	str	r3, [r7, #8]
}
 8007e60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e62:	bf00      	nop
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0fc      	beq.n	8007e64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	24000010 	.word	0x24000010
 8007e7c:	00000000 	.word	0x00000000

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	4770      	bx	lr
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	24004bf0 	.word	0x24004bf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ea8:	4808      	ldr	r0, [pc, #32]	; (8007ecc <prvPortStartFirstTask+0x24>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8814 	msr	CONTROL, r0
 8007eba:	b662      	cpsie	i
 8007ebc:	b661      	cpsie	f
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	df00      	svc	0
 8007ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eca:	bf00      	nop
 8007ecc:	e000ed08 	.word	0xe000ed08

08007ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ed6:	4b46      	ldr	r3, [pc, #280]	; (8007ff0 <xPortStartScheduler+0x120>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a46      	ldr	r2, [pc, #280]	; (8007ff4 <xPortStartScheduler+0x124>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10a      	bne.n	8007ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	613b      	str	r3, [r7, #16]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ef6:	4b3e      	ldr	r3, [pc, #248]	; (8007ff0 <xPortStartScheduler+0x120>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <xPortStartScheduler+0x128>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10a      	bne.n	8007f16 <xPortStartScheduler+0x46>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60fb      	str	r3, [r7, #12]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f16:	4b39      	ldr	r3, [pc, #228]	; (8007ffc <xPortStartScheduler+0x12c>)
 8007f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	4b31      	ldr	r3, [pc, #196]	; (8008000 <xPortStartScheduler+0x130>)
 8007f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <xPortStartScheduler+0x134>)
 8007f40:	2207      	movs	r2, #7
 8007f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f44:	e009      	b.n	8007f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f46:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <xPortStartScheduler+0x134>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4a2d      	ldr	r2, [pc, #180]	; (8008004 <xPortStartScheduler+0x134>)
 8007f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f62:	2b80      	cmp	r3, #128	; 0x80
 8007f64:	d0ef      	beq.n	8007f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f66:	4b27      	ldr	r3, [pc, #156]	; (8008004 <xPortStartScheduler+0x134>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1c3 0307 	rsb	r3, r3, #7
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d00a      	beq.n	8007f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60bb      	str	r3, [r7, #8]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f88:	4b1e      	ldr	r3, [pc, #120]	; (8008004 <xPortStartScheduler+0x134>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <xPortStartScheduler+0x134>)
 8007f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <xPortStartScheduler+0x134>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <xPortStartScheduler+0x134>)
 8007f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fa6:	4b18      	ldr	r3, [pc, #96]	; (8008008 <xPortStartScheduler+0x138>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a17      	ldr	r2, [pc, #92]	; (8008008 <xPortStartScheduler+0x138>)
 8007fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <xPortStartScheduler+0x138>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a14      	ldr	r2, [pc, #80]	; (8008008 <xPortStartScheduler+0x138>)
 8007fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fbe:	f000 f8dd 	bl	800817c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fc2:	4b12      	ldr	r3, [pc, #72]	; (800800c <xPortStartScheduler+0x13c>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fc8:	f000 f8fc 	bl	80081c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fcc:	4b10      	ldr	r3, [pc, #64]	; (8008010 <xPortStartScheduler+0x140>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0f      	ldr	r2, [pc, #60]	; (8008010 <xPortStartScheduler+0x140>)
 8007fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fd8:	f7ff ff66 	bl	8007ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fdc:	f001 fa34 	bl	8009448 <vTaskSwitchContext>
	prvTaskExitError();
 8007fe0:	f7ff ff20 	bl	8007e24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	e000ed00 	.word	0xe000ed00
 8007ff4:	410fc271 	.word	0x410fc271
 8007ff8:	410fc270 	.word	0x410fc270
 8007ffc:	e000e400 	.word	0xe000e400
 8008000:	24004ba8 	.word	0x24004ba8
 8008004:	24004bac 	.word	0x24004bac
 8008008:	e000ed20 	.word	0xe000ed20
 800800c:	24000010 	.word	0x24000010
 8008010:	e000ef34 	.word	0xe000ef34

08008014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	607b      	str	r3, [r7, #4]
}
 800802c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <vPortEnterCritical+0x58>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	4a0d      	ldr	r2, [pc, #52]	; (800806c <vPortEnterCritical+0x58>)
 8008036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <vPortEnterCritical+0x58>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d10f      	bne.n	8008060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <vPortEnterCritical+0x5c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <vPortEnterCritical+0x4c>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	603b      	str	r3, [r7, #0]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <vPortEnterCritical+0x4a>
	}
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	24000010 	.word	0x24000010
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <vPortExitCritical+0x50>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <vPortExitCritical+0x24>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	607b      	str	r3, [r7, #4]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <vPortExitCritical+0x50>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3b01      	subs	r3, #1
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <vPortExitCritical+0x50>)
 80080a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080a2:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <vPortExitCritical+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d105      	bne.n	80080b6 <vPortExitCritical+0x42>
 80080aa:	2300      	movs	r3, #0
 80080ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	24000010 	.word	0x24000010
	...

080080d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080d0:	f3ef 8009 	mrs	r0, PSP
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <pxCurrentTCBConst>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f01e 0f10 	tst.w	lr, #16
 80080e0:	bf08      	it	eq
 80080e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080f4:	f380 8811 	msr	BASEPRI, r0
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f001 f9a2 	bl	8009448 <vTaskSwitchContext>
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f380 8811 	msr	BASEPRI, r0
 800810c:	bc09      	pop	{r0, r3}
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008116:	f01e 0f10 	tst.w	lr, #16
 800811a:	bf08      	it	eq
 800811c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008120:	f380 8809 	msr	PSP, r0
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst>:
 8008130:	24004bf0 	.word	0x24004bf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008152:	f001 f8bf 	bl	80092d4 <xTaskIncrementTick>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <xPortSysTickHandler+0x40>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
}
 800816e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <vPortSetupTimerInterrupt+0x34>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <vPortSetupTimerInterrupt+0x38>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <vPortSetupTimerInterrupt+0x3c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <vPortSetupTimerInterrupt+0x40>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <vPortSetupTimerInterrupt+0x44>)
 800819a:	3b01      	subs	r3, #1
 800819c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800819e:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <vPortSetupTimerInterrupt+0x34>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010
 80081b4:	e000e018 	.word	0xe000e018
 80081b8:	24000000 	.word	0x24000000
 80081bc:	10624dd3 	.word	0x10624dd3
 80081c0:	e000e014 	.word	0xe000e014

080081c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081d4 <vPortEnableVFP+0x10>
 80081c8:	6801      	ldr	r1, [r0, #0]
 80081ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ce:	6001      	str	r1, [r0, #0]
 80081d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081d2:	bf00      	nop
 80081d4:	e000ed88 	.word	0xe000ed88

080081d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d914      	bls.n	8008214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <vPortValidateInterruptPriority+0x70>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <vPortValidateInterruptPriority+0x74>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	7afa      	ldrb	r2, [r7, #11]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d20a      	bcs.n	8008214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <vPortValidateInterruptPriority+0x78>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800821c:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <vPortValidateInterruptPriority+0x7c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d90a      	bls.n	800823a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	603b      	str	r3, [r7, #0]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <vPortValidateInterruptPriority+0x60>
	}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	e000e3f0 	.word	0xe000e3f0
 800824c:	24004ba8 	.word	0x24004ba8
 8008250:	e000ed0c 	.word	0xe000ed0c
 8008254:	24004bac 	.word	0x24004bac

08008258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xQueueGenericReset+0x2a>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	60bb      	str	r3, [r7, #8]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008282:	f7ff fec7 	bl	8008014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008292:	fb01 f303 	mul.w	r3, r1, r3
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	3b01      	subs	r3, #1
 80082b4:	68f9      	ldr	r1, [r7, #12]
 80082b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082b8:	fb01 f303 	mul.w	r3, r1, r3
 80082bc:	441a      	add	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	22ff      	movs	r2, #255	; 0xff
 80082c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	22ff      	movs	r2, #255	; 0xff
 80082ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d114      	bne.n	8008302 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01a      	beq.n	8008316 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3310      	adds	r3, #16
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 f963 	bl	80095b0 <xTaskRemoveFromEventList>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d012      	beq.n	8008316 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082f0:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <xQueueGenericReset+0xcc>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	e009      	b.n	8008316 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3310      	adds	r3, #16
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fca4 	bl	8007c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3324      	adds	r3, #36	; 0x24
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fc9f 	bl	8007c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008316:	f7ff fead 	bl	8008074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800831a:	2301      	movs	r3, #1
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	; 0x38
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
}
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <xQueueGenericCreateStatic+0x52>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <xQueueGenericCreateStatic+0x56>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericCreateStatic+0x58>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	623b      	str	r3, [r7, #32]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <xQueueGenericCreateStatic+0x7e>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <xQueueGenericCreateStatic+0x82>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <xQueueGenericCreateStatic+0x84>
 80083aa:	2300      	movs	r3, #0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	61fb      	str	r3, [r7, #28]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083c6:	2350      	movs	r3, #80	; 0x50
 80083c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b50      	cmp	r3, #80	; 0x50
 80083ce:	d00a      	beq.n	80083e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	61bb      	str	r3, [r7, #24]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00d      	beq.n	800840e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4613      	mov	r3, r2
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f83f 	bl	800848c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008410:	4618      	mov	r0, r3
 8008412:	3730      	adds	r7, #48	; 0x30
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <xQueueGenericCreate+0x2a>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	613b      	str	r3, [r7, #16]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	fb02 f303 	mul.w	r3, r2, r3
 800844a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	3350      	adds	r3, #80	; 0x50
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fa15 	bl	8007880 <pvPortMalloc>
 8008456:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d011      	beq.n	8008482 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	3350      	adds	r3, #80	; 0x50
 8008466:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f805 	bl	800848c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008482:	69bb      	ldr	r3, [r7, #24]
	}
 8008484:	4618      	mov	r0, r3
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e002      	b.n	80084ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084ba:	2101      	movs	r1, #1
 80084bc:	69b8      	ldr	r0, [r7, #24]
 80084be:	f7ff fecb 	bl	8008258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	; 0x38
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericSend+0x32>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <xQueueGenericSend+0x40>
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <xQueueGenericSend+0x44>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <xQueueGenericSend+0x46>
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <xQueueGenericSend+0x60>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b02      	cmp	r3, #2
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x6e>
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <xQueueGenericSend+0x72>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <xQueueGenericSend+0x74>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xQueueGenericSend+0x8e>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	623b      	str	r3, [r7, #32]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008562:	f001 f9e7 	bl	8009934 <xTaskGetSchedulerState>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xQueueGenericSend+0x9e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <xQueueGenericSend+0xa2>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueGenericSend+0xa4>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueGenericSend+0xbe>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61fb      	str	r3, [r7, #28]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008592:	f7ff fd3f 	bl	8008014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <xQueueGenericSend+0xd4>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d129      	bne.n	80085fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ae:	f000 fa0b 	bl	80089c8 <prvCopyDataToQueue>
 80085b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fff5 	bl	80095b0 <xTaskRemoveFromEventList>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d013      	beq.n	80085f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085cc:	4b3f      	ldr	r3, [pc, #252]	; (80086cc <xQueueGenericSend+0x1f8>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	e00a      	b.n	80085f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085e4:	4b39      	ldr	r3, [pc, #228]	; (80086cc <xQueueGenericSend+0x1f8>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085f4:	f7ff fd3e 	bl	8008074 <vPortExitCritical>
				return pdPASS;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e063      	b.n	80086c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d103      	bne.n	800860a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008602:	f7ff fd37 	bl	8008074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008606:	2300      	movs	r3, #0
 8008608:	e05c      	b.n	80086c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f82f 	bl	8009678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861e:	f7ff fd29 	bl	8008074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008622:	f000 fd9b 	bl	800915c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008626:	f7ff fcf5 	bl	8008014 <vPortEnterCritical>
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008630:	b25b      	sxtb	r3, r3
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d103      	bne.n	8008640 <xQueueGenericSend+0x16c>
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d103      	bne.n	8008656 <xQueueGenericSend+0x182>
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008656:	f7ff fd0d 	bl	8008074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800865a:	1d3a      	adds	r2, r7, #4
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f81e 	bl	80096a4 <xTaskCheckForTimeOut>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d124      	bne.n	80086b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800866e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008670:	f000 faa2 	bl	8008bb8 <prvIsQueueFull>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	3310      	adds	r3, #16
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f000 ff44 	bl	8009510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800868a:	f000 fa2d 	bl	8008ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800868e:	f000 fd73 	bl	8009178 <xTaskResumeAll>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	f47f af7c 	bne.w	8008592 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <xQueueGenericSend+0x1f8>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	e772      	b.n	8008592 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ae:	f000 fa1b 	bl	8008ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086b2:	f000 fd61 	bl	8009178 <xTaskResumeAll>
 80086b6:	e76c      	b.n	8008592 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ba:	f000 fa15 	bl	8008ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086be:	f000 fd5b 	bl	8009178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3738      	adds	r7, #56	; 0x38
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b090      	sub	sp, #64	; 0x40
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <xQueueGenericSendFromISR+0x3c>
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <xQueueGenericSendFromISR+0x40>
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <xQueueGenericSendFromISR+0x42>
 8008710:	2300      	movs	r3, #0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008728:	bf00      	nop
 800872a:	e7fe      	b.n	800872a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d103      	bne.n	800873a <xQueueGenericSendFromISR+0x6a>
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <xQueueGenericSendFromISR+0x6e>
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <xQueueGenericSendFromISR+0x70>
 800873e:	2300      	movs	r3, #0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	623b      	str	r3, [r7, #32]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800875a:	f7ff fd3d 	bl	80081d8 <vPortValidateInterruptPriority>
	__asm volatile
 800875e:	f3ef 8211 	mrs	r2, BASEPRI
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	61fa      	str	r2, [r7, #28]
 8008774:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008776:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008782:	429a      	cmp	r2, r3
 8008784:	d302      	bcc.n	800878c <xQueueGenericSendFromISR+0xbc>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d12f      	bne.n	80087ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087a2:	f000 f911 	bl	80089c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d112      	bne.n	80087d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d016      	beq.n	80087e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	3324      	adds	r3, #36	; 0x24
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fef7 	bl	80095b0 <xTaskRemoveFromEventList>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e007      	b.n	80087e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087da:	3301      	adds	r3, #1
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	b25a      	sxtb	r2, r3
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087e6:	2301      	movs	r3, #1
 80087e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087ea:	e001      	b.n	80087f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f383 8811 	msr	BASEPRI, r3
}
 80087fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3740      	adds	r7, #64	; 0x40
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	; 0x30
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008814:	2300      	movs	r3, #0
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <xQueueReceive+0x30>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	623b      	str	r3, [r7, #32]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <xQueueReceive+0x3e>
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <xQueueReceive+0x42>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <xQueueReceive+0x44>
 800884a:	2300      	movs	r3, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueReceive+0x5e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	61fb      	str	r3, [r7, #28]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008866:	f001 f865 	bl	8009934 <xTaskGetSchedulerState>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <xQueueReceive+0x6e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <xQueueReceive+0x72>
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <xQueueReceive+0x74>
 800887a:	2300      	movs	r3, #0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <xQueueReceive+0x8e>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	61bb      	str	r3, [r7, #24]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008896:	f7ff fbbd 	bl	8008014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01f      	beq.n	80088e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088aa:	f000 f8f7 	bl	8008a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	3310      	adds	r3, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fe74 	bl	80095b0 <xTaskRemoveFromEventList>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088ce:	4b3d      	ldr	r3, [pc, #244]	; (80089c4 <xQueueReceive+0x1bc>)
 80088d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088de:	f7ff fbc9 	bl	8008074 <vPortExitCritical>
				return pdPASS;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e069      	b.n	80089ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088ec:	f7ff fbc2 	bl	8008074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e062      	b.n	80089ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088fa:	f107 0310 	add.w	r3, r7, #16
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 feba 	bl	8009678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008904:	2301      	movs	r3, #1
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008908:	f7ff fbb4 	bl	8008074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800890c:	f000 fc26 	bl	800915c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008910:	f7ff fb80 	bl	8008014 <vPortEnterCritical>
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891a:	b25b      	sxtb	r3, r3
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d103      	bne.n	800892a <xQueueReceive+0x122>
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008930:	b25b      	sxtb	r3, r3
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d103      	bne.n	8008940 <xQueueReceive+0x138>
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008940:	f7ff fb98 	bl	8008074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008944:	1d3a      	adds	r2, r7, #4
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fea9 	bl	80096a4 <xTaskCheckForTimeOut>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d123      	bne.n	80089a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895a:	f000 f917 	bl	8008b8c <prvIsQueueEmpty>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d017      	beq.n	8008994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	3324      	adds	r3, #36	; 0x24
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fdcf 	bl	8009510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008974:	f000 f8b8 	bl	8008ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008978:	f000 fbfe 	bl	8009178 <xTaskResumeAll>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d189      	bne.n	8008896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <xQueueReceive+0x1bc>)
 8008984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	e780      	b.n	8008896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008996:	f000 f8a7 	bl	8008ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800899a:	f000 fbed 	bl	8009178 <xTaskResumeAll>
 800899e:	e77a      	b.n	8008896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a2:	f000 f8a1 	bl	8008ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a6:	f000 fbe7 	bl	8009178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ac:	f000 f8ee 	bl	8008b8c <prvIsQueueEmpty>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f43f af6f 	beq.w	8008896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3730      	adds	r7, #48	; 0x30
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10d      	bne.n	8008a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d14d      	bne.n	8008a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 ffbc 	bl	8009970 <xTaskPriorityDisinherit>
 80089f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	609a      	str	r2, [r3, #8]
 8008a00:	e043      	b.n	8008a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d119      	bne.n	8008a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6858      	ldr	r0, [r3, #4]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	461a      	mov	r2, r3
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	f001 fc7a 	bl	800a30c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d32b      	bcc.n	8008a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	e026      	b.n	8008a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68d8      	ldr	r0, [r3, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	461a      	mov	r2, r3
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	f001 fc60 	bl	800a30c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	425b      	negs	r3, r3
 8008a56:	441a      	add	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d207      	bcs.n	8008a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	425b      	negs	r3, r3
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d105      	bne.n	8008a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a92:	697b      	ldr	r3, [r7, #20]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	441a      	add	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d303      	bcc.n	8008ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68d9      	ldr	r1, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f001 fc16 	bl	800a30c <memcpy>
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008af0:	f7ff fa90 	bl	8008014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008afc:	e011      	b.n	8008b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d012      	beq.n	8008b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3324      	adds	r3, #36	; 0x24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fd50 	bl	80095b0 <xTaskRemoveFromEventList>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b16:	f000 fe27 	bl	8009768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	dce9      	bgt.n	8008afe <prvUnlockQueue+0x16>
 8008b2a:	e000      	b.n	8008b2e <prvUnlockQueue+0x46>
					break;
 8008b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	22ff      	movs	r2, #255	; 0xff
 8008b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b36:	f7ff fa9d 	bl	8008074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b3a:	f7ff fa6b 	bl	8008014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b46:	e011      	b.n	8008b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d012      	beq.n	8008b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3310      	adds	r3, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fd2b 	bl	80095b0 <xTaskRemoveFromEventList>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b60:	f000 fe02 	bl	8009768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dce9      	bgt.n	8008b48 <prvUnlockQueue+0x60>
 8008b74:	e000      	b.n	8008b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	22ff      	movs	r2, #255	; 0xff
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b80:	f7ff fa78 	bl	8008074 <vPortExitCritical>
}
 8008b84:	bf00      	nop
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b94:	f7ff fa3e 	bl	8008014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e001      	b.n	8008baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008baa:	f7ff fa63 	bl	8008074 <vPortExitCritical>

	return xReturn;
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc0:	f7ff fa28 	bl	8008014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d102      	bne.n	8008bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e001      	b.n	8008bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bda:	f7ff fa4b 	bl	8008074 <vPortExitCritical>

	return xReturn;
 8008bde:	68fb      	ldr	r3, [r7, #12]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e014      	b.n	8008c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bf8:	4a0f      	ldr	r2, [pc, #60]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c04:	490c      	ldr	r1, [pc, #48]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c1a:	e006      	b.n	8008c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b07      	cmp	r3, #7
 8008c26:	d9e7      	bls.n	8008bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	24004bb0 	.word	0x24004bb0

08008c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c4c:	f7ff f9e2 	bl	8008014 <vPortEnterCritical>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d103      	bne.n	8008c66 <vQueueWaitForMessageRestricted+0x2a>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d103      	bne.n	8008c7c <vQueueWaitForMessageRestricted+0x40>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c7c:	f7ff f9fa 	bl	8008074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d106      	bne.n	8008c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3324      	adds	r3, #36	; 0x24
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc61 	bl	8009558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7ff ff26 	bl	8008ae8 <prvUnlockQueue>
	}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	; 0x38
 8008ca8:	af04      	add	r7, sp, #16
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	623b      	str	r3, [r7, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xTaskCreateStatic+0x46>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	61fb      	str	r3, [r7, #28]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cea:	23a8      	movs	r3, #168	; 0xa8
 8008cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2ba8      	cmp	r3, #168	; 0xa8
 8008cf2:	d00a      	beq.n	8008d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	61bb      	str	r3, [r7, #24]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01e      	beq.n	8008d50 <xTaskCreateStatic+0xac>
 8008d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01b      	beq.n	8008d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	9302      	str	r3, [sp, #8]
 8008d32:	f107 0314 	add.w	r3, r7, #20
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f850 	bl	8008de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d4a:	f000 f8f3 	bl	8008f34 <prvAddNewTaskToReadyList>
 8008d4e:	e001      	b.n	8008d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d54:	697b      	ldr	r3, [r7, #20]
	}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b08c      	sub	sp, #48	; 0x30
 8008d62:	af04      	add	r7, sp, #16
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe fd84 	bl	8007880 <pvPortMalloc>
 8008d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00e      	beq.n	8008d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d80:	20a8      	movs	r0, #168	; 0xa8
 8008d82:	f7fe fd7d 	bl	8007880 <pvPortMalloc>
 8008d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
 8008d94:	e005      	b.n	8008da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	f7fe fe3e 	bl	8007a18 <vPortFree>
 8008d9c:	e001      	b.n	8008da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d017      	beq.n	8008dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	9302      	str	r3, [sp, #8]
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f80e 	bl	8008de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dcc:	69f8      	ldr	r0, [r7, #28]
 8008dce:	f000 f8b1 	bl	8008f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e002      	b.n	8008dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dde:	69bb      	ldr	r3, [r7, #24]
	}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	21a5      	movs	r1, #165	; 0xa5
 8008e02:	f001 f9f9 	bl	800a1f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008e10:	440b      	add	r3, r1
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	617b      	str	r3, [r7, #20]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01f      	beq.n	8008e86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e012      	b.n	8008e72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	7819      	ldrb	r1, [r3, #0]
 8008e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	3334      	adds	r3, #52	; 0x34
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	4413      	add	r3, r2
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2b0f      	cmp	r3, #15
 8008e76:	d9e9      	bls.n	8008e4c <prvInitialiseNewTask+0x64>
 8008e78:	e000      	b.n	8008e7c <prvInitialiseNewTask+0x94>
			{
				break;
 8008e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e84:	e003      	b.n	8008e8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	2b37      	cmp	r3, #55	; 0x37
 8008e92:	d901      	bls.n	8008e98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e94:	2337      	movs	r3, #55	; 0x37
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	3304      	adds	r3, #4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fef0 	bl	8007c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	3318      	adds	r3, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe feeb 	bl	8007c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	3354      	adds	r3, #84	; 0x54
 8008ee8:	224c      	movs	r2, #76	; 0x4c
 8008eea:	2100      	movs	r1, #0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 f983 	bl	800a1f8 <memset>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <prvInitialiseNewTask+0x140>)
 8008ef6:	659a      	str	r2, [r3, #88]	; 0x58
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	4a0c      	ldr	r2, [pc, #48]	; (8008f2c <prvInitialiseNewTask+0x144>)
 8008efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	4a0b      	ldr	r2, [pc, #44]	; (8008f30 <prvInitialiseNewTask+0x148>)
 8008f02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	69b8      	ldr	r0, [r7, #24]
 8008f0a:	f7fe ff57 	bl	8007dbc <pxPortInitialiseStack>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f20:	bf00      	nop
 8008f22:	3720      	adds	r7, #32
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	2400521c 	.word	0x2400521c
 8008f2c:	24005284 	.word	0x24005284
 8008f30:	240052ec 	.word	0x240052ec

08008f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f3c:	f7ff f86a 	bl	8008014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f40:	4b2d      	ldr	r3, [pc, #180]	; (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	4a2c      	ldr	r2, [pc, #176]	; (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f4a:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f52:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f58:	4b27      	ldr	r3, [pc, #156]	; (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d110      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f60:	f000 fc26 	bl	80097b0 <prvInitialiseTaskLists>
 8008f64:	e00d      	b.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f66:	4b26      	ldr	r3, [pc, #152]	; (8009000 <prvAddNewTaskToReadyList+0xcc>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f6e:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d802      	bhi.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f7c:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f82:	4b20      	ldr	r3, [pc, #128]	; (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	4a1e      	ldr	r2, [pc, #120]	; (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008f8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <prvAddNewTaskToReadyList+0xd4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d903      	bls.n	8008fa8 <prvAddNewTaskToReadyList+0x74>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a18      	ldr	r2, [pc, #96]	; (8009008 <prvAddNewTaskToReadyList+0xd4>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4a15      	ldr	r2, [pc, #84]	; (800900c <prvAddNewTaskToReadyList+0xd8>)
 8008fb6:	441a      	add	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe fe75 	bl	8007cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fc4:	f7ff f856 	bl	8008074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <prvAddNewTaskToReadyList+0xcc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00e      	beq.n	8008fee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d207      	bcs.n	8008fee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <prvAddNewTaskToReadyList+0xdc>)
 8008fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	240050c4 	.word	0x240050c4
 8008ffc:	24004bf0 	.word	0x24004bf0
 8009000:	240050d0 	.word	0x240050d0
 8009004:	240050e0 	.word	0x240050e0
 8009008:	240050cc 	.word	0x240050cc
 800900c:	24004bf4 	.word	0x24004bf4
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d017      	beq.n	8009056 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009026:	4b13      	ldr	r3, [pc, #76]	; (8009074 <vTaskDelay+0x60>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <vTaskDelay+0x30>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60bb      	str	r3, [r7, #8]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009044:	f000 f88a 	bl	800915c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009048:	2100      	movs	r1, #0
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fcfe 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009050:	f000 f892 	bl	8009178 <xTaskResumeAll>
 8009054:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d107      	bne.n	800906c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <vTaskDelay+0x64>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	240050ec 	.word	0x240050ec
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800908a:	463a      	mov	r2, r7
 800908c:	1d39      	adds	r1, r7, #4
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fbc0 	bl	8007818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	9202      	str	r2, [sp, #8]
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2300      	movs	r3, #0
 80090a8:	460a      	mov	r2, r1
 80090aa:	4924      	ldr	r1, [pc, #144]	; (800913c <vTaskStartScheduler+0xc0>)
 80090ac:	4824      	ldr	r0, [pc, #144]	; (8009140 <vTaskStartScheduler+0xc4>)
 80090ae:	f7ff fdf9 	bl	8008ca4 <xTaskCreateStatic>
 80090b2:	4603      	mov	r3, r0
 80090b4:	4a23      	ldr	r2, [pc, #140]	; (8009144 <vTaskStartScheduler+0xc8>)
 80090b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090b8:	4b22      	ldr	r3, [pc, #136]	; (8009144 <vTaskStartScheduler+0xc8>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e001      	b.n	80090ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d102      	bne.n	80090d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090d0:	f000 fd10 	bl	8009af4 <xTimerCreateTimerTask>
 80090d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d11b      	bne.n	8009114 <vTaskStartScheduler+0x98>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	613b      	str	r3, [r7, #16]
}
 80090ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <vTaskStartScheduler+0xcc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3354      	adds	r3, #84	; 0x54
 80090f6:	4a15      	ldr	r2, [pc, #84]	; (800914c <vTaskStartScheduler+0xd0>)
 80090f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <vTaskStartScheduler+0xd4>)
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009102:	4b14      	ldr	r3, [pc, #80]	; (8009154 <vTaskStartScheduler+0xd8>)
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009108:	4b13      	ldr	r3, [pc, #76]	; (8009158 <vTaskStartScheduler+0xdc>)
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800910e:	f7fe fedf 	bl	8007ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009112:	e00e      	b.n	8009132 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911a:	d10a      	bne.n	8009132 <vTaskStartScheduler+0xb6>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <vTaskStartScheduler+0xb4>
}
 8009132:	bf00      	nop
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	0800abf8 	.word	0x0800abf8
 8009140:	08009781 	.word	0x08009781
 8009144:	240050e8 	.word	0x240050e8
 8009148:	24004bf0 	.word	0x24004bf0
 800914c:	24000060 	.word	0x24000060
 8009150:	240050e4 	.word	0x240050e4
 8009154:	240050d0 	.word	0x240050d0
 8009158:	240050c8 	.word	0x240050c8

0800915c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <vTaskSuspendAll+0x18>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	4a03      	ldr	r2, [pc, #12]	; (8009174 <vTaskSuspendAll+0x18>)
 8009168:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800916a:	bf00      	nop
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	240050ec 	.word	0x240050ec

08009178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009186:	4b42      	ldr	r3, [pc, #264]	; (8009290 <xTaskResumeAll+0x118>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	603b      	str	r3, [r7, #0]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091a4:	f7fe ff36 	bl	8008014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091a8:	4b39      	ldr	r3, [pc, #228]	; (8009290 <xTaskResumeAll+0x118>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	4a38      	ldr	r2, [pc, #224]	; (8009290 <xTaskResumeAll+0x118>)
 80091b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b2:	4b37      	ldr	r3, [pc, #220]	; (8009290 <xTaskResumeAll+0x118>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d162      	bne.n	8009280 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091ba:	4b36      	ldr	r3, [pc, #216]	; (8009294 <xTaskResumeAll+0x11c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d05e      	beq.n	8009280 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091c2:	e02f      	b.n	8009224 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c4:	4b34      	ldr	r3, [pc, #208]	; (8009298 <xTaskResumeAll+0x120>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3318      	adds	r3, #24
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fdc9 	bl	8007d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fdc4 	bl	8007d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e4:	4b2d      	ldr	r3, [pc, #180]	; (800929c <xTaskResumeAll+0x124>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d903      	bls.n	80091f4 <xTaskResumeAll+0x7c>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	4a2a      	ldr	r2, [pc, #168]	; (800929c <xTaskResumeAll+0x124>)
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4a27      	ldr	r2, [pc, #156]	; (80092a0 <xTaskResumeAll+0x128>)
 8009202:	441a      	add	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe fd4f 	bl	8007cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <xTaskResumeAll+0x12c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	429a      	cmp	r2, r3
 800921c:	d302      	bcc.n	8009224 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800921e:	4b22      	ldr	r3, [pc, #136]	; (80092a8 <xTaskResumeAll+0x130>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009224:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <xTaskResumeAll+0x120>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1cb      	bne.n	80091c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009232:	f000 fb5f 	bl	80098f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <xTaskResumeAll+0x134>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d010      	beq.n	8009264 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009242:	f000 f847 	bl	80092d4 <xTaskIncrementTick>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800924c:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <xTaskResumeAll+0x130>)
 800924e:	2201      	movs	r2, #1
 8009250:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3b01      	subs	r3, #1
 8009256:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1f1      	bne.n	8009242 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <xTaskResumeAll+0x134>)
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009264:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <xTaskResumeAll+0x130>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800926c:	2301      	movs	r3, #1
 800926e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009270:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <xTaskResumeAll+0x138>)
 8009272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009280:	f7fe fef8 	bl	8008074 <vPortExitCritical>

	return xAlreadyYielded;
 8009284:	68bb      	ldr	r3, [r7, #8]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	240050ec 	.word	0x240050ec
 8009294:	240050c4 	.word	0x240050c4
 8009298:	24005084 	.word	0x24005084
 800929c:	240050cc 	.word	0x240050cc
 80092a0:	24004bf4 	.word	0x24004bf4
 80092a4:	24004bf0 	.word	0x24004bf0
 80092a8:	240050d8 	.word	0x240050d8
 80092ac:	240050d4 	.word	0x240050d4
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092ba:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <xTaskGetTickCount+0x1c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092c0:	687b      	ldr	r3, [r7, #4]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	240050c8 	.word	0x240050c8

080092d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092de:	4b4f      	ldr	r3, [pc, #316]	; (800941c <xTaskIncrementTick+0x148>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f040 808f 	bne.w	8009406 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092e8:	4b4d      	ldr	r3, [pc, #308]	; (8009420 <xTaskIncrementTick+0x14c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3301      	adds	r3, #1
 80092ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092f0:	4a4b      	ldr	r2, [pc, #300]	; (8009420 <xTaskIncrementTick+0x14c>)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d120      	bne.n	800933e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092fc:	4b49      	ldr	r3, [pc, #292]	; (8009424 <xTaskIncrementTick+0x150>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <xTaskIncrementTick+0x48>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	603b      	str	r3, [r7, #0]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <xTaskIncrementTick+0x46>
 800931c:	4b41      	ldr	r3, [pc, #260]	; (8009424 <xTaskIncrementTick+0x150>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	4b41      	ldr	r3, [pc, #260]	; (8009428 <xTaskIncrementTick+0x154>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a3f      	ldr	r2, [pc, #252]	; (8009424 <xTaskIncrementTick+0x150>)
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	4a3f      	ldr	r2, [pc, #252]	; (8009428 <xTaskIncrementTick+0x154>)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	4b3e      	ldr	r3, [pc, #248]	; (800942c <xTaskIncrementTick+0x158>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	4a3d      	ldr	r2, [pc, #244]	; (800942c <xTaskIncrementTick+0x158>)
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	f000 fadb 	bl	80098f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800933e:	4b3c      	ldr	r3, [pc, #240]	; (8009430 <xTaskIncrementTick+0x15c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	429a      	cmp	r2, r3
 8009346:	d349      	bcc.n	80093dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009348:	4b36      	ldr	r3, [pc, #216]	; (8009424 <xTaskIncrementTick+0x150>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009352:	4b37      	ldr	r3, [pc, #220]	; (8009430 <xTaskIncrementTick+0x15c>)
 8009354:	f04f 32ff 	mov.w	r2, #4294967295
 8009358:	601a      	str	r2, [r3, #0]
					break;
 800935a:	e03f      	b.n	80093dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935c:	4b31      	ldr	r3, [pc, #196]	; (8009424 <xTaskIncrementTick+0x150>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d203      	bcs.n	800937c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009374:	4a2e      	ldr	r2, [pc, #184]	; (8009430 <xTaskIncrementTick+0x15c>)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800937a:	e02f      	b.n	80093dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fcf1 	bl	8007d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	3318      	adds	r3, #24
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fce8 	bl	8007d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4b25      	ldr	r3, [pc, #148]	; (8009434 <xTaskIncrementTick+0x160>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d903      	bls.n	80093ac <xTaskIncrementTick+0xd8>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <xTaskIncrementTick+0x160>)
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4a1f      	ldr	r2, [pc, #124]	; (8009438 <xTaskIncrementTick+0x164>)
 80093ba:	441a      	add	r2, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3304      	adds	r3, #4
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f7fe fc73 	bl	8007cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	4b1b      	ldr	r3, [pc, #108]	; (800943c <xTaskIncrementTick+0x168>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d3b8      	bcc.n	8009348 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80093d6:	2301      	movs	r3, #1
 80093d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093da:	e7b5      	b.n	8009348 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093dc:	4b17      	ldr	r3, [pc, #92]	; (800943c <xTaskIncrementTick+0x168>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e2:	4915      	ldr	r1, [pc, #84]	; (8009438 <xTaskIncrementTick+0x164>)
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	440b      	add	r3, r1
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d901      	bls.n	80093f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093f4:	2301      	movs	r3, #1
 80093f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093f8:	4b11      	ldr	r3, [pc, #68]	; (8009440 <xTaskIncrementTick+0x16c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	e004      	b.n	8009410 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009406:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <xTaskIncrementTick+0x170>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3301      	adds	r3, #1
 800940c:	4a0d      	ldr	r2, [pc, #52]	; (8009444 <xTaskIncrementTick+0x170>)
 800940e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009410:	697b      	ldr	r3, [r7, #20]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	240050ec 	.word	0x240050ec
 8009420:	240050c8 	.word	0x240050c8
 8009424:	2400507c 	.word	0x2400507c
 8009428:	24005080 	.word	0x24005080
 800942c:	240050dc 	.word	0x240050dc
 8009430:	240050e4 	.word	0x240050e4
 8009434:	240050cc 	.word	0x240050cc
 8009438:	24004bf4 	.word	0x24004bf4
 800943c:	24004bf0 	.word	0x24004bf0
 8009440:	240050d8 	.word	0x240050d8
 8009444:	240050d4 	.word	0x240050d4

08009448 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800944e:	4b2a      	ldr	r3, [pc, #168]	; (80094f8 <vTaskSwitchContext+0xb0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009456:	4b29      	ldr	r3, [pc, #164]	; (80094fc <vTaskSwitchContext+0xb4>)
 8009458:	2201      	movs	r2, #1
 800945a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800945c:	e046      	b.n	80094ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800945e:	4b27      	ldr	r3, [pc, #156]	; (80094fc <vTaskSwitchContext+0xb4>)
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009464:	4b26      	ldr	r3, [pc, #152]	; (8009500 <vTaskSwitchContext+0xb8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	e010      	b.n	800948e <vTaskSwitchContext+0x46>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10a      	bne.n	8009488 <vTaskSwitchContext+0x40>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	607b      	str	r3, [r7, #4]
}
 8009484:	bf00      	nop
 8009486:	e7fe      	b.n	8009486 <vTaskSwitchContext+0x3e>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3b01      	subs	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	491d      	ldr	r1, [pc, #116]	; (8009504 <vTaskSwitchContext+0xbc>)
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0e4      	beq.n	800946c <vTaskSwitchContext+0x24>
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4a15      	ldr	r2, [pc, #84]	; (8009504 <vTaskSwitchContext+0xbc>)
 80094ae:	4413      	add	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	605a      	str	r2, [r3, #4]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	3308      	adds	r3, #8
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d104      	bne.n	80094d2 <vTaskSwitchContext+0x8a>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	605a      	str	r2, [r3, #4]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	4a0b      	ldr	r2, [pc, #44]	; (8009508 <vTaskSwitchContext+0xc0>)
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	4a08      	ldr	r2, [pc, #32]	; (8009500 <vTaskSwitchContext+0xb8>)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <vTaskSwitchContext+0xc0>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3354      	adds	r3, #84	; 0x54
 80094e8:	4a08      	ldr	r2, [pc, #32]	; (800950c <vTaskSwitchContext+0xc4>)
 80094ea:	6013      	str	r3, [r2, #0]
}
 80094ec:	bf00      	nop
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	240050ec 	.word	0x240050ec
 80094fc:	240050d8 	.word	0x240050d8
 8009500:	240050cc 	.word	0x240050cc
 8009504:	24004bf4 	.word	0x24004bf4
 8009508:	24004bf0 	.word	0x24004bf0
 800950c:	24000060 	.word	0x24000060

08009510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60fb      	str	r3, [r7, #12]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <vTaskPlaceOnEventList+0x44>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3318      	adds	r3, #24
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7fe fbd9 	bl	8007cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009544:	2101      	movs	r1, #1
 8009546:	6838      	ldr	r0, [r7, #0]
 8009548:	f000 fa80 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	24004bf0 	.word	0x24004bf0

08009558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	617b      	str	r3, [r7, #20]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3318      	adds	r3, #24
 8009586:	4619      	mov	r1, r3
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7fe fb90 	bl	8007cae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009594:	f04f 33ff 	mov.w	r3, #4294967295
 8009598:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	68b8      	ldr	r0, [r7, #8]
 800959e:	f000 fa55 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
	}
 80095a2:	bf00      	nop
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	24004bf0 	.word	0x24004bf0

080095b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60fb      	str	r3, [r7, #12]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	3318      	adds	r3, #24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fbc1 	bl	8007d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095e6:	4b1e      	ldr	r3, [pc, #120]	; (8009660 <xTaskRemoveFromEventList+0xb0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d11d      	bne.n	800962a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fbb8 	bl	8007d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4b19      	ldr	r3, [pc, #100]	; (8009664 <xTaskRemoveFromEventList+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <xTaskRemoveFromEventList+0x5c>
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <xTaskRemoveFromEventList+0xb4>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a13      	ldr	r2, [pc, #76]	; (8009668 <xTaskRemoveFromEventList+0xb8>)
 800961a:	441a      	add	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe fb43 	bl	8007cae <vListInsertEnd>
 8009628:	e005      	b.n	8009636 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3318      	adds	r3, #24
 800962e:	4619      	mov	r1, r3
 8009630:	480e      	ldr	r0, [pc, #56]	; (800966c <xTaskRemoveFromEventList+0xbc>)
 8009632:	f7fe fb3c 	bl	8007cae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <xTaskRemoveFromEventList+0xc0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	429a      	cmp	r2, r3
 8009642:	d905      	bls.n	8009650 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009648:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <xTaskRemoveFromEventList+0xc4>)
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e001      	b.n	8009654 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009654:	697b      	ldr	r3, [r7, #20]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	240050ec 	.word	0x240050ec
 8009664:	240050cc 	.word	0x240050cc
 8009668:	24004bf4 	.word	0x24004bf4
 800966c:	24005084 	.word	0x24005084
 8009670:	24004bf0 	.word	0x24004bf0
 8009674:	240050d8 	.word	0x240050d8

08009678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <vTaskInternalSetTimeOutState+0x24>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <vTaskInternalSetTimeOutState+0x28>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	605a      	str	r2, [r3, #4]
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	240050dc 	.word	0x240050dc
 80096a0:	240050c8 	.word	0x240050c8

080096a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	613b      	str	r3, [r7, #16]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60fb      	str	r3, [r7, #12]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80096e6:	f7fe fc95 	bl	8008014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096ea:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <xTaskCheckForTimeOut+0xbc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009702:	d102      	bne.n	800970a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e023      	b.n	8009752 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b15      	ldr	r3, [pc, #84]	; (8009764 <xTaskCheckForTimeOut+0xc0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d007      	beq.n	8009726 <xTaskCheckForTimeOut+0x82>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	429a      	cmp	r2, r3
 800971e:	d302      	bcc.n	8009726 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	61fb      	str	r3, [r7, #28]
 8009724:	e015      	b.n	8009752 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	429a      	cmp	r2, r3
 800972e:	d20b      	bcs.n	8009748 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff ff9b 	bl	8009678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	e004      	b.n	8009752 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800974e:	2301      	movs	r3, #1
 8009750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009752:	f7fe fc8f 	bl	8008074 <vPortExitCritical>

	return xReturn;
 8009756:	69fb      	ldr	r3, [r7, #28]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3720      	adds	r7, #32
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	240050c8 	.word	0x240050c8
 8009764:	240050dc 	.word	0x240050dc

08009768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <vTaskMissedYield+0x14>)
 800976e:	2201      	movs	r2, #1
 8009770:	601a      	str	r2, [r3, #0]
}
 8009772:	bf00      	nop
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	240050d8 	.word	0x240050d8

08009780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009788:	f000 f852 	bl	8009830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800978c:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <prvIdleTask+0x28>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d9f9      	bls.n	8009788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <prvIdleTask+0x2c>)
 8009796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097a4:	e7f0      	b.n	8009788 <prvIdleTask+0x8>
 80097a6:	bf00      	nop
 80097a8:	24004bf4 	.word	0x24004bf4
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097b6:	2300      	movs	r3, #0
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	e00c      	b.n	80097d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4a12      	ldr	r2, [pc, #72]	; (8009810 <prvInitialiseTaskLists+0x60>)
 80097c8:	4413      	add	r3, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fa42 	bl	8007c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3301      	adds	r3, #1
 80097d4:	607b      	str	r3, [r7, #4]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b37      	cmp	r3, #55	; 0x37
 80097da:	d9ef      	bls.n	80097bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097dc:	480d      	ldr	r0, [pc, #52]	; (8009814 <prvInitialiseTaskLists+0x64>)
 80097de:	f7fe fa39 	bl	8007c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097e2:	480d      	ldr	r0, [pc, #52]	; (8009818 <prvInitialiseTaskLists+0x68>)
 80097e4:	f7fe fa36 	bl	8007c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097e8:	480c      	ldr	r0, [pc, #48]	; (800981c <prvInitialiseTaskLists+0x6c>)
 80097ea:	f7fe fa33 	bl	8007c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097ee:	480c      	ldr	r0, [pc, #48]	; (8009820 <prvInitialiseTaskLists+0x70>)
 80097f0:	f7fe fa30 	bl	8007c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097f4:	480b      	ldr	r0, [pc, #44]	; (8009824 <prvInitialiseTaskLists+0x74>)
 80097f6:	f7fe fa2d 	bl	8007c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <prvInitialiseTaskLists+0x78>)
 80097fc:	4a05      	ldr	r2, [pc, #20]	; (8009814 <prvInitialiseTaskLists+0x64>)
 80097fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <prvInitialiseTaskLists+0x7c>)
 8009802:	4a05      	ldr	r2, [pc, #20]	; (8009818 <prvInitialiseTaskLists+0x68>)
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	24004bf4 	.word	0x24004bf4
 8009814:	24005054 	.word	0x24005054
 8009818:	24005068 	.word	0x24005068
 800981c:	24005084 	.word	0x24005084
 8009820:	24005098 	.word	0x24005098
 8009824:	240050b0 	.word	0x240050b0
 8009828:	2400507c 	.word	0x2400507c
 800982c:	24005080 	.word	0x24005080

08009830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009836:	e019      	b.n	800986c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009838:	f7fe fbec 	bl	8008014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983c:	4b10      	ldr	r3, [pc, #64]	; (8009880 <prvCheckTasksWaitingTermination+0x50>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3304      	adds	r3, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fa8d 	bl	8007d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <prvCheckTasksWaitingTermination+0x54>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3b01      	subs	r3, #1
 8009854:	4a0b      	ldr	r2, [pc, #44]	; (8009884 <prvCheckTasksWaitingTermination+0x54>)
 8009856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009858:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <prvCheckTasksWaitingTermination+0x58>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3b01      	subs	r3, #1
 800985e:	4a0a      	ldr	r2, [pc, #40]	; (8009888 <prvCheckTasksWaitingTermination+0x58>)
 8009860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009862:	f7fe fc07 	bl	8008074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f810 	bl	800988c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <prvCheckTasksWaitingTermination+0x58>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e1      	bne.n	8009838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	24005098 	.word	0x24005098
 8009884:	240050c4 	.word	0x240050c4
 8009888:	240050ac 	.word	0x240050ac

0800988c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3354      	adds	r3, #84	; 0x54
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fcb5 	bl	800a208 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d108      	bne.n	80098ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe f8b3 	bl	8007a18 <vPortFree>
				vPortFree( pxTCB );
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7fe f8b0 	bl	8007a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098b8:	e018      	b.n	80098ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d103      	bne.n	80098cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7fe f8a7 	bl	8007a18 <vPortFree>
	}
 80098ca:	e00f      	b.n	80098ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d00a      	beq.n	80098ec <prvDeleteTCB+0x60>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	60fb      	str	r3, [r7, #12]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <prvDeleteTCB+0x5e>
	}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098fa:	4b0c      	ldr	r3, [pc, #48]	; (800992c <prvResetNextTaskUnblockTime+0x38>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d104      	bne.n	800990e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009904:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <prvResetNextTaskUnblockTime+0x3c>)
 8009906:	f04f 32ff 	mov.w	r2, #4294967295
 800990a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800990c:	e008      	b.n	8009920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <prvResetNextTaskUnblockTime+0x38>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	4a04      	ldr	r2, [pc, #16]	; (8009930 <prvResetNextTaskUnblockTime+0x3c>)
 800991e:	6013      	str	r3, [r2, #0]
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	2400507c 	.word	0x2400507c
 8009930:	240050e4 	.word	0x240050e4

08009934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <xTaskGetSchedulerState+0x34>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009942:	2301      	movs	r3, #1
 8009944:	607b      	str	r3, [r7, #4]
 8009946:	e008      	b.n	800995a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009948:	4b08      	ldr	r3, [pc, #32]	; (800996c <xTaskGetSchedulerState+0x38>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009950:	2302      	movs	r3, #2
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	e001      	b.n	800995a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009956:	2300      	movs	r3, #0
 8009958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800995a:	687b      	ldr	r3, [r7, #4]
	}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	240050d0 	.word	0x240050d0
 800996c:	240050ec 	.word	0x240050ec

08009970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800997c:	2300      	movs	r3, #0
 800997e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d056      	beq.n	8009a34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009986:	4b2e      	ldr	r3, [pc, #184]	; (8009a40 <xTaskPriorityDisinherit+0xd0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	429a      	cmp	r2, r3
 800998e:	d00a      	beq.n	80099a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60bb      	str	r3, [r7, #8]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c8:	1e5a      	subs	r2, r3, #1
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d02c      	beq.n	8009a34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d128      	bne.n	8009a34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	3304      	adds	r3, #4
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe f9be 	bl	8007d68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <xTaskPriorityDisinherit+0xd4>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d903      	bls.n	8009a14 <xTaskPriorityDisinherit+0xa4>
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	4a0c      	ldr	r2, [pc, #48]	; (8009a44 <xTaskPriorityDisinherit+0xd4>)
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <xTaskPriorityDisinherit+0xd8>)
 8009a22:	441a      	add	r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	f7fe f93f 	bl	8007cae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a30:	2301      	movs	r3, #1
 8009a32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a34:	697b      	ldr	r3, [r7, #20]
	}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	24004bf0 	.word	0x24004bf0
 8009a44:	240050cc 	.word	0x240050cc
 8009a48:	24004bf4 	.word	0x24004bf4

08009a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a56:	4b21      	ldr	r3, [pc, #132]	; (8009adc <prvAddCurrentTaskToDelayedList+0x90>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a5c:	4b20      	ldr	r3, [pc, #128]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe f980 	bl	8007d68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d10a      	bne.n	8009a86 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a76:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4819      	ldr	r0, [pc, #100]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a80:	f7fe f915 	bl	8007cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a84:	e026      	b.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a8e:	4b14      	ldr	r3, [pc, #80]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d209      	bcs.n	8009ab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a9e:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe f923 	bl	8007cf6 <vListInsert>
}
 8009ab0:	e010      	b.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ab2:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe f919 	bl	8007cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ac4:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d202      	bcs.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ace:	4a08      	ldr	r2, [pc, #32]	; (8009af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6013      	str	r3, [r2, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	240050c8 	.word	0x240050c8
 8009ae0:	24004bf0 	.word	0x24004bf0
 8009ae4:	240050b0 	.word	0x240050b0
 8009ae8:	24005080 	.word	0x24005080
 8009aec:	2400507c 	.word	0x2400507c
 8009af0:	240050e4 	.word	0x240050e4

08009af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08a      	sub	sp, #40	; 0x28
 8009af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009afe:	f000 fb07 	bl	800a110 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b02:	4b1c      	ldr	r3, [pc, #112]	; (8009b74 <xTimerCreateTimerTask+0x80>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d021      	beq.n	8009b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b12:	1d3a      	adds	r2, r7, #4
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fd fe95 	bl	800784c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	9202      	str	r2, [sp, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	2300      	movs	r3, #0
 8009b32:	460a      	mov	r2, r1
 8009b34:	4910      	ldr	r1, [pc, #64]	; (8009b78 <xTimerCreateTimerTask+0x84>)
 8009b36:	4811      	ldr	r0, [pc, #68]	; (8009b7c <xTimerCreateTimerTask+0x88>)
 8009b38:	f7ff f8b4 	bl	8008ca4 <xTaskCreateStatic>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	4a10      	ldr	r2, [pc, #64]	; (8009b80 <xTimerCreateTimerTask+0x8c>)
 8009b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b42:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <xTimerCreateTimerTask+0x8c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	613b      	str	r3, [r7, #16]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	24005120 	.word	0x24005120
 8009b78:	0800ac00 	.word	0x0800ac00
 8009b7c:	08009cb9 	.word	0x08009cb9
 8009b80:	24005124 	.word	0x24005124

08009b84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	623b      	str	r3, [r7, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bb2:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <xTimerGenericCommand+0x98>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d02a      	beq.n	8009c10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	dc18      	bgt.n	8009bfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bcc:	f7ff feb2 	bl	8009934 <xTaskGetSchedulerState>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d109      	bne.n	8009bea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bd6:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <xTimerGenericCommand+0x98>)
 8009bd8:	6818      	ldr	r0, [r3, #0]
 8009bda:	f107 0110 	add.w	r1, r7, #16
 8009bde:	2300      	movs	r3, #0
 8009be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be2:	f7fe fc77 	bl	80084d4 <xQueueGenericSend>
 8009be6:	6278      	str	r0, [r7, #36]	; 0x24
 8009be8:	e012      	b.n	8009c10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bea:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <xTimerGenericCommand+0x98>)
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	f107 0110 	add.w	r1, r7, #16
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f7fe fc6d 	bl	80084d4 <xQueueGenericSend>
 8009bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8009bfc:	e008      	b.n	8009c10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bfe:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <xTimerGenericCommand+0x98>)
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	f107 0110 	add.w	r1, r7, #16
 8009c06:	2300      	movs	r3, #0
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	f7fe fd61 	bl	80086d0 <xQueueGenericSendFromISR>
 8009c0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3728      	adds	r7, #40	; 0x28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	24005120 	.word	0x24005120

08009c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c2a:	4b22      	ldr	r3, [pc, #136]	; (8009cb4 <prvProcessExpiredTimer+0x94>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	3304      	adds	r3, #4
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fe f895 	bl	8007d68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c44:	f003 0304 	and.w	r3, r3, #4
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d022      	beq.n	8009c92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	699a      	ldr	r2, [r3, #24]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	18d1      	adds	r1, r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	6978      	ldr	r0, [r7, #20]
 8009c5a:	f000 f8d1 	bl	8009e00 <prvInsertTimerInActiveList>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d01f      	beq.n	8009ca4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c64:	2300      	movs	r3, #0
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	6978      	ldr	r0, [r7, #20]
 8009c70:	f7ff ff88 	bl	8009b84 <xTimerGenericCommand>
 8009c74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d113      	bne.n	8009ca4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	60fb      	str	r3, [r7, #12]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c98:	f023 0301 	bic.w	r3, r3, #1
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	6978      	ldr	r0, [r7, #20]
 8009caa:	4798      	blx	r3
}
 8009cac:	bf00      	nop
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	24005118 	.word	0x24005118

08009cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cc0:	f107 0308 	add.w	r3, r7, #8
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 f857 	bl	8009d78 <prvGetNextExpireTime>
 8009cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f803 	bl	8009cdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cd6:	f000 f8d5 	bl	8009e84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cda:	e7f1      	b.n	8009cc0 <prvTimerTask+0x8>

08009cdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ce6:	f7ff fa39 	bl	800915c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cea:	f107 0308 	add.w	r3, r7, #8
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f866 	bl	8009dc0 <prvSampleTimeNow>
 8009cf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d130      	bne.n	8009d5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <prvProcessTimerOrBlockTask+0x3c>
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d806      	bhi.n	8009d18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d0a:	f7ff fa35 	bl	8009178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff ff85 	bl	8009c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d16:	e024      	b.n	8009d62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d008      	beq.n	8009d30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <prvProcessTimerOrBlockTask+0x90>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <prvProcessTimerOrBlockTask+0x50>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <prvProcessTimerOrBlockTask+0x52>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <prvProcessTimerOrBlockTask+0x94>)
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	f7fe ff7d 	bl	8008c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d42:	f7ff fa19 	bl	8009178 <xTaskResumeAll>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <prvProcessTimerOrBlockTask+0x98>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
}
 8009d5c:	e001      	b.n	8009d62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d5e:	f7ff fa0b 	bl	8009178 <xTaskResumeAll>
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	2400511c 	.word	0x2400511c
 8009d70:	24005120 	.word	0x24005120
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d80:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <prvGetNextExpireTime+0x44>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <prvGetNextExpireTime+0x16>
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	e000      	b.n	8009d90 <prvGetNextExpireTime+0x18>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d9c:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <prvGetNextExpireTime+0x44>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	e001      	b.n	8009dac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3714      	adds	r7, #20
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	24005118 	.word	0x24005118

08009dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dc8:	f7ff fa74 	bl	80092b4 <xTaskGetTickCount>
 8009dcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <prvSampleTimeNow+0x3c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d205      	bcs.n	8009de4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dd8:	f000 f936 	bl	800a048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e002      	b.n	8009dea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dea:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <prvSampleTimeNow+0x3c>)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	24005128 	.word	0x24005128

08009e00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d812      	bhi.n	8009e4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d302      	bcc.n	8009e3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	e01b      	b.n	8009e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e3a:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <prvInsertTimerInActiveList+0x7c>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f7fd ff56 	bl	8007cf6 <vListInsert>
 8009e4a:	e012      	b.n	8009e72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d206      	bcs.n	8009e62 <prvInsertTimerInActiveList+0x62>
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d302      	bcc.n	8009e62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	e007      	b.n	8009e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e62:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <prvInsertTimerInActiveList+0x80>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7fd ff42 	bl	8007cf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e72:	697b      	ldr	r3, [r7, #20]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	2400511c 	.word	0x2400511c
 8009e80:	24005118 	.word	0x24005118

08009e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	; 0x38
 8009e88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e8a:	e0ca      	b.n	800a022 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da18      	bge.n	8009ec4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e92:	1d3b      	adds	r3, r7, #4
 8009e94:	3304      	adds	r3, #4
 8009e96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	61fb      	str	r3, [r7, #28]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eba:	6850      	ldr	r0, [r2, #4]
 8009ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ebe:	6892      	ldr	r2, [r2, #8]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f2c0 80ab 	blt.w	800a022 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	3304      	adds	r3, #4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fd ff43 	bl	8007d68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff ff6b 	bl	8009dc0 <prvSampleTimeNow>
 8009eea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b09      	cmp	r3, #9
 8009ef0:	f200 8096 	bhi.w	800a020 <prvProcessReceivedCommands+0x19c>
 8009ef4:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <prvProcessReceivedCommands+0x78>)
 8009ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efa:	bf00      	nop
 8009efc:	08009f25 	.word	0x08009f25
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	08009f25 	.word	0x08009f25
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009fad 	.word	0x08009fad
 8009f10:	08009ff7 	.word	0x08009ff7
 8009f14:	08009f25 	.word	0x08009f25
 8009f18:	08009f25 	.word	0x08009f25
 8009f1c:	08009f99 	.word	0x08009f99
 8009f20:	08009fad 	.word	0x08009fad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f2a:	f043 0301 	orr.w	r3, r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	18d1      	adds	r1, r2, r3
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f44:	f7ff ff5c 	bl	8009e00 <prvInsertTimerInActiveList>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d069      	beq.n	800a022 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d05e      	beq.n	800a022 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2300      	movs	r3, #0
 8009f72:	2100      	movs	r1, #0
 8009f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f76:	f7ff fe05 	bl	8009b84 <xTimerGenericCommand>
 8009f7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d14f      	bne.n	800a022 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	61bb      	str	r3, [r7, #24]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009faa:	e03a      	b.n	800a022 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fb2:	f043 0301 	orr.w	r3, r3, #1
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	617b      	str	r3, [r7, #20]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	699a      	ldr	r2, [r3, #24]
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	18d1      	adds	r1, r2, r3
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ff0:	f7ff ff06 	bl	8009e00 <prvInsertTimerInActiveList>
					break;
 8009ff4:	e015      	b.n	800a022 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ffc:	f003 0302 	and.w	r3, r3, #2
 800a000:	2b00      	cmp	r3, #0
 800a002:	d103      	bne.n	800a00c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a006:	f7fd fd07 	bl	8007a18 <vPortFree>
 800a00a:	e00a      	b.n	800a022 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a012:	f023 0301 	bic.w	r3, r3, #1
 800a016:	b2da      	uxtb	r2, r3
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a01e:	e000      	b.n	800a022 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a020:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <prvProcessReceivedCommands+0x1c0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1d39      	adds	r1, r7, #4
 800a028:	2200      	movs	r2, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fbec 	bl	8008808 <xQueueReceive>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	f47f af2a 	bne.w	8009e8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	3730      	adds	r7, #48	; 0x30
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	24005120 	.word	0x24005120

0800a048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a04e:	e048      	b.n	800a0e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a050:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <prvSwitchTimerLists+0xc0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05a:	4b2b      	ldr	r3, [pc, #172]	; (800a108 <prvSwitchTimerLists+0xc0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3304      	adds	r3, #4
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fd fe7d 	bl	8007d68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	d02e      	beq.n	800a0e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4413      	add	r3, r2
 800a08c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	d90e      	bls.n	800a0b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0a2:	4b19      	ldr	r3, [pc, #100]	; (800a108 <prvSwitchTimerLists+0xc0>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	f7fd fe22 	bl	8007cf6 <vListInsert>
 800a0b2:	e016      	b.n	800a0e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7ff fd60 	bl	8009b84 <xTimerGenericCommand>
 800a0c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	603b      	str	r3, [r7, #0]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <prvSwitchTimerLists+0xc0>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1b1      	bne.n	800a050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <prvSwitchTimerLists+0xc0>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0f2:	4b06      	ldr	r3, [pc, #24]	; (800a10c <prvSwitchTimerLists+0xc4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a04      	ldr	r2, [pc, #16]	; (800a108 <prvSwitchTimerLists+0xc0>)
 800a0f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0fa:	4a04      	ldr	r2, [pc, #16]	; (800a10c <prvSwitchTimerLists+0xc4>)
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	6013      	str	r3, [r2, #0]
}
 800a100:	bf00      	nop
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	24005118 	.word	0x24005118
 800a10c:	2400511c 	.word	0x2400511c

0800a110 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a116:	f7fd ff7d 	bl	8008014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a11a:	4b15      	ldr	r3, [pc, #84]	; (800a170 <prvCheckForValidListAndQueue+0x60>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d120      	bne.n	800a164 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a122:	4814      	ldr	r0, [pc, #80]	; (800a174 <prvCheckForValidListAndQueue+0x64>)
 800a124:	f7fd fd96 	bl	8007c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a128:	4813      	ldr	r0, [pc, #76]	; (800a178 <prvCheckForValidListAndQueue+0x68>)
 800a12a:	f7fd fd93 	bl	8007c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a12e:	4b13      	ldr	r3, [pc, #76]	; (800a17c <prvCheckForValidListAndQueue+0x6c>)
 800a130:	4a10      	ldr	r2, [pc, #64]	; (800a174 <prvCheckForValidListAndQueue+0x64>)
 800a132:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a134:	4b12      	ldr	r3, [pc, #72]	; (800a180 <prvCheckForValidListAndQueue+0x70>)
 800a136:	4a10      	ldr	r2, [pc, #64]	; (800a178 <prvCheckForValidListAndQueue+0x68>)
 800a138:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a13a:	2300      	movs	r3, #0
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	4b11      	ldr	r3, [pc, #68]	; (800a184 <prvCheckForValidListAndQueue+0x74>)
 800a140:	4a11      	ldr	r2, [pc, #68]	; (800a188 <prvCheckForValidListAndQueue+0x78>)
 800a142:	2110      	movs	r1, #16
 800a144:	200a      	movs	r0, #10
 800a146:	f7fe f8ef 	bl	8008328 <xQueueGenericCreateStatic>
 800a14a:	4603      	mov	r3, r0
 800a14c:	4a08      	ldr	r2, [pc, #32]	; (800a170 <prvCheckForValidListAndQueue+0x60>)
 800a14e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a150:	4b07      	ldr	r3, [pc, #28]	; (800a170 <prvCheckForValidListAndQueue+0x60>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a158:	4b05      	ldr	r3, [pc, #20]	; (800a170 <prvCheckForValidListAndQueue+0x60>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	490b      	ldr	r1, [pc, #44]	; (800a18c <prvCheckForValidListAndQueue+0x7c>)
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fd42 	bl	8008be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a164:	f7fd ff86 	bl	8008074 <vPortExitCritical>
}
 800a168:	bf00      	nop
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	24005120 	.word	0x24005120
 800a174:	240050f0 	.word	0x240050f0
 800a178:	24005104 	.word	0x24005104
 800a17c:	24005118 	.word	0x24005118
 800a180:	2400511c 	.word	0x2400511c
 800a184:	240051cc 	.word	0x240051cc
 800a188:	2400512c 	.word	0x2400512c
 800a18c:	0800ac08 	.word	0x0800ac08

0800a190 <sniprintf>:
 800a190:	b40c      	push	{r2, r3}
 800a192:	b530      	push	{r4, r5, lr}
 800a194:	4b17      	ldr	r3, [pc, #92]	; (800a1f4 <sniprintf+0x64>)
 800a196:	1e0c      	subs	r4, r1, #0
 800a198:	681d      	ldr	r5, [r3, #0]
 800a19a:	b09d      	sub	sp, #116	; 0x74
 800a19c:	da08      	bge.n	800a1b0 <sniprintf+0x20>
 800a19e:	238b      	movs	r3, #139	; 0x8b
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a6:	b01d      	add	sp, #116	; 0x74
 800a1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1ac:	b002      	add	sp, #8
 800a1ae:	4770      	bx	lr
 800a1b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a1b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a1b8:	bf14      	ite	ne
 800a1ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1be:	4623      	moveq	r3, r4
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	9307      	str	r3, [sp, #28]
 800a1c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1c8:	9002      	str	r0, [sp, #8]
 800a1ca:	9006      	str	r0, [sp, #24]
 800a1cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a1d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1d2:	ab21      	add	r3, sp, #132	; 0x84
 800a1d4:	a902      	add	r1, sp, #8
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	f000 f9f7 	bl	800a5cc <_svfiprintf_r>
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	bfbc      	itt	lt
 800a1e2:	238b      	movlt	r3, #139	; 0x8b
 800a1e4:	602b      	strlt	r3, [r5, #0]
 800a1e6:	2c00      	cmp	r4, #0
 800a1e8:	d0dd      	beq.n	800a1a6 <sniprintf+0x16>
 800a1ea:	9b02      	ldr	r3, [sp, #8]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	e7d9      	b.n	800a1a6 <sniprintf+0x16>
 800a1f2:	bf00      	nop
 800a1f4:	24000060 	.word	0x24000060

0800a1f8 <memset>:
 800a1f8:	4402      	add	r2, r0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d100      	bne.n	800a202 <memset+0xa>
 800a200:	4770      	bx	lr
 800a202:	f803 1b01 	strb.w	r1, [r3], #1
 800a206:	e7f9      	b.n	800a1fc <memset+0x4>

0800a208 <_reclaim_reent>:
 800a208:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <_reclaim_reent+0xa8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4283      	cmp	r3, r0
 800a20e:	b570      	push	{r4, r5, r6, lr}
 800a210:	4604      	mov	r4, r0
 800a212:	d04b      	beq.n	800a2ac <_reclaim_reent+0xa4>
 800a214:	69c3      	ldr	r3, [r0, #28]
 800a216:	b143      	cbz	r3, 800a22a <_reclaim_reent+0x22>
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d144      	bne.n	800a2a8 <_reclaim_reent+0xa0>
 800a21e:	69e3      	ldr	r3, [r4, #28]
 800a220:	6819      	ldr	r1, [r3, #0]
 800a222:	b111      	cbz	r1, 800a22a <_reclaim_reent+0x22>
 800a224:	4620      	mov	r0, r4
 800a226:	f000 f87f 	bl	800a328 <_free_r>
 800a22a:	6961      	ldr	r1, [r4, #20]
 800a22c:	b111      	cbz	r1, 800a234 <_reclaim_reent+0x2c>
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f87a 	bl	800a328 <_free_r>
 800a234:	69e1      	ldr	r1, [r4, #28]
 800a236:	b111      	cbz	r1, 800a23e <_reclaim_reent+0x36>
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 f875 	bl	800a328 <_free_r>
 800a23e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a240:	b111      	cbz	r1, 800a248 <_reclaim_reent+0x40>
 800a242:	4620      	mov	r0, r4
 800a244:	f000 f870 	bl	800a328 <_free_r>
 800a248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a24a:	b111      	cbz	r1, 800a252 <_reclaim_reent+0x4a>
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 f86b 	bl	800a328 <_free_r>
 800a252:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a254:	b111      	cbz	r1, 800a25c <_reclaim_reent+0x54>
 800a256:	4620      	mov	r0, r4
 800a258:	f000 f866 	bl	800a328 <_free_r>
 800a25c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a25e:	b111      	cbz	r1, 800a266 <_reclaim_reent+0x5e>
 800a260:	4620      	mov	r0, r4
 800a262:	f000 f861 	bl	800a328 <_free_r>
 800a266:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a268:	b111      	cbz	r1, 800a270 <_reclaim_reent+0x68>
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 f85c 	bl	800a328 <_free_r>
 800a270:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a272:	b111      	cbz	r1, 800a27a <_reclaim_reent+0x72>
 800a274:	4620      	mov	r0, r4
 800a276:	f000 f857 	bl	800a328 <_free_r>
 800a27a:	6a23      	ldr	r3, [r4, #32]
 800a27c:	b1b3      	cbz	r3, 800a2ac <_reclaim_reent+0xa4>
 800a27e:	4620      	mov	r0, r4
 800a280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a284:	4718      	bx	r3
 800a286:	5949      	ldr	r1, [r1, r5]
 800a288:	b941      	cbnz	r1, 800a29c <_reclaim_reent+0x94>
 800a28a:	3504      	adds	r5, #4
 800a28c:	69e3      	ldr	r3, [r4, #28]
 800a28e:	2d80      	cmp	r5, #128	; 0x80
 800a290:	68d9      	ldr	r1, [r3, #12]
 800a292:	d1f8      	bne.n	800a286 <_reclaim_reent+0x7e>
 800a294:	4620      	mov	r0, r4
 800a296:	f000 f847 	bl	800a328 <_free_r>
 800a29a:	e7c0      	b.n	800a21e <_reclaim_reent+0x16>
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f842 	bl	800a328 <_free_r>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	e7ef      	b.n	800a288 <_reclaim_reent+0x80>
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	e7ef      	b.n	800a28c <_reclaim_reent+0x84>
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	bf00      	nop
 800a2b0:	24000060 	.word	0x24000060

0800a2b4 <__errno>:
 800a2b4:	4b01      	ldr	r3, [pc, #4]	; (800a2bc <__errno+0x8>)
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	24000060 	.word	0x24000060

0800a2c0 <__libc_init_array>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	4d0d      	ldr	r5, [pc, #52]	; (800a2f8 <__libc_init_array+0x38>)
 800a2c4:	4c0d      	ldr	r4, [pc, #52]	; (800a2fc <__libc_init_array+0x3c>)
 800a2c6:	1b64      	subs	r4, r4, r5
 800a2c8:	10a4      	asrs	r4, r4, #2
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	42a6      	cmp	r6, r4
 800a2ce:	d109      	bne.n	800a2e4 <__libc_init_array+0x24>
 800a2d0:	4d0b      	ldr	r5, [pc, #44]	; (800a300 <__libc_init_array+0x40>)
 800a2d2:	4c0c      	ldr	r4, [pc, #48]	; (800a304 <__libc_init_array+0x44>)
 800a2d4:	f000 fc6a 	bl	800abac <_init>
 800a2d8:	1b64      	subs	r4, r4, r5
 800a2da:	10a4      	asrs	r4, r4, #2
 800a2dc:	2600      	movs	r6, #0
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	d105      	bne.n	800a2ee <__libc_init_array+0x2e>
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e8:	4798      	blx	r3
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	e7ee      	b.n	800a2cc <__libc_init_array+0xc>
 800a2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f2:	4798      	blx	r3
 800a2f4:	3601      	adds	r6, #1
 800a2f6:	e7f2      	b.n	800a2de <__libc_init_array+0x1e>
 800a2f8:	0800ace4 	.word	0x0800ace4
 800a2fc:	0800ace4 	.word	0x0800ace4
 800a300:	0800ace4 	.word	0x0800ace4
 800a304:	0800ace8 	.word	0x0800ace8

0800a308 <__retarget_lock_acquire_recursive>:
 800a308:	4770      	bx	lr

0800a30a <__retarget_lock_release_recursive>:
 800a30a:	4770      	bx	lr

0800a30c <memcpy>:
 800a30c:	440a      	add	r2, r1
 800a30e:	4291      	cmp	r1, r2
 800a310:	f100 33ff 	add.w	r3, r0, #4294967295
 800a314:	d100      	bne.n	800a318 <memcpy+0xc>
 800a316:	4770      	bx	lr
 800a318:	b510      	push	{r4, lr}
 800a31a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a31e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a322:	4291      	cmp	r1, r2
 800a324:	d1f9      	bne.n	800a31a <memcpy+0xe>
 800a326:	bd10      	pop	{r4, pc}

0800a328 <_free_r>:
 800a328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a32a:	2900      	cmp	r1, #0
 800a32c:	d044      	beq.n	800a3b8 <_free_r+0x90>
 800a32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a332:	9001      	str	r0, [sp, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f1a1 0404 	sub.w	r4, r1, #4
 800a33a:	bfb8      	it	lt
 800a33c:	18e4      	addlt	r4, r4, r3
 800a33e:	f000 f8df 	bl	800a500 <__malloc_lock>
 800a342:	4a1e      	ldr	r2, [pc, #120]	; (800a3bc <_free_r+0x94>)
 800a344:	9801      	ldr	r0, [sp, #4]
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	b933      	cbnz	r3, 800a358 <_free_r+0x30>
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	6014      	str	r4, [r2, #0]
 800a34e:	b003      	add	sp, #12
 800a350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a354:	f000 b8da 	b.w	800a50c <__malloc_unlock>
 800a358:	42a3      	cmp	r3, r4
 800a35a:	d908      	bls.n	800a36e <_free_r+0x46>
 800a35c:	6825      	ldr	r5, [r4, #0]
 800a35e:	1961      	adds	r1, r4, r5
 800a360:	428b      	cmp	r3, r1
 800a362:	bf01      	itttt	eq
 800a364:	6819      	ldreq	r1, [r3, #0]
 800a366:	685b      	ldreq	r3, [r3, #4]
 800a368:	1949      	addeq	r1, r1, r5
 800a36a:	6021      	streq	r1, [r4, #0]
 800a36c:	e7ed      	b.n	800a34a <_free_r+0x22>
 800a36e:	461a      	mov	r2, r3
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	b10b      	cbz	r3, 800a378 <_free_r+0x50>
 800a374:	42a3      	cmp	r3, r4
 800a376:	d9fa      	bls.n	800a36e <_free_r+0x46>
 800a378:	6811      	ldr	r1, [r2, #0]
 800a37a:	1855      	adds	r5, r2, r1
 800a37c:	42a5      	cmp	r5, r4
 800a37e:	d10b      	bne.n	800a398 <_free_r+0x70>
 800a380:	6824      	ldr	r4, [r4, #0]
 800a382:	4421      	add	r1, r4
 800a384:	1854      	adds	r4, r2, r1
 800a386:	42a3      	cmp	r3, r4
 800a388:	6011      	str	r1, [r2, #0]
 800a38a:	d1e0      	bne.n	800a34e <_free_r+0x26>
 800a38c:	681c      	ldr	r4, [r3, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	6053      	str	r3, [r2, #4]
 800a392:	440c      	add	r4, r1
 800a394:	6014      	str	r4, [r2, #0]
 800a396:	e7da      	b.n	800a34e <_free_r+0x26>
 800a398:	d902      	bls.n	800a3a0 <_free_r+0x78>
 800a39a:	230c      	movs	r3, #12
 800a39c:	6003      	str	r3, [r0, #0]
 800a39e:	e7d6      	b.n	800a34e <_free_r+0x26>
 800a3a0:	6825      	ldr	r5, [r4, #0]
 800a3a2:	1961      	adds	r1, r4, r5
 800a3a4:	428b      	cmp	r3, r1
 800a3a6:	bf04      	itt	eq
 800a3a8:	6819      	ldreq	r1, [r3, #0]
 800a3aa:	685b      	ldreq	r3, [r3, #4]
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	bf04      	itt	eq
 800a3b0:	1949      	addeq	r1, r1, r5
 800a3b2:	6021      	streq	r1, [r4, #0]
 800a3b4:	6054      	str	r4, [r2, #4]
 800a3b6:	e7ca      	b.n	800a34e <_free_r+0x26>
 800a3b8:	b003      	add	sp, #12
 800a3ba:	bd30      	pop	{r4, r5, pc}
 800a3bc:	2400535c 	.word	0x2400535c

0800a3c0 <sbrk_aligned>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	4e0e      	ldr	r6, [pc, #56]	; (800a3fc <sbrk_aligned+0x3c>)
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	6831      	ldr	r1, [r6, #0]
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	b911      	cbnz	r1, 800a3d2 <sbrk_aligned+0x12>
 800a3cc:	f000 fba6 	bl	800ab1c <_sbrk_r>
 800a3d0:	6030      	str	r0, [r6, #0]
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f000 fba1 	bl	800ab1c <_sbrk_r>
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	d00a      	beq.n	800a3f4 <sbrk_aligned+0x34>
 800a3de:	1cc4      	adds	r4, r0, #3
 800a3e0:	f024 0403 	bic.w	r4, r4, #3
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d007      	beq.n	800a3f8 <sbrk_aligned+0x38>
 800a3e8:	1a21      	subs	r1, r4, r0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f000 fb96 	bl	800ab1c <_sbrk_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d101      	bne.n	800a3f8 <sbrk_aligned+0x38>
 800a3f4:	f04f 34ff 	mov.w	r4, #4294967295
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
 800a3fc:	24005360 	.word	0x24005360

0800a400 <_malloc_r>:
 800a400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a404:	1ccd      	adds	r5, r1, #3
 800a406:	f025 0503 	bic.w	r5, r5, #3
 800a40a:	3508      	adds	r5, #8
 800a40c:	2d0c      	cmp	r5, #12
 800a40e:	bf38      	it	cc
 800a410:	250c      	movcc	r5, #12
 800a412:	2d00      	cmp	r5, #0
 800a414:	4607      	mov	r7, r0
 800a416:	db01      	blt.n	800a41c <_malloc_r+0x1c>
 800a418:	42a9      	cmp	r1, r5
 800a41a:	d905      	bls.n	800a428 <_malloc_r+0x28>
 800a41c:	230c      	movs	r3, #12
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	2600      	movs	r6, #0
 800a422:	4630      	mov	r0, r6
 800a424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a428:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a4fc <_malloc_r+0xfc>
 800a42c:	f000 f868 	bl	800a500 <__malloc_lock>
 800a430:	f8d8 3000 	ldr.w	r3, [r8]
 800a434:	461c      	mov	r4, r3
 800a436:	bb5c      	cbnz	r4, 800a490 <_malloc_r+0x90>
 800a438:	4629      	mov	r1, r5
 800a43a:	4638      	mov	r0, r7
 800a43c:	f7ff ffc0 	bl	800a3c0 <sbrk_aligned>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	4604      	mov	r4, r0
 800a444:	d155      	bne.n	800a4f2 <_malloc_r+0xf2>
 800a446:	f8d8 4000 	ldr.w	r4, [r8]
 800a44a:	4626      	mov	r6, r4
 800a44c:	2e00      	cmp	r6, #0
 800a44e:	d145      	bne.n	800a4dc <_malloc_r+0xdc>
 800a450:	2c00      	cmp	r4, #0
 800a452:	d048      	beq.n	800a4e6 <_malloc_r+0xe6>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	4631      	mov	r1, r6
 800a458:	4638      	mov	r0, r7
 800a45a:	eb04 0903 	add.w	r9, r4, r3
 800a45e:	f000 fb5d 	bl	800ab1c <_sbrk_r>
 800a462:	4581      	cmp	r9, r0
 800a464:	d13f      	bne.n	800a4e6 <_malloc_r+0xe6>
 800a466:	6821      	ldr	r1, [r4, #0]
 800a468:	1a6d      	subs	r5, r5, r1
 800a46a:	4629      	mov	r1, r5
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff ffa7 	bl	800a3c0 <sbrk_aligned>
 800a472:	3001      	adds	r0, #1
 800a474:	d037      	beq.n	800a4e6 <_malloc_r+0xe6>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	442b      	add	r3, r5
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	f8d8 3000 	ldr.w	r3, [r8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d038      	beq.n	800a4f6 <_malloc_r+0xf6>
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	42a2      	cmp	r2, r4
 800a488:	d12b      	bne.n	800a4e2 <_malloc_r+0xe2>
 800a48a:	2200      	movs	r2, #0
 800a48c:	605a      	str	r2, [r3, #4]
 800a48e:	e00f      	b.n	800a4b0 <_malloc_r+0xb0>
 800a490:	6822      	ldr	r2, [r4, #0]
 800a492:	1b52      	subs	r2, r2, r5
 800a494:	d41f      	bmi.n	800a4d6 <_malloc_r+0xd6>
 800a496:	2a0b      	cmp	r2, #11
 800a498:	d917      	bls.n	800a4ca <_malloc_r+0xca>
 800a49a:	1961      	adds	r1, r4, r5
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	6025      	str	r5, [r4, #0]
 800a4a0:	bf18      	it	ne
 800a4a2:	6059      	strne	r1, [r3, #4]
 800a4a4:	6863      	ldr	r3, [r4, #4]
 800a4a6:	bf08      	it	eq
 800a4a8:	f8c8 1000 	streq.w	r1, [r8]
 800a4ac:	5162      	str	r2, [r4, r5]
 800a4ae:	604b      	str	r3, [r1, #4]
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f104 060b 	add.w	r6, r4, #11
 800a4b6:	f000 f829 	bl	800a50c <__malloc_unlock>
 800a4ba:	f026 0607 	bic.w	r6, r6, #7
 800a4be:	1d23      	adds	r3, r4, #4
 800a4c0:	1af2      	subs	r2, r6, r3
 800a4c2:	d0ae      	beq.n	800a422 <_malloc_r+0x22>
 800a4c4:	1b9b      	subs	r3, r3, r6
 800a4c6:	50a3      	str	r3, [r4, r2]
 800a4c8:	e7ab      	b.n	800a422 <_malloc_r+0x22>
 800a4ca:	42a3      	cmp	r3, r4
 800a4cc:	6862      	ldr	r2, [r4, #4]
 800a4ce:	d1dd      	bne.n	800a48c <_malloc_r+0x8c>
 800a4d0:	f8c8 2000 	str.w	r2, [r8]
 800a4d4:	e7ec      	b.n	800a4b0 <_malloc_r+0xb0>
 800a4d6:	4623      	mov	r3, r4
 800a4d8:	6864      	ldr	r4, [r4, #4]
 800a4da:	e7ac      	b.n	800a436 <_malloc_r+0x36>
 800a4dc:	4634      	mov	r4, r6
 800a4de:	6876      	ldr	r6, [r6, #4]
 800a4e0:	e7b4      	b.n	800a44c <_malloc_r+0x4c>
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	e7cc      	b.n	800a480 <_malloc_r+0x80>
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	603b      	str	r3, [r7, #0]
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	f000 f80e 	bl	800a50c <__malloc_unlock>
 800a4f0:	e797      	b.n	800a422 <_malloc_r+0x22>
 800a4f2:	6025      	str	r5, [r4, #0]
 800a4f4:	e7dc      	b.n	800a4b0 <_malloc_r+0xb0>
 800a4f6:	605b      	str	r3, [r3, #4]
 800a4f8:	deff      	udf	#255	; 0xff
 800a4fa:	bf00      	nop
 800a4fc:	2400535c 	.word	0x2400535c

0800a500 <__malloc_lock>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__malloc_lock+0x8>)
 800a502:	f7ff bf01 	b.w	800a308 <__retarget_lock_acquire_recursive>
 800a506:	bf00      	nop
 800a508:	24005358 	.word	0x24005358

0800a50c <__malloc_unlock>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__malloc_unlock+0x8>)
 800a50e:	f7ff befc 	b.w	800a30a <__retarget_lock_release_recursive>
 800a512:	bf00      	nop
 800a514:	24005358 	.word	0x24005358

0800a518 <__ssputs_r>:
 800a518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	688e      	ldr	r6, [r1, #8]
 800a51e:	461f      	mov	r7, r3
 800a520:	42be      	cmp	r6, r7
 800a522:	680b      	ldr	r3, [r1, #0]
 800a524:	4682      	mov	sl, r0
 800a526:	460c      	mov	r4, r1
 800a528:	4690      	mov	r8, r2
 800a52a:	d82c      	bhi.n	800a586 <__ssputs_r+0x6e>
 800a52c:	898a      	ldrh	r2, [r1, #12]
 800a52e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a532:	d026      	beq.n	800a582 <__ssputs_r+0x6a>
 800a534:	6965      	ldr	r5, [r4, #20]
 800a536:	6909      	ldr	r1, [r1, #16]
 800a538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a53c:	eba3 0901 	sub.w	r9, r3, r1
 800a540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a544:	1c7b      	adds	r3, r7, #1
 800a546:	444b      	add	r3, r9
 800a548:	106d      	asrs	r5, r5, #1
 800a54a:	429d      	cmp	r5, r3
 800a54c:	bf38      	it	cc
 800a54e:	461d      	movcc	r5, r3
 800a550:	0553      	lsls	r3, r2, #21
 800a552:	d527      	bpl.n	800a5a4 <__ssputs_r+0x8c>
 800a554:	4629      	mov	r1, r5
 800a556:	f7ff ff53 	bl	800a400 <_malloc_r>
 800a55a:	4606      	mov	r6, r0
 800a55c:	b360      	cbz	r0, 800a5b8 <__ssputs_r+0xa0>
 800a55e:	6921      	ldr	r1, [r4, #16]
 800a560:	464a      	mov	r2, r9
 800a562:	f7ff fed3 	bl	800a30c <memcpy>
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	6126      	str	r6, [r4, #16]
 800a574:	6165      	str	r5, [r4, #20]
 800a576:	444e      	add	r6, r9
 800a578:	eba5 0509 	sub.w	r5, r5, r9
 800a57c:	6026      	str	r6, [r4, #0]
 800a57e:	60a5      	str	r5, [r4, #8]
 800a580:	463e      	mov	r6, r7
 800a582:	42be      	cmp	r6, r7
 800a584:	d900      	bls.n	800a588 <__ssputs_r+0x70>
 800a586:	463e      	mov	r6, r7
 800a588:	6820      	ldr	r0, [r4, #0]
 800a58a:	4632      	mov	r2, r6
 800a58c:	4641      	mov	r1, r8
 800a58e:	f000 faab 	bl	800aae8 <memmove>
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	1b9b      	subs	r3, r3, r6
 800a596:	60a3      	str	r3, [r4, #8]
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	4433      	add	r3, r6
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a4:	462a      	mov	r2, r5
 800a5a6:	f000 fac9 	bl	800ab3c <_realloc_r>
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d1e0      	bne.n	800a572 <__ssputs_r+0x5a>
 800a5b0:	6921      	ldr	r1, [r4, #16]
 800a5b2:	4650      	mov	r0, sl
 800a5b4:	f7ff feb8 	bl	800a328 <_free_r>
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	f8ca 3000 	str.w	r3, [sl]
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c4:	81a3      	strh	r3, [r4, #12]
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ca:	e7e9      	b.n	800a5a0 <__ssputs_r+0x88>

0800a5cc <_svfiprintf_r>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4698      	mov	r8, r3
 800a5d2:	898b      	ldrh	r3, [r1, #12]
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	b09d      	sub	sp, #116	; 0x74
 800a5d8:	4607      	mov	r7, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	4614      	mov	r4, r2
 800a5de:	d50e      	bpl.n	800a5fe <_svfiprintf_r+0x32>
 800a5e0:	690b      	ldr	r3, [r1, #16]
 800a5e2:	b963      	cbnz	r3, 800a5fe <_svfiprintf_r+0x32>
 800a5e4:	2140      	movs	r1, #64	; 0x40
 800a5e6:	f7ff ff0b 	bl	800a400 <_malloc_r>
 800a5ea:	6028      	str	r0, [r5, #0]
 800a5ec:	6128      	str	r0, [r5, #16]
 800a5ee:	b920      	cbnz	r0, 800a5fa <_svfiprintf_r+0x2e>
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e0d0      	b.n	800a79c <_svfiprintf_r+0x1d0>
 800a5fa:	2340      	movs	r3, #64	; 0x40
 800a5fc:	616b      	str	r3, [r5, #20]
 800a5fe:	2300      	movs	r3, #0
 800a600:	9309      	str	r3, [sp, #36]	; 0x24
 800a602:	2320      	movs	r3, #32
 800a604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a608:	f8cd 800c 	str.w	r8, [sp, #12]
 800a60c:	2330      	movs	r3, #48	; 0x30
 800a60e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a7b4 <_svfiprintf_r+0x1e8>
 800a612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a616:	f04f 0901 	mov.w	r9, #1
 800a61a:	4623      	mov	r3, r4
 800a61c:	469a      	mov	sl, r3
 800a61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a622:	b10a      	cbz	r2, 800a628 <_svfiprintf_r+0x5c>
 800a624:	2a25      	cmp	r2, #37	; 0x25
 800a626:	d1f9      	bne.n	800a61c <_svfiprintf_r+0x50>
 800a628:	ebba 0b04 	subs.w	fp, sl, r4
 800a62c:	d00b      	beq.n	800a646 <_svfiprintf_r+0x7a>
 800a62e:	465b      	mov	r3, fp
 800a630:	4622      	mov	r2, r4
 800a632:	4629      	mov	r1, r5
 800a634:	4638      	mov	r0, r7
 800a636:	f7ff ff6f 	bl	800a518 <__ssputs_r>
 800a63a:	3001      	adds	r0, #1
 800a63c:	f000 80a9 	beq.w	800a792 <_svfiprintf_r+0x1c6>
 800a640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a642:	445a      	add	r2, fp
 800a644:	9209      	str	r2, [sp, #36]	; 0x24
 800a646:	f89a 3000 	ldrb.w	r3, [sl]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80a1 	beq.w	800a792 <_svfiprintf_r+0x1c6>
 800a650:	2300      	movs	r3, #0
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a65a:	f10a 0a01 	add.w	sl, sl, #1
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a666:	931a      	str	r3, [sp, #104]	; 0x68
 800a668:	4654      	mov	r4, sl
 800a66a:	2205      	movs	r2, #5
 800a66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a670:	4850      	ldr	r0, [pc, #320]	; (800a7b4 <_svfiprintf_r+0x1e8>)
 800a672:	f7f5 fe3d 	bl	80002f0 <memchr>
 800a676:	9a04      	ldr	r2, [sp, #16]
 800a678:	b9d8      	cbnz	r0, 800a6b2 <_svfiprintf_r+0xe6>
 800a67a:	06d0      	lsls	r0, r2, #27
 800a67c:	bf44      	itt	mi
 800a67e:	2320      	movmi	r3, #32
 800a680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a684:	0711      	lsls	r1, r2, #28
 800a686:	bf44      	itt	mi
 800a688:	232b      	movmi	r3, #43	; 0x2b
 800a68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68e:	f89a 3000 	ldrb.w	r3, [sl]
 800a692:	2b2a      	cmp	r3, #42	; 0x2a
 800a694:	d015      	beq.n	800a6c2 <_svfiprintf_r+0xf6>
 800a696:	9a07      	ldr	r2, [sp, #28]
 800a698:	4654      	mov	r4, sl
 800a69a:	2000      	movs	r0, #0
 800a69c:	f04f 0c0a 	mov.w	ip, #10
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a6:	3b30      	subs	r3, #48	; 0x30
 800a6a8:	2b09      	cmp	r3, #9
 800a6aa:	d94d      	bls.n	800a748 <_svfiprintf_r+0x17c>
 800a6ac:	b1b0      	cbz	r0, 800a6dc <_svfiprintf_r+0x110>
 800a6ae:	9207      	str	r2, [sp, #28]
 800a6b0:	e014      	b.n	800a6dc <_svfiprintf_r+0x110>
 800a6b2:	eba0 0308 	sub.w	r3, r0, r8
 800a6b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	46a2      	mov	sl, r4
 800a6c0:	e7d2      	b.n	800a668 <_svfiprintf_r+0x9c>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	1d19      	adds	r1, r3, #4
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	9103      	str	r1, [sp, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bfbb      	ittet	lt
 800a6ce:	425b      	neglt	r3, r3
 800a6d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d4:	9307      	strge	r3, [sp, #28]
 800a6d6:	9307      	strlt	r3, [sp, #28]
 800a6d8:	bfb8      	it	lt
 800a6da:	9204      	strlt	r2, [sp, #16]
 800a6dc:	7823      	ldrb	r3, [r4, #0]
 800a6de:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e0:	d10c      	bne.n	800a6fc <_svfiprintf_r+0x130>
 800a6e2:	7863      	ldrb	r3, [r4, #1]
 800a6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e6:	d134      	bne.n	800a752 <_svfiprintf_r+0x186>
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	1d1a      	adds	r2, r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	9203      	str	r2, [sp, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfb8      	it	lt
 800a6f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f8:	3402      	adds	r4, #2
 800a6fa:	9305      	str	r3, [sp, #20]
 800a6fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a7c4 <_svfiprintf_r+0x1f8>
 800a700:	7821      	ldrb	r1, [r4, #0]
 800a702:	2203      	movs	r2, #3
 800a704:	4650      	mov	r0, sl
 800a706:	f7f5 fdf3 	bl	80002f0 <memchr>
 800a70a:	b138      	cbz	r0, 800a71c <_svfiprintf_r+0x150>
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	eba0 000a 	sub.w	r0, r0, sl
 800a712:	2240      	movs	r2, #64	; 0x40
 800a714:	4082      	lsls	r2, r0
 800a716:	4313      	orrs	r3, r2
 800a718:	3401      	adds	r4, #1
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a720:	4825      	ldr	r0, [pc, #148]	; (800a7b8 <_svfiprintf_r+0x1ec>)
 800a722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a726:	2206      	movs	r2, #6
 800a728:	f7f5 fde2 	bl	80002f0 <memchr>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d038      	beq.n	800a7a2 <_svfiprintf_r+0x1d6>
 800a730:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <_svfiprintf_r+0x1f0>)
 800a732:	bb1b      	cbnz	r3, 800a77c <_svfiprintf_r+0x1b0>
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	3307      	adds	r3, #7
 800a738:	f023 0307 	bic.w	r3, r3, #7
 800a73c:	3308      	adds	r3, #8
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a742:	4433      	add	r3, r6
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
 800a746:	e768      	b.n	800a61a <_svfiprintf_r+0x4e>
 800a748:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74c:	460c      	mov	r4, r1
 800a74e:	2001      	movs	r0, #1
 800a750:	e7a6      	b.n	800a6a0 <_svfiprintf_r+0xd4>
 800a752:	2300      	movs	r3, #0
 800a754:	3401      	adds	r4, #1
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	4619      	mov	r1, r3
 800a75a:	f04f 0c0a 	mov.w	ip, #10
 800a75e:	4620      	mov	r0, r4
 800a760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a764:	3a30      	subs	r2, #48	; 0x30
 800a766:	2a09      	cmp	r2, #9
 800a768:	d903      	bls.n	800a772 <_svfiprintf_r+0x1a6>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0c6      	beq.n	800a6fc <_svfiprintf_r+0x130>
 800a76e:	9105      	str	r1, [sp, #20]
 800a770:	e7c4      	b.n	800a6fc <_svfiprintf_r+0x130>
 800a772:	fb0c 2101 	mla	r1, ip, r1, r2
 800a776:	4604      	mov	r4, r0
 800a778:	2301      	movs	r3, #1
 800a77a:	e7f0      	b.n	800a75e <_svfiprintf_r+0x192>
 800a77c:	ab03      	add	r3, sp, #12
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	462a      	mov	r2, r5
 800a782:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <_svfiprintf_r+0x1f4>)
 800a784:	a904      	add	r1, sp, #16
 800a786:	4638      	mov	r0, r7
 800a788:	f3af 8000 	nop.w
 800a78c:	1c42      	adds	r2, r0, #1
 800a78e:	4606      	mov	r6, r0
 800a790:	d1d6      	bne.n	800a740 <_svfiprintf_r+0x174>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	065b      	lsls	r3, r3, #25
 800a796:	f53f af2d 	bmi.w	800a5f4 <_svfiprintf_r+0x28>
 800a79a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79c:	b01d      	add	sp, #116	; 0x74
 800a79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a2:	ab03      	add	r3, sp, #12
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <_svfiprintf_r+0x1f4>)
 800a7aa:	a904      	add	r1, sp, #16
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f000 f879 	bl	800a8a4 <_printf_i>
 800a7b2:	e7eb      	b.n	800a78c <_svfiprintf_r+0x1c0>
 800a7b4:	0800aca8 	.word	0x0800aca8
 800a7b8:	0800acb2 	.word	0x0800acb2
 800a7bc:	00000000 	.word	0x00000000
 800a7c0:	0800a519 	.word	0x0800a519
 800a7c4:	0800acae 	.word	0x0800acae

0800a7c8 <_printf_common>:
 800a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	4699      	mov	r9, r3
 800a7d0:	688a      	ldr	r2, [r1, #8]
 800a7d2:	690b      	ldr	r3, [r1, #16]
 800a7d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	bfb8      	it	lt
 800a7dc:	4613      	movlt	r3, r2
 800a7de:	6033      	str	r3, [r6, #0]
 800a7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	b10a      	cbz	r2, 800a7ee <_printf_common+0x26>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	6033      	str	r3, [r6, #0]
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	0699      	lsls	r1, r3, #26
 800a7f2:	bf42      	ittt	mi
 800a7f4:	6833      	ldrmi	r3, [r6, #0]
 800a7f6:	3302      	addmi	r3, #2
 800a7f8:	6033      	strmi	r3, [r6, #0]
 800a7fa:	6825      	ldr	r5, [r4, #0]
 800a7fc:	f015 0506 	ands.w	r5, r5, #6
 800a800:	d106      	bne.n	800a810 <_printf_common+0x48>
 800a802:	f104 0a19 	add.w	sl, r4, #25
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	6832      	ldr	r2, [r6, #0]
 800a80a:	1a9b      	subs	r3, r3, r2
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	dc26      	bgt.n	800a85e <_printf_common+0x96>
 800a810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a814:	1e13      	subs	r3, r2, #0
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	bf18      	it	ne
 800a81a:	2301      	movne	r3, #1
 800a81c:	0692      	lsls	r2, r2, #26
 800a81e:	d42b      	bmi.n	800a878 <_printf_common+0xb0>
 800a820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a824:	4649      	mov	r1, r9
 800a826:	4638      	mov	r0, r7
 800a828:	47c0      	blx	r8
 800a82a:	3001      	adds	r0, #1
 800a82c:	d01e      	beq.n	800a86c <_printf_common+0xa4>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	6922      	ldr	r2, [r4, #16]
 800a832:	f003 0306 	and.w	r3, r3, #6
 800a836:	2b04      	cmp	r3, #4
 800a838:	bf02      	ittt	eq
 800a83a:	68e5      	ldreq	r5, [r4, #12]
 800a83c:	6833      	ldreq	r3, [r6, #0]
 800a83e:	1aed      	subeq	r5, r5, r3
 800a840:	68a3      	ldr	r3, [r4, #8]
 800a842:	bf0c      	ite	eq
 800a844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a848:	2500      	movne	r5, #0
 800a84a:	4293      	cmp	r3, r2
 800a84c:	bfc4      	itt	gt
 800a84e:	1a9b      	subgt	r3, r3, r2
 800a850:	18ed      	addgt	r5, r5, r3
 800a852:	2600      	movs	r6, #0
 800a854:	341a      	adds	r4, #26
 800a856:	42b5      	cmp	r5, r6
 800a858:	d11a      	bne.n	800a890 <_printf_common+0xc8>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e008      	b.n	800a870 <_printf_common+0xa8>
 800a85e:	2301      	movs	r3, #1
 800a860:	4652      	mov	r2, sl
 800a862:	4649      	mov	r1, r9
 800a864:	4638      	mov	r0, r7
 800a866:	47c0      	blx	r8
 800a868:	3001      	adds	r0, #1
 800a86a:	d103      	bne.n	800a874 <_printf_common+0xac>
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a874:	3501      	adds	r5, #1
 800a876:	e7c6      	b.n	800a806 <_printf_common+0x3e>
 800a878:	18e1      	adds	r1, r4, r3
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	2030      	movs	r0, #48	; 0x30
 800a87e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a882:	4422      	add	r2, r4
 800a884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a88c:	3302      	adds	r3, #2
 800a88e:	e7c7      	b.n	800a820 <_printf_common+0x58>
 800a890:	2301      	movs	r3, #1
 800a892:	4622      	mov	r2, r4
 800a894:	4649      	mov	r1, r9
 800a896:	4638      	mov	r0, r7
 800a898:	47c0      	blx	r8
 800a89a:	3001      	adds	r0, #1
 800a89c:	d0e6      	beq.n	800a86c <_printf_common+0xa4>
 800a89e:	3601      	adds	r6, #1
 800a8a0:	e7d9      	b.n	800a856 <_printf_common+0x8e>
	...

0800a8a4 <_printf_i>:
 800a8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	7e0f      	ldrb	r7, [r1, #24]
 800a8aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8ac:	2f78      	cmp	r7, #120	; 0x78
 800a8ae:	4691      	mov	r9, r2
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	469a      	mov	sl, r3
 800a8b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ba:	d807      	bhi.n	800a8cc <_printf_i+0x28>
 800a8bc:	2f62      	cmp	r7, #98	; 0x62
 800a8be:	d80a      	bhi.n	800a8d6 <_printf_i+0x32>
 800a8c0:	2f00      	cmp	r7, #0
 800a8c2:	f000 80d4 	beq.w	800aa6e <_printf_i+0x1ca>
 800a8c6:	2f58      	cmp	r7, #88	; 0x58
 800a8c8:	f000 80c0 	beq.w	800aa4c <_printf_i+0x1a8>
 800a8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8d4:	e03a      	b.n	800a94c <_printf_i+0xa8>
 800a8d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8da:	2b15      	cmp	r3, #21
 800a8dc:	d8f6      	bhi.n	800a8cc <_printf_i+0x28>
 800a8de:	a101      	add	r1, pc, #4	; (adr r1, 800a8e4 <_printf_i+0x40>)
 800a8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8e4:	0800a93d 	.word	0x0800a93d
 800a8e8:	0800a951 	.word	0x0800a951
 800a8ec:	0800a8cd 	.word	0x0800a8cd
 800a8f0:	0800a8cd 	.word	0x0800a8cd
 800a8f4:	0800a8cd 	.word	0x0800a8cd
 800a8f8:	0800a8cd 	.word	0x0800a8cd
 800a8fc:	0800a951 	.word	0x0800a951
 800a900:	0800a8cd 	.word	0x0800a8cd
 800a904:	0800a8cd 	.word	0x0800a8cd
 800a908:	0800a8cd 	.word	0x0800a8cd
 800a90c:	0800a8cd 	.word	0x0800a8cd
 800a910:	0800aa55 	.word	0x0800aa55
 800a914:	0800a97d 	.word	0x0800a97d
 800a918:	0800aa0f 	.word	0x0800aa0f
 800a91c:	0800a8cd 	.word	0x0800a8cd
 800a920:	0800a8cd 	.word	0x0800a8cd
 800a924:	0800aa77 	.word	0x0800aa77
 800a928:	0800a8cd 	.word	0x0800a8cd
 800a92c:	0800a97d 	.word	0x0800a97d
 800a930:	0800a8cd 	.word	0x0800a8cd
 800a934:	0800a8cd 	.word	0x0800a8cd
 800a938:	0800aa17 	.word	0x0800aa17
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	602a      	str	r2, [r5, #0]
 800a944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a94c:	2301      	movs	r3, #1
 800a94e:	e09f      	b.n	800aa90 <_printf_i+0x1ec>
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	0607      	lsls	r7, r0, #24
 800a956:	f103 0104 	add.w	r1, r3, #4
 800a95a:	6029      	str	r1, [r5, #0]
 800a95c:	d501      	bpl.n	800a962 <_printf_i+0xbe>
 800a95e:	681e      	ldr	r6, [r3, #0]
 800a960:	e003      	b.n	800a96a <_printf_i+0xc6>
 800a962:	0646      	lsls	r6, r0, #25
 800a964:	d5fb      	bpl.n	800a95e <_printf_i+0xba>
 800a966:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a96a:	2e00      	cmp	r6, #0
 800a96c:	da03      	bge.n	800a976 <_printf_i+0xd2>
 800a96e:	232d      	movs	r3, #45	; 0x2d
 800a970:	4276      	negs	r6, r6
 800a972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a976:	485a      	ldr	r0, [pc, #360]	; (800aae0 <_printf_i+0x23c>)
 800a978:	230a      	movs	r3, #10
 800a97a:	e012      	b.n	800a9a2 <_printf_i+0xfe>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	6820      	ldr	r0, [r4, #0]
 800a980:	1d19      	adds	r1, r3, #4
 800a982:	6029      	str	r1, [r5, #0]
 800a984:	0605      	lsls	r5, r0, #24
 800a986:	d501      	bpl.n	800a98c <_printf_i+0xe8>
 800a988:	681e      	ldr	r6, [r3, #0]
 800a98a:	e002      	b.n	800a992 <_printf_i+0xee>
 800a98c:	0641      	lsls	r1, r0, #25
 800a98e:	d5fb      	bpl.n	800a988 <_printf_i+0xe4>
 800a990:	881e      	ldrh	r6, [r3, #0]
 800a992:	4853      	ldr	r0, [pc, #332]	; (800aae0 <_printf_i+0x23c>)
 800a994:	2f6f      	cmp	r7, #111	; 0x6f
 800a996:	bf0c      	ite	eq
 800a998:	2308      	moveq	r3, #8
 800a99a:	230a      	movne	r3, #10
 800a99c:	2100      	movs	r1, #0
 800a99e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9a2:	6865      	ldr	r5, [r4, #4]
 800a9a4:	60a5      	str	r5, [r4, #8]
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	bfa2      	ittt	ge
 800a9aa:	6821      	ldrge	r1, [r4, #0]
 800a9ac:	f021 0104 	bicge.w	r1, r1, #4
 800a9b0:	6021      	strge	r1, [r4, #0]
 800a9b2:	b90e      	cbnz	r6, 800a9b8 <_printf_i+0x114>
 800a9b4:	2d00      	cmp	r5, #0
 800a9b6:	d04b      	beq.n	800aa50 <_printf_i+0x1ac>
 800a9b8:	4615      	mov	r5, r2
 800a9ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9be:	fb03 6711 	mls	r7, r3, r1, r6
 800a9c2:	5dc7      	ldrb	r7, [r0, r7]
 800a9c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	42bb      	cmp	r3, r7
 800a9cc:	460e      	mov	r6, r1
 800a9ce:	d9f4      	bls.n	800a9ba <_printf_i+0x116>
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	d10b      	bne.n	800a9ec <_printf_i+0x148>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	07de      	lsls	r6, r3, #31
 800a9d8:	d508      	bpl.n	800a9ec <_printf_i+0x148>
 800a9da:	6923      	ldr	r3, [r4, #16]
 800a9dc:	6861      	ldr	r1, [r4, #4]
 800a9de:	4299      	cmp	r1, r3
 800a9e0:	bfde      	ittt	le
 800a9e2:	2330      	movle	r3, #48	; 0x30
 800a9e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9ec:	1b52      	subs	r2, r2, r5
 800a9ee:	6122      	str	r2, [r4, #16]
 800a9f0:	f8cd a000 	str.w	sl, [sp]
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	aa03      	add	r2, sp, #12
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	f7ff fee4 	bl	800a7c8 <_printf_common>
 800aa00:	3001      	adds	r0, #1
 800aa02:	d14a      	bne.n	800aa9a <_printf_i+0x1f6>
 800aa04:	f04f 30ff 	mov.w	r0, #4294967295
 800aa08:	b004      	add	sp, #16
 800aa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	f043 0320 	orr.w	r3, r3, #32
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	4833      	ldr	r0, [pc, #204]	; (800aae4 <_printf_i+0x240>)
 800aa18:	2778      	movs	r7, #120	; 0x78
 800aa1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	6829      	ldr	r1, [r5, #0]
 800aa22:	061f      	lsls	r7, r3, #24
 800aa24:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa28:	d402      	bmi.n	800aa30 <_printf_i+0x18c>
 800aa2a:	065f      	lsls	r7, r3, #25
 800aa2c:	bf48      	it	mi
 800aa2e:	b2b6      	uxthmi	r6, r6
 800aa30:	07df      	lsls	r7, r3, #31
 800aa32:	bf48      	it	mi
 800aa34:	f043 0320 	orrmi.w	r3, r3, #32
 800aa38:	6029      	str	r1, [r5, #0]
 800aa3a:	bf48      	it	mi
 800aa3c:	6023      	strmi	r3, [r4, #0]
 800aa3e:	b91e      	cbnz	r6, 800aa48 <_printf_i+0x1a4>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	f023 0320 	bic.w	r3, r3, #32
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	2310      	movs	r3, #16
 800aa4a:	e7a7      	b.n	800a99c <_printf_i+0xf8>
 800aa4c:	4824      	ldr	r0, [pc, #144]	; (800aae0 <_printf_i+0x23c>)
 800aa4e:	e7e4      	b.n	800aa1a <_printf_i+0x176>
 800aa50:	4615      	mov	r5, r2
 800aa52:	e7bd      	b.n	800a9d0 <_printf_i+0x12c>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	6826      	ldr	r6, [r4, #0]
 800aa58:	6961      	ldr	r1, [r4, #20]
 800aa5a:	1d18      	adds	r0, r3, #4
 800aa5c:	6028      	str	r0, [r5, #0]
 800aa5e:	0635      	lsls	r5, r6, #24
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	d501      	bpl.n	800aa68 <_printf_i+0x1c4>
 800aa64:	6019      	str	r1, [r3, #0]
 800aa66:	e002      	b.n	800aa6e <_printf_i+0x1ca>
 800aa68:	0670      	lsls	r0, r6, #25
 800aa6a:	d5fb      	bpl.n	800aa64 <_printf_i+0x1c0>
 800aa6c:	8019      	strh	r1, [r3, #0]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6123      	str	r3, [r4, #16]
 800aa72:	4615      	mov	r5, r2
 800aa74:	e7bc      	b.n	800a9f0 <_printf_i+0x14c>
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	1d1a      	adds	r2, r3, #4
 800aa7a:	602a      	str	r2, [r5, #0]
 800aa7c:	681d      	ldr	r5, [r3, #0]
 800aa7e:	6862      	ldr	r2, [r4, #4]
 800aa80:	2100      	movs	r1, #0
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7f5 fc34 	bl	80002f0 <memchr>
 800aa88:	b108      	cbz	r0, 800aa8e <_printf_i+0x1ea>
 800aa8a:	1b40      	subs	r0, r0, r5
 800aa8c:	6060      	str	r0, [r4, #4]
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	6123      	str	r3, [r4, #16]
 800aa92:	2300      	movs	r3, #0
 800aa94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa98:	e7aa      	b.n	800a9f0 <_printf_i+0x14c>
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	47d0      	blx	sl
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d0ad      	beq.n	800aa04 <_printf_i+0x160>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	079b      	lsls	r3, r3, #30
 800aaac:	d413      	bmi.n	800aad6 <_printf_i+0x232>
 800aaae:	68e0      	ldr	r0, [r4, #12]
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	4298      	cmp	r0, r3
 800aab4:	bfb8      	it	lt
 800aab6:	4618      	movlt	r0, r3
 800aab8:	e7a6      	b.n	800aa08 <_printf_i+0x164>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4632      	mov	r2, r6
 800aabe:	4649      	mov	r1, r9
 800aac0:	4640      	mov	r0, r8
 800aac2:	47d0      	blx	sl
 800aac4:	3001      	adds	r0, #1
 800aac6:	d09d      	beq.n	800aa04 <_printf_i+0x160>
 800aac8:	3501      	adds	r5, #1
 800aaca:	68e3      	ldr	r3, [r4, #12]
 800aacc:	9903      	ldr	r1, [sp, #12]
 800aace:	1a5b      	subs	r3, r3, r1
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	dcf2      	bgt.n	800aaba <_printf_i+0x216>
 800aad4:	e7eb      	b.n	800aaae <_printf_i+0x20a>
 800aad6:	2500      	movs	r5, #0
 800aad8:	f104 0619 	add.w	r6, r4, #25
 800aadc:	e7f5      	b.n	800aaca <_printf_i+0x226>
 800aade:	bf00      	nop
 800aae0:	0800acb9 	.word	0x0800acb9
 800aae4:	0800acca 	.word	0x0800acca

0800aae8 <memmove>:
 800aae8:	4288      	cmp	r0, r1
 800aaea:	b510      	push	{r4, lr}
 800aaec:	eb01 0402 	add.w	r4, r1, r2
 800aaf0:	d902      	bls.n	800aaf8 <memmove+0x10>
 800aaf2:	4284      	cmp	r4, r0
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	d807      	bhi.n	800ab08 <memmove+0x20>
 800aaf8:	1e43      	subs	r3, r0, #1
 800aafa:	42a1      	cmp	r1, r4
 800aafc:	d008      	beq.n	800ab10 <memmove+0x28>
 800aafe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab06:	e7f8      	b.n	800aafa <memmove+0x12>
 800ab08:	4402      	add	r2, r0
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	428a      	cmp	r2, r1
 800ab0e:	d100      	bne.n	800ab12 <memmove+0x2a>
 800ab10:	bd10      	pop	{r4, pc}
 800ab12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab1a:	e7f7      	b.n	800ab0c <memmove+0x24>

0800ab1c <_sbrk_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d06      	ldr	r5, [pc, #24]	; (800ab38 <_sbrk_r+0x1c>)
 800ab20:	2300      	movs	r3, #0
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	602b      	str	r3, [r5, #0]
 800ab28:	f7f6 fd66 	bl	80015f8 <_sbrk>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d102      	bne.n	800ab36 <_sbrk_r+0x1a>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	b103      	cbz	r3, 800ab36 <_sbrk_r+0x1a>
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	24005354 	.word	0x24005354

0800ab3c <_realloc_r>:
 800ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab40:	4680      	mov	r8, r0
 800ab42:	4614      	mov	r4, r2
 800ab44:	460e      	mov	r6, r1
 800ab46:	b921      	cbnz	r1, 800ab52 <_realloc_r+0x16>
 800ab48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	f7ff bc57 	b.w	800a400 <_malloc_r>
 800ab52:	b92a      	cbnz	r2, 800ab60 <_realloc_r+0x24>
 800ab54:	f7ff fbe8 	bl	800a328 <_free_r>
 800ab58:	4625      	mov	r5, r4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	f000 f81b 	bl	800ab9a <_malloc_usable_size_r>
 800ab64:	4284      	cmp	r4, r0
 800ab66:	4607      	mov	r7, r0
 800ab68:	d802      	bhi.n	800ab70 <_realloc_r+0x34>
 800ab6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab6e:	d812      	bhi.n	800ab96 <_realloc_r+0x5a>
 800ab70:	4621      	mov	r1, r4
 800ab72:	4640      	mov	r0, r8
 800ab74:	f7ff fc44 	bl	800a400 <_malloc_r>
 800ab78:	4605      	mov	r5, r0
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0ed      	beq.n	800ab5a <_realloc_r+0x1e>
 800ab7e:	42bc      	cmp	r4, r7
 800ab80:	4622      	mov	r2, r4
 800ab82:	4631      	mov	r1, r6
 800ab84:	bf28      	it	cs
 800ab86:	463a      	movcs	r2, r7
 800ab88:	f7ff fbc0 	bl	800a30c <memcpy>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f7ff fbca 	bl	800a328 <_free_r>
 800ab94:	e7e1      	b.n	800ab5a <_realloc_r+0x1e>
 800ab96:	4635      	mov	r5, r6
 800ab98:	e7df      	b.n	800ab5a <_realloc_r+0x1e>

0800ab9a <_malloc_usable_size_r>:
 800ab9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab9e:	1f18      	subs	r0, r3, #4
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfbc      	itt	lt
 800aba4:	580b      	ldrlt	r3, [r1, r0]
 800aba6:	18c0      	addlt	r0, r0, r3
 800aba8:	4770      	bx	lr
	...

0800abac <_init>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr

0800abb8 <_fini>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr
