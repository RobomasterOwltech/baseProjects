
readADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008488  08008488  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008490  08008490  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  24000010  080084a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000634  080084a8  00020634  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcda  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a3  00000000  00000000  0003bd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3f  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ea5a  00000000  00000000  00040ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f7d  00000000  00000000  0007f921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00190831  00000000  00000000  0009989e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f64  00000000  00000000  0022a0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0022f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008438 	.word	0x08008438

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08008438 	.word	0x08008438

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <_ZN3ADCC1EP17ADC_HandleTypeDefP20__UART_HandleTypeDef>:
 */


#include <ADC.hpp>

ADC::ADC(ADC_HandleTypeDef *_hadc1, UART_HandleTypeDef *_huart3) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	hadc = _hadc1;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	605a      	str	r2, [r3, #4]
	huart = _huart3;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]
	HAL_ADC_Start(hadc);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f8e3 	bl	80018e8 <HAL_ADC_Start>
}
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_ZN3ADC4readEv>:

void ADC::read(){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f99d 	bl	8001a7c <HAL_ADC_PollForConversion>
	data =  HAL_ADC_GetValue(hadc);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fa8c 	bl	8001c64 <HAL_ADC_GetValue>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	801a      	strh	r2, [r3, #0]
	msg[0] = (data/10000)+48;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <_ZN3ADC4readEv+0xb8>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	0b5b      	lsrs	r3, r3, #13
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3330      	adds	r3, #48	; 0x30
 8000766:	b2da      	uxtb	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	731a      	strb	r2, [r3, #12]
	data = data%10000;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <_ZN3ADC4readEv+0xb8>)
 8000772:	fba2 1203 	umull	r1, r2, r2, r3
 8000776:	0b52      	lsrs	r2, r2, #13
 8000778:	f242 7110 	movw	r1, #10000	; 0x2710
 800077c:	fb01 f202 	mul.w	r2, r1, r2
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	b29a      	uxth	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	801a      	strh	r2, [r3, #0]
	msg[1] = (data/1000)+48;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <_ZN3ADC4readEv+0xbc>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	099b      	lsrs	r3, r3, #6
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	735a      	strb	r2, [r3, #13]
	data = data%1000;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <_ZN3ADC4readEv+0xbc>)
 80007a6:	fba2 1203 	umull	r1, r2, r2, r3
 80007aa:	0992      	lsrs	r2, r2, #6
 80007ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b0:	fb01 f202 	mul.w	r2, r1, r2
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	801a      	strh	r2, [r3, #0]
	//msg[2] = (data/100)+48;
	//data = data%100;
	//msg[3] = (data/10)+48;
	//data = data%10;
	//msg[4] = data+48;
	msg[2] = 10;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	220a      	movs	r2, #10
 80007c0:	739a      	strb	r2, [r3, #14]
	msg[3] = 13;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	220d      	movs	r2, #13
 80007c6:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit(huart, msg, 4, HAL_MAX_DELAY);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6898      	ldr	r0, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 010c 	add.w	r1, r3, #12
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	2204      	movs	r2, #4
 80007d8:	f006 f9e4 	bl	8006ba4 <HAL_UART_Transmit>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	d1b71759 	.word	0xd1b71759
 80007e8:	10624dd3 	.word	0x10624dd3

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f6:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <main+0xc4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <main+0x28>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	61fa      	str	r2, [r7, #28]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd01      	ble.n	8000814 <main+0x28>
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <main+0x2a>
 8000814:	2300      	movs	r3, #0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1ef      	bne.n	80007fa <main+0xe>
  if ( timeout < 0 )
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da01      	bge.n	8000824 <main+0x38>
  {
  Error_Handler();
 8000820:	f000 fa3e 	bl	8000ca0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fc1a 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f848 	bl	80008bc <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <main+0xc4>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <main+0xc4>)
 8000834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <main+0xc4>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800084a:	2000      	movs	r0, #0
 800084c:	f002 fa96 	bl	8002d7c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f002 faac 	bl	8002db0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085c:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800085e:	bf00      	nop
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <main+0xc4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d106      	bne.n	800087a <main+0x8e>
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	61fa      	str	r2, [r7, #28]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dd01      	ble.n	800087a <main+0x8e>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <main+0x90>
 800087a:	2300      	movs	r3, #0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1ef      	bne.n	8000860 <main+0x74>
if ( timeout < 0 )
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da01      	bge.n	800088a <main+0x9e>
{
Error_Handler();
 8000886:	f000 fa0b 	bl	8000ca0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 f9c1 	bl	8000c10 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800088e:	f000 f929 	bl	8000ae4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000892:	f000 f987 	bl	8000ba4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_ADC1_Init();
 8000896:	f000 f89d 	bl	80009d4 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
 ADC adc1(&hadc1,&huart3);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <main+0xc8>)
 800089e:	4906      	ldr	r1, [pc, #24]	; (80008b8 <main+0xcc>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff2d 	bl	8000700 <_ZN3ADCC1EP17ADC_HandleTypeDefP20__UART_HandleTypeDef>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	/* USER CODE END WHILE */
    adc1.read();
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff3f 	bl	800072c <_ZN3ADC4readEv>
 80008ae:	e7fa      	b.n	80008a6 <main+0xba>
 80008b0:	58024400 	.word	0x58024400
 80008b4:	24000090 	.word	0x24000090
 80008b8:	2400002c 	.word	0x2400002c

080008bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	; 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	224c      	movs	r2, #76	; 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f007 fd88 	bl	80083e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f007 fd82 	bl	80083e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008dc:	2004      	movs	r0, #4
 80008de:	f002 fbc3 	bl	8003068 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <_Z18SystemClock_Configv+0x110>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	4a38      	ldr	r2, [pc, #224]	; (80009cc <_Z18SystemClock_Configv+0x110>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f2:	4b36      	ldr	r3, [pc, #216]	; (80009cc <_Z18SystemClock_Configv+0x110>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <_Z18SystemClock_Configv+0x114>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000904:	4a32      	ldr	r2, [pc, #200]	; (80009d0 <_Z18SystemClock_Configv+0x114>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <_Z18SystemClock_Configv+0x114>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000918:	bf00      	nop
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <_Z18SystemClock_Configv+0x114>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000926:	bf14      	ite	ne
 8000928:	2301      	movne	r3, #1
 800092a:	2300      	moveq	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f3      	bne.n	800091a <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000932:	2301      	movs	r3, #1
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000936:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000940:	2302      	movs	r3, #2
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000948:	2312      	movs	r3, #18
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000950:	2302      	movs	r3, #2
 8000952:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000958:	230c      	movs	r3, #12
 800095a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800095c:	2302      	movs	r3, #2
 800095e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000960:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000964:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fbe6 	bl	800313c <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	bf14      	ite	ne
 8000976:	2301      	movne	r3, #1
 8000978:	2300      	moveq	r3, #0
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000980:	f000 f98e 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	233f      	movs	r3, #63	; 0x3f
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2303      	movs	r3, #3
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2101      	movs	r1, #1
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 f820 	bl	80039f0 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 80009c0:	f000 f96e 	bl	8000ca0 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3770      	adds	r7, #112	; 0x70
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58000400 	.word	0x58000400
 80009d0:	58024800 	.word	0x58024800

080009d4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 80009fa:	4a38      	ldr	r2, [pc, #224]	; (8000adc <_ZL12MX_ADC1_Initv+0x108>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a10:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a54:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a56:	f000 fda5 	bl	80015a4 <HAL_ADC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 8000a6a:	f000 f919 	bl	8000ca0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000a7a:	f001 fe0d 	bl	8002698 <HAL_ADCEx_MultiModeConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 8000a8e:	f000 f907 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_ZL12MX_ADC1_Initv+0x10c>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000aa2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <_ZL12MX_ADC1_Initv+0x104>)
 8000ab6:	f001 f8e3 	bl	8001c80 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bf14      	ite	ne
 8000ac0:	2301      	movne	r3, #1
 8000ac2:	2300      	moveq	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 8000aca:	f000 f8e9 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2400002c 	.word	0x2400002c
 8000adc:	40022000 	.word	0x40022000
 8000ae0:	0c900008 	.word	0x0c900008

08000ae4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aea:	4a2d      	ldr	r2, [pc, #180]	; (8000ba0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b2e:	f005 ffe9 	bl	8006b04 <HAL_UART_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000b42:	f000 f8ad 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4814      	ldr	r0, [pc, #80]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b4a:	f007 f874 	bl	8007c36 <HAL_UARTEx_SetTxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000b5e:	f000 f89f 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b62:	2100      	movs	r1, #0
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b66:	f007 f8a4 	bl	8007cb2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000b7a:	f000 f891 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b80:	f007 f820 	bl	8007bc4 <HAL_UARTEx_DisableFifoMode>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000b94:	f000 f884 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000090 	.word	0x24000090
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bb0:	2209      	movs	r2, #9
 8000bb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bec:	f002 f8f4 	bl	8002dd8 <HAL_PCD_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000c00:	f000 f84e 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24000124 	.word	0x24000124
 8000c0c:	40080000 	.word	0x40080000

08000c10 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <_ZL12MX_GPIO_Initv+0x8c>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x30>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x30>)
 8000cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ba      	sub	sp, #232	; 0xe8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	22c0      	movs	r2, #192	; 0xc0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 fb6d 	bl	80083e0 <memset>
  if(hadc->Instance==ADC1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <HAL_ADC_MspInit+0xdc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d150      	bne.n	8000db2 <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000d20:	2312      	movs	r3, #18
 8000d22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d30:	23c0      	movs	r3, #192	; 0xc0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d34:	2320      	movs	r3, #32
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000d38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f9dd 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000d54:	f7ff ffa4 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_ADC_MspInit+0xe0>)
 8000d5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_ADC_MspInit+0xe0>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_ADC_MspInit+0xe0>)
 8000d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_ADC_MspInit+0xe0>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_ADC_MspInit+0xe0>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_ADC_MspInit+0xe0>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_ADC_MspInit+0xe4>)
 8000dae:	f001 fe35 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	37e8      	adds	r7, #232	; 0xe8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020000 	.word	0x58020000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ba      	sub	sp, #232	; 0xe8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f007 faf9 	bl	80083e0 <memset>
  if(huart->Instance==USART3)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <HAL_UART_MspInit+0xc8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d146      	bne.n	8000e86 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df8:	f04f 0202 	mov.w	r2, #2
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 f97a 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e1a:	f7ff ff41 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e74:	2307      	movs	r3, #7
 8000e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e82:	f001 fdcb 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	37e8      	adds	r7, #232	; 0xe8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004800 	.word	0x40004800
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58020c00 	.word	0x58020c00

08000e9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ba      	sub	sp, #232	; 0xe8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	22c0      	movs	r2, #192	; 0xc0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f007 fa8f 	bl	80083e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <HAL_PCD_MspInit+0x10c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d169      	bne.n	8000fa0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ecc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000edc:	2312      	movs	r3, #18
 8000ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000eec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000ef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ef6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 f8ff 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f10:	f7ff fec6 	bl	8000ca0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f14:	f002 f902 	bl	800311c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <HAL_PCD_MspInit+0x110>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <HAL_PCD_MspInit+0x110>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_PCD_MspInit+0x110>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f36:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f50:	230a      	movs	r3, #10
 8000f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <HAL_PCD_MspInit+0x114>)
 8000f5e:	f001 fd5d 	bl	8002a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <HAL_PCD_MspInit+0x114>)
 8000f7e:	f001 fd4d 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_PCD_MspInit+0x110>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_PCD_MspInit+0x110>)
 8000f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_PCD_MspInit+0x110>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	37e8      	adds	r7, #232	; 0xe8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40080000 	.word	0x40080000
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020000 	.word	0x58020000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f89e 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800100c:	f7ff fae2 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	; (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f007 f9db 	bl	80083f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fbd7 	bl	80007ec <main>
  bx  lr
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001048:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800104c:	08008498 	.word	0x08008498
  ldr r2, =_sbss
 8001050:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001054:	24000634 	.word	0x24000634

08001058 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC3_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
 8001064:	f001 fca8 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001068:	f002 fe78 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 800106c:	4602      	mov	r2, r0
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_Init+0x68>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	4913      	ldr	r1, [pc, #76]	; (80010c8 <HAL_Init+0x6c>)
 800107a:	5ccb      	ldrb	r3, [r1, r3]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_Init+0x68>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_Init+0x6c>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	fa22 f303 	lsr.w	r3, r2, r3
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_Init+0x70>)
 800109e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <HAL_Init+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f814 	bl	80010d4 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e002      	b.n	80010bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b6:	f7ff fdf9 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58024400 	.word	0x58024400
 80010c8:	08008450 	.word	0x08008450
 80010cc:	24000004 	.word	0x24000004
 80010d0:	24000000 	.word	0x24000000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e021      	b.n	800112c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_InitTick+0x64>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_InitTick+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fc7f 	bl	8002a02 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f001 fc57 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x68>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2400000c 	.word	0x2400000c
 8001138:	24000000 	.word	0x24000000
 800113c:	24000008 	.word	0x24000008

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2400000c 	.word	0x2400000c
 8001164:	24000630 	.word	0x24000630

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	24000630 	.word	0x24000630

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2400000c 	.word	0x2400000c

080011c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetREVID+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0c1b      	lsrs	r3, r3, #16
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	5c001000 	.word	0x5c001000

080011e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3360      	adds	r3, #96	; 0x60
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	430b      	orrs	r3, r1
 8001276:	431a      	orrs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800127c:	bf00      	nop
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	431a      	orrs	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	611a      	str	r2, [r3, #16]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3360      	adds	r3, #96	; 0x60
 80012ca:	461a      	mov	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	431a      	orrs	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	601a      	str	r2, [r3, #0]
  }
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3330      	adds	r3, #48	; 0x30
 8001326:	461a      	mov	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	211f      	movs	r1, #31
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0e9b      	lsrs	r3, r3, #26
 800134e:	f003 011f 	and.w	r1, r3, #31
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136e:	b480      	push	{r7}
 8001370:	b087      	sub	sp, #28
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3314      	adds	r3, #20
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	0e5b      	lsrs	r3, r3, #25
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	0d1b      	lsrs	r3, r3, #20
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2107      	movs	r1, #7
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0d1b      	lsrs	r3, r3, #20
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0318 	and.w	r3, r3, #24
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e8:	40d9      	lsrs	r1, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	400b      	ands	r3, r1
 80013ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	000fffff 	.word	0x000fffff

0800140c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 031f 	and.w	r3, r3, #31
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001452:	4013      	ands	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	5fffffc0 	.word	0x5fffffc0

08001468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800149e:	4013      	ands	r3, r2
 80014a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	6fffffc0 	.word	0x6fffffc0

080014b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <LL_ADC_Enable+0x24>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	7fffffc0 	.word	0x7fffffc0

08001508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <LL_ADC_IsEnabled+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_ADC_IsEnabled+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LL_ADC_REG_StartConversion+0x24>)
 800153e:	4013      	ands	r3, r2
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	7fffffc0 	.word	0x7fffffc0

08001558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b04      	cmp	r3, #4
 800156a:	d101      	bne.n	8001570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b08      	cmp	r3, #8
 8001590:	d101      	bne.n	8001596 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e18f      	b.n	80018de <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fb87 	bl	8000ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff3f 	bl	8001468 <LL_ADC_IsDeepPowerDownEnabled>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff25 	bl	8001444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff5a 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d114      	bne.n	8001634 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff3e 	bl	8001490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001614:	4b87      	ldr	r3, [pc, #540]	; (8001834 <HAL_ADC_Init+0x290>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	4a87      	ldr	r2, [pc, #540]	; (8001838 <HAL_ADC_Init+0x294>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	3301      	adds	r3, #1
 8001624:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001626:	e002      	b.n	800162e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f9      	bne.n	8001628 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff3d 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10d      	bne.n	8001660 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	f043 0210 	orr.w	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff77 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 800166a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8129 	bne.w	80018cc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 8125 	bne.w	80018cc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff36 	bl	8001508 <LL_ADC_IsEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d136      	bne.n	8001710 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a65      	ldr	r2, [pc, #404]	; (800183c <HAL_ADC_Init+0x298>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_ADC_Init+0x112>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_ADC_Init+0x29c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10e      	bne.n	80016d4 <HAL_ADC_Init+0x130>
 80016b6:	4861      	ldr	r0, [pc, #388]	; (800183c <HAL_ADC_Init+0x298>)
 80016b8:	f7ff ff26 	bl	8001508 <LL_ADC_IsEnabled>
 80016bc:	4604      	mov	r4, r0
 80016be:	4860      	ldr	r0, [pc, #384]	; (8001840 <HAL_ADC_Init+0x29c>)
 80016c0:	f7ff ff22 	bl	8001508 <LL_ADC_IsEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4323      	orrs	r3, r4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e008      	b.n	80016e6 <HAL_ADC_Init+0x142>
 80016d4:	485b      	ldr	r0, [pc, #364]	; (8001844 <HAL_ADC_Init+0x2a0>)
 80016d6:	f7ff ff17 	bl	8001508 <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d012      	beq.n	8001710 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a53      	ldr	r2, [pc, #332]	; (800183c <HAL_ADC_Init+0x298>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_ADC_Init+0x15a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_ADC_Init+0x29c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x15e>
 80016fe:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_ADC_Init+0x2a4>)
 8001700:	e000      	b.n	8001704 <HAL_ADC_Init+0x160>
 8001702:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_ADC_Init+0x2a8>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fd68 	bl	80011e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001710:	f7ff fd5a 	bl	80011c8 <HAL_GetREVID>
 8001714:	4603      	mov	r3, r0
 8001716:	f241 0203 	movw	r2, #4099	; 0x1003
 800171a:	4293      	cmp	r3, r2
 800171c:	d914      	bls.n	8001748 <HAL_ADC_Init+0x1a4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d110      	bne.n	8001748 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7d5b      	ldrb	r3, [r3, #21]
 800172a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001730:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001736:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7f1b      	ldrb	r3, [r3, #28]
 800173c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800173e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001740:	f043 030c 	orr.w	r3, r3, #12
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	e00d      	b.n	8001764 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7d5b      	ldrb	r3, [r3, #21]
 800174c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001752:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001758:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7f1b      	ldrb	r3, [r3, #28]
 800175e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7f1b      	ldrb	r3, [r3, #28]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	3b01      	subs	r3, #1
 8001772:	045b      	lsls	r3, r3, #17
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_ADC_Init+0x2ac>)
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	69b9      	ldr	r1, [r7, #24]
 80017a6:	430b      	orrs	r3, r1
 80017a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fed2 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 80017b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fedf 	bl	800157e <LL_ADC_INJ_IsConversionOngoing>
 80017c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d15f      	bne.n	8001888 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d15c      	bne.n	8001888 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7d1b      	ldrb	r3, [r3, #20]
 80017d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_ADC_Init+0x2b0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d130      	bne.n	800185c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_ADC_Init+0x2b4>)
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800180e:	3a01      	subs	r2, #1
 8001810:	0411      	lsls	r1, r2, #16
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001822:	430a      	orrs	r2, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	e01c      	b.n	800186c <HAL_ADC_Init+0x2c8>
 8001832:	bf00      	nop
 8001834:	24000000 	.word	0x24000000
 8001838:	053e2d63 	.word	0x053e2d63
 800183c:	40022000 	.word	0x40022000
 8001840:	40022100 	.word	0x40022100
 8001844:	58026000 	.word	0x58026000
 8001848:	40022300 	.word	0x40022300
 800184c:	58026300 	.word	0x58026300
 8001850:	fff0c003 	.word	0xfff0c003
 8001854:	ffffbffc 	.word	0xffffbffc
 8001858:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fdd6 	bl	8002434 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10c      	bne.n	80018aa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f023 010f 	bic.w	r1, r3, #15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
 80018a8:	e007      	b.n	80018ba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 020f 	bic.w	r2, r2, #15
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
 80018ca:	e007      	b.n	80018dc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	f043 0210 	orr.w	r2, r3, #16
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop

080018e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <HAL_ADC_Start+0x180>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d004      	beq.n	8001904 <HAL_ADC_Start+0x1c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a5b      	ldr	r2, [pc, #364]	; (8001a6c <HAL_ADC_Start+0x184>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_ADC_Start+0x20>
 8001904:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <HAL_ADC_Start+0x188>)
 8001906:	e000      	b.n	800190a <HAL_ADC_Start+0x22>
 8001908:	4b5a      	ldr	r3, [pc, #360]	; (8001a74 <HAL_ADC_Start+0x18c>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fd7e 	bl	800140c <LL_ADC_GetMultimode>
 8001910:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe1e 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 809a 	bne.w	8001a58 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Start+0x4a>
 800192e:	2302      	movs	r3, #2
 8001930:	e095      	b.n	8001a5e <HAL_ADC_Start+0x176>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fcf0 	bl	8002320 <ADC_Enable>
 8001940:	4603      	mov	r3, r0
 8001942:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8081 	bne.w	8001a4e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_ADC_Start+0x190>)
 8001952:	4013      	ands	r3, r2
 8001954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a42      	ldr	r2, [pc, #264]	; (8001a6c <HAL_ADC_Start+0x184>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d002      	beq.n	800196c <HAL_ADC_Start+0x84>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	e000      	b.n	800196e <HAL_ADC_Start+0x86>
 800196c:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_ADC_Start+0x180>)
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4293      	cmp	r3, r2
 8001974:	d002      	beq.n	800197c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001994:	d106      	bne.n	80019a4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	f023 0206 	bic.w	r2, r3, #6
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	659a      	str	r2, [r3, #88]	; 0x58
 80019a2:	e002      	b.n	80019aa <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	221c      	movs	r2, #28
 80019b0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_ADC_Start+0x184>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d002      	beq.n	80019ca <HAL_ADC_Start+0xe2>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	e000      	b.n	80019cc <HAL_ADC_Start+0xe4>
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_ADC_Start+0x180>)
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d008      	beq.n	80019e6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d002      	beq.n	80019e6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b09      	cmp	r3, #9
 80019e4:	d114      	bne.n	8001a10 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd91 	bl	8001530 <LL_ADC_REG_StartConversion>
 8001a0e:	e025      	b.n	8001a5c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_ADC_Start+0x184>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_Start+0x144>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_Start+0x146>
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_ADC_Start+0x180>)
 8001a2e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00f      	beq.n	8001a5c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a4c:	e006      	b.n	8001a5c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a56:	e001      	b.n	8001a5c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022100 	.word	0x40022100
 8001a70:	40022300 	.word	0x40022300
 8001a74:	58026300 	.word	0x58026300
 8001a78:	fffff0fe 	.word	0xfffff0fe

08001a7c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a72      	ldr	r2, [pc, #456]	; (8001c54 <HAL_ADC_PollForConversion+0x1d8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_PollForConversion+0x1e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_ADC_PollForConversion+0x1dc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x22>
 8001a9a:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <HAL_ADC_PollForConversion+0x1e0>)
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_PollForConversion+0x24>
 8001a9e:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <HAL_ADC_PollForConversion+0x1e4>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fcb3 	bl	800140c <LL_ADC_GetMultimode>
 8001aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d102      	bne.n	8001ab6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	e037      	b.n	8001b26 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d002      	beq.n	8001ac8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	d111      	bne.n	8001aec <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f043 0220 	orr.w	r2, r3, #32
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0b1      	b.n	8001c4a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001aea:	e01c      	b.n	8001b26 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_ADC_PollForConversion+0x1d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_PollForConversion+0x84>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <HAL_ADC_PollForConversion+0x1dc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_PollForConversion+0x88>
 8001b00:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <HAL_ADC_PollForConversion+0x1e0>)
 8001b02:	e000      	b.n	8001b06 <HAL_ADC_PollForConversion+0x8a>
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_ADC_PollForConversion+0x1e4>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fc8e 	bl	8001428 <LL_ADC_GetMultiDMATransfer>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f043 0220 	orr.w	r2, r3, #32
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e093      	b.n	8001c4a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b22:	2304      	movs	r3, #4
 8001b24:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b26:	f7ff fb1f 	bl	8001168 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b2c:	e021      	b.n	8001b72 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d01d      	beq.n	8001b72 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b36:	f7ff fb17 	bl	8001168 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d302      	bcc.n	8001b4c <HAL_ADC_PollForConversion+0xd0>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d112      	bne.n	8001b72 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0204 	orr.w	r2, r3, #4
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e06b      	b.n	8001c4a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0d6      	beq.n	8001b2e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fbad 	bl	80012f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01c      	beq.n	8001bd6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7d5b      	ldrb	r3, [r3, #21]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d118      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d111      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_ADC_PollForConversion+0x1dc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d002      	beq.n	8001be6 <HAL_ADC_PollForConversion+0x16a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	e000      	b.n	8001be8 <HAL_ADC_PollForConversion+0x16c>
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_ADC_PollForConversion+0x1d8>)
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d008      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d002      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	d104      	bne.n	8001c0c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	e00c      	b.n	8001c26 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <HAL_ADC_PollForConversion+0x1dc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d002      	beq.n	8001c1c <HAL_ADC_PollForConversion+0x1a0>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e000      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1a2>
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_ADC_PollForConversion+0x1d8>)
 8001c1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d104      	bne.n	8001c36 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2208      	movs	r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e008      	b.n	8001c48 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	220c      	movs	r2, #12
 8001c46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40022100 	.word	0x40022100
 8001c5c:	40022300 	.word	0x40022300
 8001c60:	58026300 	.word	0x58026300

08001c64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b0a1      	sub	sp, #132	; 0x84
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a9d      	ldr	r2, [pc, #628]	; (8001f10 <HAL_ADC_ConfigChannel+0x290>)
 8001c9a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x2a>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e321      	b.n	80022ee <HAL_ADC_ConfigChannel+0x66e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fc4e 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f040 8306 	bne.w	80022d0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x62>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	2201      	movs	r2, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	e016      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x90>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e003      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	69d1      	ldr	r1, [r2, #28]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f7ff faf3 	bl	8001316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fc0f 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 8001d3a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fc1c 	bl	800157e <LL_ADC_INJ_IsConversionOngoing>
 8001d46:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80b3 	bne.w	8001eb6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 80af 	bne.w	8001eb6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f7ff fb02 	bl	800136e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_ADC_ConfigChannel+0x294>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x110>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	e01d      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x14c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x136>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	e00a      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x14c>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d027      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6919      	ldr	r1, [r3, #16]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de4:	f7ff fa30 	bl	8001248 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	7e5b      	ldrb	r3, [r3, #25]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x17e>
 8001df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x180>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fa5a 	bl	80012ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7e1b      	ldrb	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x19c>
 8001e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e1a:	e000      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x19e>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f7ff fa32 	bl	8001288 <LL_ADC_SetDataRightShift>
 8001e24:	e047      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	069b      	lsls	r3, r3, #26
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d107      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e48:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	069b      	lsls	r3, r3, #26
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d107      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e6c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	069b      	lsls	r3, r3, #26
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d107      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e90:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	069b      	lsls	r3, r3, #26
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eb4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fb24 	bl	8001508 <LL_ADC_IsEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 820d 	bne.w	80022e2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f7ff fa75 	bl	80013c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_ADC_ConfigChannel+0x290>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	f040 8133 	bne.w	800214c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d110      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x298>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	3301      	adds	r3, #1
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	bf94      	ite	ls
 8001f06:	2301      	movls	r3, #1
 8001f08:	2300      	movhi	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e01e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x2cc>
 8001f0e:	bf00      	nop
 8001f10:	47ff0000 	.word	0x47ff0000
 8001f14:	5c001000 	.word	0x5c001000
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	bf94      	ite	ls
 8001f46:	2301      	movls	r3, #1
 8001f48:	2300      	movhi	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d079      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x2ec>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	3301      	adds	r3, #1
 8001f64:	069b      	lsls	r3, r3, #26
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f6a:	e015      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x318>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e003      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x338>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	e017      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x368>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_ConfigChannel+0x38e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	051b      	lsls	r3, r3, #20
 800200c:	e018      	b.n	8002040 <HAL_ADC_ConfigChannel+0x3c0>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e003      	b.n	8002032 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002040:	430b      	orrs	r3, r1
 8002042:	e07e      	b.n	8002142 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x3e0>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	3301      	adds	r3, #1
 8002058:	069b      	lsls	r3, r3, #26
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205e:	e015      	b.n	800208c <HAL_ADC_ConfigChannel+0x40c>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x42c>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	e017      	b.n	80020dc <HAL_ADC_ConfigChannel+0x45c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	61bb      	str	r3, [r7, #24]
  return result;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	ea42 0103 	orr.w	r1, r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x488>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	3b1e      	subs	r3, #30
 8002100:	051b      	lsls	r3, r3, #20
 8002102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002106:	e01b      	b.n	8002140 <HAL_ADC_ConfigChannel+0x4c0>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	60fb      	str	r3, [r7, #12]
  return result;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e003      	b.n	800212c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f003 021f 	and.w	r2, r3, #31
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	3b1e      	subs	r3, #30
 800213a:	051b      	lsls	r3, r3, #20
 800213c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002140:	430b      	orrs	r3, r1
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6892      	ldr	r2, [r2, #8]
 8002146:	4619      	mov	r1, r3
 8002148:	f7ff f911 	bl	800136e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f280 80c6 	bge.w	80022e2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_ADC_ConfigChannel+0x678>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_ADC_ConfigChannel+0x4ea>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_ADC_ConfigChannel+0x67c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4ee>
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_ADC_ConfigChannel+0x680>)
 800216c:	e000      	b.n	8002170 <HAL_ADC_ConfigChannel+0x4f0>
 800216e:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_ADC_ConfigChannel+0x684>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f85b 	bl	800122c <LL_ADC_GetCommonPathInternalCh>
 8002176:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_ADC_ConfigChannel+0x678>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_ADC_ConfigChannel+0x50c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_ADC_ConfigChannel+0x67c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10e      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x52a>
 800218c:	485a      	ldr	r0, [pc, #360]	; (80022f8 <HAL_ADC_ConfigChannel+0x678>)
 800218e:	f7ff f9bb 	bl	8001508 <LL_ADC_IsEnabled>
 8002192:	4604      	mov	r4, r0
 8002194:	4859      	ldr	r0, [pc, #356]	; (80022fc <HAL_ADC_ConfigChannel+0x67c>)
 8002196:	f7ff f9b7 	bl	8001508 <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	4323      	orrs	r3, r4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e008      	b.n	80021bc <HAL_ADC_ConfigChannel+0x53c>
 80021aa:	4857      	ldr	r0, [pc, #348]	; (8002308 <HAL_ADC_ConfigChannel+0x688>)
 80021ac:	f7ff f9ac 	bl	8001508 <LL_ADC_IsEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d07d      	beq.n	80022bc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_ADC_ConfigChannel+0x68c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d130      	bne.n	800222c <HAL_ADC_ConfigChannel+0x5ac>
 80021ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d12b      	bne.n	800222c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_ADC_ConfigChannel+0x688>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	f040 8081 	bne.w	80022e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a44      	ldr	r2, [pc, #272]	; (80022f8 <HAL_ADC_ConfigChannel+0x678>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_ADC_ConfigChannel+0x574>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a43      	ldr	r2, [pc, #268]	; (80022fc <HAL_ADC_ConfigChannel+0x67c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x578>
 80021f4:	4a42      	ldr	r2, [pc, #264]	; (8002300 <HAL_ADC_ConfigChannel+0x680>)
 80021f6:	e000      	b.n	80021fa <HAL_ADC_ConfigChannel+0x57a>
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_ADC_ConfigChannel+0x684>)
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f7fe ffff 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_ADC_ConfigChannel+0x690>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_ADC_ConfigChannel+0x694>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800221c:	e002      	b.n	8002224 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3b01      	subs	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800222a:	e05a      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <HAL_ADC_ConfigChannel+0x698>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d11e      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x5f4>
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d119      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a30      	ldr	r2, [pc, #192]	; (8002308 <HAL_ADC_ConfigChannel+0x688>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d14b      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_ADC_ConfigChannel+0x678>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_ADC_ConfigChannel+0x5de>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a28      	ldr	r2, [pc, #160]	; (80022fc <HAL_ADC_ConfigChannel+0x67c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x5e2>
 800225e:	4a28      	ldr	r2, [pc, #160]	; (8002300 <HAL_ADC_ConfigChannel+0x680>)
 8002260:	e000      	b.n	8002264 <HAL_ADC_ConfigChannel+0x5e4>
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_ADC_ConfigChannel+0x684>)
 8002264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f7fe ffca 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002272:	e036      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_ADC_ConfigChannel+0x69c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d131      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12c      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_ADC_ConfigChannel+0x688>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d127      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_ADC_ConfigChannel+0x678>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x626>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_ADC_ConfigChannel+0x67c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x62a>
 80022a6:	4a16      	ldr	r2, [pc, #88]	; (8002300 <HAL_ADC_ConfigChannel+0x680>)
 80022a8:	e000      	b.n	80022ac <HAL_ADC_ConfigChannel+0x62c>
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_ADC_ConfigChannel+0x684>)
 80022ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7fe ffa6 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
 80022ba:	e012      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022ce:	e008      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3784      	adds	r7, #132	; 0x84
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40022100 	.word	0x40022100
 8002300:	40022300 	.word	0x40022300
 8002304:	58026300 	.word	0x58026300
 8002308:	58026000 	.word	0x58026000
 800230c:	cb840000 	.word	0xcb840000
 8002310:	24000000 	.word	0x24000000
 8002314:	053e2d63 	.word	0x053e2d63
 8002318:	c7520000 	.word	0xc7520000
 800231c:	cfb80000 	.word	0xcfb80000

08002320 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f8eb 	bl	8001508 <LL_ADC_IsEnabled>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d16e      	bne.n	8002416 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <ADC_Enable+0x100>)
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e05a      	b.n	8002418 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f8ba 	bl	80014e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800236c:	f7fe fefc 	bl	8001168 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <ADC_Enable+0x104>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d004      	beq.n	8002386 <ADC_Enable+0x66>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <ADC_Enable+0x108>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <ADC_Enable+0x6a>
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <ADC_Enable+0x10c>)
 8002388:	e000      	b.n	800238c <ADC_Enable+0x6c>
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <ADC_Enable+0x110>)
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f83d 	bl	800140c <LL_ADC_GetMultimode>
 8002392:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a23      	ldr	r2, [pc, #140]	; (8002428 <ADC_Enable+0x108>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <ADC_Enable+0x84>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <ADC_Enable+0x86>
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <ADC_Enable+0x104>)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02c      	beq.n	8002408 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d130      	bne.n	8002416 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b4:	e028      	b.n	8002408 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f8a4 	bl	8001508 <LL_ADC_IsEnabled>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f888 	bl	80014e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023d0:	f7fe feca 	bl	8001168 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d914      	bls.n	8002408 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d00d      	beq.n	8002408 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e007      	b.n	8002418 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d1cf      	bne.n	80023b6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	8000003f 	.word	0x8000003f
 8002424:	40022000 	.word	0x40022000
 8002428:	40022100 	.word	0x40022100
 800242c:	40022300 	.word	0x40022300
 8002430:	58026300 	.word	0x58026300

08002434 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a7a      	ldr	r2, [pc, #488]	; (800262c <ADC_ConfigureBoostMode+0x1f8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <ADC_ConfigureBoostMode+0x1c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a79      	ldr	r2, [pc, #484]	; (8002630 <ADC_ConfigureBoostMode+0x1fc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d109      	bne.n	8002464 <ADC_ConfigureBoostMode+0x30>
 8002450:	4b78      	ldr	r3, [pc, #480]	; (8002634 <ADC_ConfigureBoostMode+0x200>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e008      	b.n	8002476 <ADC_ConfigureBoostMode+0x42>
 8002464:	4b74      	ldr	r3, [pc, #464]	; (8002638 <ADC_ConfigureBoostMode+0x204>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01c      	beq.n	80024b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800247a:	f001 fde9 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800247e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002488:	d010      	beq.n	80024ac <ADC_ConfigureBoostMode+0x78>
 800248a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800248e:	d873      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x144>
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d002      	beq.n	800249c <ADC_ConfigureBoostMode+0x68>
 8002496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800249a:	d16d      	bne.n	8002578 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	60fb      	str	r3, [r7, #12]
        break;
 80024aa:	e068      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	60fb      	str	r3, [r7, #12]
        break;
 80024b2:	e064      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f003 f82e 	bl	800551c <HAL_RCCEx_GetPeriphCLKFreq>
 80024c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024ca:	d051      	beq.n	8002570 <ADC_ConfigureBoostMode+0x13c>
 80024cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024d0:	d854      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 80024d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024d6:	d047      	beq.n	8002568 <ADC_ConfigureBoostMode+0x134>
 80024d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024dc:	d84e      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 80024de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024e2:	d03d      	beq.n	8002560 <ADC_ConfigureBoostMode+0x12c>
 80024e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024e8:	d848      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 80024ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ee:	d033      	beq.n	8002558 <ADC_ConfigureBoostMode+0x124>
 80024f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f4:	d842      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 80024f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024fa:	d029      	beq.n	8002550 <ADC_ConfigureBoostMode+0x11c>
 80024fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002500:	d83c      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 8002502:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002506:	d01a      	beq.n	800253e <ADC_ConfigureBoostMode+0x10a>
 8002508:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800250c:	d836      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 800250e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002512:	d014      	beq.n	800253e <ADC_ConfigureBoostMode+0x10a>
 8002514:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002518:	d830      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 800251a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800251e:	d00e      	beq.n	800253e <ADC_ConfigureBoostMode+0x10a>
 8002520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002524:	d82a      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 8002526:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800252a:	d008      	beq.n	800253e <ADC_ConfigureBoostMode+0x10a>
 800252c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002530:	d824      	bhi.n	800257c <ADC_ConfigureBoostMode+0x148>
 8002532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002536:	d002      	beq.n	800253e <ADC_ConfigureBoostMode+0x10a>
 8002538:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800253c:	d11e      	bne.n	800257c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	60fb      	str	r3, [r7, #12]
        break;
 800254e:	e016      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	60fb      	str	r3, [r7, #12]
        break;
 8002556:	e012      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	60fb      	str	r3, [r7, #12]
        break;
 800255e:	e00e      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	60fb      	str	r3, [r7, #12]
        break;
 8002566:	e00a      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	09db      	lsrs	r3, r3, #7
 800256c:	60fb      	str	r3, [r7, #12]
        break;
 800256e:	e006      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	60fb      	str	r3, [r7, #12]
        break;
 8002576:	e002      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800257c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800257e:	f7fe fe23 	bl	80011c8 <HAL_GetREVID>
 8002582:	4603      	mov	r3, r0
 8002584:	f241 0203 	movw	r2, #4099	; 0x1003
 8002588:	4293      	cmp	r3, r2
 800258a:	d815      	bhi.n	80025b8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a2b      	ldr	r2, [pc, #172]	; (800263c <ADC_ConfigureBoostMode+0x208>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d908      	bls.n	80025a6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025a4:	e03e      	b.n	8002624 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	e035      	b.n	8002624 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <ADC_ConfigureBoostMode+0x20c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d808      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025d4:	609a      	str	r2, [r3, #8]
}
 80025d6:	e025      	b.n	8002624 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <ADC_ConfigureBoostMode+0x210>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d80a      	bhi.n	80025f6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	e016      	b.n	8002624 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <ADC_ConfigureBoostMode+0x214>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d80a      	bhi.n	8002614 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	e007      	b.n	8002624 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40022000 	.word	0x40022000
 8002630:	40022100 	.word	0x40022100
 8002634:	40022300 	.word	0x40022300
 8002638:	58026300 	.word	0x58026300
 800263c:	01312d00 	.word	0x01312d00
 8002640:	005f5e10 	.word	0x005f5e10
 8002644:	00bebc20 	.word	0x00bebc20
 8002648:	017d7840 	.word	0x017d7840

0800264c <LL_ADC_IsEnabled>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <LL_ADC_IsEnabled+0x18>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_ADC_IsEnabled+0x1a>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_ADC_REG_IsConversionOngoing>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d101      	bne.n	800268a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b09f      	sub	sp, #124	; 0x7c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e0be      	b.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5c      	ldr	r2, [pc, #368]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026d0:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	e001      	b.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e09d      	b.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ffb9 	bl	8002672 <LL_ADC_REG_IsConversionOngoing>
 8002700:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ffb3 	bl	8002672 <LL_ADC_REG_IsConversionOngoing>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d17f      	bne.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002714:	2b00      	cmp	r3, #0
 8002716:	d17c      	bne.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a47      	ldr	r2, [pc, #284]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a46      	ldr	r2, [pc, #280]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800272c:	4b45      	ldr	r3, [pc, #276]	; (8002844 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800272e:	e000      	b.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002730:	4b45      	ldr	r3, [pc, #276]	; (8002848 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002732:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d039      	beq.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	431a      	orrs	r2, r3
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10e      	bne.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002762:	4836      	ldr	r0, [pc, #216]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002764:	f7ff ff72 	bl	800264c <LL_ADC_IsEnabled>
 8002768:	4604      	mov	r4, r0
 800276a:	4835      	ldr	r0, [pc, #212]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800276c:	f7ff ff6e 	bl	800264c <LL_ADC_IsEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	4323      	orrs	r3, r4
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e008      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002780:	4832      	ldr	r0, [pc, #200]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002782:	f7ff ff63 	bl	800264c <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d047      	beq.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800279c:	4013      	ands	r3, r2
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	6811      	ldr	r1, [r2, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	431a      	orrs	r2, r3
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ae:	e03a      	b.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10e      	bne.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80027d0:	481a      	ldr	r0, [pc, #104]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027d2:	f7ff ff3b 	bl	800264c <LL_ADC_IsEnabled>
 80027d6:	4604      	mov	r4, r0
 80027d8:	4819      	ldr	r0, [pc, #100]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027da:	f7ff ff37 	bl	800264c <LL_ADC_IsEnabled>
 80027de:	4603      	mov	r3, r0
 80027e0:	4323      	orrs	r3, r4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	e008      	b.n	8002800 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80027ee:	4817      	ldr	r0, [pc, #92]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80027f0:	f7ff ff2c 	bl	800264c <LL_ADC_IsEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800280a:	4013      	ands	r3, r2
 800280c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800280e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002810:	e009      	b.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002824:	e000      	b.n	8002828 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002826:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002830:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002834:	4618      	mov	r0, r3
 8002836:	377c      	adds	r7, #124	; 0x7c
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	40022000 	.word	0x40022000
 8002840:	40022100 	.word	0x40022100
 8002844:	40022300 	.word	0x40022300
 8002848:	58026300 	.word	0x58026300
 800284c:	58026000 	.word	0x58026000
 8002850:	fffff0e0 	.word	0xfffff0e0

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <__NVIC_SetPriorityGrouping+0x40>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <__NVIC_SetPriorityGrouping+0x40>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00
 8002898:	05fa0000 	.word	0x05fa0000

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff47 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff5e 	bl	800289c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff90 	bl	800290c <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5f 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffb2 	bl	8002974 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <HAL_GPIO_Init+0x234>)
 8002a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a2e:	e194      	b.n	8002d5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8186 	beq.w	8002d54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d005      	beq.n	8002a60 <HAL_GPIO_Init+0x44>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0201 	and.w	r2, r3, #1
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d017      	beq.n	8002afe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d123      	bne.n	8002b52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80e0 	beq.w	8002d54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_GPIO_Init+0x238>)
 8002b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b9a:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <HAL_GPIO_Init+0x238>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_GPIO_Init+0x238>)
 8002ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb2:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <HAL_GPIO_Init+0x23c>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_GPIO_Init+0x240>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d052      	beq.n	8002c84 <HAL_GPIO_Init+0x268>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_GPIO_Init+0x244>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_GPIO_Init+0x22e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_GPIO_Init+0x248>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02b      	beq.n	8002c46 <HAL_GPIO_Init+0x22a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_GPIO_Init+0x24c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x226>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_GPIO_Init+0x250>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x222>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_GPIO_Init+0x254>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x21e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_GPIO_Init+0x258>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x21a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <HAL_GPIO_Init+0x25c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x216>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <HAL_GPIO_Init+0x260>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x212>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_GPIO_Init+0x264>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x20e>
 8002c26:	2309      	movs	r3, #9
 8002c28:	e02d      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	e02b      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c2e:	2308      	movs	r3, #8
 8002c30:	e029      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e027      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e025      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e023      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e021      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e01f      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e01d      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e01b      	b.n	8002c86 <HAL_GPIO_Init+0x26a>
 8002c4e:	bf00      	nop
 8002c50:	58000080 	.word	0x58000080
 8002c54:	58024400 	.word	0x58024400
 8002c58:	58000400 	.word	0x58000400
 8002c5c:	58020000 	.word	0x58020000
 8002c60:	58020400 	.word	0x58020400
 8002c64:	58020800 	.word	0x58020800
 8002c68:	58020c00 	.word	0x58020c00
 8002c6c:	58021000 	.word	0x58021000
 8002c70:	58021400 	.word	0x58021400
 8002c74:	58021800 	.word	0x58021800
 8002c78:	58021c00 	.word	0x58021c00
 8002c7c:	58022000 	.word	0x58022000
 8002c80:	58022400 	.word	0x58022400
 8002c84:	2300      	movs	r3, #0
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	f002 0203 	and.w	r2, r2, #3
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	4093      	lsls	r3, r2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c96:	4938      	ldr	r1, [pc, #224]	; (8002d78 <HAL_GPIO_Init+0x35c>)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	3301      	adds	r3, #1
 8002d58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f ae63 	bne.w	8002a30 <HAL_GPIO_Init+0x14>
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	3724      	adds	r7, #36	; 0x24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	58000400 	.word	0x58000400

08002d7c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002d84:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_HSEM_FastTake+0x2c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3320      	adds	r3, #32
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	4a07      	ldr	r2, [pc, #28]	; (8002dac <HAL_HSEM_FastTake+0x30>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	58026400 	.word	0x58026400
 8002dac:	80000300 	.word	0x80000300

08002db0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002dba:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <HAL_HSEM_Release+0x24>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	58026400 	.word	0x58026400

08002dd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dda:	b08f      	sub	sp, #60	; 0x3c
 8002ddc:	af0a      	add	r7, sp, #40	; 0x28
 8002dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e116      	b.n	8003018 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fe f849 	bl	8000e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f005 f83d 	bl	8007ea8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	687e      	ldr	r6, [r7, #4]
 8002e36:	466d      	mov	r5, sp
 8002e38:	f106 0410 	add.w	r4, r6, #16
 8002e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e48:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e4c:	1d33      	adds	r3, r6, #4
 8002e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	f004 ffbb 	bl	8007dcc <USB_CoreInit>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0d7      	b.n	8003018 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 f82b 	bl	8007eca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e04a      	b.n	8002f10 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	333d      	adds	r3, #61	; 0x3d
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	333c      	adds	r3, #60	; 0x3c
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	b298      	uxth	r0, r3
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3356      	adds	r3, #86	; 0x56
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3340      	adds	r3, #64	; 0x40
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3344      	adds	r3, #68	; 0x44
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3348      	adds	r3, #72	; 0x48
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	334c      	adds	r3, #76	; 0x4c
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d3af      	bcc.n	8002e7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	e044      	b.n	8002faa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d3b5      	bcc.n	8002f20 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	687e      	ldr	r6, [r7, #4]
 8002fbc:	466d      	mov	r5, sp
 8002fbe:	f106 0410 	add.w	r4, r6, #16
 8002fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd2:	1d33      	adds	r3, r6, #4
 8002fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f004 ffc4 	bl	8007f64 <USB_DevInit>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e014      	b.n	8003018 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f80a 	bl	8003020 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f005 f982 	bl	800831a <USB_DevDisconnect>

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003020 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_PCDEx_ActivateLPM+0x44>)
 8003050:	4313      	orrs	r3, r2
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	10000003 	.word	0x10000003

08003068 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003070:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_PWREx_ConfigSupply+0xb0>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	2b06      	cmp	r3, #6
 800307a:	d00a      	beq.n	8003092 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800307c:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_PWREx_ConfigSupply+0xb0>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e040      	b.n	8003110 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e03e      	b.n	8003110 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_PWREx_ConfigSupply+0xb0>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800309a:	491f      	ldr	r1, [pc, #124]	; (8003118 <HAL_PWREx_ConfigSupply+0xb0>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030a2:	f7fe f861 	bl	8001168 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030a8:	e009      	b.n	80030be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030aa:	f7fe f85d 	bl	8001168 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b8:	d901      	bls.n	80030be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e028      	b.n	8003110 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_PWREx_ConfigSupply+0xb0>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d1ee      	bne.n	80030aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b1e      	cmp	r3, #30
 80030d0:	d008      	beq.n	80030e4 <HAL_PWREx_ConfigSupply+0x7c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b2e      	cmp	r3, #46	; 0x2e
 80030d6:	d005      	beq.n	80030e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b1d      	cmp	r3, #29
 80030dc:	d002      	beq.n	80030e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b2d      	cmp	r3, #45	; 0x2d
 80030e2:	d114      	bne.n	800310e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80030e4:	f7fe f840 	bl	8001168 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030ea:	e009      	b.n	8003100 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030ec:	f7fe f83c 	bl	8001168 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030fa:	d901      	bls.n	8003100 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e007      	b.n	8003110 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_PWREx_ConfigSupply+0xb0>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d1ee      	bne.n	80030ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	58024800 	.word	0x58024800

0800311c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	58024800 	.word	0x58024800

0800313c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f000 bc48 	b.w	80039e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8088 	beq.w	800326e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315e:	4b99      	ldr	r3, [pc, #612]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003168:	4b96      	ldr	r3, [pc, #600]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	2b10      	cmp	r3, #16
 8003172:	d007      	beq.n	8003184 <HAL_RCC_OscConfig+0x48>
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	2b18      	cmp	r3, #24
 8003178:	d111      	bne.n	800319e <HAL_RCC_OscConfig+0x62>
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b8f      	ldr	r3, [pc, #572]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d06d      	beq.n	800326c <HAL_RCC_OscConfig+0x130>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d169      	bne.n	800326c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f000 bc21 	b.w	80039e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x7a>
 80031a8:	4b86      	ldr	r3, [pc, #536]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a85      	ldr	r2, [pc, #532]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e02e      	b.n	8003214 <HAL_RCC_OscConfig+0xd8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x9c>
 80031be:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a80      	ldr	r2, [pc, #512]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b7e      	ldr	r3, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7d      	ldr	r2, [pc, #500]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e01d      	b.n	8003214 <HAL_RCC_OscConfig+0xd8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0xc0>
 80031e2:	4b78      	ldr	r3, [pc, #480]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a77      	ldr	r2, [pc, #476]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a74      	ldr	r2, [pc, #464]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0xd8>
 80031fc:	4b71      	ldr	r3, [pc, #452]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a70      	ldr	r2, [pc, #448]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b6e      	ldr	r3, [pc, #440]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a6d      	ldr	r2, [pc, #436]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd ffa4 	bl	8001168 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd ffa0 	bl	8001168 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e3d4      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd ff90 	bl	8001168 <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fd ff8c 	bl	8001168 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e3c0      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800325e:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x110>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80ca 	beq.w	8003410 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327c:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003284:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003286:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_RCC_OscConfig+0x166>
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	2b18      	cmp	r3, #24
 8003296:	d156      	bne.n	8003346 <HAL_RCC_OscConfig+0x20a>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d151      	bne.n	8003346 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a2:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x17e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e392      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032ba:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 0219 	bic.w	r2, r3, #25
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	493f      	ldr	r1, [pc, #252]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd ff4c 	bl	8001168 <HAL_GetTick>
 80032d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fd ff48 	bl	8001168 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e37c      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e6:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	f7fd ff69 	bl	80011c8 <HAL_GetREVID>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d817      	bhi.n	8003330 <HAL_RCC_OscConfig+0x1f4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d108      	bne.n	800331a <HAL_RCC_OscConfig+0x1de>
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003310:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003316:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003318:	e07a      	b.n	8003410 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	031b      	lsls	r3, r3, #12
 8003328:	4926      	ldr	r1, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332e:	e06f      	b.n	8003410 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	4921      	ldr	r1, [pc, #132]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003344:	e064      	b.n	8003410 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d047      	beq.n	80033de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0219 	bic.w	r2, r3, #25
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	491a      	ldr	r1, [pc, #104]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd ff02 	bl	8001168 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7fd fefe 	bl	8001168 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e332      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	f7fd ff1f 	bl	80011c8 <HAL_GetREVID>
 800338a:	4603      	mov	r3, r0
 800338c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003390:	4293      	cmp	r3, r2
 8003392:	d819      	bhi.n	80033c8 <HAL_RCC_OscConfig+0x28c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d108      	bne.n	80033ae <HAL_RCC_OscConfig+0x272>
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033a4:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80033a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033aa:	6053      	str	r3, [r2, #4]
 80033ac:	e030      	b.n	8003410 <HAL_RCC_OscConfig+0x2d4>
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	031b      	lsls	r3, r3, #12
 80033bc:	4901      	ldr	r1, [pc, #4]	; (80033c4 <HAL_RCC_OscConfig+0x288>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e025      	b.n	8003410 <HAL_RCC_OscConfig+0x2d4>
 80033c4:	58024400 	.word	0x58024400
 80033c8:	4b9a      	ldr	r3, [pc, #616]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4997      	ldr	r1, [pc, #604]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	e018      	b.n	8003410 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b95      	ldr	r3, [pc, #596]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a94      	ldr	r2, [pc, #592]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd febd 	bl	8001168 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fd feb9 	bl	8001168 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e2ed      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003404:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a9 	beq.w	8003570 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003426:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003428:	4b82      	ldr	r3, [pc, #520]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d007      	beq.n	8003444 <HAL_RCC_OscConfig+0x308>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b18      	cmp	r3, #24
 8003438:	d13a      	bne.n	80034b0 <HAL_RCC_OscConfig+0x374>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d135      	bne.n	80034b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003444:	4b7b      	ldr	r3, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_OscConfig+0x320>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d001      	beq.n	800345c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e2c1      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800345c:	f7fd feb4 	bl	80011c8 <HAL_GetREVID>
 8003460:	4603      	mov	r3, r0
 8003462:	f241 0203 	movw	r2, #4099	; 0x1003
 8003466:	4293      	cmp	r3, r2
 8003468:	d817      	bhi.n	800349a <HAL_RCC_OscConfig+0x35e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	2b20      	cmp	r3, #32
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0x348>
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800347a:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 800347c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003480:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003482:	e075      	b.n	8003570 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003484:	4b6b      	ldr	r3, [pc, #428]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	069b      	lsls	r3, r3, #26
 8003492:	4968      	ldr	r1, [pc, #416]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003498:	e06a      	b.n	8003570 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800349a:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	4962      	ldr	r1, [pc, #392]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ae:	e05f      	b.n	8003570 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d042      	beq.n	800353e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034b8:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5d      	ldr	r2, [pc, #372]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80034be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fe50 	bl	8001168 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034cc:	f7fd fe4c 	bl	8001168 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e280      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034de:	4b55      	ldr	r3, [pc, #340]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ea:	f7fd fe6d 	bl	80011c8 <HAL_GetREVID>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d817      	bhi.n	8003528 <HAL_RCC_OscConfig+0x3ec>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d108      	bne.n	8003512 <HAL_RCC_OscConfig+0x3d6>
 8003500:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 800350a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800350e:	6053      	str	r3, [r2, #4]
 8003510:	e02e      	b.n	8003570 <HAL_RCC_OscConfig+0x434>
 8003512:	4b48      	ldr	r3, [pc, #288]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	069b      	lsls	r3, r3, #26
 8003520:	4944      	ldr	r1, [pc, #272]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
 8003526:	e023      	b.n	8003570 <HAL_RCC_OscConfig+0x434>
 8003528:	4b42      	ldr	r3, [pc, #264]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	493f      	ldr	r1, [pc, #252]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003538:	4313      	orrs	r3, r2
 800353a:	60cb      	str	r3, [r1, #12]
 800353c:	e018      	b.n	8003570 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800353e:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fd fe0d 	bl	8001168 <HAL_GetTick>
 800354e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003552:	f7fd fe09 	bl	8001168 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e23d      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003564:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d036      	beq.n	80035ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d019      	beq.n	80035b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fd fdea 	bl	8001168 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fd fde6 	bl	8001168 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e21a      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x45c>
 80035b6:	e018      	b.n	80035ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fd fdd0 	bl	8001168 <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fd fdcc 	bl	8001168 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e200      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d039      	beq.n	800366a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01c      	beq.n	8003638 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003608:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800360a:	f7fd fdad 	bl	8001168 <HAL_GetTick>
 800360e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003612:	f7fd fda9 	bl	8001168 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1dd      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCC_OscConfig+0x4f8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x4d6>
 8003630:	e01b      	b.n	800366a <HAL_RCC_OscConfig+0x52e>
 8003632:	bf00      	nop
 8003634:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003638:	4b9b      	ldr	r3, [pc, #620]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a9a      	ldr	r2, [pc, #616]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800363e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003642:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003644:	f7fd fd90 	bl	8001168 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364c:	f7fd fd8c 	bl	8001168 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1c0      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800365e:	4b92      	ldr	r3, [pc, #584]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8081 	beq.w	800377a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003678:	4b8c      	ldr	r3, [pc, #560]	; (80038ac <HAL_RCC_OscConfig+0x770>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a8b      	ldr	r2, [pc, #556]	; (80038ac <HAL_RCC_OscConfig+0x770>)
 800367e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003684:	f7fd fd70 	bl	8001168 <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fd fd6c 	bl	8001168 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1a0      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800369e:	4b83      	ldr	r3, [pc, #524]	; (80038ac <HAL_RCC_OscConfig+0x770>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x584>
 80036b2:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a7c      	ldr	r2, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	e02d      	b.n	800371c <HAL_RCC_OscConfig+0x5e0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5a6>
 80036c8:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a76      	ldr	r2, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b74      	ldr	r3, [pc, #464]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a73      	ldr	r2, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
 80036e0:	e01c      	b.n	800371c <HAL_RCC_OscConfig+0x5e0>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c8>
 80036ea:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0x5e0>
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a64      	ldr	r2, [pc, #400]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fd fd20 	bl	8001168 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fd fd1c 	bl	8001168 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e14e      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003742:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ee      	beq.n	800372c <HAL_RCC_OscConfig+0x5f0>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fd0a 	bl	8001168 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fd fd06 	bl	8001168 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e138      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800376e:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ee      	bne.n	8003758 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 812d 	beq.w	80039de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003784:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378c:	2b18      	cmp	r3, #24
 800378e:	f000 80bd 	beq.w	800390c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b02      	cmp	r3, #2
 8003798:	f040 809e 	bne.w	80038d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a41      	ldr	r2, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80037a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fcde 	bl	8001168 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fcda 	bl	8001168 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e10e      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCC_OscConfig+0x774>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4931      	ldr	r1, [pc, #196]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	628b      	str	r3, [r1, #40]	; 0x28
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	3b01      	subs	r3, #1
 80037ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	3b01      	subs	r3, #1
 80037f8:	025b      	lsls	r3, r3, #9
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	3b01      	subs	r3, #1
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003818:	4923      	ldr	r1, [pc, #140]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800382c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_RCC_OscConfig+0x778>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003836:	00d2      	lsls	r2, r2, #3
 8003838:	491b      	ldr	r1, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f023 020c 	bic.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4917      	ldr	r1, [pc, #92]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f023 0202 	bic.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	4912      	ldr	r1, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_RCC_OscConfig+0x76c>)
 8003898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fc63 	bl	8001168 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038a4:	e011      	b.n	80038ca <HAL_RCC_OscConfig+0x78e>
 80038a6:	bf00      	nop
 80038a8:	58024400 	.word	0x58024400
 80038ac:	58024800 	.word	0x58024800
 80038b0:	fffffc0c 	.word	0xfffffc0c
 80038b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fc56 	bl	8001168 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e08a      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x77c>
 80038d6:	e082      	b.n	80039de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a42      	ldr	r2, [pc, #264]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80038de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fc40 	bl	8001168 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fd fc3c 	bl	8001168 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e070      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038fe:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x7b0>
 800390a:	e068      	b.n	80039de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003912:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b01      	cmp	r3, #1
 800391e:	d031      	beq.n	8003984 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0203 	and.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d12a      	bne.n	8003984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d122      	bne.n	8003984 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d11a      	bne.n	8003984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0a5b      	lsrs	r3, r3, #9
 8003952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d111      	bne.n	8003984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d108      	bne.n	8003984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	0e1b      	lsrs	r3, r3, #24
 8003976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e02b      	b.n	80039e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003992:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d01f      	beq.n	80039de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039aa:	f7fd fbdd 	bl	8001168 <HAL_GetTick>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80039b0:	bf00      	nop
 80039b2:	f7fd fbd9 	bl	8001168 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d0f9      	beq.n	80039b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80039c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_OscConfig+0x8b0>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039ca:	00d2      	lsls	r2, r2, #3
 80039cc:	4906      	ldr	r1, [pc, #24]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_RCC_OscConfig+0x8ac>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3730      	adds	r7, #48	; 0x30
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58024400 	.word	0x58024400
 80039ec:	ffff0007 	.word	0xffff0007

080039f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e19c      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b8a      	ldr	r3, [pc, #552]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b87      	ldr	r3, [pc, #540]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	4985      	ldr	r1, [pc, #532]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b83      	ldr	r3, [pc, #524]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e184      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d908      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a50:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4975      	ldr	r1, [pc, #468]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b70      	ldr	r3, [pc, #448]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d908      	bls.n	8003a90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	496a      	ldr	r1, [pc, #424]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d908      	bls.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	495e      	ldr	r1, [pc, #376]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d908      	bls.n	8003aec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ada:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4953      	ldr	r1, [pc, #332]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d908      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f023 020f 	bic.w	r2, r3, #15
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4947      	ldr	r1, [pc, #284]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d055      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b26:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	4940      	ldr	r1, [pc, #256]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b40:	4b3c      	ldr	r3, [pc, #240]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d121      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0f6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b58:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d115      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0ea      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0de      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b80:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f023 0207 	bic.w	r2, r3, #7
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4925      	ldr	r1, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fae1 	bl	8001168 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003baa:	f7fd fadd 	bl	8001168 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0be      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d1eb      	bne.n	8003baa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d010      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d208      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f023 020f 	bic.w	r2, r3, #15
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	490e      	ldr	r1, [pc, #56]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d214      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 020f 	bic.w	r2, r3, #15
 8003c16:	4906      	ldr	r1, [pc, #24]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e086      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
 8003c30:	52002000 	.word	0x52002000
 8003c34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d010      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d208      	bcs.n	8003c66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c54:	4b3c      	ldr	r3, [pc, #240]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4939      	ldr	r1, [pc, #228]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d010      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d208      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	492e      	ldr	r1, [pc, #184]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d208      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	4922      	ldr	r1, [pc, #136]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d208      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4917      	ldr	r1, [pc, #92]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cf0:	f000 f834 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	4912      	ldr	r1, [pc, #72]	; (8003d4c <HAL_RCC_ClockConfig+0x35c>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <HAL_RCC_ClockConfig+0x35c>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x360>)
 8003d26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x364>)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x368>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd f9ce 	bl	80010d4 <HAL_InitTick>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	08008450 	.word	0x08008450
 8003d50:	24000004 	.word	0x24000004
 8003d54:	24000000 	.word	0x24000000
 8003d58:	24000008 	.word	0x24000008

08003d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d62:	4bb3      	ldr	r3, [pc, #716]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d6a:	2b18      	cmp	r3, #24
 8003d6c:	f200 8155 	bhi.w	800401a <HAL_RCC_GetSysClockFreq+0x2be>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003ddd 	.word	0x08003ddd
 8003d7c:	0800401b 	.word	0x0800401b
 8003d80:	0800401b 	.word	0x0800401b
 8003d84:	0800401b 	.word	0x0800401b
 8003d88:	0800401b 	.word	0x0800401b
 8003d8c:	0800401b 	.word	0x0800401b
 8003d90:	0800401b 	.word	0x0800401b
 8003d94:	0800401b 	.word	0x0800401b
 8003d98:	08003e03 	.word	0x08003e03
 8003d9c:	0800401b 	.word	0x0800401b
 8003da0:	0800401b 	.word	0x0800401b
 8003da4:	0800401b 	.word	0x0800401b
 8003da8:	0800401b 	.word	0x0800401b
 8003dac:	0800401b 	.word	0x0800401b
 8003db0:	0800401b 	.word	0x0800401b
 8003db4:	0800401b 	.word	0x0800401b
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	0800401b 	.word	0x0800401b
 8003dc0:	0800401b 	.word	0x0800401b
 8003dc4:	0800401b 	.word	0x0800401b
 8003dc8:	0800401b 	.word	0x0800401b
 8003dcc:	0800401b 	.word	0x0800401b
 8003dd0:	0800401b 	.word	0x0800401b
 8003dd4:	0800401b 	.word	0x0800401b
 8003dd8:	08003e0f 	.word	0x08003e0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ddc:	4b94      	ldr	r3, [pc, #592]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003de8:	4b91      	ldr	r3, [pc, #580]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	4a90      	ldr	r2, [pc, #576]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dfa:	e111      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dfc:	4b8d      	ldr	r3, [pc, #564]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dfe:	61bb      	str	r3, [r7, #24]
      break;
 8003e00:	e10e      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e02:	4b8d      	ldr	r3, [pc, #564]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e04:	61bb      	str	r3, [r7, #24]
      break;
 8003e06:	e10b      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e08:	4b8c      	ldr	r3, [pc, #560]	; (800403c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e0a:	61bb      	str	r3, [r7, #24]
      break;
 8003e0c:	e108      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e0e:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e18:	4b85      	ldr	r3, [pc, #532]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e24:	4b82      	ldr	r3, [pc, #520]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e2e:	4b80      	ldr	r3, [pc, #512]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80e1 	beq.w	8004014 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f000 8083 	beq.w	8003f60 <HAL_RCC_GetSysClockFreq+0x204>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f200 80a1 	bhi.w	8003fa4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x114>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d056      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e6e:	e099      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e70:	4b6f      	ldr	r3, [pc, #444]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02d      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e7c:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	08db      	lsrs	r3, r3, #3
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	4a6b      	ldr	r2, [pc, #428]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea6:	4b62      	ldr	r3, [pc, #392]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ed6:	e087      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004044 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003efe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f1a:	e065      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f5e:	e043      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800404c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fa2:	e021      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fe6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	0a5b      	lsrs	r3, r3, #9
 8003fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004000:	edd7 6a07 	vldr	s13, [r7, #28]
 8004004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800400c:	ee17 3a90 	vmov	r3, s15
 8004010:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004012:	e005      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
      break;
 8004018:	e002      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800401c:	61bb      	str	r3, [r7, #24]
      break;
 800401e:	bf00      	nop
  }

  return sysclockfreq;
 8004020:	69bb      	ldr	r3, [r7, #24]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
 8004034:	03d09000 	.word	0x03d09000
 8004038:	003d0900 	.word	0x003d0900
 800403c:	007a1200 	.word	0x007a1200
 8004040:	46000000 	.word	0x46000000
 8004044:	4c742400 	.word	0x4c742400
 8004048:	4a742400 	.word	0x4a742400
 800404c:	4af42400 	.word	0x4af42400

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004056:	f7ff fe81 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 800405a:	4602      	mov	r2, r0
 800405c:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	490f      	ldr	r1, [pc, #60]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004068:	5ccb      	ldrb	r3, [r1, r3]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800408c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800408e:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	58024400 	.word	0x58024400
 80040a4:	08008450 	.word	0x08008450
 80040a8:	24000004 	.word	0x24000004
 80040ac:	24000000 	.word	0x24000000

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80040b4:	f7ff ffcc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4904      	ldr	r1, [pc, #16]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	58024400 	.word	0x58024400
 80040d8:	08008450 	.word	0x08008450

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040e0:	f7ff ffb6 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58024400 	.word	0x58024400
 8004104:	08008450 	.word	0x08008450

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b0ca      	sub	sp, #296	; 0x128
 800410e:	af00      	add	r7, sp, #0
 8004110:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004114:	2300      	movs	r3, #0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800411a:	2300      	movs	r3, #0
 800411c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800412c:	2500      	movs	r5, #0
 800412e:	ea54 0305 	orrs.w	r3, r4, r5
 8004132:	d049      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800413e:	d02f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004144:	d828      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800414a:	d01a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800414c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004150:	d822      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415a:	d007      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800415c:	e01c      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415e:	4bb8      	ldr	r3, [pc, #736]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	4ab7      	ldr	r2, [pc, #732]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800416a:	e01a      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004170:	3308      	adds	r3, #8
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f002 fb61 	bl	800683c <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004180:	e00f      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	3328      	adds	r3, #40	; 0x28
 8004188:	2102      	movs	r1, #2
 800418a:	4618      	mov	r0, r3
 800418c:	f002 fc08 	bl	80069a0 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041aa:	4ba5      	ldr	r3, [pc, #660]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	4aa1      	ldr	r2, [pc, #644]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	6513      	str	r3, [r2, #80]	; 0x50
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80041d4:	f04f 0900 	mov.w	r9, #0
 80041d8:	ea58 0309 	orrs.w	r3, r8, r9
 80041dc:	d047      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d82a      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004205 	.word	0x08004205
 80041f4:	08004213 	.word	0x08004213
 80041f8:	08004229 	.word	0x08004229
 80041fc:	08004247 	.word	0x08004247
 8004200:	08004247 	.word	0x08004247
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004204:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a8d      	ldr	r2, [pc, #564]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004210:	e01a      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	3308      	adds	r3, #8
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f002 fb0e 	bl	800683c <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004226:	e00f      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422c:	3328      	adds	r3, #40	; 0x28
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f002 fbb5 	bl	80069a0 <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800423c:	e004      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004244:	e000      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004250:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	f023 0107 	bic.w	r1, r3, #7
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	4a78      	ldr	r2, [pc, #480]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6513      	str	r3, [r2, #80]	; 0x50
 8004264:	e003      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800426a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800427a:	f04f 0b00 	mov.w	fp, #0
 800427e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004282:	d04c      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d030      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004294:	d829      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004296:	2bc0      	cmp	r3, #192	; 0xc0
 8004298:	d02d      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800429a:	2bc0      	cmp	r3, #192	; 0xc0
 800429c:	d825      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d018      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d821      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d007      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80042ae:	e01c      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b0:	4b63      	ldr	r3, [pc, #396]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4a62      	ldr	r2, [pc, #392]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042bc:	e01c      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	3308      	adds	r3, #8
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f002 fab8 	bl	800683c <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042d2:	e011      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	3328      	adds	r3, #40	; 0x28
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f002 fb5f 	bl	80069a0 <RCCEx_PLL3_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004300:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430e:	4a4c      	ldr	r2, [pc, #304]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6513      	str	r3, [r2, #80]	; 0x50
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800432a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004334:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d053      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800434a:	d035      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800434c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004350:	d82e      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004352:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004356:	d031      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004358:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800435c:	d828      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004362:	d01a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004368:	d822      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800436e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004372:	d007      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004374:	e01c      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004376:	4b32      	ldr	r3, [pc, #200]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	4a31      	ldr	r2, [pc, #196]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800437c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004380:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004382:	e01c      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	3308      	adds	r3, #8
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f002 fa55 	bl	800683c <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004398:	e011      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	3328      	adds	r3, #40	; 0x28
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f002 fafc 	bl	80069a0 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043ae:	e006      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043b6:	e002      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043d6:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	6593      	str	r3, [r2, #88]	; 0x58
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80043f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d056      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800440e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004412:	d038      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004418:	d831      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800441a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800441e:	d034      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004420:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004424:	d82b      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800442a:	d01d      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800442c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004430:	d825      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800443c:	e01f      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004444:	4ba2      	ldr	r3, [pc, #648]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4aa1      	ldr	r2, [pc, #644]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004450:	e01c      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004456:	3308      	adds	r3, #8
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f002 f9ee 	bl	800683c <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	3328      	adds	r3, #40	; 0x28
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f002 fa95 	bl	80069a0 <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004484:	e002      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800448a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004494:	4b8e      	ldr	r3, [pc, #568]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044a4:	4a8a      	ldr	r2, [pc, #552]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80044c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80044ce:	460b      	mov	r3, r1
 80044d0:	4313      	orrs	r3, r2
 80044d2:	d03a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	2b30      	cmp	r3, #48	; 0x30
 80044dc:	d01f      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80044de:	2b30      	cmp	r3, #48	; 0x30
 80044e0:	d819      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d00c      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d815      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d019      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d111      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f2:	4b77      	ldr	r3, [pc, #476]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	4a76      	ldr	r2, [pc, #472]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004504:	3308      	adds	r3, #8
 8004506:	2102      	movs	r1, #2
 8004508:	4618      	mov	r0, r3
 800450a:	f002 f997 	bl	800683c <RCCEx_PLL2_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004514:	e006      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800452c:	4b68      	ldr	r3, [pc, #416]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	4a65      	ldr	r2, [pc, #404]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800453c:	430b      	orrs	r3, r1
 800453e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004556:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004560:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004564:	460b      	mov	r3, r1
 8004566:	4313      	orrs	r3, r2
 8004568:	d051      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004574:	d035      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457a:	d82e      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800457c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004580:	d031      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004582:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004586:	d828      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d01a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	d822      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800459e:	e01c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a4a      	ldr	r2, [pc, #296]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045ac:	e01c      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	3308      	adds	r3, #8
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f002 f940 	bl	800683c <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045c2:	e011      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c8:	3328      	adds	r3, #40	; 0x28
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f002 f9e7 	bl	80069a0 <RCCEx_PLL3_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80045e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045f0:	4b37      	ldr	r3, [pc, #220]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fe:	4a34      	ldr	r2, [pc, #208]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004600:	430b      	orrs	r3, r1
 8004602:	6513      	str	r3, [r2, #80]	; 0x50
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800461a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004624:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d056      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004638:	d033      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800463a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800463e:	d82c      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004640:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004644:	d02f      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464a:	d826      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800464c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004650:	d02b      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004652:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004656:	d820      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800465c:	d012      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800465e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004662:	d81a      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d115      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	3308      	adds	r3, #8
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f002 f8e0 	bl	800683c <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004688:	3328      	adds	r3, #40	; 0x28
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f002 f987 	bl	80069a0 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004698:	e00a      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046a2:	bf00      	nop
 80046a4:	e004      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c6:	4a02      	ldr	r2, [pc, #8]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6513      	str	r3, [r2, #80]	; 0x50
 80046cc:	e006      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4313      	orrs	r3, r2
 80046fa:	d055      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004708:	d033      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800470a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800470e:	d82c      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d02f      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471a:	d826      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800471c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004720:	d02b      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004722:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004726:	d820      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472c:	d012      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800472e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004732:	d81a      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d022      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473c:	d115      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	3308      	adds	r3, #8
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f002 f878 	bl	800683c <RCCEx_PLL2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004752:	e015      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004758:	3328      	adds	r3, #40	; 0x28
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f002 f91f 	bl	80069a0 <RCCEx_PLL3_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004768:	e00a      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004772:	bf00      	nop
 8004774:	e004      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800477e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10b      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004788:	4ba3      	ldr	r3, [pc, #652]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004798:	4a9f      	ldr	r2, [pc, #636]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6593      	str	r3, [r2, #88]	; 0x58
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80047b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d037      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d2:	d00e      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80047d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d8:	d816      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d018      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80047de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e2:	d111      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e4:	4b8c      	ldr	r3, [pc, #560]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	4a8b      	ldr	r2, [pc, #556]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047f0:	e00f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f6:	3308      	adds	r3, #8
 80047f8:	2101      	movs	r1, #1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f002 f81e 	bl	800683c <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800481c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a7b      	ldr	r2, [pc, #492]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6513      	str	r3, [r2, #80]	; 0x50
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004834:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800484e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d039      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	2b03      	cmp	r3, #3
 8004860:	d81c      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	080048a5 	.word	0x080048a5
 800486c:	08004879 	.word	0x08004879
 8004870:	08004887 	.word	0x08004887
 8004874:	080048a5 	.word	0x080048a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a66      	ldr	r2, [pc, #408]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004884:	e00f      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488a:	3308      	adds	r3, #8
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f001 ffd4 	bl	800683c <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800489a:	e004      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80048a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048ae:	4b5a      	ldr	r3, [pc, #360]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	f023 0103 	bic.w	r1, r3, #3
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048bc:	4a56      	ldr	r2, [pc, #344]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048c2:	e003      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80048d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048e6:	460b      	mov	r3, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f000 809f 	beq.w	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ee:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048fa:	f7fc fc35 	bl	8001168 <HAL_GetTick>
 80048fe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004902:	e00b      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fc fc30 	bl	8001168 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b64      	cmp	r3, #100	; 0x64
 8004912:	d903      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800491a:	e005      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800491c:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ed      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492c:	2b00      	cmp	r3, #0
 800492e:	d179      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800493c:	4053      	eors	r3, r2
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	2b00      	cmp	r3, #0
 8004944:	d015      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800495e:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a2d      	ldr	r2, [pc, #180]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800496a:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800496c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004970:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d118      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fc fbf2 	bl	8001168 <HAL_GetTick>
 8004984:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004988:	e00d      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	f7fc fbed 	bl	8001168 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	f241 3388 	movw	r3, #5000	; 0x1388
 800499a:	429a      	cmp	r2, r3
 800499c:	d903      	bls.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80049a4:	e005      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049a6:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0eb      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d129      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ca:	d10e      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049dc:	091a      	lsrs	r2, r3, #4
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6113      	str	r3, [r2, #16]
 80049e8:	e005      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049f4:	6113      	str	r3, [r2, #16]
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a06:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0c:	e00e      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004a16:	e009      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	58024800 	.word	0x58024800
 8004a20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f002 0301 	and.w	r3, r2, #1
 8004a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f000 8089 	beq.w	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a54:	2b28      	cmp	r3, #40	; 0x28
 8004a56:	d86b      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004a58:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004b39 	.word	0x08004b39
 8004a64:	08004b31 	.word	0x08004b31
 8004a68:	08004b31 	.word	0x08004b31
 8004a6c:	08004b31 	.word	0x08004b31
 8004a70:	08004b31 	.word	0x08004b31
 8004a74:	08004b31 	.word	0x08004b31
 8004a78:	08004b31 	.word	0x08004b31
 8004a7c:	08004b31 	.word	0x08004b31
 8004a80:	08004b05 	.word	0x08004b05
 8004a84:	08004b31 	.word	0x08004b31
 8004a88:	08004b31 	.word	0x08004b31
 8004a8c:	08004b31 	.word	0x08004b31
 8004a90:	08004b31 	.word	0x08004b31
 8004a94:	08004b31 	.word	0x08004b31
 8004a98:	08004b31 	.word	0x08004b31
 8004a9c:	08004b31 	.word	0x08004b31
 8004aa0:	08004b1b 	.word	0x08004b1b
 8004aa4:	08004b31 	.word	0x08004b31
 8004aa8:	08004b31 	.word	0x08004b31
 8004aac:	08004b31 	.word	0x08004b31
 8004ab0:	08004b31 	.word	0x08004b31
 8004ab4:	08004b31 	.word	0x08004b31
 8004ab8:	08004b31 	.word	0x08004b31
 8004abc:	08004b31 	.word	0x08004b31
 8004ac0:	08004b39 	.word	0x08004b39
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004b31 	.word	0x08004b31
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004b31 	.word	0x08004b31
 8004ad4:	08004b31 	.word	0x08004b31
 8004ad8:	08004b31 	.word	0x08004b31
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b31 	.word	0x08004b31
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b31 	.word	0x08004b31
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b39 	.word	0x08004b39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fe95 	bl	800683c <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b18:	e00f      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1e:	3328      	adds	r3, #40	; 0x28
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 ff3c 	bl	80069a0 <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b2e:	e004      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b42:	4bbf      	ldr	r3, [pc, #764]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b50:	4abb      	ldr	r2, [pc, #748]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6553      	str	r3, [r2, #84]	; 0x54
 8004b56:	e003      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f002 0302 	and.w	r3, r2, #2
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d041      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d824      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004ba9 	.word	0x08004ba9
 8004b98:	08004bbf 	.word	0x08004bbf
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bac:	3308      	adds	r3, #8
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fe43 	bl	800683c <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e00f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc2:	3328      	adds	r3, #40	; 0x28
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 feea 	bl	80069a0 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004be6:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f023 0107 	bic.w	r1, r3, #7
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf4:	4a92      	ldr	r2, [pc, #584]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6553      	str	r3, [r2, #84]	; 0x54
 8004bfa:	e003      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f002 0304 	and.w	r3, r2, #4
 8004c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4313      	orrs	r3, r2
 8004c22:	d044      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d825      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c85 	.word	0x08004c85
 8004c3c:	08004c51 	.word	0x08004c51
 8004c40:	08004c67 	.word	0x08004c67
 8004c44:	08004c85 	.word	0x08004c85
 8004c48:	08004c85 	.word	0x08004c85
 8004c4c:	08004c85 	.word	0x08004c85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c54:	3308      	adds	r3, #8
 8004c56:	2101      	movs	r1, #1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 fdef 	bl	800683c <RCCEx_PLL2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c64:	e00f      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6a:	3328      	adds	r3, #40	; 0x28
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f001 fe96 	bl	80069a0 <RCCEx_PLL3_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c7a:	e004      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c8e:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c92:	f023 0107 	bic.w	r1, r3, #7
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9e:	4a68      	ldr	r2, [pc, #416]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f002 0320 	and.w	r3, r2, #32
 8004cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d055      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cda:	d033      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce0:	d82c      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d02f      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d826      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cf2:	d02b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004cf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cf8:	d820      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfe:	d012      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d04:	d81a      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d022      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d0e:	d115      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d14:	3308      	adds	r3, #8
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fd8f 	bl	800683c <RCCEx_PLL2_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d24:	e015      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2a:	3328      	adds	r3, #40	; 0x28
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 fe36 	bl	80069a0 <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d42:	e006      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d44:	bf00      	nop
 8004d46:	e004      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a35      	ldr	r2, [pc, #212]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6553      	str	r3, [r2, #84]	; 0x54
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4313      	orrs	r3, r2
 8004d98:	d058      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004da6:	d033      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004da8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dac:	d82c      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	d02f      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db8:	d826      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dbe:	d02b      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dc4:	d820      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d012      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd0:	d81a      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d022      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d115      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de0:	3308      	adds	r3, #8
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 fd29 	bl	800683c <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004df0:	e015      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df6:	3328      	adds	r3, #40	; 0x28
 8004df8:	2102      	movs	r1, #2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 fdd0 	bl	80069a0 <RCCEx_PLL3_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e06:	e00a      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e0e:	e006      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e10:	bf00      	nop
 8004e12:	e004      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e14:	bf00      	nop
 8004e16:	e002      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e18:	bf00      	nop
 8004e1a:	e000      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10e      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e36:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e3c:	e006      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d055      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e78:	d033      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004e7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e7e:	d82c      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e84:	d02f      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8a:	d826      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e90:	d02b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004e92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e96:	d820      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e9c:	d012      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea2:	d81a      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d022      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eac:	d115      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fcc0 	bl	800683c <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e015      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec8:	3328      	adds	r3, #40	; 0x28
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 fd67 	bl	80069a0 <RCCEx_PLL3_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ef8:	4ba1      	ldr	r3, [pc, #644]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f08:	4a9d      	ldr	r2, [pc, #628]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f002 0308 	and.w	r3, r2, #8
 8004f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d01e      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4a:	3328      	adds	r3, #40	; 0x28
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 fd26 	bl	80069a0 <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f60:	4b87      	ldr	r3, [pc, #540]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f70:	4a83      	ldr	r2, [pc, #524]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f002 0310 	and.w	r3, r2, #16
 8004f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d01e      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa8:	3328      	adds	r3, #40	; 0x28
 8004faa:	2102      	movs	r1, #2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fcf7 	bl	80069a0 <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fbe:	4b70      	ldr	r3, [pc, #448]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fce:	4a6c      	ldr	r2, [pc, #432]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	d03e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005000:	d022      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005006:	d81b      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d00b      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005012:	e015      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005018:	3308      	adds	r3, #8
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f001 fc0d 	bl	800683c <RCCEx_PLL2_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005028:	e00f      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502e:	3328      	adds	r3, #40	; 0x28
 8005030:	2102      	movs	r1, #2
 8005032:	4618      	mov	r0, r3
 8005034:	f001 fcb4 	bl	80069a0 <RCCEx_PLL3_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800503e:	e004      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005052:	4b4b      	ldr	r3, [pc, #300]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005062:	4a47      	ldr	r2, [pc, #284]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005064:	430b      	orrs	r3, r1
 8005066:	6593      	str	r3, [r2, #88]	; 0x58
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800507e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005080:	2300      	movs	r3, #0
 8005082:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005084:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005088:	460b      	mov	r3, r1
 800508a:	4313      	orrs	r3, r2
 800508c:	d03b      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800508e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800509a:	d01f      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800509c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050a0:	d818      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80050a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ac:	d007      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80050ae:	e011      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4b33      	ldr	r3, [pc, #204]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a32      	ldr	r2, [pc, #200]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80050bc:	e00f      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c2:	3328      	adds	r3, #40	; 0x28
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 fc6a 	bl	80069a0 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80050d2:	e004      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80050dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e6:	4b26      	ldr	r3, [pc, #152]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	4a22      	ldr	r2, [pc, #136]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6553      	str	r3, [r2, #84]	; 0x54
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005112:	673b      	str	r3, [r7, #112]	; 0x70
 8005114:	2300      	movs	r3, #0
 8005116:	677b      	str	r3, [r7, #116]	; 0x74
 8005118:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d034      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005130:	d007      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005132:	e011      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	4a11      	ldr	r2, [pc, #68]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800513a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005140:	e00e      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005146:	3308      	adds	r3, #8
 8005148:	2102      	movs	r1, #2
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fb76 	bl	800683c <RCCEx_PLL2_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800515e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10d      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005176:	4a02      	ldr	r2, [pc, #8]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005178:	430b      	orrs	r3, r1
 800517a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005198:	66bb      	str	r3, [r7, #104]	; 0x68
 800519a:	2300      	movs	r3, #0
 800519c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800519e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80051a2:	460b      	mov	r3, r1
 80051a4:	4313      	orrs	r3, r2
 80051a6:	d00c      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ac:	3328      	adds	r3, #40	; 0x28
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 fbf5 	bl	80069a0 <RCCEx_PLL3_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80051ce:	663b      	str	r3, [r7, #96]	; 0x60
 80051d0:	2300      	movs	r3, #0
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
 80051d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80051d8:	460b      	mov	r3, r1
 80051da:	4313      	orrs	r3, r2
 80051dc:	d038      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ea:	d018      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80051ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f0:	d811      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f6:	d014      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fc:	d80b      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d011      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	d106      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005208:	4bc3      	ldr	r3, [pc, #780]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4ac2      	ldr	r2, [pc, #776]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800520e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005214:	e008      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800521c:	e004      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005230:	4bb9      	ldr	r3, [pc, #740]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005240:	4ab5      	ldr	r2, [pc, #724]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005242:	430b      	orrs	r3, r1
 8005244:	6553      	str	r3, [r2, #84]	; 0x54
 8005246:	e003      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800524c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800525c:	65bb      	str	r3, [r7, #88]	; 0x58
 800525e:	2300      	movs	r3, #0
 8005260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005262:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005266:	460b      	mov	r3, r1
 8005268:	4313      	orrs	r3, r2
 800526a:	d009      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800526c:	4baa      	ldr	r3, [pc, #680]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527a:	4aa7      	ldr	r2, [pc, #668]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800527c:	430b      	orrs	r3, r1
 800527e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
 800528e:	2300      	movs	r3, #0
 8005290:	657b      	str	r3, [r7, #84]	; 0x54
 8005292:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800529c:	4b9e      	ldr	r3, [pc, #632]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052ac:	4a9a      	ldr	r2, [pc, #616]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48
 80052c0:	2300      	movs	r3, #0
 80052c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d009      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ce:	4b92      	ldr	r3, [pc, #584]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052dc:	4a8e      	ldr	r2, [pc, #568]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052de:	430b      	orrs	r3, r1
 80052e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
 80052f0:	2300      	movs	r3, #0
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
 80052f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80052f8:	460b      	mov	r3, r1
 80052fa:	4313      	orrs	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052fe:	4b86      	ldr	r3, [pc, #536]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	4a85      	ldr	r2, [pc, #532]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005308:	6113      	str	r3, [r2, #16]
 800530a:	4b83      	ldr	r3, [pc, #524]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800530c:	6919      	ldr	r1, [r3, #16]
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005316:	4a80      	ldr	r2, [pc, #512]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
 800532a:	2300      	movs	r3, #0
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800532e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005332:	460b      	mov	r3, r1
 8005334:	4313      	orrs	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005338:	4b77      	ldr	r3, [pc, #476]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	4a74      	ldr	r2, [pc, #464]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005348:	430b      	orrs	r3, r1
 800534a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800534c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005358:	633b      	str	r3, [r7, #48]	; 0x30
 800535a:	2300      	movs	r3, #0
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
 800535e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005368:	4b6b      	ldr	r3, [pc, #428]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005378:	4a67      	ldr	r2, [pc, #412]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800537a:	430b      	orrs	r3, r1
 800537c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	2100      	movs	r1, #0
 8005388:	62b9      	str	r1, [r7, #40]	; 0x28
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005390:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005394:	460b      	mov	r3, r1
 8005396:	4313      	orrs	r3, r2
 8005398:	d011      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539e:	3308      	adds	r3, #8
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fa4a 	bl	800683c <RCCEx_PLL2_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80053ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	2100      	movs	r1, #0
 80053c8:	6239      	str	r1, [r7, #32]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053d4:	460b      	mov	r3, r1
 80053d6:	4313      	orrs	r3, r2
 80053d8:	d011      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053de:	3308      	adds	r3, #8
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fa2a 	bl	800683c <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	2100      	movs	r1, #0
 8005408:	61b9      	str	r1, [r7, #24]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005414:	460b      	mov	r3, r1
 8005416:	4313      	orrs	r3, r2
 8005418:	d011      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541e:	3308      	adds	r3, #8
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fa0a 	bl	800683c <RCCEx_PLL2_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800543a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	2100      	movs	r1, #0
 8005448:	6139      	str	r1, [r7, #16]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005454:	460b      	mov	r3, r1
 8005456:	4313      	orrs	r3, r2
 8005458:	d011      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545e:	3328      	adds	r3, #40	; 0x28
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f001 fa9c 	bl	80069a0 <RCCEx_PLL3_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800546e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800547a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	2100      	movs	r1, #0
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005494:	460b      	mov	r3, r1
 8005496:	4313      	orrs	r3, r2
 8005498:	d011      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800549a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549e:	3328      	adds	r3, #40	; 0x28
 80054a0:	2101      	movs	r1, #1
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fa7c 	bl	80069a0 <RCCEx_PLL3_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	2100      	movs	r1, #0
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d011      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	3328      	adds	r3, #40	; 0x28
 80054e0:	2102      	movs	r1, #2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fa5c 	bl	80069a0 <RCCEx_PLL3_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80054fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
}
 800550c:	4618      	mov	r0, r3
 800550e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005512:	46bd      	mov	sp, r7
 8005514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005518:	58024400 	.word	0x58024400

0800551c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b090      	sub	sp, #64	; 0x40
 8005520:	af00      	add	r7, sp, #0
 8005522:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800552a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800552e:	430b      	orrs	r3, r1
 8005530:	f040 8094 	bne.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005534:	4b9e      	ldr	r3, [pc, #632]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2b04      	cmp	r3, #4
 8005542:	f200 8087 	bhi.w	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005561 	.word	0x08005561
 8005550:	08005589 	.word	0x08005589
 8005554:	080055b1 	.word	0x080055b1
 8005558:	0800564d 	.word	0x0800564d
 800555c:	080055d9 	.word	0x080055d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005560:	4b93      	ldr	r3, [pc, #588]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556c:	d108      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800556e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005572:	4618      	mov	r0, r3
 8005574:	f001 f810 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800557c:	f000 bd45 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005584:	f000 bd41 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005588:	4b89      	ldr	r3, [pc, #548]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005594:	d108      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fd54 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055a4:	f000 bd31 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ac:	f000 bd2d 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055b0:	4b7f      	ldr	r3, [pc, #508]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055bc:	d108      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055be:	f107 030c 	add.w	r3, r7, #12
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fe94 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055cc:	f000 bd1d 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d4:	f000 bd19 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055d8:	4b75      	ldr	r3, [pc, #468]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055e2:	4b73      	ldr	r3, [pc, #460]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d10c      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055f4:	4b6e      	ldr	r3, [pc, #440]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	08db      	lsrs	r3, r3, #3
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	4a6d      	ldr	r2, [pc, #436]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005606:	e01f      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005608:	4b69      	ldr	r3, [pc, #420]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005614:	d106      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561c:	d102      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800561e:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005622:	e011      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005624:	4b62      	ldr	r3, [pc, #392]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005630:	d106      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d102      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800563a:	4b60      	ldr	r3, [pc, #384]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563e:	e003      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005644:	f000 bce1 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005648:	f000 bcdf 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800564c:	4b5c      	ldr	r3, [pc, #368]	; (80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005650:	f000 bcdb 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005658:	f000 bcd7 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800565c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005660:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005664:	430b      	orrs	r3, r1
 8005666:	f040 80ad 	bne.w	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800566c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005672:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567a:	d056      	beq.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	f200 8090 	bhi.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2bc0      	cmp	r3, #192	; 0xc0
 800568a:	f000 8088 	beq.w	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	2bc0      	cmp	r3, #192	; 0xc0
 8005692:	f200 8088 	bhi.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d032      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	f200 8081 	bhi.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d014      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80056b0:	e079      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056be:	d108      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 ff67 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ce:	f000 bc9c 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d6:	f000 bc98 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056da:	4b35      	ldr	r3, [pc, #212]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e6:	d108      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056e8:	f107 0318 	add.w	r3, r7, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fcab 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056f6:	f000 bc88 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056fe:	f000 bc84 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005702:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800570a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800570e:	d108      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fdeb 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800571e:	f000 bc74 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005726:	f000 bc70 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005732:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005734:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b04      	cmp	r3, #4
 800573e:	d10c      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	08db      	lsrs	r3, r3, #3
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005758:	e01f      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005766:	d106      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800576e:	d102      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005774:	e011      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005782:	d106      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578a:	d102      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	e003      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005796:	f000 bc38 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800579a:	f000 bc36 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a2:	f000 bc32 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057aa:	f000 bc2e 	b.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400
 80057b4:	03d09000 	.word	0x03d09000
 80057b8:	003d0900 	.word	0x003d0900
 80057bc:	007a1200 	.word	0x007a1200
 80057c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80057c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80057cc:	430b      	orrs	r3, r1
 80057ce:	f040 809c 	bne.w	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80057d2:	4b9e      	ldr	r3, [pc, #632]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80057da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057e2:	d054      	beq.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ea:	f200 808b 	bhi.w	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057f4:	f000 8083 	beq.w	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057fe:	f200 8081 	bhi.w	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005808:	d02f      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005810:	d878      	bhi.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581e:	d012      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005820:	e070      	b.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005822:	4b8a      	ldr	r3, [pc, #552]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582e:	d107      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005834:	4618      	mov	r0, r3
 8005836:	f000 feaf 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800583e:	e3e4      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005844:	e3e1      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005846:	4b81      	ldr	r3, [pc, #516]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005852:	d107      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005854:	f107 0318 	add.w	r3, r7, #24
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fbf5 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005862:	e3d2      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005868:	e3cf      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800586a:	4b78      	ldr	r3, [pc, #480]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005876:	d107      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005878:	f107 030c 	add.w	r3, r7, #12
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fd37 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005886:	e3c0      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800588c:	e3bd      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800588e:	4b6f      	ldr	r3, [pc, #444]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005896:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005898:	4b6c      	ldr	r3, [pc, #432]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d10c      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058aa:	4b68      	ldr	r3, [pc, #416]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	08db      	lsrs	r3, r3, #3
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	4a66      	ldr	r2, [pc, #408]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80058b6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058bc:	e01e      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058be:	4b63      	ldr	r3, [pc, #396]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ca:	d106      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058d2:	d102      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058d4:	4b5f      	ldr	r3, [pc, #380]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	e010      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058da:	4b5c      	ldr	r3, [pc, #368]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e6:	d106      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d102      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80058f0:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	e002      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80058fa:	e386      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058fc:	e385      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80058fe:	4b57      	ldr	r3, [pc, #348]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005902:	e382      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005908:	e37f      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800590a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800590e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005912:	430b      	orrs	r3, r1
 8005914:	f040 80a7 	bne.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005918:	4b4c      	ldr	r3, [pc, #304]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005920:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005928:	d055      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005930:	f200 8096 	bhi.w	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800593a:	f000 8084 	beq.w	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005944:	f200 808c 	bhi.w	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800594e:	d030      	beq.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005956:	f200 8083 	bhi.w	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005966:	d012      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005968:	e07a      	b.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800596a:	4b38      	ldr	r3, [pc, #224]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005976:	d107      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fe0b 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005986:	e340      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800598c:	e33d      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800598e:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800599a:	d107      	bne.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800599c:	f107 0318 	add.w	r3, r7, #24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fb51 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059aa:	e32e      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b0:	e32b      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059b2:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059be:	d107      	bne.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fc93 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059ce:	e31c      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d4:	e319      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059f2:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	e01e      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a06:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a12:	d106      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a20:	e010      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2e:	d106      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d102      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3c:	e002      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005a42:	e2e2      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a44:	e2e1      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4a:	e2de      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	03d09000 	.word	0x03d09000
 8005a54:	003d0900 	.word	0x003d0900
 8005a58:	007a1200 	.word	0x007a1200
 8005a5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a64:	e2d1      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	f040 809c 	bne.w	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005a74:	4b93      	ldr	r3, [pc, #588]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a84:	d054      	beq.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8c:	f200 808b 	bhi.w	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a96:	f000 8083 	beq.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aa0:	f200 8081 	bhi.w	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	d02f      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	d878      	bhi.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d012      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005ac2:	e070      	b.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ac4:	4b7f      	ldr	r3, [pc, #508]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fd5e 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ae0:	e293      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae6:	e290      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ae8:	4b76      	ldr	r3, [pc, #472]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af4:	d107      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005af6:	f107 0318 	add.w	r3, r7, #24
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 faa4 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b04:	e281      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b0a:	e27e      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b0c:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b18:	d107      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fbe6 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b28:	e26f      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b2e:	e26c      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b30:	4b64      	ldr	r3, [pc, #400]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b3a:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d10c      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b4c:	4b5d      	ldr	r3, [pc, #372]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	08db      	lsrs	r3, r3, #3
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5e:	e01e      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b60:	4b58      	ldr	r3, [pc, #352]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b74:	d102      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b76:	4b55      	ldr	r3, [pc, #340]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b7a:	e010      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b7c:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b88:	d106      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b90:	d102      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b92:	4b4f      	ldr	r3, [pc, #316]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b96:	e002      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b9c:	e235      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b9e:	e234      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ba0:	4b4c      	ldr	r3, [pc, #304]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba4:	e231      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005baa:	e22e      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	f040 808f 	bne.w	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005bba:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bca:	d06b      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bd2:	d874      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bda:	d056      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005be2:	d86c      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bea:	d03b      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bf2:	d864      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bfa:	d021      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c02:	d85c      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d004      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005c12:	e054      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe fa4c 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8005c18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c1a:	e1f6      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c1c:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c28:	d107      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2a:	f107 0318 	add.w	r3, r7, #24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fa0a 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c38:	e1e7      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c3e:	e1e4      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c40:	4b20      	ldr	r3, [pc, #128]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c4e:	f107 030c 	add.w	r3, r7, #12
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fb4c 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c5c:	e1d5      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c62:	e1d2      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c64:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	08db      	lsrs	r3, r3, #3
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c82:	e1c2      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e1bf      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	d102      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c9c:	e1b5      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca2:	e1b2      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb0:	d102      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005cb2:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb6:	e1a8      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbc:	e1a5      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc2:	e1a2      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	03d09000 	.word	0x03d09000
 8005ccc:	003d0900 	.word	0x003d0900
 8005cd0:	007a1200 	.word	0x007a1200
 8005cd4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cdc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	d173      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ce4:	4b9c      	ldr	r3, [pc, #624]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf4:	d02f      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfc:	d863      	bhi.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0a:	d012      	beq.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005d0c:	e05b      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d0e:	4b92      	ldr	r3, [pc, #584]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d1c:	f107 0318 	add.w	r3, r7, #24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 f991 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d2a:	e16e      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d30:	e16b      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d32:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fad3 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d4e:	e15c      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d54:	e159      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d56:	4b80      	ldr	r3, [pc, #512]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d60:	4b7d      	ldr	r3, [pc, #500]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d10c      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d72:	4b79      	ldr	r3, [pc, #484]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	08db      	lsrs	r3, r3, #3
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	4a77      	ldr	r2, [pc, #476]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d84:	e01e      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d86:	4b74      	ldr	r3, [pc, #464]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d92:	d106      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d9a:	d102      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d9c:	4b70      	ldr	r3, [pc, #448]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da0:	e010      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005da2:	4b6d      	ldr	r3, [pc, #436]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dae:	d106      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db6:	d102      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005db8:	4b6a      	ldr	r3, [pc, #424]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005dc2:	e122      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005dc4:	e121      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dca:	e11e      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	d133      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005dd8:	4b5f      	ldr	r3, [pc, #380]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dee:	d012      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005df0:	e023      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fbc7 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e0e:	e0fc      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e14:	e0f9      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e16:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e22:	d107      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e24:	f107 0318 	add.w	r3, r7, #24
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f90d 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e32:	e0ea      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e38:	e0e7      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e3e:	e0e4      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e44:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	f040 808d 	bne.w	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005e4e:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e52:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e56:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e5e:	d06b      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e66:	d874      	bhi.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d056      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d86c      	bhi.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e7e:	d03b      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e86:	d864      	bhi.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8e:	d021      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e96:	d85c      	bhi.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea4:	d004      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005ea6:	e054      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ea8:	f000 f8b8 	bl	800601c <HAL_RCCEx_GetD3PCLK1Freq>
 8005eac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005eae:	e0ac      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005eb0:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ebc:	d107      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ebe:	f107 0318 	add.w	r3, r7, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f8c0 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ecc:	e09d      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed2:	e09a      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee0:	d107      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ee2:	f107 030c 	add.w	r3, r7, #12
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fa02 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef0:	e08b      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef6:	e088      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ef8:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d109      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f04:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	08db      	lsrs	r3, r3, #3
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	4a13      	ldr	r2, [pc, #76]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f16:	e078      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f1c:	e075      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2a:	d102      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f30:	e06b      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f36:	e068      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f44:	d102      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005f46:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f4a:	e05e      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f50:	e05b      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f56:	e058      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	03d09000 	.word	0x03d09000
 8005f60:	003d0900 	.word	0x003d0900
 8005f64:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005f70:	430b      	orrs	r3, r1
 8005f72:	d148      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f74:	4b27      	ldr	r3, [pc, #156]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f84:	d02a      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8c:	d838      	bhi.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f9a:	d00d      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005f9c:	e030      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f9e:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005faa:	d102      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005fac:	4b1a      	ldr	r3, [pc, #104]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fb0:	e02b      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fb6:	e028      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fb8:	4b16      	ldr	r3, [pc, #88]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fae4 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fd4:	e019      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fda:	e016      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fea:	f107 0318 	add.w	r3, r7, #24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f82a 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff8:	e007      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ffe:	e004      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006004:	e001      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800600c:	4618      	mov	r0, r3
 800600e:	3740      	adds	r7, #64	; 0x40
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	58024400 	.word	0x58024400
 8006018:	007a1200 	.word	0x007a1200

0800601c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006020:	f7fe f816 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4904      	ldr	r1, [pc, #16]	; (8006044 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	58024400 	.word	0x58024400
 8006044:	08008450 	.word	0x08008450

08006048 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	; 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006050:	4ba1      	ldr	r3, [pc, #644]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800605a:	4b9f      	ldr	r3, [pc, #636]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	0b1b      	lsrs	r3, r3, #12
 8006060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006064:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006066:	4b9c      	ldr	r3, [pc, #624]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006072:	4b99      	ldr	r3, [pc, #612]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8111 	beq.w	80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b02      	cmp	r3, #2
 800609a:	f000 8083 	beq.w	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f200 80a1 	bhi.w	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d056      	beq.n	8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80060b2:	e099      	b.n	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060b4:	4b88      	ldr	r3, [pc, #544]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02d      	beq.n	800611c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060c0:	4b85      	ldr	r3, [pc, #532]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	08db      	lsrs	r3, r3, #3
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	4a84      	ldr	r2, [pc, #528]	; (80062dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b7b      	ldr	r3, [pc, #492]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800611a:	e087      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b6a      	ldr	r3, [pc, #424]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006142:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615e:	e065      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a03 	vldr	s12, [r7, #12]
 8006186:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a2:	e043      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b48      	ldr	r3, [pc, #288]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e6:	e021      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b37      	ldr	r3, [pc, #220]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a03 	vldr	s12, [r7, #12]
 800620e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800622a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800622c:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	0a5b      	lsrs	r3, r3, #9
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006246:	edd7 6a07 	vldr	s13, [r7, #28]
 800624a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006252:	ee17 2a90 	vmov	r2, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	0c1b      	lsrs	r3, r3, #16
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006274:	edd7 6a07 	vldr	s13, [r7, #28]
 8006278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006280:	ee17 2a90 	vmov	r2, s15
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	0e1b      	lsrs	r3, r3, #24
 800628e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ae:	ee17 2a90 	vmov	r2, s15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80062b6:	e008      	b.n	80062ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	bf00      	nop
 80062cc:	3724      	adds	r7, #36	; 0x24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	58024400 	.word	0x58024400
 80062dc:	03d09000 	.word	0x03d09000
 80062e0:	46000000 	.word	0x46000000
 80062e4:	4c742400 	.word	0x4c742400
 80062e8:	4a742400 	.word	0x4a742400
 80062ec:	4af42400 	.word	0x4af42400

080062f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062f8:	4ba1      	ldr	r3, [pc, #644]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006302:	4b9f      	ldr	r3, [pc, #636]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	0d1b      	lsrs	r3, r3, #20
 8006308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800630e:	4b9c      	ldr	r3, [pc, #624]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800631a:	4b99      	ldr	r3, [pc, #612]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8111 	beq.w	8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b02      	cmp	r3, #2
 8006342:	f000 8083 	beq.w	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b02      	cmp	r3, #2
 800634a:	f200 80a1 	bhi.w	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d056      	beq.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800635a:	e099      	b.n	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635c:	4b88      	ldr	r3, [pc, #544]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02d      	beq.n	80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006368:	4b85      	ldr	r3, [pc, #532]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	4a84      	ldr	r2, [pc, #528]	; (8006584 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80063c2:	e087      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800658c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80063d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d6:	4b6a      	ldr	r3, [pc, #424]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006406:	e065      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006412:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641a:	4b59      	ldr	r3, [pc, #356]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642a:	ed97 6a03 	vldr	s12, [r7, #12]
 800642e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800644a:	e043      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006594 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800645a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645e:	4b48      	ldr	r3, [pc, #288]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006472:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800648e:	e021      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800649e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	0a5b      	lsrs	r3, r3, #9
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fa:	ee17 2a90 	vmov	r2, s15
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006502:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800651c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006528:	ee17 2a90 	vmov	r2, s15
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	0e1b      	lsrs	r3, r3, #24
 8006536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800654a:	edd7 6a07 	vldr	s13, [r7, #28]
 800654e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006556:	ee17 2a90 	vmov	r2, s15
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800655e:	e008      	b.n	8006572 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
}
 8006572:	bf00      	nop
 8006574:	3724      	adds	r7, #36	; 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	03d09000 	.word	0x03d09000
 8006588:	46000000 	.word	0x46000000
 800658c:	4c742400 	.word	0x4c742400
 8006590:	4a742400 	.word	0x4a742400
 8006594:	4af42400 	.word	0x4af42400

08006598 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	; 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065a0:	4ba0      	ldr	r3, [pc, #640]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80065aa:	4b9e      	ldr	r3, [pc, #632]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80065b6:	4b9b      	ldr	r3, [pc, #620]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80065c0:	4b98      	ldr	r3, [pc, #608]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	08db      	lsrs	r3, r3, #3
 80065c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8111 	beq.w	8006806 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	f000 8083 	beq.w	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	f200 80a1 	bhi.w	8006736 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d056      	beq.n	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006600:	e099      	b.n	8006736 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006602:	4b88      	ldr	r3, [pc, #544]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d02d      	beq.n	800666a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800660e:	4b85      	ldr	r3, [pc, #532]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	08db      	lsrs	r3, r3, #3
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	4a83      	ldr	r2, [pc, #524]	; (8006828 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006638:	4b7a      	ldr	r3, [pc, #488]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	ed97 6a03 	vldr	s12, [r7, #12]
 800664c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800665c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006668:	e087      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006830 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667c:	4b69      	ldr	r3, [pc, #420]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006690:	eddf 5a66 	vldr	s11, [pc, #408]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ac:	e065      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006834 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80066bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c0:	4b58      	ldr	r3, [pc, #352]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f0:	e043      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006838 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006704:	4b47      	ldr	r3, [pc, #284]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006714:	ed97 6a03 	vldr	s12, [r7, #12]
 8006718:	eddf 5a44 	vldr	s11, [pc, #272]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800671c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006730:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006734:	e021      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006740:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006830 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006748:	4b36      	ldr	r3, [pc, #216]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006758:	ed97 6a03 	vldr	s12, [r7, #12]
 800675c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006778:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800677a:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	0a5b      	lsrs	r3, r3, #9
 8006780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006794:	edd7 6a07 	vldr	s13, [r7, #28]
 8006798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a0:	ee17 2a90 	vmov	r2, s15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80067a8:	4b1e      	ldr	r3, [pc, #120]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ce:	ee17 2a90 	vmov	r2, s15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	0e1b      	lsrs	r3, r3, #24
 80067dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fc:	ee17 2a90 	vmov	r2, s15
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006804:	e008      	b.n	8006818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	3724      	adds	r7, #36	; 0x24
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	58024400 	.word	0x58024400
 8006828:	03d09000 	.word	0x03d09000
 800682c:	46000000 	.word	0x46000000
 8006830:	4c742400 	.word	0x4c742400
 8006834:	4a742400 	.word	0x4a742400
 8006838:	4af42400 	.word	0x4af42400

0800683c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800684a:	4b53      	ldr	r3, [pc, #332]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d101      	bne.n	800685a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e099      	b.n	800698e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800685a:	4b4f      	ldr	r3, [pc, #316]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4e      	ldr	r2, [pc, #312]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006866:	f7fa fc7f 	bl	8001168 <HAL_GetTick>
 800686a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800686c:	e008      	b.n	8006880 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800686e:	f7fa fc7b 	bl	8001168 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e086      	b.n	800698e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006880:	4b45      	ldr	r3, [pc, #276]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f0      	bne.n	800686e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800688c:	4b42      	ldr	r3, [pc, #264]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	493f      	ldr	r1, [pc, #252]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800689c:	4313      	orrs	r3, r2
 800689e:	628b      	str	r3, [r1, #40]	; 0x28
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	025b      	lsls	r3, r3, #9
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	061b      	lsls	r3, r3, #24
 80068cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068d0:	4931      	ldr	r1, [pc, #196]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	492d      	ldr	r1, [pc, #180]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068e8:	4b2b      	ldr	r3, [pc, #172]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	f023 0220 	bic.w	r2, r3, #32
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	4928      	ldr	r1, [pc, #160]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068fa:	4b27      	ldr	r3, [pc, #156]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	4a26      	ldr	r2, [pc, #152]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006900:	f023 0310 	bic.w	r3, r3, #16
 8006904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <RCCEx_PLL2_Config+0x160>)
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	69d2      	ldr	r2, [r2, #28]
 8006912:	00d2      	lsls	r2, r2, #3
 8006914:	4920      	ldr	r1, [pc, #128]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800691a:	4b1f      	ldr	r3, [pc, #124]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006920:	f043 0310 	orr.w	r3, r3, #16
 8006924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a19      	ldr	r2, [pc, #100]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006938:	e00f      	b.n	800695a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d106      	bne.n	800694e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	4a14      	ldr	r2, [pc, #80]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800694c:	e005      	b.n	800695a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	4a11      	ldr	r2, [pc, #68]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a0e      	ldr	r2, [pc, #56]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006966:	f7fa fbff 	bl	8001168 <HAL_GetTick>
 800696a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800696c:	e008      	b.n	8006980 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800696e:	f7fa fbfb 	bl	8001168 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e006      	b.n	800698e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
 800699c:	ffff0007 	.word	0xffff0007

080069a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ae:	4b53      	ldr	r3, [pc, #332]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d101      	bne.n	80069be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e099      	b.n	8006af2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069be:	4b4f      	ldr	r3, [pc, #316]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4e      	ldr	r2, [pc, #312]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ca:	f7fa fbcd 	bl	8001168 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069d0:	e008      	b.n	80069e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069d2:	f7fa fbc9 	bl	8001168 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e086      	b.n	8006af2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069e4:	4b45      	ldr	r3, [pc, #276]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069f0:	4b42      	ldr	r3, [pc, #264]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	493f      	ldr	r1, [pc, #252]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	628b      	str	r3, [r1, #40]	; 0x28
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	025b      	lsls	r3, r3, #9
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a34:	4931      	ldr	r1, [pc, #196]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a3a:	4b30      	ldr	r3, [pc, #192]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	492d      	ldr	r1, [pc, #180]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	4928      	ldr	r1, [pc, #160]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a5e:	4b27      	ldr	r3, [pc, #156]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	4a26      	ldr	r2, [pc, #152]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a6a:	4b24      	ldr	r3, [pc, #144]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <RCCEx_PLL3_Config+0x160>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	69d2      	ldr	r2, [r2, #28]
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	4920      	ldr	r1, [pc, #128]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a9c:	e00f      	b.n	8006abe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d106      	bne.n	8006ab2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006aa4:	4b15      	ldr	r3, [pc, #84]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	4a14      	ldr	r2, [pc, #80]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ab0:	e005      	b.n	8006abe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	4a11      	ldr	r2, [pc, #68]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006abc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a0e      	ldr	r2, [pc, #56]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aca:	f7fa fb4d 	bl	8001168 <HAL_GetTick>
 8006ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ad0:	e008      	b.n	8006ae4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ad2:	f7fa fb49 	bl	8001168 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e006      	b.n	8006af2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400
 8006b00:	ffff0007 	.word	0xffff0007

08006b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e042      	b.n	8006b9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fa f94d 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	; 0x24
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8ba 	bl	8006cc0 <UART_SetConfig>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e022      	b.n	8006b9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fe16 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fe9d 	bl	80078d4 <UART_CheckIdleState>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d17b      	bne.n	8006cb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_UART_Transmit+0x26>
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e074      	b.n	8006cb8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2221      	movs	r2, #33	; 0x21
 8006bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bde:	f7fa fac3 	bl	8001168 <HAL_GetTick>
 8006be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	88fa      	ldrh	r2, [r7, #6]
 8006be8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfc:	d108      	bne.n	8006c10 <HAL_UART_Transmit+0x6c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d104      	bne.n	8006c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e003      	b.n	8006c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c18:	e030      	b.n	8006c7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 feff 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e03d      	b.n	8006cb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	3302      	adds	r3, #2
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e007      	b.n	8006c6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1c8      	bne.n	8006c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2140      	movs	r1, #64	; 0x40
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fec8 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e006      	b.n	8006cb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e000      	b.n	8006cb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc4:	b092      	sub	sp, #72	; 0x48
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4bbe      	ldr	r3, [pc, #760]	; (8006fe8 <UART_SetConfig+0x328>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4ab3      	ldr	r2, [pc, #716]	; (8006fec <UART_SetConfig+0x32c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	4baf      	ldr	r3, [pc, #700]	; (8006ff0 <UART_SetConfig+0x330>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	6812      	ldr	r2, [r2, #0]
 8006d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	f023 010f 	bic.w	r1, r3, #15
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4aa6      	ldr	r2, [pc, #664]	; (8006ff4 <UART_SetConfig+0x334>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d177      	bne.n	8006e50 <UART_SetConfig+0x190>
 8006d60:	4ba5      	ldr	r3, [pc, #660]	; (8006ff8 <UART_SetConfig+0x338>)
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d68:	2b28      	cmp	r3, #40	; 0x28
 8006d6a:	d86d      	bhi.n	8006e48 <UART_SetConfig+0x188>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0xb4>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006e49 	.word	0x08006e49
 8006d7c:	08006e49 	.word	0x08006e49
 8006d80:	08006e49 	.word	0x08006e49
 8006d84:	08006e49 	.word	0x08006e49
 8006d88:	08006e49 	.word	0x08006e49
 8006d8c:	08006e49 	.word	0x08006e49
 8006d90:	08006e49 	.word	0x08006e49
 8006d94:	08006e21 	.word	0x08006e21
 8006d98:	08006e49 	.word	0x08006e49
 8006d9c:	08006e49 	.word	0x08006e49
 8006da0:	08006e49 	.word	0x08006e49
 8006da4:	08006e49 	.word	0x08006e49
 8006da8:	08006e49 	.word	0x08006e49
 8006dac:	08006e49 	.word	0x08006e49
 8006db0:	08006e49 	.word	0x08006e49
 8006db4:	08006e29 	.word	0x08006e29
 8006db8:	08006e49 	.word	0x08006e49
 8006dbc:	08006e49 	.word	0x08006e49
 8006dc0:	08006e49 	.word	0x08006e49
 8006dc4:	08006e49 	.word	0x08006e49
 8006dc8:	08006e49 	.word	0x08006e49
 8006dcc:	08006e49 	.word	0x08006e49
 8006dd0:	08006e49 	.word	0x08006e49
 8006dd4:	08006e31 	.word	0x08006e31
 8006dd8:	08006e49 	.word	0x08006e49
 8006ddc:	08006e49 	.word	0x08006e49
 8006de0:	08006e49 	.word	0x08006e49
 8006de4:	08006e49 	.word	0x08006e49
 8006de8:	08006e49 	.word	0x08006e49
 8006dec:	08006e49 	.word	0x08006e49
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e49 	.word	0x08006e49
 8006dfc:	08006e49 	.word	0x08006e49
 8006e00:	08006e49 	.word	0x08006e49
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e49 	.word	0x08006e49
 8006e10:	08006e49 	.word	0x08006e49
 8006e14:	08006e41 	.word	0x08006e41
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e222      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e20:	2304      	movs	r3, #4
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e21e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e21a      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e216      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e38:	2320      	movs	r3, #32
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e212      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e20e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e20a      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a69      	ldr	r2, [pc, #420]	; (8006ffc <UART_SetConfig+0x33c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d130      	bne.n	8006ebc <UART_SetConfig+0x1fc>
 8006e5a:	4b67      	ldr	r3, [pc, #412]	; (8006ff8 <UART_SetConfig+0x338>)
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	d826      	bhi.n	8006eb4 <UART_SetConfig+0x1f4>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x1ac>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006e95 	.word	0x08006e95
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e1ec      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e1e8      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e94:	2308      	movs	r3, #8
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9a:	e1e4      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e1e0      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006ea4:	2320      	movs	r3, #32
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e1dc      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e1d8      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e1d4      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a4f      	ldr	r2, [pc, #316]	; (8007000 <UART_SetConfig+0x340>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d130      	bne.n	8006f28 <UART_SetConfig+0x268>
 8006ec6:	4b4c      	ldr	r3, [pc, #304]	; (8006ff8 <UART_SetConfig+0x338>)
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d826      	bhi.n	8006f20 <UART_SetConfig+0x260>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x218>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006ef9 	.word	0x08006ef9
 8006ee0:	08006f01 	.word	0x08006f01
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e1b6      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e1b2      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f06:	e1ae      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0e:	e1aa      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f10:	2320      	movs	r3, #32
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f16:	e1a6      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f18:	2340      	movs	r3, #64	; 0x40
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1e:	e1a2      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f26:	e19e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a35      	ldr	r2, [pc, #212]	; (8007004 <UART_SetConfig+0x344>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d130      	bne.n	8006f94 <UART_SetConfig+0x2d4>
 8006f32:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <UART_SetConfig+0x338>)
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b05      	cmp	r3, #5
 8006f3c:	d826      	bhi.n	8006f8c <UART_SetConfig+0x2cc>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x284>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f5d 	.word	0x08006f5d
 8006f48:	08006f65 	.word	0x08006f65
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e180      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f64:	2304      	movs	r3, #4
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e17c      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e178      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f74:	2310      	movs	r3, #16
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e174      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e170      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e16c      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e168      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <UART_SetConfig+0x348>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d142      	bne.n	8007024 <UART_SetConfig+0x364>
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <UART_SetConfig+0x338>)
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	d838      	bhi.n	800701c <UART_SetConfig+0x35c>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0x2f0>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc9 	.word	0x08006fc9
 8006fb4:	08006fd1 	.word	0x08006fd1
 8006fb8:	08006fd9 	.word	0x08006fd9
 8006fbc:	08006fe1 	.word	0x08006fe1
 8006fc0:	0800700d 	.word	0x0800700d
 8006fc4:	08007015 	.word	0x08007015
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e14a      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e146      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e142      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e13e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8006fe8:	cfff69f3 	.word	0xcfff69f3
 8006fec:	58000c00 	.word	0x58000c00
 8006ff0:	11fff4ff 	.word	0x11fff4ff
 8006ff4:	40011000 	.word	0x40011000
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	40004400 	.word	0x40004400
 8007000:	40004800 	.word	0x40004800
 8007004:	40004c00 	.word	0x40004c00
 8007008:	40005000 	.word	0x40005000
 800700c:	2320      	movs	r3, #32
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e128      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e124      	b.n	8007266 <UART_SetConfig+0x5a6>
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e120      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4acb      	ldr	r2, [pc, #812]	; (8007358 <UART_SetConfig+0x698>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d176      	bne.n	800711c <UART_SetConfig+0x45c>
 800702e:	4bcb      	ldr	r3, [pc, #812]	; (800735c <UART_SetConfig+0x69c>)
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007036:	2b28      	cmp	r3, #40	; 0x28
 8007038:	d86c      	bhi.n	8007114 <UART_SetConfig+0x454>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x380>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	080070e5 	.word	0x080070e5
 8007044:	08007115 	.word	0x08007115
 8007048:	08007115 	.word	0x08007115
 800704c:	08007115 	.word	0x08007115
 8007050:	08007115 	.word	0x08007115
 8007054:	08007115 	.word	0x08007115
 8007058:	08007115 	.word	0x08007115
 800705c:	08007115 	.word	0x08007115
 8007060:	080070ed 	.word	0x080070ed
 8007064:	08007115 	.word	0x08007115
 8007068:	08007115 	.word	0x08007115
 800706c:	08007115 	.word	0x08007115
 8007070:	08007115 	.word	0x08007115
 8007074:	08007115 	.word	0x08007115
 8007078:	08007115 	.word	0x08007115
 800707c:	08007115 	.word	0x08007115
 8007080:	080070f5 	.word	0x080070f5
 8007084:	08007115 	.word	0x08007115
 8007088:	08007115 	.word	0x08007115
 800708c:	08007115 	.word	0x08007115
 8007090:	08007115 	.word	0x08007115
 8007094:	08007115 	.word	0x08007115
 8007098:	08007115 	.word	0x08007115
 800709c:	08007115 	.word	0x08007115
 80070a0:	080070fd 	.word	0x080070fd
 80070a4:	08007115 	.word	0x08007115
 80070a8:	08007115 	.word	0x08007115
 80070ac:	08007115 	.word	0x08007115
 80070b0:	08007115 	.word	0x08007115
 80070b4:	08007115 	.word	0x08007115
 80070b8:	08007115 	.word	0x08007115
 80070bc:	08007115 	.word	0x08007115
 80070c0:	08007105 	.word	0x08007105
 80070c4:	08007115 	.word	0x08007115
 80070c8:	08007115 	.word	0x08007115
 80070cc:	08007115 	.word	0x08007115
 80070d0:	08007115 	.word	0x08007115
 80070d4:	08007115 	.word	0x08007115
 80070d8:	08007115 	.word	0x08007115
 80070dc:	08007115 	.word	0x08007115
 80070e0:	0800710d 	.word	0x0800710d
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e0bc      	b.n	8007266 <UART_SetConfig+0x5a6>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e0b8      	b.n	8007266 <UART_SetConfig+0x5a6>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e0b4      	b.n	8007266 <UART_SetConfig+0x5a6>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e0b0      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007104:	2320      	movs	r3, #32
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e0ac      	b.n	8007266 <UART_SetConfig+0x5a6>
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e0a8      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007114:	2380      	movs	r3, #128	; 0x80
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e0a4      	b.n	8007266 <UART_SetConfig+0x5a6>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a8f      	ldr	r2, [pc, #572]	; (8007360 <UART_SetConfig+0x6a0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d130      	bne.n	8007188 <UART_SetConfig+0x4c8>
 8007126:	4b8d      	ldr	r3, [pc, #564]	; (800735c <UART_SetConfig+0x69c>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	2b05      	cmp	r3, #5
 8007130:	d826      	bhi.n	8007180 <UART_SetConfig+0x4c0>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <UART_SetConfig+0x478>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007151 	.word	0x08007151
 800713c:	08007159 	.word	0x08007159
 8007140:	08007161 	.word	0x08007161
 8007144:	08007169 	.word	0x08007169
 8007148:	08007171 	.word	0x08007171
 800714c:	08007179 	.word	0x08007179
 8007150:	2300      	movs	r3, #0
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e086      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e082      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e07e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e07a      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007170:	2320      	movs	r3, #32
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e076      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e072      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e06e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a75      	ldr	r2, [pc, #468]	; (8007364 <UART_SetConfig+0x6a4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d130      	bne.n	80071f4 <UART_SetConfig+0x534>
 8007192:	4b72      	ldr	r3, [pc, #456]	; (800735c <UART_SetConfig+0x69c>)
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b05      	cmp	r3, #5
 800719c:	d826      	bhi.n	80071ec <UART_SetConfig+0x52c>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <UART_SetConfig+0x4e4>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071bd 	.word	0x080071bd
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	080071cd 	.word	0x080071cd
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	2300      	movs	r3, #0
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e050      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e04c      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e048      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e044      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071dc:	2320      	movs	r3, #32
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e040      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e03c      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e038      	b.n	8007266 <UART_SetConfig+0x5a6>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a5b      	ldr	r2, [pc, #364]	; (8007368 <UART_SetConfig+0x6a8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d130      	bne.n	8007260 <UART_SetConfig+0x5a0>
 80071fe:	4b57      	ldr	r3, [pc, #348]	; (800735c <UART_SetConfig+0x69c>)
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b05      	cmp	r3, #5
 8007208:	d826      	bhi.n	8007258 <UART_SetConfig+0x598>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x550>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007229 	.word	0x08007229
 8007214:	08007231 	.word	0x08007231
 8007218:	08007239 	.word	0x08007239
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	2302      	movs	r3, #2
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e01a      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e016      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e012      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e00e      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007248:	2320      	movs	r3, #32
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e00a      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007250:	2340      	movs	r3, #64	; 0x40
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e006      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e002      	b.n	8007266 <UART_SetConfig+0x5a6>
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3f      	ldr	r2, [pc, #252]	; (8007368 <UART_SetConfig+0x6a8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 80f8 	bne.w	8007462 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007272:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007276:	2b20      	cmp	r3, #32
 8007278:	dc46      	bgt.n	8007308 <UART_SetConfig+0x648>
 800727a:	2b02      	cmp	r3, #2
 800727c:	f2c0 8082 	blt.w	8007384 <UART_SetConfig+0x6c4>
 8007280:	3b02      	subs	r3, #2
 8007282:	2b1e      	cmp	r3, #30
 8007284:	d87e      	bhi.n	8007384 <UART_SetConfig+0x6c4>
 8007286:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x5cc>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	0800730f 	.word	0x0800730f
 8007290:	08007385 	.word	0x08007385
 8007294:	08007317 	.word	0x08007317
 8007298:	08007385 	.word	0x08007385
 800729c:	08007385 	.word	0x08007385
 80072a0:	08007385 	.word	0x08007385
 80072a4:	08007327 	.word	0x08007327
 80072a8:	08007385 	.word	0x08007385
 80072ac:	08007385 	.word	0x08007385
 80072b0:	08007385 	.word	0x08007385
 80072b4:	08007385 	.word	0x08007385
 80072b8:	08007385 	.word	0x08007385
 80072bc:	08007385 	.word	0x08007385
 80072c0:	08007385 	.word	0x08007385
 80072c4:	08007337 	.word	0x08007337
 80072c8:	08007385 	.word	0x08007385
 80072cc:	08007385 	.word	0x08007385
 80072d0:	08007385 	.word	0x08007385
 80072d4:	08007385 	.word	0x08007385
 80072d8:	08007385 	.word	0x08007385
 80072dc:	08007385 	.word	0x08007385
 80072e0:	08007385 	.word	0x08007385
 80072e4:	08007385 	.word	0x08007385
 80072e8:	08007385 	.word	0x08007385
 80072ec:	08007385 	.word	0x08007385
 80072f0:	08007385 	.word	0x08007385
 80072f4:	08007385 	.word	0x08007385
 80072f8:	08007385 	.word	0x08007385
 80072fc:	08007385 	.word	0x08007385
 8007300:	08007385 	.word	0x08007385
 8007304:	08007377 	.word	0x08007377
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d037      	beq.n	800737c <UART_SetConfig+0x6bc>
 800730c:	e03a      	b.n	8007384 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800730e:	f7fe fe85 	bl	800601c <HAL_RCCEx_GetD3PCLK1Freq>
 8007312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007314:	e03c      	b.n	8007390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fe94 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007324:	e034      	b.n	8007390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe ffe0 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007334:	e02c      	b.n	8007390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <UART_SetConfig+0x69c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d016      	beq.n	8007370 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <UART_SetConfig+0x69c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	08db      	lsrs	r3, r3, #3
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	4a07      	ldr	r2, [pc, #28]	; (800736c <UART_SetConfig+0x6ac>)
 800734e:	fa22 f303 	lsr.w	r3, r2, r3
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007354:	e01c      	b.n	8007390 <UART_SetConfig+0x6d0>
 8007356:	bf00      	nop
 8007358:	40011400 	.word	0x40011400
 800735c:	58024400 	.word	0x58024400
 8007360:	40007800 	.word	0x40007800
 8007364:	40007c00 	.word	0x40007c00
 8007368:	58000c00 	.word	0x58000c00
 800736c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007370:	4b9d      	ldr	r3, [pc, #628]	; (80075e8 <UART_SetConfig+0x928>)
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007374:	e00c      	b.n	8007390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007376:	4b9d      	ldr	r3, [pc, #628]	; (80075ec <UART_SetConfig+0x92c>)
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737a:	e009      	b.n	8007390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007382:	e005      	b.n	8007390 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800738e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 81de 	beq.w	8007754 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	4a94      	ldr	r2, [pc, #592]	; (80075f0 <UART_SetConfig+0x930>)
 800739e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4413      	add	r3, r2
 80073b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d305      	bcc.n	80073c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d903      	bls.n	80073d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073ce:	e1c1      	b.n	8007754 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	2200      	movs	r2, #0
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	60fa      	str	r2, [r7, #12]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	4a84      	ldr	r2, [pc, #528]	; (80075f0 <UART_SetConfig+0x930>)
 80073de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2200      	movs	r2, #0
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073f2:	f7f8 ff71 	bl	80002d8 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	020b      	lsls	r3, r1, #8
 8007408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800740c:	0202      	lsls	r2, r0, #8
 800740e:	6979      	ldr	r1, [r7, #20]
 8007410:	6849      	ldr	r1, [r1, #4]
 8007412:	0849      	lsrs	r1, r1, #1
 8007414:	2000      	movs	r0, #0
 8007416:	460c      	mov	r4, r1
 8007418:	4605      	mov	r5, r0
 800741a:	eb12 0804 	adds.w	r8, r2, r4
 800741e:	eb43 0905 	adc.w	r9, r3, r5
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	469a      	mov	sl, r3
 800742a:	4693      	mov	fp, r2
 800742c:	4652      	mov	r2, sl
 800742e:	465b      	mov	r3, fp
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f8 ff50 	bl	80002d8 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4613      	mov	r3, r2
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007446:	d308      	bcc.n	800745a <UART_SetConfig+0x79a>
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744e:	d204      	bcs.n	800745a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	60da      	str	r2, [r3, #12]
 8007458:	e17c      	b.n	8007754 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007460:	e178      	b.n	8007754 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746a:	f040 80c5 	bne.w	80075f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800746e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007472:	2b20      	cmp	r3, #32
 8007474:	dc48      	bgt.n	8007508 <UART_SetConfig+0x848>
 8007476:	2b00      	cmp	r3, #0
 8007478:	db7b      	blt.n	8007572 <UART_SetConfig+0x8b2>
 800747a:	2b20      	cmp	r3, #32
 800747c:	d879      	bhi.n	8007572 <UART_SetConfig+0x8b2>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x7c4>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	0800750f 	.word	0x0800750f
 8007488:	08007517 	.word	0x08007517
 800748c:	08007573 	.word	0x08007573
 8007490:	08007573 	.word	0x08007573
 8007494:	0800751f 	.word	0x0800751f
 8007498:	08007573 	.word	0x08007573
 800749c:	08007573 	.word	0x08007573
 80074a0:	08007573 	.word	0x08007573
 80074a4:	0800752f 	.word	0x0800752f
 80074a8:	08007573 	.word	0x08007573
 80074ac:	08007573 	.word	0x08007573
 80074b0:	08007573 	.word	0x08007573
 80074b4:	08007573 	.word	0x08007573
 80074b8:	08007573 	.word	0x08007573
 80074bc:	08007573 	.word	0x08007573
 80074c0:	08007573 	.word	0x08007573
 80074c4:	0800753f 	.word	0x0800753f
 80074c8:	08007573 	.word	0x08007573
 80074cc:	08007573 	.word	0x08007573
 80074d0:	08007573 	.word	0x08007573
 80074d4:	08007573 	.word	0x08007573
 80074d8:	08007573 	.word	0x08007573
 80074dc:	08007573 	.word	0x08007573
 80074e0:	08007573 	.word	0x08007573
 80074e4:	08007573 	.word	0x08007573
 80074e8:	08007573 	.word	0x08007573
 80074ec:	08007573 	.word	0x08007573
 80074f0:	08007573 	.word	0x08007573
 80074f4:	08007573 	.word	0x08007573
 80074f8:	08007573 	.word	0x08007573
 80074fc:	08007573 	.word	0x08007573
 8007500:	08007573 	.word	0x08007573
 8007504:	08007565 	.word	0x08007565
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	d02e      	beq.n	800756a <UART_SetConfig+0x8aa>
 800750c:	e031      	b.n	8007572 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fc fdcf 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8007512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007514:	e033      	b.n	800757e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007516:	f7fc fde1 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 800751a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800751c:	e02f      	b.n	800757e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fd90 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800752c:	e027      	b.n	800757e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fedc 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800753c:	e01f      	b.n	800757e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800753e:	4b2d      	ldr	r3, [pc, #180]	; (80075f4 <UART_SetConfig+0x934>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800754a:	4b2a      	ldr	r3, [pc, #168]	; (80075f4 <UART_SetConfig+0x934>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	08db      	lsrs	r3, r3, #3
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <UART_SetConfig+0x928>)
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800755c:	e00f      	b.n	800757e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800755e:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <UART_SetConfig+0x928>)
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007562:	e00c      	b.n	800757e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007564:	4b21      	ldr	r3, [pc, #132]	; (80075ec <UART_SetConfig+0x92c>)
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007568:	e009      	b.n	800757e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007570:	e005      	b.n	800757e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800757c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80e7 	beq.w	8007754 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <UART_SetConfig+0x930>)
 800758c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007590:	461a      	mov	r2, r3
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007594:	fbb3 f3f2 	udiv	r3, r3, r2
 8007598:	005a      	lsls	r2, r3, #1
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	441a      	add	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	2b0f      	cmp	r3, #15
 80075b0:	d916      	bls.n	80075e0 <UART_SetConfig+0x920>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b8:	d212      	bcs.n	80075e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f023 030f 	bic.w	r3, r3, #15
 80075c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075d2:	4313      	orrs	r3, r2
 80075d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	e0b9      	b.n	8007754 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075e6:	e0b5      	b.n	8007754 <UART_SetConfig+0xa94>
 80075e8:	03d09000 	.word	0x03d09000
 80075ec:	003d0900 	.word	0x003d0900
 80075f0:	08008460 	.word	0x08008460
 80075f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80075f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	dc49      	bgt.n	8007694 <UART_SetConfig+0x9d4>
 8007600:	2b00      	cmp	r3, #0
 8007602:	db7c      	blt.n	80076fe <UART_SetConfig+0xa3e>
 8007604:	2b20      	cmp	r3, #32
 8007606:	d87a      	bhi.n	80076fe <UART_SetConfig+0xa3e>
 8007608:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x950>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	0800769b 	.word	0x0800769b
 8007614:	080076a3 	.word	0x080076a3
 8007618:	080076ff 	.word	0x080076ff
 800761c:	080076ff 	.word	0x080076ff
 8007620:	080076ab 	.word	0x080076ab
 8007624:	080076ff 	.word	0x080076ff
 8007628:	080076ff 	.word	0x080076ff
 800762c:	080076ff 	.word	0x080076ff
 8007630:	080076bb 	.word	0x080076bb
 8007634:	080076ff 	.word	0x080076ff
 8007638:	080076ff 	.word	0x080076ff
 800763c:	080076ff 	.word	0x080076ff
 8007640:	080076ff 	.word	0x080076ff
 8007644:	080076ff 	.word	0x080076ff
 8007648:	080076ff 	.word	0x080076ff
 800764c:	080076ff 	.word	0x080076ff
 8007650:	080076cb 	.word	0x080076cb
 8007654:	080076ff 	.word	0x080076ff
 8007658:	080076ff 	.word	0x080076ff
 800765c:	080076ff 	.word	0x080076ff
 8007660:	080076ff 	.word	0x080076ff
 8007664:	080076ff 	.word	0x080076ff
 8007668:	080076ff 	.word	0x080076ff
 800766c:	080076ff 	.word	0x080076ff
 8007670:	080076ff 	.word	0x080076ff
 8007674:	080076ff 	.word	0x080076ff
 8007678:	080076ff 	.word	0x080076ff
 800767c:	080076ff 	.word	0x080076ff
 8007680:	080076ff 	.word	0x080076ff
 8007684:	080076ff 	.word	0x080076ff
 8007688:	080076ff 	.word	0x080076ff
 800768c:	080076ff 	.word	0x080076ff
 8007690:	080076f1 	.word	0x080076f1
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	d02e      	beq.n	80076f6 <UART_SetConfig+0xa36>
 8007698:	e031      	b.n	80076fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800769a:	f7fc fd09 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 800769e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076a0:	e033      	b.n	800770a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a2:	f7fc fd1b 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 80076a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076a8:	e02f      	b.n	800770a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fcca 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b8:	e027      	b.n	800770a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ba:	f107 0318 	add.w	r3, r7, #24
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe fe16 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076c8:	e01f      	b.n	800770a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ca:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <UART_SetConfig+0xac0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <UART_SetConfig+0xac0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	08db      	lsrs	r3, r3, #3
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	4a28      	ldr	r2, [pc, #160]	; (8007784 <UART_SetConfig+0xac4>)
 80076e2:	fa22 f303 	lsr.w	r3, r2, r3
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076e8:	e00f      	b.n	800770a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80076ea:	4b26      	ldr	r3, [pc, #152]	; (8007784 <UART_SetConfig+0xac4>)
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ee:	e00c      	b.n	800770a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076f0:	4b25      	ldr	r3, [pc, #148]	; (8007788 <UART_SetConfig+0xac8>)
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f4:	e009      	b.n	800770a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fc:	e005      	b.n	800770a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007708:	bf00      	nop
    }

    if (pclk != 0U)
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d021      	beq.n	8007754 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	4a1d      	ldr	r2, [pc, #116]	; (800778c <UART_SetConfig+0xacc>)
 8007716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771a:	461a      	mov	r2, r3
 800771c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	441a      	add	r2, r3
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d909      	bls.n	800774e <UART_SetConfig+0xa8e>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007740:	d205      	bcs.n	800774e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	b29a      	uxth	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60da      	str	r2, [r3, #12]
 800774c:	e002      	b.n	8007754 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2201      	movs	r2, #1
 8007758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2201      	movs	r2, #1
 8007760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2200      	movs	r2, #0
 8007768:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007770:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007774:	4618      	mov	r0, r3
 8007776:	3748      	adds	r7, #72	; 0x48
 8007778:	46bd      	mov	sp, r7
 800777a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800777e:	bf00      	nop
 8007780:	58024400 	.word	0x58024400
 8007784:	03d09000 	.word	0x03d09000
 8007788:	003d0900 	.word	0x003d0900
 800778c:	08008460 	.word	0x08008460

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b098      	sub	sp, #96	; 0x60
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7f9 fc40 	bl	8001168 <HAL_GetTick>
 80078e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d12f      	bne.n	8007958 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f88e 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d022      	beq.n	8007958 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007926:	653b      	str	r3, [r7, #80]	; 0x50
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007930:	647b      	str	r3, [r7, #68]	; 0x44
 8007932:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e063      	b.n	8007a20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b04      	cmp	r3, #4
 8007964:	d149      	bne.n	80079fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007966:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800796e:	2200      	movs	r2, #0
 8007970:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f857 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d03c      	beq.n	80079fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	623b      	str	r3, [r7, #32]
   return(result);
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799e:	633b      	str	r3, [r7, #48]	; 0x30
 80079a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e6      	bne.n	8007980 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d2:	61fa      	str	r2, [r7, #28]
 80079d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	69b9      	ldr	r1, [r7, #24]
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	617b      	str	r3, [r7, #20]
   return(result);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e012      	b.n	8007a20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3758      	adds	r7, #88	; 0x58
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a38:	e049      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d045      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a42:	f7f9 fb91 	bl	8001168 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d302      	bcc.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e048      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d031      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d110      	bne.n	8007a9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f839 	bl	8007af8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e029      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa8:	d111      	bne.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f81f 	bl	8007af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e00f      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	bf0c      	ite	eq
 8007ade:	2301      	moveq	r3, #1
 8007ae0:	2300      	movne	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d0a6      	beq.n	8007a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b095      	sub	sp, #84	; 0x54
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e6      	bne.n	8007b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3308      	adds	r3, #8
 8007b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <UART_EndRxTransfer+0xc8>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e5      	bne.n	8007b32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d118      	bne.n	8007ba0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f023 0310 	bic.w	r3, r3, #16
 8007b82:	647b      	str	r3, [r7, #68]	; 0x44
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e6      	bne.n	8007b6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007bb4:	bf00      	nop
 8007bb6:	3754      	adds	r7, #84	; 0x54
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	effffffe 	.word	0xeffffffe

08007bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_UARTEx_DisableFifoMode+0x16>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e027      	b.n	8007c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2224      	movs	r2, #36	; 0x24
 8007be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0201 	bic.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e02d      	b.n	8007caa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2224      	movs	r2, #36	; 0x24
 8007c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f850 	bl	8007d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e02d      	b.n	8007d26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2224      	movs	r2, #36	; 0x24
 8007cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f812 	bl	8007d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d108      	bne.n	8007d52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d50:	e031      	b.n	8007db6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d52:	2310      	movs	r3, #16
 8007d54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d56:	2310      	movs	r3, #16
 8007d58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	0e5b      	lsrs	r3, r3, #25
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	0f5b      	lsrs	r3, r3, #29
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	7b3a      	ldrb	r2, [r7, #12]
 8007d7e:	4911      	ldr	r1, [pc, #68]	; (8007dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8007d80:	5c8a      	ldrb	r2, [r1, r2]
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d86:	7b3a      	ldrb	r2, [r7, #12]
 8007d88:	490f      	ldr	r1, [pc, #60]	; (8007dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8007d8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	7b7a      	ldrb	r2, [r7, #13]
 8007d9c:	4909      	ldr	r1, [pc, #36]	; (8007dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8007d9e:	5c8a      	ldrb	r2, [r1, r2]
 8007da0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007da4:	7b7a      	ldrb	r2, [r7, #13]
 8007da6:	4908      	ldr	r1, [pc, #32]	; (8007dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8007da8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007daa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007db6:	bf00      	nop
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	08008478 	.word	0x08008478
 8007dc8:	08008480 	.word	0x08008480

08007dcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dcc:	b084      	sub	sp, #16
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	f107 001c 	add.w	r0, r7, #28
 8007dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d120      	bne.n	8007e26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	4b2a      	ldr	r3, [pc, #168]	; (8007ea0 <USB_CoreInit+0xd4>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d105      	bne.n	8007e1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 faac 	bl	8008378 <USB_CoreReset>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	e01a      	b.n	8007e5c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 faa0 	bl	8008378 <USB_CoreReset>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e4e:	e005      	b.n	8007e5c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d116      	bne.n	8007e90 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e70:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <USB_CoreInit+0xd8>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f043 0206 	orr.w	r2, r3, #6
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f043 0220 	orr.w	r2, r3, #32
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e9c:	b004      	add	sp, #16
 8007e9e:	4770      	bx	lr
 8007ea0:	ffbdffbf 	.word	0xffbdffbf
 8007ea4:	03ee0000 	.word	0x03ee0000

08007ea8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f023 0201 	bic.w	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d115      	bne.n	8007f18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f7f9 f941 	bl	8001180 <HAL_Delay>
      ms++;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3301      	adds	r3, #1
 8007f02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa29 	bl	800835c <USB_GetMode>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d01e      	beq.n	8007f4e <USB_SetCurrentMode+0x84>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b31      	cmp	r3, #49	; 0x31
 8007f14:	d9f0      	bls.n	8007ef8 <USB_SetCurrentMode+0x2e>
 8007f16:	e01a      	b.n	8007f4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d115      	bne.n	8007f4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	f7f9 f928 	bl	8001180 <HAL_Delay>
      ms++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa10 	bl	800835c <USB_GetMode>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <USB_SetCurrentMode+0x84>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b31      	cmp	r3, #49	; 0x31
 8007f46:	d9f0      	bls.n	8007f2a <USB_SetCurrentMode+0x60>
 8007f48:	e001      	b.n	8007f4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e005      	b.n	8007f5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b32      	cmp	r3, #50	; 0x32
 8007f52:	d101      	bne.n	8007f58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f64:	b084      	sub	sp, #16
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b086      	sub	sp, #24
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	e009      	b.n	8007f98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	3340      	adds	r3, #64	; 0x40
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b0e      	cmp	r3, #14
 8007f9c:	d9f2      	bls.n	8007f84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d11c      	bne.n	8007fde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb2:	f043 0302 	orr.w	r3, r3, #2
 8007fb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e005      	b.n	8007fea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008004:	461a      	mov	r2, r3
 8008006:	680b      	ldr	r3, [r1, #0]
 8008008:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10c      	bne.n	800802a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008016:	2100      	movs	r1, #0
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f965 	bl	80082e8 <USB_SetDevSpeed>
 800801e:	e008      	b.n	8008032 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008020:	2101      	movs	r1, #1
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f960 	bl	80082e8 <USB_SetDevSpeed>
 8008028:	e003      	b.n	8008032 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800802a:	2103      	movs	r1, #3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f95b 	bl	80082e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008032:	2110      	movs	r1, #16
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f8f3 	bl	8008220 <USB_FlushTxFifo>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f91f 	bl	8008288 <USB_FlushRxFifo>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	461a      	mov	r2, r3
 800805c:	2300      	movs	r3, #0
 800805e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	461a      	mov	r2, r3
 8008068:	2300      	movs	r3, #0
 800806a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	461a      	mov	r2, r3
 8008074:	2300      	movs	r3, #0
 8008076:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e043      	b.n	8008106 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008094:	d118      	bne.n	80080c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a8:	461a      	mov	r2, r3
 80080aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	e013      	b.n	80080da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080be:	461a      	mov	r2, r3
 80080c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	e008      	b.n	80080da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	461a      	mov	r2, r3
 80080d6:	2300      	movs	r3, #0
 80080d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e6:	461a      	mov	r2, r3
 80080e8:	2300      	movs	r3, #0
 80080ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f8:	461a      	mov	r2, r3
 80080fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	429a      	cmp	r2, r3
 800810c:	d3b7      	bcc.n	800807e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800810e:	2300      	movs	r3, #0
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	e043      	b.n	800819c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800812a:	d118      	bne.n	800815e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813e:	461a      	mov	r2, r3
 8008140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	e013      	b.n	8008170 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008154:	461a      	mov	r2, r3
 8008156:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	e008      	b.n	8008170 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816a:	461a      	mov	r2, r3
 800816c:	2300      	movs	r3, #0
 800816e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817c:	461a      	mov	r2, r3
 800817e:	2300      	movs	r3, #0
 8008180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	461a      	mov	r2, r3
 8008190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008194:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	3301      	adds	r3, #1
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d3b7      	bcc.n	8008114 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	f043 0210 	orr.w	r2, r3, #16
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	4b0e      	ldr	r3, [pc, #56]	; (8008218 <USB_DevInit+0x2b4>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f043 0208 	orr.w	r2, r3, #8
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d105      	bne.n	8008208 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <USB_DevInit+0x2b8>)
 8008202:	4313      	orrs	r3, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008214:	b004      	add	sp, #16
 8008216:	4770      	bx	lr
 8008218:	803c3800 	.word	0x803c3800
 800821c:	40000004 	.word	0x40000004

08008220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4a13      	ldr	r2, [pc, #76]	; (8008284 <USB_FlushTxFifo+0x64>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d901      	bls.n	8008240 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e01b      	b.n	8008278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	daf2      	bge.n	800822e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	019b      	lsls	r3, r3, #6
 8008250:	f043 0220 	orr.w	r2, r3, #32
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a08      	ldr	r2, [pc, #32]	; (8008284 <USB_FlushTxFifo+0x64>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d901      	bls.n	800826a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e006      	b.n	8008278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b20      	cmp	r3, #32
 8008274:	d0f0      	beq.n	8008258 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	00030d40 	.word	0x00030d40

08008288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a11      	ldr	r2, [pc, #68]	; (80082e4 <USB_FlushRxFifo+0x5c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e018      	b.n	80082d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	daf2      	bge.n	8008294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2210      	movs	r2, #16
 80082b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3301      	adds	r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a08      	ldr	r2, [pc, #32]	; (80082e4 <USB_FlushRxFifo+0x5c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e006      	b.n	80082d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d0f0      	beq.n	80082b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	00030d40 	.word	0x00030d40

080082e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008334:	f023 0303 	bic.w	r3, r3, #3
 8008338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008348:	f043 0302 	orr.w	r3, r3, #2
 800834c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	f003 0301 	and.w	r3, r3, #1
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4a13      	ldr	r2, [pc, #76]	; (80083dc <USB_CoreReset+0x64>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d901      	bls.n	8008396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e01b      	b.n	80083ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	daf2      	bge.n	8008384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f043 0201 	orr.w	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <USB_CoreReset+0x64>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d901      	bls.n	80083c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e006      	b.n	80083ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d0f0      	beq.n	80083ae <USB_CoreReset+0x36>

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	00030d40 	.word	0x00030d40

080083e0 <memset>:
 80083e0:	4402      	add	r2, r0
 80083e2:	4603      	mov	r3, r0
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d100      	bne.n	80083ea <memset+0xa>
 80083e8:	4770      	bx	lr
 80083ea:	f803 1b01 	strb.w	r1, [r3], #1
 80083ee:	e7f9      	b.n	80083e4 <memset+0x4>

080083f0 <__libc_init_array>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4d0d      	ldr	r5, [pc, #52]	; (8008428 <__libc_init_array+0x38>)
 80083f4:	4c0d      	ldr	r4, [pc, #52]	; (800842c <__libc_init_array+0x3c>)
 80083f6:	1b64      	subs	r4, r4, r5
 80083f8:	10a4      	asrs	r4, r4, #2
 80083fa:	2600      	movs	r6, #0
 80083fc:	42a6      	cmp	r6, r4
 80083fe:	d109      	bne.n	8008414 <__libc_init_array+0x24>
 8008400:	4d0b      	ldr	r5, [pc, #44]	; (8008430 <__libc_init_array+0x40>)
 8008402:	4c0c      	ldr	r4, [pc, #48]	; (8008434 <__libc_init_array+0x44>)
 8008404:	f000 f818 	bl	8008438 <_init>
 8008408:	1b64      	subs	r4, r4, r5
 800840a:	10a4      	asrs	r4, r4, #2
 800840c:	2600      	movs	r6, #0
 800840e:	42a6      	cmp	r6, r4
 8008410:	d105      	bne.n	800841e <__libc_init_array+0x2e>
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	f855 3b04 	ldr.w	r3, [r5], #4
 8008418:	4798      	blx	r3
 800841a:	3601      	adds	r6, #1
 800841c:	e7ee      	b.n	80083fc <__libc_init_array+0xc>
 800841e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008422:	4798      	blx	r3
 8008424:	3601      	adds	r6, #1
 8008426:	e7f2      	b.n	800840e <__libc_init_array+0x1e>
 8008428:	08008490 	.word	0x08008490
 800842c:	08008490 	.word	0x08008490
 8008430:	08008490 	.word	0x08008490
 8008434:	08008494 	.word	0x08008494

08008438 <_init>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr

08008444 <_fini>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr
